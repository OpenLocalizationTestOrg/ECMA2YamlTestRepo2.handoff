{"nodes":[{"pos":[7223,7262],"content":"Represents one table of in-memory data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents one table of in-memory data.","pos":[0,39]}]},{"pos":[7275,10284],"content":"The DataTable is a central object in the ADO.NET library. Other objects that use the DataTable include the <xref:System.Data.DataSet> and the <xref:System.Data.DataView>.       When accessing DataTable objects, note that they are conditionally case sensitive. For example, if one DataTable is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive. However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive. A <xref:System.Data.DataSet> can contain two DataTable objects that have the same <xref:System.Data.DataTable.TableName%2A> property value but different <xref:System.Data.DataTable.Namespace%2A> property values. For more information about working with DataTable objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md).       If you are creating a DataTable programmatically, you must first define its schema by adding <xref:System.Data.DataColumn> objects to the <xref:System.Data.DataColumnCollection> (accessed through the <xref:System.Data.DataTable.Columns%2A> property). For more information about adding <xref:System.Data.DataColumn> objects, see [Adding Columns to a DataTable](~/add/includes/ajax-current-ext-md.md).       To add rows to a DataTable, you must first use the <xref:System.Data.DataTable.NewRow%2A> method to return a new <xref:System.Data.DataRow> object. The <xref:System.Data.DataTable.NewRow%2A> method returns a row with the schema of the DataTable, as it is defined by the table's <xref:System.Data.DataColumnCollection>. The maximum number of rows that a DataTable can store is 16,777,216. For more information, see [Adding Data to a DataTable](~/add/includes/ajax-current-ext-md.md).       The DataTable also contains a collection of <xref:System.Data.Constraint> objects that can be used to ensure the integrity of the data. For more information, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md).       There are many DataTable events that can be used to determine when changes are made to a table. These include <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>, and <xref:System.Data.DataTable.RowDeleted>. For more information about the events that can be used with a DataTable, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).       When an instance of DataTable is created, some of the read/write properties are set to initial values. For a list of these values, see the <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName> constructor topic.      > [!NOTE] >  The <xref:System.Data.DataSet> and DataTable objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for .NET Framework remoting. These are the only ADO.NET objects that you can use for .NET Framework remoting.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DataTable is a central object in the ADO.NET library.","pos":[0,57]},{"content":"Other objects that use the DataTable include the &lt;xref:System.Data.DataSet&gt; and the &lt;xref:System.Data.DataView&gt;.","pos":[58,170],"source":" Other objects that use the DataTable include the <xref:System.Data.DataSet> and the <xref:System.Data.DataView>."},{"content":"When accessing DataTable objects, note that they are conditionally case sensitive.","pos":[177,259]},{"content":"For example, if one DataTable is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive.","pos":[260,425]},{"content":"However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive.","pos":[426,537]},{"content":"A &lt;xref:System.Data.DataSet&gt; can contain two DataTable objects that have the same &lt;xref:System.Data.DataTable.TableName%2A&gt; property value but different &lt;xref:System.Data.DataTable.Namespace%2A&gt; property values.","pos":[538,749],"source":" A <xref:System.Data.DataSet> can contain two DataTable objects that have the same <xref:System.Data.DataTable.TableName%2A> property value but different <xref:System.Data.DataTable.Namespace%2A> property values."},{"content":"For more information about working with DataTable objects, see <bpt id=\"p1\">[</bpt>Creating a DataTable<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[750,875],"source":" For more information about working with DataTable objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md)."},{"content":"If you are creating a DataTable programmatically, you must first define its schema by adding &lt;xref:System.Data.DataColumn&gt; objects to the &lt;xref:System.Data.DataColumnCollection&gt; (accessed through the &lt;xref:System.Data.DataTable.Columns%2A&gt; property).","pos":[882,1132],"source":"       If you are creating a DataTable programmatically, you must first define its schema by adding <xref:System.Data.DataColumn> objects to the <xref:System.Data.DataColumnCollection> (accessed through the <xref:System.Data.DataTable.Columns%2A> property)."},{"content":"For more information about adding &lt;xref:System.Data.DataColumn&gt; objects, see <bpt id=\"p1\">[</bpt>Adding Columns to a DataTable<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1133,1281],"source":" For more information about adding <xref:System.Data.DataColumn> objects, see [Adding Columns to a DataTable](~/add/includes/ajax-current-ext-md.md)."},{"content":"To add rows to a DataTable, you must first use the &lt;xref:System.Data.DataTable.NewRow%2A&gt; method to return a new &lt;xref:System.Data.DataRow&gt; object.","pos":[1288,1435],"source":"       To add rows to a DataTable, you must first use the <xref:System.Data.DataTable.NewRow%2A> method to return a new <xref:System.Data.DataRow> object."},{"content":"The &lt;xref:System.Data.DataTable.NewRow%2A&gt; method returns a row with the schema of the DataTable, as it is defined by the table's &lt;xref:System.Data.DataColumnCollection&gt;.","pos":[1436,1606],"source":" The <xref:System.Data.DataTable.NewRow%2A> method returns a row with the schema of the DataTable, as it is defined by the table's <xref:System.Data.DataColumnCollection>."},{"content":"The maximum number of rows that a DataTable can store is 16,777,216.","pos":[1607,1675]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Adding Data to a DataTable<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1676,1770],"source":" For more information, see [Adding Data to a DataTable](~/add/includes/ajax-current-ext-md.md)."},{"content":"The DataTable also contains a collection of &lt;xref:System.Data.Constraint&gt; objects that can be used to ensure the integrity of the data.","pos":[1777,1912],"source":"       The DataTable also contains a collection of <xref:System.Data.Constraint> objects that can be used to ensure the integrity of the data."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>DataTable Constraints<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1913,2002],"source":" For more information, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md)."},{"content":"There are many DataTable events that can be used to determine when changes are made to a table.","pos":[2009,2104]},{"content":"These include &lt;xref:System.Data.DataTable.RowChanged&gt;, &lt;xref:System.Data.DataTable.RowChanging&gt;, &lt;xref:System.Data.DataTable.RowDeleting&gt;, and &lt;xref:System.Data.DataTable.RowDeleted&gt;.","pos":[2105,2288],"source":" These include <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>, and <xref:System.Data.DataTable.RowDeleted>."},{"content":"For more information about the events that can be used with a DataTable, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2289,2433],"source":" For more information about the events that can be used with a DataTable, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"When an instance of DataTable is created, some of the read/write properties are set to initial values.","pos":[2440,2542]},{"content":"For a list of these values, see the &lt;xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName&gt; constructor topic.","pos":[2543,2662],"source":" For a list of these values, see the <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName> constructor topic."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Data.DataSet&gt; and DataTable objects inherit from &lt;xref:System.ComponentModel.MarshalByValueComponent&gt;, and support the &lt;xref:System.Runtime.Serialization.ISerializable&gt; interface for .NET Framework remoting.","pos":[2668,2905],"source":"      > [!NOTE] >  The <xref:System.Data.DataSet> and DataTable objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for .NET Framework remoting."},{"content":"These are the only ADO.NET objects that you can use for .NET Framework remoting.","pos":[2906,2986]}]},{"pos":[13428,13529],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with no arguments.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class with no arguments."},{"pos":[13542,14470],"content":"The constructor sets initial values for all properties of the <xref:System.Data.DataTable> object. The following table shows the properties and their default values. When an instance of <xref:System.Data.DataTable> is created, the following read/write properties are set to initial values.      |Property|Default value|   |--------------|-------------------|   |**CaseSensitive**|Same as the parent <xref:System.Data.DataSet>, if it belongs to one. Otherwise, `false`.|   |**DisplayExpression**|Empty string (\"\")|   |**Locale**|Same as the parent <xref:System.Data.DataSet> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale%2A> property); if no parent exists, the default is the current system <xref:System.Globalization.CultureInfo>.|   |**MinimumCapacity**|50 rows.|       You can change the value for any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The constructor sets initial values for all properties of the &lt;xref:System.Data.DataTable&gt; object.","pos":[0,98],"source":"The constructor sets initial values for all properties of the <xref:System.Data.DataTable> object."},{"content":"The following table shows the properties and their default values.","pos":[99,165]},{"content":"When an instance of &lt;xref:System.Data.DataTable&gt; is created, the following read/write properties are set to initial values.","pos":[166,289],"source":" When an instance of <xref:System.Data.DataTable> is created, the following read/write properties are set to initial values."},{"content":"|Property|Default value|   |--------------|-------------------|   |<bpt id=\"p1\">**</bpt>CaseSensitive<ept id=\"p1\">**</ept>|Same as the parent &lt;xref:System.Data.DataSet&gt;, if it belongs to one.","pos":[295,448],"source":"      |Property|Default value|   |--------------|-------------------|   |**CaseSensitive**|Same as the parent <xref:System.Data.DataSet>, if it belongs to one."},{"content":"Otherwise, <ph id=\"ph1\">`false`</ph>.|   |<bpt id=\"p1\">**</bpt>DisplayExpression<ept id=\"p1\">**</ept>|Empty string (\"\")|   |<bpt id=\"p2\">**</bpt>Locale<ept id=\"p2\">**</ept>|Same as the parent &lt;xref:System.Data.DataSet&gt; object's &lt;xref:System.Globalization.CultureInfo&gt; (returned by the &lt;xref:System.Data.DataSet.Locale%2A&gt; property); if no parent exists, the default is the current system &lt;xref:System.Globalization.CultureInfo&gt;.|   |<bpt id=\"p3\">**</bpt>MinimumCapacity<ept id=\"p3\">**</ept>|50 rows.|       You can change the value for any of these properties through a separate call to the property.","pos":[449,917],"source":" Otherwise, `false`.|   |**DisplayExpression**|Empty string (\"\")|   |**Locale**|Same as the parent <xref:System.Data.DataSet> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale%2A> property); if no parent exists, the default is the current system <xref:System.Globalization.CultureInfo>.|   |**MinimumCapacity**|50 rows.|       You can change the value for any of these properties through a separate call to the property."}]},{"pos":[15422,15535],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified table name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class with the specified table name."},{"pos":[16091,16313],"content":"The name to give the table. If `tableName` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string, a default name is given when added to the <xref href=\"System.Data.DataTableCollection\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name to give the table.","pos":[0,27]},{"content":"If <ph id=\"ph1\">`tableName`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty string, a default name is given when added to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTableCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[28,222],"source":" If `tableName` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string, a default name is given when added to the <xref href=\"System.Data.DataTableCollection\"></xref>."}]},{"pos":[16976,17197],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and the &lt;xref:System.Runtime.Serialization.StreamingContext&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class with the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> and the <xref:System.Runtime.Serialization.StreamingContext>."},{"pos":[17209,17343],"content":"This implementation of the <xref:System.Data.DataTable> constructor is required for <xref:System.Runtime.Serialization.ISerializable>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This implementation of the &lt;xref:System.Data.DataTable&gt; constructor is required for &lt;xref:System.Runtime.Serialization.ISerializable&gt;.","pos":[0,134],"source":"This implementation of the <xref:System.Data.DataTable> constructor is required for <xref:System.Runtime.Serialization.ISerializable>."}]},{"pos":[17606,17660],"content":"The data needed to serialize or deserialize an object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data needed to serialize or deserialize an object.","pos":[0,54]}]},{"pos":[17756,17812],"content":"The source and destination of a given serialized stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source and destination of a given serialized stream.","pos":[0,56]}]},{"pos":[18282,18410],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified table name and namespace.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class using the specified table name and namespace."},{"pos":[18575,18797],"content":"The name to give the table. If `tableName` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string, a default name is given when added to the <xref href=\"System.Data.DataTableCollection\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name to give the table.","pos":[0,27]},{"content":"If <ph id=\"ph1\">`tableName`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty string, a default name is given when added to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTableCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[28,222],"source":" If `tableName` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string, a default name is given when added to the <xref href=\"System.Data.DataTableCollection\"></xref>."}]},{"pos":[18868,19006],"content":"The namespace for the XML representation of the data stored in the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The namespace for the XML representation of the data stored in the <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>."},{"pos":[19400,19488],"content":"Commits all the changes made to this table since the last time AcceptChanges was called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Commits all the changes made to this table since the last time AcceptChanges was called.","pos":[0,88]}]},{"pos":[19501,19989],"content":"When AcceptChanges is called, any <xref:System.Data.DataRow> object still in edit mode successfully ends its edits. The <xref:System.Data.DataRowState> also changes: all `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.       The AcceptChanges method is generally called on a <xref:System.Data.DataTable> after you attempt to update the <xref:System.Data.DataSet> using the <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When AcceptChanges is called, any &lt;xref:System.Data.DataRow&gt; object still in edit mode successfully ends its edits.","pos":[0,115],"source":"When AcceptChanges is called, any <xref:System.Data.DataRow> object still in edit mode successfully ends its edits."},{"content":"The &lt;xref:System.Data.DataRowState&gt; also changes: all <ph id=\"ph1\">`Added`</ph> and <ph id=\"ph2\">`Modified`</ph> rows become <ph id=\"ph3\">`Unchanged`</ph>, and <ph id=\"ph4\">`Deleted`</ph> rows are removed.","pos":[116,249],"source":" The <xref:System.Data.DataRowState> also changes: all `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed."},{"content":"The AcceptChanges method is generally called on a &lt;xref:System.Data.DataTable&gt; after you attempt to update the &lt;xref:System.Data.DataSet&gt; using the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName&gt; method.","pos":[256,486],"source":"       The AcceptChanges method is generally called on a <xref:System.Data.DataTable> after you attempt to update the <xref:System.Data.DataSet> using the <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> method."}]},{"pos":[20944,21109],"content":"Begins the initialization of a <xref href=\"System.Data.DataTable\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins the initialization of a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used on a form or used by another component.","pos":[0,126],"source":"Begins the initialization of a <xref href=\"System.Data.DataTable\"></xref> that is used on a form or used by another component."},{"content":"The initialization occurs at run time.","pos":[127,165]}]},{"pos":[21121,21492],"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized.","pos":[0,371],"nodes":[{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.","pos":[0,154]},{"content":"The &lt;xref:System.Data.DataTable.EndInit%2A&gt; method ends the initialization.","pos":[155,230],"source":" The <xref:System.Data.DataTable.EndInit%2A> method ends the initialization."},{"content":"Using the BeginInit and &lt;xref:System.Data.DataTable.EndInit%2A&gt; methods prevents the control from being used before it is fully initialized.","pos":[231,371],"source":" Using the BeginInit and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized."}]}]},{"pos":[21966,22045],"content":"Turns off notifications, index maintenance, and constraints while loading data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Turns off notifications, index maintenance, and constraints while loading data.","pos":[0,79]}]},{"pos":[22057,22187],"content":"Use BeginLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use BeginLoadData in conjunction with &lt;xref:System.Data.DataTable.LoadDataRow%2A&gt; and &lt;xref:System.Data.DataTable.EndLoadData%2A&gt;.","pos":[0,130],"source":"Use BeginLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.EndLoadData%2A>."}]},{"pos":[22657,22730],"content":"Indicates whether string comparisons within the table are case-sensitive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether string comparisons within the table are case-sensitive.","pos":[0,73]}]},{"pos":[22742,22833],"content":"The CaseSensitive property affects string comparisons in sorting, searching, and filtering.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The CaseSensitive property affects string comparisons in sorting, searching, and filtering.","pos":[0,91]}]},{"pos":[23431,23926],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comparison is case-sensitive; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is set to the parent <xref href=\"System.Data.DataSet\"></xref> object's <xref:System.Data.DataSet.CaseSensitive*> property, or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the <xref href=\"System.Data.DataTable\"></xref> was created independently of a <xref href=\"System.Data.DataSet\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the comparison is case-sensitive; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,171],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comparison is case-sensitive; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is set to the parent <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object's &lt;xref:System.Data.DataSet.CaseSensitive*&gt; property, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> was created independently of a <bpt id=\"p4\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[172,495],"source":" The default is set to the parent <xref href=\"System.Data.DataSet\"></xref> object's <xref:System.Data.DataSet.CaseSensitive*> property, or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the <xref href=\"System.Data.DataTable\"></xref> was created independently of a <xref href=\"System.Data.DataSet\"></xref>."}]},{"pos":[24329,24420],"content":"Gets the collection of child relations for this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the collection of child relations for this <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[24433,25179],"content":"A <xref:System.Data.DataRelation> defines the relationship between two tables. Typically, two tables are linked through a single field that contains the same data. For example, a table which contains address data may have a single field containing codes that represent countries/regions. A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table. A <xref:System.Data.DataRelation>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.Data.DataRelation> defines the relationship between two tables. Typically, two tables are linked through a single field that contains the same data. For example, a table which contains address data may have a single field containing codes that represent countries/regions. A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table. A <xref:System.Data.DataRelation>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.","pos":[0,746],"nodes":[{"content":"A &lt;xref:System.Data.DataRelation&gt; defines the relationship between two tables.","pos":[0,78],"source":"A <xref:System.Data.DataRelation> defines the relationship between two tables."},{"content":"Typically, two tables are linked through a single field that contains the same data.","pos":[79,163]},{"content":"For example, a table which contains address data may have a single field containing codes that represent countries/regions.","pos":[164,287]},{"content":"A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table.","pos":[288,507]},{"content":"A &lt;xref:System.Data.DataRelation&gt;, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.","pos":[508,746],"source":" A <xref:System.Data.DataRelation>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table."}]}]},{"pos":[25981,26186],"content":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains the child relations for the table. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the child relations for the table.","pos":[0,106],"source":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains the child relations for the table."},{"content":"An empty collection is returned if no <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist.","pos":[107,205],"source":" An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist."}]},{"pos":[26549,26615],"content":"Clears the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of all data.","needQuote":true,"needEscape":true,"source":"Clears the <xref href=\"System.Data.DataTable\"></xref> of all data."},{"pos":[26628,27198],"content":"All rows in all tables are removed. An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.       If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or Clear raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time. When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be processed before you call Clear.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"All rows in all tables are removed. An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.       If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or Clear raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time. When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be processed before you call Clear.","pos":[0,568],"nodes":[{"content":"All rows in all tables are removed.","pos":[0,35]},{"content":"An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.","pos":[36,151]},{"content":"If the &lt;xref:System.Data.DataSet&gt; is bound to an &lt;xref:System.Xml.XmlDataDocument&gt;, calling &lt;xref:System.Data.DataSet.Clear%2A?displayProperty=fullName&gt; or Clear raises the &lt;xref:System.NotSupportedException&gt;.","pos":[158,367],"source":"       If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or Clear raises the <xref:System.NotSupportedException>."},{"content":"To avoid this situation, traverse each table, removing each row one at a time.","pos":[368,446]},{"content":"When you use &lt;xref:System.Data.DataTable.NewRow%2A&gt; to create new rows, the rows must be processed before you call Clear.","pos":[447,568],"source":" When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be processed before you call Clear."}]}]},{"pos":[27927,28080],"content":"Clones the structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, including all <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> schemas and constraints.","needQuote":true,"needEscape":true,"source":"Clones the structure of the <xref href=\"System.Data.DataTable\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas and constraints."},{"pos":[28093,28525],"content":"If these classes have been derived, the clone will also be of the same derived classes.       Clone creates a new <xref:System.Data.DataTable> with the same structure as the original <xref:System.Data.DataTable>, but does not copy any data (the new <xref:System.Data.DataTable> will not contain any `DataRows`). To copy both the structure and data into a new <xref:System.Data.DataTable>, use <xref:System.Data.DataTable.Copy%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If these classes have been derived, the clone will also be of the same derived classes.","pos":[0,87]},{"content":"Clone creates a new &lt;xref:System.Data.DataTable&gt; with the same structure as the original &lt;xref:System.Data.DataTable&gt;, but does not copy any data (the new &lt;xref:System.Data.DataTable&gt; will not contain any <ph id=\"ph1\">`DataRows`</ph>).","pos":[94,311],"source":"       Clone creates a new <xref:System.Data.DataTable> with the same structure as the original <xref:System.Data.DataTable>, but does not copy any data (the new <xref:System.Data.DataTable> will not contain any `DataRows`)."},{"content":"To copy both the structure and data into a new &lt;xref:System.Data.DataTable&gt;, use &lt;xref:System.Data.DataTable.Copy%2A&gt;.","pos":[312,430],"source":" To copy both the structure and data into a new <xref:System.Data.DataTable>, use <xref:System.Data.DataTable.Copy%2A>."}]},{"pos":[51077,51205],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same schema as the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Data.DataTable\"></xref> with the same schema as the current <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[51592,51738],"content":"Occurs after a value has been changed for the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Occurs after a value has been changed for the specified <xref href=\"System.Data.DataColumn\"></xref> in a <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[51750,51843],"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"pos":[52292,52304],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[52655,52800],"content":"Occurs when a value is being changed for the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Occurs when a value is being changed for the specified <xref href=\"System.Data.DataColumn\"></xref> in a <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[52812,52905],"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"pos":[53357,53369],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[53688,53745],"content":"Gets the collection of columns that belong to this table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of columns that belong to this table.","pos":[0,57]}]},{"pos":[53757,53875],"content":"The <xref:System.Data.DataColumnCollection> determines the schema of a table by defining the data type of each column.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataColumnCollection&gt; determines the schema of a table by defining the data type of each column.","pos":[0,118],"source":"The <xref:System.Data.DataColumnCollection> determines the schema of a table by defining the data type of each column."}]},{"pos":[54385,54636],"content":"A <xref href=\"System.Data.DataColumnCollection\"></xref> that contains the collection of <xref href=\"System.Data.DataColumn\"></xref> objects for the table. An empty collection is returned if no <xref href=\"System.Data.DataColumn\"></xref> objects exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumnCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the collection of <bpt id=\"p2\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects for the table.","pos":[0,154],"source":"A <xref href=\"System.Data.DataColumnCollection\"></xref> that contains the collection of <xref href=\"System.Data.DataColumn\"></xref> objects for the table."},{"content":"An empty collection is returned if no <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist.","pos":[155,251],"source":" An empty collection is returned if no <xref href=\"System.Data.DataColumn\"></xref> objects exist."}]},{"pos":[55099,55179],"content":"Computes the given expression on the current rows that pass the filter criteria.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the given expression on the current rows that pass the filter criteria.","pos":[0,80]}]},{"pos":[55192,56358],"content":"The `expression` parameter requires an aggregate function. For example, the following is a legal expression:       `Count(Quantity)`       But this expression is not:       `Sum (Quantity * UnitPrice)`       If you must perform an operation on two or more columns, you should create a <xref:System.Data.DataColumn>, set its <xref:System.Data.DataColumn.Expression%2A> property to an appropriate expression, and use an aggregate expression on the resulting column. In that case, given a <xref:System.Data.DataColumn> with the name \"total\", and the <xref:System.Data.DataColumn.Expression%2A> property set to this:       `\"Quantity * UnitPrice\"`       The expression argument for the Compute method would then be this:       `Sum(total)`       The second parameter, `filter`, determines which rows are used in the expression. For example, if the table contains a date column named \"colDate\", you could limit the rows with the following expression:       `colDate > 1/1/99 AND colDate < 17/1/99`       For rules on creating expressions for both parameters, see the <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`expression`</ph> parameter requires an aggregate function.","pos":[0,58],"source":"The `expression` parameter requires an aggregate function."},{"content":"For example, the following is a legal expression:       <ph id=\"ph1\">`Count(Quantity)`</ph>       But this expression is not:       <ph id=\"ph2\">`Sum (Quantity * UnitPrice)`</ph>       If you must perform an operation on two or more columns, you should create a &lt;xref:System.Data.DataColumn&gt;, set its &lt;xref:System.Data.DataColumn.Expression%2A&gt; property to an appropriate expression, and use an aggregate expression on the resulting column.","pos":[59,463],"source":" For example, the following is a legal expression:       `Count(Quantity)`       But this expression is not:       `Sum (Quantity * UnitPrice)`       If you must perform an operation on two or more columns, you should create a <xref:System.Data.DataColumn>, set its <xref:System.Data.DataColumn.Expression%2A> property to an appropriate expression, and use an aggregate expression on the resulting column."},{"content":"In that case, given a &lt;xref:System.Data.DataColumn&gt; with the name \"total\", and the &lt;xref:System.Data.DataColumn.Expression%2A&gt; property set to this:       <ph id=\"ph1\">`\"Quantity * UnitPrice\"`</ph>       The expression argument for the Compute method would then be this:       <ph id=\"ph2\">`Sum(total)`</ph>       The second parameter, <ph id=\"ph3\">`filter`</ph>, determines which rows are used in the expression.","pos":[464,823],"source":" In that case, given a <xref:System.Data.DataColumn> with the name \"total\", and the <xref:System.Data.DataColumn.Expression%2A> property set to this:       `\"Quantity * UnitPrice\"`       The expression argument for the Compute method would then be this:       `Sum(total)`       The second parameter, `filter`, determines which rows are used in the expression."},{"content":"For example, if the table contains a date column named \"colDate\", you could limit the rows with the following expression:       <ph id=\"ph1\">`colDate &gt; 1/1/99 AND colDate &lt; 17/1/99`</ph>       For rules on creating expressions for both parameters, see the &lt;xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName&gt; property.","pos":[824,1140],"source":" For example, if the table contains a date column named \"colDate\", you could limit the rows with the following expression:       `colDate > 1/1/99 AND colDate < 17/1/99`       For rules on creating expressions for both parameters, see the <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> property."}]},{"pos":[56909,56935],"content":"The expression to compute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression to compute.","pos":[0,26]}]},{"pos":[56998,57059],"content":"The filter to limit the rows that evaluate in the expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filter to limit the rows that evaluate in the expression.","pos":[0,61]}]},{"pos":[57117,57283],"content":"An <xref:System.Object>, set to the result of the computation. If the expression evaluates to null, the return value will be <xref href=\"System.DBNull.Value\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt;, set to the result of the computation.","pos":[0,62],"source":"An <xref:System.Object>, set to the result of the computation."},{"content":"If the expression evaluates to null, the return value will be <bpt id=\"p1\">&lt;xref href=\"System.DBNull.Value\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[63,166],"source":" If the expression evaluates to null, the return value will be <xref href=\"System.DBNull.Value\"></xref>."}]},{"pos":[57665,57725],"content":"Gets the collection of constraints maintained by this table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of constraints maintained by this table.","pos":[0,60]}]},{"pos":[57738,58500],"content":"A <xref:System.Data.ForeignKeyConstraint> restricts the action performed when a value in a column (or columns) is either deleted or updated. Such a constraint is intended to be used with primary key columns. In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.      -   The child rows can also be deleted (a cascading action).      -   The values in the child column (or columns) can be set to null values.      -   The values in the child column (or columns) can be set to default values.      -   An exception can be generated.       A <xref:System.Data.UniqueConstraint> becomes active when attempting to set a value in a primary key to a non-unique value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.Data.ForeignKeyConstraint> restricts the action performed when a value in a column (or columns) is either deleted or updated. Such a constraint is intended to be used with primary key columns. In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.      -   The child rows can also be deleted (a cascading action).      -   The values in the child column (or columns) can be set to null values.      -   The values in the child column (or columns) can be set to default values.      -   An exception can be generated.       A <xref:System.Data.UniqueConstraint> becomes active when attempting to set a value in a primary key to a non-unique value.","pos":[0,752],"nodes":[{"content":"A &lt;xref:System.Data.ForeignKeyConstraint&gt; restricts the action performed when a value in a column (or columns) is either deleted or updated.","pos":[0,140],"source":"A <xref:System.Data.ForeignKeyConstraint> restricts the action performed when a value in a column (or columns) is either deleted or updated."},{"content":"Such a constraint is intended to be used with primary key columns.","pos":[141,207]},{"content":"In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.","pos":[208,353]},{"content":"-   The child rows can also be deleted (a cascading action).","pos":[359,419]},{"content":"-   The values in the child column (or columns) can be set to null values.","pos":[425,499]},{"content":"-   The values in the child column (or columns) can be set to default values.","pos":[505,582]},{"content":"-   An exception can be generated.","pos":[588,622]},{"content":"A &lt;xref:System.Data.UniqueConstraint&gt; becomes active when attempting to set a value in a primary key to a non-unique value.","pos":[629,752],"source":"       A <xref:System.Data.UniqueConstraint> becomes active when attempting to set a value in a primary key to a non-unique value."}]}]},{"pos":[59033,59284],"content":"A <xref href=\"System.Data.ConstraintCollection\"></xref> that contains the collection of <xref href=\"System.Data.Constraint\"></xref> objects for the table. An empty collection is returned if no <xref href=\"System.Data.Constraint\"></xref> objects exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.ConstraintCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the collection of <bpt id=\"p2\">&lt;xref href=\"System.Data.Constraint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects for the table.","pos":[0,154],"source":"A <xref href=\"System.Data.ConstraintCollection\"></xref> that contains the collection of <xref href=\"System.Data.Constraint\"></xref> objects for the table."},{"content":"An empty collection is returned if no <bpt id=\"p1\">&lt;xref href=\"System.Data.Constraint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist.","pos":[155,251],"source":" An empty collection is returned if no <xref href=\"System.Data.Constraint\"></xref> objects exist."}]},{"pos":[59639,59726],"content":"Copies both the structure and data for this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Copies both the structure and data for this <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[60375,60942],"content":"A new <xref href=\"System.Data.DataTable\"></xref> with the same structure (table schemas and constraints) and data as this <xref href=\"System.Data.DataTable\"></xref>.       If these classes have been derived, the copy will also be of the same derived classes.       Copy creates a new <xref href=\"System.Data.DataTable\"></xref> with the same structure and data as the original <xref href=\"System.Data.DataTable\"></xref>. To copy the structure to a new <xref href=\"System.Data.DataTable\"></xref>, but not the data, use <xref:System.Data.DataTable.Clone*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same structure (table schemas and constraints) and data as this <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,165],"source":"A new <xref href=\"System.Data.DataTable\"></xref> with the same structure (table schemas and constraints) and data as this <xref href=\"System.Data.DataTable\"></xref>."},{"content":"If these classes have been derived, the copy will also be of the same derived classes.","pos":[172,258]},{"content":"Copy creates a new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same structure and data as the original <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[265,419],"source":"       Copy creates a new <xref href=\"System.Data.DataTable\"></xref> with the same structure and data as the original <xref href=\"System.Data.DataTable\"></xref>."},{"content":"To copy the structure to a new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, but not the data, use &lt;xref:System.Data.DataTable.Clone*&gt;.","pos":[420,553],"source":" To copy the structure to a new <xref href=\"System.Data.DataTable\"></xref>, but not the data, use <xref:System.Data.DataTable.Clone*>."}]},{"pos":[61351,61491],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> corresponding to the data within this <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> corresponding to the data within this <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[62360,62518],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing one result set, corresponding to the source <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one result set, corresponding to the source <xref href=\"System.Data.DataTable\"></xref> instance."},{"pos":[62928,62997],"content":"Creates a new instance of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a new instance of <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[63164,63183],"content":"The new expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new expression.","pos":[0,19]}]},{"pos":[63552,63630],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which this table belongs.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.DataSet\"></xref> to which this table belongs."},{"pos":[63642,63827],"content":"If a control is data bound to a <xref:System.Data.DataTable>, and the table belongs to a <xref:System.Data.DataSet>, you can get to the <xref:System.Data.DataSet> through this property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a control is data bound to a &lt;xref:System.Data.DataTable&gt;, and the table belongs to a &lt;xref:System.Data.DataSet&gt;, you can get to the &lt;xref:System.Data.DataSet&gt; through this property.","pos":[0,185],"source":"If a control is data bound to a <xref:System.Data.DataTable>, and the table belongs to a <xref:System.Data.DataSet>, you can get to the <xref:System.Data.DataSet> through this property."}]},{"pos":[64335,64408],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which this table belongs.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> to which this table belongs."},{"pos":[64790,64881],"content":"Gets a customized view of the table that may include a filtered view, or a cursor position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a customized view of the table that may include a filtered view, or a cursor position.","pos":[0,91]}]},{"pos":[64893,65027],"content":"The DefaultView property returns a <xref:System.Data.DataView> you can use to sort, filter, and search a <xref:System.Data.DataTable>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DefaultView property returns a &lt;xref:System.Data.DataView&gt; you can use to sort, filter, and search a &lt;xref:System.Data.DataTable&gt;.","pos":[0,134],"source":"The DefaultView property returns a <xref:System.Data.DataView> you can use to sort, filter, and search a <xref:System.Data.DataTable>."}]},{"pos":[65768,65877],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataView\"></xref> associated with the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[66293,66554],"content":"Gets or sets the expression that returns a value used to represent this table in the user interface. The <xref uid=\"langword_csharp_DisplayExpression\" name=\"DisplayExpression\" href=\"\"></xref> property lets you display the name of this table in a user interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the expression that returns a value used to represent this table in the user interface.","pos":[0,100]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DisplayExpression\" name=\"DisplayExpression\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property lets you display the name of this table in a user interface.","pos":[101,261],"source":" The <xref uid=\"langword_csharp_DisplayExpression\" name=\"DisplayExpression\" href=\"\"></xref> property lets you display the name of this table in a user interface."}]},{"pos":[66681,66698],"content":"A display string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A display string.","pos":[0,17]}]},{"pos":[67074,67237],"content":"Ends the initialization of a <xref href=\"System.Data.DataTable\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends the initialization of a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used on a form or used by another component.","pos":[0,124],"source":"Ends the initialization of a <xref href=\"System.Data.DataTable\"></xref> that is used on a form or used by another component."},{"content":"The initialization occurs at run time.","pos":[125,163]}]},{"pos":[67249,67622],"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataTable.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataTable.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.","pos":[0,373],"nodes":[{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.","pos":[0,152]},{"content":"The &lt;xref:System.Data.DataTable.BeginInit%2A&gt; method starts the initialization.","pos":[153,232],"source":" The <xref:System.Data.DataTable.BeginInit%2A> method starts the initialization."},{"content":"Using the &lt;xref:System.Data.DataTable.BeginInit%2A&gt; and EndInit methods prevents the control from being used before it is fully initialized.","pos":[233,373],"source":" Using the <xref:System.Data.DataTable.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized."}]}]},{"pos":[68082,68160],"content":"Turns on notifications, index maintenance, and constraints after loading data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Turns on notifications, index maintenance, and constraints after loading data.","pos":[0,78]}]},{"pos":[68172,68302],"content":"Use EndLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.BeginLoadData%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use EndLoadData in conjunction with &lt;xref:System.Data.DataTable.LoadDataRow%2A&gt; and &lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;.","pos":[0,130],"source":"Use EndLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.BeginLoadData%2A>."}]},{"pos":[68793,68844],"content":"Gets the collection of customized user information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of customized user information.","pos":[0,51]}]},{"pos":[68857,69208],"content":"Use the ExtendedProperties to add custom information to a <xref:System.Data.DataTable>. Add information with the `Add` method. Retrieve information with the `Item` method.       Extended properties must be of type <xref:System.String>. Properties that are not of type String are not persisted when the <xref:System.Data.DataTable> is written as XML.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ExtendedProperties to add custom information to a &lt;xref:System.Data.DataTable&gt;.","pos":[0,87],"source":"Use the ExtendedProperties to add custom information to a <xref:System.Data.DataTable>."},{"content":"Add information with the <ph id=\"ph1\">`Add`</ph> method.","pos":[88,126],"source":" Add information with the `Add` method."},{"content":"Retrieve information with the <ph id=\"ph1\">`Item`</ph> method.","pos":[127,171],"source":" Retrieve information with the `Item` method."},{"content":"Extended properties must be of type &lt;xref:System.String&gt;.","pos":[178,235],"source":"       Extended properties must be of type <xref:System.String>."},{"content":"Properties that are not of type String are not persisted when the &lt;xref:System.Data.DataTable&gt; is written as XML.","pos":[236,349],"source":" Properties that are not of type String are not persisted when the <xref:System.Data.DataTable> is written as XML."}]},{"pos":[69777,69869],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.PropertyCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains custom user information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.PropertyCollection\"></xref> that contains custom user information."},{"pos":[70279,70363],"content":"Checks whether initialization is in progress. The initialization occurs at run time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks whether initialization is in progress. The initialization occurs at run time.","pos":[0,84],"nodes":[{"content":"Checks whether initialization is in progress.","pos":[0,45]},{"content":"The initialization occurs at run time.","pos":[46,84]}]}]},{"pos":[70477,70489],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[70827,71009],"content":"Gets a copy of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains all changes made to it since it was loaded or &lt;xref:System.Data.DataTable.AcceptChanges*&gt; was last called.","needQuote":true,"needEscape":true,"source":"Gets a copy of the <xref href=\"System.Data.DataTable\"></xref> that contains all changes made to it since it was loaded or <xref:System.Data.DataTable.AcceptChanges*> was last called."},{"pos":[71021,71506],"content":"Creates a new <xref:System.Data.DataSet> containing a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` (`Nothing` in Visual Basic) if there are no rows in the original <xref:System.Data.DataSet> with pending changes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Creates a new &lt;xref:System.Data.DataSet&gt; containing a copy of all rows in the original &lt;xref:System.Data.DataSet&gt; that have pending changes.","pos":[0,140],"source":"Creates a new <xref:System.Data.DataSet> containing a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes."},{"content":"Relationship constraints can cause additional unchanged rows to be added to the new &lt;xref:System.Data.DataSet&gt; if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.","pos":[141,345],"source":" Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows."},{"content":"The method returns <ph id=\"ph1\">`null`</ph> (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if there are no rows in the original &lt;xref:System.Data.DataSet&gt; with pending changes.","pos":[346,485],"source":" The method returns `null` (`Nothing` in Visual Basic) if there are no rows in the original <xref:System.Data.DataSet> with pending changes."}]},{"pos":[71926,72090],"content":"A copy of the changes from this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if no changes are found.","needQuote":true,"needEscape":true,"source":"A copy of the changes from this <xref href=\"System.Data.DataTable\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no changes are found."},{"pos":[72562,72807],"content":"Gets a copy of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing all changes made to it since it was last loaded, or since &lt;xref:System.Data.DataTable.AcceptChanges*&gt; was called, filtered by <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a copy of the <xref href=\"System.Data.DataTable\"></xref> containing all changes made to it since it was last loaded, or since <xref:System.Data.DataTable.AcceptChanges*> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>."},{"pos":[72820,73170],"content":"The <xref:System.Data.DataTable.GetChanges%2A> method is used to produce a second <xref:System.Data.DataTable> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.       Relationship constraints may cause unchanged parent rows to be included.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.GetChanges%2A&gt; method is used to produce a second &lt;xref:System.Data.DataTable&gt; object that contains only the changes introduced into the original.","pos":[0,178],"source":"The <xref:System.Data.DataTable.GetChanges%2A> method is used to produce a second <xref:System.Data.DataTable> object that contains only the changes introduced into the original."},{"content":"Use the <ph id=\"ph1\">`rowStates`</ph> argument to specify the type of changes the new object should include.","pos":[179,269],"source":" Use the `rowStates` argument to specify the type of changes the new object should include."},{"content":"Relationship constraints may cause unchanged parent rows to be included.","pos":[276,348]}]},{"pos":[73635,73699],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.DataRowState\"></xref> values."},{"pos":[73765,74149],"content":"A filtered copy of the <xref href=\"System.Data.DataTable\"></xref> that can have actions performed on it, and later be merged back in the <xref href=\"System.Data.DataTable\"></xref> using <xref:System.Data.DataSet.Merge*>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A filtered copy of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that can have actions performed on it, and later be merged back in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> using &lt;xref:System.Data.DataSet.Merge*&gt;.","pos":[0,220],"source":"A filtered copy of the <xref href=\"System.Data.DataTable\"></xref> that can have actions performed on it, and later be merged back in the <xref href=\"System.Data.DataTable\"></xref> using <xref:System.Data.DataSet.Merge*>."},{"content":"If no rows of the desired <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> are found, the method returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[221,384],"source":" If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[74673,74892],"content":"This method returns an <bpt id=\"p1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance containing the Web Services Description Language (WSDL) that describes the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> for Web Services.","needQuote":true,"needEscape":true,"source":"This method returns an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> instance containing the Web Services Description Language (WSDL) that describes the <xref href=\"System.Data.DataTable\"></xref> for Web Services."},{"pos":[75130,75194],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> instance."},{"pos":[75277,75342],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> instance."},{"pos":[75729,75815],"content":"Gets an array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that contain errors.","needQuote":true,"needEscape":true,"source":"Gets an array of <xref href=\"System.Data.DataRow\"></xref> objects that contain errors."},{"pos":[75827,76294],"content":"Returns the list of <xref:System.Data.DataRow> objects that have <xref:System.Data.DataRow.RowError%2A> set. For example, errors can occur when calling <xref:System.Data.Common.DataAdapter.Update%2A> with <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> set to **true**. Do not invoke <xref:System.Data.DataTable.AcceptChanges%2A> on the <xref:System.Data.DataTable> until you resolve all errors and resubmit the <xref:System.Data.DataSet> for updating.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Returns the list of &lt;xref:System.Data.DataRow&gt; objects that have &lt;xref:System.Data.DataRow.RowError%2A&gt; set.","pos":[0,108],"source":"Returns the list of <xref:System.Data.DataRow> objects that have <xref:System.Data.DataRow.RowError%2A> set."},{"content":"For example, errors can occur when calling &lt;xref:System.Data.Common.DataAdapter.Update%2A&gt; with &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; set to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","pos":[109,284],"source":" For example, errors can occur when calling <xref:System.Data.Common.DataAdapter.Update%2A> with <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> set to **true**."},{"content":"Do not invoke &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; on the &lt;xref:System.Data.DataTable&gt; until you resolve all errors and resubmit the &lt;xref:System.Data.DataSet&gt; for updating.","pos":[285,467],"source":" Do not invoke <xref:System.Data.DataTable.AcceptChanges%2A> on the <xref:System.Data.DataTable> until you resolve all errors and resubmit the <xref:System.Data.DataSet> for updating."}]},{"pos":[76834,76912],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that have errors.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects that have errors."},{"pos":[77600,77726],"content":"Populates a serialization information object with the data needed to serialize the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[78003,78174],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that holds the serialized data associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized data associated with the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[78270,78461],"content":"A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object that contains the source and destination of the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Runtime.Serialization.StreamingContext> object that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[78627,78764],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a null reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"The <code>info</code> parameter is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[79085,79103],"content":"Gets the row type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the row type.","pos":[0,18]}]},{"pos":[79239,79304],"content":"Returns the type of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the type of the <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[79683,79814],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,131],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."}]},{"pos":[79988,80253],"content":"An &lt;xref:System.Xml.Schema.XmlSchema&gt; that describes the XML representation of the object that is produced by the &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml<bpt id=\"p1\">*</bpt>&gt; method and consumed by the &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml<ept id=\"p1\">*</ept>&gt; method.","needQuote":true,"needEscape":true,"source":"An <xref:System.Xml.Schema.XmlSchema> that describes the XML representation of the object that is produced by the <xref:System.Xml.Serialization.IXmlSerializable.WriteXml*> method and consumed by the <xref:System.Xml.Serialization.IXmlSerializable.ReadXml*> method."},{"pos":[80627,80791],"content":"Gets a value indicating whether there are errors in any of the rows in any of the tables of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which the table belongs.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether there are errors in any of the rows in any of the tables of the <xref href=\"System.Data.DataSet\"></xref> to which the table belongs."},{"pos":[80804,81846],"content":"As users work on a set of data contained in a <xref:System.Data.DataTable>, you can mark each change with an error if the change causes some validation failure. You can mark an entire <xref:System.Data.DataRow> with an error message using the <xref:System.Data.DataRow.RowError%2A> property. You can also set errors on each column of the row with the <xref:System.Data.DataRow.SetColumnError%2A> method.       Before updating a data source with a <xref:System.Data.DataSet>, it's recommended that you first invoke the <xref:System.Data.DataSet.GetChanges%2A> method on the target <xref:System.Data.DataSet>. The method results in a <xref:System.Data.DataSet> that contains only the changes made to the original. Before sending the <xref:System.Data.DataSet> to the data source for updating, check the HasErrors property of each table to see if any errors have been attached to the rows or columns in the rows.       After reconciling each error, clear the errors with the <xref:System.Data.DataRow.ClearErrors%2A> method of the `DataRow`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"As users work on a set of data contained in a &lt;xref:System.Data.DataTable&gt;, you can mark each change with an error if the change causes some validation failure.","pos":[0,160],"source":"As users work on a set of data contained in a <xref:System.Data.DataTable>, you can mark each change with an error if the change causes some validation failure."},{"content":"You can mark an entire &lt;xref:System.Data.DataRow&gt; with an error message using the &lt;xref:System.Data.DataRow.RowError%2A&gt; property.","pos":[161,291],"source":" You can mark an entire <xref:System.Data.DataRow> with an error message using the <xref:System.Data.DataRow.RowError%2A> property."},{"content":"You can also set errors on each column of the row with the &lt;xref:System.Data.DataRow.SetColumnError%2A&gt; method.","pos":[292,403],"source":" You can also set errors on each column of the row with the <xref:System.Data.DataRow.SetColumnError%2A> method."},{"content":"Before updating a data source with a &lt;xref:System.Data.DataSet&gt;, it's recommended that you first invoke the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method on the target &lt;xref:System.Data.DataSet&gt;.","pos":[410,607],"source":"       Before updating a data source with a <xref:System.Data.DataSet>, it's recommended that you first invoke the <xref:System.Data.DataSet.GetChanges%2A> method on the target <xref:System.Data.DataSet>."},{"content":"The method results in a &lt;xref:System.Data.DataSet&gt; that contains only the changes made to the original.","pos":[608,711],"source":" The method results in a <xref:System.Data.DataSet> that contains only the changes made to the original."},{"content":"Before sending the &lt;xref:System.Data.DataSet&gt; to the data source for updating, check the HasErrors property of each table to see if any errors have been attached to the rows or columns in the rows.","pos":[712,909],"source":" Before sending the <xref:System.Data.DataSet> to the data source for updating, check the HasErrors property of each table to see if any errors have been attached to the rows or columns in the rows."},{"content":"After reconciling each error, clear the errors with the &lt;xref:System.Data.DataRow.ClearErrors%2A&gt; method of the <ph id=\"ph1\">`DataRow`</ph>.","pos":[916,1038],"source":"       After reconciling each error, clear the errors with the <xref:System.Data.DataRow.ClearErrors%2A> method of the `DataRow`."}]},{"pos":[82311,82462],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if errors exist; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if errors exist; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[82903,83077],"content":"Copies a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> into a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, preserving any property settings, as well as original and current values.","needQuote":true,"needEscape":true,"source":"Copies a <xref href=\"System.Data.DataRow\"></xref> into a <xref href=\"System.Data.DataTable\"></xref>, preserving any property settings, as well as original and current values."},{"pos":[83090,83864],"content":"Calling <xref:System.Data.DataTable.NewRow%2A> adds a row to the table using the existing table schema, but with default values for the row, and sets the <xref:System.Data.DataRowState> to `Detached`. Calling ImportRow preserves the existing <xref:System.Data.DataRowState> along with other values in the row. If the `DataRow` that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.       The new row will be added to the end of the data table.       If the new row violates a Constraint it won’t be added to the data table.       You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf. See <xref:System.Data.DataRowCollection> and <xref:System.Data.DataTable.Rows%2A> for more information.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling &lt;xref:System.Data.DataTable.NewRow%2A&gt; adds a row to the table using the existing table schema, but with default values for the row, and sets the &lt;xref:System.Data.DataRowState&gt; to <ph id=\"ph1\">`Detached`</ph>.","pos":[0,200],"source":"Calling <xref:System.Data.DataTable.NewRow%2A> adds a row to the table using the existing table schema, but with default values for the row, and sets the <xref:System.Data.DataRowState> to `Detached`."},{"content":"Calling ImportRow preserves the existing &lt;xref:System.Data.DataRowState&gt; along with other values in the row.","pos":[201,309],"source":" Calling ImportRow preserves the existing <xref:System.Data.DataRowState> along with other values in the row."},{"content":"If the <ph id=\"ph1\">`DataRow`</ph> that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.","pos":[310,423],"source":" If the `DataRow` that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown."},{"content":"The new row will be added to the end of the data table.","pos":[430,485]},{"content":"If the new row violates a Constraint it won’t be added to the data table.","pos":[492,565]},{"content":"You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf.","pos":[572,664]},{"content":"See &lt;xref:System.Data.DataRowCollection&gt; and &lt;xref:System.Data.DataTable.Rows%2A&gt; for more information.","pos":[665,768],"source":" See <xref:System.Data.DataRowCollection> and <xref:System.Data.DataTable.Rows%2A> for more information."}]},{"pos":[84019,84079],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be imported.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataRow\"></xref> to be imported."},{"pos":[84460,84535],"content":"Occurs after the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is initialized.","needQuote":true,"needEscape":true,"source":"Occurs after the <xref href=\"System.Data.DataTable\"></xref> is initialized."},{"pos":[84547,84619],"content":"For more information, see <xref:System.Data.DataTable.IsInitialized%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information, see &lt;xref:System.Data.DataTable.IsInitialized%2A&gt;.","pos":[0,72],"source":"For more information, see <xref:System.Data.DataTable.IsInitialized%2A>."}]},{"pos":[84745,84757],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[85106,85204],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is initialized.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Data.DataTable\"></xref> is initialized."},{"pos":[85216,85473],"content":"Returns the status of the <xref:System.Data.DataTable> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataTable.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataTable.EndInit%2A> method sets it to `true`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Returns the status of the &lt;xref:System.Data.DataTable&gt; while it’s being constructed, for instance by Visual Studio.","pos":[0,115],"source":"Returns the status of the <xref:System.Data.DataTable> while it’s being constructed, for instance by Visual Studio."},{"content":"The &lt;xref:System.Data.DataTable.BeginInit%2A&gt; method sets it to <ph id=\"ph1\">`false`</ph> and &lt;xref:System.Data.DataTable.EndInit%2A&gt; method sets it to <ph id=\"ph2\">`true`</ph>.","pos":[116,257],"source":" The <xref:System.Data.DataTable.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataTable.EndInit%2A> method sets it to `true`."}]},{"pos":[85590,85780],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate the component has completed initialization; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the component has completed initialization; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[86220,86512],"content":"Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>. If the <xref href=\"System.Data.DataTable\"></xref> already contains rows, the incoming data from the data source is merged with the existing rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,146],"source":"Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>."},{"content":"If the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> already contains rows, the incoming data from the data source is merged with the existing rows.","pos":[147,292],"source":" If the <xref href=\"System.Data.DataTable\"></xref> already contains rows, the incoming data from the data source is merged with the existing rows."}]},{"pos":[93510,93585],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides a result set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides a result set."},{"pos":[94095,94479],"content":"Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>. If the <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <code>loadOption</code> parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,146],"source":"Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>."},{"content":"If the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">loadOption</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[147,384],"source":" If the <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <code>loadOption</code> parameter."}]},{"pos":[104275,104361],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides one or more result sets.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."},{"pos":[104437,104656],"content":"A value from the <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are combined with incoming rows that share the same primary key.","needQuote":true,"needEscape":true,"source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> are combined with incoming rows that share the same primary key."},{"pos":[105300,105479],"content":"Fills a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> using an error-handling delegate.","needQuote":true,"needEscape":true,"source":"Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref> using an error-handling delegate."},{"pos":[115966,116040],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides a result set.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.IDataReader\"></xref> that provides a result set."},{"pos":[116116,116335],"content":"A value from the <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are combined with incoming rows that share the same primary key.","needQuote":true,"needEscape":true,"source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> are combined with incoming rows that share the same primary key."},{"pos":[116424,116538],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.FillErrorEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate to call when an error occurs while loading data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data."},{"pos":[117033,117140],"content":"Finds and updates a specific row. If no matching row is found, a new row is created using the given values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds and updates a specific row. If no matching row is found, a new row is created using the given values.","pos":[0,107],"nodes":[{"content":"Finds and updates a specific row.","pos":[0,33]},{"content":"If no matching row is found, a new row is created using the given values.","pos":[34,107]}]}]},{"pos":[117153,118249],"content":"The LoadDataRow method takes an array of values and finds the matching value(s) in the primary key column(s).       If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.       If the `fAcceptChanges` parameter is `true` or not specified, the new data is added and then <xref:System.Data.DataTable.AcceptChanges%2A> is called to accept all changes in the <xref:System.Data.DataTable>; if the argument is `false`, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.       Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table.       Use LoadDataRow in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The LoadDataRow method takes an array of values and finds the matching value(s) in the primary key column(s).","pos":[0,109]},{"content":"If a column has a default value, pass a null value in the array to set the default value for that column.","pos":[116,221]},{"content":"Similarly, if a column has its &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt; property set to true, pass a null value in the array to set the automatically generated value for the row.","pos":[222,406],"source":" Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row."},{"content":"If the <ph id=\"ph1\">`fAcceptChanges`</ph> parameter is <ph id=\"ph2\">`true`</ph> or not specified, the new data is added and then &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; is called to accept all changes in the &lt;xref:System.Data.DataTable&gt;; if the argument is <ph id=\"ph3\">`false`</ph>, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.","pos":[413,749],"source":"       If the `fAcceptChanges` parameter is `true` or not specified, the new data is added and then <xref:System.Data.DataTable.AcceptChanges%2A> is called to accept all changes in the <xref:System.Data.DataTable>; if the argument is `false`, newly added rows are marked as insertions, and changes to existing rows are marked as modifications."},{"content":"Exceptions can also occur during either a &lt;xref:System.Data.DataTable.ColumnChanging&gt; or &lt;xref:System.Data.DataTable.RowChanging&gt; event.","pos":[756,892],"source":"       Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event."},{"content":"If an exception occurs, the row is not added to the table.","pos":[893,951]},{"content":"Use LoadDataRow in conjunction with &lt;xref:System.Data.DataTable.BeginLoadData%2A&gt; and &lt;xref:System.Data.DataTable.EndLoadData%2A&gt;.","pos":[958,1088],"source":"       Use LoadDataRow in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>."}]},{"pos":[118845,118891],"content":"An array of values used to create the new row.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of values used to create the new row.","pos":[0,46]}]},{"pos":[118963,119116],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to accept changes; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to accept changes; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[119180,119229],"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The new <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[119385,119445],"content":"The array is larger than the number of columns in the table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array is larger than the number of columns in the table.","pos":[0,60]}]},{"pos":[119546,119595],"content":"A value doesn't match its respective column type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value doesn't match its respective column type.","pos":[0,49]}]},{"pos":[119704,119744],"content":"Adding the row invalidates a constraint.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adding the row invalidates a constraint.","pos":[0,40]}]},{"pos":[119859,119954],"content":"Attempting to put a null in a column where <xref:System.Data.DataColumn.AllowDBNull*> is false.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempting to put a null in a column where &lt;xref:System.Data.DataColumn.AllowDBNull*&gt; is false.","pos":[0,95],"source":"Attempting to put a null in a column where <xref:System.Data.DataColumn.AllowDBNull*> is false."}]},{"pos":[120417,120524],"content":"Finds and updates a specific row. If no matching row is found, a new row is created using the given values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds and updates a specific row. If no matching row is found, a new row is created using the given values.","pos":[0,107],"nodes":[{"content":"Finds and updates a specific row.","pos":[0,33]},{"content":"If no matching row is found, a new row is created using the given values.","pos":[34,107]}]}]},{"pos":[120537,121691],"content":"The <xref:System.Data.DataTable.LoadDataRow%2A> method takes an array of values and finds the matching value(s) in the primary key column(s).       If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.       The value of the `loadOption` parameter is used to determine how the values in the array are applied to an existing row. For example, if `loadOption` is set to `OverwriteChanges`, the `Original` and `Current` values of each column are replaced with the values in the incoming row and the `RowState` property is set to `Unchanged`.       Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table.       Use <xref:System.Data.DataTable.LoadDataRow%2A> in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.LoadDataRow%2A&gt; method takes an array of values and finds the matching value(s) in the primary key column(s).","pos":[0,141],"source":"The <xref:System.Data.DataTable.LoadDataRow%2A> method takes an array of values and finds the matching value(s) in the primary key column(s)."},{"content":"If a column has a default value, pass a null value in the array to set the default value for that column.","pos":[148,253]},{"content":"Similarly, if a column has its &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt; property set to true, pass a null value in the array to set the automatically generated value for the row.","pos":[254,438],"source":" Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row."},{"content":"The value of the <ph id=\"ph1\">`loadOption`</ph> parameter is used to determine how the values in the array are applied to an existing row.","pos":[445,565],"source":"       The value of the `loadOption` parameter is used to determine how the values in the array are applied to an existing row."},{"content":"For example, if <ph id=\"ph1\">`loadOption`</ph> is set to <ph id=\"ph2\">`OverwriteChanges`</ph>, the <ph id=\"ph3\">`Original`</ph> and <ph id=\"ph4\">`Current`</ph> values of each column are replaced with the values in the incoming row and the <ph id=\"ph5\">`RowState`</ph> property is set to <ph id=\"ph6\">`Unchanged`</ph>.","pos":[566,775],"source":" For example, if `loadOption` is set to `OverwriteChanges`, the `Original` and `Current` values of each column are replaced with the values in the incoming row and the `RowState` property is set to `Unchanged`."},{"content":"Exceptions can also occur during either a &lt;xref:System.Data.DataTable.ColumnChanging&gt; or &lt;xref:System.Data.DataTable.RowChanging&gt; event.","pos":[782,918],"source":"       Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event."},{"content":"If an exception occurs, the row is not added to the table.","pos":[919,977]},{"content":"Use &lt;xref:System.Data.DataTable.LoadDataRow%2A&gt; in conjunction with &lt;xref:System.Data.DataTable.BeginLoadData%2A&gt; and &lt;xref:System.Data.DataTable.EndLoadData%2A&gt;.","pos":[984,1146],"source":"       Use <xref:System.Data.DataTable.LoadDataRow%2A> in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>."}]},{"pos":[121889,121935],"content":"An array of values used to create the new row.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of values used to create the new row.","pos":[0,46]}]},{"pos":[122011,122109],"content":"Used to determine how the array values are applied to the corresponding values in an existing row.","needQuote":true,"needEscape":true,"nodes":[{"content":"Used to determine how the array values are applied to the corresponding values in an existing row.","pos":[0,98]}]},{"pos":[122173,122222],"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The new <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[122583,122660],"content":"Gets or sets the locale information used to compare strings within the table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the locale information used to compare strings within the table.","pos":[0,77]}]},{"pos":[122673,123068],"content":"A <xref:System.Globalization.CultureInfo> represents the software preferences of a particular culture or community.       When used for string comparisons, the <xref:System.Globalization.CultureInfo> affects sorting, comparisons, and filtering.      > [!NOTE] >  In columns that contain expressions, the <xref:System.StringComparison> is used. The <xref:System.StringComparison> is ignored.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Globalization.CultureInfo&gt; represents the software preferences of a particular culture or community.","pos":[0,115],"source":"A <xref:System.Globalization.CultureInfo> represents the software preferences of a particular culture or community."},{"content":"When used for string comparisons, the &lt;xref:System.Globalization.CultureInfo&gt; affects sorting, comparisons, and filtering.","pos":[122,244],"source":"       When used for string comparisons, the <xref:System.Globalization.CultureInfo> affects sorting, comparisons, and filtering."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In columns that contain expressions, the &lt;xref:System.StringComparison&gt; is used.","pos":[250,343],"source":"      > [!NOTE] >  In columns that contain expressions, the <xref:System.StringComparison> is used."},{"content":"The &lt;xref:System.StringComparison&gt; is ignored.","pos":[344,390],"source":" The <xref:System.StringComparison> is ignored."}]},{"pos":[123612,124091],"content":"A <xref:System.Globalization.CultureInfo> that contains data about the user's machine locale. The default is the <xref href=\"System.Data.DataSet\"></xref> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale*> property) to which the <xref href=\"System.Data.DataTable\"></xref> belongs; if the table doesn't belong to a <xref href=\"System.Data.DataSet\"></xref>, the default is the current system <xref:System.Globalization.CultureInfo>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Globalization.CultureInfo&gt; that contains data about the user's machine locale.","pos":[0,93],"source":"A <xref:System.Globalization.CultureInfo> that contains data about the user's machine locale."},{"content":"The default is the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object's &lt;xref:System.Globalization.CultureInfo&gt; (returned by the &lt;xref:System.Data.DataSet.Locale*&gt; property) to which the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> belongs; if the table doesn't belong to a <bpt id=\"p3\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, the default is the current system &lt;xref:System.Globalization.CultureInfo&gt;.","pos":[94,479],"source":" The default is the <xref href=\"System.Data.DataSet\"></xref> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale*> property) to which the <xref href=\"System.Data.DataTable\"></xref> belongs; if the table doesn't belong to a <xref href=\"System.Data.DataSet\"></xref>, the default is the current system <xref:System.Globalization.CultureInfo>."}]},{"pos":[124519,124642],"content":"Merge the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Merge the specified <xref href=\"System.Data.DataTable\"></xref> with the current <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[124655,127616],"content":"The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.       The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.       When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation. Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the `preserveChanges` parameter.       In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller and thus more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the Merge method.       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted`, is matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Merge method is used to merge two &lt;xref:System.Data.DataTable&gt; objects that have largely similar schemas.","pos":[0,109],"source":"The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataTable&gt;.","pos":[110,259],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataTable&gt; with the latest data from the data source.","pos":[260,386],"source":" This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source."},{"content":"The merge operation takes into account only the original table, and the table to be merged.","pos":[393,484]},{"content":"Child tables are not affected or included.","pos":[485,527]},{"content":"If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.","pos":[528,649]},{"content":"The <ph id=\"ph1\">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataTable&gt;.","pos":[656,893],"source":"       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>."},{"content":"When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation.","pos":[900,1028]},{"content":"Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the <ph id=\"ph1\">`preserveChanges`</ph> parameter.","pos":[1029,1189],"source":" Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the `preserveChanges` parameter."},{"content":"In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.","pos":[1196,1378]},{"content":"In this scenario, the &lt;xref:System.Data.DataTable.GetChanges%2A&gt; method is first invoked.","pos":[1379,1468],"source":" In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataTable&gt; optimized for validating and merging.","pos":[1469,1564],"source":" That method returns a second <xref:System.Data.DataTable> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataTable&gt; object contains only the &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataTable&gt;.","pos":[1565,1752],"source":" This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>."},{"content":"This subset is generally smaller and thus more efficiently passed back to a middle tier component.","pos":[1753,1851]},{"content":"The middle tier component then updates the original data source with the changes through stored procedures.","pos":[1852,1959]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataTable&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1960,2240],"source":" The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataTable&gt; can be merged back into the client application's original &lt;xref:System.Data.DataTable&gt; with the Merge method.","pos":[2241,2554],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the Merge method."},{"content":"When merging a new source &lt;xref:System.Data.DataTable&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph>, is matched to target rows with the same primary key values.","pos":[2561,2795],"source":"       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted`, is matched to target rows with the same primary key values."},{"content":"Source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[2796,2951],"source":" Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[128298,128418],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be merged with the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> to be merged with the current <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[128899,129176],"content":"Merge the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, indicating whether to preserve changes in the current <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Merge the specified <xref href=\"System.Data.DataTable\"></xref> with the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>, indicating whether to preserve changes in the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>."},{"pos":[129189,132548],"content":"The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.       The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.       When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter. If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row. If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).       In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Merge method is used to merge two &lt;xref:System.Data.DataTable&gt; objects that have largely similar schemas.","pos":[0,109],"source":"The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataTable&gt;.","pos":[110,259],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataTable&gt; with the latest data from the data source.","pos":[260,386],"source":" This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source."},{"content":"The merge operation takes into account only the original table, and the table to be merged.","pos":[393,484]},{"content":"Child tables are not affected or included.","pos":[485,527]},{"content":"If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.","pos":[528,649]},{"content":"The <ph id=\"ph1\">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataTable&gt;.","pos":[656,893],"source":"       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>."},{"content":"When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <ph id=\"ph1\">`preserveChanges`</ph> parameter.","pos":[900,1090],"source":"       When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter."},{"content":"If the <ph id=\"ph1\">`preserveChanges`</ph> parameter is set to <ph id=\"ph2\">`true`</ph>, incoming values do not overwrite existing values in the Current row version of the existing row.","pos":[1091,1240],"source":" If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row."},{"content":"If the <ph id=\"ph1\">`preserveChanges`</ph> parameter is set to <ph id=\"ph2\">`false`</ph>, incoming values do overwrite the existing values in the Current row version of the existing row.","pos":[1241,1391],"source":" If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row."},{"content":"For more information about row versions, see <bpt id=\"p1\">[</bpt>Row States and Row Versions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1392,1506],"source":" For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md)."},{"content":"In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.","pos":[1513,1695]},{"content":"In this scenario, the &lt;xref:System.Data.DataTable.GetChanges%2A&gt; method is first invoked.","pos":[1696,1785],"source":" In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataTable&gt; optimized for validating and merging.","pos":[1786,1881],"source":" That method returns a second <xref:System.Data.DataTable> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataTable&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataTable&gt;.","pos":[1882,2102],"source":" This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>."},{"content":"This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.","pos":[2103,2217]},{"content":"The middle tier component then updates the original data source with the changes through stored procedures.","pos":[2218,2325]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataTable&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[2326,2606],"source":" The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataTable&gt; can be merged back into the client application's original &lt;xref:System.Data.DataTable&gt; with the &lt;xref:System.Data.DataTable.Merge%2A&gt; method.","pos":[2607,2952],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method."},{"content":"When merging a new source &lt;xref:System.Data.DataTable&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[2959,3193],"source":"       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3194,3349],"source":" Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[133278,133454],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be merged with the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> to be merged with the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>."},{"pos":[133527,133821],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, to preserve changes in the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.<bpt id=\"p4\">&lt;xref uid=\"langword_csharp_\" name=\"\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, to preserve changes in the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.<xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>"},{"pos":[134426,134736],"content":"Merge the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, indicating whether to preserve changes and how to handle missing schema in the current <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Merge the specified <xref href=\"System.Data.DataTable\"></xref> with the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>, indicating whether to preserve changes and how to handle missing schema in the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>."},{"pos":[134749,138853],"content":"The `Merge` method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.       The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.       When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter. If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row. If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).       In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.       When the <xref:System.Data.DataTable.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataTable> objects are compared, because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataTable> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataTable> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`Merge`</ph> method is used to merge two &lt;xref:System.Data.DataTable&gt; objects that have largely similar schemas.","pos":[0,111],"source":"The `Merge` method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataTable&gt;.","pos":[112,261],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataTable&gt; with the latest data from the data source.","pos":[262,388],"source":" This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source."},{"content":"The merge operation takes into account only the original table, and the table to be merged.","pos":[395,486]},{"content":"Child tables are not affected or included.","pos":[487,529]},{"content":"If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.","pos":[530,651]},{"content":"The <ph id=\"ph1\">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataTable&gt;.","pos":[658,895],"source":"       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>."},{"content":"When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <ph id=\"ph1\">`preserveChanges`</ph> parameter.","pos":[902,1092],"source":"       When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter."},{"content":"If the <ph id=\"ph1\">`preserveChanges`</ph> parameter is set to <ph id=\"ph2\">`true`</ph>, incoming values do not overwrite existing values in the Current row version of the existing row.","pos":[1093,1242],"source":" If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row."},{"content":"If the <ph id=\"ph1\">`preserveChanges`</ph> parameter is set to <ph id=\"ph2\">`false`</ph>, incoming values do overwrite the existing values in the Current row version of the existing row.","pos":[1243,1393],"source":" If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row."},{"content":"For more information about row versions, see <bpt id=\"p1\">[</bpt>Row States and Row Versions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1394,1508],"source":" For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md)."},{"content":"In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.","pos":[1515,1697]},{"content":"In this scenario, the &lt;xref:System.Data.DataTable.GetChanges%2A&gt; method is first invoked.","pos":[1698,1787],"source":" In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataTable&gt; optimized for validating and merging.","pos":[1788,1883],"source":" That method returns a second <xref:System.Data.DataTable> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataTable&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataTable&gt;.","pos":[1884,2104],"source":" This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>."},{"content":"This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.","pos":[2105,2219]},{"content":"The middle tier component then updates the original data source with the changes through stored procedures.","pos":[2220,2327]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataTable&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[2328,2608],"source":" The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataTable&gt; can be merged back into the client application's original &lt;xref:System.Data.DataTable&gt; with the &lt;xref:System.Data.DataTable.Merge%2A&gt; method.","pos":[2609,2954],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method."},{"content":"When the &lt;xref:System.Data.DataTable.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataTable&gt; objects are compared, because it is possible that the schemas may have been changed.","pos":[2961,3162],"source":"       When the <xref:System.Data.DataTable.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataTable> objects are compared, because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[3163,3285]},{"content":"If the source &lt;xref:System.Data.DataTable&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[3286,3554],"source":" If the source <xref:System.Data.DataTable> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataTable&gt; contains the added schema and data.","pos":[3555,3644],"source":" In that case, the merged <xref:System.Data.DataTable> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[3651,3693]},{"content":"When merging a new source &lt;xref:System.Data.DataTable&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[3700,3934],"source":"       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3935,4090],"source":" Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[139632,139752],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be merged with the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> to be merged with the current <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[139825,140039],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, to preserve changes in the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, to preserve changes in the current <xref href=\"System.Data.DataTable\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[140133,140204],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."},{"pos":[140604,140658],"content":"Gets or sets the initial starting size for this table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the initial starting size for this table.","pos":[0,54]}]},{"pos":[140670,140864],"content":"The MinimumCapacity allows the system to create an appropriate set of resources before fetching data. In a situation when performance is critical, setting this property can optimize performance.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The MinimumCapacity allows the system to create an appropriate set of resources before fetching data. In a situation when performance is critical, setting this property can optimize performance.","pos":[0,194],"nodes":[{"content":"The MinimumCapacity allows the system to create an appropriate set of resources before fetching data.","pos":[0,101]},{"content":"In a situation when performance is critical, setting this property can optimize performance.","pos":[102,194]}]}]},{"pos":[141343,141410],"content":"The initial starting size in rows of this table. The default is 50.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial starting size in rows of this table. The default is 50.","pos":[0,67],"nodes":[{"content":"The initial starting size in rows of this table.","pos":[0,48]},{"content":"The default is 50.","pos":[49,67]}]}]},{"pos":[141790,141913],"content":"Gets or sets the namespace for the XML representation of the data stored in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the namespace for the XML representation of the data stored in the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[142032,142096],"content":"The namespace of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The namespace of the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[142459,142548],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same schema as the table.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Data.DataRow\"></xref> with the same schema as the table."},{"pos":[142560,143051],"content":"You must use the NewRow method to create new <xref:System.Data.DataRow> objects with the same schema as the <xref:System.Data.DataTable>. After creating a <xref:System.Data.DataRow>, you can add it to the <xref:System.Data.DataRowCollection>, through the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.Rows%2A> property. When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call <xref:System.Data.DataTable.Clear%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must use the NewRow method to create new <xref:System.Data.DataRow> objects with the same schema as the <xref:System.Data.DataTable>. After creating a <xref:System.Data.DataRow>, you can add it to the <xref:System.Data.DataRowCollection>, through the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.Rows%2A> property. When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call <xref:System.Data.DataTable.Clear%2A>.","pos":[0,491],"nodes":[{"content":"You must use the NewRow method to create new &lt;xref:System.Data.DataRow&gt; objects with the same schema as the &lt;xref:System.Data.DataTable&gt;.","pos":[0,137],"source":"You must use the NewRow method to create new <xref:System.Data.DataRow> objects with the same schema as the <xref:System.Data.DataTable>."},{"content":"After creating a &lt;xref:System.Data.DataRow&gt;, you can add it to the &lt;xref:System.Data.DataRowCollection&gt;, through the &lt;xref:System.Data.DataTable&gt; object's &lt;xref:System.Data.DataTable.Rows%2A&gt; property.","pos":[138,339],"source":" After creating a <xref:System.Data.DataRow>, you can add it to the <xref:System.Data.DataRowCollection>, through the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.Rows%2A> property."},{"content":"When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call &lt;xref:System.Data.DataTable.Clear%2A&gt;.","pos":[340,491],"source":" When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call <xref:System.Data.DataTable.Clear%2A>."}]}]},{"pos":[143845,143959],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same schema as the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRow\"></xref> with the same schema as the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[144387,144448],"content":"Returns an array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an array of <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[144603,144668],"content":"A <xref:System.Int32> value that describes the size of the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; value that describes the size of the array.","pos":[0,65],"source":"A <xref:System.Int32> value that describes the size of the array."}]},{"pos":[144734,144748],"content":"The new array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new array.","pos":[0,14]}]},{"pos":[145266,145305],"content":"Creates a new row from an existing row.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new row from an existing row.","pos":[0,39]}]},{"pos":[145515,145572],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRowBuilder\"></xref> object."},{"pos":[145636,145693],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> derived class.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRow\"></xref> derived class."},{"pos":[146262,146336],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.ColumnChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.ColumnChanged\"></xref> event."},{"pos":[146349,146527],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[146731,146821],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumnChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataColumnChangeEventArgs\"></xref> that contains the event data."},{"pos":[147393,147468],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.ColumnChanging\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.ColumnChanging\"></xref> event."},{"pos":[147481,147659],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[147864,147954],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumnChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataColumnChangeEventArgs\"></xref> that contains the event data."},{"pos":[148552,148637],"content":"Raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,85],"source":"Raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[148650,148828],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[149065,149150],"content":"A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt; that contains the event data.","pos":[0,85],"source":"A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data."}]},{"pos":[149640,149764],"content":"Notifies the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is being removed.","needQuote":true,"needEscape":true,"source":"Notifies the <xref href=\"System.Data.DataTable\"></xref> that a <xref href=\"System.Data.DataColumn\"></xref> is being removed."},{"pos":[149777,149960],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[150143,150205],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> being removed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataColumn\"></xref> being removed."},{"pos":[150741,150812],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.RowChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.RowChanged\"></xref> event."},{"pos":[150825,151003],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[151198,151285],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data."},{"pos":[151824,151896],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.RowChanging\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.RowChanging\"></xref> event."},{"pos":[151909,152087],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[152283,152370],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data."},{"pos":[152905,152976],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.RowDeleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.RowDeleted\"></xref> event."},{"pos":[152989,153167],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[153362,153449],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data."},{"pos":[153988,154060],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.RowDeleting\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.RowDeleting\"></xref> event."},{"pos":[154073,154251],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[154447,154534],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data."},{"pos":[155084,155157],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.TableCleared\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.TableCleared\"></xref> event."},{"pos":[155170,155585],"content":"Raises the <xref:System.Data.DataTable.TableCleared> event, which is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller.       Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raises the &lt;xref:System.Data.DataTable.TableCleared&gt; event, which is fired immediately after all rows have been successfully cleared but before the &lt;xref:System.Data.DataTable.Clear%2A&gt; method returns control back to the caller.","pos":[0,228],"source":"Raises the <xref:System.Data.DataTable.TableCleared> event, which is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[235,297]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[298,413],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[155784,155872],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableClearEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTableClearEventArgs\"></xref> that contains the event data."},{"pos":[156428,156502],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.TableClearing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.TableClearing\"></xref> event."},{"pos":[156515,156858],"content":"Raises the <xref:System.Data.DataTable.TableClearing> event, which is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins.       Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raises the &lt;xref:System.Data.DataTable.TableClearing&gt; event, which is fired before processing of the &lt;xref:System.Data.DataTable.Clear%2A&gt; operation begins.","pos":[0,156],"source":"Raises the <xref:System.Data.DataTable.TableClearing> event, which is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[163,225]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[226,341],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[157058,157146],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableClearEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTableClearEventArgs\"></xref> that contains the event data."},{"pos":[157698,157770],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable.TableNewRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.DataTable.TableNewRow\"></xref> event."},{"pos":[157783,158142],"content":"Raises the <xref:System.Data.DataTable.TableNewRow> event, which fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>.       Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raises the &lt;xref:System.Data.DataTable.TableNewRow&gt; event, which fires after a new &lt;xref:System.Data.DataRow&gt; has been created using &lt;xref:System.Data.DataTable.NewRow%2A&gt;.","pos":[0,172],"source":"Raises the <xref:System.Data.DataTable.TableNewRow> event, which fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[179,241]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[242,357],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[158342,158431],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableNewRowEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTableNewRowEventArgs\"></xref> that contains the event data."},{"pos":[158839,158931],"content":"Gets the collection of parent relations for this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the collection of parent relations for this <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[159750,159956],"content":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains the parent relations for the table. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the parent relations for the table.","pos":[0,107],"source":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains the parent relations for the table."},{"content":"An empty collection is returned if no <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist.","pos":[108,206],"source":" An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist."}]},{"pos":[160321,160444],"content":"Gets or sets the namespace for the XML representation of the data stored in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the namespace for the XML representation of the data stored in the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[160560,160621],"content":"The prefix of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The prefix of the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[160997,161079],"content":"Gets or sets an array of columns that function as primary keys for the data table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an array of columns that function as primary keys for the data table.","pos":[0,82]}]},{"pos":[161091,161564],"content":"The primary key of a table must be unique to identify the record in the table. It's also possible to have a table with a primary key made up of two or more columns. This occurs when a single column can't contain enough unique values. For example, a two column primary key might consist of a \"FirstName\" and \"LastName\" column. Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of <xref:System.Data.DataColumn> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The primary key of a table must be unique to identify the record in the table. It's also possible to have a table with a primary key made up of two or more columns. This occurs when a single column can't contain enough unique values. For example, a two column primary key might consist of a \"FirstName\" and \"LastName\" column. Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of <xref:System.Data.DataColumn> objects.","pos":[0,473],"nodes":[{"content":"The primary key of a table must be unique to identify the record in the table.","pos":[0,78]},{"content":"It's also possible to have a table with a primary key made up of two or more columns.","pos":[79,164]},{"content":"This occurs when a single column can't contain enough unique values.","pos":[165,233]},{"content":"For example, a two column primary key might consist of a \"FirstName\" and \"LastName\" column.","pos":[234,325]},{"content":"Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of &lt;xref:System.Data.DataColumn&gt; objects.","pos":[326,473],"source":" Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of <xref:System.Data.DataColumn> objects."}]}]},{"pos":[162206,162270],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataColumn\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataColumn\"></xref> objects."},{"pos":[162427,162452],"content":"The key is a foreign key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key is a foreign key.","pos":[0,25]}]},{"pos":[162812,162934],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.Stream&gt;.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.Stream>."},{"pos":[162947,165059],"content":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.Stream>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Data.DataTable&gt; and its descendents are loaded with the data from the supplied &lt;xref:System.IO.Stream&gt;.","pos":[0,128],"source":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.Stream>."},{"content":"The behavior of this method is identical to that of the &lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName&gt; method, except that in this case, data is loaded only for the current table and its descendants.","pos":[129,344],"source":" The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants."},{"content":"The ReadXml method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataTable&gt; from an XML document, whereas the &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[351,580],"source":"       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; and &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; methods, respectively.","pos":[587,736],"source":"       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[737,828],"source":" To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[829,887],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[893,1160],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[1167,1299]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1300,1433]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1440,1592]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1593,1696]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1702,1885],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1886,2000],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[2001,2096]}]},{"pos":[165836,165887],"content":"An object that derives from <xref:System.IO.Stream>","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that derives from &lt;xref:System.IO.Stream&gt;","pos":[0,51],"source":"An object that derives from <xref:System.IO.Stream>"}]},{"pos":[165955,166026],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."},{"pos":[166466,166592],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextReader&gt;.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextReader>."},{"pos":[166605,168721],"content":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.TextReader>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Data.DataTable&gt; and its descendents are loaded with the data from the supplied &lt;xref:System.IO.TextReader&gt;.","pos":[0,132],"source":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.TextReader>."},{"content":"The behavior of this method is identical to that of the &lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName&gt; method, except that in this case, data is loaded only for the current table and its descendants.","pos":[133,348],"source":" The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants."},{"content":"The ReadXml method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataTable&gt; from an XML document, whereas the &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[355,584],"source":"       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; and &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; methods, respectively.","pos":[591,740],"source":"       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[741,832],"source":" To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[833,891],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[897,1164],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[1171,1303]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1304,1437]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1444,1596]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1597,1700]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1706,1889],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1890,2004],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[2005,2100]}]},{"pos":[169514,169581],"content":"The <xref:System.IO.TextReader> that will be used to read the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextReader&gt; that will be used to read the data.","pos":[0,67],"source":"The <xref:System.IO.TextReader> that will be used to read the data."}]},{"pos":[169649,169720],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."},{"pos":[170134,170236],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified file.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataTable\"></xref> from the specified file."},{"pos":[170249,172898],"content":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.String>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.      ```   using System.Data;   public class A {      static void Main(string[] args) {         DataTable tabl = new DataTable(\"mytable\");         tabl.Columns.Add(new DataColumn(\"id\", typeof(int)));         for (int i = 0; i < 10; i++) {            DataRow row = tabl.NewRow();            row[\"id\"] = i;            tabl.Rows.Add(row);         }         tabl.WriteXml(\"f.xml\", XmlWriteMode.WriteSchema);         DataTable newt = new DataTable();         newt.ReadXml(\"f.xml\");      }   }   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Data.DataTable&gt; and its descendents are loaded with the data from the file named in the supplied &lt;xref:System.String&gt;.","pos":[0,143],"source":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.String>."},{"content":"The behavior of this method is identical to that of the &lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName&gt; method, except that in this case, data is loaded only for the current table and its descendants.","pos":[144,359],"source":" The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants."},{"content":"The ReadXml method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataTable&gt; from an XML document, whereas the &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[366,595],"source":"       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; and &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; methods, respectively.","pos":[602,751],"source":"       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[752,843],"source":" To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[844,902],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[908,1175],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[1182,1314]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1315,1448]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1455,1607]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1608,1711]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1717,1900],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1901,2015],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[2016,2111]}]},{"pos":[173602,173651],"content":"The name of the file from which to read the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file from which to read the data.","pos":[0,49]}]},{"pos":[173719,173790],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."},{"pos":[174227,174353],"content":"Reads XML Schema and Data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.Xml.XmlReader&gt;.","needQuote":true,"needEscape":true,"source":"Reads XML Schema and Data into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlReader>."},{"pos":[174366,176445],"content":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.Xml.XmlReader>. The behavior of this method is identical to that of the ReadXml method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Data.DataTable&gt; and its descendents are loaded with the data from the file named in the supplied &lt;xref:System.Xml.XmlReader&gt;.","pos":[0,150],"source":"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.Xml.XmlReader>."},{"content":"The behavior of this method is identical to that of the ReadXml method, except that in this case, data is loaded only for the current table and its descendants.","pos":[151,311]},{"content":"The ReadXml method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataTable&gt; from an XML document, whereas the &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[318,547],"source":"       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; and &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; methods, respectively.","pos":[554,703],"source":"       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[704,795],"source":" To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[796,854],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[860,1127],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[1134,1266]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1267,1400]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1407,1559]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1560,1663]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1669,1852],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1853,1967],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1968,2063]}]},{"pos":[177244,177311],"content":"The <xref:System.Xml.XmlReader> that will be used to read the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; that will be used to read the data.","pos":[0,67],"source":"The <xref:System.Xml.XmlReader> that will be used to read the data."}]},{"pos":[177379,177450],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."},{"pos":[177900,177999],"content":"Reads an XML schema into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified stream.","needQuote":true,"needEscape":true,"source":"Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> using the specified stream."},{"pos":[178012,178912],"content":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.       To create a nested relation using XML schema, use implicit nested elements. You can also configure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ReadXmlSchema method to create the schema for a &lt;xref:System.Data.DataTable&gt;.","pos":[0,85],"source":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[86,150]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method.","pos":[157,257],"source":"       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method."},{"content":"The XML schema is interpreted according to the XSD standard.","pos":[264,324]},{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[331,415]},{"content":"No exception will be thrown.","pos":[416,444]},{"content":"The <ph id=\"ph1\">`ReadXmlSchema`</ph> method is generally invoked before invoking the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataTable&gt;.","pos":[451,621],"source":"       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>."},{"content":"To create a nested relation using XML schema, use implicit nested elements.","pos":[628,703]},{"content":"You can also configure the nested relation to use explicit column names.","pos":[704,776]},{"content":"Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.","pos":[777,890]}]},{"pos":[179579,179614],"content":"The stream used to read the schema.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream used to read the schema.","pos":[0,35]}]},{"pos":[180090,180210],"content":"Reads an XML schema into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextReader&gt;.","needQuote":true,"needEscape":true,"source":"Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextReader>."},{"pos":[180223,181125],"content":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.       To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ReadXmlSchema method to create the schema for a &lt;xref:System.Data.DataTable&gt;.","pos":[0,85],"source":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[86,150]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method.","pos":[157,257],"source":"       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method."},{"content":"The XML schema is interpreted according to the XSD standard.","pos":[264,324]},{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[331,415]},{"content":"No exception will be thrown.","pos":[416,444]},{"content":"The <ph id=\"ph1\">`ReadXmlSchema`</ph> method is generally invoked before invoking the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataTable&gt;.","pos":[451,621],"source":"       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>."},{"content":"To create a nested relation using XML schema, use implicit nested elements.","pos":[628,703]},{"content":"You can also reconfigure the nested relation to use explicit column names.","pos":[704,778]},{"content":"Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.","pos":[779,892]}]},{"pos":[181901,181969],"content":"The <xref:System.IO.TextReader> used to read the schema information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextReader&gt; used to read the schema information.","pos":[0,68],"source":"The <xref:System.IO.TextReader> used to read the schema information."}]},{"pos":[182419,182515],"content":"Reads an XML schema into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified file.","needQuote":true,"needEscape":true,"source":"Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> from the specified file."},{"pos":[182528,183413],"content":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the `DataTable`.       To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ReadXmlSchema method to create the schema for a &lt;xref:System.Data.DataTable&gt;.","pos":[0,85],"source":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[86,150]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method.","pos":[157,257],"source":"       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method."},{"content":"The XML schema is interpreted according to the XSD standard.","pos":[264,324]},{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[331,415]},{"content":"No exception will be thrown.","pos":[416,444]},{"content":"The <ph id=\"ph1\">`ReadXmlSchema`</ph> method is generally invoked before invoking the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; method which is used to fill the <ph id=\"ph2\">`DataTable`</ph>.","pos":[451,604],"source":"       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the `DataTable`."},{"content":"To create a nested relation using XML schema, use implicit nested elements.","pos":[611,686]},{"content":"You can also reconfigure the nested relation to use explicit column names.","pos":[687,761]},{"content":"Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.","pos":[762,875]}]},{"pos":[184086,184149],"content":"The name of the file from which to read the schema information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file from which to read the schema information.","pos":[0,63]}]},{"pos":[184622,184742],"content":"Reads an XML schema into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.Xml.XmlReader&gt;.","needQuote":true,"needEscape":true,"source":"Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlReader>."},{"pos":[184755,185701],"content":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.      > [!NOTE] >  The way to create a nested relation using XML schema is to have implicit nested elements. Additionally, the nested relation could be re-wired, to use explicit column names. It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ReadXmlSchema method to create the schema for a &lt;xref:System.Data.DataTable&gt;.","pos":[0,85],"source":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[86,150]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method.","pos":[157,257],"source":"       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method."},{"content":"The XML schema is interpreted according to the XSD standard.","pos":[264,324]},{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[331,415]},{"content":"No exception will be thrown.","pos":[416,444]},{"content":"The <ph id=\"ph1\">`ReadXmlSchema`</ph> method is generally invoked before invoking the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataTable&gt;.","pos":[451,621],"source":"       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The way to create a nested relation using XML schema is to have implicit nested elements.","pos":[627,729],"source":"      > [!NOTE] >  The way to create a nested relation using XML schema is to have implicit nested elements."},{"content":"Additionally, the nested relation could be re-wired, to use explicit column names.","pos":[730,812]},{"content":"It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.","pos":[813,935]}]},{"pos":[186491,186559],"content":"The <xref:System.Xml.XmlReader> used to read the schema information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; used to read the schema information.","pos":[0,68],"source":"The <xref:System.Xml.XmlReader> used to read the schema information."}]},{"pos":[187062,187087],"content":"Reads from an XML stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads from an XML stream.","pos":[0,25]}]},{"pos":[187270,187307],"content":"A <xref:System.Xml.XmlReader> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Xml.XmlReader&gt; object.","pos":[0,37],"source":"A <xref:System.Xml.XmlReader> object."}]},{"pos":[187715,187864],"content":"Rolls back all changes that have been made to the table since it was loaded, or the last time <xref:System.Data.DataTable.AcceptChanges*> was called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rolls back all changes that have been made to the table since it was loaded, or the last time &lt;xref:System.Data.DataTable.AcceptChanges*&gt; was called.","pos":[0,149],"source":"Rolls back all changes that have been made to the table since it was loaded, or the last time <xref:System.Data.DataTable.AcceptChanges*> was called."}]},{"pos":[187876,188128],"content":"When RejectChanges is called, any <xref:System.Data.DataRow> objects that are still in edit-mode cancel their edits. New rows are removed. Rows with the <xref:System.Data.DataRowState> set to `Modified` or `Deleted` return back to their original state.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When RejectChanges is called, any &lt;xref:System.Data.DataRow&gt; objects that are still in edit-mode cancel their edits.","pos":[0,116],"source":"When RejectChanges is called, any <xref:System.Data.DataRow> objects that are still in edit-mode cancel their edits."},{"content":"New rows are removed.","pos":[117,138]},{"content":"Rows with the &lt;xref:System.Data.DataRowState&gt; set to <ph id=\"ph1\">`Modified`</ph> or <ph id=\"ph2\">`Deleted`</ph> return back to their original state.","pos":[139,252],"source":" Rows with the <xref:System.Data.DataRowState> set to `Modified` or `Deleted` return back to their original state."}]},{"pos":[189016,189054],"content":"Gets or sets the serialization format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the serialization format.","pos":[0,38]}]},{"pos":[189221,189447],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SerializationFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration specifying either <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Xml\" name=\"Xml\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> serialization.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SerializationFormat\"></xref> enumeration specifying either <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> or <xref uid=\"langword_csharp_Xml\" name=\"Xml\" href=\"\"></xref> serialization."},{"pos":[189810,190061],"content":"Resets the <xref href=\"System.Data.DataTable\"></xref> to its original state. Reset removes all data, indexes, relations, and columns of the table. If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resets the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to its original state.","pos":[0,76],"source":"Resets the <xref href=\"System.Data.DataTable\"></xref> to its original state."},{"content":"Reset removes all data, indexes, relations, and columns of the table.","pos":[77,146]},{"content":"If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.","pos":[147,251]}]},{"pos":[190505,190591],"content":"Occurs after a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been changed successfully.","needQuote":true,"needEscape":true,"source":"Occurs after a <xref href=\"System.Data.DataRow\"></xref> has been changed successfully."},{"pos":[190603,190696],"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"pos":[191130,191142],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[191478,191545],"content":"Occurs when a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is changing.","needQuote":true,"needEscape":true,"source":"Occurs when a <xref href=\"System.Data.DataRow\"></xref> is changing."},{"pos":[191557,191650],"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"pos":[192087,192099],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[192430,192479],"content":"Occurs after a row in the table has been deleted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs after a row in the table has been deleted.","pos":[0,49]}]},{"pos":[192491,192584],"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"pos":[193018,193030],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[193366,193422],"content":"Occurs before a row in the table is about to be deleted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before a row in the table is about to be deleted.","pos":[0,56]}]},{"pos":[193434,193527],"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."},{"pos":[193964,193976],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[194280,194334],"content":"Gets the collection of rows that belong to this table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of rows that belong to this table.","pos":[0,54]}]},{"pos":[194347,195037],"content":"To create a new <xref:System.Data.DataRow>, you must use the <xref:System.Data.DataTable.NewRow%2A> method to return a new object. Such an object is automatically configured according to the schema defined for the <xref:System.Data.DataTable> through its collection of <xref:System.Data.DataColumn> objects. After creating a new row and setting the values for each column in the row, add the row to the <xref:System.Data.DataRowCollection> using the `Add` method.       Each <xref:System.Data.DataRow> in the collection represents a row of data in the table. To commit a change to the value of a column in the row, you must invoke the <xref:System.Data.DataTable.AcceptChanges%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To create a new &lt;xref:System.Data.DataRow&gt;, you must use the &lt;xref:System.Data.DataTable.NewRow%2A&gt; method to return a new object.","pos":[0,130],"source":"To create a new <xref:System.Data.DataRow>, you must use the <xref:System.Data.DataTable.NewRow%2A> method to return a new object."},{"content":"Such an object is automatically configured according to the schema defined for the &lt;xref:System.Data.DataTable&gt; through its collection of &lt;xref:System.Data.DataColumn&gt; objects.","pos":[131,307],"source":" Such an object is automatically configured according to the schema defined for the <xref:System.Data.DataTable> through its collection of <xref:System.Data.DataColumn> objects."},{"content":"After creating a new row and setting the values for each column in the row, add the row to the &lt;xref:System.Data.DataRowCollection&gt; using the <ph id=\"ph1\">`Add`</ph> method.","pos":[308,463],"source":" After creating a new row and setting the values for each column in the row, add the row to the <xref:System.Data.DataRowCollection> using the `Add` method."},{"content":"Each &lt;xref:System.Data.DataRow&gt; in the collection represents a row of data in the table.","pos":[470,558],"source":"       Each <xref:System.Data.DataRow> in the collection represents a row of data in the table."},{"content":"To commit a change to the value of a column in the row, you must invoke the &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; method.","pos":[559,688],"source":" To commit a change to the value of a column in the row, you must invoke the <xref:System.Data.DataTable.AcceptChanges%2A> method."}]},{"pos":[195928,196129],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects; otherwise a null value if no <bpt id=\"p3\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> objects exist.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataRowCollection\"></xref> that contains <xref href=\"System.Data.DataRow\"></xref> objects; otherwise a null value if no <xref href=\"System.Data.DataRow\"></xref> objects exist."},{"pos":[196487,196557],"content":"Gets an array of all <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects."},{"pos":[196569,196710],"content":"To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To ensure the proper sort order, specify sort criteria with &lt;xref:System.Data.DataTable.Select%2A&gt; or &lt;xref:System.Data.DataTable.Select%2A&gt;.","pos":[0,141],"source":"To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>."}]},{"pos":[197220,197281],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects."},{"pos":[197689,197790],"content":"Gets an array of all <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that match the filter criteria.","needQuote":true,"needEscape":true,"source":"Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects that match the filter criteria."},{"pos":[197803,198245],"content":"To create the `filterExpression` argument, use the same rules that apply to the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value for creating filters.       To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.       If the column on the filter contains a null value, it will not be part of the result.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To create the <ph id=\"ph1\">`filterExpression`</ph> argument, use the same rules that apply to the &lt;xref:System.Data.DataColumn&gt; class's &lt;xref:System.Data.DataColumn.Expression%2A&gt; property value for creating filters.","pos":[0,198],"source":"To create the `filterExpression` argument, use the same rules that apply to the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value for creating filters."},{"content":"To ensure the proper sort order, specify sort criteria with &lt;xref:System.Data.DataTable.Select%2A&gt; or &lt;xref:System.Data.DataTable.Select%2A&gt;.","pos":[205,346],"source":"       To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>."},{"content":"If the column on the filter contains a null value, it will not be part of the result.","pos":[353,438]}]},{"pos":[198786,198953],"content":"The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/).","needQuote":true,"needEscape":true,"nodes":[{"content":"The criteria to use to filter the rows.","pos":[0,39]},{"content":"For examples on how to filter rows, see <bpt id=\"p1\">[</bpt>DataView RowFilter Syntax <ph id=\"ph1\">\\[</ph>C#<ph id=\"ph2\">\\]</ph><ept id=\"p1\">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.","pos":[40,167],"source":" For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."}]},{"pos":[199019,199080],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects."},{"pos":[199537,199667],"content":"Gets an array of all <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that match the filter criteria, in the specified sort order.","needQuote":true,"needEscape":true,"source":"Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects that match the filter criteria, in the specified sort order."},{"pos":[199680,200067],"content":"To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value. The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings.       If the column on the filter contains a null value, it will not be part of the result.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To form the <ph id=\"ph1\">`filterExpression`</ph> argument, use the same rules for creating the &lt;xref:System.Data.DataColumn&gt; class's &lt;xref:System.Data.DataColumn.Expression%2A&gt; property value.","pos":[0,174],"source":"To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value."},{"content":"The <ph id=\"ph1\">`Sort`</ph> argument also uses the same rules for creating class's &lt;xref:System.Data.DataColumn.Expression%2A&gt; strings.","pos":[175,293],"source":" The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings."},{"content":"If the column on the filter contains a null value, it will not be part of the result.","pos":[300,385]}]},{"pos":[200623,200790],"content":"The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/).","needQuote":true,"needEscape":true,"nodes":[{"content":"The criteria to use to filter the rows.","pos":[0,39]},{"content":"For examples on how to filter rows, see <bpt id=\"p1\">[</bpt>DataView RowFilter Syntax <ph id=\"ph1\">\\[</ph>C#<ph id=\"ph2\">\\]</ph><ept id=\"p1\">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.","pos":[40,167],"source":" For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."}]},{"pos":[200851,200901],"content":"A string specifying the column and sort direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string specifying the column and sort direction.","pos":[0,50]}]},{"pos":[200967,201059],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects matching the filter expression.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects matching the filter expression."},{"pos":[201625,201773],"content":"Gets an array of all <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that match the filter in the order of the sort that match the specified state.","needQuote":true,"needEscape":true,"source":"Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects that match the filter in the order of the sort that match the specified state."},{"pos":[201786,202173],"content":"To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value. The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings.       If the column on the filter contains a null value, it will not be part of the result.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To form the <ph id=\"ph1\">`filterExpression`</ph> argument, use the same rules for creating the &lt;xref:System.Data.DataColumn&gt; class's &lt;xref:System.Data.DataColumn.Expression%2A&gt; property value.","pos":[0,174],"source":"To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value."},{"content":"The <ph id=\"ph1\">`Sort`</ph> argument also uses the same rules for creating class's &lt;xref:System.Data.DataColumn.Expression%2A&gt; strings.","pos":[175,293],"source":" The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings."},{"content":"If the column on the filter contains a null value, it will not be part of the result.","pos":[300,385]}]},{"pos":[202783,202950],"content":"The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/).","needQuote":true,"needEscape":true,"nodes":[{"content":"The criteria to use to filter the rows.","pos":[0,39]},{"content":"For examples on how to filter rows, see <bpt id=\"p1\">[</bpt>DataView RowFilter Syntax <ph id=\"ph1\">\\[</ph>C#<ph id=\"ph2\">\\]</ph><ept id=\"p1\">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.","pos":[40,167],"source":" For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."}]},{"pos":[203011,203061],"content":"A string specifying the column and sort direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string specifying the column and sort direction.","pos":[0,50]}]},{"pos":[203145,203213],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataViewRowState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.DataViewRowState\"></xref> values."},{"pos":[203279,203340],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects."},{"pos":[203686,203802],"content":"Gets or sets an <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[203814,204017],"content":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Sites bind a &lt;xref:System.ComponentModel.Component&gt; to a &lt;xref:System.ComponentModel.Container&gt; and enable communication between them, as well as provide a way for the container to manage its components.","pos":[0,203],"source":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components."}]},{"pos":[204175,204278],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[204896,205032],"content":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,136],"source":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."}]},{"pos":[205044,205236],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,192],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataTable&gt; instance is cast to an &lt;xref:System.ComponentModel.IListSource&gt; interface.","pos":[60,192],"source":" It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]},{"pos":[205389,205602],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the collection is a collection of &lt;xref:System.Collections.IList&gt; objects; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection is a collection of <xref:System.Collections.IList> objects; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[206201,206322],"content":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,121],"source":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."}]},{"pos":[206334,206526],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,192],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataTable&gt; instance is cast to an &lt;xref:System.ComponentModel.IListSource&gt; interface.","pos":[60,192],"source":" It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]},{"pos":[206686,206772],"content":"An <xref:System.Collections.IList> that can be bound to a data source from the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IList&gt; that can be bound to a data source from the object.","pos":[0,86],"source":"An <xref:System.Collections.IList> that can be bound to a data source from the object."}]},{"pos":[207406,207537],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,131],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."}]},{"pos":[207549,207747],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]},{"pos":[207920,208185],"content":"An &lt;xref:System.Xml.Schema.XmlSchema&gt; that describes the XML representation of the object that is produced by the &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml<bpt id=\"p1\">*</bpt>&gt; method and consumed by the &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml<ept id=\"p1\">*</ept>&gt; method.","needQuote":true,"needEscape":true,"source":"An <xref:System.Xml.Schema.XmlSchema> that describes the XML representation of the object that is produced by the <xref:System.Xml.Serialization.IXmlSerializable.WriteXml*> method and consumed by the <xref:System.Xml.Serialization.IXmlSerializable.ReadXml*> method."},{"pos":[208890,209019],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,129],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."}]},{"pos":[209031,209229],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]},{"pos":[209399,209412],"content":"An XmlReader.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XmlReader.","pos":[0,13]}]},{"pos":[210120,210250],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,130],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."}]},{"pos":[210262,210460],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]},{"pos":[210631,210644],"content":"An XmlWriter.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XmlWriter.","pos":[0,13]}]},{"pos":[211071,211140],"content":"Occurs after a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is cleared.","needQuote":true,"needEscape":true,"source":"Occurs after a <xref href=\"System.Data.DataTable\"></xref> is cleared."},{"pos":[211152,211429],"content":"The TableCleared event is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller. The TableCleared event is not fired if there are any exceptions during the clear operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TableCleared event is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller. The TableCleared event is not fired if there are any exceptions during the clear operation.","pos":[0,277],"nodes":[{"content":"The TableCleared event is fired immediately after all rows have been successfully cleared but before the &lt;xref:System.Data.DataTable.Clear%2A&gt; method returns control back to the caller.","pos":[0,185],"source":"The TableCleared event is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller."},{"content":"The TableCleared event is not fired if there are any exceptions during the clear operation.","pos":[186,277]}]}]},{"pos":[211601,211613],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[211959,212027],"content":"Occurs when a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is cleared.","needQuote":true,"needEscape":true,"source":"Occurs when a <xref href=\"System.Data.DataTable\"></xref> is cleared."},{"pos":[212039,212283],"content":"The TableClearing event is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins. This event is always fired when the <xref:System.Data.DataTable.Clear%2A> method is invoked, even if the table contains zero rows.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TableClearing event is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins. This event is always fired when the <xref:System.Data.DataTable.Clear%2A> method is invoked, even if the table contains zero rows.","pos":[0,244],"nodes":[{"content":"The TableClearing event is fired before processing of the &lt;xref:System.Data.DataTable.Clear%2A&gt; operation begins.","pos":[0,113],"source":"The TableClearing event is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins."},{"content":"This event is always fired when the &lt;xref:System.Data.DataTable.Clear%2A&gt; method is invoked, even if the table contains zero rows.","pos":[114,244],"source":" This event is always fired when the <xref:System.Data.DataTable.Clear%2A> method is invoked, even if the table contains zero rows."}]}]},{"pos":[212456,212468],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[212797,212869],"content":"Gets or sets the name of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[212881,213079],"content":"The TableName is used to return this table from the parent <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection> (returned by the <xref:System.Data.DataSet.Tables%2A> property).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TableName is used to return this table from the parent &lt;xref:System.Data.DataSet&gt; object's &lt;xref:System.Data.DataTableCollection&gt; (returned by the &lt;xref:System.Data.DataSet.Tables%2A&gt; property).","pos":[0,198],"source":"The TableName is used to return this table from the parent <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection> (returned by the <xref:System.Data.DataSet.Tables%2A> property)."}]},{"pos":[213577,213636],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[213790,213924],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or empty string (\"\") is passed in and this table belongs to a collection.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or empty string (\"\") is passed in and this table belongs to a collection."},{"pos":[214039,214149],"content":"The table belongs to a collection that already has a table with the same name. (Comparison is case-sensitive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The table belongs to a collection that already has a table with the same name. (Comparison is case-sensitive).","pos":[0,110],"nodes":[{"content":"The table belongs to a collection that already has a table with the same name.","pos":[0,78]},{"content":"(Comparison is case-sensitive).","pos":[79,110]}]}]},{"pos":[214468,214539],"content":"Occurs when a new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is inserted.","needQuote":true,"needEscape":true,"source":"Occurs when a new <xref href=\"System.Data.DataRow\"></xref> is inserted."},{"pos":[214551,214820],"content":"Fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>. This event is fired before the invoked `NewRow` method returns. The new <xref:System.Data.DataRow> instance is detached; it has not been added to the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Fires after a new &lt;xref:System.Data.DataRow&gt; has been created using &lt;xref:System.Data.DataTable.NewRow%2A&gt;.","pos":[0,107],"source":"Fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>."},{"content":"This event is fired before the invoked <ph id=\"ph1\">`NewRow`</ph> method returns.","pos":[108,171],"source":" This event is fired before the invoked `NewRow` method returns."},{"content":"The new &lt;xref:System.Data.DataRow&gt; instance is detached; it has not been added to the collection.","pos":[172,269],"source":" The new <xref:System.Data.DataRow> instance is detached; it has not been added to the collection."}]},{"pos":[214993,215005],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[215333,215476],"content":"Gets the &lt;xref:System.Data.DataTable.TableName<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Data.DataTable.DisplayExpression<ept id=\"p1\">*</ept>&gt;, if there is one as a concatenated string.","needQuote":true,"needEscape":true,"source":"Gets the <xref:System.Data.DataTable.TableName*> and <xref:System.Data.DataTable.DisplayExpression*>, if there is one as a concatenated string."},{"pos":[215488,215630],"content":"Gets the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> for the <xref:System.Data.DataTable>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Gets the &lt;xref:System.Data.DataTable.TableName%2A&gt; and &lt;xref:System.Data.DataTable.DisplayExpression%2A&gt; for the &lt;xref:System.Data.DataTable&gt;.","pos":[0,142],"source":"Gets the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> for the <xref:System.Data.DataTable>."}]},{"pos":[216187,216317],"content":"A string consisting of the &lt;xref:System.Data.DataTable.TableName<bpt id=\"p1\">*</bpt>&gt; and the &lt;xref:System.Data.DataTable.DisplayExpression<ept id=\"p1\">*</ept>&gt; values.","needQuote":true,"needEscape":true,"source":"A string consisting of the <xref:System.Data.DataTable.TableName*> and the <xref:System.Data.DataTable.DisplayExpression*> values."},{"pos":[216743,216872],"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified &lt;xref:System.IO.Stream&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.Stream>."},{"pos":[216885,217882],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[725,992],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[218036,218081],"content":"The stream to which the data will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which the data will be written.","pos":[0,45]}]},{"pos":[218527,218660],"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified &lt;xref:System.IO.TextWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.TextWriter>."},{"pos":[218673,219670],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[725,992],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[219832,219896],"content":"The <xref:System.IO.TextWriter> with which to write the content.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; with which to write the content.","pos":[0,64],"source":"The <xref:System.IO.TextWriter> with which to write the content."}]},{"pos":[220316,220426],"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified file.","needQuote":true,"needEscape":true,"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified file."},{"pos":[220439,221436],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[725,992],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[221581,221621],"content":"The file to which to write the XML data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file to which to write the XML data.","pos":[0,40]}]},{"pos":[222064,222197],"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified &lt;xref:System.Xml.XmlWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.Xml.XmlWriter>."},{"pos":[222210,223206],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,417],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[424,571],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[572,661],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[662,718],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[724,991],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[223368,223433],"content":"The <xref:System.Xml.XmlWriter> with which to write the contents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; with which to write the contents.","pos":[0,65],"source":"The <xref:System.Xml.XmlWriter> with which to write the contents."}]},{"pos":[223913,224209],"content":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.Stream>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified &lt;xref:System.IO.Stream&gt;.","pos":[0,129],"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.Stream>."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[130,296],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[224222,225093],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[365,439],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and all of its descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[440,589],"source":" To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[595,862],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[225268,225313],"content":"The stream to which the data will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which the data will be written.","pos":[0,45]}]},{"pos":[225385,225644],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[226159,226500],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified file using the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,191],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[192,341],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[226513,227510],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[725,992],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[227695,227740],"content":"The stream to which the data will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which the data will be written.","pos":[0,45]}]},{"pos":[227812,227876],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[228376,228676],"content":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.TextWriter>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified &lt;xref:System.IO.TextWriter&gt;.","pos":[0,133],"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.TextWriter>."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[134,300],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[228689,229613],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[425,499],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and all its descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[500,646],"source":" To write the data for the current table and all its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[652,919],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[230439,230503],"content":"The <xref:System.IO.TextWriter> with which to write the content.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; with which to write the content.","pos":[0,64],"source":"The <xref:System.IO.TextWriter> with which to write the content."}]},{"pos":[230575,230834],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[231369,231720],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextWriter&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,201],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[202,351],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[231733,232730],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[725,992],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[232923,232982],"content":"The <xref:System.IO.TextWriter> used to write the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; used to write the document.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> used to write the document."}]},{"pos":[233054,233118],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[233592,233869],"content":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified file. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified file.","pos":[0,110],"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified file."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[111,277],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[233882,235112],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[726,800],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and all of its descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[801,950],"source":" To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[956,1223],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[235278,235318],"content":"The file to which to write the XML data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file to which to write the XML data.","pos":[0,40]}]},{"pos":[235390,235649],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[236158,236486],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified file and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified file and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,178],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified file and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[179,328],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[236499,237495],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,417],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[424,571],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[572,661],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[662,718],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[724,991],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[237671,237726],"content":"The name of the file to which the data will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file to which the data will be written.","pos":[0,55]}]},{"pos":[237798,237862],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[238359,238492],"content":"Writes the current contents of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as XML using the specified &lt;xref:System.Xml.XmlWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.Xml.XmlWriter>."},{"pos":[238505,239734],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,417],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[424,571],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[572,661],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[662,718],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[725,799],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and its entire descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[800,949],"source":" To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[955,1222],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[239917,239982],"content":"The <xref:System.Xml.XmlWriter> with which to write the contents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; with which to write the contents.","pos":[0,65],"source":"The <xref:System.Xml.XmlWriter> with which to write the contents."}]},{"pos":[240054,240313],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[240845,241196],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.Xml.XmlWriter&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,201],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[202,351],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[241209,242205],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,417],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[424,571],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[572,661],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[662,718],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[724,991],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[242398,242457],"content":"The <xref:System.Xml.XmlWriter> used to write the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; used to write the document.","pos":[0,59],"source":"The <xref:System.Xml.XmlWriter> used to write the document."}]},{"pos":[242529,242593],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[243162,243670],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified file using the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,191],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[192,341],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[342,508],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[243683,245586],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally, the `WriteXml` method saves data only for the current table. The `WriteXml` method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the `WriteXmlSchema` method writes only the schema. To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a <ph id=\"ph1\">`DataTable`</ph> into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,248],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`XmlWriteMode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[249,384],"source":" To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[391,538],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[539,628],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[629,685],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally, the <ph id=\"ph1\">`WriteXml`</ph> method saves data only for the current table.","pos":[692,762],"source":"       Normally, the `WriteXml` method saves data only for the current table."},{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">`DataTable`</ph> into an XML document, whereas the <ph id=\"ph3\">`WriteXmlSchema`</ph> method writes only the schema.","pos":[763,951],"source":" The `WriteXml` method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the `WriteXmlSchema` method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`XmlWriteMode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[952,1087],"source":" To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[1094,1241],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[1242,1331],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[1332,1388],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[1395,1469],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and all of its descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[1470,1619],"source":" To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[1625,1892],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[245792,245837],"content":"The stream to which the data will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which the data will be written.","pos":[0,45]}]},{"pos":[245909,245973],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[246045,246304],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[246893,247411],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextWriter&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,201],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[202,351],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[352,518],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[247424,249455],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally, the `WriteXml` method saves data only for the current table. The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,418],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[425,572],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[573,662],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[663,719],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally, the <ph id=\"ph1\">`WriteXml`</ph> method saves data only for the current table.","pos":[726,796],"source":"       Normally, the `WriteXml` method saves data only for the current table."},{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[797,1062],"source":" The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[1063,1215],"source":" To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[1222,1369],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[1370,1459],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[1460,1516],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[1523,1597],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and all of its descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[1598,1747],"source":" To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[1753,2020],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[254937,254996],"content":"The <xref:System.IO.TextWriter> used to write the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; used to write the document.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> used to write the document."}]},{"pos":[255068,255132],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[255204,255463],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[256026,256521],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified file and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified file and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,178],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified file and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[179,328],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[329,495],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[256534,258626],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally, the `WriteXml` method saves data only for the current table. If you want to save the data for the current table and all of schema, the <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,417],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[424,571],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[572,661],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[662,718],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally, the <ph id=\"ph1\">`WriteXml`</ph> method saves data only for the current table.","pos":[725,795],"source":"       Normally, the `WriteXml` method saves data only for the current table."},{"content":"If you want to save the data for the current table and all of schema, the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[796,1131],"source":" If you want to save the data for the current table and all of schema, the <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[1132,1283],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[1290,1437],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[1438,1527],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[1528,1584],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[1591,1665],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and all descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[1666,1808],"source":" To write the data for the current table and all descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[1814,2081],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[258823,258878],"content":"The name of the file to which the data will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file to which the data will be written.","pos":[0,55]}]},{"pos":[258950,259014],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[259086,259345],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[259931,260449],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.Xml.XmlWriter&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,201],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[202,351],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."},{"content":"To save the data for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[352,518],"source":" To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[260462,261691],"content":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataTable&gt; into an XML document, whereas the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,265],"source":"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that include the &lt;xref:System.Data.XmlWriteMode&gt; parameter, and set its value to <ph id=\"ph1\">`WriteSchema`</ph>.","pos":[266,417],"source":" To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataTable.ReadXml%2A&gt; and &lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt; methods, respectively.","pos":[424,571],"source":"       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataTable`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[572,661],"source":" To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[662,718],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"Normally the <ph id=\"ph1\">`WriteXml`</ph> method writes the data only for the current table.","pos":[725,799],"source":"       Normally the `WriteXml` method writes the data only for the current table."},{"content":"To write the data for the current table and its entire descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[800,949],"source":" To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[955,1222],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[261905,261964],"content":"The <xref:System.Xml.XmlWriter> used to write the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; used to write the document.","pos":[0,59],"source":"The <xref:System.Xml.XmlWriter> used to write the document."}]},{"pos":[262036,262100],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[262172,262431],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the contents of the current table and all its descendants.","pos":[0,129],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the data for the current table only.","pos":[130,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only."}]},{"pos":[262887,263012],"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema to the specified stream.","needQuote":true,"needEscape":true,"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified stream."},{"pos":[263025,263387],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","pos":[0,358],"nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."}]}]},{"pos":[263547,263598],"content":"The stream to which the XML schema will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which the XML schema will be written.","pos":[0,51]}]},{"pos":[264080,264229],"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema using the specified &lt;xref:System.IO.TextWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.IO.TextWriter>."},{"pos":[264242,264604],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","pos":[0,358],"nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."}]}]},{"pos":[264772,264824],"content":"The <xref:System.IO.TextWriter> with which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; with which to write.","pos":[0,52],"source":"The <xref:System.IO.TextWriter> with which to write."}]},{"pos":[265280,265403],"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema to the specified file.","needQuote":true,"needEscape":true,"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified file."},{"pos":[265416,265778],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","pos":[0,358],"nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."}]}]},{"pos":[265929,265957],"content":"The name of the file to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file to use.","pos":[0,28]}]},{"pos":[266436,266585],"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema using the specified &lt;xref:System.Xml.XmlWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>."},{"pos":[266598,266960],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.","pos":[0,358],"nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."}]}]},{"pos":[267128,267167],"content":"The <xref:System.Xml.XmlWriter> to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; to use.","pos":[0,39],"source":"The <xref:System.Xml.XmlWriter> to use."}]},{"pos":[267683,267977],"content":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified stream. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema to the specified stream.","pos":[0,125],"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified stream."},{"content":"To save the schema for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[126,294],"source":" To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[267990,268595],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."},{"content":"Normally the <ph id=\"ph1\">`WriteXmlSchema`</ph> method writes the schema only for the current table.","pos":[365,447],"source":"       Normally the `WriteXmlSchema` method writes the schema only for the current table."},{"content":"To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[448,599],"source":" To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."}]},{"pos":[268776,268827],"content":"The stream to which the XML schema will be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which the XML schema will be written.","pos":[0,51]}]},{"pos":[268899,269158],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the schema of the current table and all its descendants.","pos":[0,127],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the schema for the current table only.","pos":[128,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only."}]},{"pos":[269694,270012],"content":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.IO.TextWriter>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema using the specified &lt;xref:System.IO.TextWriter&gt;.","pos":[0,149],"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.IO.TextWriter>."},{"content":"To save the schema for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[150,318],"source":" To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[270025,270630],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."},{"content":"Normally the <ph id=\"ph1\">`WriteXmlSchema`</ph> method writes the schema only for the current table.","pos":[365,447],"source":"       Normally the `WriteXmlSchema` method writes the schema only for the current table."},{"content":"To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[448,599],"source":" To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."}]},{"pos":[274507,274559],"content":"The <xref:System.IO.TextWriter> with which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; with which to write.","pos":[0,52],"source":"The <xref:System.IO.TextWriter> with which to write."}]},{"pos":[274631,274890],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the schema of the current table and all its descendants.","pos":[0,127],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the schema for the current table only.","pos":[128,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only."}]},{"pos":[275400,275692],"content":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified file. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema to the specified file.","pos":[0,123],"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified file."},{"content":"To save the schema for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[124,292],"source":" To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[275705,276310],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."},{"content":"Normally the <ph id=\"ph1\">`WriteXmlSchema`</ph> method writes the schema only for the current table.","pos":[365,447],"source":"       Normally the `WriteXmlSchema` method writes the schema only for the current table."},{"content":"To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[448,599],"source":" To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."}]},{"pos":[276482,276510],"content":"The name of the file to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file to use.","pos":[0,28]}]},{"pos":[276582,276841],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the schema of the current table and all its descendants.","pos":[0,127],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the schema for the current table only.","pos":[128,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only."}]},{"pos":[277374,277692],"content":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an XML schema using the specified &lt;xref:System.Xml.XmlWriter&gt;.","pos":[0,149],"source":"Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>."},{"content":"To save the schema for the table and all its descendants, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">writeHierarchy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[150,318],"source":" To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[277705,278310],"content":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataTable&gt; to an XML document.","pos":[0,136],"source":"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[137,201]},{"content":"The XML schema is written using the XSD standard.","pos":[208,257]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataTable.WriteXml%2A&gt; method.","pos":[264,358],"source":"       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."},{"content":"Normally the <ph id=\"ph1\">`WriteXmlSchema`</ph> method writes the schema only for the current table.","pos":[365,447],"source":"       Normally the `WriteXmlSchema` method writes the schema only for the current table."},{"content":"To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id=\"ph1\">`writeHierarchy`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[448,599],"source":" To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."}]},{"pos":[278499,278558],"content":"The <xref:System.Xml.XmlWriter> used to write the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; used to write the document.","pos":[0,59],"source":"The <xref:System.Xml.XmlWriter> used to write the document."}]},{"pos":[278630,278889],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, write the schema of the current table and all its descendants.","pos":[0,127],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (the default value), write the schema for the current table only.","pos":[128,259],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.DataTable\n  id: DataTable\n  children:\n  - System.Data.DataTable.#ctor\n  - System.Data.DataTable.#ctor(System.String)\n  - System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataTable.#ctor(System.String,System.String)\n  - System.Data.DataTable.AcceptChanges\n  - System.Data.DataTable.BeginInit\n  - System.Data.DataTable.BeginLoadData\n  - System.Data.DataTable.CaseSensitive\n  - System.Data.DataTable.ChildRelations\n  - System.Data.DataTable.Clear\n  - System.Data.DataTable.Clone\n  - System.Data.DataTable.ColumnChanged\n  - System.Data.DataTable.ColumnChanging\n  - System.Data.DataTable.Columns\n  - System.Data.DataTable.Compute(System.String,System.String)\n  - System.Data.DataTable.Constraints\n  - System.Data.DataTable.Copy\n  - System.Data.DataTable.CreateDataReader\n  - System.Data.DataTable.CreateInstance\n  - System.Data.DataTable.DataSet\n  - System.Data.DataTable.DefaultView\n  - System.Data.DataTable.DisplayExpression\n  - System.Data.DataTable.EndInit\n  - System.Data.DataTable.EndLoadData\n  - System.Data.DataTable.ExtendedProperties\n  - System.Data.DataTable.fInitInProgress\n  - System.Data.DataTable.GetChanges\n  - System.Data.DataTable.GetChanges(System.Data.DataRowState)\n  - System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)\n  - System.Data.DataTable.GetErrors\n  - System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataTable.GetRowType\n  - System.Data.DataTable.GetSchema\n  - System.Data.DataTable.HasErrors\n  - System.Data.DataTable.ImportRow(System.Data.DataRow)\n  - System.Data.DataTable.Initialized\n  - System.Data.DataTable.IsInitialized\n  - System.Data.DataTable.Load(System.Data.IDataReader)\n  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)\n  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)\n  - System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)\n  - System.Data.DataTable.Locale\n  - System.Data.DataTable.Merge(System.Data.DataTable)\n  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)\n  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataTable.MinimumCapacity\n  - System.Data.DataTable.Namespace\n  - System.Data.DataTable.NewRow\n  - System.Data.DataTable.NewRowArray(System.Int32)\n  - System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)\n  - System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)\n  - System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)\n  - System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  - System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)\n  - System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)\n  - System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)\n  - System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)\n  - System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)\n  - System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)\n  - System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)\n  - System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)\n  - System.Data.DataTable.ParentRelations\n  - System.Data.DataTable.Prefix\n  - System.Data.DataTable.PrimaryKey\n  - System.Data.DataTable.ReadXml(System.IO.Stream)\n  - System.Data.DataTable.ReadXml(System.IO.TextReader)\n  - System.Data.DataTable.ReadXml(System.String)\n  - System.Data.DataTable.ReadXml(System.Xml.XmlReader)\n  - System.Data.DataTable.ReadXmlSchema(System.IO.Stream)\n  - System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)\n  - System.Data.DataTable.ReadXmlSchema(System.String)\n  - System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)\n  - System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)\n  - System.Data.DataTable.RejectChanges\n  - System.Data.DataTable.RemotingFormat\n  - System.Data.DataTable.Reset\n  - System.Data.DataTable.RowChanged\n  - System.Data.DataTable.RowChanging\n  - System.Data.DataTable.RowDeleted\n  - System.Data.DataTable.RowDeleting\n  - System.Data.DataTable.Rows\n  - System.Data.DataTable.Select\n  - System.Data.DataTable.Select(System.String)\n  - System.Data.DataTable.Select(System.String,System.String)\n  - System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)\n  - System.Data.DataTable.Site\n  - System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Data.DataTable.System#ComponentModel#IListSource#GetList\n  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema\n  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  - System.Data.DataTable.TableCleared\n  - System.Data.DataTable.TableClearing\n  - System.Data.DataTable.TableName\n  - System.Data.DataTable.TableNewRow\n  - System.Data.DataTable.ToString\n  - System.Data.DataTable.WriteXml(System.IO.Stream)\n  - System.Data.DataTable.WriteXml(System.IO.TextWriter)\n  - System.Data.DataTable.WriteXml(System.String)\n  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter)\n  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  - System.Data.DataTable.WriteXml(System.String,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)\n  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)\n  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)\n  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream)\n  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)\n  - System.Data.DataTable.WriteXmlSchema(System.String)\n  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)\n  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)\n  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)\n  - System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)\n  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)\n  langs:\n  - csharp\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n  type: Class\n  summary: Represents one table of in-memory data.\n  remarks: \"The DataTable is a central object in the ADO.NET library. Other objects that use the DataTable include the <xref:System.Data.DataSet> and the <xref:System.Data.DataView>.  \\n  \\n When accessing DataTable objects, note that they are conditionally case sensitive. For example, if one DataTable is named \\\"mydatatable\\\" and another is named \\\"Mydatatable\\\", a string used to search for one of the tables is regarded as case sensitive. However, if \\\"mydatatable\\\" exists and \\\"Mydatatable\\\" does not, the search string is regarded as case insensitive. A <xref:System.Data.DataSet> can contain two DataTable objects that have the same <xref:System.Data.DataTable.TableName%2A> property value but different <xref:System.Data.DataTable.Namespace%2A> property values. For more information about working with DataTable objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If you are creating a DataTable programmatically, you must first define its schema by adding <xref:System.Data.DataColumn> objects to the <xref:System.Data.DataColumnCollection> (accessed through the <xref:System.Data.DataTable.Columns%2A> property). For more information about adding <xref:System.Data.DataColumn> objects, see [Adding Columns to a DataTable](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To add rows to a DataTable, you must first use the <xref:System.Data.DataTable.NewRow%2A> method to return a new <xref:System.Data.DataRow> object. The <xref:System.Data.DataTable.NewRow%2A> method returns a row with the schema of the DataTable, as it is defined by the table's <xref:System.Data.DataColumnCollection>. The maximum number of rows that a DataTable can store is 16,777,216. For more information, see [Adding Data to a DataTable](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The DataTable also contains a collection of <xref:System.Data.Constraint> objects that can be used to ensure the integrity of the data. For more information, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md).  \\n  \\n There are many DataTable events that can be used to determine when changes are made to a table. These include <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>, and <xref:System.Data.DataTable.RowDeleted>. For more information about the events that can be used with a DataTable, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When an instance of DataTable is created, some of the read/write properties are set to initial values. For a list of these values, see the <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName> constructor topic.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Data.DataSet> and DataTable objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for .NET Framework remoting. These are the only ADO.NET objects that you can use for .NET Framework remoting.\"\n  example:\n  - \"The following example creates two DataTable objects and one <xref:System.Data.DataRelation> object, and adds the new objects to a <xref:System.Data.DataSet>. The tables are then displayed in a <xref:System.Windows.Forms.DataGridView> control.  \\n  \\n [!code-vb[Classic WebData DataTable Example#1](~/add/codesnippet/visualbasic/t-system.data.datatable_1.vb)]\\n [!code-cs[Classic WebData DataTable Example#1](~/add/codesnippet/csharp/t-system.data.datatable_1.cs)]  \\n  \\n This sample demonstrates how to create a DataTable manually with specific schema definitions:  \\n  \\n-   Create multiple DataTables and define the initial columns.  \\n  \\n-   Create the table constraints.  \\n  \\n-   Insert the values and display the tables.  \\n  \\n-   Create the expression columns and display the tables.  \\n  \\n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914).  \\n  \\n [!code-cs[Classic WebData DataTable Example2#1](~/add/codesnippet/csharp/t-system.data.datatable_2.cs)]\\n [!code-vb[Classic WebData DataTable Example2#1](~/add/codesnippet/visualbasic/t-system.data.datatable_2.vb)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"RowChanging\")]\n\n      [System.ComponentModel.DefaultProperty(\"TableName\")]\n\n      [System.ComponentModel.DesignTimeVisible(false)]\n\n      [System.ComponentModel.Editor(\"Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", \"System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ComponentModel.ToolboxItem(false)]\n\n      [System.Xml.Serialization.XmlSchemaProvider(\"GetDataTableSchema\")]\n\n      public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable\n  inheritance:\n  - System.Object\n  - System.ComponentModel.MarshalByValueComponent\n  implements:\n  - System.ComponentModel.IListSource\n  - System.ComponentModel.ISupportInitializeNotification\n  - System.Runtime.Serialization.ISerializable\n  - System.Xml.Serialization.IXmlSerializable\n  inheritedMembers:\n  - System.ComponentModel.MarshalByValueComponent.Container\n  - System.ComponentModel.MarshalByValueComponent.DesignMode\n  - System.ComponentModel.MarshalByValueComponent.Dispose\n  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)\n  - System.ComponentModel.MarshalByValueComponent.Disposed\n  - System.ComponentModel.MarshalByValueComponent.Events\n  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)\n  platform:\n  - net462\n- uid: System.Data.DataTable.#ctor\n  id: '#ctor'\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DataTable()\n  nameWithType: DataTable.DataTable()\n  fullName: System.Data.DataTable.DataTable()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class with no arguments.\n  remarks: \"The constructor sets initial values for all properties of the <xref:System.Data.DataTable> object. The following table shows the properties and their default values. When an instance of <xref:System.Data.DataTable> is created, the following read/write properties are set to initial values.  \\n  \\n|Property|Default value|  \\n|--------------|-------------------|  \\n|**CaseSensitive**|Same as the parent <xref:System.Data.DataSet>, if it belongs to one. Otherwise, `false`.|  \\n|**DisplayExpression**|Empty string (\\\"\\\")|  \\n|**Locale**|Same as the parent <xref:System.Data.DataSet> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale%2A> property); if no parent exists, the default is the current system <xref:System.Globalization.CultureInfo>.|  \\n|**MinimumCapacity**|50 rows.|  \\n  \\n You can change the value for any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataTable> with <xref:System.Data.DataColumn> and <xref:System.Data.DataRow>, and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \\n  \\n [!code-vb[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._0_1.vb)]\\n [!code-cs[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/csharp/m-system.data.datatable._0_1.cs)]\"\n  syntax:\n    content: public DataTable ();\n    parameters: []\n  overload: System.Data.DataTable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DataTable(String)\n  nameWithType: DataTable.DataTable(String)\n  fullName: System.Data.DataTable.DataTable(String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class with the specified table name.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Data.DataTable> and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \\n  \\n [!code-cs[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._21_1.cs)]\\n [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._21_1.vb)]\"\n  syntax:\n    content: public DataTable (string tableName);\n    parameters:\n    - id: tableName\n      type: System.String\n      description: The name to give the table. If `tableName` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string, a default name is given when added to the <xref href=\"System.Data.DataTableCollection\"></xref>.\n  overload: System.Data.DataTable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DataTable(SerializationInfo,StreamingContext)\n  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class with the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> and the <xref:System.Runtime.Serialization.StreamingContext>.\n  remarks: This implementation of the <xref:System.Data.DataTable> constructor is required for <xref:System.Runtime.Serialization.ISerializable>.\n  syntax:\n    content: protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The data needed to serialize or deserialize an object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The source and destination of a given serialized stream.\n  overload: System.Data.DataTable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DataTable(String,String)\n  nameWithType: DataTable.DataTable(String,String)\n  fullName: System.Data.DataTable.DataTable(String,String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataTable\"></xref> class using the specified table name and namespace.\n  syntax:\n    content: public DataTable (string tableName, string tableNamespace);\n    parameters:\n    - id: tableName\n      type: System.String\n      description: The name to give the table. If `tableName` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string, a default name is given when added to the <xref href=\"System.Data.DataTableCollection\"></xref>.\n    - id: tableNamespace\n      type: System.String\n      description: The namespace for the XML representation of the data stored in the <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>.\n  overload: System.Data.DataTable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.AcceptChanges\n  id: AcceptChanges\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: AcceptChanges()\n  nameWithType: DataTable.AcceptChanges()\n  fullName: System.Data.DataTable.AcceptChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Commits all the changes made to this table since the last time AcceptChanges was called.\n  remarks: \"When AcceptChanges is called, any <xref:System.Data.DataRow> object still in edit mode successfully ends its edits. The <xref:System.Data.DataRowState> also changes: all `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.  \\n  \\n The AcceptChanges method is generally called on a <xref:System.Data.DataTable> after you attempt to update the <xref:System.Data.DataSet> using the <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following example tests each table for errors. If the table's errors can be reconciled (by passing it to an undefined function), AcceptChanges is called; otherwise, <xref:System.Data.DataTable.RejectChanges%2A> is called.  \\n  \\n [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._22_1.vb)]\\n [!code-cs[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._22_1.cs)]\"\n  syntax:\n    content: public void AcceptChanges ();\n    parameters: []\n  overload: System.Data.DataTable.AcceptChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.BeginInit\n  id: BeginInit\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: BeginInit()\n  nameWithType: DataTable.BeginInit()\n  fullName: System.Data.DataTable.BeginInit()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Begins the initialization of a <xref href=\"System.Data.DataTable\"></xref> that is used on a form or used by another component. The initialization occurs at run time.\n  remarks: The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public virtual void BeginInit ();\n    parameters: []\n  overload: System.Data.DataTable.BeginInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.BeginLoadData\n  id: BeginLoadData\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: BeginLoadData()\n  nameWithType: DataTable.BeginLoadData()\n  fullName: System.Data.DataTable.BeginLoadData()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Turns off notifications, index maintenance, and constraints while loading data.\n  remarks: Use BeginLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.\n  syntax:\n    content: public void BeginLoadData ();\n    parameters: []\n  overload: System.Data.DataTable.BeginLoadData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.CaseSensitive\n  id: CaseSensitive\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: CaseSensitive\n  nameWithType: DataTable.CaseSensitive\n  fullName: System.Data.DataTable.CaseSensitive\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Indicates whether string comparisons within the table are case-sensitive.\n  remarks: The CaseSensitive property affects string comparisons in sorting, searching, and filtering.\n  example:\n  - \"The following example calls the <xref:System.Data.DataTable.Select%2A> method twice on a <xref:System.Data.DataTable>. The first time, the CaseSensitive property is set to `false`, the second, to `true`.  \\n  \\n [!code-cs[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/csharp/p-system.data.datatable._0_1.cs)]\\n [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._0_1.vb)]\"\n  syntax:\n    content: public bool CaseSensitive { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comparison is case-sensitive; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is set to the parent <xref href=\"System.Data.DataSet\"></xref> object's <xref:System.Data.DataSet.CaseSensitive*> property, or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the <xref href=\"System.Data.DataTable\"></xref> was created independently of a <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataTable.CaseSensitive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ChildRelations\n  id: ChildRelations\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ChildRelations\n  nameWithType: DataTable.ChildRelations\n  fullName: System.Data.DataTable.ChildRelations\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of child relations for this <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: 'A <xref:System.Data.DataRelation> defines the relationship between two tables. Typically, two tables are linked through a single field that contains the same data. For example, a table which contains address data may have a single field containing codes that represent countries/regions. A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table. A <xref:System.Data.DataRelation>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.'\n  example:\n  - \"The following example uses the ChildRelations property to return each child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetChildRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \\n  \\n [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._13_1.vb)]\\n [!code-cs[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._13_1.cs)]\"\n  syntax:\n    content: public System.Data.DataRelationCollection ChildRelations { get; }\n    return:\n      type: System.Data.DataRelationCollection\n      description: A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains the child relations for the table. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.\n  overload: System.Data.DataTable.ChildRelations*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Clear\n  id: Clear\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: DataTable.Clear()\n  fullName: System.Data.DataTable.Clear()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Clears the <xref href=\"System.Data.DataTable\"></xref> of all data.\n  remarks: \"All rows in all tables are removed. An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.  \\n  \\n If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or Clear raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time. When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be processed before you call Clear.\"\n  example:\n  - \"The following example clears the table of all data.  \\n  \\n [!code-cs[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/csharp/m-system.data.datatable._20_1.cs)]\\n [!code-vb[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._20_1.vb)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Data.DataTable.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Clone\n  id: Clone\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: DataTable.Clone()\n  fullName: System.Data.DataTable.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Clones the structure of the <xref href=\"System.Data.DataTable\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas and constraints.\n  remarks: \"If these classes have been derived, the clone will also be of the same derived classes.  \\n  \\n Clone creates a new <xref:System.Data.DataTable> with the same structure as the original <xref:System.Data.DataTable>, but does not copy any data (the new <xref:System.Data.DataTable> will not contain any `DataRows`). To copy both the structure and data into a new <xref:System.Data.DataTable>, use <xref:System.Data.DataTable.Copy%2A>.\"\n  example:\n  - \"The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone. The ClonedDataTable class will return a destination table and includes all the updating events. After the clone, structure changes in the source table won’t be reflected in the destination table. Specifically, this sample will:  \\n  \\n-   Update the changes of the columns in source table.  \\n  \\n-   Update the changes of the UniqueConstraint in source table.  \\n  \\n-   Update the changes of the ForeignKeyConstraint in source table.  \\n  \\n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable).  \\n  \\n```  \\nusing System;  \\nusing System.Linq;  \\nusing System.Data;  \\nusing System.ComponentModel;  \\n  \\nclass Program {  \\n   static void Main(string[] args) {  \\n      DataTable courses = NewCourseDataTable();  \\n      Console.WriteLine(\\\"This is the source table:\\\");  \\n      WriteDataTable(courses);  \\n  \\n      ClonedDataTable clonedResult = new ClonedDataTable(courses);  \\n      DataTable clonedCourses = clonedResult.DestinationTable;  \\n      Console.WriteLine(\\\"This is the destination table:\\\");  \\n      WriteDataTable(clonedCourses);  \\n  \\n      // Add the events of updating column collection into the source table.  \\n      clonedResult.UpdateAddedColumn();  \\n      clonedResult.UpdateDeletedColumn();  \\n      // Add a DataColumn in source table.  \\n      DataColumn columnCreidts = new DataColumn(\\\"Credits\\\", typeof(Int32));  \\n      courses.Columns.Add(columnCreidts);  \\n      Console.WriteLine(\\\"After add a column in source table, it's the result in the destination:\\\");  \\n      WriteDataTable(clonedCourses);  \\n  \\n      // Add the event of updating UniqueConstraint into the source table.  \\n      clonedResult.UpdateUniqueConstraint();  \\n  \\n      // Add the unique constraint in source table.  \\n      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns[\\\"CourseId\\\"]);  \\n      courses.Constraints.Add(uniqueConstraint);  \\n  \\n      Console.WriteLine(@\\\"If we add the unique constraint in source table and then insert the duplicate   \\nrows into the destination table, we will get the following error:\\\");  \\n      InsertDuplicateData(clonedCourses);  \\n      Console.WriteLine();  \\n  \\n      // Add the event of updating ForeignKeyConstraint into the source table.  \\n      clonedResult.UpdateForeignKeyConstraint();  \\n  \\n      // Add the ForeignKeyConstraint into the source table.  \\n      DataTable deparments = NewDeparmentDataTable();  \\n      DataSet dataset = new DataSet();  \\n  \\n      dataset.Tables.Add(courses);  \\n      dataset.Tables.Add(clonedCourses);  \\n      dataset.Tables.Add(deparments);  \\n  \\n      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns[\\\"DepartmentId\\\"], courses.Columns[\\\"DepartmentId\\\"]);  \\n      courses.Constraints.Add(foreignKey);  \\n  \\n      Console.WriteLine(@\\\"If we add the foreign key constraint in source table and then insert a row   \\nwithout the parent  into the destination table, we will get the following error:\\\");  \\n      InsertNoParentRow(clonedCourses);  \\n      Console.WriteLine();  \\n  \\n      Console.WriteLine(\\\"Please press any key to exit...\\\");  \\n      Console.ReadKey();  \\n   }  \\n  \\n   static private DataTable NewCourseDataTable() {  \\n      DataTable newTable = new DataTable();  \\n  \\n      DataColumn[] columns ={   \\n                                      new DataColumn(\\\"CourseId\\\", typeof(String)),  \\n                                      new DataColumn(\\\"CourseName\\\",typeof(String)),                                        \\n                                      new DataColumn(\\\"DepartmentId\\\", typeof(Int32))  \\n                                  };  \\n  \\n      newTable.Columns.AddRange(columns);  \\n  \\n      newTable.Rows.Add(\\\"C1045\\\", \\\"Calculus\\\", 7);  \\n      newTable.Rows.Add(\\\"C1061\\\", \\\"Physics\\\", 1);  \\n      newTable.Rows.Add(\\\"C2021\\\", \\\"Composition\\\", 2);  \\n      newTable.Rows.Add(\\\"C2042\\\", \\\"Literature\\\", 2);  \\n  \\n      return newTable;  \\n   }  \\n  \\n   static private DataTable NewDeparmentDataTable() {  \\n      DataTable newTable = new DataTable();  \\n  \\n      DataColumn[] columns ={   \\n                                      new DataColumn(\\\"DepartmentId\\\", typeof(Int32)),  \\n                                      new DataColumn(\\\"Name\\\",typeof(String)),  \\n                                  };  \\n  \\n      newTable.Columns.AddRange(columns);  \\n  \\n      newTable.Rows.Add(1, \\\"Engineering\\\");  \\n      newTable.Rows.Add(2, \\\"English\\\");  \\n      newTable.Rows.Add(4, \\\"Economics\\\");  \\n      newTable.Rows.Add(7, \\\"Mathematics\\\");  \\n  \\n      return newTable;  \\n   }  \\n  \\n   static private void WriteDataTable(DataTable table) {  \\n      if (table == null)  \\n         return;  \\n  \\n      foreach (DataColumn column in table.Columns) {  \\n         Console.Write(\\\"{0,-15}\\\", column.ColumnName);  \\n      }  \\n      Console.WriteLine();  \\n  \\n      foreach (DataRow row in table.Rows) {  \\n         for (int i = 0; i < table.Columns.Count; i++)  \\n            Console.Write(\\\"{0,-15}\\\", row[i].ToString());  \\n         Console.WriteLine();  \\n      }  \\n  \\n      Console.WriteLine();  \\n   }  \\n  \\n   static private void InsertDuplicateData(DataTable table) {  \\n      try {  \\n         table.Rows.Add(\\\"C1045\\\", \\\"Calculus\\\", 7);  \\n         table.Rows.Add(\\\"C1045\\\", \\\"Calculus\\\", 7);  \\n      } catch (Exception e) {  \\n         Console.WriteLine(\\\"\\\\\\\"\\\" + e.Message + \\\"\\\\\\\"\\\");  \\n      }  \\n   }  \\n  \\n   private static void InsertNoParentRow(DataTable table) {  \\n      try {  \\n         table.Rows.Add(\\\"C1061\\\", \\\"Physics\\\", 11);  \\n      } catch (Exception e) {  \\n         Console.WriteLine(\\\"\\\\\\\"\\\" + e.Message + \\\"\\\\\\\"\\\");  \\n      }  \\n   }  \\n}  \\n  \\npublic class ClonedDataTable {  \\n   private DataTable sourceTable;  \\n   private DataTable destinationTable;  \\n  \\n   public ClonedDataTable(DataTable source) {  \\n      sourceTable = source;  \\n      // set the cloned result  \\n      destinationTable = sourceTable.Clone();  \\n   }  \\n  \\n   public void UpdateAddedColumn() {  \\n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  \\n   }  \\n  \\n   public void UpdateDeletedColumn() {  \\n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  \\n   }  \\n  \\n   public void UpdateUniqueConstraint() {  \\n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  \\n   }  \\n  \\n   public void UpdateForeignKeyConstraint() {  \\n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  \\n   }  \\n  \\n   // After the source table adds a column, the method will add the same column in the destination table.  \\n   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  \\n      if (e.Action == CollectionChangeAction.Add) {  \\n         DataColumn column = e.Element as DataColumn;  \\n  \\n         if (column != null) {  \\n            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  \\n  \\n            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  \\n               destinationTable.Columns.Add(newColumn);  \\n         }  \\n      }  \\n   }  \\n  \\n   // After the source table deletes a column, the method will delete the same column in the destination table.  \\n   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  \\n      if (e.Action == CollectionChangeAction.Remove) {  \\n         DataColumn column = e.Element as DataColumn;  \\n  \\n         if (column != null)  \\n            if (destinationTable.Columns.Contains(column.ColumnName))  \\n               destinationTable.Columns.Remove(column.ColumnName);  \\n      }  \\n   }  \\n  \\n   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        \\n   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \\n      UniqueConstraint constraint = e.Element as UniqueConstraint;  \\n  \\n      if (constraint == null)  \\n         return;  \\n  \\n      String constraintName = constraint.ConstraintName;  \\n  \\n      if (e.Action == CollectionChangeAction.Add) {  \\n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \\n         Boolean isPrimaryKey = constraint.IsPrimaryKey;  \\n  \\n         // Get the columns used in new constraint from the destiantion table.  \\n         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  \\n            String columnName = constraint.Columns[i].ColumnName;  \\n  \\n            if (destinationTable.Columns.Contains(columnName))  \\n               columns[i] = destinationTable.Columns[columnName];  \\n            else  \\n               return;  \\n         }  \\n  \\n         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  \\n  \\n         if (!destinationTable.Constraints.Contains(constraintName))  \\n            destinationTable.Constraints.Add(newConstraint);  \\n  \\n      } else if (e.Action == CollectionChangeAction.Remove)  \\n         if (destinationTable.Constraints.Contains(constraintName))  \\n            destinationTable.Constraints.Remove(constraintName);  \\n   }  \\n  \\n   // After the source table changes the ForeignKeyConstraint, this method changes    \\n   // the same ForeignKeyConstraint in the destination table.  \\n   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \\n      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  \\n  \\n      if (constraint == null)  \\n         return;  \\n  \\n      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  \\n      if (sourceTable.DataSet != destinationTable.DataSet)  \\n         return;  \\n  \\n      String constraintName = constraint.ConstraintName;  \\n  \\n      if (e.Action == CollectionChangeAction.Add) {  \\n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \\n         DataColumn[] parentColumns = constraint.RelatedColumns;  \\n  \\n         // Get the columns used in new constraint from the destination table.  \\n         for (int i = 0; i < constraint.Columns.Count(); i++) {  \\n            String columnName = constraint.Columns[i].ColumnName;  \\n  \\n            if (destinationTable.Columns.Contains(columnName))  \\n               columns[i] = destinationTable.Columns[columnName];  \\n            else  \\n               return;  \\n         }  \\n  \\n         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  \\n         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  \\n         newConstraint.DeleteRule = constraint.DeleteRule;  \\n         newConstraint.UpdateRule = constraint.UpdateRule;  \\n  \\n         if (!destinationTable.Constraints.Contains(constraintName))  \\n            destinationTable.Constraints.Add(newConstraint);  \\n      } else if (e.Action == CollectionChangeAction.Remove)  \\n         if (destinationTable.Constraints.Contains(constraintName))  \\n            destinationTable.Constraints.Remove(constraintName);  \\n   }  \\n  \\n   // return the destination table.  \\n   public DataTable DestinationTable {  \\n      get { return destinationTable; }  \\n   }  \\n}  \\n```  \\n  \\n This sample shows how to modify data in a DataTable and update the data source.  \\n  \\n First, create a database:  \\n  \\n```  \\nUSE [master]  \\nGO  \\n  \\nCREATE DATABASE [MySchool]   \\n  \\nGO  \\n  \\nUSE [MySchool]  \\nGO  \\n  \\nSET ANSI_NULLS ON  \\nGO  \\nSET QUOTED_IDENTIFIER ON  \\nGO  \\nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \\n[Year] [smallint] NOT NULL,  \\n[Title] [nvarchar](100) NOT NULL,  \\n[Credits] [int] NOT NULL,  \\n[DepartmentID] [int] NOT NULL,  \\n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \\n(  \\n[CourseID] ASC,  \\n[Year] ASC  \\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \\n  \\nGO  \\n  \\nSET ANSI_NULLS ON  \\nGO  \\nSET QUOTED_IDENTIFIER ON  \\nGO  \\nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \\n[Name] [nvarchar](50) NOT NULL,  \\n[Budget] [money] NOT NULL,  \\n[StartDate] [datetime] NOT NULL,  \\n[Administrator] [int] NULL,  \\n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \\n(  \\n[DepartmentID] ASC  \\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \\n  \\nGO  \\n  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \\n  \\nSET IDENTITY_INSERT [dbo].[Department] ON   \\n  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \\nSET IDENTITY_INSERT [dbo].[Department] OFF  \\n  \\nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \\nREFERENCES [dbo].[Department] ([DepartmentID])  \\nGO  \\nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \\nGO  \\n```  \\n  \\n You can now compile and run the sample. [How to modify data in DataTable and update to the data source](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4) has Visual Basic and C# projects of this sample.  \\n  \\n```  \\nusing System;  \\nusing System.Data;  \\nusing System.Data.SqlClient;  \\n  \\nclass Program {  \\n   static void Main(string[] args) {  \\n  \\n   string MySchoolConnectionString = \\\"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True\\\";  \\n  \\n      // Get Data  \\n      String selectString =  \\n       @\\\"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  \\n               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] \\\";  \\n  \\n      DataSet dataSet = new DataSet();  \\n      DataTable course = dataSet.Tables.Add(\\\"Course\\\");  \\n      DataTable department = dataSet.Tables.Add(\\\"Department\\\");  \\n  \\n      Console.WriteLine(\\\"Get data from database:\\\");  \\n      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  \\n      Console.WriteLine();  \\n  \\n      // Use DataTable Edits to edit the data  \\n      String updateString =  \\n              @\\\"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;\\\";  \\n  \\n      course.ColumnChanged += OnColumnChanged;  \\n  \\n      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  \\n      ChangeCredits(course, course.Rows[0], -1);  \\n      ChangeCredits(course, course.Rows[1], 11);  \\n  \\n      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, \\\"Course\\\",  \\n          new SqlParameter(\\\"@CourseID\\\", SqlDbType.NVarChar, 10, \\\"CourseID\\\"),  \\n          new SqlParameter(\\\"@Credits\\\", SqlDbType.Int, 4, \\\"Credits\\\"));  \\n      Console.WriteLine(\\\"Only the Credits of second row is changed.\\\");  \\n      ShowDataTable(course);  \\n      Console.WriteLine();  \\n  \\n      // Delete and Remove from DataTable  \\n      // Create the foreign key constraint, and set the DeleteRule with Cascade.  \\n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\\\"CourseDepartFK\\\", department.Columns[\\\"DepartmentID\\\"], course.Columns[\\\"DepartmentID\\\"]);  \\n      courseDepartFK.DeleteRule = Rule.Cascade;  \\n      courseDepartFK.UpdateRule = Rule.Cascade;  \\n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \\n      course.Constraints.Add(courseDepartFK);  \\n  \\n      String deleteString = @\\\"Delete From [dbo].[Course] Where [CourseID]=@CourseID;\\\";  \\n  \\n      department.Rows[0].Delete();  \\n      Console.WriteLine(\\\"If One row in Department table is deleted, the related rows in Course table will also be deleted.\\\");  \\n      Console.WriteLine(\\\"Department DataTable:\\\");  \\n      ShowDataTable(department);  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Course DataTable:\\\");  \\n      ShowDataTable(course);  \\n      Console.WriteLine();  \\n      // Update the delete operation  \\n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \\\"Course\\\",  \\n          new SqlParameter(\\\"@CourseID\\\", SqlDbType.NVarChar, 10, \\\"CourseID\\\"));  \\n      Console.WriteLine(\\\"After delete operation:\\\");  \\n      Console.WriteLine(\\\"Course DataTable:\\\");  \\n      ShowDataTable(course);  \\n      Console.WriteLine();  \\n  \\n      course.Rows.RemoveAt(0);  \\n      Console.WriteLine(\\\"Now we remove one row from Course:\\\");  \\n      ShowDataTable(course);  \\n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \\\"Course\\\",  \\n          new SqlParameter(\\\"@CourseID\\\", SqlDbType.NVarChar, 10, \\\"CourseID\\\"));  \\n   }  \\n  \\n   // Use SqlDataAdapter to get data.  \\n   private static void GetDataTables(String connectionString, String selectString,  \\n       DataSet dataSet, params DataTable[] tables) {  \\n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \\n         adapter.SelectCommand = new SqlCommand(selectString);  \\n         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  \\n  \\n         adapter.Fill(0, 0, tables);  \\n  \\n         foreach (DataTable table in dataSet.Tables) {  \\n            Console.WriteLine(\\\"Data in {0}:\\\", table.TableName);  \\n            ShowDataTable(table);  \\n            Console.WriteLine();  \\n         }  \\n      }  \\n   }  \\n  \\n   // Use SqlDataAdapter to update the updata operation.  \\n   private static void UpdateDataTables(String connectionString, String updateString,  \\n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \\n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \\n         adapter.UpdateCommand = new SqlCommand(updateString);  \\n         adapter.UpdateCommand.Parameters.AddRange(parameters);  \\n         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  \\n  \\n         adapter.Update(dataSet, tableName);  \\n      }  \\n   }  \\n  \\n   // Use SqlDataAdapter to update delete operation.  \\n   private static void DeleteDataTables(String connectionString, String deleteString,  \\n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \\n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \\n         adapter.DeleteCommand = new SqlCommand(deleteString);  \\n         adapter.DeleteCommand.Parameters.AddRange(parameters);  \\n         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  \\n  \\n         adapter.Update(dataSet, tableName);  \\n      }  \\n   }  \\n  \\n   // Use DataTable Edits to modify the data.  \\n   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  \\n      row.BeginEdit();  \\n      Console.WriteLine(\\\"We change row {0}\\\", table.Rows.IndexOf(row));  \\n      row[\\\"Credits\\\"] = credits;  \\n      row.EndEdit();  \\n   }  \\n  \\n   // The method will be invoked when the value in DataTable is changed.  \\n   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  \\n      Int32 credits = 0;  \\n      // If Credits is changed and the value is negative, we'll cancel the edit.  \\n      if ((args.Column.ColumnName == \\\"Credits\\\") &&  \\n          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  \\n         Console.WriteLine(\\\"The value of Credits is invalid. Edit canceled.\\\");  \\n         args.Row.CancelEdit();  \\n      }  \\n   }  \\n  \\n   // Display the column and value of DataTable.  \\n   private static void ShowDataTable(DataTable table) {  \\n      foreach (DataColumn col in table.Columns) {  \\n         Console.Write(\\\"{0,-14}\\\", col.ColumnName);  \\n      }  \\n      Console.WriteLine(\\\"{0,-14}\\\", \\\"RowState\\\");  \\n  \\n      foreach (DataRow row in table.Rows) {  \\n         if (row.RowState == DataRowState.Deleted) {  \\n            foreach (DataColumn col in table.Columns) {  \\n               if (col.DataType.Equals(typeof(DateTime)))  \\n                  Console.Write(\\\"{0,-14:d}\\\", row[col, DataRowVersion.Original]);  \\n               else if (col.DataType.Equals(typeof(Decimal)))  \\n                  Console.Write(\\\"{0,-14:C}\\\", row[col, DataRowVersion.Original]);  \\n               else  \\n                  Console.Write(\\\"{0,-14}\\\", row[col, DataRowVersion.Original]);  \\n            }  \\n         }  \\n         else {  \\n            foreach (DataColumn col in table.Columns) {  \\n               if (col.DataType.Equals(typeof(DateTime)))  \\n                  Console.Write(\\\"{0,-14:d}\\\", row[col]);  \\n               else if (col.DataType.Equals(typeof(Decimal)))  \\n                  Console.Write(\\\"{0,-14:C}\\\", row[col]);  \\n               else  \\n                  Console.Write(\\\"{0,-14}\\\", row[col]);  \\n            }  \\n         }  \\n         Console.WriteLine(\\\"{0,-14}\\\", row.RowState);  \\n      }  \\n   }  \\n}  \\n```\"\n  syntax:\n    content: public virtual System.Data.DataTable Clone ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: A new <xref href=\"System.Data.DataTable\"></xref> with the same schema as the current <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ColumnChanged\n  id: ColumnChanged\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ColumnChanged\n  nameWithType: DataTable.ColumnChanged\n  fullName: System.Data.DataTable.ColumnChanged\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs after a value has been changed for the specified <xref href=\"System.Data.DataColumn\"></xref> in a <xref href=\"System.Data.DataRow\"></xref>.\n  remarks: For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - >-\n    [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._4_1.vb)]\n     [!code-cs[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._4_1.cs)]\n  syntax:\n    content: public event System.Data.DataColumnChangeEventHandler ColumnChanged;\n    return:\n      type: System.Data.DataColumnChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ColumnChanging\n  id: ColumnChanging\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ColumnChanging\n  nameWithType: DataTable.ColumnChanging\n  fullName: System.Data.DataTable.ColumnChanging\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a value is being changed for the specified <xref href=\"System.Data.DataColumn\"></xref> in a <xref href=\"System.Data.DataRow\"></xref>.\n  remarks: For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - >-\n    [!code-cs[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._5_1.cs)]\n     [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._5_1.vb)]\n  syntax:\n    content: public event System.Data.DataColumnChangeEventHandler ColumnChanging;\n    return:\n      type: System.Data.DataColumnChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Columns\n  id: Columns\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Columns\n  nameWithType: DataTable.Columns\n  fullName: System.Data.DataTable.Columns\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of columns that belong to this table.\n  remarks: The <xref:System.Data.DataColumnCollection> determines the schema of a table by defining the data type of each column.\n  example:\n  - \"The following example prints each value of each row in a table using the Columns property.  \\n  \\n [!code-vb[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._12_1.vb)]\\n [!code-cs[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/csharp/p-system.data.datatable._12_1.cs)]\"\n  syntax:\n    content: public System.Data.DataColumnCollection Columns { get; }\n    return:\n      type: System.Data.DataColumnCollection\n      description: A <xref href=\"System.Data.DataColumnCollection\"></xref> that contains the collection of <xref href=\"System.Data.DataColumn\"></xref> objects for the table. An empty collection is returned if no <xref href=\"System.Data.DataColumn\"></xref> objects exist.\n  overload: System.Data.DataTable.Columns*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Compute(System.String,System.String)\n  id: Compute(System.String,System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Compute(String,String)\n  nameWithType: DataTable.Compute(String,String)\n  fullName: System.Data.DataTable.Compute(String,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Computes the given expression on the current rows that pass the filter criteria.\n  remarks: \"The `expression` parameter requires an aggregate function. For example, the following is a legal expression:  \\n  \\n `Count(Quantity)`  \\n  \\n But this expression is not:  \\n  \\n `Sum (Quantity * UnitPrice)`  \\n  \\n If you must perform an operation on two or more columns, you should create a <xref:System.Data.DataColumn>, set its <xref:System.Data.DataColumn.Expression%2A> property to an appropriate expression, and use an aggregate expression on the resulting column. In that case, given a <xref:System.Data.DataColumn> with the name \\\"total\\\", and the <xref:System.Data.DataColumn.Expression%2A> property set to this:  \\n  \\n `\\\"Quantity * UnitPrice\\\"`  \\n  \\n The expression argument for the Compute method would then be this:  \\n  \\n `Sum(total)`  \\n  \\n The second parameter, `filter`, determines which rows are used in the expression. For example, if the table contains a date column named \\\"colDate\\\", you could limit the rows with the following expression:  \\n  \\n `colDate > 1/1/99 AND colDate < 17/1/99`  \\n  \\n For rules on creating expressions for both parameters, see the <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following example sums the values of a column named \\\"Total\\\", for the salesperson whose identification number is five.  \\n  \\n [!code-cs[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/csharp/m-system.data.datatable._24_1.cs)]\\n [!code-vb[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._24_1.vb)]\"\n  syntax:\n    content: public object Compute (string expression, string filter);\n    parameters:\n    - id: expression\n      type: System.String\n      description: The expression to compute.\n    - id: filter\n      type: System.String\n      description: The filter to limit the rows that evaluate in the expression.\n    return:\n      type: System.Object\n      description: An <xref:System.Object>, set to the result of the computation. If the expression evaluates to null, the return value will be <xref href=\"System.DBNull.Value\"></xref>.\n  overload: System.Data.DataTable.Compute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Constraints\n  id: Constraints\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Constraints\n  nameWithType: DataTable.Constraints\n  fullName: System.Data.DataTable.Constraints\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of constraints maintained by this table.\n  remarks: \"A <xref:System.Data.ForeignKeyConstraint> restricts the action performed when a value in a column (or columns) is either deleted or updated. Such a constraint is intended to be used with primary key columns. In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.  \\n  \\n-   The child rows can also be deleted (a cascading action).  \\n  \\n-   The values in the child column (or columns) can be set to null values.  \\n  \\n-   The values in the child column (or columns) can be set to default values.  \\n  \\n-   An exception can be generated.  \\n  \\n A <xref:System.Data.UniqueConstraint> becomes active when attempting to set a value in a primary key to a non-unique value.\"\n  example:\n  - \"The following example adds a <xref:System.Data.ForeignKeyConstraint> to the collection of constraints.  \\n  \\n [!code-vb[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._3_1.vb)]\\n [!code-cs[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/csharp/p-system.data.datatable._3_1.cs)]\"\n  syntax:\n    content: public System.Data.ConstraintCollection Constraints { get; }\n    return:\n      type: System.Data.ConstraintCollection\n      description: A <xref href=\"System.Data.ConstraintCollection\"></xref> that contains the collection of <xref href=\"System.Data.Constraint\"></xref> objects for the table. An empty collection is returned if no <xref href=\"System.Data.Constraint\"></xref> objects exist.\n  overload: System.Data.DataTable.Constraints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Copy\n  id: Copy\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: DataTable.Copy()\n  fullName: System.Data.DataTable.Copy()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Copies both the structure and data for this <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example uses the Copy method to create a copy of the original <xref:System.Data.DataTable>. The namespace name is not retained if it is inherited from a parent <xref:System.Data.DataTable> or <xref:System.Data.DataSet>.  \\n  \\n [!code-cs[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/csharp/m-system.data.datatable._5_1.cs)]\\n [!code-vb[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._5_1.vb)]\"\n  syntax:\n    content: public System.Data.DataTable Copy ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: \"A new <xref href=\\\"System.Data.DataTable\\\"></xref> with the same structure (table schemas and constraints) and data as this <xref href=\\\"System.Data.DataTable\\\"></xref>.  \\n  \\n If these classes have been derived, the copy will also be of the same derived classes.  \\n  \\n Copy creates a new <xref href=\\\"System.Data.DataTable\\\"></xref> with the same structure and data as the original <xref href=\\\"System.Data.DataTable\\\"></xref>. To copy the structure to a new <xref href=\\\"System.Data.DataTable\\\"></xref>, but not the data, use <xref:System.Data.DataTable.Clone*>.\"\n  overload: System.Data.DataTable.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.CreateDataReader\n  id: CreateDataReader\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: CreateDataReader()\n  nameWithType: DataTable.CreateDataReader()\n  fullName: System.Data.DataTable.CreateDataReader()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns a <xref href=\"System.Data.DataTableReader\"></xref> corresponding to the data within this <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: ''\n  example:\n  - \"The following console application creates a <xref:System.Data.DataTable> instance. The example then passes the filled <xref:System.Data.DataTable>to a procedure that calls the CreateDataReader method, which iterates through the results contained within the <xref:System.Data.DataTableReader>.  \\n  \\n [!code-vb[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._9_1.vb)]\\n [!code-cs[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._9_1.cs)]  \\n  \\n The example displays the following output in the console window:  \\n  \\n `1 Mary`  \\n  \\n `2 Andy`  \\n  \\n `3 Peter`  \\n  \\n `4 Russ`\"\n  syntax:\n    content: public System.Data.DataTableReader CreateDataReader ();\n    parameters: []\n    return:\n      type: System.Data.DataTableReader\n      description: A <xref href=\"System.Data.DataTableReader\"></xref> containing one result set, corresponding to the source <xref href=\"System.Data.DataTable\"></xref> instance.\n  overload: System.Data.DataTable.CreateDataReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.CreateInstance\n  id: CreateInstance\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: CreateInstance()\n  nameWithType: DataTable.CreateInstance()\n  fullName: System.Data.DataTable.CreateInstance()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Creates a new instance of <xref href=\"System.Data.DataTable\"></xref>.\n  syntax:\n    content: protected virtual System.Data.DataTable CreateInstance ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: The new expression.\n  overload: System.Data.DataTable.CreateInstance*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.DataSet\n  id: DataSet\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DataSet\n  nameWithType: DataTable.DataSet\n  fullName: System.Data.DataTable.DataSet\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the <xref href=\"System.Data.DataSet\"></xref> to which this table belongs.\n  remarks: If a control is data bound to a <xref:System.Data.DataTable>, and the table belongs to a <xref:System.Data.DataSet>, you can get to the <xref:System.Data.DataSet> through this property.\n  example:\n  - \"The following example returns the parent <xref:System.Data.DataSet> of a given table through the DataSet property.  \\n  \\n [!code-vb[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._10_1.vb)]\\n [!code-cs[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/csharp/p-system.data.datatable._10_1.cs)]\"\n  syntax:\n    content: public System.Data.DataSet DataSet { get; }\n    return:\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataSet\"></xref> to which this table belongs.\n  overload: System.Data.DataTable.DataSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.DefaultView\n  id: DefaultView\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DefaultView\n  nameWithType: DataTable.DefaultView\n  fullName: System.Data.DataTable.DefaultView\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a customized view of the table that may include a filtered view, or a cursor position.\n  remarks: The DefaultView property returns a <xref:System.Data.DataView> you can use to sort, filter, and search a <xref:System.Data.DataTable>.\n  example:\n  - \"The following example sets a property of the <xref:System.Data.DataTable> object's <xref:System.Data.DataView> through the DefaultView property. The example also shows the binding of a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataTable> named \\\"Suppliers\\\" that includes a column named \\\"CompanyName.\\\"  \\n  \\n [!code-cs[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/csharp/p-system.data.datatable._11_1.cs)]\\n [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._11_1.vb)]\"\n  syntax:\n    content: public System.Data.DataView DefaultView { get; }\n    return:\n      type: System.Data.DataView\n      description: The <xref href=\"System.Data.DataView\"></xref> associated with the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.DefaultView*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.DisplayExpression\n  id: DisplayExpression\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: DisplayExpression\n  nameWithType: DataTable.DisplayExpression\n  fullName: System.Data.DataTable.DisplayExpression\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the expression that returns a value used to represent this table in the user interface. The <xref uid=\"langword_csharp_DisplayExpression\" name=\"DisplayExpression\" href=\"\"></xref> property lets you display the name of this table in a user interface.\n  syntax:\n    content: public string DisplayExpression { get; set; }\n    return:\n      type: System.String\n      description: A display string.\n  overload: System.Data.DataTable.DisplayExpression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.EndInit\n  id: EndInit\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: EndInit()\n  nameWithType: DataTable.EndInit()\n  fullName: System.Data.DataTable.EndInit()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Ends the initialization of a <xref href=\"System.Data.DataTable\"></xref> that is used on a form or used by another component. The initialization occurs at run time.\n  remarks: The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataTable.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public virtual void EndInit ();\n    parameters: []\n  overload: System.Data.DataTable.EndInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.EndLoadData\n  id: EndLoadData\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: EndLoadData()\n  nameWithType: DataTable.EndLoadData()\n  fullName: System.Data.DataTable.EndLoadData()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Turns on notifications, index maintenance, and constraints after loading data.\n  remarks: Use EndLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.BeginLoadData%2A>.\n  syntax:\n    content: public void EndLoadData ();\n    parameters: []\n  overload: System.Data.DataTable.EndLoadData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ExtendedProperties\n  id: ExtendedProperties\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ExtendedProperties\n  nameWithType: DataTable.ExtendedProperties\n  fullName: System.Data.DataTable.ExtendedProperties\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of customized user information.\n  remarks: \"Use the ExtendedProperties to add custom information to a <xref:System.Data.DataTable>. Add information with the `Add` method. Retrieve information with the `Item` method.  \\n  \\n Extended properties must be of type <xref:System.String>. Properties that are not of type String are not persisted when the <xref:System.Data.DataTable> is written as XML.\"\n  example:\n  - \"The following example adds a timestamp value to the <xref:System.Data.DataTable> through the ExtendedProperties property.  \\n  \\n [!code-cs[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datatable._7_1.cs)]\\n [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._7_1.vb)]\"\n  syntax:\n    content: public System.Data.PropertyCollection ExtendedProperties { get; }\n    return:\n      type: System.Data.PropertyCollection\n      description: A <xref href=\"System.Data.PropertyCollection\"></xref> that contains custom user information.\n  overload: System.Data.DataTable.ExtendedProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.fInitInProgress\n  id: fInitInProgress\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: fInitInProgress\n  nameWithType: DataTable.fInitInProgress\n  fullName: System.Data.DataTable.fInitInProgress\n  type: Field\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Checks whether initialization is in progress. The initialization occurs at run time.\n  syntax:\n    content: protected bool fInitInProgress;\n    return:\n      type: System.Boolean\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetChanges\n  id: GetChanges\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetChanges()\n  nameWithType: DataTable.GetChanges()\n  fullName: System.Data.DataTable.GetChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a copy of the <xref href=\"System.Data.DataTable\"></xref> that contains all changes made to it since it was loaded or <xref:System.Data.DataTable.AcceptChanges*> was last called.\n  remarks: Creates a new <xref:System.Data.DataSet> containing a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` (`Nothing` in Visual Basic) if there are no rows in the original <xref:System.Data.DataSet> with pending changes.\n  example:\n  - >-\n    [!code-cs[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._25_1.cs)]\n     [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._25_1.vb)]\n  syntax:\n    content: public System.Data.DataTable GetChanges ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: A copy of the changes from this <xref href=\"System.Data.DataTable\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no changes are found.\n  overload: System.Data.DataTable.GetChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)\n  id: GetChanges(System.Data.DataRowState)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetChanges(DataRowState)\n  nameWithType: DataTable.GetChanges(DataRowState)\n  fullName: System.Data.DataTable.GetChanges(DataRowState)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a copy of the <xref href=\"System.Data.DataTable\"></xref> containing all changes made to it since it was last loaded, or since <xref:System.Data.DataTable.AcceptChanges*> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.GetChanges%2A> method is used to produce a second <xref:System.Data.DataTable> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.  \\n  \\n Relationship constraints may cause unchanged parent rows to be included.\"\n  example:\n  - >-\n    [!code-cs[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._15_1.cs)]\n     [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._15_1.vb)]\n  syntax:\n    content: public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);\n    parameters:\n    - id: rowStates\n      type: System.Data.DataRowState\n      description: One of the <xref href=\"System.Data.DataRowState\"></xref> values.\n    return:\n      type: System.Data.DataTable\n      description: A filtered copy of the <xref href=\"System.Data.DataTable\"></xref> that can have actions performed on it, and later be merged back in the <xref href=\"System.Data.DataTable\"></xref> using <xref:System.Data.DataSet.Merge*>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Data.DataTable.GetChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)\n  id: GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetDataTableSchema(XmlSchemaSet)\n  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)\n  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: This method returns an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> instance containing the Web Services Description Language (WSDL) that describes the <xref href=\"System.Data.DataTable\"></xref> for Web Services.\n  syntax:\n    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);\n    parameters:\n    - id: schemaSet\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> instance.\n    return:\n      type: System.Xml.Schema.XmlSchemaComplexType\n      description: The <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> instance.\n  overload: System.Data.DataTable.GetDataTableSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetErrors\n  id: GetErrors\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetErrors()\n  nameWithType: DataTable.GetErrors()\n  fullName: System.Data.DataTable.GetErrors()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets an array of <xref href=\"System.Data.DataRow\"></xref> objects that contain errors.\n  remarks: Returns the list of <xref:System.Data.DataRow> objects that have <xref:System.Data.DataRow.RowError%2A> set. For example, errors can occur when calling <xref:System.Data.Common.DataAdapter.Update%2A> with <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> set to **true**. Do not invoke <xref:System.Data.DataTable.AcceptChanges%2A> on the <xref:System.Data.DataTable> until you resolve all errors and resubmit the <xref:System.Data.DataSet> for updating.\n  example:\n  - \"The following example uses the GetErrors method to return an array of <xref:System.Data.DataRow> objects that have errors.  \\n  \\n [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._18_1.vb)]\\n [!code-cs[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/csharp/m-system.data.datatable._18_1.cs)]\"\n  syntax:\n    content: public System.Data.DataRow[] GetErrors ();\n    parameters: []\n    return:\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects that have errors.\n  overload: System.Data.DataTable.GetErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataTable\"></xref>.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized data associated with the <xref href=\"System.Data.DataTable\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: A <xref:System.Runtime.Serialization.StreamingContext> object that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetRowType\n  id: GetRowType\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetRowType()\n  nameWithType: DataTable.GetRowType()\n  fullName: System.Data.DataTable.GetRowType()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the row type.\n  syntax:\n    content: protected virtual Type GetRowType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: Returns the type of the <xref href=\"System.Data.DataRow\"></xref>.\n  overload: System.Data.DataTable.GetRowType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.GetSchema\n  id: GetSchema\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: GetSchema()\n  nameWithType: DataTable.GetSchema()\n  fullName: System.Data.DataTable.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.\n  syntax:\n    content: protected virtual System.Xml.Schema.XmlSchema GetSchema ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: An <xref:System.Xml.Schema.XmlSchema> that describes the XML representation of the object that is produced by the <xref:System.Xml.Serialization.IXmlSerializable.WriteXml*> method and consumed by the <xref:System.Xml.Serialization.IXmlSerializable.ReadXml*> method.\n  overload: System.Data.DataTable.GetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.HasErrors\n  id: HasErrors\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: HasErrors\n  nameWithType: DataTable.HasErrors\n  fullName: System.Data.DataTable.HasErrors\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value indicating whether there are errors in any of the rows in any of the tables of the <xref href=\"System.Data.DataSet\"></xref> to which the table belongs.\n  remarks: \"As users work on a set of data contained in a <xref:System.Data.DataTable>, you can mark each change with an error if the change causes some validation failure. You can mark an entire <xref:System.Data.DataRow> with an error message using the <xref:System.Data.DataRow.RowError%2A> property. You can also set errors on each column of the row with the <xref:System.Data.DataRow.SetColumnError%2A> method.  \\n  \\n Before updating a data source with a <xref:System.Data.DataSet>, it's recommended that you first invoke the <xref:System.Data.DataSet.GetChanges%2A> method on the target <xref:System.Data.DataSet>. The method results in a <xref:System.Data.DataSet> that contains only the changes made to the original. Before sending the <xref:System.Data.DataSet> to the data source for updating, check the HasErrors property of each table to see if any errors have been attached to the rows or columns in the rows.  \\n  \\n After reconciling each error, clear the errors with the <xref:System.Data.DataRow.ClearErrors%2A> method of the `DataRow`.\"\n  example:\n  - \"The following example uses the HasErrors property to check if a table contains errors.  \\n  \\n [!code-cs[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datatable._8_1.cs)]\\n [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._8_1.vb)]\"\n  syntax:\n    content: public bool HasErrors { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if errors exist; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataTable.HasErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)\n  id: ImportRow(System.Data.DataRow)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ImportRow(DataRow)\n  nameWithType: DataTable.ImportRow(DataRow)\n  fullName: System.Data.DataTable.ImportRow(DataRow)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Copies a <xref href=\"System.Data.DataRow\"></xref> into a <xref href=\"System.Data.DataTable\"></xref>, preserving any property settings, as well as original and current values.\n  remarks: \"Calling <xref:System.Data.DataTable.NewRow%2A> adds a row to the table using the existing table schema, but with default values for the row, and sets the <xref:System.Data.DataRowState> to `Detached`. Calling ImportRow preserves the existing <xref:System.Data.DataRowState> along with other values in the row. If the `DataRow` that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.  \\n  \\n The new row will be added to the end of the data table.  \\n  \\n If the new row violates a Constraint it won’t be added to the data table.  \\n  \\n You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf. See <xref:System.Data.DataRowCollection> and <xref:System.Data.DataTable.Rows%2A> for more information.\"\n  syntax:\n    content: public void ImportRow (System.Data.DataRow row);\n    parameters:\n    - id: row\n      type: System.Data.DataRow\n      description: The <xref href=\"System.Data.DataRow\"></xref> to be imported.\n  overload: System.Data.DataTable.ImportRow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Initialized\n  id: Initialized\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Initialized\n  nameWithType: DataTable.Initialized\n  fullName: System.Data.DataTable.Initialized\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs after the <xref href=\"System.Data.DataTable\"></xref> is initialized.\n  remarks: For more information, see <xref:System.Data.DataTable.IsInitialized%2A>.\n  syntax:\n    content: public event EventHandler Initialized;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.IsInitialized\n  id: IsInitialized\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: IsInitialized\n  nameWithType: DataTable.IsInitialized\n  fullName: System.Data.DataTable.IsInitialized\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value that indicates whether the <xref href=\"System.Data.DataTable\"></xref> is initialized.\n  remarks: Returns the status of the <xref:System.Data.DataTable> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataTable.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataTable.EndInit%2A> method sets it to `true`.\n  syntax:\n    content: public bool IsInitialized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the component has completed initialization; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataTable.IsInitialized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Load(System.Data.IDataReader)\n  id: Load(System.Data.IDataReader)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Load(IDataReader)\n  nameWithType: DataTable.Load(IDataReader)\n  fullName: System.Data.DataTable.Load(IDataReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>. If the <xref href=\"System.Data.DataTable\"></xref> already contains rows, the incoming data from the data source is merged with the existing rows.\n  remarks: \"The Loadmethod consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \\n  \\n The Load method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the Load method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \\n  \\n|Condition|Behavior|  \\n|---------------|--------------|  \\n|The <xref:System.Data.DataTable> has no schema.|The Load method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \\n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The Load method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \\n|The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <xref:System.Data.DataTable>.|The Load method adds the extra columns to `DataTable`'s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \\n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the Load method allows the rows to be added, substituting the default or `null` value for the missing column. If no default value or `null` can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the `null` value as the implied default value.|  \\n  \\n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.  For more information, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \\n  \\n This version of the `Load` method attempts to preserve the current values in each row, leaving the original value intact. (If you want finer control over the behavior of incoming data, see <xref:System.Data.DataTable.Load%2A?displayProperty=fullName>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \\n  \\n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value depends on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \\n  \\n The following table displays behavior for the `Load` method. The final row (labeled \\\"(Not present)\\\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed. In this case, the method doesn't allow you to indicate the load option, and uses the default, `PreserveChanges`.  \\n  \\n|Existing DataRowState|Values after `Load` method, and event action|  \\n|---------------------------|--------------------------------------------------|  \\n|Added|Current = \\\\<Existing><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Modified><br /><br /> RowAction = ChangeOriginal|  \\n|Modified|Current = \\\\<Existing><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Modified><br /><br /> RowAction = ChangeOriginal|  \\n|Deleted|Current = \\\\<Not available><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Deleted><br /><br /> RowAction = ChangeOriginal|  \\n|Unchanged|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \\n|(Not present)|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \\n  \\n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \\n  \\n To determine which version of the primary key field to use for comparing the current row with an incoming row, the `Load` method uses the original version of the primary key value within a row, if it exists. Otherwise, the `Load` method uses the current version of the primary key field.\"\n  example:\n  - \"The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then calls the `Load` method, displaying the data both before and after the load operation.  \\n  \\n [!code-cs[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._13_1.cs)]\\n [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._13_1.vb)]\"\n  syntax:\n    content: public void Load (System.Data.IDataReader reader);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides a result set.\n  overload: System.Data.DataTable.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)\n  id: Load(System.Data.IDataReader,System.Data.LoadOption)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Load(IDataReader,LoadOption)\n  nameWithType: DataTable.Load(IDataReader,LoadOption)\n  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>. If the <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <code>loadOption</code> parameter.\n  remarks: \"The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method.  \\n  \\n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \\n  \\n|Condition|Behavior|  \\n|---------------|--------------|  \\n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \\n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \\n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra columns to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \\n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \\n  \\n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \\n  \\n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \\n  \\n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \\n  \\n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \\n  \\n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \\\"(Not present)\\\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \\n  \\n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \\n|---------------------------|------------|----------------------|------------------------------------------|  \\n|Added|Current = \\\\<Incoming><br /><br /> Original = -\\\\<Not available><br /><br /> State = \\\\<Added><br /><br /> RowAction = Change|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Existing><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Modified><br /><br /> RowAction = ChangeOriginal|  \\n|Modified|Current = \\\\<Incoming><br /><br /> Original = \\\\<Existing><br /><br /> State = \\\\<Modified><br /><br /> RowAction = Change|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Existing><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Modified><br /><br /> RowAction =ChangeOriginal|  \\neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\\\<Existing><br /><br /> State = \\\\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\\\<Incoming><br /><br /> Original = \\\\<Not available><br /><br /> State = \\\\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Not available><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Deleted><br /><br /> RowAction = ChangeOriginal|  \\n|Unchanged|Current = \\\\<Incoming><br /><br /> Original = \\\\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\\\<Modified><br /><br /> RowAction = Change|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \\nNot present)|Current = \\\\<Incoming><br /><br /> Original = \\\\<Not available><br /><br /> State = \\\\<Added><br /><br /> RowAction = Add|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \\n  \\n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \\n  \\n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \\n  \\n|Load option|DataRow version used for primary key comparison|  \\n|-----------------|-----------------------------------------------------|  \\n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \\n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \\n|`Upsert`|Current version, if it exists, otherwise Original version|\"\n  example:\n  - \"The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then focuses on data issues, including handling the various loading options.  \\n  \\n [!code-cs[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/csharp/m-system.data.datatable._29_1.cs)]\\n [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/visualbasic/m-system.data.datatable._29_1.vb)]\"\n  syntax:\n    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> are combined with incoming rows that share the same primary key.\n  overload: System.Data.DataTable.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Load(IDataReader,LoadOption,FillErrorEventHandler)\n  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)\n  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataTable\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref> using an error-handling delegate.\n  remarks: \"The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \\n  \\n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \\n  \\n|Condition|Behavior|  \\n|---------------|--------------|  \\n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \\n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \\n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra column(s) to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \\n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \\n  \\n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \\n  \\n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \\n  \\n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \\n  \\n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \\n  \\n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \\\"(Not present)\\\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \\n  \\n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \\n|---------------------------|------------|----------------------|------------------------------------------|  \\n|Added|Current = \\\\<Incoming><br /><br /> Original = -\\\\<Not available><br /><br /> State = \\\\<Added><br /><br /> RowAction = Change|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Existing><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Modified><br /><br /> RowAction = ChangeOriginal|  \\n|Modified|Current = \\\\<Incoming><br /><br /> Original = \\\\<Existing><br /><br /> State = \\\\<Modified><br /><br /> RowAction = Change|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Existing><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Modified><br /><br /> RowAction =ChangeOriginal|  \\neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\\\<Existing><br /><br /> State = \\\\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\\\<Incoming><br /><br /> Original = \\\\<Not available><br /><br /> State = \\\\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Not available><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Deleted><br /><br /> RowAction = ChangeOriginal|  \\n|Unchanged|Current = \\\\<Incoming><br /><br /> Original = \\\\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\\\<Modified><br /><br /> RowAction = Change|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \\nNot present)|Current = \\\\<Incoming><br /><br /> Original = \\\\<Not available><br /><br /> State = \\\\<Added><br /><br /> RowAction = Add|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\\\<Incoming><br /><br /> Original = \\\\<Incoming><br /><br /> State = \\\\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \\n  \\n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \\n  \\n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \\n  \\n|Load option|DataRow version used for primary key comparison|  \\n|-----------------|-----------------------------------------------------|  \\n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \\n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \\n|`Upsert`|Current version, if it exists, otherwise Original version|  \\n  \\n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing. Set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.\"\n  example:\n  - >-\n    [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/visualbasic/e9f1029e-2520-490c-8397-_1.vb)]\n     [!code-cs[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/csharp/e9f1029e-2520-490c-8397-_1.cs)]\n  syntax:\n    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: A <xref href=\"System.Data.IDataReader\"></xref> that provides a result set.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> are combined with incoming rows that share the same primary key.\n    - id: errorHandler\n      type: System.Data.FillErrorEventHandler\n      description: A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data.\n  overload: System.Data.DataTable.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)\n  id: LoadDataRow(System.Object[],System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: LoadDataRow(Object[],Boolean)\n  nameWithType: DataTable.LoadDataRow(Object[],Boolean)\n  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Finds and updates a specific row. If no matching row is found, a new row is created using the given values.\n  remarks: \"The LoadDataRow method takes an array of values and finds the matching value(s) in the primary key column(s).  \\n  \\n If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.  \\n  \\n If the `fAcceptChanges` parameter is `true` or not specified, the new data is added and then <xref:System.Data.DataTable.AcceptChanges%2A> is called to accept all changes in the <xref:System.Data.DataTable>; if the argument is `false`, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.  \\n  \\n Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table.  \\n  \\n Use LoadDataRow in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.\"\n  example:\n  - \"The following example uses the LoadDataRow method to attempt to find a row. If no such row is found, the values are used to create a new row.  \\n  \\n [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._23_1.vb)]\\n [!code-cs[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._23_1.cs)]\"\n  syntax:\n    content: public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: An array of values used to create the new row.\n    - id: fAcceptChanges\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to accept changes; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Data.DataRow\n      description: The new <xref href=\"System.Data.DataRow\"></xref>.\n  overload: System.Data.DataTable.LoadDataRow*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The array is larger than the number of columns in the table.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: A value doesn't match its respective column type.\n  - type: System.Data.ConstraintException\n    commentId: T:System.Data.ConstraintException\n    description: Adding the row invalidates a constraint.\n  - type: System.Data.NoNullAllowedException\n    commentId: T:System.Data.NoNullAllowedException\n    description: Attempting to put a null in a column where <xref:System.Data.DataColumn.AllowDBNull*> is false.\n  platform:\n  - net462\n- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)\n  id: LoadDataRow(System.Object[],System.Data.LoadOption)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: LoadDataRow(Object[],LoadOption)\n  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)\n  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Finds and updates a specific row. If no matching row is found, a new row is created using the given values.\n  remarks: \"The <xref:System.Data.DataTable.LoadDataRow%2A> method takes an array of values and finds the matching value(s) in the primary key column(s).  \\n  \\n If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.  \\n  \\n The value of the `loadOption` parameter is used to determine how the values in the array are applied to an existing row. For example, if `loadOption` is set to `OverwriteChanges`, the `Original` and `Current` values of each column are replaced with the values in the incoming row and the `RowState` property is set to `Unchanged`.  \\n  \\n Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table.  \\n  \\n Use <xref:System.Data.DataTable.LoadDataRow%2A> in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>.\"\n  syntax:\n    content: public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: An array of values used to create the new row.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: Used to determine how the array values are applied to the corresponding values in an existing row.\n    return:\n      type: System.Data.DataRow\n      description: The new <xref href=\"System.Data.DataRow\"></xref>.\n  overload: System.Data.DataTable.LoadDataRow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Locale\n  id: Locale\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Locale\n  nameWithType: DataTable.Locale\n  fullName: System.Data.DataTable.Locale\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the locale information used to compare strings within the table.\n  remarks: \"A <xref:System.Globalization.CultureInfo> represents the software preferences of a particular culture or community.  \\n  \\n When used for string comparisons, the <xref:System.Globalization.CultureInfo> affects sorting, comparisons, and filtering.  \\n  \\n> [!NOTE]\\n>  In columns that contain expressions, the <xref:System.StringComparison> is used. The <xref:System.StringComparison> is ignored.\"\n  example:\n  - \"The following example sets the <xref:System.Globalization.CultureInfo> through the Locale and prints the ISO language name.  \\n  \\n [!code-cs[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/csharp/p-system.data.datatable._5_1.cs)]\\n [!code-vb[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._5_1.vb)]\"\n  syntax:\n    content: public System.Globalization.CultureInfo Locale { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: A <xref:System.Globalization.CultureInfo> that contains data about the user's machine locale. The default is the <xref href=\"System.Data.DataSet\"></xref> object's <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale*> property) to which the <xref href=\"System.Data.DataTable\"></xref> belongs; if the table doesn't belong to a <xref href=\"System.Data.DataSet\"></xref>, the default is the current system <xref:System.Globalization.CultureInfo>.\n  overload: System.Data.DataTable.Locale*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Merge(System.Data.DataTable)\n  id: Merge(System.Data.DataTable)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Merge(DataTable)\n  nameWithType: DataTable.Merge(DataTable)\n  fullName: System.Data.DataTable.Merge(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merge the specified <xref href=\"System.Data.DataTable\"></xref> with the current <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: \"The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.  \\n  \\n The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.  \\n  \\n The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.  \\n  \\n When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation. Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the `preserveChanges` parameter.  \\n  \\n In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller and thus more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the Merge method.  \\n  \\n When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted`, is matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.\"\n  example:\n  - \"The following console application creates a simple <xref:System.Data.DataTable> and adds data to the table. The example then creates a copy of the table, adding rows to the copy. Finally, the example calls the Merge method to merge the data in the second table with the data in the first table.  \\n  \\n [!code-vb[DataWorks DataTable.Merge#1](~/add/codesnippet/visualbasic/m-system.data.datatable._4_1.vb)]\\n [!code-cs[DataWorks DataTable.Merge#1](~/add/codesnippet/csharp/m-system.data.datatable._4_1.cs)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> to be merged with the current <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)\n  id: Merge(System.Data.DataTable,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Merge(DataTable,Boolean)\n  nameWithType: DataTable.Merge(DataTable,Boolean)\n  fullName: System.Data.DataTable.Merge(DataTable,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merge the specified <xref href=\"System.Data.DataTable\"></xref> with the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>, indicating whether to preserve changes in the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>.\n  remarks: \"The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.  \\n  \\n The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.  \\n  \\n The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.  \\n  \\n When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter. If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row. If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \\n  \\n In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.  \\n  \\n When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.\"\n  example:\n  - \"The following console application creates a <xref:System.Data.DataTable> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <xref:System.Data.DataTable>. The example demonstrates the different behaviors for the `preserveChanges` parameter.  \\n  \\n [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/visualbasic/m-system.data.datatable._2_1.vb)]\\n [!code-cs[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/csharp/m-system.data.datatable._2_1.cs)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table, bool preserveChanges);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> to be merged with the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>.\n    - id: preserveChanges\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, to preserve changes in the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.<xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>\n  overload: System.Data.DataTable.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Merge(DataTable,Boolean,MissingSchemaAction)\n  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)\n  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merge the specified <xref href=\"System.Data.DataTable\"></xref> with the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>, indicating whether to preserve changes and how to handle missing schema in the current <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref>.\n  remarks: \"The `Merge` method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.  \\n  \\n The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.  \\n  \\n The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.  \\n  \\n When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter. If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row. If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \\n  \\n In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application's original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataTable.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataTable> objects are compared, because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataTable> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataTable> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.\"\n  example:\n  - \"The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the Merge method. This example creates two versions of the same table, modifying the schema for the second version. The code then attempts to merge the second table into the first.  \\n  \\n [!code-cs[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/csharp/0a34dc2a-14c3-4d65-b78d-_1.cs)]\\n [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/visualbasic/0a34dc2a-14c3-4d65-b78d-_1.vb)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> to be merged with the current <xref href=\"System.Data.DataTable\"></xref>.\n    - id: preserveChanges\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, to preserve changes in the current <xref href=\"System.Data.DataTable\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n  overload: System.Data.DataTable.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.MinimumCapacity\n  id: MinimumCapacity\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: MinimumCapacity\n  nameWithType: DataTable.MinimumCapacity\n  fullName: System.Data.DataTable.MinimumCapacity\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the initial starting size for this table.\n  remarks: The MinimumCapacity allows the system to create an appropriate set of resources before fetching data. In a situation when performance is critical, setting this property can optimize performance.\n  example:\n  - \"The following example sets the MinimumCapacity of a <xref:System.Data.DataTable>.  \\n  \\n [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._6_1.vb)]\\n [!code-cs[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/csharp/p-system.data.datatable._6_1.cs)]\"\n  syntax:\n    content: public int MinimumCapacity { get; set; }\n    return:\n      type: System.Int32\n      description: The initial starting size in rows of this table. The default is 50.\n  overload: System.Data.DataTable.MinimumCapacity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Namespace\n  id: Namespace\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: DataTable.Namespace\n  fullName: System.Data.DataTable.Namespace\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the namespace for the XML representation of the data stored in the <xref href=\"System.Data.DataTable\"></xref>.\n  syntax:\n    content: public string Namespace { get; set; }\n    return:\n      type: System.String\n      description: The namespace of the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.Namespace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.NewRow\n  id: NewRow\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: NewRow()\n  nameWithType: DataTable.NewRow()\n  fullName: System.Data.DataTable.NewRow()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Creates a new <xref href=\"System.Data.DataRow\"></xref> with the same schema as the table.\n  remarks: You must use the NewRow method to create new <xref:System.Data.DataRow> objects with the same schema as the <xref:System.Data.DataTable>. After creating a <xref:System.Data.DataRow>, you can add it to the <xref:System.Data.DataRowCollection>, through the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.Rows%2A> property. When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call <xref:System.Data.DataTable.Clear%2A>.\n  example:\n  - \"The following example creates a <xref:System.Data.DataTable>, adds two <xref:System.Data.DataColumn> objects that determine the table's schema, and creates several new <xref:System.Data.DataRow> objects using the NewRow method. Those <xref:System.Data.DataRow> objects are then added to the <xref:System.Data.DataRowCollection> using the <xref:System.Data.DataRowCollection.Add%2A> method.  \\n  \\n [!code-vb[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._27_1.vb)]\\n [!code-cs[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._27_1.cs)]\"\n  syntax:\n    content: public System.Data.DataRow NewRow ();\n    parameters: []\n    return:\n      type: System.Data.DataRow\n      description: A <xref href=\"System.Data.DataRow\"></xref> with the same schema as the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.NewRow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.NewRowArray(System.Int32)\n  id: NewRowArray(System.Int32)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: NewRowArray(Int32)\n  nameWithType: DataTable.NewRowArray(Int32)\n  fullName: System.Data.DataTable.NewRowArray(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns an array of <xref href=\"System.Data.DataRow\"></xref>.\n  syntax:\n    content: protected System.Data.DataRow[] NewRowArray (int size);\n    parameters:\n    - id: size\n      type: System.Int32\n      description: A <xref:System.Int32> value that describes the size of the array.\n    return:\n      type: System.Data.DataRow[]\n      description: The new array.\n  overload: System.Data.DataTable.NewRowArray*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)\n  id: NewRowFromBuilder(System.Data.DataRowBuilder)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: NewRowFromBuilder(DataRowBuilder)\n  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)\n  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Creates a new row from an existing row.\n  syntax:\n    content: protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);\n    parameters:\n    - id: builder\n      type: System.Data.DataRowBuilder\n      description: A <xref href=\"System.Data.DataRowBuilder\"></xref> object.\n    return:\n      type: System.Data.DataRow\n      description: A <xref href=\"System.Data.DataRow\"></xref> derived class.\n  overload: System.Data.DataTable.NewRowFromBuilder*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)\n  id: OnColumnChanged(System.Data.DataColumnChangeEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnColumnChanged(DataColumnChangeEventArgs)\n  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)\n  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.ColumnChanged\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataColumnChangeEventArgs\n      description: A <xref href=\"System.Data.DataColumnChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnColumnChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)\n  id: OnColumnChanging(System.Data.DataColumnChangeEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnColumnChanging(DataColumnChangeEventArgs)\n  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)\n  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.ColumnChanging\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataColumnChangeEventArgs\n      description: A <xref href=\"System.Data.DataColumnChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnColumnChanging*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnPropertyChanging(PropertyChangedEventArgs)\n  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)\n  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);\n    parameters:\n    - id: pcevent\n      type: System.ComponentModel.PropertyChangedEventArgs\n      description: A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data.\n  overload: System.Data.DataTable.OnPropertyChanging*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)\n  id: OnRemoveColumn(System.Data.DataColumn)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnRemoveColumn(DataColumn)\n  nameWithType: DataTable.OnRemoveColumn(DataColumn)\n  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Notifies the <xref href=\"System.Data.DataTable\"></xref> that a <xref href=\"System.Data.DataColumn\"></xref> is being removed.\n  remarks: 'Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRemoveColumn (System.Data.DataColumn column);\n    parameters:\n    - id: column\n      type: System.Data.DataColumn\n      description: The <xref href=\"System.Data.DataColumn\"></xref> being removed.\n  overload: System.Data.DataTable.OnRemoveColumn*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)\n  id: OnRowChanged(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnRowChanged(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.RowChanged\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataRowChangeEventArgs\n      description: A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnRowChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)\n  id: OnRowChanging(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnRowChanging(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.RowChanging\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataRowChangeEventArgs\n      description: A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnRowChanging*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)\n  id: OnRowDeleted(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnRowDeleted(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.RowDeleted\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataRowChangeEventArgs\n      description: A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnRowDeleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)\n  id: OnRowDeleting(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnRowDeleting(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.RowDeleting\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataRowChangeEventArgs\n      description: A <xref href=\"System.Data.DataRowChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnRowDeleting*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)\n  id: OnTableCleared(System.Data.DataTableClearEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnTableCleared(DataTableClearEventArgs)\n  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)\n  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.TableCleared\"></xref> event.\n  remarks: \"Raises the <xref:System.Data.DataTable.TableCleared> event, which is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller.  \\n  \\n Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).\"\n  syntax:\n    content: protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataTableClearEventArgs\n      description: A <xref href=\"System.Data.DataTableClearEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnTableCleared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)\n  id: OnTableClearing(System.Data.DataTableClearEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnTableClearing(DataTableClearEventArgs)\n  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)\n  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.TableClearing\"></xref> event.\n  remarks: \"Raises the <xref:System.Data.DataTable.TableClearing> event, which is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins.  \\n  \\n Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).\"\n  syntax:\n    content: protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataTableClearEventArgs\n      description: A <xref href=\"System.Data.DataTableClearEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnTableClearing*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)\n  id: OnTableNewRow(System.Data.DataTableNewRowEventArgs)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: OnTableNewRow(DataTableNewRowEventArgs)\n  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)\n  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataTable.TableNewRow\"></xref> event.\n  remarks: \"Raises the <xref:System.Data.DataTable.TableNewRow> event, which fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>.  \\n  \\n Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).\"\n  syntax:\n    content: protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);\n    parameters:\n    - id: e\n      type: System.Data.DataTableNewRowEventArgs\n      description: A <xref href=\"System.Data.DataTableNewRowEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataTable.OnTableNewRow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ParentRelations\n  id: ParentRelations\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ParentRelations\n  nameWithType: DataTable.ParentRelations\n  fullName: System.Data.DataTable.ParentRelations\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of parent relations for this <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example uses the ParentRelations property to return each parent <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetParentRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \\n  \\n [!code-cs[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._9_1.cs)]\\n [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._9_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRelationCollection ParentRelations { get; }\n    return:\n      type: System.Data.DataRelationCollection\n      description: A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains the parent relations for the table. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.\n  overload: System.Data.DataTable.ParentRelations*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Prefix\n  id: Prefix\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Prefix\n  nameWithType: DataTable.Prefix\n  fullName: System.Data.DataTable.Prefix\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the namespace for the XML representation of the data stored in the <xref href=\"System.Data.DataTable\"></xref>.\n  syntax:\n    content: public string Prefix { get; set; }\n    return:\n      type: System.String\n      description: The prefix of the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.Prefix*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.PrimaryKey\n  id: PrimaryKey\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: PrimaryKey\n  nameWithType: DataTable.PrimaryKey\n  fullName: System.Data.DataTable.PrimaryKey\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an array of columns that function as primary keys for the data table.\n  remarks: The primary key of a table must be unique to identify the record in the table. It's also possible to have a table with a primary key made up of two or more columns. This occurs when a single column can't contain enough unique values. For example, a two column primary key might consist of a \"FirstName\" and \"LastName\" column. Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of <xref:System.Data.DataColumn> objects.\n  example:\n  - \"The first example shows how to return the primary key columns for a <xref:System.Data.DataTable> displayed in a `DataGrid`. The second example demonstrates how to set the primary key columns for a <xref:System.Data.DataTable>.  \\n  \\n [!code-cs[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/csharp/p-system.data.datatable._4_1.cs)]\\n [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._4_1.vb)]\"\n  syntax:\n    content: public System.Data.DataColumn[] PrimaryKey { get; set; }\n    return:\n      type: System.Data.DataColumn[]\n      description: An array of <xref href=\"System.Data.DataColumn\"></xref> objects.\n  overload: System.Data.DataTable.PrimaryKey*\n  exceptions:\n  - type: System.Data.DataException\n    commentId: T:System.Data.DataException\n    description: The key is a foreign key.\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXml(System.IO.Stream)\n  id: ReadXml(System.IO.Stream)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXml(Stream)\n  nameWithType: DataTable.ReadXml(Stream)\n  fullName: System.Data.DataTable.ReadXml(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.Stream>.\n  remarks: \"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.Stream>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.  \\n  \\n The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXml#1](~/add/codesnippet/csharp/m-system.data.datatable._19_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._19_1.vb)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: An object that derives from <xref:System.IO.Stream>\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataTable.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)\n  id: ReadXml(System.IO.TextReader)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXml(TextReader)\n  nameWithType: DataTable.ReadXml(TextReader)\n  fullName: System.Data.DataTable.ReadXml(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextReader>.\n  remarks: \"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.TextReader>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.  \\n  \\n The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \\n  \\n [!code-vb[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/visualbasic/m-system.data.datatable._26_1.vb)]\\n [!code-cs[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/csharp/m-system.data.datatable._26_1.cs)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref:System.IO.TextReader> that will be used to read the data.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataTable.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXml(System.String)\n  id: ReadXml(System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXml(String)\n  nameWithType: DataTable.ReadXml(String)\n  fullName: System.Data.DataTable.ReadXml(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataTable\"></xref> from the specified file.\n  remarks: \"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.String>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.  \\n  \\n The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n```  \\nusing System.Data;  \\npublic class A {  \\n   static void Main(string[] args) {  \\n      DataTable tabl = new DataTable(\\\"mytable\\\");  \\n      tabl.Columns.Add(new DataColumn(\\\"id\\\", typeof(int)));  \\n      for (int i = 0; i < 10; i++) {  \\n         DataRow row = tabl.NewRow();  \\n         row[\\\"id\\\"] = i;  \\n         tabl.Rows.Add(row);  \\n      }  \\n      tabl.WriteXml(\\\"f.xml\\\", XmlWriteMode.WriteSchema);  \\n      DataTable newt = new DataTable();  \\n      newt.ReadXml(\\\"f.xml\\\");  \\n   }  \\n}  \\n```\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to disk. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/csharp/m-system.data.datatable._14_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._14_1.vb)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file from which to read the data.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataTable.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)\n  id: ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXml(XmlReader)\n  nameWithType: DataTable.ReadXml(XmlReader)\n  fullName: System.Data.DataTable.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML Schema and Data into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlReader>.\n  remarks: \"The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.Xml.XmlReader>. The behavior of this method is identical to that of the ReadXml method, except that in this case, data is loaded only for the current table and its descendants.  \\n  \\n The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to an <xref:System.Xml.XmlReader>. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data from the <xref:System.Xml.XmlReader> instance.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/csharp/m-system.data.datatable._10_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._10_1.vb)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> that will be used to read the data.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataTable.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)\n  id: ReadXmlSchema(System.IO.Stream)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXmlSchema(Stream)\n  nameWithType: DataTable.ReadXmlSchema(Stream)\n  fullName: System.Data.DataTable.ReadXmlSchema(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> using the specified stream.\n  remarks: \"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.  \\n  \\n To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is interpreted according to the XSD standard.  \\n  \\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.  \\n  \\n To create a nested relation using XML schema, use implicit nested elements. You can also configure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.\"\n  example:\n  - \"The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/csharp/m-system.data.datatable._8_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/visualbasic/m-system.data.datatable._8_1.vb)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream used to read the schema.\n  overload: System.Data.DataTable.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)\n  id: ReadXmlSchema(System.IO.TextReader)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXmlSchema(TextReader)\n  nameWithType: DataTable.ReadXmlSchema(TextReader)\n  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextReader>.\n  remarks: \"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.  \\n  \\n To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is interpreted according to the XSD standard.  \\n  \\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.  \\n  \\n To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.\"\n  example:\n  - \"The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.IO.StreamReader> (which inherits from <xref:System.IO.TextReader>) as its source.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._12_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._12_1.vb)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref:System.IO.TextReader> used to read the schema information.\n  overload: System.Data.DataTable.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXmlSchema(System.String)\n  id: ReadXmlSchema(System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXmlSchema(String)\n  nameWithType: DataTable.ReadXmlSchema(String)\n  fullName: System.Data.DataTable.ReadXmlSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> from the specified file.\n  remarks: \"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.  \\n  \\n To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is interpreted according to the XSD standard.  \\n  \\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the `DataTable`.  \\n  \\n To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.\"\n  example:\n  - \"The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a file. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using the file as its source.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/csharp/m-system.data.datatable._16_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._16_1.vb)]\"\n  syntax:\n    content: public void ReadXmlSchema (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file from which to read the schema information.\n  overload: System.Data.DataTable.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)\n  id: ReadXmlSchema(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXmlSchema(XmlReader)\n  nameWithType: DataTable.ReadXmlSchema(XmlReader)\n  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads an XML schema into the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlReader>.\n  remarks: \"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.  \\n  \\n To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is interpreted according to the XSD standard.  \\n  \\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  The way to create a nested relation using XML schema is to have implicit nested elements. Additionally, the nested relation could be re-wired, to use explicit column names. It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.\"\n  example:\n  - \"The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.Xml.XmlTextReader> (which inherits from <xref:System.Xml.XmlReader>) as its source.  \\n  \\n [!code-cs[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/csharp/m-system.data.datatable._17_1.cs)]\\n [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._17_1.vb)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> used to read the schema information.\n  overload: System.Data.DataTable.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)\n  id: ReadXmlSerializable(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ReadXmlSerializable(XmlReader)\n  nameWithType: DataTable.ReadXmlSerializable(XmlReader)\n  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads from an XML stream.\n  syntax:\n    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref:System.Xml.XmlReader> object.\n  overload: System.Data.DataTable.ReadXmlSerializable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.RejectChanges\n  id: RejectChanges\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: RejectChanges()\n  nameWithType: DataTable.RejectChanges()\n  fullName: System.Data.DataTable.RejectChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Rolls back all changes that have been made to the table since it was loaded, or the last time <xref:System.Data.DataTable.AcceptChanges*> was called.\n  remarks: When RejectChanges is called, any <xref:System.Data.DataRow> objects that are still in edit-mode cancel their edits. New rows are removed. Rows with the <xref:System.Data.DataRowState> set to `Modified` or `Deleted` return back to their original state.\n  example:\n  - \"The following example makes several changes to a <xref:System.Data.DataTable>, but rejects the changes by invoking the RejectChanges method.  \\n  \\n [!code-cs[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._3_1.cs)]\\n [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._3_1.vb)]\"\n  syntax:\n    content: public void RejectChanges ();\n    parameters: []\n  overload: System.Data.DataTable.RejectChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.RemotingFormat\n  id: RemotingFormat\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: RemotingFormat\n  nameWithType: DataTable.RemotingFormat\n  fullName: System.Data.DataTable.RemotingFormat\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the serialization format.\n  syntax:\n    content: public System.Data.SerializationFormat RemotingFormat { get; set; }\n    return:\n      type: System.Data.SerializationFormat\n      description: A <xref href=\"System.Data.SerializationFormat\"></xref> enumeration specifying either <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> or <xref uid=\"langword_csharp_Xml\" name=\"Xml\" href=\"\"></xref> serialization.\n  overload: System.Data.DataTable.RemotingFormat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Reset\n  id: Reset\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: DataTable.Reset()\n  fullName: System.Data.DataTable.Reset()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Resets the <xref href=\"System.Data.DataTable\"></xref> to its original state. Reset removes all data, indexes, relations, and columns of the table. If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  overload: System.Data.DataTable.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.RowChanged\n  id: RowChanged\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: RowChanged\n  nameWithType: DataTable.RowChanged\n  fullName: System.Data.DataTable.RowChanged\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs after a <xref href=\"System.Data.DataRow\"></xref> has been changed successfully.\n  remarks: For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - >-\n    [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._0_1.vb)]\n     [!code-cs[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._0_1.cs)]\n  syntax:\n    content: public event System.Data.DataRowChangeEventHandler RowChanged;\n    return:\n      type: System.Data.DataRowChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.RowChanging\n  id: RowChanging\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: RowChanging\n  nameWithType: DataTable.RowChanging\n  fullName: System.Data.DataTable.RowChanging\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a <xref href=\"System.Data.DataRow\"></xref> is changing.\n  remarks: For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - >-\n    [!code-cs[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._1_1.cs)]\n     [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._1_1.vb)]\n  syntax:\n    content: public event System.Data.DataRowChangeEventHandler RowChanging;\n    return:\n      type: System.Data.DataRowChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.RowDeleted\n  id: RowDeleted\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: RowDeleted\n  nameWithType: DataTable.RowDeleted\n  fullName: System.Data.DataTable.RowDeleted\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs after a row in the table has been deleted.\n  remarks: For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - >-\n    [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._3_1.vb)]\n     [!code-cs[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/csharp/e-system.data.datatable._3_1.cs)]\n  syntax:\n    content: public event System.Data.DataRowChangeEventHandler RowDeleted;\n    return:\n      type: System.Data.DataRowChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.RowDeleting\n  id: RowDeleting\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: RowDeleting\n  nameWithType: DataTable.RowDeleting\n  fullName: System.Data.DataTable.RowDeleting\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs before a row in the table is about to be deleted.\n  remarks: For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - >-\n    [!code-cs[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/csharp/e-system.data.datatable._2_1.cs)]\n     [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._2_1.vb)]\n  syntax:\n    content: public event System.Data.DataRowChangeEventHandler RowDeleting;\n    return:\n      type: System.Data.DataRowChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Rows\n  id: Rows\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Rows\n  nameWithType: DataTable.Rows\n  fullName: System.Data.DataTable.Rows\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of rows that belong to this table.\n  remarks: \"To create a new <xref:System.Data.DataRow>, you must use the <xref:System.Data.DataTable.NewRow%2A> method to return a new object. Such an object is automatically configured according to the schema defined for the <xref:System.Data.DataTable> through its collection of <xref:System.Data.DataColumn> objects. After creating a new row and setting the values for each column in the row, add the row to the <xref:System.Data.DataRowCollection> using the `Add` method.  \\n  \\n Each <xref:System.Data.DataRow> in the collection represents a row of data in the table. To commit a change to the value of a column in the row, you must invoke the <xref:System.Data.DataTable.AcceptChanges%2A> method.\"\n  example:\n  - \"The following shows two examples of returning and setting rows. The first example uses the Rows property and prints the value of each column for every row. The second example uses the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.NewRow%2A> method to create a new <xref:System.Data.DataRow> object with the schema of the <xref:System.Data.DataTable>. After setting the row values, the row is added to the <xref:System.Data.DataRowCollection> through the `Add` method.  \\n  \\n [!code-cs[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/csharp/p-system.data.datatable._1_1.cs)]\\n [!code-vb[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._1_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRowCollection Rows { get; }\n    return:\n      type: System.Data.DataRowCollection\n      description: A <xref href=\"System.Data.DataRowCollection\"></xref> that contains <xref href=\"System.Data.DataRow\"></xref> objects; otherwise a null value if no <xref href=\"System.Data.DataRow\"></xref> objects exist.\n  overload: System.Data.DataTable.Rows*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Select\n  id: Select\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Select()\n  nameWithType: DataTable.Select()\n  fullName: System.Data.DataTable.Select()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects.\n  remarks: To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.\n  example:\n  - \"The following example returns an array of <xref:System.Data.DataRow> objects through the Select method.  \\n  \\n [!code-cs[Classic WebData DataTable.Select Example#1](~/add/codesnippet/csharp/m-system.data.datatable._6_1.cs)]\\n [!code-vb[Classic WebData DataTable.Select Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._6_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRow[] Select ();\n    parameters: []\n    return:\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects.\n  overload: System.Data.DataTable.Select*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Select(System.String)\n  id: Select(System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Select(String)\n  nameWithType: DataTable.Select(String)\n  fullName: System.Data.DataTable.Select(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects that match the filter criteria.\n  remarks: \"To create the `filterExpression` argument, use the same rules that apply to the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value for creating filters.  \\n  \\n To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.  \\n  \\n If the column on the filter contains a null value, it will not be part of the result.\"\n  example:\n  - \"The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \\n  \\n [!code-cs[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._7_1.cs)]\\n [!code-vb[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._7_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRow[] Select (string filterExpression);\n    parameters:\n    - id: filterExpression\n      type: System.String\n      description: The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/).\n    return:\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects.\n  overload: System.Data.DataTable.Select*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Select(System.String,System.String)\n  id: Select(System.String,System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Select(String,String)\n  nameWithType: DataTable.Select(String,String)\n  fullName: System.Data.DataTable.Select(String,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects that match the filter criteria, in the specified sort order.\n  remarks: \"To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value. The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings.  \\n  \\n If the column on the filter contains a null value, it will not be part of the result.\"\n  example:\n  - \"The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \\n  \\n [!code-cs[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._11_1.cs)]\\n [!code-vb[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._11_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRow[] Select (string filterExpression, string sort);\n    parameters:\n    - id: filterExpression\n      type: System.String\n      description: The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/).\n    - id: sort\n      type: System.String\n      description: A string specifying the column and sort direction.\n    return:\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects matching the filter expression.\n  overload: System.Data.DataTable.Select*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)\n  id: Select(System.String,System.String,System.Data.DataViewRowState)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Select(String,String,DataViewRowState)\n  nameWithType: DataTable.Select(String,String,DataViewRowState)\n  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets an array of all <xref href=\"System.Data.DataRow\"></xref> objects that match the filter in the order of the sort that match the specified state.\n  remarks: \"To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class's <xref:System.Data.DataColumn.Expression%2A> property value. The `Sort` argument also uses the same rules for creating class's <xref:System.Data.DataColumn.Expression%2A> strings.  \\n  \\n If the column on the filter contains a null value, it will not be part of the result.\"\n  example:\n  - \"The following example uses a filter expression and record state to return an array of <xref:System.Data.DataRow> objects.  \\n  \\n [!code-cs[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/csharp/c72cdab9-f58a-41a1-a322-_1.cs)]\\n [!code-vb[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/visualbasic/c72cdab9-f58a-41a1-a322-_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);\n    parameters:\n    - id: filterExpression\n      type: System.String\n      description: The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/).\n    - id: sort\n      type: System.String\n      description: A string specifying the column and sort direction.\n    - id: recordStates\n      type: System.Data.DataViewRowState\n      description: One of the <xref href=\"System.Data.DataViewRowState\"></xref> values.\n    return:\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects.\n  overload: System.Data.DataTable.Select*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.Site\n  id: Site\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: Site\n  nameWithType: DataTable.Site\n  fullName: System.Data.DataTable.Site\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.\n  syntax:\n    content: public override System.ComponentModel.ISite Site { get; set; }\n    return:\n      type: System.ComponentModel.ISite\n      description: An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.Site*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection\n  id: System#ComponentModel#IListSource#ContainsListCollection\n  isEii: true\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection is a collection of <xref:System.Collections.IList> objects; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList\n  id: System#ComponentModel#IListSource#GetList\n  isEii: true\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: System.ComponentModel.IListSource.GetList()\n  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()\n  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: System.Collections.IList IListSource.GetList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: An <xref:System.Collections.IList> that can be bound to a data source from the object.\n  overload: System.Data.DataTable.System#ComponentModel#IListSource#GetList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema\n  id: System#Xml#Serialization#IXmlSerializable#GetSchema\n  isEii: true\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema()\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()\n  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: An <xref:System.Xml.Schema.XmlSchema> that describes the XML representation of the object that is produced by the <xref:System.Xml.Serialization.IXmlSerializable.WriteXml*> method and consumed by the <xref:System.Xml.Serialization.IXmlSerializable.ReadXml*> method.\n  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  isEii: true\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XmlReader.\n  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  isEii: true\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: An XmlWriter.\n  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.TableCleared\n  id: TableCleared\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: TableCleared\n  nameWithType: DataTable.TableCleared\n  fullName: System.Data.DataTable.TableCleared\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs after a <xref href=\"System.Data.DataTable\"></xref> is cleared.\n  remarks: The TableCleared event is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller. The TableCleared event is not fired if there are any exceptions during the clear operation.\n  syntax:\n    content: public event System.Data.DataTableClearEventHandler TableCleared;\n    return:\n      type: System.Data.DataTableClearEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.TableClearing\n  id: TableClearing\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: TableClearing\n  nameWithType: DataTable.TableClearing\n  fullName: System.Data.DataTable.TableClearing\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a <xref href=\"System.Data.DataTable\"></xref> is cleared.\n  remarks: The TableClearing event is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins. This event is always fired when the <xref:System.Data.DataTable.Clear%2A> method is invoked, even if the table contains zero rows.\n  syntax:\n    content: public event System.Data.DataTableClearEventHandler TableClearing;\n    return:\n      type: System.Data.DataTableClearEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.TableName\n  id: TableName\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: TableName\n  nameWithType: DataTable.TableName\n  fullName: System.Data.DataTable.TableName\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the name of the <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: The TableName is used to return this table from the parent <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection> (returned by the <xref:System.Data.DataSet.Tables%2A> property).\n  example:\n  - \"The following example prints the TableName for each table in a collection of <xref:System.Data.DataTable> objects.  \\n  \\n [!code-cs[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/csharp/p-system.data.datatable._2_1.cs)]\\n [!code-vb[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._2_1.vb)]\"\n  syntax:\n    content: public string TableName { get; set; }\n    return:\n      type: System.String\n      description: The name of the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.DataTable.TableName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or empty string (\"\") is passed in and this table belongs to a collection.\n  - type: System.Data.DuplicateNameException\n    commentId: T:System.Data.DuplicateNameException\n    description: The table belongs to a collection that already has a table with the same name. (Comparison is case-sensitive).\n  platform:\n  - net462\n- uid: System.Data.DataTable.TableNewRow\n  id: TableNewRow\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: TableNewRow\n  nameWithType: DataTable.TableNewRow\n  fullName: System.Data.DataTable.TableNewRow\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a new <xref href=\"System.Data.DataRow\"></xref> is inserted.\n  remarks: Fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>. This event is fired before the invoked `NewRow` method returns. The new <xref:System.Data.DataRow> instance is detached; it has not been added to the collection.\n  syntax:\n    content: public event System.Data.DataTableNewRowEventHandler TableNewRow;\n    return:\n      type: System.Data.DataTableNewRowEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.ToString\n  id: ToString\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: DataTable.ToString()\n  fullName: System.Data.DataTable.ToString()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the <xref:System.Data.DataTable.TableName*> and <xref:System.Data.DataTable.DisplayExpression*>, if there is one as a concatenated string.\n  remarks: Gets the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> for the <xref:System.Data.DataTable>.\n  example:\n  - \"The following example returns the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> using the ToString method.  \\n  \\n [!code-cs[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datatable._28_1.cs)]\\n [!code-vb[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._28_1.vb)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string consisting of the <xref:System.Data.DataTable.TableName*> and the <xref:System.Data.DataTable.DisplayExpression*> values.\n  overload: System.Data.DataTable.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream)\n  id: WriteXml(System.IO.Stream)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(Stream)\n  nameWithType: DataTable.WriteXml(Stream)\n  fullName: System.Data.DataTable.WriteXml(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.Stream>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to which the data will be written.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)\n  id: WriteXml(System.IO.TextWriter)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(TextWriter)\n  nameWithType: DataTable.WriteXml(TextWriter)\n  fullName: System.Data.DataTable.WriteXml(TextWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.TextWriter>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> with which to write the content.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.String)\n  id: WriteXml(System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(String)\n  nameWithType: DataTable.WriteXml(String)\n  fullName: System.Data.DataTable.WriteXml(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified file.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file to which to write the XML data.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)\n  id: WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter)\n  nameWithType: DataTable.WriteXml(XmlWriter)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.Xml.XmlWriter>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> with which to write the contents.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)\n  id: WriteXml(System.IO.Stream,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(Stream,Boolean)\n  nameWithType: DataTable.WriteXml(Stream,Boolean)\n  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.Stream>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream, bool writeHierarchy);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to which the data will be written.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(Stream,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to which the data will be written.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)\n  id: WriteXml(System.IO.TextWriter,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(TextWriter,Boolean)\n  nameWithType: DataTable.WriteXml(TextWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.IO.TextWriter>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to `true`.  \\n  \\n [!code-cs[DataWorks DataTable.WriteXml#1](~/add/codesnippet/csharp/m-system.data.datatable._1_1.cs)]\\n [!code-vb[DataWorks DataTable.WriteXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._1_1.vb)]\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> with which to write the content.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(TextWriter,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> used to write the document.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)\n  id: WriteXml(System.String,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(String,Boolean)\n  nameWithType: DataTable.WriteXml(String,Boolean)\n  fullName: System.Data.DataTable.WriteXml(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified file. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (string fileName, bool writeHierarchy);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file to which to write the XML data.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)\n  id: WriteXml(System.String,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(String,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(String,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified file and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file to which the data will be written.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)\n  id: WriteXml(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter,Boolean)\n  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current contents of the <xref href=\"System.Data.DataTable\"></xref> as XML using the specified <xref:System.Xml.XmlWriter>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> with which to write the contents.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> used to write the document.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)\n  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(Stream,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally, the `WriteXml` method saves data only for the current table. The `WriteXml` method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the `WriteXmlSchema` method writes only the schema. To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to which the data will be written.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)\n  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(TextWriter,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally, the `WriteXml` method saves data only for the current table. The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \\n  \\n [!code-cs[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/csharp/a21e26c1-61d0-4d79-88a3-_1.cs)]\\n [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/visualbasic/a21e26c1-61d0-4d79-88a3-_1.vb)]  \\n  \\n The example displays the following output in the console window:  \\n  \\n```  \\n==============================  \\nCustomer table, without hierarchy  \\n==============================  \\n<NewDataSet>  \\n  <xs:schema id=\\\"NewDataSet\\\" xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema  \\n\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n    <xs:element name=\\\"NewDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"Table1\\\">  \\n      <xs:complexType>  \\n        <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\">  \\n          <xs:element name=\\\"Table1\\\">  \\n            <xs:complexType>  \\n              <xs:sequence>  \\n                <xs:element name=\\\"ID\\\" type=\\\"xs:int\\\" />  \\n                <xs:element name=\\\"Name\\\" type=\\\"xs:string\\\" minOccurs=\\\"0\\\" />  \\n              </xs:sequence>  \\n            </xs:complexType>  \\n          </xs:element>  \\n        </xs:choice>  \\n      </xs:complexType>  \\n      <xs:unique name=\\\"Constraint1\\\" msdata:PrimaryKey=\\\"true\\\">  \\n        <xs:selector xpath=\\\".//Table1\\\" />  \\n        <xs:field xpath=\\\"ID\\\" />  \\n      </xs:unique>  \\n    </xs:element>  \\n  </xs:schema>  \\n  <Table1>  \\n    <ID>1</ID>  \\n    <Name>Mary</Name>  \\n  </Table1>  \\n  <Table1>  \\n    <ID>2</ID>  \\n    <Name>Andy</Name>  \\n  </Table1>  \\n  <Table1>  \\n    <ID>3</ID>  \\n    <Name>Peter</Name>  \\n  </Table1>  \\n  <Table1>  \\n    <ID>4</ID>  \\n    <Name>Russ</Name>  \\n  </Table1>  \\n</NewDataSet>  \\n==============================  \\nCustomer table, with hierarchy  \\n==============================  \\n<NewDataSet>  \\n  <xs:schema id=\\\"NewDataSet\\\" xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema  \\n\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n    <xs:element name=\\\"NewDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"Table1\\\">  \\n      <xs:complexType>  \\n        <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\">  \\n          <xs:element name=\\\"Table1\\\">  \\n            <xs:complexType>  \\n              <xs:sequence>  \\n                <xs:element name=\\\"ID\\\" type=\\\"xs:int\\\" />  \\n                <xs:element name=\\\"Name\\\" type=\\\"xs:string\\\" minOccurs=\\\"0\\\" />  \\n              </xs:sequence>  \\n            </xs:complexType>  \\n          </xs:element>  \\n          <xs:element name=\\\"Table2\\\">  \\n            <xs:complexType>  \\n              <xs:sequence>  \\n                <xs:element name=\\\"OrderID\\\" type=\\\"xs:int\\\" />  \\n                <xs:element name=\\\"CustomerID\\\" type=\\\"xs:int\\\" minOccurs=\\\"0\\\" />  \\n                <xs:element name=\\\"OrderDate\\\" type=\\\"xs:dateTime\\\" minOccurs=\\\"0\\\" />  \\n  \\n              </xs:sequence>  \\n            </xs:complexType>  \\n          </xs:element>  \\n        </xs:choice>  \\n      </xs:complexType>  \\n      <xs:unique name=\\\"Constraint1\\\" msdata:PrimaryKey=\\\"true\\\">  \\n        <xs:selector xpath=\\\".//Table1\\\" />  \\n        <xs:field xpath=\\\"ID\\\" />  \\n      </xs:unique>  \\n      <xs:unique name=\\\"Table2_Constraint1\\\" msdata:ConstraintName=\\\"Constraint1\\\" m  \\nsdata:PrimaryKey=\\\"true\\\">  \\n        <xs:selector xpath=\\\".//Table2\\\" />  \\n        <xs:field xpath=\\\"OrderID\\\" />  \\n      </xs:unique>  \\n      <xs:keyref name=\\\"CustomerOrder\\\" refer=\\\"Constraint1\\\">  \\n        <xs:selector xpath=\\\".//Table2\\\" />  \\n        <xs:field xpath=\\\"CustomerID\\\" />  \\n      </xs:keyref>  \\n    </xs:element>  \\n  </xs:schema>  \\n  <Table1>  \\n    <ID>1</ID>  \\n    <Name>Mary</Name>  \\n  </Table1>  \\n  <Table1>  \\n    <ID>2</ID>  \\n    <Name>Andy</Name>  \\n  </Table1>  \\n  <Table1>  \\n    <ID>3</ID>  \\n    <Name>Peter</Name>  \\n  </Table1>  \\n  <Table1>  \\n    <ID>4</ID>  \\n    <Name>Russ</Name>  \\n  </Table1>  \\n  <Table2>  \\n    <OrderID>1</OrderID>  \\n    <CustomerID>1</CustomerID>  \\n    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  \\n  </Table2>  \\n  <Table2>  \\n    <OrderID>2</OrderID>  \\n    <CustomerID>1</CustomerID>  \\n    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  \\n  </Table2>  \\n  <Table2>  \\n    <OrderID>3</OrderID>  \\n    <CustomerID>2</CustomerID>  \\n    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  \\n  </Table2>  \\n  <Table2>  \\n    <OrderID>4</OrderID>  \\n    <CustomerID>3</CustomerID>  \\n    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  \\n  </Table2>  \\n  <Table2>  \\n    <OrderID>5</OrderID>  \\n    <CustomerID>3</CustomerID>  \\n    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  \\n  </Table2>  \\n  <Table2>  \\n    <OrderID>6</OrderID>  \\n    <CustomerID>4</CustomerID>  \\n    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  \\n  </Table2>  \\n</NewDataSet>  \\n```\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> used to write the document.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)\n  id: WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(String,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified file and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally, the `WriteXml` method saves data only for the current table. If you want to save the data for the current table and all of schema, the <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file to which the data will be written.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)\n  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataTable\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> used to write the document.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the contents of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the data for the current table only.\n  overload: System.Data.DataTable.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)\n  id: WriteXmlSchema(System.IO.Stream)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(Stream)\n  nameWithType: DataTable.WriteXmlSchema(Stream)\n  fullName: System.Data.DataTable.WriteXmlSchema(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified stream.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to which the XML schema will be written.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)\n  id: WriteXmlSchema(System.IO.TextWriter)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(TextWriter)\n  nameWithType: DataTable.WriteXmlSchema(TextWriter)\n  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.IO.TextWriter>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> with which to write.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.String)\n  id: WriteXmlSchema(System.String)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(String)\n  nameWithType: DataTable.WriteXmlSchema(String)\n  fullName: System.Data.DataTable.WriteXmlSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified file.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.\"\n  syntax:\n    content: public void WriteXmlSchema (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file to use.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)\n  id: WriteXmlSchema(System.Xml.XmlWriter)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(XmlWriter)\n  nameWithType: DataTable.WriteXmlSchema(XmlWriter)\n  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.\"\n  syntax:\n    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> to use.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)\n  id: WriteXmlSchema(System.IO.Stream,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(Stream,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified stream. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.  \\n  \\n Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to which the XML schema will be written.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)\n  id: WriteXmlSchema(System.IO.TextWriter,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(TextWriter,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.IO.TextWriter>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.  \\n  \\n Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.\"\n  example:\n  - \"The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXmlSchema method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \\n  \\n [!code-cs[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._30_1.cs)]\\n [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._30_1.vb)]  \\n  \\n The example displays the following output in the console window:  \\n  \\n```  \\n==============================  \\nCustomer table, without hierarchy  \\n==============================  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<xs:schema id=\\\"NewDataSet\\\" xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\"  \\nxmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n  <xs:element name=\\\"NewDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"Ta  \\nble1\\\">  \\n    <xs:complexType>  \\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\">  \\n        <xs:element name=\\\"Table1\\\">  \\n          <xs:complexType>  \\n            <xs:sequence>  \\n              <xs:element name=\\\"ID\\\" type=\\\"xs:int\\\" />  \\n              <xs:element name=\\\"Name\\\" type=\\\"xs:string\\\" minOccurs=\\\"0\\\" />  \\n            </xs:sequence>  \\n          </xs:complexType>  \\n        </xs:element>  \\n      </xs:choice>  \\n    </xs:complexType>  \\n    <xs:unique name=\\\"Constraint1\\\" msdata:PrimaryKey=\\\"true\\\">  \\n      <xs:selector xpath=\\\".//Table1\\\" />  \\n      <xs:field xpath=\\\"ID\\\" />  \\n    </xs:unique>  \\n  </xs:element>  \\n</xs:schema>  \\n==============================  \\nCustomer table, with hierarchy  \\n==============================  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<xs:schema id=\\\"NewDataSet\\\" xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\"  \\nxmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n  <xs:element name=\\\"NewDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"Table1\\\">  \\n    <xs:complexType>  \\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\">  \\n        <xs:element name=\\\"Table1\\\">  \\n          <xs:complexType>  \\n            <xs:sequence>  \\n              <xs:element name=\\\"ID\\\" type=\\\"xs:int\\\" />  \\n              <xs:element name=\\\"Name\\\" type=\\\"xs:string\\\" minOccurs=\\\"0\\\" />  \\n            </xs:sequence>  \\n          </xs:complexType>  \\n        </xs:element>  \\n        <xs:element name=\\\"Table2\\\">  \\n          <xs:complexType>  \\n            <xs:sequence>  \\n              <xs:element name=\\\"OrderID\\\" type=\\\"xs:int\\\" />  \\n              <xs:element name=\\\"CustomerID\\\" type=\\\"xs:int\\\" minOccurs=\\\"0\\\" />  \\n              <xs:element name=\\\"OrderDate\\\" type=\\\"xs:dateTime\\\" minOccurs=\\\"0\\\" />  \\n            </xs:sequence>  \\n          </xs:complexType>  \\n        </xs:element>  \\n      </xs:choice>  \\n    </xs:complexType>  \\n    <xs:unique name=\\\"Constraint1\\\" msdata:PrimaryKey=\\\"true\\\">  \\n      <xs:selector xpath=\\\".//Table1\\\" />  \\n      <xs:field xpath=\\\"ID\\\" />  \\n    </xs:unique>  \\n    <xs:unique name=\\\"Table2_Constraint1\\\" msdata:ConstraintName=\\\"Constraint1\\\" msdata:PrimaryKey=\\\"true\\\">  \\n      <xs:selector xpath=\\\".//Table2\\\" />  \\n      <xs:field xpath=\\\"OrderID\\\" />  \\n    </xs:unique>  \\n    <xs:keyref name=\\\"CustomerOrder\\\" refer=\\\"Constraint1\\\">  \\n      <xs:selector xpath=\\\".//Table2\\\" />  \\n      <xs:field xpath=\\\"CustomerID\\\" />  \\n    </xs:keyref>  \\n  </xs:element>  \\n</xs:schema>  \\n```\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> with which to write.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)\n  id: WriteXmlSchema(System.String,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(String,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(String,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema to the specified file. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.  \\n  \\n Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.\"\n  syntax:\n    content: public void WriteXmlSchema (string fileName, bool writeHierarchy);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file to use.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)\n  id: WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Data.DataTable\n  langs:\n  - csharp\n  name: WriteXmlSchema(XmlWriter,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data structure of the <xref href=\"System.Data.DataTable\"></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.  \\n  \\n Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.\"\n  syntax:\n    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> used to write the document.\n    - id: writeHierarchy\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, write the schema of the current table and all its descendants. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (the default value), write the schema for the current table only.\n  overload: System.Data.DataTable.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: System.ComponentModel.MarshalByValueComponent\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.Data.ConstraintException\n  parent: System.Data\n  isExternal: false\n  name: ConstraintException\n  nameWithType: ConstraintException\n  fullName: System.Data.ConstraintException\n- uid: System.Data.NoNullAllowedException\n  parent: System.Data\n  isExternal: false\n  name: NoNullAllowedException\n  nameWithType: NoNullAllowedException\n  fullName: System.Data.NoNullAllowedException\n- uid: System.Data.DataException\n  parent: System.Data\n  isExternal: false\n  name: DataException\n  nameWithType: DataException\n  fullName: System.Data.DataException\n- uid: System.Data.DuplicateNameException\n  parent: System.Data\n  isExternal: false\n  name: DuplicateNameException\n  nameWithType: DuplicateNameException\n  fullName: System.Data.DuplicateNameException\n- uid: System.Data.DataTable.#ctor\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataTable()\n  nameWithType: DataTable.DataTable()\n  fullName: System.Data.DataTable.DataTable()\n- uid: System.Data.DataTable.#ctor(System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataTable(String)\n  nameWithType: DataTable.DataTable(String)\n  fullName: System.Data.DataTable.DataTable(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataTable(SerializationInfo,StreamingContext)\n  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Data.DataTable.#ctor(System.String,System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataTable(String,String)\n  nameWithType: DataTable.DataTable(String,String)\n  fullName: System.Data.DataTable.DataTable(String,String)\n- uid: System.Data.DataTable.AcceptChanges\n  parent: System.Data.DataTable\n  isExternal: false\n  name: AcceptChanges()\n  nameWithType: DataTable.AcceptChanges()\n  fullName: System.Data.DataTable.AcceptChanges()\n- uid: System.Data.DataTable.BeginInit\n  parent: System.Data.DataTable\n  isExternal: false\n  name: BeginInit()\n  nameWithType: DataTable.BeginInit()\n  fullName: System.Data.DataTable.BeginInit()\n- uid: System.Data.DataTable.BeginLoadData\n  parent: System.Data.DataTable\n  isExternal: false\n  name: BeginLoadData()\n  nameWithType: DataTable.BeginLoadData()\n  fullName: System.Data.DataTable.BeginLoadData()\n- uid: System.Data.DataTable.CaseSensitive\n  parent: System.Data.DataTable\n  isExternal: false\n  name: CaseSensitive\n  nameWithType: DataTable.CaseSensitive\n  fullName: System.Data.DataTable.CaseSensitive\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.DataTable.ChildRelations\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ChildRelations\n  nameWithType: DataTable.ChildRelations\n  fullName: System.Data.DataTable.ChildRelations\n- uid: System.Data.DataRelationCollection\n  parent: System.Data\n  isExternal: false\n  name: DataRelationCollection\n  nameWithType: DataRelationCollection\n  fullName: System.Data.DataRelationCollection\n- uid: System.Data.DataTable.Clear\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Clear()\n  nameWithType: DataTable.Clear()\n  fullName: System.Data.DataTable.Clear()\n- uid: System.Data.DataTable.Clone\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Clone()\n  nameWithType: DataTable.Clone()\n  fullName: System.Data.DataTable.Clone()\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.DataTable.ColumnChanged\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ColumnChanged\n  nameWithType: DataTable.ColumnChanged\n  fullName: System.Data.DataTable.ColumnChanged\n- uid: System.Data.DataColumnChangeEventHandler\n  parent: System.Data\n  isExternal: false\n  name: DataColumnChangeEventHandler\n  nameWithType: DataColumnChangeEventHandler\n  fullName: System.Data.DataColumnChangeEventHandler\n- uid: System.Data.DataTable.ColumnChanging\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ColumnChanging\n  nameWithType: DataTable.ColumnChanging\n  fullName: System.Data.DataTable.ColumnChanging\n- uid: System.Data.DataTable.Columns\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Columns\n  nameWithType: DataTable.Columns\n  fullName: System.Data.DataTable.Columns\n- uid: System.Data.DataColumnCollection\n  parent: System.Data\n  isExternal: false\n  name: DataColumnCollection\n  nameWithType: DataColumnCollection\n  fullName: System.Data.DataColumnCollection\n- uid: System.Data.DataTable.Compute(System.String,System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Compute(String,String)\n  nameWithType: DataTable.Compute(String,String)\n  fullName: System.Data.DataTable.Compute(String,String)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.DataTable.Constraints\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Constraints\n  nameWithType: DataTable.Constraints\n  fullName: System.Data.DataTable.Constraints\n- uid: System.Data.ConstraintCollection\n  parent: System.Data\n  isExternal: false\n  name: ConstraintCollection\n  nameWithType: ConstraintCollection\n  fullName: System.Data.ConstraintCollection\n- uid: System.Data.DataTable.Copy\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Copy()\n  nameWithType: DataTable.Copy()\n  fullName: System.Data.DataTable.Copy()\n- uid: System.Data.DataTable.CreateDataReader\n  parent: System.Data.DataTable\n  isExternal: false\n  name: CreateDataReader()\n  nameWithType: DataTable.CreateDataReader()\n  fullName: System.Data.DataTable.CreateDataReader()\n- uid: System.Data.DataTableReader\n  parent: System.Data\n  isExternal: false\n  name: DataTableReader\n  nameWithType: DataTableReader\n  fullName: System.Data.DataTableReader\n- uid: System.Data.DataTable.CreateInstance\n  parent: System.Data.DataTable\n  isExternal: false\n  name: CreateInstance()\n  nameWithType: DataTable.CreateInstance()\n  fullName: System.Data.DataTable.CreateInstance()\n- uid: System.Data.DataTable.DataSet\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataSet\n  nameWithType: DataTable.DataSet\n  fullName: System.Data.DataTable.DataSet\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Data.DataTable.DefaultView\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DefaultView\n  nameWithType: DataTable.DefaultView\n  fullName: System.Data.DataTable.DefaultView\n- uid: System.Data.DataView\n  parent: System.Data\n  isExternal: false\n  name: DataView\n  nameWithType: DataView\n  fullName: System.Data.DataView\n- uid: System.Data.DataTable.DisplayExpression\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DisplayExpression\n  nameWithType: DataTable.DisplayExpression\n  fullName: System.Data.DataTable.DisplayExpression\n- uid: System.Data.DataTable.EndInit\n  parent: System.Data.DataTable\n  isExternal: false\n  name: EndInit()\n  nameWithType: DataTable.EndInit()\n  fullName: System.Data.DataTable.EndInit()\n- uid: System.Data.DataTable.EndLoadData\n  parent: System.Data.DataTable\n  isExternal: false\n  name: EndLoadData()\n  nameWithType: DataTable.EndLoadData()\n  fullName: System.Data.DataTable.EndLoadData()\n- uid: System.Data.DataTable.ExtendedProperties\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ExtendedProperties\n  nameWithType: DataTable.ExtendedProperties\n  fullName: System.Data.DataTable.ExtendedProperties\n- uid: System.Data.PropertyCollection\n  parent: System.Data\n  isExternal: false\n  name: PropertyCollection\n  nameWithType: PropertyCollection\n  fullName: System.Data.PropertyCollection\n- uid: System.Data.DataTable.fInitInProgress\n  parent: System.Data.DataTable\n  isExternal: false\n  name: fInitInProgress\n  nameWithType: DataTable.fInitInProgress\n  fullName: System.Data.DataTable.fInitInProgress\n- uid: System.Data.DataTable.GetChanges\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetChanges()\n  nameWithType: DataTable.GetChanges()\n  fullName: System.Data.DataTable.GetChanges()\n- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetChanges(DataRowState)\n  nameWithType: DataTable.GetChanges(DataRowState)\n  fullName: System.Data.DataTable.GetChanges(DataRowState)\n- uid: System.Data.DataRowState\n  parent: System.Data\n  isExternal: false\n  name: DataRowState\n  nameWithType: DataRowState\n  fullName: System.Data.DataRowState\n- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetDataTableSchema(XmlSchemaSet)\n  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)\n  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)\n- uid: System.Xml.Schema.XmlSchemaComplexType\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaComplexType\n  nameWithType: XmlSchemaComplexType\n  fullName: System.Xml.Schema.XmlSchemaComplexType\n- uid: System.Xml.Schema.XmlSchemaSet\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaSet\n  nameWithType: XmlSchemaSet\n  fullName: System.Xml.Schema.XmlSchemaSet\n- uid: System.Data.DataTable.GetErrors\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetErrors()\n  nameWithType: DataTable.GetErrors()\n  fullName: System.Data.DataTable.GetErrors()\n- uid: System.Data.DataRow[]\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow[]\n  spec.csharp:\n  - uid: System.Data.DataRow\n    name: DataRow\n    nameWithType: DataRow\n    fullName: DataRow[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Data.DataTable.GetRowType\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetRowType()\n  nameWithType: DataTable.GetRowType()\n  fullName: System.Data.DataTable.GetRowType()\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Data.DataTable.GetSchema\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetSchema()\n  nameWithType: DataTable.GetSchema()\n  fullName: System.Data.DataTable.GetSchema()\n- uid: System.Xml.Schema.XmlSchema\n  parent: System.Xml.Schema\n  isExternal: true\n  name: XmlSchema\n  nameWithType: XmlSchema\n  fullName: System.Xml.Schema.XmlSchema\n- uid: System.Data.DataTable.HasErrors\n  parent: System.Data.DataTable\n  isExternal: false\n  name: HasErrors\n  nameWithType: DataTable.HasErrors\n  fullName: System.Data.DataTable.HasErrors\n- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ImportRow(DataRow)\n  nameWithType: DataTable.ImportRow(DataRow)\n  fullName: System.Data.DataTable.ImportRow(DataRow)\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.DataTable.Initialized\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Initialized\n  nameWithType: DataTable.Initialized\n  fullName: System.Data.DataTable.Initialized\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Data.DataTable.IsInitialized\n  parent: System.Data.DataTable\n  isExternal: false\n  name: IsInitialized\n  nameWithType: DataTable.IsInitialized\n  fullName: System.Data.DataTable.IsInitialized\n- uid: System.Data.DataTable.Load(System.Data.IDataReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Load(IDataReader)\n  nameWithType: DataTable.Load(IDataReader)\n  fullName: System.Data.DataTable.Load(IDataReader)\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Load(IDataReader,LoadOption)\n  nameWithType: DataTable.Load(IDataReader,LoadOption)\n  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)\n- uid: System.Data.LoadOption\n  parent: System.Data\n  isExternal: false\n  name: LoadOption\n  nameWithType: LoadOption\n  fullName: System.Data.LoadOption\n- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Load(IDataReader,LoadOption,FillErrorEventHandler)\n  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)\n  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)\n- uid: System.Data.FillErrorEventHandler\n  parent: System.Data\n  isExternal: false\n  name: FillErrorEventHandler\n  nameWithType: FillErrorEventHandler\n  fullName: System.Data.FillErrorEventHandler\n- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: LoadDataRow(Object[],Boolean)\n  nameWithType: DataTable.LoadDataRow(Object[],Boolean)\n  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: LoadDataRow(Object[],LoadOption)\n  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)\n  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)\n- uid: System.Data.DataTable.Locale\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Locale\n  nameWithType: DataTable.Locale\n  fullName: System.Data.DataTable.Locale\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Data.DataTable.Merge(System.Data.DataTable)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Merge(DataTable)\n  nameWithType: DataTable.Merge(DataTable)\n  fullName: System.Data.DataTable.Merge(DataTable)\n- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Merge(DataTable,Boolean)\n  nameWithType: DataTable.Merge(DataTable,Boolean)\n  fullName: System.Data.DataTable.Merge(DataTable,Boolean)\n- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Merge(DataTable,Boolean,MissingSchemaAction)\n  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)\n  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)\n- uid: System.Data.MissingSchemaAction\n  parent: System.Data\n  isExternal: false\n  name: MissingSchemaAction\n  nameWithType: MissingSchemaAction\n  fullName: System.Data.MissingSchemaAction\n- uid: System.Data.DataTable.MinimumCapacity\n  parent: System.Data.DataTable\n  isExternal: false\n  name: MinimumCapacity\n  nameWithType: DataTable.MinimumCapacity\n  fullName: System.Data.DataTable.MinimumCapacity\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.DataTable.Namespace\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Namespace\n  nameWithType: DataTable.Namespace\n  fullName: System.Data.DataTable.Namespace\n- uid: System.Data.DataTable.NewRow\n  parent: System.Data.DataTable\n  isExternal: false\n  name: NewRow()\n  nameWithType: DataTable.NewRow()\n  fullName: System.Data.DataTable.NewRow()\n- uid: System.Data.DataTable.NewRowArray(System.Int32)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: NewRowArray(Int32)\n  nameWithType: DataTable.NewRowArray(Int32)\n  fullName: System.Data.DataTable.NewRowArray(Int32)\n- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: NewRowFromBuilder(DataRowBuilder)\n  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)\n  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)\n- uid: System.Data.DataRowBuilder\n  parent: System.Data\n  isExternal: false\n  name: DataRowBuilder\n  nameWithType: DataRowBuilder\n  fullName: System.Data.DataRowBuilder\n- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnColumnChanged(DataColumnChangeEventArgs)\n  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)\n  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)\n- uid: System.Data.DataColumnChangeEventArgs\n  parent: System.Data\n  isExternal: false\n  name: DataColumnChangeEventArgs\n  nameWithType: DataColumnChangeEventArgs\n  fullName: System.Data.DataColumnChangeEventArgs\n- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnColumnChanging(DataColumnChangeEventArgs)\n  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)\n  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)\n- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnPropertyChanging(PropertyChangedEventArgs)\n  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)\n  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)\n- uid: System.ComponentModel.PropertyChangedEventArgs\n  parent: System.ComponentModel\n  isExternal: true\n  name: PropertyChangedEventArgs\n  nameWithType: PropertyChangedEventArgs\n  fullName: System.ComponentModel.PropertyChangedEventArgs\n- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRemoveColumn(DataColumn)\n  nameWithType: DataTable.OnRemoveColumn(DataColumn)\n  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)\n- uid: System.Data.DataColumn\n  parent: System.Data\n  isExternal: false\n  name: DataColumn\n  nameWithType: DataColumn\n  fullName: System.Data.DataColumn\n- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowChanged(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)\n- uid: System.Data.DataRowChangeEventArgs\n  parent: System.Data\n  isExternal: false\n  name: DataRowChangeEventArgs\n  nameWithType: DataRowChangeEventArgs\n  fullName: System.Data.DataRowChangeEventArgs\n- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowChanging(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)\n- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowDeleted(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)\n- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowDeleting(DataRowChangeEventArgs)\n  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)\n  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)\n- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnTableCleared(DataTableClearEventArgs)\n  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)\n  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)\n- uid: System.Data.DataTableClearEventArgs\n  parent: System.Data\n  isExternal: false\n  name: DataTableClearEventArgs\n  nameWithType: DataTableClearEventArgs\n  fullName: System.Data.DataTableClearEventArgs\n- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnTableClearing(DataTableClearEventArgs)\n  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)\n  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)\n- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnTableNewRow(DataTableNewRowEventArgs)\n  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)\n  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)\n- uid: System.Data.DataTableNewRowEventArgs\n  parent: System.Data\n  isExternal: false\n  name: DataTableNewRowEventArgs\n  nameWithType: DataTableNewRowEventArgs\n  fullName: System.Data.DataTableNewRowEventArgs\n- uid: System.Data.DataTable.ParentRelations\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ParentRelations\n  nameWithType: DataTable.ParentRelations\n  fullName: System.Data.DataTable.ParentRelations\n- uid: System.Data.DataTable.Prefix\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Prefix\n  nameWithType: DataTable.Prefix\n  fullName: System.Data.DataTable.Prefix\n- uid: System.Data.DataTable.PrimaryKey\n  parent: System.Data.DataTable\n  isExternal: false\n  name: PrimaryKey\n  nameWithType: DataTable.PrimaryKey\n  fullName: System.Data.DataTable.PrimaryKey\n- uid: System.Data.DataColumn[]\n  parent: System.Data\n  isExternal: false\n  name: DataColumn\n  nameWithType: DataColumn\n  fullName: System.Data.DataColumn[]\n  spec.csharp:\n  - uid: System.Data.DataColumn\n    name: DataColumn\n    nameWithType: DataColumn\n    fullName: DataColumn[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataTable.ReadXml(System.IO.Stream)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXml(Stream)\n  nameWithType: DataTable.ReadXml(Stream)\n  fullName: System.Data.DataTable.ReadXml(Stream)\n- uid: System.Data.XmlReadMode\n  parent: System.Data\n  isExternal: false\n  name: XmlReadMode\n  nameWithType: XmlReadMode\n  fullName: System.Data.XmlReadMode\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXml(TextReader)\n  nameWithType: DataTable.ReadXml(TextReader)\n  fullName: System.Data.DataTable.ReadXml(TextReader)\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: true\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Data.DataTable.ReadXml(System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXml(String)\n  nameWithType: DataTable.ReadXml(String)\n  fullName: System.Data.DataTable.ReadXml(String)\n- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXml(XmlReader)\n  nameWithType: DataTable.ReadXml(XmlReader)\n  fullName: System.Data.DataTable.ReadXml(XmlReader)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSchema(Stream)\n  nameWithType: DataTable.ReadXmlSchema(Stream)\n  fullName: System.Data.DataTable.ReadXmlSchema(Stream)\n- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSchema(TextReader)\n  nameWithType: DataTable.ReadXmlSchema(TextReader)\n  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)\n- uid: System.Data.DataTable.ReadXmlSchema(System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSchema(String)\n  nameWithType: DataTable.ReadXmlSchema(String)\n  fullName: System.Data.DataTable.ReadXmlSchema(String)\n- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSchema(XmlReader)\n  nameWithType: DataTable.ReadXmlSchema(XmlReader)\n  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)\n- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSerializable(XmlReader)\n  nameWithType: DataTable.ReadXmlSerializable(XmlReader)\n  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)\n- uid: System.Data.DataTable.RejectChanges\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RejectChanges()\n  nameWithType: DataTable.RejectChanges()\n  fullName: System.Data.DataTable.RejectChanges()\n- uid: System.Data.DataTable.RemotingFormat\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RemotingFormat\n  nameWithType: DataTable.RemotingFormat\n  fullName: System.Data.DataTable.RemotingFormat\n- uid: System.Data.SerializationFormat\n  parent: System.Data\n  isExternal: false\n  name: SerializationFormat\n  nameWithType: SerializationFormat\n  fullName: System.Data.SerializationFormat\n- uid: System.Data.DataTable.Reset\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Reset()\n  nameWithType: DataTable.Reset()\n  fullName: System.Data.DataTable.Reset()\n- uid: System.Data.DataTable.RowChanged\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RowChanged\n  nameWithType: DataTable.RowChanged\n  fullName: System.Data.DataTable.RowChanged\n- uid: System.Data.DataRowChangeEventHandler\n  parent: System.Data\n  isExternal: false\n  name: DataRowChangeEventHandler\n  nameWithType: DataRowChangeEventHandler\n  fullName: System.Data.DataRowChangeEventHandler\n- uid: System.Data.DataTable.RowChanging\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RowChanging\n  nameWithType: DataTable.RowChanging\n  fullName: System.Data.DataTable.RowChanging\n- uid: System.Data.DataTable.RowDeleted\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RowDeleted\n  nameWithType: DataTable.RowDeleted\n  fullName: System.Data.DataTable.RowDeleted\n- uid: System.Data.DataTable.RowDeleting\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RowDeleting\n  nameWithType: DataTable.RowDeleting\n  fullName: System.Data.DataTable.RowDeleting\n- uid: System.Data.DataTable.Rows\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Rows\n  nameWithType: DataTable.Rows\n  fullName: System.Data.DataTable.Rows\n- uid: System.Data.DataRowCollection\n  parent: System.Data\n  isExternal: false\n  name: DataRowCollection\n  nameWithType: DataRowCollection\n  fullName: System.Data.DataRowCollection\n- uid: System.Data.DataTable.Select\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Select()\n  nameWithType: DataTable.Select()\n  fullName: System.Data.DataTable.Select()\n- uid: System.Data.DataTable.Select(System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Select(String)\n  nameWithType: DataTable.Select(String)\n  fullName: System.Data.DataTable.Select(String)\n- uid: System.Data.DataTable.Select(System.String,System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Select(String,String)\n  nameWithType: DataTable.Select(String,String)\n  fullName: System.Data.DataTable.Select(String,String)\n- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Select(String,String,DataViewRowState)\n  nameWithType: DataTable.Select(String,String,DataViewRowState)\n  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)\n- uid: System.Data.DataViewRowState\n  parent: System.Data\n  isExternal: false\n  name: DataViewRowState\n  nameWithType: DataViewRowState\n  fullName: System.Data.DataViewRowState\n- uid: System.Data.DataTable.Site\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Site\n  nameWithType: DataTable.Site\n  fullName: System.Data.DataTable.Site\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  nameWithType: ISite\n  fullName: System.ComponentModel.ISite\n- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection\n- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList()\n  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()\n  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema()\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()\n  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Data.DataTable.TableCleared\n  parent: System.Data.DataTable\n  isExternal: false\n  name: TableCleared\n  nameWithType: DataTable.TableCleared\n  fullName: System.Data.DataTable.TableCleared\n- uid: System.Data.DataTableClearEventHandler\n  parent: System.Data\n  isExternal: false\n  name: DataTableClearEventHandler\n  nameWithType: DataTableClearEventHandler\n  fullName: System.Data.DataTableClearEventHandler\n- uid: System.Data.DataTable.TableClearing\n  parent: System.Data.DataTable\n  isExternal: false\n  name: TableClearing\n  nameWithType: DataTable.TableClearing\n  fullName: System.Data.DataTable.TableClearing\n- uid: System.Data.DataTable.TableName\n  parent: System.Data.DataTable\n  isExternal: false\n  name: TableName\n  nameWithType: DataTable.TableName\n  fullName: System.Data.DataTable.TableName\n- uid: System.Data.DataTable.TableNewRow\n  parent: System.Data.DataTable\n  isExternal: false\n  name: TableNewRow\n  nameWithType: DataTable.TableNewRow\n  fullName: System.Data.DataTable.TableNewRow\n- uid: System.Data.DataTableNewRowEventHandler\n  parent: System.Data\n  isExternal: false\n  name: DataTableNewRowEventHandler\n  nameWithType: DataTableNewRowEventHandler\n  fullName: System.Data.DataTableNewRowEventHandler\n- uid: System.Data.DataTable.ToString\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ToString()\n  nameWithType: DataTable.ToString()\n  fullName: System.Data.DataTable.ToString()\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(Stream)\n  nameWithType: DataTable.WriteXml(Stream)\n  fullName: System.Data.DataTable.WriteXml(Stream)\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(TextWriter)\n  nameWithType: DataTable.WriteXml(TextWriter)\n  fullName: System.Data.DataTable.WriteXml(TextWriter)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: true\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Data.DataTable.WriteXml(System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(String)\n  nameWithType: DataTable.WriteXml(String)\n  fullName: System.Data.DataTable.WriteXml(String)\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(XmlWriter)\n  nameWithType: DataTable.WriteXml(XmlWriter)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter)\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(Stream,Boolean)\n  nameWithType: DataTable.WriteXml(Stream,Boolean)\n  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(Stream,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)\n- uid: System.Data.XmlWriteMode\n  parent: System.Data\n  isExternal: false\n  name: XmlWriteMode\n  nameWithType: XmlWriteMode\n  fullName: System.Data.XmlWriteMode\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(TextWriter,Boolean)\n  nameWithType: DataTable.WriteXml(TextWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(TextWriter,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)\n- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(String,Boolean)\n  nameWithType: DataTable.WriteXml(String,Boolean)\n  fullName: System.Data.DataTable.WriteXml(String,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(String,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(String,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(XmlWriter,Boolean)\n  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(XmlWriter,XmlWriteMode)\n  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)\n- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(Stream,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(TextWriter,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(String,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)\n- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)\n  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)\n  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(Stream)\n  nameWithType: DataTable.WriteXmlSchema(Stream)\n  fullName: System.Data.DataTable.WriteXmlSchema(Stream)\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(TextWriter)\n  nameWithType: DataTable.WriteXmlSchema(TextWriter)\n  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)\n- uid: System.Data.DataTable.WriteXmlSchema(System.String)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(String)\n  nameWithType: DataTable.WriteXmlSchema(String)\n  fullName: System.Data.DataTable.WriteXmlSchema(String)\n- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(XmlWriter)\n  nameWithType: DataTable.WriteXmlSchema(XmlWriter)\n  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(Stream,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)\n- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(TextWriter,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)\n- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(String,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(String,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)\n- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema(XmlWriter,Boolean)\n  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)\n  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)\n- uid: System.Data.DataTable.#ctor*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable.DataTable\n- uid: System.Data.DataTable.AcceptChanges*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: AcceptChanges\n  nameWithType: DataTable.AcceptChanges\n- uid: System.Data.DataTable.BeginInit*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: BeginInit\n  nameWithType: DataTable.BeginInit\n- uid: System.Data.DataTable.BeginLoadData*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: BeginLoadData\n  nameWithType: DataTable.BeginLoadData\n- uid: System.Data.DataTable.CaseSensitive*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: CaseSensitive\n  nameWithType: DataTable.CaseSensitive\n- uid: System.Data.DataTable.ChildRelations*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ChildRelations\n  nameWithType: DataTable.ChildRelations\n- uid: System.Data.DataTable.Clear*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Clear\n  nameWithType: DataTable.Clear\n- uid: System.Data.DataTable.Clone*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Clone\n  nameWithType: DataTable.Clone\n- uid: System.Data.DataTable.Columns*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Columns\n  nameWithType: DataTable.Columns\n- uid: System.Data.DataTable.Compute*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Compute\n  nameWithType: DataTable.Compute\n- uid: System.Data.DataTable.Constraints*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Constraints\n  nameWithType: DataTable.Constraints\n- uid: System.Data.DataTable.Copy*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Copy\n  nameWithType: DataTable.Copy\n- uid: System.Data.DataTable.CreateDataReader*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: CreateDataReader\n  nameWithType: DataTable.CreateDataReader\n- uid: System.Data.DataTable.CreateInstance*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: CreateInstance\n  nameWithType: DataTable.CreateInstance\n- uid: System.Data.DataTable.DataSet*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DataSet\n  nameWithType: DataTable.DataSet\n- uid: System.Data.DataTable.DefaultView*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DefaultView\n  nameWithType: DataTable.DefaultView\n- uid: System.Data.DataTable.DisplayExpression*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: DisplayExpression\n  nameWithType: DataTable.DisplayExpression\n- uid: System.Data.DataTable.EndInit*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: EndInit\n  nameWithType: DataTable.EndInit\n- uid: System.Data.DataTable.EndLoadData*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: EndLoadData\n  nameWithType: DataTable.EndLoadData\n- uid: System.Data.DataTable.ExtendedProperties*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ExtendedProperties\n  nameWithType: DataTable.ExtendedProperties\n- uid: System.Data.DataTable.GetChanges*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetChanges\n  nameWithType: DataTable.GetChanges\n- uid: System.Data.DataTable.GetDataTableSchema*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetDataTableSchema\n  nameWithType: DataTable.GetDataTableSchema\n- uid: System.Data.DataTable.GetErrors*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetErrors\n  nameWithType: DataTable.GetErrors\n- uid: System.Data.DataTable.GetObjectData*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetObjectData\n  nameWithType: DataTable.GetObjectData\n- uid: System.Data.DataTable.GetRowType*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetRowType\n  nameWithType: DataTable.GetRowType\n- uid: System.Data.DataTable.GetSchema*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: GetSchema\n  nameWithType: DataTable.GetSchema\n- uid: System.Data.DataTable.HasErrors*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: HasErrors\n  nameWithType: DataTable.HasErrors\n- uid: System.Data.DataTable.ImportRow*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ImportRow\n  nameWithType: DataTable.ImportRow\n- uid: System.Data.DataTable.IsInitialized*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: IsInitialized\n  nameWithType: DataTable.IsInitialized\n- uid: System.Data.DataTable.Load*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Load\n  nameWithType: DataTable.Load\n- uid: System.Data.DataTable.LoadDataRow*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: LoadDataRow\n  nameWithType: DataTable.LoadDataRow\n- uid: System.Data.DataTable.Locale*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Locale\n  nameWithType: DataTable.Locale\n- uid: System.Data.DataTable.Merge*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Merge\n  nameWithType: DataTable.Merge\n- uid: System.Data.DataTable.MinimumCapacity*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: MinimumCapacity\n  nameWithType: DataTable.MinimumCapacity\n- uid: System.Data.DataTable.Namespace*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Namespace\n  nameWithType: DataTable.Namespace\n- uid: System.Data.DataTable.NewRow*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: NewRow\n  nameWithType: DataTable.NewRow\n- uid: System.Data.DataTable.NewRowArray*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: NewRowArray\n  nameWithType: DataTable.NewRowArray\n- uid: System.Data.DataTable.NewRowFromBuilder*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: NewRowFromBuilder\n  nameWithType: DataTable.NewRowFromBuilder\n- uid: System.Data.DataTable.OnColumnChanged*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnColumnChanged\n  nameWithType: DataTable.OnColumnChanged\n- uid: System.Data.DataTable.OnColumnChanging*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnColumnChanging\n  nameWithType: DataTable.OnColumnChanging\n- uid: System.Data.DataTable.OnPropertyChanging*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnPropertyChanging\n  nameWithType: DataTable.OnPropertyChanging\n- uid: System.Data.DataTable.OnRemoveColumn*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRemoveColumn\n  nameWithType: DataTable.OnRemoveColumn\n- uid: System.Data.DataTable.OnRowChanged*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowChanged\n  nameWithType: DataTable.OnRowChanged\n- uid: System.Data.DataTable.OnRowChanging*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowChanging\n  nameWithType: DataTable.OnRowChanging\n- uid: System.Data.DataTable.OnRowDeleted*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowDeleted\n  nameWithType: DataTable.OnRowDeleted\n- uid: System.Data.DataTable.OnRowDeleting*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnRowDeleting\n  nameWithType: DataTable.OnRowDeleting\n- uid: System.Data.DataTable.OnTableCleared*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnTableCleared\n  nameWithType: DataTable.OnTableCleared\n- uid: System.Data.DataTable.OnTableClearing*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnTableClearing\n  nameWithType: DataTable.OnTableClearing\n- uid: System.Data.DataTable.OnTableNewRow*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: OnTableNewRow\n  nameWithType: DataTable.OnTableNewRow\n- uid: System.Data.DataTable.ParentRelations*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ParentRelations\n  nameWithType: DataTable.ParentRelations\n- uid: System.Data.DataTable.Prefix*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Prefix\n  nameWithType: DataTable.Prefix\n- uid: System.Data.DataTable.PrimaryKey*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: PrimaryKey\n  nameWithType: DataTable.PrimaryKey\n- uid: System.Data.DataTable.ReadXml*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXml\n  nameWithType: DataTable.ReadXml\n- uid: System.Data.DataTable.ReadXmlSchema*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSchema\n  nameWithType: DataTable.ReadXmlSchema\n- uid: System.Data.DataTable.ReadXmlSerializable*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ReadXmlSerializable\n  nameWithType: DataTable.ReadXmlSerializable\n- uid: System.Data.DataTable.RejectChanges*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RejectChanges\n  nameWithType: DataTable.RejectChanges\n- uid: System.Data.DataTable.RemotingFormat*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: RemotingFormat\n  nameWithType: DataTable.RemotingFormat\n- uid: System.Data.DataTable.Reset*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Reset\n  nameWithType: DataTable.Reset\n- uid: System.Data.DataTable.Rows*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Rows\n  nameWithType: DataTable.Rows\n- uid: System.Data.DataTable.Select*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Select\n  nameWithType: DataTable.Select\n- uid: System.Data.DataTable.Site*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: Site\n  nameWithType: DataTable.Site\n- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection\n- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList\n  nameWithType: DataTable.System.ComponentModel.IListSource.GetList\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml\n- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml\n  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml\n- uid: System.Data.DataTable.TableName*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: TableName\n  nameWithType: DataTable.TableName\n- uid: System.Data.DataTable.ToString*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: ToString\n  nameWithType: DataTable.ToString\n- uid: System.Data.DataTable.WriteXml*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXml\n  nameWithType: DataTable.WriteXml\n- uid: System.Data.DataTable.WriteXmlSchema*\n  parent: System.Data.DataTable\n  isExternal: false\n  name: WriteXmlSchema\n  nameWithType: DataTable.WriteXmlSchema\n"}