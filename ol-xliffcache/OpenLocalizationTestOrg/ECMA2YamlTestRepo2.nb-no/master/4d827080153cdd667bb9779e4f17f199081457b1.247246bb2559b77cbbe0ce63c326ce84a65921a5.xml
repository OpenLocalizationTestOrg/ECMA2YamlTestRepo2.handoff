{"nodes":[{"pos":[1275,1390],"content":"Represents a container for the addresses of resources that bypass the proxy server. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a container for the addresses of resources that bypass the proxy server. This class cannot be inherited.","pos":[0,115],"nodes":[{"content":"Represents a container for the addresses of resources that bypass the proxy server.","pos":[0,83]},{"content":"This class cannot be inherited.","pos":[84,115]}]}]},{"pos":[1402,1876],"content":"This collection holds instances of the `add` configuration element in the `bypasslist` configuration element. An `add` element specifies the address of a resource residing on a server. When an application requests a resource by using the <xref:System.Net.WebRequest> or <xref:System.Net.WebClient> classes, if the address of the resource is in the `bypasslist`, the request is sent directly to the server where the resource resides instead of being sent to the proxy server.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This collection holds instances of the <ph id=\"ph1\">`add`</ph> configuration element in the <ph id=\"ph2\">`bypasslist`</ph> configuration element.","pos":[0,109],"source":"This collection holds instances of the `add` configuration element in the `bypasslist` configuration element."},{"content":"An <ph id=\"ph1\">`add`</ph> element specifies the address of a resource residing on a server.","pos":[110,184],"source":" An `add` element specifies the address of a resource residing on a server."},{"content":"When an application requests a resource by using the &lt;xref:System.Net.WebRequest&gt; or &lt;xref:System.Net.WebClient&gt; classes, if the address of the resource is in the <ph id=\"ph1\">`bypasslist`</ph>, the request is sent directly to the server where the resource resides instead of being sent to the proxy server.","pos":[185,474],"source":" When an application requests a resource by using the <xref:System.Net.WebRequest> or <xref:System.Net.WebClient> classes, if the address of the resource is in the `bypasslist`, the request is sent directly to the server where the resource resides instead of being sent to the proxy server."}]},{"pos":[7836,7949],"content":"Initializes an empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.BypassElementCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes an empty instance of the <xref href=\"System.Net.Configuration.BypassElementCollection\"></xref> class."},{"pos":[8619,8653],"content":"Adds an element to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an element to the collection.","pos":[0,34]}]},{"pos":[8847,8936],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.BypassElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add to the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Configuration.BypassElement\"></xref> to add to the collection."},{"pos":[9418,9459],"content":"Removes all elements from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all elements from the collection.","pos":[0,41]}]},{"pos":[10260,10272],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11165,11177],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11235,11247],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11868,11925],"content":"Returns the index of the specified configuration element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the index of the specified configuration element.","pos":[0,57]}]},{"pos":[12122,12184],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.BypassElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Configuration.BypassElement\"></xref>."},{"pos":[12241,12286],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">element</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The zero-based index of <code>element</code>."},{"pos":[12812,12881],"content":"Gets or sets the element at the specified position in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element at the specified position in the collection.","pos":[0,69]}]},{"pos":[13057,13093],"content":"The zero-based index of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element.","pos":[0,36]}]},{"pos":[13176,13266],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.BypassElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Configuration.BypassElement\"></xref> at the specified location."},{"pos":[13794,13842],"content":"Gets or sets the element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element with the specified key.","pos":[0,48]}]},{"pos":[14020,14061],"content":"The key for an element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key for an element in the collection.","pos":[0,41]}]},{"pos":[14144,14342],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.BypassElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified key, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if there is no element with the specified key.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Configuration.BypassElement\"></xref> with the specified key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no element with the specified key."},{"pos":[14949,15013],"content":"Removes the specified configuration element from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the specified configuration element from the collection.","pos":[0,64]}]},{"pos":[15210,15284],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.BypassElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Configuration.BypassElement\"></xref> to remove."},{"pos":[15822,15865],"content":"Removes the element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the element with the specified key.","pos":[0,43]}]},{"pos":[15999,16032],"content":"The key of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]},{"pos":[16575,16618],"content":"Removes the element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the element at the specified index.","pos":[0,43]}]},{"pos":[16752,16798],"content":"The zero-based index of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]},{"pos":[17456,17468],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Configuration.BypassElementCollection\n  id: BypassElementCollection\n  children:\n  - System.Net.Configuration.BypassElementCollection.#ctor\n  - System.Net.Configuration.BypassElementCollection.Add(System.Net.Configuration.BypassElement)\n  - System.Net.Configuration.BypassElementCollection.Clear\n  - System.Net.Configuration.BypassElementCollection.CreateNewElement\n  - System.Net.Configuration.BypassElementCollection.GetElementKey(System.Configuration.ConfigurationElement)\n  - System.Net.Configuration.BypassElementCollection.IndexOf(System.Net.Configuration.BypassElement)\n  - System.Net.Configuration.BypassElementCollection.Item(System.Int32)\n  - System.Net.Configuration.BypassElementCollection.Item(System.String)\n  - System.Net.Configuration.BypassElementCollection.Remove(System.Net.Configuration.BypassElement)\n  - System.Net.Configuration.BypassElementCollection.Remove(System.String)\n  - System.Net.Configuration.BypassElementCollection.RemoveAt(System.Int32)\n  - System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate\n  langs:\n  - csharp\n  name: BypassElementCollection\n  nameWithType: BypassElementCollection\n  fullName: System.Net.Configuration.BypassElementCollection\n  type: Class\n  summary: Represents a container for the addresses of resources that bypass the proxy server. This class cannot be inherited.\n  remarks: This collection holds instances of the `add` configuration element in the `bypasslist` configuration element. An `add` element specifies the address of a resource residing on a server. When an application requests a resource by using the <xref:System.Net.WebRequest> or <xref:System.Net.WebClient> classes, if the address of the resource is in the `bypasslist`, the request is sent directly to the server where the resource resides instead of being sent to the proxy server.\n  syntax:\n    content: >-\n      [System.Configuration.ConfigurationCollection(typeof(System.Net.Configuration.BypassElement))]\n\n      public sealed class BypassElementCollection : System.Configuration.ConfigurationElementCollection\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  - System.Configuration.ConfigurationElementCollection\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Properties\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElementCollection.AddElementName\n  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)\n  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElementCollection.BaseClear\n  - System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)\n  - System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)\n  - System.Configuration.ConfigurationElementCollection.BaseGetAllKeys\n  - System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)\n  - System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)\n  - System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)\n  - System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)\n  - System.Configuration.ConfigurationElementCollection.ClearElementName\n  - System.Configuration.ConfigurationElementCollection.CollectionType\n  - System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)\n  - System.Configuration.ConfigurationElementCollection.Count\n  - System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)\n  - System.Configuration.ConfigurationElementCollection.ElementName\n  - System.Configuration.ConfigurationElementCollection.EmitClear\n  - System.Configuration.ConfigurationElementCollection.Equals(System.Object)\n  - System.Configuration.ConfigurationElementCollection.GetEnumerator\n  - System.Configuration.ConfigurationElementCollection.GetHashCode\n  - System.Configuration.ConfigurationElementCollection.IsElementName(System.String)\n  - System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElementCollection.IsModified\n  - System.Configuration.ConfigurationElementCollection.IsReadOnly\n  - System.Configuration.ConfigurationElementCollection.IsSynchronized\n  - System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElementCollection.RemoveElementName\n  - System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElementCollection.ResetModified\n  - System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElementCollection.SetReadOnly\n  - System.Configuration.ConfigurationElementCollection.SyncRoot\n  - System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.#ctor\n  id: '#ctor'\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: BypassElementCollection()\n  nameWithType: BypassElementCollection.BypassElementCollection()\n  fullName: System.Net.Configuration.BypassElementCollection.BypassElementCollection()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Initializes an empty instance of the <xref href=\"System.Net.Configuration.BypassElementCollection\"></xref> class.\n  syntax:\n    content: public BypassElementCollection ();\n    parameters: []\n  overload: System.Net.Configuration.BypassElementCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.Add(System.Net.Configuration.BypassElement)\n  id: Add(System.Net.Configuration.BypassElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: Add(BypassElement)\n  nameWithType: BypassElementCollection.Add(BypassElement)\n  fullName: System.Net.Configuration.BypassElementCollection.Add(BypassElement)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Adds an element to the collection.\n  syntax:\n    content: public void Add (System.Net.Configuration.BypassElement element);\n    parameters:\n    - id: element\n      type: System.Net.Configuration.BypassElement\n      description: The <xref href=\"System.Net.Configuration.BypassElement\"></xref> to add to the collection.\n  overload: System.Net.Configuration.BypassElementCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.Clear\n  id: Clear\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: BypassElementCollection.Clear()\n  fullName: System.Net.Configuration.BypassElementCollection.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Removes all elements from the collection.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Net.Configuration.BypassElementCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.CreateNewElement\n  id: CreateNewElement\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: CreateNewElement()\n  nameWithType: BypassElementCollection.CreateNewElement()\n  fullName: System.Net.Configuration.BypassElementCollection.CreateNewElement()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationElement CreateNewElement ();\n    parameters: []\n    return:\n      type: System.Configuration.ConfigurationElement\n      description: To be added.\n  overload: System.Net.Configuration.BypassElementCollection.CreateNewElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.GetElementKey(System.Configuration.ConfigurationElement)\n  id: GetElementKey(System.Configuration.ConfigurationElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: GetElementKey(ConfigurationElement)\n  nameWithType: BypassElementCollection.GetElementKey(ConfigurationElement)\n  fullName: System.Net.Configuration.BypassElementCollection.GetElementKey(ConfigurationElement)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  syntax:\n    content: protected override object GetElementKey (System.Configuration.ConfigurationElement element);\n    parameters:\n    - id: element\n      type: System.Configuration.ConfigurationElement\n      description: To be added.\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Net.Configuration.BypassElementCollection.GetElementKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.IndexOf(System.Net.Configuration.BypassElement)\n  id: IndexOf(System.Net.Configuration.BypassElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: IndexOf(BypassElement)\n  nameWithType: BypassElementCollection.IndexOf(BypassElement)\n  fullName: System.Net.Configuration.BypassElementCollection.IndexOf(BypassElement)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Returns the index of the specified configuration element.\n  syntax:\n    content: public int IndexOf (System.Net.Configuration.BypassElement element);\n    parameters:\n    - id: element\n      type: System.Net.Configuration.BypassElement\n      description: A <xref href=\"System.Net.Configuration.BypassElement\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>element</code>.\n  overload: System.Net.Configuration.BypassElementCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: BypassElementCollection.Item(Int32)\n  fullName: System.Net.Configuration.BypassElementCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Gets or sets the element at the specified position in the collection.\n  syntax:\n    content: public System.Net.Configuration.BypassElement this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element.\n    return:\n      type: System.Net.Configuration.BypassElement\n      description: The <xref href=\"System.Net.Configuration.BypassElement\"></xref> at the specified location.\n  overload: System.Net.Configuration.BypassElementCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: BypassElementCollection.Item(String)\n  fullName: System.Net.Configuration.BypassElementCollection.Item(String)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Gets or sets the element with the specified key.\n  syntax:\n    content: public System.Net.Configuration.BypassElement this[string name] { get; set; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The key for an element in the collection.\n    return:\n      type: System.Net.Configuration.BypassElement\n      description: The <xref href=\"System.Net.Configuration.BypassElement\"></xref> with the specified key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no element with the specified key.\n  overload: System.Net.Configuration.BypassElementCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.Remove(System.Net.Configuration.BypassElement)\n  id: Remove(System.Net.Configuration.BypassElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: Remove(BypassElement)\n  nameWithType: BypassElementCollection.Remove(BypassElement)\n  fullName: System.Net.Configuration.BypassElementCollection.Remove(BypassElement)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Removes the specified configuration element from the collection.\n  syntax:\n    content: public void Remove (System.Net.Configuration.BypassElement element);\n    parameters:\n    - id: element\n      type: System.Net.Configuration.BypassElement\n      description: The <xref href=\"System.Net.Configuration.BypassElement\"></xref> to remove.\n  overload: System.Net.Configuration.BypassElementCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: BypassElementCollection.Remove(String)\n  fullName: System.Net.Configuration.BypassElementCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Removes the element with the specified key.\n  syntax:\n    content: public void Remove (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The key of the element to remove.\n  overload: System.Net.Configuration.BypassElementCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: BypassElementCollection.RemoveAt(Int32)\n  fullName: System.Net.Configuration.BypassElementCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Removes the element at the specified index.\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Net.Configuration.BypassElementCollection.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate\n  id: ThrowOnDuplicate\n  parent: System.Net.Configuration.BypassElementCollection\n  langs:\n  - csharp\n  name: ThrowOnDuplicate\n  nameWithType: BypassElementCollection.ThrowOnDuplicate\n  fullName: System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  syntax:\n    content: protected override bool ThrowOnDuplicate { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationElementCollection\n  isExternal: false\n  name: System.Configuration.ConfigurationElementCollection\n- uid: System.Net.Configuration.BypassElementCollection.#ctor\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: BypassElementCollection()\n  nameWithType: BypassElementCollection.BypassElementCollection()\n  fullName: System.Net.Configuration.BypassElementCollection.BypassElementCollection()\n- uid: System.Net.Configuration.BypassElementCollection.Add(System.Net.Configuration.BypassElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Add(BypassElement)\n  nameWithType: BypassElementCollection.Add(BypassElement)\n  fullName: System.Net.Configuration.BypassElementCollection.Add(BypassElement)\n- uid: System.Net.Configuration.BypassElement\n  parent: System.Net.Configuration\n  isExternal: false\n  name: BypassElement\n  nameWithType: BypassElement\n  fullName: System.Net.Configuration.BypassElement\n- uid: System.Net.Configuration.BypassElementCollection.Clear\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: BypassElementCollection.Clear()\n  fullName: System.Net.Configuration.BypassElementCollection.Clear()\n- uid: System.Net.Configuration.BypassElementCollection.CreateNewElement\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: CreateNewElement()\n  nameWithType: BypassElementCollection.CreateNewElement()\n  fullName: System.Net.Configuration.BypassElementCollection.CreateNewElement()\n- uid: System.Configuration.ConfigurationElement\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationElement\n  nameWithType: ConfigurationElement\n  fullName: System.Configuration.ConfigurationElement\n- uid: System.Net.Configuration.BypassElementCollection.GetElementKey(System.Configuration.ConfigurationElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: GetElementKey(ConfigurationElement)\n  nameWithType: BypassElementCollection.GetElementKey(ConfigurationElement)\n  fullName: System.Net.Configuration.BypassElementCollection.GetElementKey(ConfigurationElement)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Configuration.BypassElementCollection.IndexOf(System.Net.Configuration.BypassElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: IndexOf(BypassElement)\n  nameWithType: BypassElementCollection.IndexOf(BypassElement)\n  fullName: System.Net.Configuration.BypassElementCollection.IndexOf(BypassElement)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Configuration.BypassElementCollection.Item(System.Int32)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: BypassElementCollection.Item(Int32)\n  fullName: System.Net.Configuration.BypassElementCollection.Item(Int32)\n- uid: System.Net.Configuration.BypassElementCollection.Item(System.String)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: BypassElementCollection.Item(String)\n  fullName: System.Net.Configuration.BypassElementCollection.Item(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.Configuration.BypassElementCollection.Remove(System.Net.Configuration.BypassElement)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Remove(BypassElement)\n  nameWithType: BypassElementCollection.Remove(BypassElement)\n  fullName: System.Net.Configuration.BypassElementCollection.Remove(BypassElement)\n- uid: System.Net.Configuration.BypassElementCollection.Remove(System.String)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: BypassElementCollection.Remove(String)\n  fullName: System.Net.Configuration.BypassElementCollection.Remove(String)\n- uid: System.Net.Configuration.BypassElementCollection.RemoveAt(System.Int32)\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: BypassElementCollection.RemoveAt(Int32)\n  fullName: System.Net.Configuration.BypassElementCollection.RemoveAt(Int32)\n- uid: System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: ThrowOnDuplicate\n  nameWithType: BypassElementCollection.ThrowOnDuplicate\n  fullName: System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Configuration.BypassElementCollection.#ctor*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: BypassElementCollection\n  nameWithType: BypassElementCollection.BypassElementCollection\n- uid: System.Net.Configuration.BypassElementCollection.Add*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Add\n  nameWithType: BypassElementCollection.Add\n- uid: System.Net.Configuration.BypassElementCollection.Clear*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Clear\n  nameWithType: BypassElementCollection.Clear\n- uid: System.Net.Configuration.BypassElementCollection.CreateNewElement*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: CreateNewElement\n  nameWithType: BypassElementCollection.CreateNewElement\n- uid: System.Net.Configuration.BypassElementCollection.GetElementKey*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: GetElementKey\n  nameWithType: BypassElementCollection.GetElementKey\n- uid: System.Net.Configuration.BypassElementCollection.IndexOf*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: BypassElementCollection.IndexOf\n- uid: System.Net.Configuration.BypassElementCollection.Item*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Item\n  nameWithType: BypassElementCollection.Item\n- uid: System.Net.Configuration.BypassElementCollection.Remove*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: Remove\n  nameWithType: BypassElementCollection.Remove\n- uid: System.Net.Configuration.BypassElementCollection.RemoveAt*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: BypassElementCollection.RemoveAt\n- uid: System.Net.Configuration.BypassElementCollection.ThrowOnDuplicate*\n  parent: System.Net.Configuration.BypassElementCollection\n  isExternal: false\n  name: ThrowOnDuplicate\n  nameWithType: BypassElementCollection.ThrowOnDuplicate\n"}