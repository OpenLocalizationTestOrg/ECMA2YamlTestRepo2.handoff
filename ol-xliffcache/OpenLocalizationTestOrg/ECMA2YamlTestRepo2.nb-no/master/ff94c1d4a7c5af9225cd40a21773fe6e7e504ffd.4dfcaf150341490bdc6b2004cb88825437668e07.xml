{"nodes":[{"pos":[360,414],"content":"Defines the basic functionality of an easing function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the basic functionality of an easing function.","pos":[0,54]}]},{"pos":[427,1159],"content":"This interface allows you to create your own easing functions by taking normalized time (a value from 0 through 1) and returning your desired value.       This interface represents a transformation of normalized time (progress). Animations use it to transform their progress. Classes that implement this interface can control the pace at which an animation is performed.       Derive from the <xref:System.Windows.Media.Animation.EasingFunctionBase> class to implement your own custom easing functions.      > [!NOTE] >  The WPF implementation of easing functions is compatible with the Silverlight implementation. If you have XAML that uses easing functions in one technology, it is usable without modification in the other.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This interface allows you to create your own easing functions by taking normalized time (a value from 0 through 1) and returning your desired value.","pos":[0,148]},{"content":"This interface represents a transformation of normalized time (progress).","pos":[155,228]},{"content":"Animations use it to transform their progress.","pos":[229,275]},{"content":"Classes that implement this interface can control the pace at which an animation is performed.","pos":[276,370]},{"content":"Derive from the &lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt; class to implement your own custom easing functions.","pos":[377,502],"source":"       Derive from the <xref:System.Windows.Media.Animation.EasingFunctionBase> class to implement your own custom easing functions."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The WPF implementation of easing functions is compatible with the Silverlight implementation.","pos":[508,614],"source":"      > [!NOTE] >  The WPF implementation of easing functions is compatible with the Silverlight implementation."},{"content":"If you have XAML that uses easing functions in one technology, it is usable without modification in the other.","pos":[615,725]}]},{"pos":[1677,1740],"content":"Transforms normalized time to control the pace of an animation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms normalized time to control the pace of an animation.","pos":[0,63]}]},{"pos":[1894,1938],"content":"Normalized time (progress) of the animation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Normalized time (progress) of the animation.","pos":[0,44]}]},{"pos":[1996,2021],"content":"The transformed progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed progress.","pos":[0,25]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.Animation.IEasingFunction\n  id: IEasingFunction\n  children:\n  - System.Windows.Media.Animation.IEasingFunction.Ease(System.Double)\n  langs:\n  - csharp\n  name: IEasingFunction\n  nameWithType: IEasingFunction\n  fullName: System.Windows.Media.Animation.IEasingFunction\n  type: Interface\n  summary: Defines the basic functionality of an easing function.\n  remarks: \"This interface allows you to create your own easing functions by taking normalized time (a value from 0 through 1) and returning your desired value.  \\n  \\n This interface represents a transformation of normalized time (progress). Animations use it to transform their progress. Classes that implement this interface can control the pace at which an animation is performed.  \\n  \\n Derive from the <xref:System.Windows.Media.Animation.EasingFunctionBase> class to implement your own custom easing functions.  \\n  \\n> [!NOTE]\\n>  The WPF implementation of easing functions is compatible with the Silverlight implementation. If you have XAML that uses easing functions in one technology, it is usable without modification in the other.\"\n  syntax:\n    content: public interface IEasingFunction\n  implements: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.IEasingFunction.Ease(System.Double)\n  id: Ease(System.Double)\n  parent: System.Windows.Media.Animation.IEasingFunction\n  langs:\n  - csharp\n  name: Ease(Double)\n  nameWithType: IEasingFunction.Ease(Double)\n  fullName: System.Windows.Media.Animation.IEasingFunction.Ease(Double)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Transforms normalized time to control the pace of an animation.\n  syntax:\n    content: public double Ease (double normalizedTime);\n    parameters:\n    - id: normalizedTime\n      type: System.Double\n      description: Normalized time (progress) of the animation.\n    return:\n      type: System.Double\n      description: The transformed progress.\n  overload: System.Windows.Media.Animation.IEasingFunction.Ease*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Media.Animation.IEasingFunction.Ease(System.Double)\n  parent: System.Windows.Media.Animation.IEasingFunction\n  isExternal: false\n  name: Ease(Double)\n  nameWithType: IEasingFunction.Ease(Double)\n  fullName: System.Windows.Media.Animation.IEasingFunction.Ease(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Media.Animation.IEasingFunction.Ease*\n  parent: System.Windows.Media.Animation.IEasingFunction\n  isExternal: false\n  name: Ease\n  nameWithType: IEasingFunction.Ease\n"}