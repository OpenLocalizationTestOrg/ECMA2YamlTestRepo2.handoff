{"nodes":[{"pos":[820,984],"content":"The exception that is thrown when a method in the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> namespace attempts to enable a privilege that it does not have.","needQuote":true,"needEscape":true,"source":"The exception that is thrown when a method in the <xref href=\"System.Security.AccessControl\"></xref> namespace attempts to enable a privilege that it does not have."},{"pos":[1675,1792],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class."},{"pos":[2507,2657],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified privilege.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified privilege."},{"pos":[2815,2849],"content":"The privilege that is not enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The privilege that is not enabled.","pos":[0,34]}]},{"pos":[3549,3699],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified exception.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified exception."},{"pos":[3874,3908],"content":"The privilege that is not enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The privilege that is not enabled.","pos":[0,34]}]},{"pos":[3973,4314],"content":"The exception that is the cause of the current exception. If the `innerException` parameter is not a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic), the current exception is raised in a <xref uid=\"langword_csharp_catch\" name=\"catch\" href=\"\"></xref> block that handles the inner exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <ph id=\"ph1\">`innerException`</ph> parameter is not a null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic), the current exception is raised in a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_catch\" name=\"catch\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> block that handles the inner exception.","pos":[58,341],"source":" If the `innerException` parameter is not a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic), the current exception is raised in a <xref uid=\"langword_csharp_catch\" name=\"catch\" href=\"\"></xref> block that handles the inner exception."}]},{"pos":[5165,5239],"content":"Sets the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter with information about the exception.","needQuote":true,"needEscape":true,"source":"Sets the <code>info</code> parameter with information about the exception."},{"pos":[5517,5660],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the serialized object data about the exception being thrown.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."},{"pos":[5756,5882],"content":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains contextual information about the source or destination.","pos":[0,126],"source":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination."}]},{"pos":[6447,6498],"content":"Gets the name of the privilege that is not enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the privilege that is not enabled.","pos":[0,51]}]},{"pos":[6616,6675],"content":"The name of the privilege that the method failed to enable.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the privilege that the method failed to enable.","pos":[0,59]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.PrivilegeNotHeldException\n  id: PrivilegeNotHeldException\n  children:\n  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  - System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException\n  type: Class\n  summary: The exception that is thrown when a method in the <xref href=\"System.Security.AccessControl\"></xref> namespace attempts to enable a privilege that it does not have.\n  syntax:\n    content: 'public sealed class PrivilegeNotHeldException : UnauthorizedAccessException'\n  inheritance:\n  - System.UnauthorizedAccessException\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException()\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException()\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class.\n  syntax:\n    content: public PrivilegeNotHeldException ();\n    parameters: []\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException(String)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified privilege.\n  syntax:\n    content: public PrivilegeNotHeldException (string privilege);\n    parameters:\n    - id: privilege\n      type: System.String\n      description: The privilege that is not enabled.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException(String,Exception)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified exception.\n  syntax:\n    content: public PrivilegeNotHeldException (string privilege, Exception inner);\n    parameters:\n    - id: privilege\n      type: System.String\n      description: The privilege that is not enabled.\n    - id: inner\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the `innerException` parameter is not a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic), the current exception is raised in a <xref uid=\"langword_csharp_catch\" name=\"catch\" href=\"\"></xref> block that handles the inner exception.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets the <code>info</code> parameter with information about the exception.\n  syntax:\n    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  id: PrivilegeName\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeName\n  nameWithType: PrivilegeNotHeldException.PrivilegeName\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the name of the privilege that is not enabled.\n  syntax:\n    content: public string PrivilegeName { get; }\n    return:\n      type: System.String\n      description: The name of the privilege that the method failed to enable.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.UnauthorizedAccessException\n  isExternal: false\n  name: System.UnauthorizedAccessException\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException()\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException()\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException()\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException(String)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException(String,Exception)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeName\n  nameWithType: PrivilegeNotHeldException.PrivilegeName\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData*\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: PrivilegeNotHeldException.GetObjectData\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName*\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeName\n  nameWithType: PrivilegeNotHeldException.PrivilegeName\n"}