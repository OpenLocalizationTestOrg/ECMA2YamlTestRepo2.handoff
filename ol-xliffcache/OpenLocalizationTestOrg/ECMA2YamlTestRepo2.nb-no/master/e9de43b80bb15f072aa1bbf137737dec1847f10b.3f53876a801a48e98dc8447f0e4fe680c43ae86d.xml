{"nodes":[{"pos":[1695,1761],"content":"Returns a collection of objects involved in concurrency conflicts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of objects involved in concurrency conflicts.","pos":[0,66]}]},{"pos":[3068,3110],"content":"Removes all conflicts from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all conflicts from the collection.","pos":[0,42]}]},{"pos":[3786,3851],"content":"Specifies whether a given conflict is a member of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether a given conflict is a member of the collection.","pos":[0,65]}]},{"pos":[4042,4065],"content":"The specified conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified conflict.","pos":[0,23]}]},{"pos":[4124,4193],"content":"Returns true if the specified conflict is a member of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns true if the specified conflict is a member of the collection.","pos":[0,69]}]},{"pos":[4852,4936],"content":"For a description of this member, see <xref:System.Collections.ICollection.CopyTo*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Collections.ICollection.CopyTo*&gt;.","pos":[0,84],"source":"For a description of this member, see <xref:System.Collections.ICollection.CopyTo*>."}]},{"pos":[4949,5217],"content":"Copies the elements of the collection to an array.       This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Copies the elements of the collection to an array.       This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.","pos":[0,266],"nodes":[{"content":"Copies the elements of the collection to an array.","pos":[0,50]},{"content":"This member is an explicit interface member implementation.","pos":[57,116]},{"content":"It can be used only when the &lt;xref:System.Data.Linq.ChangeConflictCollection&gt; instance is cast to an &lt;xref:System.Collections.ICollection&gt; interface.","pos":[117,266],"source":" It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface."}]}]},{"pos":[5429,5450],"content":"The array to copy to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array to copy to.","pos":[0,21]}]},{"pos":[5516,5559],"content":"The array index where the copy is to start.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array index where the copy is to start.","pos":[0,43]}]},{"pos":[6015,6064],"content":"Returns the number of conflicts in the collection","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of conflicts in the collection","pos":[0,49]}]},{"pos":[6170,6177],"content":"integer","needQuote":true,"needEscape":true,"nodes":[{"content":"integer","pos":[0,7]}]},{"pos":[6676,6718],"content":"Returns the enumerator for the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the enumerator for the collection.","pos":[0,42]}]},{"pos":[6985,7018],"content":"An enumerator for the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator for the collection.","pos":[0,33]}]},{"pos":[7525,7553],"content":"Returns an item in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an item in conflict.","pos":[0,28]}]},{"pos":[7723,7771],"content":"Index in the collection of the item in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Index in the collection of the item in conflict.","pos":[0,48]}]},{"pos":[7853,7949],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.ObjectChangeConflict\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the item in conflict.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.Linq.ObjectChangeConflict\"></xref> representing the item in conflict."},{"pos":[8550,8622],"content":"Specifies whether the specified conflict is removed from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether the specified conflict is removed from the collection.","pos":[0,72]}]},{"pos":[8811,8834],"content":"The conflict to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The conflict to remove.","pos":[0,23]}]},{"pos":[8893,9003],"content":"Returns true if the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.ObjectChangeConflict\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is removed from the collection.","needQuote":true,"needEscape":true,"source":"Returns true if the <xref href=\"System.Data.Linq.ObjectChangeConflict\"></xref> is removed from the collection."},{"pos":[9581,9654],"content":"Resolves all conflicts in the collection by using the specified strategy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves all conflicts in the collection by using the specified strategy.","pos":[0,73]}]},{"pos":[9829,9911],"content":"One of the options available in <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.RefreshMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One of the options available in <xref href=\"System.Data.Linq.RefreshMode\"></xref>."},{"pos":[10547,10620],"content":"Resolves all conflicts in the collection by using the specified strategy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves all conflicts in the collection by using the specified strategy.","pos":[0,73]}]},{"pos":[10820,10864],"content":"The strategy to use to resolve the conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The strategy to use to resolve the conflict.","pos":[0,44]}]},{"pos":[10940,11051],"content":"If true, automatically resolves conflicts that result from a modified object that is no longer in the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"If true, automatically resolves conflicts that result from a modified object that is no longer in the database.","pos":[0,111]}]},{"pos":[12119,12131],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13114,13126],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13929,13963],"content":"Copies the collection to an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the collection to an array.","pos":[0,34]}]},{"pos":[14113,14131],"content":"Name of the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the array.","pos":[0,18]}]},{"pos":[14192,14211],"content":"Index of the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Index of the array.","pos":[0,19]}]},{"pos":[14912,15004],"content":"For a description of this member, see <xref:System.Collections.ICollection.IsSynchronized*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Collections.ICollection.IsSynchronized*&gt;.","pos":[0,92],"source":"For a description of this member, see <xref:System.Collections.ICollection.IsSynchronized*>."}]},{"pos":[15016,15225],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.","pos":[0,209],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Linq.ChangeConflictCollection&gt; instance is cast to an &lt;xref:System.Collections.ICollection&gt; interface.","pos":[60,209],"source":" It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface."}]}]},{"pos":[15367,15494],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the collection is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized (thread safe)."},{"pos":[16173,16265],"content":"For a description of this member, see <xref:System.Collections.ICollection.IsSynchronized*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Collections.ICollection.IsSynchronized*&gt;.","pos":[0,92],"source":"For a description of this member, see <xref:System.Collections.ICollection.IsSynchronized*>."}]},{"pos":[16277,16486],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.","pos":[0,209],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Linq.ChangeConflictCollection&gt; instance is cast to an &lt;xref:System.Collections.ICollection&gt; interface.","pos":[60,209],"source":" It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface."}]}]},{"pos":[16623,16698],"content":"Returns an object that can be used to synchronize access to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an object that can be used to synchronize access to the collection.","pos":[0,75]}]},{"pos":[17400,17491],"content":"For a description of this member, see <xref:System.Collections.IEnumerable.GetEnumerator*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Collections.IEnumerable.GetEnumerator*&gt;.","pos":[0,91],"source":"For a description of this member, see <xref:System.Collections.IEnumerable.GetEnumerator*>."}]},{"pos":[17503,17712],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface.","pos":[0,209],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Linq.ChangeConflictCollection&gt; instance is cast to an &lt;xref:System.Collections.IEnumerable&gt; interface.","pos":[60,209],"source":" It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface."}]}]},{"pos":[17890,17939],"content":"An enumerator that iterates through a collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that iterates through a collection.","pos":[0,49]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.ChangeConflictCollection\n  id: ChangeConflictCollection\n  children:\n  - System.Data.Linq.ChangeConflictCollection.Clear\n  - System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)\n  - System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)\n  - System.Data.Linq.ChangeConflictCollection.Count\n  - System.Data.Linq.ChangeConflictCollection.GetEnumerator\n  - System.Data.Linq.ChangeConflictCollection.Item(System.Int32)\n  - System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)\n  - System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)\n  - System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)\n  - System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)\n  - System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly\n  - System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized\n  - System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot\n  - System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ChangeConflictCollection\n  nameWithType: ChangeConflictCollection\n  fullName: System.Data.Linq.ChangeConflictCollection\n  type: Class\n  summary: Returns a collection of objects involved in concurrency conflicts.\n  remarks: ''\n  example:\n  - \"In the following example that retrieves information about objects in conflict, `db.ChangeConflicts` represents the collection of those objects.  \\n  \\n [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]\\n [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]\"\n  syntax:\n    content: 'public sealed class ChangeConflictCollection : System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>, System.Collections.Generic.IEnumerable<System.Data.Linq.ObjectChangeConflict>, System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>\n  - System.Collections.Generic.IEnumerable<System.Data.Linq.ObjectChangeConflict>\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.Clear\n  id: Clear\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ChangeConflictCollection.Clear()\n  fullName: System.Data.Linq.ChangeConflictCollection.Clear()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Removes all conflicts from the collection.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Data.Linq.ChangeConflictCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)\n  id: Contains(System.Data.Linq.ObjectChangeConflict)\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: Contains(ObjectChangeConflict)\n  nameWithType: ChangeConflictCollection.Contains(ObjectChangeConflict)\n  fullName: System.Data.Linq.ChangeConflictCollection.Contains(ObjectChangeConflict)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Specifies whether a given conflict is a member of the collection.\n  syntax:\n    content: public bool Contains (System.Data.Linq.ObjectChangeConflict item);\n    parameters:\n    - id: item\n      type: System.Data.Linq.ObjectChangeConflict\n      description: The specified conflict.\n    return:\n      type: System.Boolean\n      description: Returns true if the specified conflict is a member of the collection.\n  overload: System.Data.Linq.ChangeConflictCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)\n  id: CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: CopyTo(ObjectChangeConflict[],Int32)\n  nameWithType: ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)\n  fullName: System.Data.Linq.ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: For a description of this member, see <xref:System.Collections.ICollection.CopyTo*>.\n  remarks: \"Copies the elements of the collection to an array.  \\n  \\n This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.\"\n  syntax:\n    content: public void CopyTo (System.Data.Linq.ObjectChangeConflict[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Data.Linq.ObjectChangeConflict[]\n      description: The array to copy to.\n    - id: arrayIndex\n      type: System.Int32\n      description: The array index where the copy is to start.\n  overload: System.Data.Linq.ChangeConflictCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.Count\n  id: Count\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ChangeConflictCollection.Count\n  fullName: System.Data.Linq.ChangeConflictCollection.Count\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns the number of conflicts in the collection\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: integer\n  overload: System.Data.Linq.ChangeConflictCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ChangeConflictCollection.GetEnumerator()\n  fullName: System.Data.Linq.ChangeConflictCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns the enumerator for the collection.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Data.Linq.ObjectChangeConflict> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Data.Linq.ObjectChangeConflict}\n      description: An enumerator for the collection.\n  overload: System.Data.Linq.ChangeConflictCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ChangeConflictCollection.Item(Int32)\n  fullName: System.Data.Linq.ChangeConflictCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an item in conflict.\n  syntax:\n    content: public System.Data.Linq.ObjectChangeConflict this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Index in the collection of the item in conflict.\n    return:\n      type: System.Data.Linq.ObjectChangeConflict\n      description: An <xref href=\"System.Data.Linq.ObjectChangeConflict\"></xref> representing the item in conflict.\n  overload: System.Data.Linq.ChangeConflictCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)\n  id: Remove(System.Data.Linq.ObjectChangeConflict)\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: Remove(ObjectChangeConflict)\n  nameWithType: ChangeConflictCollection.Remove(ObjectChangeConflict)\n  fullName: System.Data.Linq.ChangeConflictCollection.Remove(ObjectChangeConflict)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Specifies whether the specified conflict is removed from the collection.\n  syntax:\n    content: public bool Remove (System.Data.Linq.ObjectChangeConflict item);\n    parameters:\n    - id: item\n      type: System.Data.Linq.ObjectChangeConflict\n      description: The conflict to remove.\n    return:\n      type: System.Boolean\n      description: Returns true if the <xref href=\"System.Data.Linq.ObjectChangeConflict\"></xref> is removed from the collection.\n  overload: System.Data.Linq.ChangeConflictCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)\n  id: ResolveAll(System.Data.Linq.RefreshMode)\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: ResolveAll(RefreshMode)\n  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode)\n  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Resolves all conflicts in the collection by using the specified strategy.\n  syntax:\n    content: public void ResolveAll (System.Data.Linq.RefreshMode mode);\n    parameters:\n    - id: mode\n      type: System.Data.Linq.RefreshMode\n      description: One of the options available in <xref href=\"System.Data.Linq.RefreshMode\"></xref>.\n  overload: System.Data.Linq.ChangeConflictCollection.ResolveAll*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)\n  id: ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: ResolveAll(RefreshMode,Boolean)\n  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)\n  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Resolves all conflicts in the collection by using the specified strategy.\n  syntax:\n    content: public void ResolveAll (System.Data.Linq.RefreshMode mode, bool autoResolveDeletes);\n    parameters:\n    - id: mode\n      type: System.Data.Linq.RefreshMode\n      description: The strategy to use to resolve the conflict.\n    - id: autoResolveDeletes\n      type: System.Boolean\n      description: If true, automatically resolves conflicts that result from a modified object that is no longer in the database.\n  overload: System.Data.Linq.ChangeConflictCollection.ResolveAll*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)\n  id: System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)\n  isEii: true\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(ObjectChangeConflict)\n  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: void ICollection<ObjectChangeConflict>.Add (System.Data.Linq.ObjectChangeConflict item);\n    parameters:\n    - id: item\n      type: System.Data.Linq.ObjectChangeConflict\n      description: To be added.\n  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly\n  isEii: true\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Copies the collection to an array.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Name of the array.\n    - id: index\n      type: System.Int32\n      description: Index of the array.\n  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: For a description of this member, see <xref:System.Collections.ICollection.IsSynchronized*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized (thread safe).\n  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: For a description of this member, see <xref:System.Collections.ICollection.IsSynchronized*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.ICollection> interface.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Returns an object that can be used to synchronize access to the collection.\n  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Data.Linq.ChangeConflictCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: For a description of this member, see <xref:System.Collections.IEnumerable.GetEnumerator*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.ChangeConflictCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that iterates through a collection.\n  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.ChangeConflictCollection.Clear\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: ChangeConflictCollection.Clear()\n  fullName: System.Data.Linq.ChangeConflictCollection.Clear()\n- uid: System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Contains(ObjectChangeConflict)\n  nameWithType: ChangeConflictCollection.Contains(ObjectChangeConflict)\n  fullName: System.Data.Linq.ChangeConflictCollection.Contains(ObjectChangeConflict)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Linq.ObjectChangeConflict\n  parent: System.Data.Linq\n  isExternal: false\n  name: ObjectChangeConflict\n  nameWithType: ObjectChangeConflict\n  fullName: System.Data.Linq.ObjectChangeConflict\n- uid: System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: CopyTo(ObjectChangeConflict[],Int32)\n  nameWithType: ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)\n  fullName: System.Data.Linq.ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)\n- uid: System.Data.Linq.ObjectChangeConflict[]\n  parent: System.Data.Linq\n  isExternal: false\n  name: ObjectChangeConflict\n  nameWithType: ObjectChangeConflict\n  fullName: System.Data.Linq.ObjectChangeConflict[]\n  spec.csharp:\n  - uid: System.Data.Linq.ObjectChangeConflict\n    name: ObjectChangeConflict\n    nameWithType: ObjectChangeConflict\n    fullName: ObjectChangeConflict[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Linq.ChangeConflictCollection.Count\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Count\n  nameWithType: ChangeConflictCollection.Count\n  fullName: System.Data.Linq.ChangeConflictCollection.Count\n- uid: System.Data.Linq.ChangeConflictCollection.GetEnumerator\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ChangeConflictCollection.GetEnumerator()\n  fullName: System.Data.Linq.ChangeConflictCollection.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Data.Linq.ObjectChangeConflict}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<ObjectChangeConflict>\n  nameWithType: IEnumerator<ObjectChangeConflict>\n  fullName: System.Collections.Generic.IEnumerator<System.Data.Linq.ObjectChangeConflict>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Data.Linq.ObjectChangeConflict>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Linq.ObjectChangeConflict\n    name: ObjectChangeConflict\n    nameWithType: ObjectChangeConflict\n    fullName: ObjectChangeConflict\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.ChangeConflictCollection.Item(System.Int32)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ChangeConflictCollection.Item(Int32)\n  fullName: System.Data.Linq.ChangeConflictCollection.Item(Int32)\n- uid: System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Remove(ObjectChangeConflict)\n  nameWithType: ChangeConflictCollection.Remove(ObjectChangeConflict)\n  fullName: System.Data.Linq.ChangeConflictCollection.Remove(ObjectChangeConflict)\n- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: ResolveAll(RefreshMode)\n  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode)\n  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode)\n- uid: System.Data.Linq.RefreshMode\n  parent: System.Data.Linq\n  isExternal: false\n  name: RefreshMode\n  nameWithType: RefreshMode\n  fullName: System.Data.Linq.RefreshMode\n- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: ResolveAll(RefreshMode,Boolean)\n  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)\n  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(ObjectChangeConflict)\n  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Data.Linq.ChangeConflictCollection.Clear*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Clear\n  nameWithType: ChangeConflictCollection.Clear\n- uid: System.Data.Linq.ChangeConflictCollection.Contains*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Contains\n  nameWithType: ChangeConflictCollection.Contains\n- uid: System.Data.Linq.ChangeConflictCollection.CopyTo*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: ChangeConflictCollection.CopyTo\n- uid: System.Data.Linq.ChangeConflictCollection.Count*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Count\n  nameWithType: ChangeConflictCollection.Count\n- uid: System.Data.Linq.ChangeConflictCollection.GetEnumerator*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ChangeConflictCollection.GetEnumerator\n- uid: System.Data.Linq.ChangeConflictCollection.Item*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Item\n  nameWithType: ChangeConflictCollection.Item\n- uid: System.Data.Linq.ChangeConflictCollection.Remove*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: Remove\n  nameWithType: ChangeConflictCollection.Remove\n- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: ResolveAll\n  nameWithType: ChangeConflictCollection.ResolveAll\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#Add*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.Add\n  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.Add\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#IsReadOnly*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly\n  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.CopyTo\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ChangeConflictCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Data.Linq.ChangeConflictCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator\n"}