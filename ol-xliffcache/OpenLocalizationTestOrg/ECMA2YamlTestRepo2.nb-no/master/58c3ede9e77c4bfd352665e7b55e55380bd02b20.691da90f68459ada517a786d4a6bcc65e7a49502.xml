{"nodes":[{"pos":[1498,1566],"content":"Contains methods to get and update information about a manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains methods to get and update information about a manipulation.","pos":[0,68]}]},{"pos":[1579,2354],"content":"A manipulation occurs when touch is interpreted as a physical action that is applied to an object. In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], manipulation events interpret input as a translation, expansion, or rotation manipulation. You usually interact with manipulations through the manipulation events that are defined on the <xref:System.Windows.UIElement>. However, the Manipulation class defines static methods that you can use to interact with manipulations.       For more information about manipulations, see [Input Overview](~/add/includes/ajax-current-ext-md.md). For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A manipulation occurs when touch is interpreted as a physical action that is applied to an object.","pos":[0,98]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, manipulation events interpret input as a translation, expansion, or rotation manipulation.","pos":[99,269],"source":" In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], manipulation events interpret input as a translation, expansion, or rotation manipulation."},{"content":"You usually interact with manipulations through the manipulation events that are defined on the &lt;xref:System.Windows.UIElement&gt;.","pos":[270,398],"source":" You usually interact with manipulations through the manipulation events that are defined on the <xref:System.Windows.UIElement>."},{"content":"However, the Manipulation class defines static methods that you can use to interact with manipulations.","pos":[399,502]},{"content":"For more information about manipulations, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[509,611],"source":"       For more information about manipulations, see [Input Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[612,773],"source":" For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[3064,3166],"content":"Associates a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with the specified element.","needQuote":true,"needEscape":true,"source":"Associates a <xref href=\"System.Windows.Input.IManipulator\"></xref> object with the specified element."},{"pos":[3178,3332],"content":"If `element` already has a manipulation associated with it, `manipulator` is added to the existing manipulation. Otherwise, a new manipulation is created.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`element`</ph> already has a manipulation associated with it, <ph id=\"ph2\">`manipulator`</ph> is added to the existing manipulation.","pos":[0,112],"source":"If `element` already has a manipulation associated with it, `manipulator` is added to the existing manipulation."},{"content":"Otherwise, a new manipulation is created.","pos":[113,154]}]},{"pos":[3563,3609],"content":"The element to associate the manipulator with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to associate the manipulator with.","pos":[0,46]}]},{"pos":[3697,3791],"content":"The object that provides the position of the input that creates or is added to a manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that provides the position of the input that creates or is added to a manipulation.","pos":[0,94]}]},{"pos":[3971,4179],"content":"<code>element</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>manipulator</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,85],"source":"<code>element</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;manipulator&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[92,192],"source":"       -or-       <code>manipulator</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[4291,4436],"content":"The &lt;xref:System.Windows.UIElement.IsManipulationEnabled*&gt; property on element is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.UIElement.IsManipulationEnabled*> property on element is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4939,5095],"content":"Completes the active manipulation on the specified element. When called, manipulation input is no longer tracked and inertia on the specified element stops.","needQuote":true,"needEscape":true,"nodes":[{"content":"Completes the active manipulation on the specified element. When called, manipulation input is no longer tracked and inertia on the specified element stops.","pos":[0,156],"nodes":[{"content":"Completes the active manipulation on the specified element.","pos":[0,59]},{"content":"When called, manipulation input is no longer tracked and inertia on the specified element stops.","pos":[60,156]}]}]},{"pos":[5107,5229],"content":"When the CompleteManipulation method is called, the <xref:System.Windows.UIElement.ManipulationCompleted> event is raised.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the CompleteManipulation method is called, the &lt;xref:System.Windows.UIElement.ManipulationCompleted&gt; event is raised.","pos":[0,122],"source":"When the CompleteManipulation method is called, the <xref:System.Windows.UIElement.ManipulationCompleted> event is raised."}]},{"pos":[5419,5465],"content":"The element on which to complete manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element on which to complete manipulation.","pos":[0,46]}]},{"pos":[6073,6142],"content":"Gets the container that defines the coordinates for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the container that defines the coordinates for the manipulation.","pos":[0,69]}]},{"pos":[6360,6413],"content":"The element on which there is an active manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element on which there is an active manipulation.","pos":[0,53]}]},{"pos":[6486,6534],"content":"The container that defines the coordinate space.","needQuote":true,"needEscape":true,"nodes":[{"content":"The container that defines the coordinate space.","pos":[0,48]}]},{"pos":[7121,7216],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ManipulationModes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified element.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.Input.ManipulationModes\"></xref> for the specified element."},{"pos":[7439,7490],"content":"The element for which to get the manipulation mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element for which to get the manipulation mode.","pos":[0,51]}]},{"pos":[7573,7603],"content":"One of the enumeration values.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values.","pos":[0,30]}]},{"pos":[8190,8274],"content":"Returns an object that describes how a rotation occurs with one point of user input.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an object that describes how a rotation occurs with one point of user input.","pos":[0,84]}]},{"pos":[8498,8543],"content":"The element on which there is a manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element on which there is a manipulation.","pos":[0,45]}]},{"pos":[8626,8702],"content":"An object that describes how a rotation occurs with one point of user input.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that describes how a rotation occurs with one point of user input.","pos":[0,76]}]},{"pos":[9290,9382],"content":"Gets a value that indicates whether a manipulation is associated with the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether a manipulation is associated with the specified element.","pos":[0,92]}]},{"pos":[9572,9593],"content":"The element to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to check.","pos":[0,21]}]},{"pos":[9652,9847],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a manipulation is associated with the specified element; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a manipulation is associated with the specified element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10527,10651],"content":"Removes the association between the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and the element.","needQuote":true,"needEscape":true,"source":"Removes the association between the specified <xref href=\"System.Windows.Input.IManipulator\"></xref> object and the element."},{"pos":[10885,10939],"content":"The element to remove the associated manipulator from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to remove the associated manipulator from.","pos":[0,54]}]},{"pos":[11027,11078],"content":"The object that provides the position of the input.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that provides the position of the input.","pos":[0,51]}]},{"pos":[11783,11875],"content":"Sets the element that defines the coordinates for the manipulation of the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the element that defines the coordinates for the manipulation of the specified element.","pos":[0,92]}]},{"pos":[12109,12163],"content":"The element with which the manipulation is associated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element with which the manipulation is associated.","pos":[0,54]}]},{"pos":[12244,12292],"content":"The container that defines the coordinate space.","needQuote":true,"needEscape":true,"nodes":[{"content":"The container that defines the coordinate space.","pos":[0,48]}]},{"pos":[13011,13067],"content":"Sets the mode of manipulation for the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the mode of manipulation for the specified element.","pos":[0,56]}]},{"pos":[13301,13351],"content":"The element on which to set the manipulation mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element on which to set the manipulation mode.","pos":[0,50]}]},{"pos":[13437,13463],"content":"The new manipulation mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new manipulation mode.","pos":[0,26]}]},{"pos":[14265,14326],"content":"Adds parameters to the manipulation of the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds parameters to the manipulation of the specified element.","pos":[0,61]}]},{"pos":[14591,14660],"content":"The element that has the manipulation that the parameter is added to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element that has the manipulation that the parameter is added to.","pos":[0,69]}]},{"pos":[14772,14793],"content":"The parameter to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter to add.","pos":[0,21]}]},{"pos":[15517,15590],"content":"Sets the pivot of the single-point manipulation of the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the pivot of the single-point manipulation of the specified element.","pos":[0,73]}]},{"pos":[15826,15870],"content":"The element that has an active manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element that has an active manipulation.","pos":[0,44]}]},{"pos":[15957,15992],"content":"An object that describes the pivot.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that describes the pivot.","pos":[0,35]}]},{"pos":[16540,16607],"content":"Stops the manipulation and begins inertia on the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops the manipulation and begins inertia on the specified element.","pos":[0,67]}]},{"pos":[16789,16827],"content":"The element on which to begin inertia.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element on which to begin inertia.","pos":[0,38]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.Manipulation\n  id: Manipulation\n  children:\n  - System.Windows.Input.Manipulation.AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  - System.Windows.Input.Manipulation.CompleteManipulation(System.Windows.UIElement)\n  - System.Windows.Input.Manipulation.GetManipulationContainer(System.Windows.UIElement)\n  - System.Windows.Input.Manipulation.GetManipulationMode(System.Windows.UIElement)\n  - System.Windows.Input.Manipulation.GetManipulationPivot(System.Windows.UIElement)\n  - System.Windows.Input.Manipulation.IsManipulationActive(System.Windows.UIElement)\n  - System.Windows.Input.Manipulation.RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  - System.Windows.Input.Manipulation.SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)\n  - System.Windows.Input.Manipulation.SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)\n  - System.Windows.Input.Manipulation.SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)\n  - System.Windows.Input.Manipulation.SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)\n  - System.Windows.Input.Manipulation.StartInertia(System.Windows.UIElement)\n  langs:\n  - csharp\n  name: Manipulation\n  nameWithType: Manipulation\n  fullName: System.Windows.Input.Manipulation\n  type: Class\n  summary: Contains methods to get and update information about a manipulation.\n  remarks: \"A manipulation occurs when touch is interpreted as a physical action that is applied to an object. In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], manipulation events interpret input as a translation, expansion, or rotation manipulation. You usually interact with manipulations through the manipulation events that are defined on the <xref:System.Windows.UIElement>. However, the Manipulation class defines static methods that you can use to interact with manipulations.  \\n  \\n For more information about manipulations, see [Input Overview](~/add/includes/ajax-current-ext-md.md). For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static class Manipulation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  id: AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: AddManipulator(UIElement,IManipulator)\n  nameWithType: Manipulation.AddManipulator(UIElement,IManipulator)\n  fullName: System.Windows.Input.Manipulation.AddManipulator(UIElement,IManipulator)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Associates a <xref href=\"System.Windows.Input.IManipulator\"></xref> object with the specified element.\n  remarks: If `element` already has a manipulation associated with it, `manipulator` is added to the existing manipulation. Otherwise, a new manipulation is created.\n  syntax:\n    content: public static void AddManipulator (System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to associate the manipulator with.\n    - id: manipulator\n      type: System.Windows.Input.IManipulator\n      description: The object that provides the position of the input that creates or is added to a manipulation.\n  overload: System.Windows.Input.Manipulation.AddManipulator*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>element</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>manipulator</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref:System.Windows.UIElement.IsManipulationEnabled*> property on element is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.CompleteManipulation(System.Windows.UIElement)\n  id: CompleteManipulation(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: CompleteManipulation(UIElement)\n  nameWithType: Manipulation.CompleteManipulation(UIElement)\n  fullName: System.Windows.Input.Manipulation.CompleteManipulation(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Completes the active manipulation on the specified element. When called, manipulation input is no longer tracked and inertia on the specified element stops.\n  remarks: When the CompleteManipulation method is called, the <xref:System.Windows.UIElement.ManipulationCompleted> event is raised.\n  syntax:\n    content: public static void CompleteManipulation (System.Windows.UIElement element);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element on which to complete manipulation.\n  overload: System.Windows.Input.Manipulation.CompleteManipulation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.GetManipulationContainer(System.Windows.UIElement)\n  id: GetManipulationContainer(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: GetManipulationContainer(UIElement)\n  nameWithType: Manipulation.GetManipulationContainer(UIElement)\n  fullName: System.Windows.Input.Manipulation.GetManipulationContainer(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the container that defines the coordinates for the manipulation.\n  syntax:\n    content: public static System.Windows.IInputElement GetManipulationContainer (System.Windows.UIElement element);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element on which there is an active manipulation.\n    return:\n      type: System.Windows.IInputElement\n      description: The container that defines the coordinate space.\n  overload: System.Windows.Input.Manipulation.GetManipulationContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.GetManipulationMode(System.Windows.UIElement)\n  id: GetManipulationMode(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: GetManipulationMode(UIElement)\n  nameWithType: Manipulation.GetManipulationMode(UIElement)\n  fullName: System.Windows.Input.Manipulation.GetManipulationMode(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.Input.ManipulationModes\"></xref> for the specified element.\n  syntax:\n    content: public static System.Windows.Input.ManipulationModes GetManipulationMode (System.Windows.UIElement element);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element for which to get the manipulation mode.\n    return:\n      type: System.Windows.Input.ManipulationModes\n      description: One of the enumeration values.\n  overload: System.Windows.Input.Manipulation.GetManipulationMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.GetManipulationPivot(System.Windows.UIElement)\n  id: GetManipulationPivot(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: GetManipulationPivot(UIElement)\n  nameWithType: Manipulation.GetManipulationPivot(UIElement)\n  fullName: System.Windows.Input.Manipulation.GetManipulationPivot(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns an object that describes how a rotation occurs with one point of user input.\n  syntax:\n    content: public static System.Windows.Input.ManipulationPivot GetManipulationPivot (System.Windows.UIElement element);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element on which there is a manipulation.\n    return:\n      type: System.Windows.Input.ManipulationPivot\n      description: An object that describes how a rotation occurs with one point of user input.\n  overload: System.Windows.Input.Manipulation.GetManipulationPivot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.IsManipulationActive(System.Windows.UIElement)\n  id: IsManipulationActive(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: IsManipulationActive(UIElement)\n  nameWithType: Manipulation.IsManipulationActive(UIElement)\n  fullName: System.Windows.Input.Manipulation.IsManipulationActive(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether a manipulation is associated with the specified element.\n  syntax:\n    content: public static bool IsManipulationActive (System.Windows.UIElement element);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a manipulation is associated with the specified element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.Manipulation.IsManipulationActive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  id: RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: RemoveManipulator(UIElement,IManipulator)\n  nameWithType: Manipulation.RemoveManipulator(UIElement,IManipulator)\n  fullName: System.Windows.Input.Manipulation.RemoveManipulator(UIElement,IManipulator)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Removes the association between the specified <xref href=\"System.Windows.Input.IManipulator\"></xref> object and the element.\n  syntax:\n    content: public static void RemoveManipulator (System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to remove the associated manipulator from.\n    - id: manipulator\n      type: System.Windows.Input.IManipulator\n      description: The object that provides the position of the input.\n  overload: System.Windows.Input.Manipulation.RemoveManipulator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)\n  id: SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: SetManipulationContainer(UIElement,IInputElement)\n  nameWithType: Manipulation.SetManipulationContainer(UIElement,IInputElement)\n  fullName: System.Windows.Input.Manipulation.SetManipulationContainer(UIElement,IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Sets the element that defines the coordinates for the manipulation of the specified element.\n  syntax:\n    content: public static void SetManipulationContainer (System.Windows.UIElement element, System.Windows.IInputElement container);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element with which the manipulation is associated.\n    - id: container\n      type: System.Windows.IInputElement\n      description: The container that defines the coordinate space.\n  overload: System.Windows.Input.Manipulation.SetManipulationContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)\n  id: SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: SetManipulationMode(UIElement,ManipulationModes)\n  nameWithType: Manipulation.SetManipulationMode(UIElement,ManipulationModes)\n  fullName: System.Windows.Input.Manipulation.SetManipulationMode(UIElement,ManipulationModes)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Sets the mode of manipulation for the specified element.\n  syntax:\n    content: public static void SetManipulationMode (System.Windows.UIElement element, System.Windows.Input.ManipulationModes mode);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element on which to set the manipulation mode.\n    - id: mode\n      type: System.Windows.Input.ManipulationModes\n      description: The new manipulation mode.\n  overload: System.Windows.Input.Manipulation.SetManipulationMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)\n  id: SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: SetManipulationParameter(UIElement,ManipulationParameters2D)\n  nameWithType: Manipulation.SetManipulationParameter(UIElement,ManipulationParameters2D)\n  fullName: System.Windows.Input.Manipulation.SetManipulationParameter(UIElement,ManipulationParameters2D)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Adds parameters to the manipulation of the specified element.\n  syntax:\n    content: public static void SetManipulationParameter (System.Windows.UIElement element, System.Windows.Input.Manipulations.ManipulationParameters2D parameter);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element that has the manipulation that the parameter is added to.\n    - id: parameter\n      type: System.Windows.Input.Manipulations.ManipulationParameters2D\n      description: The parameter to add.\n  overload: System.Windows.Input.Manipulation.SetManipulationParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)\n  id: SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: SetManipulationPivot(UIElement,ManipulationPivot)\n  nameWithType: Manipulation.SetManipulationPivot(UIElement,ManipulationPivot)\n  fullName: System.Windows.Input.Manipulation.SetManipulationPivot(UIElement,ManipulationPivot)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Sets the pivot of the single-point manipulation of the specified element.\n  syntax:\n    content: public static void SetManipulationPivot (System.Windows.UIElement element, System.Windows.Input.ManipulationPivot pivot);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element that has an active manipulation.\n    - id: pivot\n      type: System.Windows.Input.ManipulationPivot\n      description: An object that describes the pivot.\n  overload: System.Windows.Input.Manipulation.SetManipulationPivot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulation.StartInertia(System.Windows.UIElement)\n  id: StartInertia(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  langs:\n  - csharp\n  name: StartInertia(UIElement)\n  nameWithType: Manipulation.StartInertia(UIElement)\n  fullName: System.Windows.Input.Manipulation.StartInertia(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Stops the manipulation and begins inertia on the specified element.\n  syntax:\n    content: public static void StartInertia (System.Windows.UIElement element);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element on which to begin inertia.\n  overload: System.Windows.Input.Manipulation.StartInertia*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Input.Manipulation.AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: AddManipulator(UIElement,IManipulator)\n  nameWithType: Manipulation.AddManipulator(UIElement,IManipulator)\n  fullName: System.Windows.Input.Manipulation.AddManipulator(UIElement,IManipulator)\n- uid: System.Windows.UIElement\n  parent: System.Windows\n  isExternal: false\n  name: UIElement\n  nameWithType: UIElement\n  fullName: System.Windows.UIElement\n- uid: System.Windows.Input.IManipulator\n  parent: System.Windows.Input\n  isExternal: false\n  name: IManipulator\n  nameWithType: IManipulator\n  fullName: System.Windows.Input.IManipulator\n- uid: System.Windows.Input.Manipulation.CompleteManipulation(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: CompleteManipulation(UIElement)\n  nameWithType: Manipulation.CompleteManipulation(UIElement)\n  fullName: System.Windows.Input.Manipulation.CompleteManipulation(UIElement)\n- uid: System.Windows.Input.Manipulation.GetManipulationContainer(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: GetManipulationContainer(UIElement)\n  nameWithType: Manipulation.GetManipulationContainer(UIElement)\n  fullName: System.Windows.Input.Manipulation.GetManipulationContainer(UIElement)\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.Manipulation.GetManipulationMode(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: GetManipulationMode(UIElement)\n  nameWithType: Manipulation.GetManipulationMode(UIElement)\n  fullName: System.Windows.Input.Manipulation.GetManipulationMode(UIElement)\n- uid: System.Windows.Input.ManipulationModes\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationModes\n  nameWithType: ManipulationModes\n  fullName: System.Windows.Input.ManipulationModes\n- uid: System.Windows.Input.Manipulation.GetManipulationPivot(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: GetManipulationPivot(UIElement)\n  nameWithType: Manipulation.GetManipulationPivot(UIElement)\n  fullName: System.Windows.Input.Manipulation.GetManipulationPivot(UIElement)\n- uid: System.Windows.Input.ManipulationPivot\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationPivot\n  nameWithType: ManipulationPivot\n  fullName: System.Windows.Input.ManipulationPivot\n- uid: System.Windows.Input.Manipulation.IsManipulationActive(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: IsManipulationActive(UIElement)\n  nameWithType: Manipulation.IsManipulationActive(UIElement)\n  fullName: System.Windows.Input.Manipulation.IsManipulationActive(UIElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.Manipulation.RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: RemoveManipulator(UIElement,IManipulator)\n  nameWithType: Manipulation.RemoveManipulator(UIElement,IManipulator)\n  fullName: System.Windows.Input.Manipulation.RemoveManipulator(UIElement,IManipulator)\n- uid: System.Windows.Input.Manipulation.SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationContainer(UIElement,IInputElement)\n  nameWithType: Manipulation.SetManipulationContainer(UIElement,IInputElement)\n  fullName: System.Windows.Input.Manipulation.SetManipulationContainer(UIElement,IInputElement)\n- uid: System.Windows.Input.Manipulation.SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationMode(UIElement,ManipulationModes)\n  nameWithType: Manipulation.SetManipulationMode(UIElement,ManipulationModes)\n  fullName: System.Windows.Input.Manipulation.SetManipulationMode(UIElement,ManipulationModes)\n- uid: System.Windows.Input.Manipulation.SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationParameter(UIElement,ManipulationParameters2D)\n  nameWithType: Manipulation.SetManipulationParameter(UIElement,ManipulationParameters2D)\n  fullName: System.Windows.Input.Manipulation.SetManipulationParameter(UIElement,ManipulationParameters2D)\n- uid: System.Windows.Input.Manipulations.ManipulationParameters2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: ManipulationParameters2D\n  nameWithType: ManipulationParameters2D\n  fullName: System.Windows.Input.Manipulations.ManipulationParameters2D\n- uid: System.Windows.Input.Manipulation.SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationPivot(UIElement,ManipulationPivot)\n  nameWithType: Manipulation.SetManipulationPivot(UIElement,ManipulationPivot)\n  fullName: System.Windows.Input.Manipulation.SetManipulationPivot(UIElement,ManipulationPivot)\n- uid: System.Windows.Input.Manipulation.StartInertia(System.Windows.UIElement)\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: StartInertia(UIElement)\n  nameWithType: Manipulation.StartInertia(UIElement)\n  fullName: System.Windows.Input.Manipulation.StartInertia(UIElement)\n- uid: System.Windows.Input.Manipulation.AddManipulator*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: AddManipulator\n  nameWithType: Manipulation.AddManipulator\n- uid: System.Windows.Input.Manipulation.CompleteManipulation*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: CompleteManipulation\n  nameWithType: Manipulation.CompleteManipulation\n- uid: System.Windows.Input.Manipulation.GetManipulationContainer*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: GetManipulationContainer\n  nameWithType: Manipulation.GetManipulationContainer\n- uid: System.Windows.Input.Manipulation.GetManipulationMode*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: GetManipulationMode\n  nameWithType: Manipulation.GetManipulationMode\n- uid: System.Windows.Input.Manipulation.GetManipulationPivot*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: GetManipulationPivot\n  nameWithType: Manipulation.GetManipulationPivot\n- uid: System.Windows.Input.Manipulation.IsManipulationActive*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: IsManipulationActive\n  nameWithType: Manipulation.IsManipulationActive\n- uid: System.Windows.Input.Manipulation.RemoveManipulator*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: RemoveManipulator\n  nameWithType: Manipulation.RemoveManipulator\n- uid: System.Windows.Input.Manipulation.SetManipulationContainer*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationContainer\n  nameWithType: Manipulation.SetManipulationContainer\n- uid: System.Windows.Input.Manipulation.SetManipulationMode*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationMode\n  nameWithType: Manipulation.SetManipulationMode\n- uid: System.Windows.Input.Manipulation.SetManipulationParameter*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationParameter\n  nameWithType: Manipulation.SetManipulationParameter\n- uid: System.Windows.Input.Manipulation.SetManipulationPivot*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: SetManipulationPivot\n  nameWithType: Manipulation.SetManipulationPivot\n- uid: System.Windows.Input.Manipulation.StartInertia*\n  parent: System.Windows.Input.Manipulation\n  isExternal: false\n  name: StartInertia\n  nameWithType: Manipulation.StartInertia\n"}