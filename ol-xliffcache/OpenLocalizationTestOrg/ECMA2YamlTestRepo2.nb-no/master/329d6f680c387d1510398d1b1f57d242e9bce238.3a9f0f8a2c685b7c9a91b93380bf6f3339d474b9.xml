{"nodes":[{"pos":[1086,1251],"content":"Represents the configuration element that is used when the client must expose an endpoint for the service to send messages over HTTP. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the configuration element that is used when the client must expose an endpoint for the service to send messages over HTTP. This class cannot be inherited.","pos":[0,165],"nodes":[{"content":"Represents the configuration element that is used when the client must expose an endpoint for the service to send messages over HTTP.","pos":[0,133]},{"content":"This class cannot be inherited.","pos":[134,165]}]}]},{"pos":[1264,1827],"content":"This configuration element adds two-way messaging to a custom binding. It is used with transports that do not allow duplex communications natively, for example, HTTP. TCP, by contrast, allows duplex communications natively, and does not require the use of this binding element for the service to send messages back to a client.       The client must expose an address for the service to make contact and establish a connection. This client address is provided by the <xref:System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This configuration element adds two-way messaging to a custom binding. It is used with transports that do not allow duplex communications natively, for example, HTTP. TCP, by contrast, allows duplex communications natively, and does not require the use of this binding element for the service to send messages back to a client.       The client must expose an address for the service to make contact and establish a connection. This client address is provided by the <xref:System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress%2A> property.","pos":[0,561],"nodes":[{"content":"This configuration element adds two-way messaging to a custom binding.","pos":[0,70]},{"content":"It is used with transports that do not allow duplex communications natively, for example, HTTP.","pos":[71,166]},{"content":"TCP, by contrast, allows duplex communications natively, and does not require the use of this binding element for the service to send messages back to a client.","pos":[167,327]},{"content":"The client must expose an address for the service to make contact and establish a connection.","pos":[334,427]},{"content":"This client address is provided by the &lt;xref:System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress%2A&gt; property.","pos":[428,561],"source":" This client address is provided by the <xref:System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress%2A> property."}]}]},{"pos":[5766,5884],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Configuration.CompositeDuplexElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.CompositeDuplexElement\"></xref> class."},{"pos":[6694,6783],"content":"Applies the content of a specified binding element to this binding configuration section.","needQuote":true,"needEscape":true,"nodes":[{"content":"Applies the content of a specified binding element to this binding configuration section.","pos":[0,89]}]},{"pos":[7025,7043],"content":"A binding element.","needQuote":true,"needEscape":true,"nodes":[{"content":"A binding element.","pos":[0,18]}]},{"pos":[7654,7687],"content":"Gets the type of binding element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type of binding element.","pos":[0,33]}]},{"pos":[7815,7843],"content":"The type of binding element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of binding element.","pos":[0,28]}]},{"pos":[8449,8494],"content":"Gets or sets the base address for the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the base address for the client.","pos":[0,45]}]},{"pos":[8506,8595],"content":"The service uses this address to make contact and establish a connection with the client.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The service uses this address to make contact and establish a connection with the client.","pos":[0,89]}]},{"pos":[8716,8782],"content":"A <xref:System.Uri> that contains the base address for the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Uri&gt; that contains the base address for the client.","pos":[0,66],"source":"A <xref:System.Uri> that contains the base address for the client."}]},{"pos":[9558,9646],"content":"Copies the content of the specified configuration element to this configuration element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the content of the specified configuration element to this configuration element.","pos":[0,88]}]},{"pos":[9896,9935],"content":"The configuration element to be copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The configuration element to be copied.","pos":[0,39]}]},{"pos":[10756,10768],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11726,11738],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12505,12517],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement\n  id: CompositeDuplexElement\n  children:\n  - System.ServiceModel.Configuration.CompositeDuplexElement.#ctor\n  - System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)\n  - System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType\n  - System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress\n  - System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)\n  - System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement\n  - System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)\n  - System.ServiceModel.Configuration.CompositeDuplexElement.Properties\n  langs:\n  - csharp\n  name: CompositeDuplexElement\n  nameWithType: CompositeDuplexElement\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement\n  type: Class\n  summary: Represents the configuration element that is used when the client must expose an endpoint for the service to send messages over HTTP. This class cannot be inherited.\n  remarks: \"This configuration element adds two-way messaging to a custom binding. It is used with transports that do not allow duplex communications natively, for example, HTTP. TCP, by contrast, allows duplex communications natively, and does not require the use of this binding element for the service to send messages back to a client.  \\n  \\n The client must expose an address for the service to make contact and establish a connection. This client address is provided by the <xref:System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress%2A> property.\"\n  syntax:\n    content: 'public sealed class CompositeDuplexElement : System.ServiceModel.Configuration.BindingElementExtensionElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  - System.ServiceModel.Configuration.ServiceModelConfigurationElement\n  - System.ServiceModel.Configuration.ServiceModelExtensionElement\n  - System.ServiceModel.Configuration.BindingElementExtensionElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  - System.ServiceModel.Configuration.ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue``1(System.String,``0)\n  - System.ServiceModel.Configuration.ServiceModelExtensionElement.ConfigurationElementName\n  - System.ServiceModel.Configuration.ServiceModelExtensionElement.IsModified\n  - System.ServiceModel.Configuration.ServiceModelExtensionElement.Reset(System.Configuration.ConfigurationElement)\n  - System.ServiceModel.Configuration.ServiceModelExtensionElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: CompositeDuplexElement()\n  nameWithType: CompositeDuplexElement.CompositeDuplexElement()\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.CompositeDuplexElement()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.CompositeDuplexElement\"></xref> class.\n  syntax:\n    content: public CompositeDuplexElement ();\n    parameters: []\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)\n  id: ApplyConfiguration(System.ServiceModel.Channels.BindingElement)\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: ApplyConfiguration(BindingElement)\n  nameWithType: CompositeDuplexElement.ApplyConfiguration(BindingElement)\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration(BindingElement)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Applies the content of a specified binding element to this binding configuration section.\n  syntax:\n    content: public override void ApplyConfiguration (System.ServiceModel.Channels.BindingElement bindingElement);\n    parameters:\n    - id: bindingElement\n      type: System.ServiceModel.Channels.BindingElement\n      description: A binding element.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType\n  id: BindingElementType\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: BindingElementType\n  nameWithType: CompositeDuplexElement.BindingElementType\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets the type of binding element.\n  syntax:\n    content: public override Type BindingElementType { get; }\n    return:\n      type: System.Type\n      description: The type of binding element.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress\n  id: ClientBaseAddress\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: ClientBaseAddress\n  nameWithType: CompositeDuplexElement.ClientBaseAddress\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets the base address for the client.\n  remarks: The service uses this address to make contact and establish a connection with the client.\n  syntax:\n    content: public Uri ClientBaseAddress { get; set; }\n    return:\n      type: System.Uri\n      description: A <xref:System.Uri> that contains the base address for the client.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)\n  id: CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: CopyFrom(ServiceModelExtensionElement)\n  nameWithType: CompositeDuplexElement.CopyFrom(ServiceModelExtensionElement)\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom(ServiceModelExtensionElement)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Copies the content of the specified configuration element to this configuration element.\n  syntax:\n    content: public override void CopyFrom (System.ServiceModel.Configuration.ServiceModelExtensionElement from);\n    parameters:\n    - id: from\n      type: System.ServiceModel.Configuration.ServiceModelExtensionElement\n      description: The configuration element to be copied.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement\n  id: CreateBindingElement\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: CreateBindingElement()\n  nameWithType: CompositeDuplexElement.CreateBindingElement()\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  syntax:\n    content: protected override System.ServiceModel.Channels.BindingElement CreateBindingElement ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Channels.BindingElement\n      description: To be added.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)\n  id: InitializeFrom(System.ServiceModel.Channels.BindingElement)\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: InitializeFrom(BindingElement)\n  nameWithType: CompositeDuplexElement.InitializeFrom(BindingElement)\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom(BindingElement)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  syntax:\n    content: protected override void InitializeFrom (System.ServiceModel.Channels.BindingElement bindingElement);\n    parameters:\n    - id: bindingElement\n      type: System.ServiceModel.Channels.BindingElement\n      description: To be added.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.Properties\n  id: Properties\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: CompositeDuplexElement.Properties\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.Properties\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: To be added.\n  overload: System.ServiceModel.Configuration.CompositeDuplexElement.Properties*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Configuration.BindingElementExtensionElement\n  isExternal: false\n  name: System.ServiceModel.Configuration.BindingElementExtensionElement\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.#ctor\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: CompositeDuplexElement()\n  nameWithType: CompositeDuplexElement.CompositeDuplexElement()\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.CompositeDuplexElement()\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: ApplyConfiguration(BindingElement)\n  nameWithType: CompositeDuplexElement.ApplyConfiguration(BindingElement)\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration(BindingElement)\n- uid: System.ServiceModel.Channels.BindingElement\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: BindingElement\n  nameWithType: BindingElement\n  fullName: System.ServiceModel.Channels.BindingElement\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: BindingElementType\n  nameWithType: CompositeDuplexElement.BindingElementType\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: ClientBaseAddress\n  nameWithType: CompositeDuplexElement.ClientBaseAddress\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: CopyFrom(ServiceModelExtensionElement)\n  nameWithType: CompositeDuplexElement.CopyFrom(ServiceModelExtensionElement)\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom(ServiceModelExtensionElement)\n- uid: System.ServiceModel.Configuration.ServiceModelExtensionElement\n  parent: System.ServiceModel.Configuration\n  isExternal: false\n  name: ServiceModelExtensionElement\n  nameWithType: ServiceModelExtensionElement\n  fullName: System.ServiceModel.Configuration.ServiceModelExtensionElement\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: CreateBindingElement()\n  nameWithType: CompositeDuplexElement.CreateBindingElement()\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement()\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: InitializeFrom(BindingElement)\n  nameWithType: CompositeDuplexElement.InitializeFrom(BindingElement)\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom(BindingElement)\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.Properties\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: Properties\n  nameWithType: CompositeDuplexElement.Properties\n  fullName: System.ServiceModel.Configuration.CompositeDuplexElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.#ctor*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: CompositeDuplexElement\n  nameWithType: CompositeDuplexElement.CompositeDuplexElement\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: ApplyConfiguration\n  nameWithType: CompositeDuplexElement.ApplyConfiguration\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: BindingElementType\n  nameWithType: CompositeDuplexElement.BindingElementType\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: ClientBaseAddress\n  nameWithType: CompositeDuplexElement.ClientBaseAddress\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: CopyFrom\n  nameWithType: CompositeDuplexElement.CopyFrom\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.CreateBindingElement*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: CreateBindingElement\n  nameWithType: CompositeDuplexElement.CreateBindingElement\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.InitializeFrom*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: InitializeFrom\n  nameWithType: CompositeDuplexElement.InitializeFrom\n- uid: System.ServiceModel.Configuration.CompositeDuplexElement.Properties*\n  parent: System.ServiceModel.Configuration.CompositeDuplexElement\n  isExternal: false\n  name: Properties\n  nameWithType: CompositeDuplexElement.Properties\n"}