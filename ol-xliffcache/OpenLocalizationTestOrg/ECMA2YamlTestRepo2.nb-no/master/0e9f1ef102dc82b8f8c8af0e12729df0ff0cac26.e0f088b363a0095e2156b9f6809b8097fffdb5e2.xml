{"nodes":[{"pos":[495,549],"content":"Specifies the block cipher mode to use for encryption.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the block cipher mode to use for encryption.","pos":[0,54]}]},{"pos":[562,1341],"content":"Block cipher algorithms encrypt data in block units, rather than a single byte at a time. The most common block size is 8 bytes. Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers. However, block cipher algorithms tend to execute more slowly than stream ciphers.       Block ciphers use the same encryption algorithm for each block. Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm. Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions. The resulting encryption provides a higher level of security than a simple block encryption.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Block cipher algorithms encrypt data in block units, rather than a single byte at a time. The most common block size is 8 bytes. Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers. However, block cipher algorithms tend to execute more slowly than stream ciphers.       Block ciphers use the same encryption algorithm for each block. Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm. Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions. The resulting encryption provides a higher level of security than a simple block encryption.","pos":[0,777],"nodes":[{"content":"Block cipher algorithms encrypt data in block units, rather than a single byte at a time.","pos":[0,89]},{"content":"The most common block size is 8 bytes.","pos":[90,128]},{"content":"Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers.","pos":[129,239]},{"content":"However, block cipher algorithms tend to execute more slowly than stream ciphers.","pos":[240,321]},{"content":"Block ciphers use the same encryption algorithm for each block.","pos":[328,391]},{"content":"Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm.","pos":[392,518]},{"content":"Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions.","pos":[519,684]},{"content":"The resulting encryption provides a higher level of security than a simple block encryption.","pos":[685,777]}]}]},{"pos":[1833,2571],"content":"The Cipher Block Chaining (<xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"></xref>) mode introduces feedback. Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation. This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block. The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted. If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled. In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Cipher Block Chaining (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) mode introduces feedback.","pos":[0,112],"source":"The Cipher Block Chaining (<xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"></xref>) mode introduces feedback."},{"content":"Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation.","pos":[113,250]},{"content":"This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block.","pos":[251,380]},{"content":"The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted.","pos":[381,517]},{"content":"If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled.","pos":[518,627]},{"content":"In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.","pos":[628,738]}]},{"pos":[2682,2694],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3059,4025],"content":"The Cipher Feedback (<xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"></xref>) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time. This mode uses a shift register that is one block in length and is divided into sections. For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections. If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted. This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register. The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size. You can alter the number of feedback bits by using the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*> property. Algorithms that support CFB use this property to set the feedback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Cipher Feedback (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time.","pos":[0,193],"source":"The Cipher Feedback (<xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"></xref>) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time."},{"content":"This mode uses a shift register that is one block in length and is divided into sections.","pos":[194,283]},{"content":"For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections.","pos":[284,412]},{"content":"If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted.","pos":[413,519]},{"content":"This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register.","pos":[520,644]},{"content":"The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size.","pos":[645,765]},{"content":"You can alter the number of feedback bits by using the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*&gt; property.","pos":[766,899],"source":" You can alter the number of feedback bits by using the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*> property."},{"content":"Algorithms that support CFB use this property to set the feedback.","pos":[900,966]}]},{"pos":[4136,4148],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4513,4847],"content":"The Cipher Text Stealing (<xref uid=\"langword_csharp_CTS\" name=\"CTS\" href=\"\"></xref>) mode handles any length of plain text and produces cipher text whose length matches the plain text length. This mode behaves like the <xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"></xref> mode for all but the last two blocks of the plain text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Cipher Text Stealing (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CTS\" name=\"CTS\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) mode handles any length of plain text and produces cipher text whose length matches the plain text length.","pos":[0,192],"source":"The Cipher Text Stealing (<xref uid=\"langword_csharp_CTS\" name=\"CTS\" href=\"\"></xref>) mode handles any length of plain text and produces cipher text whose length matches the plain text length."},{"content":"This mode behaves like the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode for all but the last two blocks of the plain text.","pos":[193,334],"source":" This mode behaves like the <xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"></xref> mode for all but the last two blocks of the plain text."}]},{"pos":[4958,4970],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5336,6148],"content":"The Electronic Codebook (<xref uid=\"langword_csharp_ECB\" name=\"ECB\" href=\"\"></xref>) mode encrypts each block individually. Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks. **Important**:  This mode is not recommended because it opens the door for multiple security exploits. If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time. It is also possible to use block analysis to determine the encryption key. Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Electronic Codebook (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ECB\" name=\"ECB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) mode encrypts each block individually.","pos":[0,123],"source":"The Electronic Codebook (<xref uid=\"langword_csharp_ECB\" name=\"ECB\" href=\"\"></xref>) mode encrypts each block individually."},{"content":"Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks.","pos":[124,311]},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>:  This mode is not recommended because it opens the door for multiple security exploits.","pos":[312,414],"source":"**Important**:  This mode is not recommended because it opens the door for multiple security exploits."},{"content":"If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time.","pos":[415,550]},{"content":"It is also possible to use block analysis to determine the encryption key.","pos":[551,625]},{"content":"Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.","pos":[626,812]}]},{"pos":[6260,6272],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6637,7211],"content":"The Output Feedback (<xref uid=\"langword_csharp_OFB\" name=\"OFB\" href=\"\"></xref>) mode processes small increments of plain text into cipher text instead of processing an entire block at a time. This mode is similar to <xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"></xref>; the only difference between the two modes is the way that the shift register is filled. If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled. However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Output Feedback (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OFB\" name=\"OFB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) mode processes small increments of plain text into cipher text instead of processing an entire block at a time.","pos":[0,192],"source":"The Output Feedback (<xref uid=\"langword_csharp_OFB\" name=\"OFB\" href=\"\"></xref>) mode processes small increments of plain text into cipher text instead of processing an entire block at a time."},{"content":"This mode is similar to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; the only difference between the two modes is the way that the shift register is filled.","pos":[193,364],"source":" This mode is similar to <xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"></xref>; the only difference between the two modes is the way that the shift register is filled."},{"content":"If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled.","pos":[365,457]},{"content":"However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.","pos":[458,574]}]},{"pos":[7322,7334],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.CipherMode\n  id: CipherMode\n  children:\n  - System.Security.Cryptography.CipherMode.CBC\n  - System.Security.Cryptography.CipherMode.CFB\n  - System.Security.Cryptography.CipherMode.CTS\n  - System.Security.Cryptography.CipherMode.ECB\n  - System.Security.Cryptography.CipherMode.OFB\n  langs:\n  - csharp\n  name: CipherMode\n  nameWithType: CipherMode\n  fullName: System.Security.Cryptography.CipherMode\n  type: Enum\n  summary: Specifies the block cipher mode to use for encryption.\n  remarks: \"Block cipher algorithms encrypt data in block units, rather than a single byte at a time. The most common block size is 8 bytes. Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers. However, block cipher algorithms tend to execute more slowly than stream ciphers.  \\n  \\n Block ciphers use the same encryption algorithm for each block. Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm. Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions. The resulting encryption provides a higher level of security than a simple block encryption.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum CipherMode\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CipherMode.CBC\n  id: CBC\n  parent: System.Security.Cryptography.CipherMode\n  langs:\n  - csharp\n  name: CBC\n  nameWithType: CipherMode.CBC\n  fullName: System.Security.Cryptography.CipherMode.CBC\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: The Cipher Block Chaining (<xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"></xref>) mode introduces feedback. Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation. This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block. The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted. If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled. In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.\n  syntax:\n    content: CBC\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CipherMode.CFB\n  id: CFB\n  parent: System.Security.Cryptography.CipherMode\n  langs:\n  - csharp\n  name: CFB\n  nameWithType: CipherMode.CFB\n  fullName: System.Security.Cryptography.CipherMode.CFB\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: The Cipher Feedback (<xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"></xref>) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time. This mode uses a shift register that is one block in length and is divided into sections. For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections. If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted. This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register. The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size. You can alter the number of feedback bits by using the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*> property. Algorithms that support CFB use this property to set the feedback.\n  syntax:\n    content: CFB\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CipherMode.CTS\n  id: CTS\n  parent: System.Security.Cryptography.CipherMode\n  langs:\n  - csharp\n  name: CTS\n  nameWithType: CipherMode.CTS\n  fullName: System.Security.Cryptography.CipherMode.CTS\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: The Cipher Text Stealing (<xref uid=\"langword_csharp_CTS\" name=\"CTS\" href=\"\"></xref>) mode handles any length of plain text and produces cipher text whose length matches the plain text length. This mode behaves like the <xref uid=\"langword_csharp_CBC\" name=\"CBC\" href=\"\"></xref> mode for all but the last two blocks of the plain text.\n  syntax:\n    content: CTS\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CipherMode.ECB\n  id: ECB\n  parent: System.Security.Cryptography.CipherMode\n  langs:\n  - csharp\n  name: ECB\n  nameWithType: CipherMode.ECB\n  fullName: System.Security.Cryptography.CipherMode.ECB\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: 'The Electronic Codebook (<xref uid=\"langword_csharp_ECB\" name=\"ECB\" href=\"\"></xref>) mode encrypts each block individually. Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks. **Important**:  This mode is not recommended because it opens the door for multiple security exploits. If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time. It is also possible to use block analysis to determine the encryption key. Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.'\n  syntax:\n    content: ECB\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CipherMode.OFB\n  id: OFB\n  parent: System.Security.Cryptography.CipherMode\n  langs:\n  - csharp\n  name: OFB\n  nameWithType: CipherMode.OFB\n  fullName: System.Security.Cryptography.CipherMode.OFB\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: The Output Feedback (<xref uid=\"langword_csharp_OFB\" name=\"OFB\" href=\"\"></xref>) mode processes small increments of plain text into cipher text instead of processing an entire block at a time. This mode is similar to <xref uid=\"langword_csharp_CFB\" name=\"CFB\" href=\"\"></xref>; the only difference between the two modes is the way that the shift register is filled. If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled. However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.\n  syntax:\n    content: OFB\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Security.Cryptography.CipherMode.CBC\n  parent: System.Security.Cryptography.CipherMode\n  isExternal: false\n  name: CBC\n  nameWithType: CipherMode.CBC\n  fullName: System.Security.Cryptography.CipherMode.CBC\n- uid: System.Security.Cryptography.CipherMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CipherMode\n  nameWithType: CipherMode\n  fullName: System.Security.Cryptography.CipherMode\n- uid: System.Security.Cryptography.CipherMode.CFB\n  parent: System.Security.Cryptography.CipherMode\n  isExternal: false\n  name: CFB\n  nameWithType: CipherMode.CFB\n  fullName: System.Security.Cryptography.CipherMode.CFB\n- uid: System.Security.Cryptography.CipherMode.CTS\n  parent: System.Security.Cryptography.CipherMode\n  isExternal: false\n  name: CTS\n  nameWithType: CipherMode.CTS\n  fullName: System.Security.Cryptography.CipherMode.CTS\n- uid: System.Security.Cryptography.CipherMode.ECB\n  parent: System.Security.Cryptography.CipherMode\n  isExternal: false\n  name: ECB\n  nameWithType: CipherMode.ECB\n  fullName: System.Security.Cryptography.CipherMode.ECB\n- uid: System.Security.Cryptography.CipherMode.OFB\n  parent: System.Security.Cryptography.CipherMode\n  isExternal: false\n  name: OFB\n  nameWithType: CipherMode.OFB\n  fullName: System.Security.Cryptography.CipherMode.OFB\n"}