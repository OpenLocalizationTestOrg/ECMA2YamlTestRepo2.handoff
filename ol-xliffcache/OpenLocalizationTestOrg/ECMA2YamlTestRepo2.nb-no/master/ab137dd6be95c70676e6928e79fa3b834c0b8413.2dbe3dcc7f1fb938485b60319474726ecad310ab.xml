{"nodes":[{"pos":[4675,4806],"content":"Models a strongly typed &lt;xref:System.Collections.ICollection&gt; of type <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Models a strongly typed <xref:System.Collections.ICollection> of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."},{"pos":[4819,5451],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       This class is used to represent the list of child activities for a <xref:System.Workflow.ComponentModel.CompositeActivity>.      > [!NOTE] >  Only call methods derived from <xref:System.Collections.Generic.IList%601> and not <xref:System.Collections.Generic.List%601>, such as using <xref:System.Workflow.ComponentModel.ActivityCollection.Add%2A> to add activities instead of <xref:System.Collections.Generic.List%601.AddRange%2A>. Calling methods derived from <xref:System.Collections.Generic.List%601> will have unexpected consequences.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       This class is used to represent the list of child activities for a &lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt;.","pos":[0,211],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       This class is used to represent the list of child activities for a <xref:System.Workflow.ComponentModel.CompositeActivity>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Only call methods derived from &lt;xref:System.Collections.Generic.IList%601&gt; and not &lt;xref:System.Collections.Generic.List%601&gt;, such as using &lt;xref:System.Workflow.ComponentModel.ActivityCollection.Add%2A&gt; to add activities instead of &lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;.","pos":[217,519],"source":"      > [!NOTE] >  Only call methods derived from <xref:System.Collections.Generic.IList%601> and not <xref:System.Collections.Generic.List%601>, such as using <xref:System.Workflow.ComponentModel.ActivityCollection.Add%2A> to add activities instead of <xref:System.Collections.Generic.List%601.AddRange%2A>."},{"content":"Calling methods derived from &lt;xref:System.Collections.Generic.List%601&gt; will have unexpected consequences.","pos":[520,626],"source":" Calling methods derived from <xref:System.Collections.Generic.List%601> will have unexpected consequences."}]},{"pos":[7690,7885],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.ActivityCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, initializing an owner <bpt id=\"p2\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.ComponentModel.ActivityCollection\"></xref> class, initializing an owner <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."},{"pos":[7897,7904],"content":"Example","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8106,8206],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> designated as owning this instance.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> designated as owning this instance."},{"pos":[8392,8516],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is a null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"<code>owner</code> is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[8611,8714],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is not a descendent of <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>owner</code> is not a descendent of <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."},{"pos":[9237,9352],"content":"Adds the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the &lt;xref:System.Collections.ICollection&gt;.","needQuote":true,"needEscape":true,"source":"Adds the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to the <xref:System.Collections.ICollection>."},{"pos":[10198,10320],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be added to the &lt;xref:System.Collections.ICollection&gt;.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to be added to the <xref:System.Collections.ICollection>."},{"pos":[10831,10953],"content":"Removes every <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the &lt;xref:System.Collections.ICollection&gt;.","needQuote":true,"needEscape":true,"source":"Removes every <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from the <xref:System.Collections.ICollection>."},{"pos":[11651,11795],"content":"Provides a test for membership of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the &lt;xref:System.Collections.ICollection&gt;.","needQuote":true,"needEscape":true,"source":"Provides a test for membership of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>."},{"pos":[11807,11969],"content":"This <xref:System.Collections.ICollection> is type-safe. A run-time exception is raised if the item is not of type <xref:System.Workflow.ComponentModel.Activity>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This <xref:System.Collections.ICollection> is type-safe. A run-time exception is raised if the item is not of type <xref:System.Workflow.ComponentModel.Activity>.","pos":[0,162],"nodes":[{"content":"This &lt;xref:System.Collections.ICollection&gt; is type-safe.","pos":[0,56],"source":"This <xref:System.Collections.ICollection> is type-safe."},{"content":"A run-time exception is raised if the item is not of type &lt;xref:System.Workflow.ComponentModel.Activity&gt;.","pos":[57,162],"source":" A run-time exception is raised if the item is not of type <xref:System.Workflow.ComponentModel.Activity>."}]}]},{"pos":[12164,12257],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> being tested for membership.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> being tested for membership."},{"pos":[12316,12573],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> belongs to the &lt;xref:System.Collections.ICollection&gt;; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> belongs to the <xref:System.Collections.ICollection>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13085,13157],"content":"Gets the number of members of the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of members of the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,72],"source":"Gets the number of members of the <xref:System.Collections.ICollection>."}]},{"pos":[13263,13330],"content":"The number of members of the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of members of the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,67],"source":"The number of members of the <xref:System.Collections.ICollection>."}]},{"pos":[13883,13964],"content":"Implements an enumeration interface to the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements an enumeration interface to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,81],"source":"Implements an enumeration interface to the <xref:System.Collections.ICollection>."}]},{"pos":[13977,16563],"content":"Enumerators only enable reading the data in the collection. You cannot use enumerators to modify the underlying collection.       To begin, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A>raises an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> raises an exception.       To set `Current` to the first element of the collection again, you can call `Reset` followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irreversibly invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or `Reset` raises an <xref:System.InvalidOperationException> . If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> will return the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads could still modify the collection. This causes the enumerator to raise an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Enumerators only enable reading the data in the collection.","pos":[0,59]},{"content":"You cannot use enumerators to modify the underlying collection.","pos":[60,123]},{"content":"To begin, the enumerator is positioned before the first element in the collection.","pos":[130,212]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[213,309],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt;raises an exception.","pos":[310,404],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A>raises an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[405,622],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[629,825],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[826,950],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[957,1149],"source":"       After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; raises an exception.","pos":[1150,1315],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> raises an exception."},{"content":"To set <ph id=\"ph1\">`Current`</ph> to the first element of the collection again, you can call <ph id=\"ph2\">`Reset`</ph> followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1322,1468],"source":"       To set `Current` to the first element of the collection again, you can call `Reset` followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1475,1547]},{"content":"If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irreversibly invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or <ph id=\"ph1\">`Reset`</ph> raises an &lt;xref:System.InvalidOperationException&gt; .","pos":[1548,1811],"source":" If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irreversibly invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or `Reset` raises an <xref:System.InvalidOperationException> ."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; will return the element that it is set to, even if the enumerator is already invalidated.","pos":[1812,2092],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> will return the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2099,2253]},{"content":"Even when a collection is synchronized, other threads could still modify the collection.","pos":[2254,2342]},{"content":"This causes the enumerator to raise an exception.","pos":[2343,2392]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2393,2574]}]},{"pos":[16835,16958],"content":"Returns an enumerator that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Returns an enumerator that can iterate through the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance."},{"pos":[17595,17723],"content":"Gets the index of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the &lt;xref:System.Collections.ICollection&gt;.","needQuote":true,"needEscape":true,"source":"Gets the index of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>."},{"pos":[17735,17874],"content":"This collection is type-safe. A run-time exception will be raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This collection is type-safe. A run-time exception will be raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.","pos":[0,139],"nodes":[{"content":"This collection is type-safe.","pos":[0,29]},{"content":"A run-time exception will be raised if an item is not of type &lt;xref:System.Workflow.ComponentModel.Activity&gt;.","pos":[30,139],"source":" A run-time exception will be raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>."}]}]},{"pos":[18067,18111],"content":"The activity for which to acquire the index.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity for which to acquire the index.","pos":[0,44]}]},{"pos":[18168,18423],"content":"The index of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>. Otherwise -1 (if <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> is not in the <xref:System.Collections.ICollection>).","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,123],"source":"The index of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>."},{"content":"Otherwise -1 (if <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not in the &lt;xref:System.Collections.ICollection&gt;).","pos":[124,255],"source":" Otherwise -1 (if <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> is not in the <xref:System.Collections.ICollection>)."}]},{"pos":[19093,19168],"content":"Inserts the item at the index in the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Inserts the item at the index in the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,75],"source":"Inserts the item at the index in the <xref:System.Collections.ICollection>."}]},{"pos":[19180,19341],"content":"This <xref:System.Collections.ICollection> is type safe. A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This <xref:System.Collections.ICollection> is type safe. A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.","pos":[0,161],"nodes":[{"content":"This &lt;xref:System.Collections.ICollection&gt; is type safe.","pos":[0,56],"source":"This <xref:System.Collections.ICollection> is type safe."},{"content":"A run-time exception is raised if an item is not of type &lt;xref:System.Workflow.ComponentModel.Activity&gt;.","pos":[57,161],"source":" A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>."}]}]},{"pos":[19519,19582],"content":"Zero-based index of the collection at which to insert the item.","needQuote":true,"needEscape":true,"nodes":[{"content":"Zero-based index of the collection at which to insert the item.","pos":[0,63]}]},{"pos":[19669,19769],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be inserted into the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to be inserted into the collection."},{"pos":[20323,20413],"content":"Gets or sets the activity in the <xref:System.Collections.ICollection> based on the index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the activity in the &lt;xref:System.Collections.ICollection&gt; based on the index.","pos":[0,90],"source":"Gets or sets the activity in the <xref:System.Collections.ICollection> based on the index."}]},{"pos":[20590,20654],"content":"Zero-based index into the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Zero-based index into the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,64],"source":"Zero-based index into the <xref:System.Collections.ICollection>."}]},{"pos":[20738,20885],"content":"A member activity of the <xref:System.Collections.ICollection>, whose index in the <xref:System.Collections.ICollection> was specified in the call.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member activity of the &lt;xref:System.Collections.ICollection&gt;, whose index in the &lt;xref:System.Collections.ICollection&gt; was specified in the call.","pos":[0,147],"source":"A member activity of the <xref:System.Collections.ICollection>, whose index in the <xref:System.Collections.ICollection> was specified in the call."}]},{"pos":[21082,21157],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>index</code> is not a valid index in <xref:System.Collections.IList>."},{"pos":[21260,21333],"content":"The property is set and the <xref:System.Collections.IList> is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property is set and the &lt;xref:System.Collections.IList&gt; is read-only.","pos":[0,73],"source":"The property is set and the <xref:System.Collections.IList> is read-only."}]},{"pos":[21412,21533],"content":"An attempt to set to an &lt;xref:System.Object&gt; that is not an <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt to set to an <xref:System.Object> that is not an <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."},{"pos":[22005,22110],"content":"Gets the activity in the <xref:System.Collections.ICollection> based on the string which is a unique key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the activity in the &lt;xref:System.Collections.ICollection&gt; based on the string which is a unique key.","pos":[0,105],"source":"Gets the activity in the <xref:System.Collections.ICollection> based on the string which is a unique key."}]},{"pos":[22122,22272],"content":"If there is no <xref:System.Workflow.ComponentModel.Activity> in the <xref:System.Collections.ICollection> with specified key, an exception is raised.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there is no &lt;xref:System.Workflow.ComponentModel.Activity&gt; in the &lt;xref:System.Collections.ICollection&gt; with specified key, an exception is raised.","pos":[0,150],"source":"If there is no <xref:System.Workflow.ComponentModel.Activity> in the <xref:System.Collections.ICollection> with specified key, an exception is raised."}]},{"pos":[22444,22520],"content":"Unique identifier for activity in the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unique identifier for activity in the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,76],"source":"Unique identifier for activity in the <xref:System.Collections.ICollection>."}]},{"pos":[22604,22805],"content":"A member <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the &lt;xref:System.Collections.ICollection&gt;; the key in the &lt;xref:System.Collections.ICollection&gt; which was specified in the call.","needQuote":true,"needEscape":true,"source":"A member <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> of the <xref:System.Collections.ICollection>; the key in the <xref:System.Collections.ICollection> which was specified in the call."},{"pos":[23340,23435],"content":"Raised whenever a change is made to the contents of this <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raised whenever a change is made to the contents of this &lt;xref:System.Collections.ICollection&gt;.","pos":[0,95],"source":"Raised whenever a change is made to the contents of this <xref:System.Collections.ICollection>."}]},{"pos":[23448,24037],"content":"In this context, adding or removing members raises the event. Modifying a member does not raise this event.       When you create an <xref:System.Workflow.ComponentModel.ActivityCollection> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In this context, adding or removing members raises the event.","pos":[0,61]},{"content":"Modifying a member does not raise this event.","pos":[62,107]},{"content":"When you create an &lt;xref:System.Workflow.ComponentModel.ActivityCollection&gt; delegate, you identify the method that will handle the event.","pos":[114,251],"source":"       When you create an <xref:System.Workflow.ComponentModel.ActivityCollection> delegate, you identify the method that will handle the event."},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[252,345]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[346,432]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>NIB: Events and Delegates<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)</ept>.","pos":[433,587],"source":" For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."}]},{"pos":[24296,24308],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24863,24953],"content":"Removes the activity specified in the call from the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the activity specified in the call from the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,90],"source":"Removes the activity specified in the call from the <xref:System.Collections.ICollection>."}]},{"pos":[24965,25126],"content":"This <xref:System.Collections.ICollection> is type safe. A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This <xref:System.Collections.ICollection> is type safe. A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.","pos":[0,161],"nodes":[{"content":"This &lt;xref:System.Collections.ICollection&gt; is type safe.","pos":[0,56],"source":"This <xref:System.Collections.ICollection> is type safe."},{"content":"A run-time exception is raised if an item is not of type &lt;xref:System.Workflow.ComponentModel.Activity&gt;.","pos":[57,161],"source":" A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>."}]}]},{"pos":[25319,25389],"content":"The activity to remove from the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity to remove from the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,70],"source":"The activity to remove from the <xref:System.Collections.ICollection>."}]},{"pos":[25448,25611],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation succeeded; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation succeeded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26183,26337],"content":"Removes the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the &lt;xref:System.Collections.ICollection&gt; at the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection> at the specified <code>index</code>."},{"pos":[26349,26418],"content":"A run-time exception occurs if the index is not valid (out of range).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A run-time exception occurs if the index is not valid (out of range).","pos":[0,69]}]},{"pos":[26552,26626],"content":"Position in a zero-based index to remove the activity from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Position in a zero-based index to remove the activity from the collection.","pos":[0,74]}]},{"pos":[27710,27722],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29829,29841],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29900,29912],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31161,31173],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31239,31251],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32281,32293],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33340,33352],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[34527,34539],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[34598,34610],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35767,35779],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[36923,36935],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[36992,37004],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38163,38175],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38262,38274],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39380,39392],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39476,39488],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[40497,40509],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41360,41503],"content":"Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the &lt;xref:System.Collections.ICollection&gt; to an &lt;xref:System.Array&gt;, starting at a particular &lt;xref:System.Array&gt; index.","pos":[0,143],"source":"Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index."}]},{"pos":[41653,41719],"content":"The <xref:System.Array> which is the target of the copy operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Array&gt; which is the target of the copy operation.","pos":[0,66],"source":"The <xref:System.Array> which is the target of the copy operation."}]},{"pos":[41780,41872],"content":"The zero-based index within the <xref:System.Collections.ICollection> where the copy starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index within the &lt;xref:System.Collections.ICollection&gt; where the copy starts.","pos":[0,92],"source":"The zero-based index within the <xref:System.Collections.ICollection> where the copy starts."}]},{"pos":[42627,42770],"content":"Gets a value that indicates whether access to the &lt;xref:System.Collections.Generic.ICollection%601&gt; is synchronized, that is thread-safe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether access to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id=\"ph2\">&amp;gt;</ph> is synchronized, that is thread-safe.","pos":[0,143],"source":"Gets a value that indicates whether access to the &lt;xref:System.Collections.Generic.ICollection%601&gt; is synchronized, that is thread-safe."}]},{"pos":[42783,43568],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.Generic.ICollection%601>.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; returns an object, which can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;.","pos":[0,166],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.Generic.ICollection%601>."},{"content":"Most collection classes in the &lt;xref:System.Collections?displayProperty=fullName&gt; namespace also implement a <ph id=\"ph1\">`Synchronized`</ph> method, which provides a synchronized wrapper around the underlying collection.","pos":[173,376],"source":"       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[383,461]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[462,599]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[600,781]}]},{"pos":[43711,43958],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id=\"ph2\">&amp;gt;</ph> is synchronized, that is, thread-safe; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the &lt;xref:System.Collections.Generic.ICollection%601&gt; is synchronized, that is, thread-safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[44691,44808],"content":"Gets an object that can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,117],"source":"Gets an object that can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;."}]},{"pos":[44821,46017],"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection <xref:System.Collections.ICollection.SyncRoot%2A> property.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A> property of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.","pos":[0,128]},{"content":"Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[129,349],"source":" Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"Most collection classes in the &lt;xref:System.Collections?displayProperty=fullName&gt; namespace also implement a <ph id=\"ph1\">`Synchronized`</ph> method, which provides a synchronized wrapper around the underlying collection.","pos":[356,559],"source":"       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection."},{"content":"However, derived classes can provide their own synchronized version of the collection using the &lt;xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[560,765],"source":" However, derived classes can provide their own synchronized version of the collection using the <xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the &lt;xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A&gt; property of the collection, not directly on the collection.","pos":[766,979],"source":" The synchronizing code must perform operations on the <xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A> property of the collection, not directly on the collection."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[980,1061]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[1062,1194]}]},{"pos":[46155,46267],"content":"An object that can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,112],"source":"An object that can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;."}]},{"pos":[47023,47141],"content":"Returns an <xref:System.Collections.IEnumerator> that iterates through the underlying <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; that iterates through the underlying &lt;xref:System.Collections.IList&gt;.","pos":[0,118],"source":"Returns an <xref:System.Collections.IEnumerator> that iterates through the underlying <xref:System.Collections.IList>."}]},{"pos":[47153,47338],"content":"An <xref:System.Collections.IEnumerator> only allows for reading the data in the collection. You cannot use an <xref:System.Collections.IEnumerator> to modify the underlying collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Collections.IEnumerator> only allows for reading the data in the collection. You cannot use an <xref:System.Collections.IEnumerator> to modify the underlying collection.","pos":[0,185],"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; only allows for reading the data in the collection.","pos":[0,92],"source":"An <xref:System.Collections.IEnumerator> only allows for reading the data in the collection."},{"content":"You cannot use an &lt;xref:System.Collections.IEnumerator&gt; to modify the underlying collection.","pos":[93,185],"source":" You cannot use an <xref:System.Collections.IEnumerator> to modify the underlying collection."}]}]},{"pos":[47516,47608],"content":"An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; that can be used to iterate through the collection.","pos":[0,92],"source":"An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection."}]},{"pos":[48337,48441],"content":"Adds an object to the <xref:System.Collections.IList> at the end of the <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an object to the &lt;xref:System.Collections.IList&gt; at the end of the &lt;xref:System.Collections.IList&gt;.","pos":[0,104],"source":"Adds an object to the <xref:System.Collections.IList> at the end of the <xref:System.Collections.IList>."}]},{"pos":[48572,48643],"content":"The <xref:System.Object> to add to the <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to add to the &lt;xref:System.Collections.IList&gt;.","pos":[0,71],"source":"The <xref:System.Object> to add to the <xref:System.Collections.IList>."}]},{"pos":[48701,48807],"content":"Returns <xref:System.Int32>.       The zero-based index of the <xref:System.Object> that was just added.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Int32>.       The zero-based index of the <xref:System.Object> that was just added.","pos":[0,104],"nodes":[{"content":"Returns &lt;xref:System.Int32&gt;.","pos":[0,28],"source":"Returns <xref:System.Int32>."},{"content":"The zero-based index of the &lt;xref:System.Object&gt; that was just added.","pos":[35,104],"source":"       The zero-based index of the <xref:System.Object> that was just added."}]}]},{"pos":[49483,49603],"content":"Removes all <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the &lt;xref:System.Collections.ICollection&gt;.","needQuote":true,"needEscape":true,"source":"Removes all <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from the <xref:System.Collections.ICollection>."},{"pos":[50406,50497],"content":"Gets a value that indicates whether the <xref:System.Object> is a member of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the &lt;xref:System.Object&gt; is a member of the collection.","pos":[0,91],"source":"Gets a value that indicates whether the <xref:System.Object> is a member of the collection."}]},{"pos":[50634,50708],"content":"The <xref:System.Object> to locate in the <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to locate in the &lt;xref:System.Collections.IList&gt;.","pos":[0,74],"source":"The <xref:System.Object> to locate in the <xref:System.Collections.IList>."}]},{"pos":[50767,50975],"content":"Returns &lt;xref:System.Boolean&gt;<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is in the collection; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref:System.Boolean><xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[51713,51807],"content":"Gets the zero-based index of the <xref:System.Object> in the underlying activities collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the zero-based index of the &lt;xref:System.Object&gt; in the underlying activities collection.","pos":[0,94],"source":"Gets the zero-based index of the <xref:System.Object> in the underlying activities collection."}]},{"pos":[51942,51981],"content":"The <xref:System.Object> to be indexed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to be indexed.","pos":[0,39],"source":"The <xref:System.Object> to be indexed."}]},{"pos":[52038,52162],"content":"The zero-based index of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the underlying activities collection or -1 if not found in the collection.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <code>value</code> in the underlying activities collection or -1 if not found in the collection."},{"pos":[52367,52538],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not of type <bpt id=\"p2\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and the exception object contains \"Error_InvalidListItem\" error message.","needQuote":true,"needEscape":true,"source":"The <code>value</code> is not of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> and the exception object contains \"Error_InvalidListItem\" error message."},{"pos":[53201,53308],"content":"Inserts an <xref:System.Object> into the <xref:System.Collections.IList> at the zero-based index specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Inserts an &lt;xref:System.Object&gt; into the &lt;xref:System.Collections.IList&gt; at the zero-based index specified.","pos":[0,107],"source":"Inserts an <xref:System.Object> into the <xref:System.Collections.IList> at the zero-based index specified."}]},{"pos":[53453,53494],"content":"The zero-based position of the insertion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based position of the insertion.","pos":[0,41]}]},{"pos":[53556,53658],"content":"The object to insert. It must be of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to insert.","pos":[0,21]},{"content":"It must be of type <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[22,102],"source":" It must be of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>."}]},{"pos":[54362,54447],"content":"Gets a value indicating whether the <xref:System.Collections.IList> has a fixed size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the &lt;xref:System.Collections.IList&gt; has a fixed size.","pos":[0,85],"source":"Gets a value indicating whether the <xref:System.Collections.IList> has a fixed size."}]},{"pos":[54459,54626],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]}]},{"pos":[54759,54951],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IList&gt; has a fixed size; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IList> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[55655,55760],"content":"Gets a value indicating whether the &lt;xref:System.Collections.Generic.ICollection%601&gt; is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id=\"ph2\">&amp;gt;</ph> is read-only.","pos":[0,105],"source":"Gets a value indicating whether the &lt;xref:System.Collections.Generic.ICollection%601&gt; is read-only."}]},{"pos":[55892,56133],"content":"Returns &lt;xref:System.Boolean&gt;<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id=\"ph2\">&amp;gt;</ph> is read-only; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref:System.Boolean><xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the &lt;xref:System.Collections.Generic.ICollection%601&gt; is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[56855,56945],"content":"Gets or sets the activity in the <xref:System.Collections.ICollection> based on the index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the activity in the &lt;xref:System.Collections.ICollection&gt; based on the index.","pos":[0,90],"source":"Gets or sets the activity in the <xref:System.Collections.ICollection> based on the index."}]},{"pos":[57107,57171],"content":"Zero-based index into the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Zero-based index into the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,64],"source":"Zero-based index into the <xref:System.Collections.ICollection>."}]},{"pos":[57229,57406],"content":"Returns <xref:System.Object>, a member activity of the <xref:System.Collections.ICollection>, whose index in the <xref:System.Collections.ICollection> was specified in the call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Object&gt;, a member activity of the &lt;xref:System.Collections.ICollection&gt;, whose index in the &lt;xref:System.Collections.ICollection&gt; was specified in the call.","pos":[0,177],"source":"Returns <xref:System.Object>, a member activity of the <xref:System.Collections.ICollection>, whose index in the <xref:System.Collections.ICollection> was specified in the call."}]},{"pos":[58135,58226],"content":"Removes the first occurrence of a specific object from the <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the first occurrence of a specific object from the &lt;xref:System.Collections.IList&gt;.","pos":[0,91],"source":"Removes the first occurrence of a specific object from the <xref:System.Collections.IList>."}]},{"pos":[58238,58318],"content":"The elements that follow the removed element move up to occupy the vacated spot.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The elements that follow the removed element move up to occupy the vacated spot.","pos":[0,80]}]},{"pos":[58453,58529],"content":"The <xref:System.Object> to remove from the <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to remove from the &lt;xref:System.Collections.IList&gt;.","pos":[0,76],"source":"The <xref:System.Object> to remove from the <xref:System.Collections.IList>."}]},{"pos":[58742,58849],"content":"The <xref:System.Collections.IList> is read-only.       <xref:System.Collections.IList> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Collections.IList> is read-only.       <xref:System.Collections.IList> has a fixed size.","pos":[0,105],"nodes":[{"content":"The &lt;xref:System.Collections.IList&gt; is read-only.","pos":[0,49],"source":"The <xref:System.Collections.IList> is read-only."},{"content":"&lt;xref:System.Collections.IList&gt; has a fixed size.","pos":[56,105],"source":"       <xref:System.Collections.IList> has a fixed size."}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.ComponentModel.ActivityCollection\n  id: ActivityCollection\n  children:\n  - System.Workflow.ComponentModel.ActivityCollection.#ctor(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.Add(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.Clear\n  - System.Workflow.ComponentModel.ActivityCollection.Contains(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.Count\n  - System.Workflow.ComponentModel.ActivityCollection.GetEnumerator\n  - System.Workflow.ComponentModel.ActivityCollection.IndexOf(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.Item(System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.Item(System.String)\n  - System.Workflow.ComponentModel.ActivityCollection.ListChanged\n  - System.Workflow.ComponentModel.ActivityCollection.Remove(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.RemoveAt(System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Add(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Clear\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Contains(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#CopyTo(System.Workflow.ComponentModel.Activity[],System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Count\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#IsReadOnly\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Remove(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable{System#Workflow#ComponentModel#Activity}#GetEnumerator\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#IndexOf(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Item(System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#RemoveAt(System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add(System.Object)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains(System.Object)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item(System.Int32)\n  - System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: ActivityCollection\n  nameWithType: ActivityCollection\n  fullName: System.Workflow.ComponentModel.ActivityCollection\n  type: Class\n  summary: Models a strongly typed <xref:System.Collections.ICollection> of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n This class is used to represent the list of child activities for a <xref:System.Workflow.ComponentModel.CompositeActivity>.  \\n  \\n> [!NOTE]\\n>  Only call methods derived from <xref:System.Collections.Generic.IList%601> and not <xref:System.Collections.Generic.List%601>, such as using <xref:System.Workflow.ComponentModel.ActivityCollection.Add%2A> to add activities instead of <xref:System.Collections.Generic.List%601.AddRange%2A>. Calling methods derived from <xref:System.Collections.Generic.List%601> will have unexpected consequences.\"\n  example:\n  - \"The following example shows access of the ActivityCollection which is the member of a composite activity class containing all child activities. This code example is part of the Using Throw SDK Sample and is from the ThrowWorkflow.cs file. For more information, see [Using the ThrowActivity Activity](http://msdn.microsoft.com/en-us/82bc0fef-d78a-4750-82b4-e4cb397a10f1).  \\n  \\n [!code-cs[WF_Samples#179](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#179)]\\n [!code-vb[WF_Samples#179](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#179)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Design.Serialization.DesignerSerializer(typeof(System.Workflow.ComponentModel.Serialization.ActivityCollectionMarkupSerializer), typeof(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer))]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public sealed class ActivityCollection : System.Collections.Generic.List<System.Workflow.ComponentModel.Activity>, System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>, System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity>, System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>\n  inheritance:\n  - System.Collections.Generic.List`1\n  implements:\n  - System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>\n  - System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity>\n  - System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.#ctor(System.Workflow.ComponentModel.Activity)\n  id: '#ctor(System.Workflow.ComponentModel.Activity)'\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: ActivityCollection(Activity)\n  nameWithType: ActivityCollection.ActivityCollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.ActivityCollection(Activity)\n  type: Constructor\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.ComponentModel.ActivityCollection\"></xref> class, initializing an owner <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  remarks: Example\n  syntax:\n    content: public ActivityCollection (System.Workflow.ComponentModel.Activity owner);\n    parameters:\n    - id: owner\n      type: System.Workflow.ComponentModel.Activity\n      description: The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> designated as owning this instance.\n  overload: System.Workflow.ComponentModel.ActivityCollection.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>owner</code> is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>owner</code> is not a descendent of <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Add(System.Workflow.ComponentModel.Activity)\n  id: Add(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Add(Activity)\n  nameWithType: ActivityCollection.Add(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Add(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Adds the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to the <xref:System.Collections.ICollection>.\n  remarks: ''\n  example:\n  - \"The following example shows access of the <xref:System.Workflow.ComponentModel.ActivityCollection> which is the member of a composite activity class containing all child activities. This example illustrates the use of Add. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using the ThrowActivity Activity](http://msdn.microsoft.com/en-us/82bc0fef-d78a-4750-82b4-e4cb397a10f1).  \\n  \\n [!code-cs[WF_Samples#179](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#179)]\\n [!code-vb[WF_Samples#179](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#179)]\"\n  syntax:\n    content: public void Add (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to be added to the <xref:System.Collections.ICollection>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Clear\n  id: Clear\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ActivityCollection.Clear()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Clear()\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Removes every <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from the <xref:System.Collections.ICollection>.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Workflow.ComponentModel.ActivityCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Contains(System.Workflow.ComponentModel.Activity)\n  id: Contains(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Contains(Activity)\n  nameWithType: ActivityCollection.Contains(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Contains(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Provides a test for membership of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>.\n  remarks: This <xref:System.Collections.ICollection> is type-safe. A run-time exception is raised if the item is not of type <xref:System.Workflow.ComponentModel.Activity>.\n  syntax:\n    content: public bool Contains (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> being tested for membership.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> belongs to the <xref:System.Collections.ICollection>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Count\n  id: Count\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ActivityCollection.Count\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Count\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets the number of members of the <xref:System.Collections.ICollection>.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of members of the <xref:System.Collections.ICollection>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ActivityCollection.GetEnumerator()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Implements an enumeration interface to the <xref:System.Collections.ICollection>.\n  remarks: \"Enumerators only enable reading the data in the collection. You cannot use enumerators to modify the underlying collection.  \\n  \\n To begin, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A>raises an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> raises an exception.  \\n  \\n To set `Current` to the first element of the collection again, you can call `Reset` followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irreversibly invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or `Reset` raises an <xref:System.InvalidOperationException> . If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> will return the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads could still modify the collection. This causes the enumerator to raise an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Workflow.ComponentModel.Activity> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Workflow.ComponentModel.Activity}\n      description: Returns an enumerator that can iterate through the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance.\n  overload: System.Workflow.ComponentModel.ActivityCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.IndexOf(System.Workflow.ComponentModel.Activity)\n  id: IndexOf(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: IndexOf(Activity)\n  nameWithType: ActivityCollection.IndexOf(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.IndexOf(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets the index of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>.\n  remarks: This collection is type-safe. A run-time exception will be raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.\n  syntax:\n    content: public int IndexOf (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: The activity for which to acquire the index.\n    return:\n      type: System.Int32\n      description: The index of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection>. Otherwise -1 (if <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> is not in the <xref:System.Collections.ICollection>).\n  overload: System.Workflow.ComponentModel.ActivityCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  id: Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Insert(Int32,Activity)\n  nameWithType: ActivityCollection.Insert(Int32,Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Insert(Int32,Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Inserts the item at the index in the <xref:System.Collections.ICollection>.\n  remarks: This <xref:System.Collections.ICollection> is type safe. A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.\n  syntax:\n    content: public void Insert (int index, System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Zero-based index of the collection at which to insert the item.\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: The <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to be inserted into the collection.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ActivityCollection.Item(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets or sets the activity in the <xref:System.Collections.ICollection> based on the index.\n  syntax:\n    content: public System.Workflow.ComponentModel.Activity this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Zero-based index into the <xref:System.Collections.ICollection>.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: A member activity of the <xref:System.Collections.ICollection>, whose index in the <xref:System.Collections.ICollection> was specified in the call.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is not a valid index in <xref:System.Collections.IList>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property is set and the <xref:System.Collections.IList> is read-only.\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: An attempt to set to an <xref:System.Object> that is not an <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: ActivityCollection.Item(String)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets the activity in the <xref:System.Collections.ICollection> based on the string which is a unique key.\n  remarks: If there is no <xref:System.Workflow.ComponentModel.Activity> in the <xref:System.Collections.ICollection> with specified key, an exception is raised.\n  syntax:\n    content: public System.Workflow.ComponentModel.Activity this[string key] { get; }\n    parameters:\n    - id: key\n      type: System.String\n      description: Unique identifier for activity in the <xref:System.Collections.ICollection>.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: A member <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> of the <xref:System.Collections.ICollection>; the key in the <xref:System.Collections.ICollection> which was specified in the call.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.ListChanged\n  id: ListChanged\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: ListChanged\n  nameWithType: ActivityCollection.ListChanged\n  fullName: System.Workflow.ComponentModel.ActivityCollection.ListChanged\n  type: Event\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Raised whenever a change is made to the contents of this <xref:System.Collections.ICollection>.\n  remarks: \"In this context, adding or removing members raises the event. Modifying a member does not raise this event.  \\n  \\n When you create an <xref:System.Workflow.ComponentModel.ActivityCollection> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).\"\n  syntax:\n    content: public event EventHandler<System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs> ListChanged;\n    return:\n      type: System.EventHandler{System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.Remove(System.Workflow.ComponentModel.Activity)\n  id: Remove(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: Remove(Activity)\n  nameWithType: ActivityCollection.Remove(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Remove(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Removes the activity specified in the call from the <xref:System.Collections.ICollection>.\n  remarks: This <xref:System.Collections.ICollection> is type safe. A run-time exception is raised if an item is not of type <xref:System.Workflow.ComponentModel.Activity>.\n  syntax:\n    content: public bool Remove (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: The activity to remove from the <xref:System.Collections.ICollection>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation succeeded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: ActivityCollection.RemoveAt(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Removes the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the <xref:System.Collections.ICollection> at the specified <code>index</code>.\n  remarks: A run-time exception occurs if the index is not valid (out of range).\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Position in a zero-based index to remove the activity from the collection.\n  overload: System.Workflow.ComponentModel.ActivityCollection.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Add(System.Workflow.ComponentModel.Activity)\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Add(System.Workflow.ComponentModel.Activity)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: void ICollection<Activity>.Add (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Clear\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Clear\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: void ICollection<Activity>.Clear ();\n    parameters: []\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Contains(System.Workflow.ComponentModel.Activity)\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Contains(System.Workflow.ComponentModel.Activity)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: bool ICollection<Activity>.Contains (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#CopyTo(System.Workflow.ComponentModel.Activity[],System.Int32)\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#CopyTo(System.Workflow.ComponentModel.Activity[],System.Int32)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(Activity[],Int32)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity[],Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity[],Int32)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: void ICollection<Activity>.CopyTo (System.Workflow.ComponentModel.Activity[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Workflow.ComponentModel.Activity[]\n      description: To be added.\n    - id: arrayIndex\n      type: System.Int32\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Count\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Count\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: int System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#IsReadOnly\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Remove(System.Workflow.ComponentModel.Activity)\n  id: System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Remove(System.Workflow.ComponentModel.Activity)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: bool ICollection<Activity>.Remove (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable{System#Workflow#ComponentModel#Activity}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Workflow#ComponentModel#Activity}#GetEnumerator\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ActivityCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Workflow.ComponentModel.Activity> IEnumerable<Activity>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Workflow.ComponentModel.Activity}\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable<System#Workflow#ComponentModel#Activity>#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#IndexOf(System.Workflow.ComponentModel.Activity)\n  id: System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#IndexOf(System.Workflow.ComponentModel.Activity)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: int IList<Activity>.IndexOf (System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  id: System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32,Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Int32,Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Int32,Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: void IList<Activity>.Insert (int index, System.Workflow.ComponentModel.Activity item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Item(System.Int32)\n  id: System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Item(System.Int32)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Int32)\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: System.Workflow.ComponentModel.Activity System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Int32)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: void IList<Activity>.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ActivityCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The <xref:System.Array> which is the target of the copy operation.\n    - id: index\n      type: System.Int32\n      description: The zero-based index within the <xref:System.Collections.ICollection> where the copy starts.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ActivityCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets a value that indicates whether access to the &lt;xref:System.Collections.Generic.ICollection%601&gt; is synchronized, that is thread-safe.\n  remarks: \"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.Generic.ICollection%601>.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the &lt;xref:System.Collections.Generic.ICollection%601&gt; is synchronized, that is, thread-safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ActivityCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets an object that can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;.\n  remarks: \"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection <xref:System.Collections.ICollection.SyncRoot%2A> property.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot%2A> property of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the &lt;xref:System.Collections.Generic.ICollection%601&gt;.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ActivityCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Returns an <xref:System.Collections.IEnumerator> that iterates through the underlying <xref:System.Collections.IList>.\n  remarks: An <xref:System.Collections.IEnumerator> only allows for reading the data in the collection. You cannot use an <xref:System.Collections.IEnumerator> to modify the underlying collection.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Add(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Adds an object to the <xref:System.Collections.IList> at the end of the <xref:System.Collections.IList>.\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to add to the <xref:System.Collections.IList>.\n    return:\n      type: System.Int32\n      description: \"Returns <xref:System.Int32>.  \\n  \\n The zero-based index of the <xref:System.Object> that was just added.\"\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Clear()\n  nameWithType: ActivityCollection.System.Collections.IList.Clear()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Clear()\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Removes all <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> from the <xref:System.Collections.ICollection>.\n  syntax:\n    content: void IList.Clear ();\n    parameters: []\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets a value that indicates whether the <xref:System.Object> is a member of the collection.\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to locate in the <xref:System.Collections.IList>.\n    return:\n      type: System.Boolean\n      description: Returns <xref:System.Boolean><xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets the zero-based index of the <xref:System.Object> in the underlying activities collection.\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to be indexed.\n    return:\n      type: System.Int32\n      description: The zero-based index of the <code>value</code> in the underlying activities collection or -1 if not found in the collection.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>value</code> is not of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> and the exception object contains \"Error_InvalidListItem\" error message.\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Inserts an <xref:System.Object> into the <xref:System.Collections.IList> at the zero-based index specified.\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based position of the insertion.\n    - id: value\n      type: System.Object\n      description: The object to insert. It must be of type <xref href=\"System.Workflow.ComponentModel.Activity\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: ActivityCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets a value indicating whether the <xref:System.Collections.IList> has a fixed size.\n  remarks: A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IList> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: ActivityCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets a value indicating whether the &lt;xref:System.Collections.Generic.ICollection%601&gt; is read-only.\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Returns <xref:System.Boolean><xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the &lt;xref:System.Collections.Generic.ICollection%601&gt; is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: ActivityCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets or sets the activity in the <xref:System.Collections.ICollection> based on the index.\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Zero-based index into the <xref:System.Collections.ICollection>.\n    return:\n      type: System.Object\n      description: Returns <xref:System.Object>, a member activity of the <xref:System.Collections.ICollection>, whose index in the <xref:System.Collections.ICollection> was specified in the call.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Removes the first occurrence of a specific object from the <xref:System.Collections.IList>.\n  remarks: The elements that follow the removed element move up to occupy the vacated spot.\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to remove from the <xref:System.Collections.IList>.\n  overload: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref:System.Collections.IList> is read-only.  \\n  \\n <xref:System.Collections.IList> has a fixed size.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.Generic.List<System.Workflow.ComponentModel.Activity>\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.Workflow.ComponentModel.ActivityCollection.#ctor(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: ActivityCollection(Activity)\n  nameWithType: ActivityCollection.ActivityCollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.ActivityCollection(Activity)\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.ComponentModel.ActivityCollection.Add(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Add(Activity)\n  nameWithType: ActivityCollection.Add(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Add(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.Clear\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: ActivityCollection.Clear()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Clear()\n- uid: System.Workflow.ComponentModel.ActivityCollection.Contains(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Contains(Activity)\n  nameWithType: ActivityCollection.Contains(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Contains(Activity)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.ComponentModel.ActivityCollection.Count\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Count\n  nameWithType: ActivityCollection.Count\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Workflow.ComponentModel.ActivityCollection.GetEnumerator\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ActivityCollection.GetEnumerator()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Workflow.ComponentModel.Activity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<Activity>\n  nameWithType: IEnumerator<Activity>\n  fullName: System.Collections.Generic.IEnumerator<System.Workflow.ComponentModel.Activity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Workflow.ComponentModel.Activity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Workflow.ComponentModel.Activity\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Workflow.ComponentModel.ActivityCollection.IndexOf(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: IndexOf(Activity)\n  nameWithType: ActivityCollection.IndexOf(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.IndexOf(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Insert(Int32,Activity)\n  nameWithType: ActivityCollection.Insert(Int32,Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Insert(Int32,Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.Item(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ActivityCollection.Item(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Item(Int32)\n- uid: System.Workflow.ComponentModel.ActivityCollection.Item(System.String)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: ActivityCollection.Item(String)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Item(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.ComponentModel.ActivityCollection.ListChanged\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: ListChanged\n  nameWithType: ActivityCollection.ListChanged\n  fullName: System.Workflow.ComponentModel.ActivityCollection.ListChanged\n- uid: System.EventHandler{System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<ActivityCollectionChangeEventArgs>\n  nameWithType: EventHandler<ActivityCollectionChangeEventArgs>\n  fullName: System.EventHandler<System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs\n    name: ActivityCollectionChangeEventArgs\n    nameWithType: ActivityCollectionChangeEventArgs\n    fullName: ActivityCollectionChangeEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Workflow.ComponentModel.ActivityCollection.Remove(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Remove(Activity)\n  nameWithType: ActivityCollection.Remove(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.Remove(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.RemoveAt(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: ActivityCollection.RemoveAt(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.RemoveAt(Int32)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Add(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Clear\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection()\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Contains(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#CopyTo(System.Workflow.ComponentModel.Activity[],System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(Activity[],Int32)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity[],Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity[],Int32)\n- uid: System.Workflow.ComponentModel.Activity[]\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity[]\n  spec.csharp:\n  - uid: System.Workflow.ComponentModel.Activity\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Count\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#IsReadOnly\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{System#Workflow#ComponentModel#Activity}#Remove(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.ICollection(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable{System#Workflow#ComponentModel#Activity}#GetEnumerator\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ActivityCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IEnumerable()\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#IndexOf(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList(Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Insert(System.Int32,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32,Activity)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Int32,Activity)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Int32,Activity)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#Item(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Int32)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{System#Workflow#ComponentModel#Activity}#RemoveAt(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ActivityCollection.System.Collections.Generic.IList(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.Generic.IList(Int32)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ActivityCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ActivityCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ActivityCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ActivityCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Add(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Add(Object)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Clear()\n  nameWithType: ActivityCollection.System.Collections.IList.Clear()\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Clear()\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Contains(Object)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: ActivityCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.IsFixedSize\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: ActivityCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.IsReadOnly\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: ActivityCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Item(Int32)\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: ActivityCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Workflow.ComponentModel.ActivityCollection.System.Collections.IList.Remove(Object)\n- uid: System.Workflow.ComponentModel.ActivityCollection.#ctor*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: ActivityCollection\n  nameWithType: ActivityCollection.ActivityCollection\n- uid: System.Workflow.ComponentModel.ActivityCollection.Add*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Add\n  nameWithType: ActivityCollection.Add\n- uid: System.Workflow.ComponentModel.ActivityCollection.Clear*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Clear\n  nameWithType: ActivityCollection.Clear\n- uid: System.Workflow.ComponentModel.ActivityCollection.Contains*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Contains\n  nameWithType: ActivityCollection.Contains\n- uid: System.Workflow.ComponentModel.ActivityCollection.Count*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Count\n  nameWithType: ActivityCollection.Count\n- uid: System.Workflow.ComponentModel.ActivityCollection.GetEnumerator*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ActivityCollection.GetEnumerator\n- uid: System.Workflow.ComponentModel.ActivityCollection.IndexOf*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: ActivityCollection.IndexOf\n- uid: System.Workflow.ComponentModel.ActivityCollection.Insert*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Insert\n  nameWithType: ActivityCollection.Insert\n- uid: System.Workflow.ComponentModel.ActivityCollection.Item*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Item\n  nameWithType: ActivityCollection.Item\n- uid: System.Workflow.ComponentModel.ActivityCollection.Remove*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: Remove\n  nameWithType: ActivityCollection.Remove\n- uid: System.Workflow.ComponentModel.ActivityCollection.RemoveAt*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: ActivityCollection.RemoveAt\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Add*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Add\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Add\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Clear*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Clear\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Clear\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Contains*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Contains\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Contains\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#CopyTo*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.CopyTo\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.CopyTo\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Count*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Count\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Count\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#IsReadOnly*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.IsReadOnly\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.IsReadOnly\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection<System#Workflow#ComponentModel#Activity>#Remove*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Remove\n  nameWithType: ActivityCollection.System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Remove\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable<System#Workflow#ComponentModel#Activity>#GetEnumerator*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity>.GetEnumerator\n  nameWithType: ActivityCollection.System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity>.GetEnumerator\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#IndexOf*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.IndexOf\n  nameWithType: ActivityCollection.System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.IndexOf\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#Insert*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Insert\n  nameWithType: ActivityCollection.System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Insert\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#Item*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Item\n  nameWithType: ActivityCollection.System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Item\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList<System#Workflow#ComponentModel#Activity>#RemoveAt*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.RemoveAt\n  nameWithType: ActivityCollection.System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.RemoveAt\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ActivityCollection.System.Collections.ICollection.CopyTo\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ActivityCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ActivityCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ActivityCollection.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: ActivityCollection.System.Collections.IList.Add\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Clear\n  nameWithType: ActivityCollection.System.Collections.IList.Clear\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: ActivityCollection.System.Collections.IList.Contains\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: ActivityCollection.System.Collections.IList.IndexOf\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: ActivityCollection.System.Collections.IList.Insert\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: ActivityCollection.System.Collections.IList.IsFixedSize\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: ActivityCollection.System.Collections.IList.IsReadOnly\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: ActivityCollection.System.Collections.IList.Item\n- uid: System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove*\n  parent: System.Workflow.ComponentModel.ActivityCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: ActivityCollection.System.Collections.IList.Remove\n"}