{"nodes":[{"pos":[844,906],"content":"Provides authorization access checking for service operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides authorization access checking for service operations.","pos":[0,62]}]},{"pos":[5653,5762],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.ServiceAuthorizationManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.ServiceAuthorizationManager\"></xref> class."},{"pos":[6489,6542],"content":"Checks authorization for the given operation context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks authorization for the given operation context.","pos":[0,53]}]},{"pos":[6555,7043],"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.       Override CheckAccess if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.       Override CheckAccess if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","pos":[0,484],"nodes":[{"content":"In general, applications should override &lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt; instead of this method.","pos":[0,138],"source":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method."},{"content":"Override CheckAccess if the application associates or introduces a different set of policies for the resulting &lt;xref:System.ServiceModel.ServiceSecurityContext&gt; or provide a different policy evaluation (chaining) model.","pos":[145,364],"source":"       Override CheckAccess if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model."},{"content":"This method is responsible for calling &lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;.","pos":[371,484],"source":"       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>."}]}]},{"pos":[7566,7614],"content":"The <xref:System.ServiceModel.OperationContext>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.OperationContext&gt;.","pos":[0,48],"source":"The <xref:System.ServiceModel.OperationContext>."}]},{"pos":[7673,7917],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access is granted; otherwise; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,167],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[168,244],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[8669,8759],"content":"Checks authorization for the given operation context when access to a message is required.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks authorization for the given operation context when access to a message is required.","pos":[0,90]}]},{"pos":[8772,9553],"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.       Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.       Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","pos":[0,777],"nodes":[{"content":"In general, applications should override &lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt; instead of this method, which should only be used if the authorization decision depends on the message body.","pos":[0,223],"source":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body."},{"content":"Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.","pos":[224,383]},{"content":"Override this method if the application associates or introduces a different set of policies for the resulting &lt;xref:System.ServiceModel.ServiceSecurityContext&gt; and &lt;xref:System.ServiceModel.Channels.Message&gt; or provide a different policy evaluation (chaining) model.","pos":[390,657],"source":"       Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model."},{"content":"This method is responsible for calling &lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;.","pos":[664,777],"source":"       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>."}]}]},{"pos":[10166,10214],"content":"The <xref:System.ServiceModel.OperationContext>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.OperationContext&gt;.","pos":[0,48],"source":"The <xref:System.ServiceModel.OperationContext>."}]},{"pos":[10301,10391],"content":"The <xref:System.ServiceModel.Channels.Message> to be examined to determine authorization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.Message&gt; to be examined to determine authorization.","pos":[0,90],"source":"The <xref:System.ServiceModel.Channels.Message> to be examined to determine authorization."}]},{"pos":[10450,10694],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access is granted; otherwise; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,167],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[168,244],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[11366,11454],"content":"Checks authorization for the given operation context based on default policy evaluation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks authorization for the given operation context based on default policy evaluation.","pos":[0,88]}]},{"pos":[11467,13280],"content":"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.       Override this method to provide custom authorization decisions.       This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.       In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). With this information, the application can perform the authorization decision accordingly.       The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`. The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt; is generally the result from the default policy evaluation.","pos":[0,129],"source":"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation."},{"content":"Override this method to provide custom authorization decisions.","pos":[136,199]},{"content":"This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies.","pos":[206,375]},{"content":"It can also make authorization decisions based on properties of the incoming message: for example, the action header.","pos":[376,493]},{"content":"In this method, the application can use the <ph id=\"ph1\">`operationContext`</ph> parameter to access the caller identity (&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;).","pos":[500,675],"source":"       In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)."},{"content":"By returning the &lt;xref:System.ServiceModel.Channels.RequestContext&gt; object from the &lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt; property, the application can access the entire request message (&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;).","pos":[676,957],"source":" By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>)."},{"content":"By returning the &lt;xref:System.ServiceModel.Channels.MessageHeaders&gt; object from the &lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt; property, the application can access the service URL (&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;) and the operation (&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;).","pos":[958,1305],"source":" By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)."},{"content":"With this information, the application can perform the authorization decision accordingly.","pos":[1306,1396]},{"content":"The claims made by a user are found in the &lt;xref:System.IdentityModel.Claims.ClaimSet&gt; returned by the &lt;xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A&gt; property of the <ph id=\"ph1\">`AuthorizationContext`</ph>.","pos":[1403,1614],"source":"       The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`."},{"content":"The current <ph id=\"ph1\">`AuthorizationContext`</ph> is returned by the &lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt; property of the &lt;xref:System.ServiceModel.OperationContext&gt; class.","pos":[1615,1805],"source":" The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class."}]},{"pos":[13922,14008],"content":"The <xref:System.ServiceModel.OperationContext> for the current authorization request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.OperationContext&gt; for the current authorization request.","pos":[0,86],"source":"The <xref:System.ServiceModel.OperationContext> for the current authorization request."}]},{"pos":[14067,14301],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access is granted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,157],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[158,234],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[15022,15085],"content":"Gets the set of policies that participate in policy evaluation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the set of policies that participate in policy evaluation.","pos":[0,63]}]},{"pos":[15098,15471],"content":"The [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] implementation provides a default set of authorization policies. These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.       You can override this implementation and provide a different set of policies.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> implementation provides a default set of authorization policies.","pos":[0,127],"source":"The [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] implementation provides a default set of authorization policies."},{"content":"These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.","pos":[128,287]},{"content":"You can override this implementation and provide a different set of policies.","pos":[294,371]}]},{"pos":[15807,15892],"content":"The <xref:System.ServiceModel.OperationContext> of the current authorization request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.OperationContext&gt; of the current authorization request.","pos":[0,85],"source":"The <xref:System.ServiceModel.OperationContext> of the current authorization request."}]},{"pos":[16036,16183],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> of type <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of type <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.ServiceAuthorizationManager\n  id: ServiceAuthorizationManager\n  children:\n  - System.ServiceModel.ServiceAuthorizationManager.#ctor\n  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  - System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  - System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  langs:\n  - csharp\n  name: ServiceAuthorizationManager\n  nameWithType: ServiceAuthorizationManager\n  fullName: System.ServiceModel.ServiceAuthorizationManager\n  type: Class\n  summary: Provides authorization access checking for service operations.\n  remarks: \"This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.  \\n  \\n The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] infrastructure each time an attempt to access a resource is made. The method returns `true` or `false` to allow or deny access, respectively.  \\n  \\n The ServiceAuthorizationManager is part of the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]*Identity Model* infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/add/includes/ajax-current-ext-md.md).  \\n  \\n## Custom Authorization  \\n This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.  \\n  \\n In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  \\n  \\n By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  \\n  \\n By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.  \\n  \\n For an example, see [How to: Create a Custom Authorization Manager for a Service](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.  For an example, see [How to: Create a Custom Authorization Policy](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.  For an example, see [How to: Create a Custom Claim](~/add/includes/ajax-current-ext-md.md). To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)] [Custom Authorization](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can set the type of a custom authorization manager using the [\\\\&lt;serviceAuthorization\\\\&gt;](../Topic/%3CserviceAuthorization%3E%20element.md) in a client application configuration file.\"\n  example:\n  - \"The following example shows a class named `MyServiceAuthorizationManager` that inherits from the ServiceAuthorizationManager and overrides the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.  \\n  \\n [!code-cs[c_CustomAuthMgr#2](~/add/codesnippet/csharp/t-system.servicemodel.se_16_1.cs)]\\n [!code-vb[c_CustomAuthMgr#2](~/add/codesnippet/visualbasic/t-system.servicemodel.se_16_1.vb)]\"\n  syntax:\n    content: public class ServiceAuthorizationManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: ServiceAuthorizationManager()\n  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()\n  fullName: System.ServiceModel.ServiceAuthorizationManager.ServiceAuthorizationManager()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.ServiceAuthorizationManager\"></xref> class.\n  syntax:\n    content: public ServiceAuthorizationManager ();\n    parameters: []\n  overload: System.ServiceModel.ServiceAuthorizationManager.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  id: CheckAccess(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: CheckAccess(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Checks authorization for the given operation context.\n  remarks: \"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.  \\n  \\n Override CheckAccess if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.  \\n  \\n This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.\"\n  example:\n  - \"The following code shows how to override this method to enforce custom access control requirements.  \\n  \\n [!code-vb[c_Federation#1](~/add/codesnippet/visualbasic/c7a50227-d4bd-484e-89da-_1.vb)]\\n [!code-cs[c_Federation#1](~/add/codesnippet/csharp/c7a50227-d4bd-484e-89da-_1.cs)]\"\n  syntax:\n    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref:System.ServiceModel.OperationContext>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  id: CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: CheckAccess(OperationContext,Message)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext,Message)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext,Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Checks authorization for the given operation context when access to a message is required.\n  remarks: \"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.  \\n  \\n Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.  \\n  \\n This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.\"\n  example:\n  - \"The following code shows how to override this method to enforce custom access control requirements that require access to the message body.  \\n  \\n [!code-vb[c_Federation#6](~/add/codesnippet/visualbasic/97d69923-0462-4e77-9c7c-_1.vb)]\\n [!code-cs[c_Federation#6](~/add/codesnippet/csharp/97d69923-0462-4e77-9c7c-_1.cs)]\"\n  syntax:\n    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref:System.ServiceModel.OperationContext>.\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The <xref:System.ServiceModel.Channels.Message> to be examined to determine authorization.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  id: CheckAccessCore(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: CheckAccessCore(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Checks authorization for the given operation context based on default policy evaluation.\n  remarks: \"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.  \\n  \\n Override this method to provide custom authorization decisions.  \\n  \\n This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.  \\n  \\n In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). With this information, the application can perform the authorization decision accordingly.  \\n  \\n The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`. The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class.\"\n  example:\n  - \"The following example shows an override of the CheckAccessCore method.  \\n  \\n [!code-cs[c_CustomAuthMgr#6](~/add/codesnippet/csharp/63a6c8ce-190f-4cc1-a5b3-_1.cs)]\\n [!code-vb[c_CustomAuthMgr#6](~/add/codesnippet/visualbasic/63a6c8ce-190f-4cc1-a5b3-_1.vb)]  \\n  \\n For another example, see [How to: Create a Custom Authorization Manager for a Service](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref:System.ServiceModel.OperationContext> for the current authorization request.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access is granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  id: GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: GetAuthorizationPolicies(OperationContext)\n  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets the set of policies that participate in policy evaluation.\n  remarks: \"The [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] implementation provides a default set of authorization policies. These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.  \\n  \\n You can override this implementation and provide a different set of policies.\"\n  syntax:\n    content: protected virtual System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref:System.ServiceModel.OperationContext> of the current authorization request.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}\n      description: A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of type <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref>.\n  overload: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: ServiceAuthorizationManager()\n  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()\n  fullName: System.ServiceModel.ServiceAuthorizationManager.ServiceAuthorizationManager()\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccess(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.OperationContext\n  parent: System.ServiceModel\n  isExternal: true\n  name: OperationContext\n  nameWithType: OperationContext\n  fullName: System.ServiceModel.OperationContext\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccess(OperationContext,Message)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext,Message)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext,Message)\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccessCore(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: GetAuthorizationPolicies(OperationContext)\n  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n  fullName: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<IAuthorizationPolicy>\n  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IdentityModel.Policy.IAuthorizationPolicy\n    name: IAuthorizationPolicy\n    nameWithType: IAuthorizationPolicy\n    fullName: IAuthorizationPolicy\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: ServiceAuthorizationManager\n  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccess\n  nameWithType: ServiceAuthorizationManager.CheckAccess\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccessCore\n  nameWithType: ServiceAuthorizationManager.CheckAccessCore\n- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: GetAuthorizationPolicies\n  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies\n"}