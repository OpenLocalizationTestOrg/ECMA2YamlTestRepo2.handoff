{"nodes":[{"pos":[2431,2508],"content":"Represents a collection that can contain many different types of permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a collection that can contain many different types of permissions.","pos":[0,77]}]},{"pos":[2520,2612],"content":"You can use PermissionSet to perform operations on several different permissions as a group.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use PermissionSet to perform operations on several different permissions as a group.","pos":[0,92]}]},{"pos":[4034,4209],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.PermissionSet\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[4222,4546],"content":"The `Unrestricted` state allows all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface, while `None` allows no permissions.       Use <xref:System.Security.PermissionSet.AddPermission%2A> on an empty <xref:System.Security.PermissionSet> to define the set in greater detail.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`Unrestricted`</ph> state allows all permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface, while <ph id=\"ph2\">`None`</ph> allows no permissions.","pos":[0,172],"source":"The `Unrestricted` state allows all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface, while `None` allows no permissions."},{"content":"Use &lt;xref:System.Security.PermissionSet.AddPermission%2A&gt; on an empty &lt;xref:System.Security.PermissionSet&gt; to define the set in greater detail.","pos":[179,322],"source":"       Use <xref:System.Security.PermissionSet.AddPermission%2A> on an empty <xref:System.Security.PermissionSet> to define the set in greater detail."}]},{"pos":[5372,5458],"content":"One of the enumeration values that specifies the permission set's access to resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the permission set's access to resources.","pos":[0,86]}]},{"pos":[5616,5729],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[6186,6343],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with initial values taken from the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">permSet</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.PermissionSet\"></xref> class with initial values taken from the <code>permSet</code> parameter."},{"pos":[6356,6632],"content":"The new <xref:System.Security.PermissionSet> contains copies of the permissions contained in the specified <xref:System.Security.PermissionSet>.      > [!NOTE] >  This is equivalent to <xref:System.Security.PermissionSet.Copy%2A> when the `permSet` parameter is not `null`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The new &lt;xref:System.Security.PermissionSet&gt; contains copies of the permissions contained in the specified &lt;xref:System.Security.PermissionSet&gt;.","pos":[0,144],"source":"The new <xref:System.Security.PermissionSet> contains copies of the permissions contained in the specified <xref:System.Security.PermissionSet>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This is equivalent to &lt;xref:System.Security.PermissionSet.Copy%2A&gt; when the <ph id=\"ph2\">`permSet`</ph> parameter is not <ph id=\"ph3\">`null`</ph>.","pos":[150,273],"source":"      > [!NOTE] >  This is equivalent to <xref:System.Security.PermissionSet.Copy%2A> when the `permSet` parameter is not `null`."}]},{"pos":[6814,7048],"content":"The set from which to take the value of the new <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to create an empty <bpt id=\"p3\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The set from which to take the value of the new <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to create an empty <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[7570,7656],"content":"Adds a specified permission to the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a specified permission to the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[7668,8182],"content":"If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object. For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a permission of the same type as the added permission already exists in the &lt;xref:System.Security.PermissionSet&gt;, the new permission is the union of the existing permission object and the specified permission object.","pos":[0,219],"source":"If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object."},{"content":"For example, if a permission that implements &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; is added to an &lt;xref:System.Security.Permissions.PermissionState&gt;&lt;xref:System.Security.PermissionSet&gt;, the resulting union is the original <ph id=\"ph1\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt;.","pos":[220,514],"source":" For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>."}]},{"pos":[8940,8962],"content":"The permission to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission to add.","pos":[0,22]}]},{"pos":[9034,9182],"content":"The union of the permission added and any permission of the same type that already exists in the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The union of the permission added and any permission of the same type that already exists in the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[9364,9451],"content":"The method is called from a <bpt id=\"p1\">&lt;xref href=\"System.Security.ReadOnlyPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>."},{"pos":[9927,10013],"content":"Adds a specified permission to the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a specified permission to the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[10026,10669],"content":"The AddPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.AddPermission%2A> method.       If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object. For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The AddPermissionImpl method is the implementation for the &lt;xref:System.Security.PermissionSet.AddPermission%2A&gt; method.","pos":[0,120],"source":"The AddPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.AddPermission%2A> method."},{"content":"If a permission of the same type as the added permission already exists in the &lt;xref:System.Security.PermissionSet&gt;, the new permission is the union of the existing permission object and the specified permission object.","pos":[127,346],"source":"       If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object."},{"content":"For example, if a permission that implements &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; is added to an &lt;xref:System.Security.Permissions.PermissionState&gt;&lt;xref:System.Security.PermissionSet&gt;, the resulting union is the original <ph id=\"ph1\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt;.","pos":[347,641],"source":" For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>."}]},{"pos":[10884,10906],"content":"The permission to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission to add.","pos":[0,22]}]},{"pos":[10978,11276],"content":"The union of the permission added and any permission of the same type that already exists in the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">perm</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The union of the permission added and any permission of the same type that already exists in the <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if <code>perm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11462,11549],"content":"The method is called from a <bpt id=\"p1\">&lt;xref href=\"System.Security.ReadOnlyPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>."},{"pos":[11879,12150],"content":"Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using Assert can create security vulnerabilities.","needQuote":true,"needEscape":true,"nodes":[{"content":"Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using Assert can create security vulnerabilities.","pos":[0,271],"nodes":[{"content":"Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.","pos":[0,221]},{"content":"Using Assert can create security vulnerabilities.","pos":[222,271]}]}]},{"pos":[12163,12864],"content":"This is the only way to assert multiple permissions at the same time within a frame because only one Assert can be active on a frame. Assert is only effective for granted permissions. Call the <xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName> or <xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> method to cancel an active Assert.      > [!CAUTION] >  Because calling the Assert method removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately. Therefore, it should be used with great caution.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is the only way to assert multiple permissions at the same time within a frame because only one Assert can be active on a frame.","pos":[0,133]},{"content":"Assert is only effective for granted permissions.","pos":[134,183]},{"content":"Call the &lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName&gt; or &lt;xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName&gt; method to cancel an active Assert.","pos":[184,397],"source":" Call the <xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName> or <xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> method to cancel an active Assert."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Because calling the Assert method removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.","pos":[403,649],"source":"      > [!CAUTION] >  Because calling the Assert method removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately."},{"content":"Therefore, it should be used with great caution.","pos":[650,698]}]},{"pos":[13108,13304],"content":"The <xref href=\"System.Security.PermissionSet\"></xref> instance asserted has not been granted to the asserting code.       -or-       There is already an active Assert for the current frame.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance asserted has not been granted to the asserting code.","pos":[0,116],"source":"The <xref href=\"System.Security.PermissionSet\"></xref> instance asserted has not been granted to the asserting code."},{"content":"-or-       There is already an active Assert for the current frame.","pos":[123,190]}]},{"pos":[13765,13957],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains permissions that are not derived from <bpt id=\"p2\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Security.PermissionSet\"></xref> contains permissions that are not derived from <xref href=\"System.Security.CodeAccessPermission\"></xref>."},{"pos":[14656,14955],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains permissions that are not derived from <bpt id=\"p3\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.PermissionSet\"></xref> contains permissions that are not derived from <xref href=\"System.Security.CodeAccessPermission\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15594,15725],"content":"Converts an encoded <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from one XML encoding format to another XML encoding format.","needQuote":true,"needEscape":true,"source":"Converts an encoded <xref href=\"System.Security.PermissionSet\"></xref> from one XML encoding format to another XML encoding format."},{"pos":[15737,15760],"content":"Do not use this method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not use this method.","pos":[0,23]}]},{"pos":[15959,16115],"content":"A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".","needQuote":false,"needEscape":true,"nodes":[{"content":"A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".","pos":[0,156],"nodes":[{"content":"A string representing one of the following encoding formats: ASCII, Unicode, or Binary.","pos":[0,87]},{"content":"Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".","pos":[88,156]}]}]},{"pos":[16179,16209],"content":"An XML-encoded permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML-encoded permission set.","pos":[0,30]}]},{"pos":[16276,16432],"content":"A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".","needQuote":false,"needEscape":true,"nodes":[{"content":"A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".","pos":[0,156],"nodes":[{"content":"A string representing one of the following encoding formats: ASCII, Unicode, or Binary.","pos":[0,87]},{"content":"Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".","pos":[88,156]}]}]},{"pos":[16491,16552],"content":"An encrypted permission set with the specified output format.","needQuote":true,"needEscape":true,"nodes":[{"content":"An encrypted permission set with the specified output format.","pos":[0,61]}]},{"pos":[16737,16750],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[17070,17143],"content":"Creates a copy of the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a copy of the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[17155,17335],"content":"A copy of a <xref:System.Security.PermissionSet> represents the same access to resources as the original object. Changes made to the copy do not affect the original permission set.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A copy of a <xref:System.Security.PermissionSet> represents the same access to resources as the original object. Changes made to the copy do not affect the original permission set.","pos":[0,180],"nodes":[{"content":"A copy of a &lt;xref:System.Security.PermissionSet&gt; represents the same access to resources as the original object.","pos":[0,112],"source":"A copy of a <xref:System.Security.PermissionSet> represents the same access to resources as the original object."},{"content":"Changes made to the copy do not affect the original permission set.","pos":[113,180]}]}]},{"pos":[18055,18120],"content":"A copy of the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A copy of the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[18602,18695],"content":"Copies the permission objects of the set to the indicated location in an <xref:System.Array>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the permission objects of the set to the indicated location in an &lt;xref:System.Array&gt;.","pos":[0,93],"source":"Copies the permission objects of the set to the indicated location in an <xref:System.Array>."}]},{"pos":[18848,18882],"content":"The target array to which to copy.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target array to which to copy.","pos":[0,34]}]},{"pos":[18943,19008],"content":"The starting position in the array to begin copying (zero based).","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting position in the array to begin copying (zero based).","pos":[0,65]}]},{"pos":[19175,19272],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>array</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19367,19428],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter has more than one dimension.","needQuote":true,"needEscape":true,"source":"The <code>array</code> parameter has more than one dimension."},{"pos":[19537,19626],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is out of the range of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"The <code>index</code> parameter is out of the range of the <code>array</code> parameter."},{"pos":[19947,20017],"content":"Gets the number of permission objects contained in the permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of permission objects contained in the permission set.","pos":[0,70]}]},{"pos":[20029,20141],"content":"In the <ph id=\"ph1\">`None`</ph> or <ph id=\"ph2\">`Unrestricted`</ph> state this returns zero, because no actual permission object instances are used.","needQuote":true,"needEscape":true,"extradata":"MT","source":"In the `None` or `Unrestricted` state this returns zero, because no actual permission object instances are used."},{"pos":[20828,20929],"content":"The number of permission objects contained in the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of permission objects contained in the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[21325,21499],"content":"Forces a <xref:System.Security.SecurityException> at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forces a &lt;xref:System.Security.SecurityException&gt; at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance.","pos":[0,174],"source":"Forces a <xref:System.Security.SecurityException> at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance."}]},{"pos":[21512,22223],"content":"Use Demand on a <xref:System.Security.PermissionSet> to ensure that all callers have all permissions in the set with one operation.       The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Demand succeeds only if no <xref:System.Security.SecurityException> is thrown.       If the <xref:System.Security.PermissionSet> contains permissions that do not inherit from <xref:System.Security.CodeAccessPermission>, the `Demand` methods of those permissions are called as well.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use Demand on a &lt;xref:System.Security.PermissionSet&gt; to ensure that all callers have all permissions in the set with one operation.","pos":[0,131],"source":"Use Demand on a <xref:System.Security.PermissionSet> to ensure that all callers have all permissions in the set with one operation."},{"content":"The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.","pos":[138,289]},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[290,425]},{"content":"Demand succeeds only if no &lt;xref:System.Security.SecurityException&gt; is thrown.","pos":[426,504],"source":" Demand succeeds only if no <xref:System.Security.SecurityException> is thrown."},{"content":"If the &lt;xref:System.Security.PermissionSet&gt; contains permissions that do not inherit from &lt;xref:System.Security.CodeAccessPermission&gt;, the <ph id=\"ph1\">`Demand`</ph> methods of those permissions are called as well.","pos":[511,707],"source":"       If the <xref:System.Security.PermissionSet> contains permissions that do not inherit from <xref:System.Security.CodeAccessPermission>, the `Demand` methods of those permissions are called as well."}]},{"pos":[23028,23093],"content":"A caller in the call chain does not have the permission demanded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A caller in the call chain does not have the permission demanded.","pos":[0,65]}]},{"pos":[23413,23660],"content":"Causes any &lt;xref:System.Security.PermissionSet.Demand*&gt; that passes through the calling code for a permission that has an intersection with a permission of a type contained in the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fail.","needQuote":true,"needEscape":true,"source":"Causes any <xref:System.Security.PermissionSet.Demand*> that passes through the calling code for a permission that has an intersection with a permission of a type contained in the current <xref href=\"System.Security.PermissionSet\"></xref> to fail."},{"pos":[23673,24570],"content":"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.       Deny can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls Deny from being used to access the resource protected by the denied permission. If a method calls Deny on a permission, and if a <xref:System.Security.PermissionSet.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the Deny.       Deny is ignored for a permission that is not granted because a demand for that permission cannot succeed.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.       Deny can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls Deny from being used to access the resource protected by the denied permission. If a method calls Deny on a permission, and if a <xref:System.Security.PermissionSet.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the Deny.       Deny is ignored for a permission that is not granted because a demand for that permission cannot succeed.","pos":[0,893],"nodes":[{"content":"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.","pos":[0,197]},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[198,333]},{"content":"Deny can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls Deny from being used to access the resource protected by the denied permission.","pos":[340,565]},{"content":"If a method calls Deny on a permission, and if a &lt;xref:System.Security.PermissionSet.Demand%2A&gt; for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the Deny.","pos":[566,781],"source":" If a method calls Deny on a permission, and if a <xref:System.Security.PermissionSet.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the Deny."},{"content":"Deny is ignored for a permission that is not granted because a demand for that permission cannot succeed.","pos":[788,893]}]}]},{"pos":[24809,24900],"content":"A previous call to Deny has already restricted the permissions for the current stack frame.","needQuote":true,"needEscape":true,"nodes":[{"content":"A previous call to Deny has already restricted the permissions for the current stack frame.","pos":[0,91]}]},{"pos":[25278,25503],"content":"Determines whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Security.NamedPermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the specified <xref href=\"System.Security.PermissionSet\"></xref> or <xref href=\"System.Security.NamedPermissionSet\"></xref> object is equal to the current <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[25516,25932],"content":"Equality is determined by the permissions contained in the permission set specified by `obj`. `obj` can be either a <xref:System.Security.PermissionSet> object or a <xref:System.Security.NamedPermissionSet> object. If `obj` is a <xref:System.Security.NamedPermissionSet>, the name and description are ignored.       For more information, see <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Equality is determined by the permissions contained in the permission set specified by <ph id=\"ph1\">`obj`</ph>.","pos":[0,93],"source":"Equality is determined by the permissions contained in the permission set specified by `obj`."},{"content":"<ph id=\"ph1\">`obj`</ph> can be either a &lt;xref:System.Security.PermissionSet&gt; object or a &lt;xref:System.Security.NamedPermissionSet&gt; object.","pos":[94,214],"source":"`obj` can be either a <xref:System.Security.PermissionSet> object or a <xref:System.Security.NamedPermissionSet> object."},{"content":"If <ph id=\"ph1\">`obj`</ph> is a &lt;xref:System.Security.NamedPermissionSet&gt;, the name and description are ignored.","pos":[215,309],"source":" If `obj` is a <xref:System.Security.NamedPermissionSet>, the name and description are ignored."},{"content":"For more information, see &lt;xref:System.Object.Equals%28System.Object%29?displayProperty=fullName&gt;.","pos":[316,414],"source":"       For more information, see <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>."}]},{"pos":[26074,26164],"content":"The object to compare with the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to compare with the current <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[26223,26465],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified object is equal to the current <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified object is equal to the current <xref href=\"System.Security.PermissionSet\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26978,27053],"content":"Reconstructs a security object with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a security object with a specified state from an XML encoding.","pos":[0,75]}]},{"pos":[27765,27824],"content":"The XML encoding to use to reconstruct the security object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the security object.","pos":[0,59]}]},{"pos":[27992,28086],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">et</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>et</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[28182,28332],"content":"The <code>et</code> parameter is not a valid permission element.       -or-       The <code>et</code> parameter's version number is not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">et</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","pos":[0,64],"source":"The <code>et</code> parameter is not a valid permission element."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">et</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not supported.","pos":[71,146],"source":"       -or-       The <code>et</code> parameter's version number is not supported."}]},{"pos":[28698,28751],"content":"Returns an enumerator for the permissions of the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator for the permissions of the set.","pos":[0,53]}]},{"pos":[28763,28845],"content":"Use the enumerator as an index to access individual permission objects in the set.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the enumerator as an index to access individual permission objects in the set.","pos":[0,82]}]},{"pos":[29585,29637],"content":"An enumerator object for the permissions of the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator object for the permissions of the set.","pos":[0,52]}]},{"pos":[30096,30149],"content":"Returns an enumerator for the permissions of the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator for the permissions of the set.","pos":[0,53]}]},{"pos":[30161,30281],"content":"The GetEnumeratorImpl method is the implementation for the <xref:System.Security.PermissionSet.GetEnumerator%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetEnumeratorImpl method is the implementation for the &lt;xref:System.Security.PermissionSet.GetEnumerator%2A&gt; method.","pos":[0,120],"source":"The GetEnumeratorImpl method is the implementation for the <xref:System.Security.PermissionSet.GetEnumerator%2A> method."}]},{"pos":[30469,30521],"content":"An enumerator object for the permissions of the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator object for the permissions of the set.","pos":[0,52]}]},{"pos":[30954,31125],"content":"Gets a hash code for the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is suitable for use in hashing algorithms and data structures such as a hash table.","needQuote":true,"needEscape":true,"source":"Gets a hash code for the <xref href=\"System.Security.PermissionSet\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table."},{"pos":[31137,31310],"content":"The hash code for two instances of the same permission set might be different, so a hash code should not be used to compare two <xref:System.Security.PermissionSet> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The hash code for two instances of the same permission set might be different, so a hash code should not be used to compare two &lt;xref:System.Security.PermissionSet&gt; objects.","pos":[0,173],"source":"The hash code for two instances of the same permission set might be different, so a hash code should not be used to compare two <xref:System.Security.PermissionSet> objects."}]},{"pos":[31445,31531],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Security.PermissionSet\"></xref> object."},{"pos":[32006,32078],"content":"Gets a permission object of the specified type, if it exists in the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a permission object of the specified type, if it exists in the set.","pos":[0,72]}]},{"pos":[32090,32324],"content":"The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>. Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The method returns <ph id=\"ph1\">`null`</ph> for an <ph id=\"ph2\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt;.","pos":[0,84],"source":"The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>."},{"content":"Although an <ph id=\"ph1\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt; effectively contains all permissions, it does not have any actual instances to return.","pos":[85,234],"source":" Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return."}]},{"pos":[32494,32536],"content":"The type of the desired permission object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the desired permission object.","pos":[0,42]}]},{"pos":[32608,32850],"content":"A copy of the permission object of the type specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">permClass</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contained in the <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if none exists.","needQuote":true,"needEscape":true,"source":"A copy of the permission object of the type specified by the <code>permClass</code> parameter contained in the <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if none exists."},{"pos":[33347,33419],"content":"Gets a permission object of the specified type, if it exists in the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a permission object of the specified type, if it exists in the set.","pos":[0,72]}]},{"pos":[33432,33795],"content":"The GetPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.GetPermission%2A> method.       The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>. Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetPermissionImpl method is the implementation for the &lt;xref:System.Security.PermissionSet.GetPermission%2A&gt; method.","pos":[0,120],"source":"The GetPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.GetPermission%2A> method."},{"content":"The method returns <ph id=\"ph1\">`null`</ph> for an <ph id=\"ph2\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt;.","pos":[127,211],"source":"       The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>."},{"content":"Although an <ph id=\"ph1\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt; effectively contains all permissions, it does not have any actual instances to return.","pos":[212,361],"source":" Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return."}]},{"pos":[33981,34015],"content":"The type of the permission object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the permission object.","pos":[0,34]}]},{"pos":[34087,34331],"content":"A copy of the permission object, of the type specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">permClass</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, contained in the <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if none exists.","needQuote":true,"needEscape":true,"source":"A copy of the permission object, of the type specified by the <code>permClass</code> parameter, contained in the <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if none exists."},{"pos":[34855,35052],"content":"Creates and returns a permission set that is the intersection of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a permission set that is the intersection of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[35065,35678],"content":"The intersection of two permission sets is a permission set that describes the set of operations they both describe in common. Specifically, it represents the minimum permissions such that any demand that passes both permission sets also passes their intersection.       For each type of permission that is present in both sets, the two instances of those permissions are intersected using the permission's `Intersect` method; the resulting permission is included in the resulting <xref:System.Security.PermissionSet>. Permission types that exist in only one of the two sets are excluded from the resulting set.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The intersection of two permission sets is a permission set that describes the set of operations they both describe in common.","pos":[0,126]},{"content":"Specifically, it represents the minimum permissions such that any demand that passes both permission sets also passes their intersection.","pos":[127,264]},{"content":"For each type of permission that is present in both sets, the two instances of those permissions are intersected using the permission's <ph id=\"ph1\">`Intersect`</ph> method; the resulting permission is included in the resulting &lt;xref:System.Security.PermissionSet&gt;.","pos":[271,518],"source":"       For each type of permission that is present in both sets, the two instances of those permissions are intersected using the permission's `Intersect` method; the resulting permission is included in the resulting <xref:System.Security.PermissionSet>."},{"content":"Permission types that exist in only one of the two sets are excluded from the resulting set.","pos":[519,611]}]},{"pos":[36400,36498],"content":"A permission set to intersect with the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A permission set to intersect with the current <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[36572,36823],"content":"A new permission set that represents the intersection of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified target. This object is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission set that represents the intersection of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified target.","pos":[0,145],"source":"A new permission set that represents the intersection of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified target."},{"content":"This object is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","pos":[146,251],"source":" This object is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."}]},{"pos":[37228,37324],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Security.PermissionSet\"></xref> is empty."},{"pos":[37336,37610],"content":"A <xref:System.Security.PermissionSet> can be empty and yet contain instances of permissions if those permissions are in the fully-restricted state. Permissions are in a fully restricted state if their `IsSubsetOf` methods return `true` when `null` is passed as a parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Security.PermissionSet&gt; can be empty and yet contain instances of permissions if those permissions are in the fully-restricted state.","pos":[0,148],"source":"A <xref:System.Security.PermissionSet> can be empty and yet contain instances of permissions if those permissions are in the fully-restricted state."},{"content":"Permissions are in a fully restricted state if their <ph id=\"ph1\">`IsSubsetOf`</ph> methods return <ph id=\"ph2\">`true`</ph> when <ph id=\"ph3\">`null`</ph> is passed as a parameter.","pos":[149,274],"source":" Permissions are in a fully restricted state if their `IsSubsetOf` methods return `true` when `null` is passed as a parameter."}]},{"pos":[37735,37938],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.PermissionSet\"></xref> is empty; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[38352,38412],"content":"Gets a value indicating whether the collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the collection is read-only.","pos":[0,60]}]},{"pos":[38424,38519],"content":"A &lt;xref:System.Security.PermissionSet&gt; cannot be read-only, so this property is always <ph id=\"ph1\">`false`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"A <xref:System.Security.PermissionSet> cannot be read-only, so this property is always `false`."},{"pos":[39170,39240],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[39762,39924],"content":"Determines whether the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a subset of the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the current <xref href=\"System.Security.PermissionSet\"></xref> is a subset of the specified <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[39936,40218],"content":"A <xref:System.Security.PermissionSet> is a subset of the target <xref:System.Security.PermissionSet> if all demands that succeed for the <xref:System.Security.PermissionSet> also succeed for the target. That is, the target contains at least the permissions contained in the subset.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.Security.PermissionSet> is a subset of the target <xref:System.Security.PermissionSet> if all demands that succeed for the <xref:System.Security.PermissionSet> also succeed for the target. That is, the target contains at least the permissions contained in the subset.","pos":[0,282],"nodes":[{"content":"A &lt;xref:System.Security.PermissionSet&gt; is a subset of the target &lt;xref:System.Security.PermissionSet&gt; if all demands that succeed for the &lt;xref:System.Security.PermissionSet&gt; also succeed for the target.","pos":[0,203],"source":"A <xref:System.Security.PermissionSet> is a subset of the target <xref:System.Security.PermissionSet> if all demands that succeed for the <xref:System.Security.PermissionSet> also succeed for the target."},{"content":"That is, the target contains at least the permissions contained in the subset.","pos":[204,282]}]}]},{"pos":[40918,41108],"content":"The permission set to test for the subset relationship. This must be either a <xref href=\"System.Security.PermissionSet\"></xref> or a <xref href=\"System.Security.NamedPermissionSet\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission set to test for the subset relationship.","pos":[0,55]},{"content":"This must be either a <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or a <bpt id=\"p2\">&lt;xref href=\"System.Security.NamedPermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[56,190],"source":" This must be either a <xref href=\"System.Security.PermissionSet\"></xref> or a <xref href=\"System.Security.NamedPermissionSet\"></xref>."}]},{"pos":[41167,41418],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is a subset of the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current <xref href=\"System.Security.PermissionSet\"></xref> is a subset of the <code>target</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41855,41934],"content":"Gets a value indicating whether the collection is guaranteed to be thread safe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the collection is guaranteed to be thread safe.","pos":[0,79]}]},{"pos":[41947,42146],"content":"<xref:System.Security.PermissionSet> does not automatically handle thread safety, so this property is always `false`.       This method is required to support <xref:System.Collections.ICollection>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Security.PermissionSet&gt; does not automatically handle thread safety, so this property is always <ph id=\"ph1\">`false`</ph>.","pos":[0,117],"source":"<xref:System.Security.PermissionSet> does not automatically handle thread safety, so this property is always `false`."},{"content":"This method is required to support &lt;xref:System.Collections.ICollection&gt;.","pos":[124,197],"source":"       This method is required to support <xref:System.Collections.ICollection>."}]},{"pos":[42806,42876],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[43321,43475],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Unrestricted\" name=\"Unrestricted\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Security.PermissionSet\"></xref> is <xref uid=\"langword_csharp_Unrestricted\" name=\"Unrestricted\" href=\"\"></xref>."},{"pos":[43487,43666],"content":"An <ph id=\"ph1\">`Unrestricted`</ph>&lt;xref:System.Security.PermissionSet&gt; effectively contains all permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface.","needQuote":true,"needEscape":true,"extradata":"MT","source":"An `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"pos":[44318,44592],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unrestricted\" name=\"Unrestricted\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.PermissionSet\"></xref> is <xref uid=\"langword_csharp_Unrestricted\" name=\"Unrestricted\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[45017,45264],"content":"Causes any &lt;xref:System.Security.PermissionSet.Demand*&gt; that passes through the calling code for any <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is not a subset of the current <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to fail.","needQuote":true,"needEscape":true,"source":"Causes any <xref:System.Security.PermissionSet.Demand*> that passes through the calling code for any <xref href=\"System.Security.PermissionSet\"></xref> that is not a subset of the current <xref href=\"System.Security.PermissionSet\"></xref> to fail."},{"pos":[45277,46362],"content":"PermitOnly is similar to <xref:System.Security.PermissionSet.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.PermissionSet.Deny%2A> specifies permissions that will cause the stack walk to fail, but PermitOnly specifies the only permissions that do not cause the stack walk to fail. Call this method to ensure that your code can be used to access only the specified resources.       PermitOnly is ignored for a permission not granted because a demand for that permission cannot succeed. However, if code lower on the call stack later calls <xref:System.Security.PermissionSet.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call PermitOnly. This is because the code that called PermitOnly has not been granted the permission, even though it called PermitOnly for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"PermitOnly is similar to <xref:System.Security.PermissionSet.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.PermissionSet.Deny%2A> specifies permissions that will cause the stack walk to fail, but PermitOnly specifies the only permissions that do not cause the stack walk to fail. Call this method to ensure that your code can be used to access only the specified resources.       PermitOnly is ignored for a permission not granted because a demand for that permission cannot succeed. However, if code lower on the call stack later calls <xref:System.Security.PermissionSet.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call PermitOnly. This is because the code that called PermitOnly has not been granted the permission, even though it called PermitOnly for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[0,1083],"nodes":[{"content":"PermitOnly is similar to &lt;xref:System.Security.PermissionSet.Deny%2A&gt;, in that both cause stack walks to fail when they would otherwise succeed.","pos":[0,144],"source":"PermitOnly is similar to <xref:System.Security.PermissionSet.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed."},{"content":"The difference is that &lt;xref:System.Security.PermissionSet.Deny%2A&gt; specifies permissions that will cause the stack walk to fail, but PermitOnly specifies the only permissions that do not cause the stack walk to fail.","pos":[145,362],"source":" The difference is that <xref:System.Security.PermissionSet.Deny%2A> specifies permissions that will cause the stack walk to fail, but PermitOnly specifies the only permissions that do not cause the stack walk to fail."},{"content":"Call this method to ensure that your code can be used to access only the specified resources.","pos":[363,456]},{"content":"PermitOnly is ignored for a permission not granted because a demand for that permission cannot succeed.","pos":[463,566]},{"content":"However, if code lower on the call stack later calls &lt;xref:System.Security.PermissionSet.Demand%2A&gt; for that permission, a &lt;xref:System.Security.SecurityException&gt; is thrown when the stack walk reaches the code that tried to call PermitOnly.","pos":[567,808],"source":" However, if code lower on the call stack later calls <xref:System.Security.PermissionSet.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call PermitOnly."},{"content":"This is because the code that called PermitOnly has not been granted the permission, even though it called PermitOnly for that permission.","pos":[809,947]},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[948,1083]}]}]},{"pos":[46921,46973],"content":"Removes a permission of a certain type from the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes a permission of a certain type from the set.","pos":[0,52]}]},{"pos":[46986,47571],"content":"> [!IMPORTANT] >  You cannot remove permissions from an unrestricted permission set. The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.       The following C# code attempts to remove the <xref:System.Security.Permissions.FileIOPermission> from the `FullTrust` permission set, but the permission is not removed.      ```   PolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();   PermissionSet myPermSet = myPol.GetNamedPermissionSet(\"FullTrust\");   myPermSet.RemovePermission(typeof(FileIOPermission));   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  You cannot remove permissions from an unrestricted permission set.","pos":[0,84],"source":"> [!IMPORTANT] >  You cannot remove permissions from an unrestricted permission set."},{"content":"The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.","pos":[85,200]},{"content":"The following C# code attempts to remove the &lt;xref:System.Security.Permissions.FileIOPermission&gt; from the <ph id=\"ph1\">`FullTrust`</ph> permission set, but the permission is not removed.","pos":[207,375],"source":"       The following C# code attempts to remove the <xref:System.Security.Permissions.FileIOPermission> from the `FullTrust` permission set, but the permission is not removed."}]},{"pos":[48356,48389],"content":"The type of permission to delete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of permission to delete.","pos":[0,33]}]},{"pos":[48461,48497],"content":"The permission removed from the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission removed from the set.","pos":[0,36]}]},{"pos":[48682,48769],"content":"The method is called from a <bpt id=\"p1\">&lt;xref href=\"System.Security.ReadOnlyPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>."},{"pos":[49207,49259],"content":"Removes a permission of a certain type from the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes a permission of a certain type from the set.","pos":[0,52]}]},{"pos":[49272,49607],"content":"The RemovePermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.RemovePermission%2A> method.      > [!IMPORTANT] >  You cannot remove permissions from an unrestricted permission set. The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The RemovePermissionImpl method is the implementation for the &lt;xref:System.Security.PermissionSet.RemovePermission%2A&gt; method.","pos":[0,126],"source":"The RemovePermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.RemovePermission%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You cannot remove permissions from an unrestricted permission set.","pos":[132,216],"source":"      > [!IMPORTANT] >  You cannot remove permissions from an unrestricted permission set."},{"content":"The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.","pos":[217,332]}]},{"pos":[49796,49833],"content":"The type of the permission to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the permission to remove.","pos":[0,37]}]},{"pos":[49905,49941],"content":"The permission removed from the set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission removed from the set.","pos":[0,36]}]},{"pos":[50130,50217],"content":"The method is called from a <bpt id=\"p1\">&lt;xref href=\"System.Security.ReadOnlyPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>."},{"pos":[50577,50712],"content":"Causes any previous <xref:System.Security.CodeAccessPermission.Assert*> for the current frame to be removed and no longer be in effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes any previous &lt;xref:System.Security.CodeAccessPermission.Assert*&gt; for the current frame to be removed and no longer be in effect.","pos":[0,135],"source":"Causes any previous <xref:System.Security.CodeAccessPermission.Assert*> for the current frame to be removed and no longer be in effect."}]},{"pos":[50724,50868],"content":"If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there is no &lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt; for the current frame, an &lt;xref:System.ExecutionEngineException&gt; is thrown.","pos":[0,144],"source":"If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown."}]},{"pos":[51127,51222],"content":"There is no previous <xref:System.Security.CodeAccessPermission.Assert*> for the current frame.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no previous &lt;xref:System.Security.CodeAccessPermission.Assert*&gt; for the current frame.","pos":[0,95],"source":"There is no previous <xref:System.Security.CodeAccessPermission.Assert*> for the current frame."}]},{"pos":[51678,51806],"content":"Sets a permission to the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, replacing any existing permission of the same type.","needQuote":true,"needEscape":true,"source":"Sets a permission to the <xref href=\"System.Security.PermissionSet\"></xref>, replacing any existing permission of the same type."},{"pos":[51818,52254],"content":"This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter. If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method removes any existing permission object of the same type from the &lt;xref:System.Security.PermissionSet&gt; and replaces it with the <ph id=\"ph1\">`perm`</ph> parameter.","pos":[0,156],"source":"This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter."},{"content":"If a permission that implements &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; is set on a &lt;xref:System.Security.PermissionSet&gt; that is &lt;xref:System.Security.Permissions.PermissionState&gt;, the resulting &lt;xref:System.Security.PermissionSet&gt; is no longer <ph id=\"ph1\">`Unrestricted`</ph>.","pos":[157,436],"source":" If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`."}]},{"pos":[52975,52997],"content":"The permission to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission to set.","pos":[0,22]}]},{"pos":[53069,53088],"content":"The set permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set permission.","pos":[0,19]}]},{"pos":[53270,53357],"content":"The method is called from a <bpt id=\"p1\">&lt;xref href=\"System.Security.ReadOnlyPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>."},{"pos":[53833,53961],"content":"Sets a permission to the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, replacing any existing permission of the same type.","needQuote":true,"needEscape":true,"source":"Sets a permission to the <xref href=\"System.Security.PermissionSet\"></xref>, replacing any existing permission of the same type."},{"pos":[53974,54539],"content":"The SetPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.SetPermission%2A> method.       This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter. If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SetPermissionImpl method is the implementation for the &lt;xref:System.Security.PermissionSet.SetPermission%2A&gt; method.","pos":[0,120],"source":"The SetPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.SetPermission%2A> method."},{"content":"This method removes any existing permission object of the same type from the &lt;xref:System.Security.PermissionSet&gt; and replaces it with the <ph id=\"ph1\">`perm`</ph> parameter.","pos":[127,283],"source":"       This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter."},{"content":"If a permission that implements &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; is set on a &lt;xref:System.Security.PermissionSet&gt; that is &lt;xref:System.Security.Permissions.PermissionState&gt;, the resulting &lt;xref:System.Security.PermissionSet&gt; is no longer <ph id=\"ph1\">`Unrestricted`</ph>.","pos":[284,563],"source":" If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`."}]},{"pos":[54754,54776],"content":"The permission to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permission to set.","pos":[0,22]}]},{"pos":[54848,54867],"content":"The set permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set permission.","pos":[0,19]}]},{"pos":[55053,55140],"content":"The method is called from a <bpt id=\"p1\">&lt;xref href=\"System.Security.ReadOnlyPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>."},{"pos":[55476,55523],"content":"Gets the root object of the current collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the root object of the current collection.","pos":[0,47]}]},{"pos":[55535,55608],"content":"This method is required to support <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is required to support &lt;xref:System.Collections.ICollection&gt;.","pos":[0,73],"source":"This method is required to support <xref:System.Collections.ICollection>."}]},{"pos":[56290,56332],"content":"The root object of the current collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root object of the current collection.","pos":[0,42]}]},{"pos":[57118,57174],"content":"Runs when the entire object graph has been deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Runs when the entire object graph has been deserialized.","pos":[0,56]}]},{"pos":[57341,57447],"content":"The object that initiated the callback. The functionality for this parameter is not currently implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that initiated the callback. The functionality for this parameter is not currently implemented.","pos":[0,106],"nodes":[{"content":"The object that initiated the callback.","pos":[0,39]},{"content":"The functionality for this parameter is not currently implemented.","pos":[40,106]}]}]},{"pos":[57919,58009],"content":"Returns a string representation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a string representation of the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[58021,58129],"content":"The string representation is useful in debugging to see the state of a <xref:System.Security.PermissionSet>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The string representation is useful in debugging to see the state of a &lt;xref:System.Security.PermissionSet&gt;.","pos":[0,108],"source":"The string representation is useful in debugging to see the state of a <xref:System.Security.PermissionSet>."}]},{"pos":[58782,58857],"content":"A representation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A representation of the <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[59251,59320],"content":"Creates an XML encoding of the security object and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the security object and its current state.","pos":[0,69]}]},{"pos":[60020,60092],"content":"An XML encoding of the security object, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the security object, including any state information.","pos":[0,72]}]},{"pos":[60584,60798],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is the union of the current <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and the specified <bpt id=\"p3\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Security.PermissionSet\"></xref> that is the union of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[60810,61147],"content":"The result of a call to Union is a <xref:System.Security.PermissionSet> that represents all the operations represented by the current <xref:System.Security.PermissionSet> as well as all the operations represented by the specified <xref:System.Security.PermissionSet>. If either set is `Unrestricted`, the union is `Unrestricted` as well.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The result of a call to Union is a &lt;xref:System.Security.PermissionSet&gt; that represents all the operations represented by the current &lt;xref:System.Security.PermissionSet&gt; as well as all the operations represented by the specified &lt;xref:System.Security.PermissionSet&gt;.","pos":[0,267],"source":"The result of a call to Union is a <xref:System.Security.PermissionSet> that represents all the operations represented by the current <xref:System.Security.PermissionSet> as well as all the operations represented by the specified <xref:System.Security.PermissionSet>."},{"content":"If either set is <ph id=\"ph1\">`Unrestricted`</ph>, the union is <ph id=\"ph2\">`Unrestricted`</ph> as well.","pos":[268,337],"source":" If either set is `Unrestricted`, the union is `Unrestricted` as well."}]},{"pos":[61860,61965],"content":"The permission set to form the union with the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The permission set to form the union with the current <xref href=\"System.Security.PermissionSet\"></xref>."},{"pos":[62039,62221],"content":"A new permission set that represents the union of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new permission set that represents the union of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified <xref href=\"System.Security.PermissionSet\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.PermissionSet\n  id: PermissionSet\n  children:\n  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)\n  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)\n  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)\n  - System.Security.PermissionSet.Assert\n  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions\n  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)\n  - System.Security.PermissionSet.Copy\n  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)\n  - System.Security.PermissionSet.Count\n  - System.Security.PermissionSet.Demand\n  - System.Security.PermissionSet.Deny\n  - System.Security.PermissionSet.Equals(System.Object)\n  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)\n  - System.Security.PermissionSet.GetEnumerator\n  - System.Security.PermissionSet.GetEnumeratorImpl\n  - System.Security.PermissionSet.GetHashCode\n  - System.Security.PermissionSet.GetPermission(System.Type)\n  - System.Security.PermissionSet.GetPermissionImpl(System.Type)\n  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)\n  - System.Security.PermissionSet.IsEmpty\n  - System.Security.PermissionSet.IsReadOnly\n  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)\n  - System.Security.PermissionSet.IsSynchronized\n  - System.Security.PermissionSet.IsUnrestricted\n  - System.Security.PermissionSet.PermitOnly\n  - System.Security.PermissionSet.RemovePermission(System.Type)\n  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)\n  - System.Security.PermissionSet.RevertAssert\n  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)\n  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)\n  - System.Security.PermissionSet.SyncRoot\n  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  - System.Security.PermissionSet.ToString\n  - System.Security.PermissionSet.ToXml\n  - System.Security.PermissionSet.Union(System.Security.PermissionSet)\n  langs:\n  - csharp\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n  type: Class\n  summary: Represents a collection that can contain many different types of permissions.\n  remarks: You can use PermissionSet to perform operations on several different permissions as a group.\n  example:\n  - \"The following code example demonstrates the use of the PermissionSet class and members.  \\n  \\n [!code-cs[System.Security.PermissionSet#1](~/add/codesnippet/csharp/t-system.security.permis_22_1.cs)]\\n [!code-vb[System.Security.PermissionSet#1](~/add/codesnippet/visualbasic/t-system.security.permis_22_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#1](~/add/codesnippet/cpp/t-system.security.permis_22_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Runtime.Serialization.IDeserializationCallback\n  - System.Security.ISecurityEncodable\n  - System.Security.IStackWalk\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: PermissionSet(PermissionState)\n  nameWithType: PermissionSet.PermissionSet(PermissionState)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.PermissionSet\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  remarks: \"The `Unrestricted` state allows all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface, while `None` allows no permissions.  \\n  \\n Use <xref:System.Security.PermissionSet.AddPermission%2A> on an empty <xref:System.Security.PermissionSet> to define the set in greater detail.\"\n  example:\n  - \"The following code example shows the use of the PermissionSet constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#2](~/add/codesnippet/csharp/d6be246c-3ec7-45d0-bd17-_1.cs)]\\n [!code-vb[System.Security.PermissionSet#2](~/add/codesnippet/visualbasic/d6be246c-3ec7-45d0-bd17-_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#2](~/add/codesnippet/cpp/d6be246c-3ec7-45d0-bd17-_1.cpp)]\"\n  syntax:\n    content: public PermissionSet (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the enumeration values that specifies the permission set's access to resources.\n  overload: System.Security.PermissionSet.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)\n  id: '#ctor(System.Security.PermissionSet)'\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: PermissionSet(PermissionSet)\n  nameWithType: PermissionSet.PermissionSet(PermissionSet)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.PermissionSet\"></xref> class with initial values taken from the <code>permSet</code> parameter.\n  remarks: \"The new <xref:System.Security.PermissionSet> contains copies of the permissions contained in the specified <xref:System.Security.PermissionSet>.  \\n  \\n> [!NOTE]\\n>  This is equivalent to <xref:System.Security.PermissionSet.Copy%2A> when the `permSet` parameter is not `null`.\"\n  syntax:\n    content: public PermissionSet (System.Security.PermissionSet permSet);\n    parameters:\n    - id: permSet\n      type: System.Security.PermissionSet\n      description: The set from which to take the value of the new <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to create an empty <xref href=\"System.Security.PermissionSet\"></xref>.\n  overload: System.Security.PermissionSet.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)\n  id: AddPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: AddPermission(IPermission)\n  nameWithType: PermissionSet.AddPermission(IPermission)\n  fullName: System.Security.PermissionSet.AddPermission(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Adds a specified permission to the <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object. For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>.\n  example:\n  - \"The following code example shows the use of the AddPermission method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#3](~/add/codesnippet/csharp/m-system.security.permis_25_1.cs)]\\n [!code-vb[System.Security.PermissionSet#3](~/add/codesnippet/visualbasic/m-system.security.permis_25_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#3](~/add/codesnippet/cpp/m-system.security.permis_25_1.cpp)]\"\n  syntax:\n    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: The permission to add.\n    return:\n      type: System.Security.IPermission\n      description: The union of the permission added and any permission of the same type that already exists in the <xref href=\"System.Security.PermissionSet\"></xref>.\n  overload: System.Security.PermissionSet.AddPermission*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)\n  id: AddPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: AddPermissionImpl(IPermission)\n  nameWithType: PermissionSet.AddPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Adds a specified permission to the <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: \"The AddPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.AddPermission%2A> method.  \\n  \\n If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object. For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>.\"\n  syntax:\n    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: The permission to add.\n    return:\n      type: System.Security.IPermission\n      description: The union of the permission added and any permission of the same type that already exists in the <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if <code>perm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.AddPermissionImpl*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Assert\n  id: Assert\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Assert()\n  nameWithType: PermissionSet.Assert()\n  fullName: System.Security.PermissionSet.Assert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using Assert can create security vulnerabilities.\n  remarks: \"This is the only way to assert multiple permissions at the same time within a frame because only one Assert can be active on a frame. Assert is only effective for granted permissions. Call the <xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName> or <xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> method to cancel an active Assert.  \\n  \\n> [!CAUTION]\\n>  Because calling the Assert method removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately. Therefore, it should be used with great caution.\"\n  syntax:\n    content: public void Assert ();\n    parameters: []\n  overload: System.Security.PermissionSet.Assert*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The <xref href=\\\"System.Security.PermissionSet\\\"></xref> instance asserted has not been granted to the asserting code.  \\n  \\n -or-  \\n  \\n There is already an active Assert for the current frame.\"\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions\n  id: ContainsNonCodeAccessPermissions\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ContainsNonCodeAccessPermissions()\n  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()\n  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a value indicating whether the <xref href=\"System.Security.PermissionSet\"></xref> contains permissions that are not derived from <xref href=\"System.Security.CodeAccessPermission\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the ContainsNonCodeAccessPermissions method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#9](~/add/codesnippet/csharp/m-system.security.permis_8_1.cs)]\\n [!code-vb[System.Security.PermissionSet#9](~/add/codesnippet/visualbasic/m-system.security.permis_8_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#9](~/add/codesnippet/cpp/m-system.security.permis_8_1.cpp)]\"\n  syntax:\n    content: public bool ContainsNonCodeAccessPermissions ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.PermissionSet\"></xref> contains permissions that are not derived from <xref href=\"System.Security.CodeAccessPermission\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)\n  id: ConvertPermissionSet(System.String,System.Byte[],System.String)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ConvertPermissionSet(String,Byte[],String)\n  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)\n  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Converts an encoded <xref href=\"System.Security.PermissionSet\"></xref> from one XML encoding format to another XML encoding format.\n  remarks: Do not use this method.\n  syntax:\n    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);\n    parameters:\n    - id: inFormat\n      type: System.String\n      description: 'A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".'\n    - id: inData\n      type: System.Byte[]\n      description: An XML-encoded permission set.\n    - id: outFormat\n      type: System.String\n      description: 'A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are \"XMLASCII\" or \"XML\", \"XMLUNICODE\", and \"BINARY\".'\n    return:\n      type: System.Byte[]\n      description: An encrypted permission set with the specified output format.\n  overload: System.Security.PermissionSet.ConvertPermissionSet*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Copy\n  id: Copy\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PermissionSet.Copy()\n  fullName: System.Security.PermissionSet.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates a copy of the <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: A copy of a <xref:System.Security.PermissionSet> represents the same access to resources as the original object. Changes made to the copy do not affect the original permission set.\n  example:\n  - \"The following code example shows the use of the Copy method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#20](~/add/codesnippet/csharp/m-system.security.permis_23_1.cs)]\\n [!code-vb[System.Security.PermissionSet#20](~/add/codesnippet/visualbasic/m-system.security.permis_23_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#20](~/add/codesnippet/cpp/m-system.security.permis_23_1.cpp)]\"\n  syntax:\n    content: public virtual System.Security.PermissionSet Copy ();\n    parameters: []\n    return:\n      type: System.Security.PermissionSet\n      description: A copy of the <xref href=\"System.Security.PermissionSet\"></xref>.\n  overload: System.Security.PermissionSet.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: PermissionSet.CopyTo(Array,Int32)\n  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Copies the permission objects of the set to the indicated location in an <xref:System.Array>.\n  syntax:\n    content: public virtual void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The target array to which to copy.\n    - id: index\n      type: System.Int32\n      description: The starting position in the array to begin copying (zero based).\n  overload: System.Security.PermissionSet.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>array</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>array</code> parameter has more than one dimension.\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The <code>index</code> parameter is out of the range of the <code>array</code> parameter.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Count\n  id: Count\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Count\n  nameWithType: PermissionSet.Count\n  fullName: System.Security.PermissionSet.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets the number of permission objects contained in the permission set.\n  remarks: In the `None` or `Unrestricted` state this returns zero, because no actual permission object instances are used.\n  example:\n  - \"The following code example shows the use of the Count property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#5](~/add/codesnippet/csharp/p-system.security.permis_23_1.cs)]\\n [!code-vb[System.Security.PermissionSet#5](~/add/codesnippet/visualbasic/p-system.security.permis_23_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#5](~/add/codesnippet/cpp/p-system.security.permis_23_1.cpp)]\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of permission objects contained in the <xref href=\"System.Security.PermissionSet\"></xref>.\n  overload: System.Security.PermissionSet.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Demand\n  id: Demand\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: PermissionSet.Demand()\n  fullName: System.Security.PermissionSet.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Forces a <xref:System.Security.SecurityException> at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance.\n  remarks: \"Use Demand on a <xref:System.Security.PermissionSet> to ensure that all callers have all permissions in the set with one operation.  \\n  \\n The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Demand succeeds only if no <xref:System.Security.SecurityException> is thrown.  \\n  \\n If the <xref:System.Security.PermissionSet> contains permissions that do not inherit from <xref:System.Security.CodeAccessPermission>, the `Demand` methods of those permissions are called as well.\"\n  example:\n  - \"The following code example shows the use of the Demand method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#4](~/add/codesnippet/csharp/m-system.security.permis_17_1.cs)]\\n [!code-vb[System.Security.PermissionSet#4](~/add/codesnippet/visualbasic/m-system.security.permis_17_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#4](~/add/codesnippet/cpp/m-system.security.permis_17_1.cpp)]\"\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  overload: System.Security.PermissionSet.Demand*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller in the call chain does not have the permission demanded.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Deny\n  id: Deny\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Deny()\n  nameWithType: PermissionSet.Deny()\n  fullName: System.Security.PermissionSet.Deny()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Causes any <xref:System.Security.PermissionSet.Demand*> that passes through the calling code for a permission that has an intersection with a permission of a type contained in the current <xref href=\"System.Security.PermissionSet\"></xref> to fail.\n  remarks: \"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \\n  \\n Deny can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls Deny from being used to access the resource protected by the denied permission. If a method calls Deny on a permission, and if a <xref:System.Security.PermissionSet.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the Deny.  \\n  \\n Deny is ignored for a permission that is not granted because a demand for that permission cannot succeed.\"\n  syntax:\n    content: public void Deny ();\n    parameters: []\n  overload: System.Security.PermissionSet.Deny*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A previous call to Deny has already restricted the permissions for the current stack frame.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PermissionSet.Equals(Object)\n  fullName: System.Security.PermissionSet.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether the specified <xref href=\"System.Security.PermissionSet\"></xref> or <xref href=\"System.Security.NamedPermissionSet\"></xref> object is equal to the current <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: \"Equality is determined by the permissions contained in the permission set specified by `obj`. `obj` can be either a <xref:System.Security.PermissionSet> object or a <xref:System.Security.NamedPermissionSet> object. If `obj` is a <xref:System.Security.NamedPermissionSet>, the name and description are ignored.  \\n  \\n For more information, see <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with the current <xref href=\"System.Security.PermissionSet\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified object is equal to the current <xref href=\"System.Security.PermissionSet\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PermissionSet.FromXml(SecurityElement)\n  fullName: System.Security.PermissionSet.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Reconstructs a security object with a specified state from an XML encoding.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_21_1.cs)]\\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_21_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_21_1.cpp)]\"\n  syntax:\n    content: public virtual void FromXml (System.Security.SecurityElement et);\n    parameters:\n    - id: et\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the security object.\n  overload: System.Security.PermissionSet.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>et</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>et</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>et</code> parameter's version number is not supported.\"\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.GetEnumerator\n  id: GetEnumerator\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: PermissionSet.GetEnumerator()\n  fullName: System.Security.PermissionSet.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Returns an enumerator for the permissions of the set.\n  remarks: Use the enumerator as an index to access individual permission objects in the set.\n  example:\n  - \"The following code example shows the use of the GetEnumerator method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#18](~/add/codesnippet/csharp/m-system.security.permis_5_1.cs)]\\n [!code-vb[System.Security.PermissionSet#18](~/add/codesnippet/visualbasic/m-system.security.permis_5_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#18](~/add/codesnippet/cpp/m-system.security.permis_5_1.cpp)]\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator object for the permissions of the set.\n  overload: System.Security.PermissionSet.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.GetEnumeratorImpl\n  id: GetEnumeratorImpl\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetEnumeratorImpl()\n  nameWithType: PermissionSet.GetEnumeratorImpl()\n  fullName: System.Security.PermissionSet.GetEnumeratorImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Returns an enumerator for the permissions of the set.\n  remarks: The GetEnumeratorImpl method is the implementation for the <xref:System.Security.PermissionSet.GetEnumerator%2A> method.\n  syntax:\n    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator object for the permissions of the set.\n  overload: System.Security.PermissionSet.GetEnumeratorImpl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.GetHashCode\n  id: GetHashCode\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PermissionSet.GetHashCode()\n  fullName: System.Security.PermissionSet.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a hash code for the <xref href=\"System.Security.PermissionSet\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.\n  remarks: The hash code for two instances of the same permission set might be different, so a hash code should not be used to compare two <xref:System.Security.PermissionSet> objects.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Security.PermissionSet\"></xref> object.\n  overload: System.Security.PermissionSet.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.GetPermission(System.Type)\n  id: GetPermission(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetPermission(Type)\n  nameWithType: PermissionSet.GetPermission(Type)\n  fullName: System.Security.PermissionSet.GetPermission(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a permission object of the specified type, if it exists in the set.\n  remarks: The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>. Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return.\n  syntax:\n    content: public System.Security.IPermission GetPermission (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: The type of the desired permission object.\n    return:\n      type: System.Security.IPermission\n      description: A copy of the permission object of the type specified by the <code>permClass</code> parameter contained in the <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if none exists.\n  overload: System.Security.PermissionSet.GetPermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)\n  id: GetPermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetPermissionImpl(Type)\n  nameWithType: PermissionSet.GetPermissionImpl(Type)\n  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a permission object of the specified type, if it exists in the set.\n  remarks: \"The GetPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.GetPermission%2A> method.  \\n  \\n The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>. Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return.\"\n  syntax:\n    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: The type of the permission object.\n    return:\n      type: System.Security.IPermission\n      description: A copy of the permission object, of the type specified by the <code>permClass</code> parameter, contained in the <xref href=\"System.Security.PermissionSet\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if none exists.\n  overload: System.Security.PermissionSet.GetPermissionImpl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)\n  id: Intersect(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Intersect(PermissionSet)\n  nameWithType: PermissionSet.Intersect(PermissionSet)\n  fullName: System.Security.PermissionSet.Intersect(PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates and returns a permission set that is the intersection of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: \"The intersection of two permission sets is a permission set that describes the set of operations they both describe in common. Specifically, it represents the minimum permissions such that any demand that passes both permission sets also passes their intersection.  \\n  \\n For each type of permission that is present in both sets, the two instances of those permissions are intersected using the permission's `Intersect` method; the resulting permission is included in the resulting <xref:System.Security.PermissionSet>. Permission types that exist in only one of the two sets are excluded from the resulting set.\"\n  example:\n  - \"The following code example shows the use of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#12](~/add/codesnippet/csharp/m-system.security.permis_10_1.cs)]\\n [!code-vb[System.Security.PermissionSet#12](~/add/codesnippet/visualbasic/m-system.security.permis_10_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#12](~/add/codesnippet/cpp/m-system.security.permis_10_1.cpp)]\"\n  syntax:\n    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);\n    parameters:\n    - id: other\n      type: System.Security.PermissionSet\n      description: A permission set to intersect with the current <xref href=\"System.Security.PermissionSet\"></xref>.\n    return:\n      type: System.Security.PermissionSet\n      description: A new permission set that represents the intersection of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified target. This object is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.PermissionSet.Intersect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.IsEmpty\n  id: IsEmpty\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsEmpty()\n  nameWithType: PermissionSet.IsEmpty()\n  fullName: System.Security.PermissionSet.IsEmpty()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a value indicating whether the <xref href=\"System.Security.PermissionSet\"></xref> is empty.\n  remarks: A <xref:System.Security.PermissionSet> can be empty and yet contain instances of permissions if those permissions are in the fully-restricted state. Permissions are in a fully restricted state if their `IsSubsetOf` methods return `true` when `null` is passed as a parameter.\n  syntax:\n    content: public bool IsEmpty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.PermissionSet\"></xref> is empty; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.IsReadOnly\n  id: IsReadOnly\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: PermissionSet.IsReadOnly\n  fullName: System.Security.PermissionSet.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a value indicating whether the collection is read-only.\n  remarks: A <xref:System.Security.PermissionSet> cannot be read-only, so this property is always `false`.\n  example:\n  - \"The following code example shows the value returned by the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#7](~/add/codesnippet/csharp/p-system.security.permis_22_1.cs)]\\n [!code-vb[System.Security.PermissionSet#7](~/add/codesnippet/visualbasic/p-system.security.permis_22_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#7](~/add/codesnippet/cpp/p-system.security.permis_22_1.cpp)]\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)\n  id: IsSubsetOf(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsSubsetOf(PermissionSet)\n  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)\n  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether the current <xref href=\"System.Security.PermissionSet\"></xref> is a subset of the specified <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: A <xref:System.Security.PermissionSet> is a subset of the target <xref:System.Security.PermissionSet> if all demands that succeed for the <xref:System.Security.PermissionSet> also succeed for the target. That is, the target contains at least the permissions contained in the subset.\n  example:\n  - \"The following code example shows the use of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#11](~/add/codesnippet/csharp/m-system.security.permis_12_1.cs)]\\n [!code-vb[System.Security.PermissionSet#11](~/add/codesnippet/visualbasic/m-system.security.permis_12_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#11](~/add/codesnippet/cpp/m-system.security.permis_12_1.cpp)]\"\n  syntax:\n    content: public bool IsSubsetOf (System.Security.PermissionSet target);\n    parameters:\n    - id: target\n      type: System.Security.PermissionSet\n      description: The permission set to test for the subset relationship. This must be either a <xref href=\"System.Security.PermissionSet\"></xref> or a <xref href=\"System.Security.NamedPermissionSet\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current <xref href=\"System.Security.PermissionSet\"></xref> is a subset of the <code>target</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.IsSubsetOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.IsSynchronized\n  id: IsSynchronized\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: PermissionSet.IsSynchronized\n  fullName: System.Security.PermissionSet.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a value indicating whether the collection is guaranteed to be thread safe.\n  remarks: \"<xref:System.Security.PermissionSet> does not automatically handle thread safety, so this property is always `false`.  \\n  \\n This method is required to support <xref:System.Collections.ICollection>.\"\n  example:\n  - \"The following code example shows the value returned by the IsSynchronized property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#6](~/add/codesnippet/csharp/p-system.security.permis_30_1.cs)]\\n [!code-vb[System.Security.PermissionSet#6](~/add/codesnippet/visualbasic/p-system.security.permis_30_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#6](~/add/codesnippet/cpp/p-system.security.permis_30_1.cpp)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: PermissionSet.IsUnrestricted()\n  fullName: System.Security.PermissionSet.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether the <xref href=\"System.Security.PermissionSet\"></xref> is <xref uid=\"langword_csharp_Unrestricted\" name=\"Unrestricted\" href=\"\"></xref>.\n  remarks: An `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.\n  example:\n  - \"The following code example shows the use of the IsUnrestricted method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#19](~/add/codesnippet/csharp/m-system.security.permis_1_1.cs)]\\n [!code-vb[System.Security.PermissionSet#19](~/add/codesnippet/visualbasic/m-system.security.permis_1_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#19](~/add/codesnippet/cpp/m-system.security.permis_1_1.cpp)]\"\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.PermissionSet\"></xref> is <xref uid=\"langword_csharp_Unrestricted\" name=\"Unrestricted\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.PermissionSet.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.PermitOnly\n  id: PermitOnly\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: PermitOnly()\n  nameWithType: PermissionSet.PermitOnly()\n  fullName: System.Security.PermissionSet.PermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Causes any <xref:System.Security.PermissionSet.Demand*> that passes through the calling code for any <xref href=\"System.Security.PermissionSet\"></xref> that is not a subset of the current <xref href=\"System.Security.PermissionSet\"></xref> to fail.\n  remarks: \"PermitOnly is similar to <xref:System.Security.PermissionSet.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.PermissionSet.Deny%2A> specifies permissions that will cause the stack walk to fail, but PermitOnly specifies the only permissions that do not cause the stack walk to fail. Call this method to ensure that your code can be used to access only the specified resources.  \\n  \\n PermitOnly is ignored for a permission not granted because a demand for that permission cannot succeed. However, if code lower on the call stack later calls <xref:System.Security.PermissionSet.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call PermitOnly. This is because the code that called PermitOnly has not been granted the permission, even though it called PermitOnly for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.\"\n  syntax:\n    content: public void PermitOnly ();\n    parameters: []\n  overload: System.Security.PermissionSet.PermitOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.RemovePermission(System.Type)\n  id: RemovePermission(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: RemovePermission(Type)\n  nameWithType: PermissionSet.RemovePermission(Type)\n  fullName: System.Security.PermissionSet.RemovePermission(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Removes a permission of a certain type from the set.\n  remarks: \"> [!IMPORTANT]\\n>  You cannot remove permissions from an unrestricted permission set. The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.  \\n  \\n The following C# code attempts to remove the <xref:System.Security.Permissions.FileIOPermission> from the `FullTrust` permission set, but the permission is not removed.  \\n  \\n```  \\nPolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();  \\nPermissionSet myPermSet = myPol.GetNamedPermissionSet(\\\"FullTrust\\\");  \\nmyPermSet.RemovePermission(typeof(FileIOPermission));  \\n```\"\n  example:\n  - \"The following code example shows the use of the RemovePermission method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#15](~/add/codesnippet/csharp/m-system.security.permis_22_1.cs)]\\n [!code-vb[System.Security.PermissionSet#15](~/add/codesnippet/visualbasic/m-system.security.permis_22_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#15](~/add/codesnippet/cpp/m-system.security.permis_22_1.cpp)]\"\n  syntax:\n    content: public System.Security.IPermission RemovePermission (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: The type of permission to delete.\n    return:\n      type: System.Security.IPermission\n      description: The permission removed from the set.\n  overload: System.Security.PermissionSet.RemovePermission*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)\n  id: RemovePermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: RemovePermissionImpl(Type)\n  nameWithType: PermissionSet.RemovePermissionImpl(Type)\n  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Removes a permission of a certain type from the set.\n  remarks: \"The RemovePermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.RemovePermission%2A> method.  \\n  \\n> [!IMPORTANT]\\n>  You cannot remove permissions from an unrestricted permission set. The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.\"\n  syntax:\n    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: The type of the permission to remove.\n    return:\n      type: System.Security.IPermission\n      description: The permission removed from the set.\n  overload: System.Security.PermissionSet.RemovePermissionImpl*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.RevertAssert\n  id: RevertAssert\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: RevertAssert()\n  nameWithType: PermissionSet.RevertAssert()\n  fullName: System.Security.PermissionSet.RevertAssert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Causes any previous <xref:System.Security.CodeAccessPermission.Assert*> for the current frame to be removed and no longer be in effect.\n  remarks: If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.\n  syntax:\n    content: public static void RevertAssert ();\n    parameters: []\n  overload: System.Security.PermissionSet.RevertAssert*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no previous <xref:System.Security.CodeAccessPermission.Assert*> for the current frame.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)\n  id: SetPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: SetPermission(IPermission)\n  nameWithType: PermissionSet.SetPermission(IPermission)\n  fullName: System.Security.PermissionSet.SetPermission(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Sets a permission to the <xref href=\"System.Security.PermissionSet\"></xref>, replacing any existing permission of the same type.\n  remarks: This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter. If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`.\n  example:\n  - \"The following code example shows the use of the SetPermission method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#16](~/add/codesnippet/csharp/m-system.security.permis_14_1.cs)]\\n [!code-vb[System.Security.PermissionSet#16](~/add/codesnippet/visualbasic/m-system.security.permis_14_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#16](~/add/codesnippet/cpp/m-system.security.permis_14_1.cpp)]\"\n  syntax:\n    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: The permission to set.\n    return:\n      type: System.Security.IPermission\n      description: The set permission.\n  overload: System.Security.PermissionSet.SetPermission*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)\n  id: SetPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: SetPermissionImpl(IPermission)\n  nameWithType: PermissionSet.SetPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Sets a permission to the <xref href=\"System.Security.PermissionSet\"></xref>, replacing any existing permission of the same type.\n  remarks: \"The SetPermissionImpl method is the implementation for the <xref:System.Security.PermissionSet.SetPermission%2A> method.  \\n  \\n This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter. If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`.\"\n  syntax:\n    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: The permission to set.\n    return:\n      type: System.Security.IPermission\n      description: The set permission.\n  overload: System.Security.PermissionSet.SetPermissionImpl*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called from a <xref href=\"System.Security.ReadOnlyPermissionSet\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.SyncRoot\n  id: SyncRoot\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: PermissionSet.SyncRoot\n  fullName: System.Security.PermissionSet.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets the root object of the current collection.\n  remarks: This method is required to support <xref:System.Collections.ICollection>.\n  example:\n  - \"The following code example shows the use of SyncRoot property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#8](~/add/codesnippet/csharp/p-system.security.permis_29_1.cs)]\\n [!code-vb[System.Security.PermissionSet#8](~/add/codesnippet/visualbasic/p-system.security.permis_29_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#8](~/add/codesnippet/cpp/p-system.security.permis_29_1.cpp)]\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: The root object of the current collection.\n  overload: System.Security.PermissionSet.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  isEii: true\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Runs when the entire object graph has been deserialized.\n  syntax:\n    content: void IDeserializationCallback.OnDeserialization (object sender);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The object that initiated the callback. The functionality for this parameter is not currently implemented.\n  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.ToString\n  id: ToString\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PermissionSet.ToString()\n  fullName: System.Security.PermissionSet.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Returns a string representation of the <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: The string representation is useful in debugging to see the state of a <xref:System.Security.PermissionSet>.\n  example:\n  - \"The following code example shows the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#10](~/add/codesnippet/csharp/m-system.security.permis_16_1.cs)]\\n [!code-vb[System.Security.PermissionSet#10](~/add/codesnippet/visualbasic/m-system.security.permis_16_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#10](~/add/codesnippet/cpp/m-system.security.permis_16_1.cpp)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A representation of the <xref href=\"System.Security.PermissionSet\"></xref>.\n  overload: System.Security.PermissionSet.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.ToXml\n  id: ToXml\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PermissionSet.ToXml()\n  fullName: System.Security.PermissionSet.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates an XML encoding of the security object and its current state.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_2_1.cs)]\\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_2_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_2_1.cpp)]\"\n  syntax:\n    content: public virtual System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the security object, including any state information.\n  overload: System.Security.PermissionSet.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)\n  id: Union(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Union(PermissionSet)\n  nameWithType: PermissionSet.Union(PermissionSet)\n  fullName: System.Security.PermissionSet.Union(PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates a <xref href=\"System.Security.PermissionSet\"></xref> that is the union of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified <xref href=\"System.Security.PermissionSet\"></xref>.\n  remarks: The result of a call to Union is a <xref:System.Security.PermissionSet> that represents all the operations represented by the current <xref:System.Security.PermissionSet> as well as all the operations represented by the specified <xref:System.Security.PermissionSet>. If either set is `Unrestricted`, the union is `Unrestricted` as well.\n  example:\n  - \"The following code example shows the use of the Union method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \\n  \\n [!code-cs[System.Security.PermissionSet#13](~/add/codesnippet/csharp/m-system.security.permis_26_1.cs)]\\n [!code-vb[System.Security.PermissionSet#13](~/add/codesnippet/visualbasic/m-system.security.permis_26_1.vb)]\\n [!code-cpp[System.Security.PermissionSet#13](~/add/codesnippet/cpp/m-system.security.permis_26_1.cpp)]\"\n  syntax:\n    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);\n    parameters:\n    - id: other\n      type: System.Security.PermissionSet\n      description: The permission set to form the union with the current <xref href=\"System.Security.PermissionSet\"></xref>.\n    return:\n      type: System.Security.PermissionSet\n      description: A new permission set that represents the union of the current <xref href=\"System.Security.PermissionSet\"></xref> and the specified <xref href=\"System.Security.PermissionSet\"></xref>.\n  overload: System.Security.PermissionSet.Union*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IndexOutOfRangeException\n  isExternal: true\n  name: System.IndexOutOfRangeException\n- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermissionSet(PermissionState)\n  nameWithType: PermissionSet.PermissionSet(PermissionState)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermissionSet(PermissionSet)\n  nameWithType: PermissionSet.PermissionSet(PermissionSet)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: AddPermission(IPermission)\n  nameWithType: PermissionSet.AddPermission(IPermission)\n  fullName: System.Security.PermissionSet.AddPermission(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: AddPermissionImpl(IPermission)\n  nameWithType: PermissionSet.AddPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)\n- uid: System.Security.PermissionSet.Assert\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Assert()\n  nameWithType: PermissionSet.Assert()\n  fullName: System.Security.PermissionSet.Assert()\n- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ContainsNonCodeAccessPermissions()\n  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()\n  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ConvertPermissionSet(String,Byte[],String)\n  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)\n  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.PermissionSet.Copy\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Copy()\n  nameWithType: PermissionSet.Copy()\n  fullName: System.Security.PermissionSet.Copy()\n- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: PermissionSet.CopyTo(Array,Int32)\n  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.PermissionSet.Count\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Count\n  nameWithType: PermissionSet.Count\n  fullName: System.Security.PermissionSet.Count\n- uid: System.Security.PermissionSet.Demand\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Demand()\n  nameWithType: PermissionSet.Demand()\n  fullName: System.Security.PermissionSet.Demand()\n- uid: System.Security.PermissionSet.Deny\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Deny()\n  nameWithType: PermissionSet.Deny()\n  fullName: System.Security.PermissionSet.Deny()\n- uid: System.Security.PermissionSet.Equals(System.Object)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PermissionSet.Equals(Object)\n  fullName: System.Security.PermissionSet.Equals(Object)\n- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PermissionSet.FromXml(SecurityElement)\n  fullName: System.Security.PermissionSet.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.PermissionSet.GetEnumerator\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: PermissionSet.GetEnumerator()\n  fullName: System.Security.PermissionSet.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Security.PermissionSet.GetEnumeratorImpl\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetEnumeratorImpl()\n  nameWithType: PermissionSet.GetEnumeratorImpl()\n  fullName: System.Security.PermissionSet.GetEnumeratorImpl()\n- uid: System.Security.PermissionSet.GetHashCode\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PermissionSet.GetHashCode()\n  fullName: System.Security.PermissionSet.GetHashCode()\n- uid: System.Security.PermissionSet.GetPermission(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetPermission(Type)\n  nameWithType: PermissionSet.GetPermission(Type)\n  fullName: System.Security.PermissionSet.GetPermission(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetPermissionImpl(Type)\n  nameWithType: PermissionSet.GetPermissionImpl(Type)\n  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)\n- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Intersect(PermissionSet)\n  nameWithType: PermissionSet.Intersect(PermissionSet)\n  fullName: System.Security.PermissionSet.Intersect(PermissionSet)\n- uid: System.Security.PermissionSet.IsEmpty\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsEmpty()\n  nameWithType: PermissionSet.IsEmpty()\n  fullName: System.Security.PermissionSet.IsEmpty()\n- uid: System.Security.PermissionSet.IsReadOnly\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: PermissionSet.IsReadOnly\n  fullName: System.Security.PermissionSet.IsReadOnly\n- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsSubsetOf(PermissionSet)\n  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)\n  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)\n- uid: System.Security.PermissionSet.IsSynchronized\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: PermissionSet.IsSynchronized\n  fullName: System.Security.PermissionSet.IsSynchronized\n- uid: System.Security.PermissionSet.IsUnrestricted\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: PermissionSet.IsUnrestricted()\n  fullName: System.Security.PermissionSet.IsUnrestricted()\n- uid: System.Security.PermissionSet.PermitOnly\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: PermissionSet.PermitOnly()\n  fullName: System.Security.PermissionSet.PermitOnly()\n- uid: System.Security.PermissionSet.RemovePermission(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RemovePermission(Type)\n  nameWithType: PermissionSet.RemovePermission(Type)\n  fullName: System.Security.PermissionSet.RemovePermission(Type)\n- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RemovePermissionImpl(Type)\n  nameWithType: PermissionSet.RemovePermissionImpl(Type)\n  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)\n- uid: System.Security.PermissionSet.RevertAssert\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: PermissionSet.RevertAssert()\n  fullName: System.Security.PermissionSet.RevertAssert()\n- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SetPermission(IPermission)\n  nameWithType: PermissionSet.SetPermission(IPermission)\n  fullName: System.Security.PermissionSet.SetPermission(IPermission)\n- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SetPermissionImpl(IPermission)\n  nameWithType: PermissionSet.SetPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)\n- uid: System.Security.PermissionSet.SyncRoot\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SyncRoot\n  nameWithType: PermissionSet.SyncRoot\n  fullName: System.Security.PermissionSet.SyncRoot\n- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n- uid: System.Security.PermissionSet.ToString\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ToString()\n  nameWithType: PermissionSet.ToString()\n  fullName: System.Security.PermissionSet.ToString()\n- uid: System.Security.PermissionSet.ToXml\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ToXml()\n  nameWithType: PermissionSet.ToXml()\n  fullName: System.Security.PermissionSet.ToXml()\n- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Union(PermissionSet)\n  nameWithType: PermissionSet.Union(PermissionSet)\n  fullName: System.Security.PermissionSet.Union(PermissionSet)\n- uid: System.Security.PermissionSet.#ctor*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet.PermissionSet\n- uid: System.Security.PermissionSet.AddPermission*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: AddPermission\n  nameWithType: PermissionSet.AddPermission\n- uid: System.Security.PermissionSet.AddPermissionImpl*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: AddPermissionImpl\n  nameWithType: PermissionSet.AddPermissionImpl\n- uid: System.Security.PermissionSet.Assert*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Assert\n  nameWithType: PermissionSet.Assert\n- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ContainsNonCodeAccessPermissions\n  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions\n- uid: System.Security.PermissionSet.ConvertPermissionSet*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ConvertPermissionSet\n  nameWithType: PermissionSet.ConvertPermissionSet\n- uid: System.Security.PermissionSet.Copy*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Copy\n  nameWithType: PermissionSet.Copy\n- uid: System.Security.PermissionSet.CopyTo*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: CopyTo\n  nameWithType: PermissionSet.CopyTo\n- uid: System.Security.PermissionSet.Count*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Count\n  nameWithType: PermissionSet.Count\n- uid: System.Security.PermissionSet.Demand*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Demand\n  nameWithType: PermissionSet.Demand\n- uid: System.Security.PermissionSet.Deny*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Deny\n  nameWithType: PermissionSet.Deny\n- uid: System.Security.PermissionSet.Equals*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Equals\n  nameWithType: PermissionSet.Equals\n- uid: System.Security.PermissionSet.FromXml*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: FromXml\n  nameWithType: PermissionSet.FromXml\n- uid: System.Security.PermissionSet.GetEnumerator*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: PermissionSet.GetEnumerator\n- uid: System.Security.PermissionSet.GetEnumeratorImpl*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetEnumeratorImpl\n  nameWithType: PermissionSet.GetEnumeratorImpl\n- uid: System.Security.PermissionSet.GetHashCode*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetHashCode\n  nameWithType: PermissionSet.GetHashCode\n- uid: System.Security.PermissionSet.GetPermission*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetPermission\n  nameWithType: PermissionSet.GetPermission\n- uid: System.Security.PermissionSet.GetPermissionImpl*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetPermissionImpl\n  nameWithType: PermissionSet.GetPermissionImpl\n- uid: System.Security.PermissionSet.Intersect*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Intersect\n  nameWithType: PermissionSet.Intersect\n- uid: System.Security.PermissionSet.IsEmpty*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsEmpty\n  nameWithType: PermissionSet.IsEmpty\n- uid: System.Security.PermissionSet.IsReadOnly*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: PermissionSet.IsReadOnly\n- uid: System.Security.PermissionSet.IsSubsetOf*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: PermissionSet.IsSubsetOf\n- uid: System.Security.PermissionSet.IsSynchronized*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: PermissionSet.IsSynchronized\n- uid: System.Security.PermissionSet.IsUnrestricted*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: PermissionSet.IsUnrestricted\n- uid: System.Security.PermissionSet.PermitOnly*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermitOnly\n  nameWithType: PermissionSet.PermitOnly\n- uid: System.Security.PermissionSet.RemovePermission*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RemovePermission\n  nameWithType: PermissionSet.RemovePermission\n- uid: System.Security.PermissionSet.RemovePermissionImpl*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RemovePermissionImpl\n  nameWithType: PermissionSet.RemovePermissionImpl\n- uid: System.Security.PermissionSet.RevertAssert*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RevertAssert\n  nameWithType: PermissionSet.RevertAssert\n- uid: System.Security.PermissionSet.SetPermission*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SetPermission\n  nameWithType: PermissionSet.SetPermission\n- uid: System.Security.PermissionSet.SetPermissionImpl*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SetPermissionImpl\n  nameWithType: PermissionSet.SetPermissionImpl\n- uid: System.Security.PermissionSet.SyncRoot*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SyncRoot\n  nameWithType: PermissionSet.SyncRoot\n- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n- uid: System.Security.PermissionSet.ToString*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ToString\n  nameWithType: PermissionSet.ToString\n- uid: System.Security.PermissionSet.ToXml*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ToXml\n  nameWithType: PermissionSet.ToXml\n- uid: System.Security.PermissionSet.Union*\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Union\n  nameWithType: PermissionSet.Union\n"}