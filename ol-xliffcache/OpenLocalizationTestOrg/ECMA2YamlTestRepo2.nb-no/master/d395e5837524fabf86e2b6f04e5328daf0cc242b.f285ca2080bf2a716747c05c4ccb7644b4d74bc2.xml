{"nodes":[{"pos":[762,852],"content":"Provides an external process for running add-ins out-of-process from the host application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an external process for running add-ins out-of-process from the host application.","pos":[0,90]}]},{"pos":[865,1639],"content":"To activate an add-in in an external process, pass an AddInProcess object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=fullName> method overload.       The executable that runs the add-in is obtained from one of two files installed with the .NET Framework under the Windows directory. By default, the executable that matches the bits-per-word of the host application is used. If the host is a 64-bit process, AddInProcess.exe is run; otherwise, AddInProcess32.exe is run. To specify the way the executable is selected, use the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor to create the AddInProcess object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To activate an add-in in an external process, pass an AddInProcess object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=fullName> method overload.       The executable that runs the add-in is obtained from one of two files installed with the .NET Framework under the Windows directory. By default, the executable that matches the bits-per-word of the host application is used. If the host is a 64-bit process, AddInProcess.exe is run; otherwise, AddInProcess32.exe is run. To specify the way the executable is selected, use the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor to create the AddInProcess object.","pos":[0,772],"nodes":[{"content":"To activate an add-in in an external process, pass an AddInProcess object to the appropriate &lt;xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=fullName&gt; method overload.","pos":[0,260],"source":"To activate an add-in in an external process, pass an AddInProcess object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=fullName> method overload."},{"content":"The executable that runs the add-in is obtained from one of two files installed with the .NET Framework under the Windows directory.","pos":[267,399]},{"content":"By default, the executable that matches the bits-per-word of the host application is used.","pos":[400,490]},{"content":"If the host is a 64-bit process, AddInProcess.exe is run; otherwise, AddInProcess32.exe is run.","pos":[491,586]},{"content":"To specify the way the executable is selected, use the &lt;xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29&gt; constructor to create the AddInProcess object.","pos":[587,772],"source":" To specify the way the executable is selected, use the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor to create the AddInProcess object."}]}]},{"pos":[2398,2493],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Hosting.AddInProcess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> class."},{"pos":[2505,2830],"content":"This constructor has the same effect as using the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor with the <xref:System.AddIn.Hosting.Platform?displayProperty=fullName> flag, to specify that the process that runs the add-in will have the same bits-per-word as the host process.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor has the same effect as using the &lt;xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29&gt; constructor with the &lt;xref:System.AddIn.Hosting.Platform?displayProperty=fullName&gt; flag, to specify that the process that runs the add-in will have the same bits-per-word as the host process.","pos":[0,325],"source":"This constructor has the same effect as using the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor with the <xref:System.AddIn.Hosting.Platform?displayProperty=fullName> flag, to specify that the process that runs the add-in will have the same bits-per-word as the host process."}]},{"pos":[3425,3590],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Hosting.AddInProcess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying the bits-per-word of the process in which the add-in runs.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> class, specifying the bits-per-word of the process in which the add-in runs."},{"pos":[3603,3970],"content":"The following table shows how <ph id=\"ph1\">`platform`</ph> affects the bits-per-word of the process on different operating systems:      ||32-bit operating system|64-bit operating system|   |-|------------------------------|------------------------------|   |Host|32-bit|Same as the host process|   |AnyCPU|32-bit|64-bit|   |X86|32-bit|32-bit|   |X64|Exception is thrown|64-bit|","needQuote":false,"needEscape":true,"extradata":"MT","source":"The following table shows how `platform` affects the bits-per-word of the process on different operating systems:      ||32-bit operating system|64-bit operating system|   |-|------------------------------|------------------------------|   |Host|32-bit|Same as the host process|   |AnyCPU|32-bit|64-bit|   |X86|32-bit|32-bit|   |X64|Exception is thrown|64-bit|"},{"pos":[4153,4230],"content":"A value that specifies the bits-per-word of the process that runs the add-in.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the bits-per-word of the process that runs the add-in.","pos":[0,77]}]},{"pos":[4409,4559],"content":"The registry entry for the path to the executable (AddInProcess.exe or AddInProcess32.exe) is missing.       -or-       The executable is missing.","needQuote":false,"needEscape":true,"nodes":[{"content":"The registry entry for the path to the executable (AddInProcess.exe or AddInProcess32.exe) is missing.       -or-       The executable is missing.","pos":[0,146],"nodes":[{"content":"The registry entry for the path to the executable (AddInProcess.exe or AddInProcess32.exe) is missing.","pos":[0,102]},{"content":"-or-       The executable is missing.","pos":[109,146]}]}]},{"pos":[4956,5106],"content":"Gets a value that indicates whether the current <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Hosting.AddInProcess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object represents the host application process.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the current <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> object represents the host application process."},{"pos":[5119,5663],"content":"If the value of this property is `true`, the add-in is running in-process with the host application. In that case, using the <xref:System.AddIn.Hosting.AddInProcess.Start%2A> or <xref:System.AddIn.Hosting.AddInProcess.Shutdown%2A> method throws an <xref:System.InvalidOperationException>.      > [!NOTE] >  The <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A?displayProperty=fullName> property returns an <xref:System.AddIn.Hosting.AddInProcess> object that represents the host application process if the add-in is running in-process.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of this property is <ph id=\"ph1\">`true`</ph>, the add-in is running in-process with the host application.","pos":[0,100],"source":"If the value of this property is `true`, the add-in is running in-process with the host application."},{"content":"In that case, using the &lt;xref:System.AddIn.Hosting.AddInProcess.Start%2A&gt; or &lt;xref:System.AddIn.Hosting.AddInProcess.Shutdown%2A&gt; method throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[101,288],"source":" In that case, using the <xref:System.AddIn.Hosting.AddInProcess.Start%2A> or <xref:System.AddIn.Hosting.AddInProcess.Shutdown%2A> method throws an <xref:System.InvalidOperationException>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.AddIn.Hosting.AddInEnvironment.Process%2A?displayProperty=fullName&gt; property returns an &lt;xref:System.AddIn.Hosting.AddInProcess&gt; object that represents the host application process if the add-in is running in-process.","pos":[294,541],"source":"      > [!NOTE] >  The <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A?displayProperty=fullName> property returns an <xref:System.AddIn.Hosting.AddInProcess> object that represents the host application process if the add-in is running in-process."}]},{"pos":[6166,6406],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.AddIn.Hosting.AddInProcess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object corresponds to the current process; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> object corresponds to the current process; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6848,6927],"content":"Gets or sets a value that indicates whether to keep the external process alive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether to keep the external process alive.","pos":[0,79]}]},{"pos":[6939,7075],"content":"Set this property to <ph id=\"ph1\">`false`</ph> to aggressively shut down the external process after the last add-in inside the process has been shut down.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Set this property to `false` to aggressively shut down the external process after the last add-in inside the process has been shut down."},{"pos":[7193,7453],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the external process should be kept alive; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the external process should be kept alive; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,181],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the external process should be kept alive; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[182,260],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[7883,7963],"content":"Gets the bits-per-word of the process in which the out-of-process add-in is run.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the bits-per-word of the process in which the out-of-process add-in is run.","pos":[0,80]}]},{"pos":[7975,8095],"content":"The bits-per-word is set when the <xref:System.AddIn.Hosting.AddInProcess> object is initialized, and cannot be changed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The bits-per-word is set when the &lt;xref:System.AddIn.Hosting.AddInProcess&gt; object is initialized, and cannot be changed.","pos":[0,120],"source":"The bits-per-word is set when the <xref:System.AddIn.Hosting.AddInProcess> object is initialized, and cannot be changed."}]},{"pos":[8247,8301],"content":"The bits-per-word of the process that runs the add-in.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bits-per-word of the process that runs the add-in.","pos":[0,54]}]},{"pos":[8735,8779],"content":"Gets the process ID of the external process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the process ID of the external process.","pos":[0,44]}]},{"pos":[8791,8823],"content":"Use this property for debugging.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this property for debugging.","pos":[0,32]}]},{"pos":[8933,8995],"content":"The process ID, or -1 if the external process has not started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process ID, or -1 if the external process has not started.","pos":[0,62]}]},{"pos":[9429,9470],"content":"Forcibly shuts down the external process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forcibly shuts down the external process.","pos":[0,41]}]},{"pos":[9596,9892],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the external process was running and is successfully shut down; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if there is no active process associated with the <bpt id=\"p3\">&lt;xref href=\"System.AddIn.Hosting.AddInProcess\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the external process was running and is successfully shut down; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if there is no active process associated with the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref>."},{"pos":[10073,10232],"content":"The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.","pos":[0,159],"nodes":[{"content":"The add-in is running in-process with the host application.","pos":[0,59]},{"content":"Starting and stopping the process is allowed only for external processes, not for the host process.","pos":[60,159]}]}]},{"pos":[10605,10735],"content":"Occurs when the process represented by the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Hosting.AddInProcess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is about to be shut down.","needQuote":true,"needEscape":true,"source":"Occurs when the process represented by the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> object is about to be shut down."},{"pos":[10940,10952],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11314,11342],"content":"Starts the external process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts the external process.","pos":[0,28]}]},{"pos":[11465,11663],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the process is successfully started; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the process is already running.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process is successfully started; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the process is already running."},{"pos":[11841,12000],"content":"The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.","pos":[0,159],"nodes":[{"content":"The add-in is running in-process with the host application.","pos":[0,59]},{"content":"Starting and stopping the process is allowed only for external processes, not for the host process.","pos":[60,159]}]}]},{"pos":[12386,12455],"content":"Gets or sets the number of seconds to allow for the process to start.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of seconds to allow for the process to start.","pos":[0,69]}]},{"pos":[12467,12629],"content":"The default value is 10 seconds. This property is usually used during debugging, to increase the startup time for the process that runs the out-of-process add-in.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value is 10 seconds. This property is usually used during debugging, to increase the startup time for the process that runs the out-of-process add-in.","pos":[0,162],"nodes":[{"content":"The default value is 10 seconds.","pos":[0,32]},{"content":"This property is usually used during debugging, to increase the startup time for the process that runs the out-of-process add-in.","pos":[33,162]}]}]},{"pos":[12757,12808],"content":"The number of seconds to allow for process startup.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of seconds to allow for process startup.","pos":[0,51]}]},{"pos":[12995,13026],"content":"The process is already running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process is already running.","pos":[0,31]}]},{"pos":[13141,13182],"content":"The assigned value is less than 0 (zero).","needQuote":true,"needEscape":true,"nodes":[{"content":"The assigned value is less than 0 (zero).","pos":[0,41]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Hosting.AddInProcess\n  id: AddInProcess\n  children:\n  - System.AddIn.Hosting.AddInProcess.#ctor\n  - System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)\n  - System.AddIn.Hosting.AddInProcess.IsCurrentProcess\n  - System.AddIn.Hosting.AddInProcess.KeepAlive\n  - System.AddIn.Hosting.AddInProcess.Platform\n  - System.AddIn.Hosting.AddInProcess.ProcessId\n  - System.AddIn.Hosting.AddInProcess.Shutdown\n  - System.AddIn.Hosting.AddInProcess.ShuttingDown\n  - System.AddIn.Hosting.AddInProcess.Start\n  - System.AddIn.Hosting.AddInProcess.StartupTimeout\n  langs:\n  - csharp\n  name: AddInProcess\n  nameWithType: AddInProcess\n  fullName: System.AddIn.Hosting.AddInProcess\n  type: Class\n  summary: Provides an external process for running add-ins out-of-process from the host application.\n  remarks: \"To activate an add-in in an external process, pass an AddInProcess object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=fullName> method overload.  \\n  \\n The executable that runs the add-in is obtained from one of two files installed with the .NET Framework under the Windows directory. By default, the executable that matches the bits-per-word of the host application is used. If the host is a 64-bit process, AddInProcess.exe is run; otherwise, AddInProcess32.exe is run. To specify the way the executable is selected, use the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor to create the AddInProcess object.\"\n  example:\n  - \"The following example activates an add-in in an external process.  \\n  \\n [!code-vb[AddInP3Host#10](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#10)]\\n [!code-cs[AddInP3Host#10](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#10)]\"\n  syntax:\n    content: public sealed class AddInProcess\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.#ctor\n  id: '#ctor'\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: AddInProcess()\n  nameWithType: AddInProcess.AddInProcess()\n  fullName: System.AddIn.Hosting.AddInProcess.AddInProcess()\n  type: Constructor\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> class.\n  remarks: This constructor has the same effect as using the <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> constructor with the <xref:System.AddIn.Hosting.Platform?displayProperty=fullName> flag, to specify that the process that runs the add-in will have the same bits-per-word as the host process.\n  syntax:\n    content: public AddInProcess ();\n    parameters: []\n  overload: System.AddIn.Hosting.AddInProcess.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)\n  id: '#ctor(System.AddIn.Hosting.Platform)'\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: AddInProcess(Platform)\n  nameWithType: AddInProcess.AddInProcess(Platform)\n  fullName: System.AddIn.Hosting.AddInProcess.AddInProcess(Platform)\n  type: Constructor\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> class, specifying the bits-per-word of the process in which the add-in runs.\n  remarks: \"The following table shows how `platform` affects the bits-per-word of the process on different operating systems:  \\n  \\n||32-bit operating system|64-bit operating system|  \\n|-|------------------------------|------------------------------|  \\n|Host|32-bit|Same as the host process|  \\n|AnyCPU|32-bit|64-bit|  \\n|X86|32-bit|32-bit|  \\n|X64|Exception is thrown|64-bit|\"\n  syntax:\n    content: public AddInProcess (System.AddIn.Hosting.Platform platform);\n    parameters:\n    - id: platform\n      type: System.AddIn.Hosting.Platform\n      description: A value that specifies the bits-per-word of the process that runs the add-in.\n  overload: System.AddIn.Hosting.AddInProcess.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The registry entry for the path to the executable (AddInProcess.exe or AddInProcess32.exe) is missing.  \\n  \\n -or-  \\n  \\n The executable is missing.\"\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.IsCurrentProcess\n  id: IsCurrentProcess\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: IsCurrentProcess\n  nameWithType: AddInProcess.IsCurrentProcess\n  fullName: System.AddIn.Hosting.AddInProcess.IsCurrentProcess\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Gets a value that indicates whether the current <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> object represents the host application process.\n  remarks: \"If the value of this property is `true`, the add-in is running in-process with the host application. In that case, using the <xref:System.AddIn.Hosting.AddInProcess.Start%2A> or <xref:System.AddIn.Hosting.AddInProcess.Shutdown%2A> method throws an <xref:System.InvalidOperationException>.  \\n  \\n> [!NOTE]\\n>  The <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A?displayProperty=fullName> property returns an <xref:System.AddIn.Hosting.AddInProcess> object that represents the host application process if the add-in is running in-process.\"\n  example:\n  - \"The following example activates an add-in in an external process and uses the IsCurrentProcess property to determine whether the add-in is in the same process as the host application process.  \\n  \\n [!code-vb[AddInP3Host#10](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#10)]\\n [!code-cs[AddInP3Host#10](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#10)]\"\n  syntax:\n    content: public bool IsCurrentProcess { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> object corresponds to the current process; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.AddIn.Hosting.AddInProcess.IsCurrentProcess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.KeepAlive\n  id: KeepAlive\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: KeepAlive\n  nameWithType: AddInProcess.KeepAlive\n  fullName: System.AddIn.Hosting.AddInProcess.KeepAlive\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Gets or sets a value that indicates whether to keep the external process alive.\n  remarks: Set this property to `false` to aggressively shut down the external process after the last add-in inside the process has been shut down.\n  syntax:\n    content: public bool KeepAlive { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the external process should be kept alive; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.AddIn.Hosting.AddInProcess.KeepAlive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.Platform\n  id: Platform\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: Platform\n  nameWithType: AddInProcess.Platform\n  fullName: System.AddIn.Hosting.AddInProcess.Platform\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Gets the bits-per-word of the process in which the out-of-process add-in is run.\n  remarks: The bits-per-word is set when the <xref:System.AddIn.Hosting.AddInProcess> object is initialized, and cannot be changed.\n  syntax:\n    content: public System.AddIn.Hosting.Platform Platform { get; }\n    return:\n      type: System.AddIn.Hosting.Platform\n      description: The bits-per-word of the process that runs the add-in.\n  overload: System.AddIn.Hosting.AddInProcess.Platform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.ProcessId\n  id: ProcessId\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: ProcessId\n  nameWithType: AddInProcess.ProcessId\n  fullName: System.AddIn.Hosting.AddInProcess.ProcessId\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Gets the process ID of the external process.\n  remarks: Use this property for debugging.\n  syntax:\n    content: public int ProcessId { get; }\n    return:\n      type: System.Int32\n      description: The process ID, or -1 if the external process has not started.\n  overload: System.AddIn.Hosting.AddInProcess.ProcessId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.Shutdown\n  id: Shutdown\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: Shutdown()\n  nameWithType: AddInProcess.Shutdown()\n  fullName: System.AddIn.Hosting.AddInProcess.Shutdown()\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Forcibly shuts down the external process.\n  syntax:\n    content: public bool Shutdown ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the external process was running and is successfully shut down; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if there is no active process associated with the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref>.\n  overload: System.AddIn.Hosting.AddInProcess.Shutdown*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.ShuttingDown\n  id: ShuttingDown\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: ShuttingDown\n  nameWithType: AddInProcess.ShuttingDown\n  fullName: System.AddIn.Hosting.AddInProcess.ShuttingDown\n  type: Event\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Occurs when the process represented by the <xref href=\"System.AddIn.Hosting.AddInProcess\"></xref> object is about to be shut down.\n  syntax:\n    content: public event EventHandler<System.ComponentModel.CancelEventArgs> ShuttingDown;\n    return:\n      type: System.EventHandler{System.ComponentModel.CancelEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.Start\n  id: Start\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: AddInProcess.Start()\n  fullName: System.AddIn.Hosting.AddInProcess.Start()\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Starts the external process.\n  syntax:\n    content: public bool Start ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process is successfully started; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the process is already running.\n  overload: System.AddIn.Hosting.AddInProcess.Start*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The add-in is running in-process with the host application. Starting and stopping the process is allowed only for external processes, not for the host process.\n  platform:\n  - net462\n- uid: System.AddIn.Hosting.AddInProcess.StartupTimeout\n  id: StartupTimeout\n  parent: System.AddIn.Hosting.AddInProcess\n  langs:\n  - csharp\n  name: StartupTimeout\n  nameWithType: AddInProcess.StartupTimeout\n  fullName: System.AddIn.Hosting.AddInProcess.StartupTimeout\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Hosting\n  summary: Gets or sets the number of seconds to allow for the process to start.\n  remarks: The default value is 10 seconds. This property is usually used during debugging, to increase the startup time for the process that runs the out-of-process add-in.\n  syntax:\n    content: public TimeSpan StartupTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The number of seconds to allow for process startup.\n  overload: System.AddIn.Hosting.AddInProcess.StartupTimeout*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The process is already running.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The assigned value is less than 0 (zero).\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.AddIn.Hosting.AddInProcess.#ctor\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: AddInProcess()\n  nameWithType: AddInProcess.AddInProcess()\n  fullName: System.AddIn.Hosting.AddInProcess.AddInProcess()\n- uid: System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: AddInProcess(Platform)\n  nameWithType: AddInProcess.AddInProcess(Platform)\n  fullName: System.AddIn.Hosting.AddInProcess.AddInProcess(Platform)\n- uid: System.AddIn.Hosting.Platform\n  parent: System.AddIn.Hosting\n  isExternal: false\n  name: Platform\n  nameWithType: Platform\n  fullName: System.AddIn.Hosting.Platform\n- uid: System.AddIn.Hosting.AddInProcess.IsCurrentProcess\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: IsCurrentProcess\n  nameWithType: AddInProcess.IsCurrentProcess\n  fullName: System.AddIn.Hosting.AddInProcess.IsCurrentProcess\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Hosting.AddInProcess.KeepAlive\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: KeepAlive\n  nameWithType: AddInProcess.KeepAlive\n  fullName: System.AddIn.Hosting.AddInProcess.KeepAlive\n- uid: System.AddIn.Hosting.AddInProcess.Platform\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: Platform\n  nameWithType: AddInProcess.Platform\n  fullName: System.AddIn.Hosting.AddInProcess.Platform\n- uid: System.AddIn.Hosting.AddInProcess.ProcessId\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: ProcessId\n  nameWithType: AddInProcess.ProcessId\n  fullName: System.AddIn.Hosting.AddInProcess.ProcessId\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AddIn.Hosting.AddInProcess.Shutdown\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: Shutdown()\n  nameWithType: AddInProcess.Shutdown()\n  fullName: System.AddIn.Hosting.AddInProcess.Shutdown()\n- uid: System.AddIn.Hosting.AddInProcess.ShuttingDown\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: ShuttingDown\n  nameWithType: AddInProcess.ShuttingDown\n  fullName: System.AddIn.Hosting.AddInProcess.ShuttingDown\n- uid: System.EventHandler{System.ComponentModel.CancelEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<CancelEventArgs>\n  nameWithType: EventHandler<CancelEventArgs>\n  fullName: System.EventHandler<System.ComponentModel.CancelEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.ComponentModel.CancelEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.CancelEventArgs\n    name: CancelEventArgs\n    nameWithType: CancelEventArgs\n    fullName: CancelEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.AddIn.Hosting.AddInProcess.Start\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: Start()\n  nameWithType: AddInProcess.Start()\n  fullName: System.AddIn.Hosting.AddInProcess.Start()\n- uid: System.AddIn.Hosting.AddInProcess.StartupTimeout\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: StartupTimeout\n  nameWithType: AddInProcess.StartupTimeout\n  fullName: System.AddIn.Hosting.AddInProcess.StartupTimeout\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.AddIn.Hosting.AddInProcess.#ctor*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: AddInProcess\n  nameWithType: AddInProcess.AddInProcess\n- uid: System.AddIn.Hosting.AddInProcess.IsCurrentProcess*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: IsCurrentProcess\n  nameWithType: AddInProcess.IsCurrentProcess\n- uid: System.AddIn.Hosting.AddInProcess.KeepAlive*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: KeepAlive\n  nameWithType: AddInProcess.KeepAlive\n- uid: System.AddIn.Hosting.AddInProcess.Platform*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: Platform\n  nameWithType: AddInProcess.Platform\n- uid: System.AddIn.Hosting.AddInProcess.ProcessId*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: ProcessId\n  nameWithType: AddInProcess.ProcessId\n- uid: System.AddIn.Hosting.AddInProcess.Shutdown*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: Shutdown\n  nameWithType: AddInProcess.Shutdown\n- uid: System.AddIn.Hosting.AddInProcess.Start*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: Start\n  nameWithType: AddInProcess.Start\n- uid: System.AddIn.Hosting.AddInProcess.StartupTimeout*\n  parent: System.AddIn.Hosting.AddInProcess\n  isExternal: false\n  name: StartupTimeout\n  nameWithType: AddInProcess.StartupTimeout\n"}