{"nodes":[{"pos":[2077,2240],"content":"Represents a large object binary (<xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>) data type stored on an Oracle server. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a large object binary (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) data type stored on an Oracle server.","pos":[0,131],"source":"Represents a large object binary (<xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>) data type stored on an Oracle server."},{"content":"This class cannot be inherited.","pos":[132,163]}]},{"pos":[2253,7288],"content":"An OracleLob differs from an <xref:System.Data.OracleClient.OracleBFile> in that the data is stored on the server instead of in a physical file in the operating system. It can also be a read-write object, unlike an <xref:System.Data.OracleClient.OracleBFile>, which is always read-only.       An OracleLob may be one of these <xref:System.Data.OracleClient.OracleType> data types.      |OracleType data type|Description|   |--------------------------|-----------------|   |`Blob`|An Oracle `BLOB` data type that contains binary data with a maximum size of 4 gigabytes (GB). This maps to an <xref:System.Array> of type <xref:System.Byte>.|   |`Clob`|An Oracle `CLOB` data type that contains character data, based on the default character set on the server, with a maximum size of 4 GB. This maps to <xref:System.String>.|   |`NClob`|An Oracle `NCLOB` data type that contains character data, based on the national character set on the server with a maximum size of 4 GB. This maps to <xref:System.String>.|       A .NET application developer can retrieve the Oracle `LOB` values into basic .NET data types, such as <xref:System.Array> of type <xref:System.Byte> and <xref:System.String>, or the specialized OracleLob data type. The OracleLob class supports reading data from and writing to the Oracle `LOB` in the Oracle database.       The following are the main characteristics of an OracleLob data type that distinguish it from basic .NET data types:      -   After you retrieve the Oracle `LOB` value from the Oracle database into the OracleLob class, you can change the `LOB` data in an open transaction and your changes are directly reflected to the database. If you retrieve the Oracle `LOB` value into an <xref:System.Array> of type <xref:System.Byte> or <xref:System.String> and update these arrays, your changes are not reflected to the database.      -   When you use the OracleLob class to access a chunk of a `LOB` value, only that chunk is passed from the Oracle database to the client. When you use the <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> method to access a chunk of a `LOB` value, the entire contents of the value are passed from the Oracle database to the client.       To obtain an OracleLob object, call the <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> method.       You can construct an OracleLob that is NULL using this format:      ```   OracleLob myLob = OracleLob.Null;   ```       This technique is used primarily to test whether a `LOB` returned from the server is NULL, as this example illustrates:      ```   If(myLob == OracleLob.Null)   ```       A NULL `LOB` behaves similarly to a zero-byte `LOB` in that <xref:System.Data.OracleClient.OracleLob.Read%2A> succeeds and always returns zero bytes.       Selecting a `LOB` column that contains a null value returns <xref:System.Data.OracleClient.OracleLob.Null>.       You must begin a transaction before obtaining a temporary `LOB`. Otherwise, the <xref:System.Data.OracleClient.OracleDataReader> may fail to obtain data later.       You can also open a temporary `LOB` in Oracle by calling the DBMS_LOB.CREATETEMPORARY system stored procedure and binding a `LOB` output parameter. On the client side, a temporary `LOB` behaves like a table-based `LOB`. For example, to update the temporary `LOB`, it must be enclosed in a transaction.       The following C# example demonstrates how to open a temporary `LOB`.      ```   OracleConnection connection = new OracleConnection(\"server=MyServer; integrated security=yes;\");   connection.Open();   OracleTransaction transaction = connection.BeginTransaction();   OracleCommand command = connection.CreateCommand();   command.Transaction = transaction;   command.CommandText = \"declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;\";   command.Parameters.Add(new OracleParameter(\"tempblob\", OracleType.Blob)).Direction = ParameterDirection.Output;   command.ExecuteNonQuery();   OracleLob tempLob = (OracleLob)command.Parameters[0].Value;   byte[] tempbuff = new byte[10000];   tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);   tempLob.Write(tempbuff,0,tempbuff.Length);   tempLob.EndBatch();   command.Parameters.Clear();   command.CommandText = \"MyTable.MyProc\";   command.CommandType = CommandType.StoredProcedure;     command.Parameters.Add(new OracleParameter(\"ImportDoc\", OracleType.Blob)).Value = tempLob;   command.ExecuteNonQuery();   transaction.Commit();   connection.Close   ```      > [!NOTE] >  The inherited <xref:System.IO.Stream.WriteByte%2A> method fails if used with character data, and an <xref:System.InvalidOperationException> is thrown. Use the <xref:System.Data.OracleClient.OracleLob.Write%2A> method instead.   >    >  Temporary `LOB`s are only closed when the connection is closed, but with pooling and under load, temporary `LOB`s do not close. This can be resolved by disposing the temporary `LOB`, by invoking `tempLob.Dispose()`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An OracleLob differs from an &lt;xref:System.Data.OracleClient.OracleBFile&gt; in that the data is stored on the server instead of in a physical file in the operating system.","pos":[0,168],"source":"An OracleLob differs from an <xref:System.Data.OracleClient.OracleBFile> in that the data is stored on the server instead of in a physical file in the operating system."},{"content":"It can also be a read-write object, unlike an &lt;xref:System.Data.OracleClient.OracleBFile&gt;, which is always read-only.","pos":[169,286],"source":" It can also be a read-write object, unlike an <xref:System.Data.OracleClient.OracleBFile>, which is always read-only."},{"content":"An OracleLob may be one of these &lt;xref:System.Data.OracleClient.OracleType&gt; data types.","pos":[293,380],"source":"       An OracleLob may be one of these <xref:System.Data.OracleClient.OracleType> data types."},{"content":"|OracleType data type|Description|   |--------------------------|-----------------|   |<ph id=\"ph1\">`Blob`</ph>|An Oracle <ph id=\"ph2\">`BLOB`</ph> data type that contains binary data with a maximum size of 4 gigabytes (GB).","pos":[386,573],"source":"      |OracleType data type|Description|   |--------------------------|-----------------|   |`Blob`|An Oracle `BLOB` data type that contains binary data with a maximum size of 4 gigabytes (GB)."},{"content":"This maps to an &lt;xref:System.Array&gt; of type &lt;xref:System.Byte&gt;.|   |<ph id=\"ph1\">`Clob`</ph>|An Oracle <ph id=\"ph2\">`CLOB`</ph> data type that contains character data, based on the default character set on the server, with a maximum size of 4 GB.","pos":[574,784],"source":" This maps to an <xref:System.Array> of type <xref:System.Byte>.|   |`Clob`|An Oracle `CLOB` data type that contains character data, based on the default character set on the server, with a maximum size of 4 GB."},{"content":"This maps to &lt;xref:System.String&gt;.|   |<ph id=\"ph1\">`NClob`</ph>|An Oracle <ph id=\"ph2\">`NCLOB`</ph> data type that contains character data, based on the national character set on the server with a maximum size of 4 GB.","pos":[785,968],"source":" This maps to <xref:System.String>.|   |`NClob`|An Oracle `NCLOB` data type that contains character data, based on the national character set on the server with a maximum size of 4 GB."},{"content":"This maps to &lt;xref:System.String&gt;.|       A .NET application developer can retrieve the Oracle <ph id=\"ph1\">`LOB`</ph> values into basic .NET data types, such as &lt;xref:System.Array&gt; of type &lt;xref:System.Byte&gt; and &lt;xref:System.String&gt;, or the specialized OracleLob data type.","pos":[969,1225],"source":" This maps to <xref:System.String>.|       A .NET application developer can retrieve the Oracle `LOB` values into basic .NET data types, such as <xref:System.Array> of type <xref:System.Byte> and <xref:System.String>, or the specialized OracleLob data type."},{"content":"The OracleLob class supports reading data from and writing to the Oracle <ph id=\"ph1\">`LOB`</ph> in the Oracle database.","pos":[1226,1328],"source":" The OracleLob class supports reading data from and writing to the Oracle `LOB` in the Oracle database."},{"content":"The following are the main characteristics of an OracleLob data type that distinguish it from basic .NET data types:      -   After you retrieve the Oracle <ph id=\"ph1\">`LOB`</ph> value from the Oracle database into the OracleLob class, you can change the <ph id=\"ph2\">`LOB`</ph> data in an open transaction and your changes are directly reflected to the database.","pos":[1335,1663],"source":"       The following are the main characteristics of an OracleLob data type that distinguish it from basic .NET data types:      -   After you retrieve the Oracle `LOB` value from the Oracle database into the OracleLob class, you can change the `LOB` data in an open transaction and your changes are directly reflected to the database."},{"content":"If you retrieve the Oracle <ph id=\"ph1\">`LOB`</ph> value into an &lt;xref:System.Array&gt; of type &lt;xref:System.Byte&gt; or &lt;xref:System.String&gt; and update these arrays, your changes are not reflected to the database.","pos":[1664,1854],"source":" If you retrieve the Oracle `LOB` value into an <xref:System.Array> of type <xref:System.Byte> or <xref:System.String> and update these arrays, your changes are not reflected to the database."},{"content":"-   When you use the OracleLob class to access a chunk of a <ph id=\"ph1\">`LOB`</ph> value, only that chunk is passed from the Oracle database to the client.","pos":[1860,1998],"source":"      -   When you use the OracleLob class to access a chunk of a `LOB` value, only that chunk is passed from the Oracle database to the client."},{"content":"When you use the &lt;xref:System.Data.OracleClient.OracleDataReader.GetChars%2A&gt; method to access a chunk of a <ph id=\"ph1\">`LOB`</ph> value, the entire contents of the value are passed from the Oracle database to the client.","pos":[1999,2203],"source":" When you use the <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> method to access a chunk of a `LOB` value, the entire contents of the value are passed from the Oracle database to the client."},{"content":"To obtain an OracleLob object, call the &lt;xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A&gt; method.","pos":[2210,2322],"source":"       To obtain an OracleLob object, call the <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> method."},{"content":"You can construct an OracleLob that is NULL using this format:      <ph id=\"ph1\">```   OracleLob myLob = OracleLob.Null;   ```</ph>       This technique is used primarily to test whether a <ph id=\"ph2\">`LOB`</ph> returned from the server is NULL, as this example illustrates:      <ph id=\"ph3\">```   If(myLob == OracleLob.Null)   ```</ph>       A NULL <ph id=\"ph4\">`LOB`</ph> behaves similarly to a zero-byte <ph id=\"ph5\">`LOB`</ph> in that &lt;xref:System.Data.OracleClient.OracleLob.Read%2A&gt; succeeds and always returns zero bytes.","pos":[2329,2769],"source":"       You can construct an OracleLob that is NULL using this format:      ```   OracleLob myLob = OracleLob.Null;   ```       This technique is used primarily to test whether a `LOB` returned from the server is NULL, as this example illustrates:      ```   If(myLob == OracleLob.Null)   ```       A NULL `LOB` behaves similarly to a zero-byte `LOB` in that <xref:System.Data.OracleClient.OracleLob.Read%2A> succeeds and always returns zero bytes."},{"content":"Selecting a <ph id=\"ph1\">`LOB`</ph> column that contains a null value returns &lt;xref:System.Data.OracleClient.OracleLob.Null&gt;.","pos":[2776,2883],"source":"       Selecting a `LOB` column that contains a null value returns <xref:System.Data.OracleClient.OracleLob.Null>."},{"content":"You must begin a transaction before obtaining a temporary <ph id=\"ph1\">`LOB`</ph>.","pos":[2890,2954],"source":"       You must begin a transaction before obtaining a temporary `LOB`."},{"content":"Otherwise, the &lt;xref:System.Data.OracleClient.OracleDataReader&gt; may fail to obtain data later.","pos":[2955,3049],"source":" Otherwise, the <xref:System.Data.OracleClient.OracleDataReader> may fail to obtain data later."},{"content":"You can also open a temporary <ph id=\"ph1\">`LOB`</ph> in Oracle by calling the DBMS_LOB.CREATETEMPORARY system stored procedure and binding a <ph id=\"ph2\">`LOB`</ph> output parameter.","pos":[3056,3203],"source":"       You can also open a temporary `LOB` in Oracle by calling the DBMS_LOB.CREATETEMPORARY system stored procedure and binding a `LOB` output parameter."},{"content":"On the client side, a temporary <ph id=\"ph1\">`LOB`</ph> behaves like a table-based <ph id=\"ph2\">`LOB`</ph>.","pos":[3204,3275],"source":" On the client side, a temporary `LOB` behaves like a table-based `LOB`."},{"content":"For example, to update the temporary <ph id=\"ph1\">`LOB`</ph>, it must be enclosed in a transaction.","pos":[3276,3357],"source":" For example, to update the temporary `LOB`, it must be enclosed in a transaction."},{"content":"The following C# example demonstrates how to open a temporary <ph id=\"ph1\">`LOB`</ph>.","pos":[3364,3432],"source":"       The following C# example demonstrates how to open a temporary `LOB`."},{"content":"<ph id=\"ph1\">```   OracleConnection connection = new OracleConnection(\"server=MyServer; integrated security=yes;\");   connection.Open();   OracleTransaction transaction = connection.BeginTransaction();   OracleCommand command = connection.CreateCommand();   command.Transaction = transaction;   command.CommandText = \"declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;\";   command.Parameters.Add(new OracleParameter(\"tempblob\", OracleType.Blob)).Direction = ParameterDirection.Output;   command.ExecuteNonQuery();   OracleLob tempLob = (OracleLob)command.Parameters[0].Value;   byte[] tempbuff = new byte[10000];   tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);   tempLob.Write(tempbuff,0,tempbuff.Length);   tempLob.EndBatch();   command.Parameters.Clear();   command.CommandText = \"MyTable.MyProc\";   command.CommandType = CommandType.StoredProcedure;     command.Parameters.Add(new OracleParameter(\"ImportDoc\", OracleType.Blob)).Value = tempLob;   command.ExecuteNonQuery();   transaction.Commit();   connection.Close   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  The inherited &lt;xref:System.IO.Stream.WriteByte%2A&gt; method fails if used with character data, and an &lt;xref:System.InvalidOperationException&gt; is thrown.","pos":[3438,4656],"source":"```   OracleConnection connection = new OracleConnection(\"server=MyServer; integrated security=yes;\");   connection.Open();   OracleTransaction transaction = connection.BeginTransaction();   OracleCommand command = connection.CreateCommand();   command.Transaction = transaction;   command.CommandText = \"declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;\";   command.Parameters.Add(new OracleParameter(\"tempblob\", OracleType.Blob)).Direction = ParameterDirection.Output;   command.ExecuteNonQuery();   OracleLob tempLob = (OracleLob)command.Parameters[0].Value;   byte[] tempbuff = new byte[10000];   tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);   tempLob.Write(tempbuff,0,tempbuff.Length);   tempLob.EndBatch();   command.Parameters.Clear();   command.CommandText = \"MyTable.MyProc\";   command.CommandType = CommandType.StoredProcedure;     command.Parameters.Add(new OracleParameter(\"ImportDoc\", OracleType.Blob)).Value = tempLob;   command.ExecuteNonQuery();   transaction.Commit();   connection.Close   ```      > [!NOTE] >  The inherited <xref:System.IO.Stream.WriteByte%2A> method fails if used with character data, and an <xref:System.InvalidOperationException> is thrown."},{"content":"Use the &lt;xref:System.Data.OracleClient.OracleLob.Write%2A&gt; method instead.","pos":[4657,4731],"source":" Use the <xref:System.Data.OracleClient.OracleLob.Write%2A> method instead."},{"content":"&gt;    &gt;  Temporary <ph id=\"ph1\">`LOB`</ph>s are only closed when the connection is closed, but with pooling and under load, temporary <ph id=\"ph2\">`LOB`</ph>s do not close.","pos":[4734,4869],"source":"   >    >  Temporary `LOB`s are only closed when the connection is closed, but with pooling and under load, temporary `LOB`s do not close."},{"content":"This can be resolved by disposing the temporary <ph id=\"ph1\">`LOB`</ph>, by invoking <ph id=\"ph2\">`tempLob.Dispose()`</ph>.","pos":[4870,4957],"source":" This can be resolved by disposing the temporary `LOB`, by invoking `tempLob.Dispose()`."}]},{"pos":[8002,8167],"content":"Appends data from the specified <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends data from the specified <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> to the current <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>."},{"pos":[8180,9100],"content":"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.       All data from the source `LOB` is appended to the end of the current `LOB`. The position of neither `LOB` is evaluated or changed during this process.       The underlying data types must always be the same. For example, if you are appending from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[0,160],"source":"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"All data from the source <ph id=\"ph1\">`LOB`</ph> is appended to the end of the current <ph id=\"ph2\">`LOB`</ph>.","pos":[167,242],"source":"       All data from the source `LOB` is appended to the end of the current `LOB`."},{"content":"The position of neither <ph id=\"ph1\">`LOB`</ph> is evaluated or changed during this process.","pos":[243,317],"source":" The position of neither `LOB` is evaluated or changed during this process."},{"content":"The underlying data types must always be the same.","pos":[324,374]},{"content":"For example, if you are appending from an &lt;xref:System.Data.OracleClient.OracleType&gt;, the destination &lt;xref:System.Data.OracleClient.OracleLob&gt; must also be an &lt;xref:System.Data.OracleClient.OracleType&gt;.","pos":[375,578],"source":" For example, if you are appending from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In this release, a write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[584,712],"source":"      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[713,775],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[776,913],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."}]},{"pos":[9288,9377],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to append data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> from which to append data."},{"pos":[9549,9624],"content":"The source <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is null.","needQuote":true,"needEscape":true,"source":"The source <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is null."},{"pos":[9735,9839],"content":"The source <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The source <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is null, or the connection is closed."},{"pos":[9946,10043],"content":"The source <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object was closed or disposed.","needQuote":true,"needEscape":true,"source":"The source <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object was closed or disposed."},{"pos":[10170,10199],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[10585,10669],"content":"Prevents server-side triggers from firing while performing multiple read operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Prevents server-side triggers from firing while performing multiple read operations.","pos":[0,84]}]},{"pos":[10682,11625],"content":"Opens the `LOB` in <xref:System.Data.OracleClient.OracleLobOpenMode> mode; therefore, the `LOB` can only be read from, not written to, until the corresponding call to <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>. To perform batch writes to the `LOB`, call <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> with <xref:System.Data.OracleClient.OracleLobOpenMode>.       Calling BeginBatch more than one time within the same transaction currently throws the Oracle \"ORA-22293: LOB already opened in the same transaction\" error. In addition, if you obtain the `LOB` using another <xref:System.Data.OracleClient.OracleDataReader>, and the original caller has not called the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method, the same error is generated. Therefore, you must call the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method when you are finished using the <xref:System.Data.OracleClient.OracleLob>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Opens the <ph id=\"ph1\">`LOB`</ph> in &lt;xref:System.Data.OracleClient.OracleLobOpenMode&gt; mode; therefore, the <ph id=\"ph2\">`LOB`</ph> can only be read from, not written to, until the corresponding call to &lt;xref:System.Data.OracleClient.OracleLob.EndBatch%2A&gt;.","pos":[0,221],"source":"Opens the `LOB` in <xref:System.Data.OracleClient.OracleLobOpenMode> mode; therefore, the `LOB` can only be read from, not written to, until the corresponding call to <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>."},{"content":"To perform batch writes to the <ph id=\"ph1\">`LOB`</ph>, call &lt;xref:System.Data.OracleClient.OracleLob.BeginBatch%2A&gt; with &lt;xref:System.Data.OracleClient.OracleLobOpenMode&gt;.","pos":[222,376],"source":" To perform batch writes to the `LOB`, call <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> with <xref:System.Data.OracleClient.OracleLobOpenMode>."},{"content":"Calling BeginBatch more than one time within the same transaction currently throws the Oracle \"ORA-22293: LOB already opened in the same transaction\" error.","pos":[383,539]},{"content":"In addition, if you obtain the <ph id=\"ph1\">`LOB`</ph> using another &lt;xref:System.Data.OracleClient.OracleDataReader&gt;, and the original caller has not called the &lt;xref:System.Data.OracleClient.OracleLob.EndBatch%2A&gt; method, the same error is generated.","pos":[540,774],"source":" In addition, if you obtain the `LOB` using another <xref:System.Data.OracleClient.OracleDataReader>, and the original caller has not called the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method, the same error is generated."},{"content":"Therefore, you must call the &lt;xref:System.Data.OracleClient.OracleLob.EndBatch%2A&gt; method when you are finished using the &lt;xref:System.Data.OracleClient.OracleLob&gt;.","pos":[775,939],"source":" Therefore, you must call the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method when you are finished using the <xref:System.Data.OracleClient.OracleLob>."}]},{"pos":[11879,11904],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[12011,12045],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[12172,12201],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[12726,12849],"content":"Prevents server-side triggers from firing while performing multiple read and write operations in the specified access mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"Prevents server-side triggers from firing while performing multiple read and write operations in the specified access mode.","pos":[0,123]}]},{"pos":[12862,13634],"content":"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.       Calling <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> more than one time within the same transaction currently throws the Oracle \"ORA-22293: LOB already opened in the same transaction\" error. In addition, if you obtain the `LOB` using another <xref:System.Data.OracleClient.OracleDataReader>, and the original caller has not called the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method, the same error is generated. Therefore, you must call the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method when you are finished using the <xref:System.Data.OracleClient.OracleLob>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[0,160],"source":"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"Calling &lt;xref:System.Data.OracleClient.OracleLob.BeginBatch%2A&gt; more than one time within the same transaction currently throws the Oracle \"ORA-22293: LOB already opened in the same transaction\" error.","pos":[167,368],"source":"       Calling <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> more than one time within the same transaction currently throws the Oracle \"ORA-22293: LOB already opened in the same transaction\" error."},{"content":"In addition, if you obtain the <ph id=\"ph1\">`LOB`</ph> using another &lt;xref:System.Data.OracleClient.OracleDataReader&gt;, and the original caller has not called the &lt;xref:System.Data.OracleClient.OracleLob.EndBatch%2A&gt; method, the same error is generated.","pos":[369,603],"source":" In addition, if you obtain the `LOB` using another <xref:System.Data.OracleClient.OracleDataReader>, and the original caller has not called the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method, the same error is generated."},{"content":"Therefore, you must call the &lt;xref:System.Data.OracleClient.OracleLob.EndBatch%2A&gt; method when you are finished using the &lt;xref:System.Data.OracleClient.OracleLob&gt;.","pos":[604,768],"source":" Therefore, you must call the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method when you are finished using the <xref:System.Data.OracleClient.OracleLob>."}]},{"pos":[13838,14123],"content":"Mode (one of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLobOpenMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values) in which the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> can be accessed between this BeginBatch call and the corresponding &lt;xref:System.Data.OracleClient.OracleLob.EndBatch*&gt; call.","needQuote":true,"needEscape":true,"source":"Mode (one of the <xref href=\"System.Data.OracleClient.OracleLobOpenMode\"></xref> values) in which the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> can be accessed between this BeginBatch call and the corresponding <xref:System.Data.OracleClient.OracleLob.EndBatch*> call."},{"pos":[14307,14332],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[14439,14473],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[14600,14629],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[14996,15110],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream can be read.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> stream can be read."},{"pos":[15230,15541],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> stream supports reading, otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if a <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> is closed or disposed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> stream supports reading, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed."},{"pos":[15981,16067],"content":"Gets a value indicating whether forward and backward seek operations can be performed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether forward and backward seek operations can be performed.","pos":[0,86]}]},{"pos":[16187,16542],"content":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed, otherwise <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>. Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for <xref href=\"System.Data.OracleClient.OracleLob.Null\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is closed or disposed, otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,221],"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed, otherwise <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob.Null\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[222,355],"source":" Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for <xref href=\"System.Data.OracleClient.OracleLob.Null\"></xref>."}]},{"pos":[16987,17117],"content":"Always returns true, regardless of whether the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> supports writing or not.","needQuote":true,"needEscape":true,"source":"Always returns true, regardless of whether the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> supports writing or not."},{"pos":[17129,17289],"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have started a local transaction.","needQuote":true,"needEscape":true,"extradata":"MT","source":"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have started a local transaction."},{"pos":[17410,17766],"content":"Always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, regardless of whether an opened or undisposed <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> supports writing or not, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if a <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> is closed or disposed.","needQuote":true,"needEscape":true,"source":"Always returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, regardless of whether an opened or undisposed <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> supports writing or not, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed."},{"pos":[18217,18338],"content":"Gets a value indicating the minimum number of bytes to retrieve from or send to the server during a read/write operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating the minimum number of bytes to retrieve from or send to the server during a read/write operation.","pos":[0,121]}]},{"pos":[18350,18788],"content":"The value returned by the ChunkSize property is not a setting of the .NET Framework Data Provider for Oracle. Instead, it is the value that the Oracle Call Interface (OCI) uses when communicating with the server. Use ChunkSize to ensure that client-side chunks are the same size. Reading or writing in smaller chunks does not cache data, and causes a less-optimized round trip to the server, because a full packet is not received or sent.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value returned by the ChunkSize property is not a setting of the .NET Framework Data Provider for Oracle. Instead, it is the value that the Oracle Call Interface (OCI) uses when communicating with the server. Use ChunkSize to ensure that client-side chunks are the same size. Reading or writing in smaller chunks does not cache data, and causes a less-optimized round trip to the server, because a full packet is not received or sent.","pos":[0,438],"nodes":[{"content":"The value returned by the ChunkSize property is not a setting of the .NET Framework Data Provider for Oracle.","pos":[0,109]},{"content":"Instead, it is the value that the Oracle Call Interface (OCI) uses when communicating with the server.","pos":[110,212]},{"content":"Use ChunkSize to ensure that client-side chunks are the same size.","pos":[213,279]},{"content":"Reading or writing in smaller chunks does not cache data, and causes a less-optimized round trip to the server, because a full packet is not received or sent.","pos":[280,438]}]}]},{"pos":[18898,18946],"content":"The minimum number of bytes to retrieve or send.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum number of bytes to retrieve or send.","pos":[0,48]}]},{"pos":[19129,19154],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[19261,19295],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[19422,19451],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[19812,20059],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that references the same Oracle <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as the original <bpt id=\"p3\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object that references the same Oracle <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> as the original <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object."},{"pos":[20071,20588],"content":"The properties of the new <xref:System.Data.OracleClient.OracleLob> object initially have the same values as those of the original object. However, after the Clone is complete, each <xref:System.Data.OracleClient.OracleLob> object is independent from the other. For example, changing the value of the <xref:System.Data.OracleClient.OracleLob.Position%2A> property on the original <xref:System.Data.OracleClient.OracleLob> does not change the value of <xref:System.Data.OracleClient.OracleLob.Position%2A> on the copy.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The properties of the new <xref:System.Data.OracleClient.OracleLob> object initially have the same values as those of the original object. However, after the Clone is complete, each <xref:System.Data.OracleClient.OracleLob> object is independent from the other. For example, changing the value of the <xref:System.Data.OracleClient.OracleLob.Position%2A> property on the original <xref:System.Data.OracleClient.OracleLob> does not change the value of <xref:System.Data.OracleClient.OracleLob.Position%2A> on the copy.","pos":[0,517],"nodes":[{"content":"The properties of the new &lt;xref:System.Data.OracleClient.OracleLob&gt; object initially have the same values as those of the original object.","pos":[0,138],"source":"The properties of the new <xref:System.Data.OracleClient.OracleLob> object initially have the same values as those of the original object."},{"content":"However, after the Clone is complete, each &lt;xref:System.Data.OracleClient.OracleLob&gt; object is independent from the other.","pos":[139,261],"source":" However, after the Clone is complete, each <xref:System.Data.OracleClient.OracleLob> object is independent from the other."},{"content":"For example, changing the value of the &lt;xref:System.Data.OracleClient.OracleLob.Position%2A&gt; property on the original &lt;xref:System.Data.OracleClient.OracleLob&gt; does not change the value of &lt;xref:System.Data.OracleClient.OracleLob.Position%2A&gt; on the copy.","pos":[262,517],"source":" For example, changing the value of the <xref:System.Data.OracleClient.OracleLob.Position%2A> property on the original <xref:System.Data.OracleClient.OracleLob> does not change the value of <xref:System.Data.OracleClient.OracleLob.Position%2A> on the copy."}]}]},{"pos":[20712,20951],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that references the same Oracle <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as the original <bpt id=\"p3\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object that references the same Oracle <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> as the original <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object."},{"pos":[21130,21155],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[21262,21296],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[21678,21835],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used by this instance of the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> used by this instance of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref>."},{"pos":[22013,22045],"content":"The connection to a data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection to a data source.","pos":[0,32]}]},{"pos":[22225,22259],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[22724,22870],"content":"Copies from this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a destination <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Copies from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref> to a destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref>."},{"pos":[22883,24072],"content":"The underlying data types must always be the same. For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.       If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended. The space between the end of the `LOB` and the destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but not update the `LOB` on the server. In this case, however, the local copy of the `LOB` will be updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.   >    >  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The underlying data types must always be the same.","pos":[0,50]},{"content":"For example, if you are copying from an &lt;xref:System.Data.OracleClient.OracleType&gt;, the destination &lt;xref:System.Data.OracleClient.OracleLob&gt; must also be an &lt;xref:System.Data.OracleClient.OracleType&gt;.","pos":[51,252],"source":" For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>."},{"content":"If the destination offset is beyond the end of destination <ph id=\"ph1\">`LOB`</ph>, the <ph id=\"ph2\">`LOB`</ph> to which the data is being copied is extended.","pos":[259,381],"source":"       If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended."},{"content":"The space between the end of the <ph id=\"ph1\">`LOB`</ph> and the destination offset beyond the end is padded with zeros for <ph id=\"ph2\">`BLOB`</ph> data types and spaces for <ph id=\"ph3\">`CLOB`</ph> and <ph id=\"ph4\">`NCLOB`</ph> data types.","pos":[382,551],"source":" The space between the end of the `LOB` and the destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[558,718],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In this release, a write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[724,847],"source":"      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> will be updated.","pos":[848,915],"source":" In this case, however, the local copy of the `LOB` will be updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[916,1053],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."},{"content":"&gt;    &gt;  The <ph id=\"ph1\">`CopyTo`</ph> method does not clear the contents of the destination <ph id=\"ph2\">`OracleLob`</ph> before performing the copy operation.","pos":[1056,1180],"source":"   >    >  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation."}]},{"pos":[24270,24342],"content":"The destination <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref>."},{"pos":[24399,24458],"content":"The number of bytes copied. This excludes any padded bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes copied. This excludes any padded bytes.","pos":[0,59],"nodes":[{"content":"The number of bytes copied.","pos":[0,27]},{"content":"This excludes any padded bytes.","pos":[28,59]}]}]},{"pos":[24630,24750],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is null.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> specified in the <code>destination</code> parameter is null."},{"pos":[24861,25008],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[25135,25164],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[25673,25853],"content":"Copies from this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a destination <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> with the specified amount of data.","needQuote":true,"needEscape":true,"source":"Copies from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref> to a destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref> with the specified amount of data."},{"pos":[25866,27047],"content":"The underlying data types must always be the same. For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.       If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended. The space between the end of `LOB` and destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.   >    >  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The underlying data types must always be the same.","pos":[0,50]},{"content":"For example, if you are copying from an &lt;xref:System.Data.OracleClient.OracleType&gt;, the destination &lt;xref:System.Data.OracleClient.OracleLob&gt; must also be an &lt;xref:System.Data.OracleClient.OracleType&gt;.","pos":[51,252],"source":" For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>."},{"content":"If the destination offset is beyond the end of destination <ph id=\"ph1\">`LOB`</ph>, the <ph id=\"ph2\">`LOB`</ph> to which the data is being copied is extended.","pos":[259,381],"source":"       If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended."},{"content":"The space between the end of <ph id=\"ph1\">`LOB`</ph> and destination offset beyond the end is padded with zeros for <ph id=\"ph2\">`BLOB`</ph> data types and spaces for <ph id=\"ph3\">`CLOB`</ph> and <ph id=\"ph4\">`NCLOB`</ph> data types.","pos":[382,543],"source":" The space between the end of `LOB` and destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[550,710],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In this release, a write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[716,844],"source":"      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[845,907],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[908,1045],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."},{"content":"&gt;    &gt;  The <ph id=\"ph1\">`CopyTo`</ph> method does not clear the contents of the destination <ph id=\"ph2\">`OracleLob`</ph> before performing the copy operation.","pos":[1048,1172],"source":"   >    >  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation."}]},{"pos":[27269,27340],"content":"The destination <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"The destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref>"},{"pos":[27413,27623],"content":"The offset to which to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset to which to copy.","pos":[0,28]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number of bytes.","pos":[29,210],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number of bytes."}]},{"pos":[27680,27739],"content":"The number of bytes copied. This excludes any padded bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes copied. This excludes any padded bytes.","pos":[0,59],"nodes":[{"content":"The number of bytes copied.","pos":[0,27]},{"content":"This excludes any padded bytes.","pos":[28,59]}]}]},{"pos":[27911,28031],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is full.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> specified in the <code>destination</code> parameter is full."},{"pos":[28147,28731],"content":"A value specified in the <code>destinationOffset</code> parameter is less than zero or greater than 4 gigabytes.       -or-       A value specified in the <code>destinationOffset</code> parameter for a <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> or <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data type is not even.       -or-       You must specify <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types as an even number of bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destinationOffset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero or greater than 4 gigabytes.","pos":[0,112],"source":"A value specified in the <code>destinationOffset</code> parameter is less than zero or greater than 4 gigabytes."},{"content":"-or-       A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destinationOffset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter for a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> data type is not even.","pos":[119,351],"source":"       -or-       A value specified in the <code>destinationOffset</code> parameter for a <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> or <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data type is not even."},{"content":"-or-       You must specify <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types as an even number of bytes.","pos":[358,552],"source":"       -or-       You must specify <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types as an even number of bytes."}]},{"pos":[28843,28990],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[29117,29146],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[29743,29946],"content":"Copies from this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a destination <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> with the specified amount of data, and the source offset.","needQuote":true,"needEscape":true,"source":"Copies from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref> to a destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref> with the specified amount of data, and the source offset."},{"pos":[29959,31140],"content":"The underlying data types must always be the same. For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.       If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended. The space between the end of `LOB` and destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.   >    >  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The underlying data types must always be the same.","pos":[0,50]},{"content":"For example, if you are copying from an &lt;xref:System.Data.OracleClient.OracleType&gt;, the destination &lt;xref:System.Data.OracleClient.OracleLob&gt; must also be an &lt;xref:System.Data.OracleClient.OracleType&gt;.","pos":[51,252],"source":" For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>."},{"content":"If the destination offset is beyond the end of destination <ph id=\"ph1\">`LOB`</ph>, the <ph id=\"ph2\">`LOB`</ph> to which the data is being copied is extended.","pos":[259,381],"source":"       If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended."},{"content":"The space between the end of <ph id=\"ph1\">`LOB`</ph> and destination offset beyond the end is padded with zeros for <ph id=\"ph2\">`BLOB`</ph> data types and spaces for <ph id=\"ph3\">`CLOB`</ph> and <ph id=\"ph4\">`NCLOB`</ph> data types.","pos":[382,543],"source":" The space between the end of `LOB` and destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[550,710],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In this release, a write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[716,844],"source":"      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[845,907],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[908,1045],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."},{"content":"&gt;    &gt;  The <ph id=\"ph1\">`CopyTo`</ph> method does not clear the contents of the destination <ph id=\"ph2\">`OracleLob`</ph> before performing the copy operation.","pos":[1048,1172],"source":"   >    >  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation."}]},{"pos":[31373,31576],"content":"The offset from which to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset from which to copy.","pos":[0,30]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[31,203],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[31665,31797],"content":"The destination <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OracleLob\" name=\"OracleLob\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The destination <xref uid=\"langword_csharp_OracleLob\" name=\"OracleLob\" href=\"\"></xref><xref href=\"System.Data.OracleClient\"></xref>."},{"pos":[31870,32083],"content":"The destination offset to which to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination offset to which to copy.","pos":[0,40]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[41,213],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[32145,32358],"content":"The quantity of data, in bytes, to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quantity of data, in bytes, to copy.","pos":[0,40]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[41,213],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[32415,32474],"content":"The number of bytes copied. This excludes any padded bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes copied. This excludes any padded bytes.","pos":[0,59],"nodes":[{"content":"The number of bytes copied.","pos":[0,27]},{"content":"This excludes any padded bytes.","pos":[28,59]}]}]},{"pos":[32646,32766],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is full.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> specified in the <code>destination</code> parameter is full."},{"pos":[32882,33351],"content":"A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter is less than zero or greater than 4 gigabytes.       -or-       A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter for a <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> or <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data type is not even.","needQuote":false,"needEscape":true,"nodes":[{"content":"A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">amount</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sourceOffset</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">destinationOffset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter is less than zero or greater than 4 gigabytes.","pos":[0,163],"source":"A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter is less than zero or greater than 4 gigabytes."},{"content":"-or-       A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">amount</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sourceOffset</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">destinationOffset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter for a <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> or <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept> data type is not even.","pos":[170,453],"source":"       -or-       A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter for a <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> or <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data type is not even."}]},{"pos":[33463,33610],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[33737,33766],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[34334,34346],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[34795,34883],"content":"Allows server-side triggers to resume firing after performing multiple write operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows server-side triggers to resume firing after performing multiple write operations.","pos":[0,88]}]},{"pos":[34895,35061],"content":"Call the <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> method before you begin performing write operations on the <xref:System.Data.OracleClient.OracleLob>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call the &lt;xref:System.Data.OracleClient.OracleLob.BeginBatch%2A&gt; method before you begin performing write operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt;.","pos":[0,166],"source":"Call the <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> method before you begin performing write operations on the <xref:System.Data.OracleClient.OracleLob>."}]},{"pos":[35310,35335],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[35442,35476],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[35603,35632],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[35993,36075],"content":"Erases all data from this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Erases all data from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref>."},{"pos":[36088,36777],"content":"Erase does not truncate data. The `LOB` length remains the same for a `BLOB` data type, and the erased data is replaced by 0x00. `CLOB` and `NCLOB` data types are replaced by spaces.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Erase does not truncate data.","pos":[0,29]},{"content":"The <ph id=\"ph1\">`LOB`</ph> length remains the same for a <ph id=\"ph2\">`BLOB`</ph> data type, and the erased data is replaced by 0x00.","pos":[30,128],"source":" The `LOB` length remains the same for a `BLOB` data type, and the erased data is replaced by 0x00."},{"content":"<ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types are replaced by spaces.","pos":[129,182],"source":"`CLOB` and `NCLOB` data types are replaced by spaces."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[189,349],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In this release, a write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[355,483],"source":"      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[484,546],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[547,684],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."}]},{"pos":[36899,36926],"content":"The number of bytes erased.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes erased.","pos":[0,27]}]},{"pos":[37105,37252],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[37359,37393],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[37520,37549],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[37997,38099],"content":"Erases the specified amount of data from this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Erases the specified amount of data from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref>."},{"pos":[38112,39816],"content":"The sum of the values in the `offset` and `amount` parameters can be greater than that of the size of the <xref:System.Data.OracleClient.OracleLob>. Therefore, specifying a value greater than that returned by the <xref:System.Data.OracleClient.OracleLob.Length%2A> property succeeds; however <xref:System.Data.OracleClient.OracleLob.Erase%2A> only erases to the end of the <xref:System.Data.OracleClient.OracleLob>. (Similarly, if a negative value is passed to `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> will succeed, but only erase starting from the beginning of the <xref:System.Data.OracleClient.OracleLob>.) This behavior is different from that of the <xref:System.Data.OracleClient.OracleLob.Read%2A> and <xref:System.Data.OracleClient.OracleLob.Write%2A> methods, and offers the advantage of being able to erase all data from the value specified by `offset` without making an additional roundtrip to the server to verify the actual size.       <xref:System.Data.OracleClient.OracleLob.Erase%2A> does not truncate data. The `LOB` length remains the same for a `BLOB` data type, and the erased data is replaced by 0x00. `CLOB` and `NCLOB` data types are replaced by spaces.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The sum of the values in the <ph id=\"ph1\">`offset`</ph> and <ph id=\"ph2\">`amount`</ph> parameters can be greater than that of the size of the &lt;xref:System.Data.OracleClient.OracleLob&gt;.","pos":[0,148],"source":"The sum of the values in the `offset` and `amount` parameters can be greater than that of the size of the <xref:System.Data.OracleClient.OracleLob>."},{"content":"Therefore, specifying a value greater than that returned by the &lt;xref:System.Data.OracleClient.OracleLob.Length%2A&gt; property succeeds; however &lt;xref:System.Data.OracleClient.OracleLob.Erase%2A&gt; only erases to the end of the &lt;xref:System.Data.OracleClient.OracleLob&gt;.","pos":[149,415],"source":" Therefore, specifying a value greater than that returned by the <xref:System.Data.OracleClient.OracleLob.Length%2A> property succeeds; however <xref:System.Data.OracleClient.OracleLob.Erase%2A> only erases to the end of the <xref:System.Data.OracleClient.OracleLob>."},{"content":"(Similarly, if a negative value is passed to <ph id=\"ph1\">`offset`</ph>, &lt;xref:System.Data.OracleClient.OracleLob.Erase%2A&gt; will succeed, but only erase starting from the beginning of the &lt;xref:System.Data.OracleClient.OracleLob&gt;.) This behavior is different from that of the &lt;xref:System.Data.OracleClient.OracleLob.Read%2A&gt; and &lt;xref:System.Data.OracleClient.OracleLob.Write%2A&gt; methods, and offers the advantage of being able to erase all data from the value specified by <ph id=\"ph2\">`offset`</ph> without making an additional roundtrip to the server to verify the actual size.","pos":[416,961],"source":" (Similarly, if a negative value is passed to `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> will succeed, but only erase starting from the beginning of the <xref:System.Data.OracleClient.OracleLob>.) This behavior is different from that of the <xref:System.Data.OracleClient.OracleLob.Read%2A> and <xref:System.Data.OracleClient.OracleLob.Write%2A> methods, and offers the advantage of being able to erase all data from the value specified by `offset` without making an additional roundtrip to the server to verify the actual size."},{"content":"&lt;xref:System.Data.OracleClient.OracleLob.Erase%2A&gt; does not truncate data.","pos":[968,1042],"source":"       <xref:System.Data.OracleClient.OracleLob.Erase%2A> does not truncate data."},{"content":"The <ph id=\"ph1\">`LOB`</ph> length remains the same for a <ph id=\"ph2\">`BLOB`</ph> data type, and the erased data is replaced by 0x00.","pos":[1043,1141],"source":" The `LOB` length remains the same for a `BLOB` data type, and the erased data is replaced by 0x00."},{"content":"<ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types are replaced by spaces.","pos":[1142,1195],"source":"`CLOB` and `NCLOB` data types are replaced by spaces."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[1202,1362],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In this release, a write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[1368,1496],"source":"      > [!NOTE] >  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[1497,1559],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[1560,1697],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."}]},{"pos":[39964,40168],"content":"The offset from which to erase. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset from which to erase.","pos":[0,31]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[32,204],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[40230,40444],"content":"The quantity of data, in bytes, to erase. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quantity of data, in bytes, to erase.","pos":[0,41]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[42,214],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[40501,40528],"content":"The number of bytes erased.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes erased.","pos":[0,27]}]},{"pos":[40707,40854],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[40961,40995],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[41122,41151],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[41512,41536],"content":"Not currently supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not currently supported.","pos":[0,24]}]},{"pos":[41548,41595],"content":"In this release, this method is not functional.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In this release, this method is not functional.","pos":[0,47]}]},{"pos":[42116,42235],"content":"Gets a value indicating whether an application called the <xref:System.Data.OracleClient.OracleLob.BeginBatch*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether an application called the &lt;xref:System.Data.OracleClient.OracleLob.BeginBatch*&gt; method.","pos":[0,119],"source":"Gets a value indicating whether an application called the <xref:System.Data.OracleClient.OracleLob.BeginBatch*> method."}]},{"pos":[42248,42346],"content":"When using an Oracle 8.0.5 server, an Oracle \"ORA-00600: internal error code\" exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When using an Oracle 8.0.5 server, an Oracle \"ORA-00600: internal error code\" exception is thrown.","pos":[0,98]}]},{"pos":[42460,42682],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if application called the &lt;xref:System.Data.OracleClient.OracleLob.BeginBatch*&gt; method, otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if application called the <xref:System.Data.OracleClient.OracleLob.BeginBatch*> method, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[42881,42910],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[43272,43443],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleBFile.Null\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> stream.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a <xref href=\"System.Data.OracleClient.OracleBFile.Null\"></xref> stream."},{"pos":[43553,43826],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is a <bpt id=\"p3\">&lt;xref href=\"System.Data.OracleClient.OracleBFile.Null\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> stream, otherwise <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a <xref href=\"System.Data.OracleClient.OracleBFile.Null\"></xref> stream, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[44285,44451],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a temporary <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a temporary <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>."},{"pos":[44464,45581],"content":"The following example demonstrates how to create a temporary `LOB`.      ```   OracleConnection connection = new OracleConnection(\"server=MyServer; integrated security=yes;\");   connection.Open();   OracleTransaction transaction = connection.BeginTransaction();   OracleCommand command = connection.CreateCommand();   command.Transaction = transaction;   command.CommandText = \"declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;\";   command.Parameters.Add(new OracleParameter(\"tempblob\", OracleType.Blob)).Direction = ParameterDirection.Output;   command.ExecuteNonQuery();   OracleLob tempLob = (OracleLob)command.Parameters[0].Value;   tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);   tempLob.Write(tempbuff,0,tempbuff.Length);   tempLob.EndBatch();   command.Parameters.Clear();   command.CommandText = \"MyTable.MyProc\";   command.CommandType = CommandType.StoredProcedure;     command.Parameters.Add(new OracleParameter(\"ImportDoc\", OracleType.Blob)).Value = tempLob;   command.ExecuteNonQuery();   transaction.Commit();   connection.Close   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following example demonstrates how to create a temporary <ph id=\"ph1\">`LOB`</ph>.","pos":[0,67],"source":"The following example demonstrates how to create a temporary `LOB`."}]},{"pos":[45697,45969],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is a temporary <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, otherwise <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a temporary <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[46154,46179],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[46286,46320],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[46447,46476],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[46838,46936],"content":"Gets a value that returns the size of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value that returns the size of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref>."},{"pos":[46948,47053],"content":"The size of the <xref:System.Data.OracleClient.OracleLob> is always returned in bytes for all data types.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The size of the &lt;xref:System.Data.OracleClient.OracleLob&gt; is always returned in bytes for all data types.","pos":[0,105],"source":"The size of the <xref:System.Data.OracleClient.OracleLob> is always returned in bytes for all data types."}]},{"pos":[47170,47251],"content":"The size of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in bytes.","needQuote":true,"needEscape":true,"source":"The size of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> in bytes."},{"pos":[47431,47456],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[47563,47597],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[47724,47753],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[48120,48219],"content":"Gets a value that returns the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> data type.","needQuote":true,"needEscape":true,"source":"Gets a value that returns the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> data type."},{"pos":[48232,48998],"content":"An <xref:System.Data.OracleClient.OracleLob> may be one of the following <xref:System.Data.OracleClient.OracleType> data types.      |OracleType data type|Description|   |--------------------------|-----------------|   |`Blob`|An Oracle `BLOB` data type that contains binary data with a maximum size of 4 gigabytes. This maps to an <xref:System.Array> of type <xref:System.Byte>.|   |`Clob`|An Oracle `CLOB` data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes. This maps to <xref:System.String>.|   |`NClob`|An Oracle `NCLOB` data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes. This maps to <xref:System.String>.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An &lt;xref:System.Data.OracleClient.OracleLob&gt; may be one of the following &lt;xref:System.Data.OracleClient.OracleType&gt; data types.","pos":[0,127],"source":"An <xref:System.Data.OracleClient.OracleLob> may be one of the following <xref:System.Data.OracleClient.OracleType> data types."},{"content":"|OracleType data type|Description|   |--------------------------|-----------------|   |<ph id=\"ph1\">`Blob`</ph>|An Oracle <ph id=\"ph2\">`BLOB`</ph> data type that contains binary data with a maximum size of 4 gigabytes.","pos":[133,315],"source":"      |OracleType data type|Description|   |--------------------------|-----------------|   |`Blob`|An Oracle `BLOB` data type that contains binary data with a maximum size of 4 gigabytes."},{"content":"This maps to an &lt;xref:System.Array&gt; of type &lt;xref:System.Byte&gt;.|   |<ph id=\"ph1\">`Clob`</ph>|An Oracle <ph id=\"ph2\">`CLOB`</ph> data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes.","pos":[316,533],"source":" This maps to an <xref:System.Array> of type <xref:System.Byte>.|   |`Clob`|An Oracle `CLOB` data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes."},{"content":"This maps to &lt;xref:System.String&gt;.|   |<ph id=\"ph1\">`NClob`</ph>|An Oracle <ph id=\"ph2\">`NCLOB`</ph> data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes.","pos":[534,724],"source":" This maps to <xref:System.String>.|   |`NClob`|An Oracle `NCLOB` data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes."},{"content":"This maps to &lt;xref:System.String&gt;.|","pos":[725,760],"source":" This maps to <xref:System.String>.|"}]},{"pos":[49162,49299],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.OracleClient.OracleType\"></xref><xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> data types."},{"pos":[49725,49806],"content":"Represents a null <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Represents a null <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object."},{"pos":[49819,50303],"content":"You can construct an &lt;xref:System.Data.OracleClient.OracleLob&gt; that is NULL using this format:      <ph id=\"ph1\">```   OracleLob myLob = OracleLOB.Null;   ```</ph>       This technique is used primarily to test whether a <ph id=\"ph2\">`LOB`</ph> returned from the server is NULL, as this example illustrates:      <ph id=\"ph3\">```   If(myLob == OracleLob.Null)   ```</ph>       A NULL <ph id=\"ph4\">`LOB`</ph> behaves similarly to a zero byte <ph id=\"ph5\">`LOB`</ph> in that &lt;xref:System.Data.OracleClient.OracleLob.Read%2A&gt; succeeds and always returns zero bytes.","needQuote":false,"needEscape":true,"extradata":"MT","source":"You can construct an <xref:System.Data.OracleClient.OracleLob> that is NULL using this format:      ```   OracleLob myLob = OracleLOB.Null;   ```       This technique is used primarily to test whether a `LOB` returned from the server is NULL, as this example illustrates:      ```   If(myLob == OracleLob.Null)   ```       A NULL `LOB` behaves similarly to a zero byte `LOB` in that <xref:System.Data.OracleClient.OracleLob.Read%2A> succeeds and always returns zero bytes."},{"pos":[50470,50482],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[50871,50972],"content":"Gets the current read position in the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream.","needQuote":true,"needEscape":true,"source":"Gets the current read position in the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream."},{"pos":[50985,51567],"content":"The stream must support seeking to get or set the position. Use the <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> property to determine whether the stream supports seeking.       Seeking to any location beyond the length of the stream is supported. Seeking to an odd position for `CLOB` and `NCLOB` data types is also supported. For more information, see the Remarks section of the <xref:System.Data.OracleClient.OracleLob.Read%2A> property.       The Position property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The stream must support seeking to get or set the position.","pos":[0,59]},{"content":"Use the &lt;xref:System.Data.OracleClient.OracleLob.CanSeek%2A&gt; property to determine whether the stream supports seeking.","pos":[60,179],"source":" Use the <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> property to determine whether the stream supports seeking."},{"content":"Seeking to any location beyond the length of the stream is supported.","pos":[186,255]},{"content":"Seeking to an odd position for <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types is also supported.","pos":[256,335],"source":" Seeking to an odd position for `CLOB` and `NCLOB` data types is also supported."},{"content":"For more information, see the Remarks section of the &lt;xref:System.Data.OracleClient.OracleLob.Read%2A&gt; property.","pos":[336,448],"source":" For more information, see the Remarks section of the <xref:System.Data.OracleClient.OracleLob.Read%2A> property."},{"content":"The Position property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.","pos":[455,578]}]},{"pos":[51692,51787],"content":"The current position within the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream.","needQuote":true,"needEscape":true,"source":"The current position within the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream."},{"pos":[51969,51994],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[52101,52135],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[52627,52805],"content":"Reads a sequence of bytes from the current <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream and advances the position within the stream by the number of bytes read.","needQuote":true,"needEscape":true,"source":"Reads a sequence of bytes from the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream and advances the position within the stream by the number of bytes read."},{"pos":[52818,56722],"content":"The Read method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Read returns the number of bytes read. The return value is zero only if the position is currently at the end of the stream. Read will block until at least one byte of data can be read, in the event that no data is available.Read returns 0 if you attempt to read from a `LOB` when the current position is at the end of `LOB`. Read can return fewer bytes than requested even if the end of the stream has not been reached.       The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode. Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes. For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `Read` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.       The following C# example demonstrates how to read <xref:System.Data.OracleClient.OracleLob> objects.      ```   public static void ReadLobExample(OracleCommand command)   {      int actual = 0;         //Select some data.      // Table Schema:      //  \"CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)\";      //  \"INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')\";      command.CommandText = \"SELECT * FROM TableWithLobs\";      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain the LOBs (all 3 varieties).         OracleLob BLOB = reader.GetOracleLob(1);         OracleLob CLOB  = reader.GetOracleLob(2);         OracleLob NCLOB = reader.GetOracleLob(3);            //Example - Reading binary data (in chunks).         byte[] buffer = new byte[100];         while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)            Console.WriteLine(BLOB.LobType + \".Read(\" + buffer + \", \" + buffer.Length + \") => \" + actual);            //Example - Reading CLOB/NCLOB data (in chunks).         //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).         //However, because the OracleLob object inherits directly from the.NET stream object,          //all the existing classes that manipluate streams can also be used. For example, the          //.NET StreamReader makes converting the raw bytes into actual characters easier.         StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);         char[] cbuffer = new char[100];         while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)            Console.WriteLine(CLOB.LobType + \".Read(\" + new string(cbuffer, 0, actual) + \", \" + cbuffer.Length + \") => \" + actual);            //Example - Reading data (all at once).         //You could use StreamReader.ReadToEnd to obtain all the string data,or simply         //call OracleLob.Value to obtain a contiguous allocation of all the data.         Console.WriteLine(NCLOB.LobType + \".Value => \" + NCLOB.Value);      }   }   ```       You can construct an <xref:System.Data.OracleClient.OracleLob> that is NULL using this format:      ```   OracleLob myLob = OracleLob.Null;   ```       This technique is used primarily to test whether a `LOB` returned from the server is NULL, as the following example illustrates.      ```   If(myLob == OracleLob.Null)   ```       A NULL `LOB` behaves similarly to a zero byte `LOB` in that Read succeeds and always returns zero bytes.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Read method reads a maximum of <ph id=\"ph1\">`count`</ph> bytes from the current stream and stores them in <ph id=\"ph2\">`buffer`</ph> beginning at <ph id=\"ph3\">`offset`</ph>.","pos":[0,123],"source":"The Read method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`."},{"content":"The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.","pos":[124,294]},{"content":"Read returns the number of bytes read.","pos":[295,333]},{"content":"The return value is zero only if the position is currently at the end of the stream.","pos":[334,418]},{"content":"Read will block until at least one byte of data can be read, in the event that no data is available.Read returns 0 if you attempt to read from a <ph id=\"ph1\">`LOB`</ph> when the current position is at the end of <ph id=\"ph2\">`LOB`</ph>.","pos":[419,619],"source":" Read will block until at least one byte of data can be read, in the event that no data is available.Read returns 0 if you attempt to read from a `LOB` when the current position is at the end of `LOB`."},{"content":"Read can return fewer bytes than requested even if the end of the stream has not been reached.","pos":[620,714]},{"content":"The .NET Framework Data Provider for Oracle handles all <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data as Unicode.","pos":[721,812],"source":"       The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode."},{"content":"Therefore, when accessing <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types, you are always dealing with the number of bytes, where each character is 2 bytes.","pos":[813,951],"source":" Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes."},{"content":"For example, if a string of text containing three characters is saved as an <ph id=\"ph1\">`NCLOB`</ph> on an Oracle server where the character set is 4 bytes per character, and you perform a <ph id=\"ph2\">`Read`</ph> operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.","pos":[952,1239],"source":" For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `Read` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server."},{"content":"The following C# example demonstrates how to read &lt;xref:System.Data.OracleClient.OracleLob&gt; objects.","pos":[1246,1346],"source":"       The following C# example demonstrates how to read <xref:System.Data.OracleClient.OracleLob> objects."},{"content":"<ph id=\"ph1\">```   public static void ReadLobExample(OracleCommand command)   {      int actual = 0;         //Select some data.      // Table Schema:      //  \"CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)\";      //  \"INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')\";      command.CommandText = \"SELECT * FROM TableWithLobs\";      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain the LOBs (all 3 varieties).         OracleLob BLOB = reader.GetOracleLob(1);         OracleLob CLOB  = reader.GetOracleLob(2);         OracleLob NCLOB = reader.GetOracleLob(3);            //Example - Reading binary data (in chunks).         byte[] buffer = new byte[100];         while((actual = BLOB.Read(buffer, 0, buffer.Length)) &gt;0)            Console.WriteLine(BLOB.LobType + \".Read(\" + buffer + \", \" + buffer.Length + \") =&gt; \" + actual);            //Example - Reading CLOB/NCLOB data (in chunks).         //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).         //However, because the OracleLob object inherits directly from the.NET stream object,          //all the existing classes that manipluate streams can also be used. For example, the          //.NET StreamReader makes converting the raw bytes into actual characters easier.         StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);         char[] cbuffer = new char[100];         while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) &gt;0)            Console.WriteLine(CLOB.LobType + \".Read(\" + new string(cbuffer, 0, actual) + \", \" + cbuffer.Length + \") =&gt; \" + actual);            //Example - Reading data (all at once).         //You could use StreamReader.ReadToEnd to obtain all the string data,or simply         //call OracleLob.Value to obtain a contiguous allocation of all the data.         Console.WriteLine(NCLOB.LobType + \".Value =&gt; \" + NCLOB.Value);      }   }   ```</ph>       You can construct an &lt;xref:System.Data.OracleClient.OracleLob&gt; that is NULL using this format:      <ph id=\"ph2\">```   OracleLob myLob = OracleLob.Null;   ```</ph>       This technique is used primarily to test whether a <ph id=\"ph3\">`LOB`</ph> returned from the server is NULL, as the following example illustrates.","pos":[1352,3667],"source":"```   public static void ReadLobExample(OracleCommand command)   {      int actual = 0;         //Select some data.      // Table Schema:      //  \"CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)\";      //  \"INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')\";      command.CommandText = \"SELECT * FROM TableWithLobs\";      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain the LOBs (all 3 varieties).         OracleLob BLOB = reader.GetOracleLob(1);         OracleLob CLOB  = reader.GetOracleLob(2);         OracleLob NCLOB = reader.GetOracleLob(3);            //Example - Reading binary data (in chunks).         byte[] buffer = new byte[100];         while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)            Console.WriteLine(BLOB.LobType + \".Read(\" + buffer + \", \" + buffer.Length + \") => \" + actual);            //Example - Reading CLOB/NCLOB data (in chunks).         //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).         //However, because the OracleLob object inherits directly from the.NET stream object,          //all the existing classes that manipluate streams can also be used. For example, the          //.NET StreamReader makes converting the raw bytes into actual characters easier.         StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);         char[] cbuffer = new char[100];         while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)            Console.WriteLine(CLOB.LobType + \".Read(\" + new string(cbuffer, 0, actual) + \", \" + cbuffer.Length + \") => \" + actual);            //Example - Reading data (all at once).         //You could use StreamReader.ReadToEnd to obtain all the string data,or simply         //call OracleLob.Value to obtain a contiguous allocation of all the data.         Console.WriteLine(NCLOB.LobType + \".Value => \" + NCLOB.Value);      }   }   ```       You can construct an <xref:System.Data.OracleClient.OracleLob> that is NULL using this format:      ```   OracleLob myLob = OracleLob.Null;   ```       This technique is used primarily to test whether a `LOB` returned from the server is NULL, as the following example illustrates."},{"content":"<ph id=\"ph1\">```   If(myLob == OracleLob.Null)   ```</ph>       A NULL <ph id=\"ph2\">`LOB`</ph> behaves similarly to a zero byte <ph id=\"ph3\">`LOB`</ph> in that Read succeeds and always returns zero bytes.","pos":[3673,3823],"source":"```   If(myLob == OracleLob.Null)   ```       A NULL `LOB` behaves similarly to a zero byte `LOB` in that Read succeeds and always returns zero bytes."}]},{"pos":[56890,57089],"content":"An array of bytes. When this method returns, the buffer contains the specified byte array with the values between `offset` and (`offset` + `count`) replaced by the bytes read from the current source.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"When this method returns, the buffer contains the specified byte array with the values between <ph id=\"ph1\">`offset`</ph> and (<ph id=\"ph2\">`offset`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph>) replaced by the bytes read from the current source.","pos":[19,199],"source":" When this method returns, the buffer contains the specified byte array with the values between `offset` and (`offset` + `count`) replaced by the bytes read from the current source."}]},{"pos":[57151,57427],"content":"The zero-based byte offset in `buffer` at which to begin storing the data read from the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based byte offset in <ph id=\"ph1\">`buffer`</ph> at which to begin storing the data read from the current stream.","pos":[0,103],"source":"The zero-based byte offset in `buffer` at which to begin storing the data read from the current stream."},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[104,276],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[57488,57724],"content":"The maximum number of bytes to be read from the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of bytes to be read from the current stream.","pos":[0,63]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[64,236],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[57781,57983],"content":"The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","needQuote":true,"needEscape":true,"nodes":[{"content":"The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[0,202],"nodes":[{"content":"The total number of bytes read into the buffer.","pos":[0,47]},{"content":"This may be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[48,202]}]}]},{"pos":[58153,58282],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a null reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"The <code>buffer</code> is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[58398,58725],"content":"A value in the <code>offset</code> or <code>count</code> parameter is not positive.       -or-       The sum of the offset and count parameters is larger than the buffer length.       -or-       A value specified in the <code>amount</code> or <code>offset</code> parameter is less than zero or greater than 4 gigabytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"A value in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is not positive.","pos":[0,83],"source":"A value in the <code>offset</code> or <code>count</code> parameter is not positive."},{"content":"-or-       The sum of the offset and count parameters is larger than the buffer length.","pos":[90,177]},{"content":"-or-       A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">amount</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than zero or greater than 4 gigabytes.","pos":[184,319],"source":"       -or-       A value specified in the <code>amount</code> or <code>offset</code> parameter is less than zero or greater than 4 gigabytes."}]},{"pos":[58837,58984],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[59091,59125],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[59252,59281],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[59755,59851],"content":"Sets the position on the current <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream.","needQuote":true,"needEscape":true,"source":"Sets the position on the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream."},{"pos":[59864,60487],"content":"If `offset` is negative, the new position must precede the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero, the new position must be the position specified by `origin`. If `offset` is positive, the new position must follow the position specified by `origin` by the number of bytes specified by `offset`.       Seeking to any location beyond the length of the stream is supported. Seeking to an odd position for `CLOB` and `NCLOB` data types is also supported. For more information, see the Remarks section of the <xref:System.Data.OracleClient.OracleLob.Read%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`offset`</ph> is negative, the new position must precede the position specified by <ph id=\"ph2\">`origin`</ph> by the number of bytes specified by <ph id=\"ph3\">`offset`</ph>.","pos":[0,135],"source":"If `offset` is negative, the new position must precede the position specified by `origin` by the number of bytes specified by `offset`."},{"content":"If <ph id=\"ph1\">`offset`</ph> is zero, the new position must be the position specified by <ph id=\"ph2\">`origin`</ph>.","pos":[136,217],"source":" If `offset` is zero, the new position must be the position specified by `origin`."},{"content":"If <ph id=\"ph1\">`offset`</ph> is positive, the new position must follow the position specified by <ph id=\"ph2\">`origin`</ph> by the number of bytes specified by <ph id=\"ph3\">`offset`</ph>.","pos":[218,352],"source":" If `offset` is positive, the new position must follow the position specified by `origin` by the number of bytes specified by `offset`."},{"content":"Seeking to any location beyond the length of the stream is supported.","pos":[359,428]},{"content":"Seeking to an odd position for <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types is also supported.","pos":[429,508],"source":" Seeking to an odd position for `CLOB` and `NCLOB` data types is also supported."},{"content":"For more information, see the Remarks section of the &lt;xref:System.Data.OracleClient.OracleLob.Read%2A&gt; property.","pos":[509,621],"source":" For more information, see the Remarks section of the <xref:System.Data.OracleClient.OracleLob.Read%2A> property."}]},{"pos":[60659,61032],"content":"A byte offset relative to origin. If `offset` is negative, the new position precedes the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero, the new position is the position specified by `origin`. If `offset` is positive, the new position follows the position specified by `origin` by the number of bytes specified by `offset`.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte offset relative to origin.","pos":[0,33]},{"content":"If <ph id=\"ph1\">`offset`</ph> is negative, the new position precedes the position specified by <ph id=\"ph2\">`origin`</ph> by the number of bytes specified by <ph id=\"ph3\">`offset`</ph>.","pos":[34,165],"source":" If `offset` is negative, the new position precedes the position specified by `origin` by the number of bytes specified by `offset`."},{"content":"If <ph id=\"ph1\">`offset`</ph> is zero, the new position is the position specified by <ph id=\"ph2\">`origin`</ph>.","pos":[166,242],"source":" If `offset` is zero, the new position is the position specified by `origin`."},{"content":"If <ph id=\"ph1\">`offset`</ph> is positive, the new position follows the position specified by <ph id=\"ph2\">`origin`</ph> by the number of bytes specified by <ph id=\"ph3\">`offset`</ph>.","pos":[243,373],"source":" If `offset` is positive, the new position follows the position specified by `origin` by the number of bytes specified by `offset`."}]},{"pos":[61102,61209],"content":"A value of type <xref:System.IO.SeekOrigin> indicating the reference point used to obtain the new position.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of type &lt;xref:System.IO.SeekOrigin&gt; indicating the reference point used to obtain the new position.","pos":[0,107],"source":"A value of type <xref:System.IO.SeekOrigin> indicating the reference point used to obtain the new position."}]},{"pos":[61266,61309],"content":"The new position within the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new position within the current stream.","pos":[0,43]}]},{"pos":[61471,61536],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">origin</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not contain a valid value.","needQuote":true,"needEscape":true,"source":"The <code>origin</code> parameter does not contain a valid value."},{"pos":[61651,61708],"content":"The resulting position is beyond the length of the value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting position is beyond the length of the value.","pos":[0,57]}]},{"pos":[61815,61905],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object was closed or disposed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object was closed or disposed."},{"pos":[62032,62061],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[62485,62611],"content":"Sets the length of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream to a value less than the current length.","needQuote":true,"needEscape":true,"source":"Sets the length of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream to a value less than the current length."},{"pos":[62624,63949],"content":"An attempt to increase the length of the <xref:System.Data.OracleClient.OracleLob> stream fails, and returns \"Message: ORA-22926: specified trim length is greater than current LOB value's length\" from the Oracle server.       A stream must support both writing and seeking for SetLength to function.       The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode. Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes. For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `SetLength` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An attempt to increase the length of the &lt;xref:System.Data.OracleClient.OracleLob&gt; stream fails, and returns \"Message: ORA-22926: specified trim length is greater than current LOB value's length\" from the Oracle server.","pos":[0,219],"source":"An attempt to increase the length of the <xref:System.Data.OracleClient.OracleLob> stream fails, and returns \"Message: ORA-22926: specified trim length is greater than current LOB value's length\" from the Oracle server."},{"content":"A stream must support both writing and seeking for SetLength to function.","pos":[226,299]},{"content":"The .NET Framework Data Provider for Oracle handles all <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data as Unicode.","pos":[306,397],"source":"       The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode."},{"content":"Therefore, when accessing <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types, you are always dealing with the number of bytes, where each character is 2 bytes.","pos":[398,536],"source":" Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes."},{"content":"For example, if a string of text containing three characters is saved as an <ph id=\"ph1\">`NCLOB`</ph> on an Oracle server where the character set is 4 bytes per character, and you perform a <ph id=\"ph2\">`SetLength`</ph> operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.","pos":[537,829],"source":" For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `SetLength` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[836,996],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[1002,1113],"source":"      > [!NOTE] >  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[1114,1176],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[1177,1314],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."}]},{"pos":[64095,64374],"content":"The desired length of the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream in bytes. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The desired length of the current <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream in bytes.","pos":[0,106],"source":"The desired length of the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream in bytes."},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[107,279],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[64562,64905],"content":"A value specified in the <code>value</code> parameter for a <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> or <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data type is not even.       -or-       A value specified in the <code>value</code> parameter is less than zero or greater than 4 gigabytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter for a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> data type is not even.","pos":[0,209],"source":"A value specified in the <code>value</code> parameter for a <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> or <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data type is not even."},{"content":"-or-       A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero or greater than 4 gigabytes.","pos":[216,327],"source":"       -or-       A value specified in the <code>value</code> parameter is less than zero or greater than 4 gigabytes."}]},{"pos":[65017,65164],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[65271,65305],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[65432,65461],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[65818,65899],"content":"Gets the common language runtime stream value equivalent of the underlying value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the common language runtime stream value equivalent of the underlying value.","pos":[0,81]}]},{"pos":[65912,66641],"content":"For <xref:System.Data.OracleClient.OracleType> data types, Value returns the entire underlying data as a contiguous array of type `Byte[]`. For <xref:System.Data.OracleClient.OracleType> and <xref:System.Data.OracleClient.OracleType> data types, Value returns all the data as a `String` data type. For null data, Value returns <xref:System.DBNull>. By comparing the returned values, you can distinguish among empty data, null data, and data.      > [!NOTE] >  A benefit of using `LOB` data types is the capability to retrieve large amounts of data in chunks at the client. However, when you use Value, you obtain all the data for the `LOB` column as one contiguous chunk, which can significantly increase application overhead.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For &lt;xref:System.Data.OracleClient.OracleType&gt; data types, Value returns the entire underlying data as a contiguous array of type <ph id=\"ph1\">`Byte[]`</ph>.","pos":[0,139],"source":"For <xref:System.Data.OracleClient.OracleType> data types, Value returns the entire underlying data as a contiguous array of type `Byte[]`."},{"content":"For &lt;xref:System.Data.OracleClient.OracleType&gt; and &lt;xref:System.Data.OracleClient.OracleType&gt; data types, Value returns all the data as a <ph id=\"ph1\">`String`</ph> data type.","pos":[140,297],"source":" For <xref:System.Data.OracleClient.OracleType> and <xref:System.Data.OracleClient.OracleType> data types, Value returns all the data as a `String` data type."},{"content":"For null data, Value returns &lt;xref:System.DBNull&gt;.","pos":[298,348],"source":" For null data, Value returns <xref:System.DBNull>."},{"content":"By comparing the returned values, you can distinguish among empty data, null data, and data.","pos":[349,441]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A benefit of using <ph id=\"ph2\">`LOB`</ph> data types is the capability to retrieve large amounts of data in chunks at the client.","pos":[447,572],"source":"      > [!NOTE] >  A benefit of using `LOB` data types is the capability to retrieve large amounts of data in chunks at the client."},{"content":"However, when you use Value, you obtain all the data for the <ph id=\"ph1\">`LOB`</ph> column as one contiguous chunk, which can significantly increase application overhead.","pos":[573,726],"source":" However, when you use Value, you obtain all the data for the `LOB` column as one contiguous chunk, which can significantly increase application overhead."}]},{"pos":[66752,67138],"content":"For <xref href=\"System.Data.OracleClient.OracleType\"></xref>, an array of type <xref uid=\"langword_csharp_Byte[]\" name=\"Byte[]\" href=\"\"></xref>. For <xref href=\"System.Data.OracleClient.OracleType\"></xref> and <xref href=\"System.Data.OracleClient.OracleType\"></xref>, a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. For null data, <xref href=\"System.DBNull\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, an array of type <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Byte[]\" name=\"Byte[]\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,144],"source":"For <xref href=\"System.Data.OracleClient.OracleType\"></xref>, an array of type <xref uid=\"langword_csharp_Byte[]\" name=\"Byte[]\" href=\"\"></xref>."},{"content":"For <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, a <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[145,335],"source":" For <xref href=\"System.Data.OracleClient.OracleType\"></xref> and <xref href=\"System.Data.OracleClient.OracleType\"></xref>, a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"content":"For null data, <bpt id=\"p1\">&lt;xref href=\"System.DBNull\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[336,386],"source":" For null data, <xref href=\"System.DBNull\"></xref>."}]},{"pos":[67313,67347],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[67474,67503],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[68000,68190],"content":"Writes a sequence of bytes to the current <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream, and advances the current position within this stream by the number of bytes written.","needQuote":true,"needEscape":true,"source":"Writes a sequence of bytes to the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream, and advances the current position within this stream by the number of bytes written."},{"pos":[68203,71614],"content":"If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.       Writing beyond the end of `LOB` is allowed and enlarges the `LOB` by the number of bytes written.       The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode. Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes. For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `Write` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.       The following C# example demonstrates how to write to <xref:System.Data.OracleClient.OracleLob> objects.      ```   public static void WriteLobExample(OracleCommand command)   {      //Note: Updating LOB data requires a transaction.      command.Transaction = command.Connection.BeginTransaction();      //Select some data.      //    Table Schema:      //        \"CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)\";      //        \"INSERT INTO tablewithlobs values (1, 'AA', 'AAA')\";      command.CommandText = \"SELECT * FROM TableWithLobs FOR UPDATE\";      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain both LOBs.         OracleLob BLOB1    = reader.GetOracleLob(1);         OracleLob BLOB2    = reader.GetOracleLob(2);         //Perform any desired operations on the LOB, (read, position, and so on).         //...         //Example - Writing binary data (directly to the backend).         //To write, you can use any of the stream classes, or write raw binary data using          //the OracleLob write method. Writing character vs. binary is the same;         //however note that character is always in terms of Unicode byte counts         //(for example: even number of bytes - 2 bytes for every Unicode character).         byte[] buffer = new byte[100];         buffer[0] = 0xCC;         buffer[1] = 0xDD;         BLOB1.Write(buffer, 0, 2);         BLOB1.Position = 0;         Console.WriteLine(BLOB1.LobType + \".Write(\" + buffer + \", 0, 2) => \" + BLOB1.Value);            //Example - Copying data into another LOB.         long actual = BLOB1.CopyTo(BLOB2);         Console.WriteLine(BLOB1.LobType + \".CopyTo(\" + BLOB2.Value + \") => \" + actual);            //Commit the transaction now that everything succeeded.         //Note: On error, Transaction.Dispose is called (from the using statement)         //and will automatically roll-back the pending transaction.         command.Transaction.Commit();      }   }   ```      > [!NOTE] >  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the write operation is successful, the position within the stream advances by the number of bytes written.","pos":[0,109]},{"content":"If an exception occurs, the position within the stream remains unchanged.","pos":[110,183]},{"content":"Writing beyond the end of <ph id=\"ph1\">`LOB`</ph> is allowed and enlarges the <ph id=\"ph2\">`LOB`</ph> by the number of bytes written.","pos":[190,287],"source":"       Writing beyond the end of `LOB` is allowed and enlarges the `LOB` by the number of bytes written."},{"content":"The .NET Framework Data Provider for Oracle handles all <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data as Unicode.","pos":[294,385],"source":"       The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode."},{"content":"Therefore, when accessing <ph id=\"ph1\">`CLOB`</ph> and <ph id=\"ph2\">`NCLOB`</ph> data types, you are always dealing with the number of bytes, where each character is 2 bytes.","pos":[386,524],"source":" Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes."},{"content":"For example, if a string of text containing three characters is saved as an <ph id=\"ph1\">`NCLOB`</ph> on an Oracle server where the character set is 4 bytes per character, and you perform a <ph id=\"ph2\">`Write`</ph> operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.","pos":[525,813],"source":" For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `Write` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[820,980],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"The following C# example demonstrates how to write to &lt;xref:System.Data.OracleClient.OracleLob&gt; objects.","pos":[987,1091],"source":"       The following C# example demonstrates how to write to <xref:System.Data.OracleClient.OracleLob> objects."},{"content":"<ph id=\"ph1\">```   public static void WriteLobExample(OracleCommand command)   {      //Note: Updating LOB data requires a transaction.      command.Transaction = command.Connection.BeginTransaction();      //Select some data.      //    Table Schema:      //        \"CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)\";      //        \"INSERT INTO tablewithlobs values (1, 'AA', 'AAA')\";      command.CommandText = \"SELECT * FROM TableWithLobs FOR UPDATE\";      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain both LOBs.         OracleLob BLOB1    = reader.GetOracleLob(1);         OracleLob BLOB2    = reader.GetOracleLob(2);         //Perform any desired operations on the LOB, (read, position, and so on).         //...         //Example - Writing binary data (directly to the backend).         //To write, you can use any of the stream classes, or write raw binary data using          //the OracleLob write method. Writing character vs. binary is the same;         //however note that character is always in terms of Unicode byte counts         //(for example: even number of bytes - 2 bytes for every Unicode character).         byte[] buffer = new byte[100];         buffer[0] = 0xCC;         buffer[1] = 0xDD;         BLOB1.Write(buffer, 0, 2);         BLOB1.Position = 0;         Console.WriteLine(BLOB1.LobType + \".Write(\" + buffer + \", 0, 2) =&gt; \" + BLOB1.Value);            //Example - Copying data into another LOB.         long actual = BLOB1.CopyTo(BLOB2);         Console.WriteLine(BLOB1.LobType + \".CopyTo(\" + BLOB2.Value + \") =&gt; \" + actual);            //Commit the transaction now that everything succeeded.         //Note: On error, Transaction.Dispose is called (from the using statement)         //and will automatically roll-back the pending transaction.         command.Transaction.Commit();      }   }   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  A write operation to a read-only <ph id=\"ph4\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph5\">`LOB`</ph> on the server.","pos":[1097,3141],"source":"```   public static void WriteLobExample(OracleCommand command)   {      //Note: Updating LOB data requires a transaction.      command.Transaction = command.Connection.BeginTransaction();      //Select some data.      //    Table Schema:      //        \"CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)\";      //        \"INSERT INTO tablewithlobs values (1, 'AA', 'AAA')\";      command.CommandText = \"SELECT * FROM TableWithLobs FOR UPDATE\";      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain both LOBs.         OracleLob BLOB1    = reader.GetOracleLob(1);         OracleLob BLOB2    = reader.GetOracleLob(2);         //Perform any desired operations on the LOB, (read, position, and so on).         //...         //Example - Writing binary data (directly to the backend).         //To write, you can use any of the stream classes, or write raw binary data using          //the OracleLob write method. Writing character vs. binary is the same;         //however note that character is always in terms of Unicode byte counts         //(for example: even number of bytes - 2 bytes for every Unicode character).         byte[] buffer = new byte[100];         buffer[0] = 0xCC;         buffer[1] = 0xDD;         BLOB1.Write(buffer, 0, 2);         BLOB1.Position = 0;         Console.WriteLine(BLOB1.LobType + \".Write(\" + buffer + \", 0, 2) => \" + BLOB1.Value);            //Example - Copying data into another LOB.         long actual = BLOB1.CopyTo(BLOB2);         Console.WriteLine(BLOB1.LobType + \".CopyTo(\" + BLOB2.Value + \") => \" + actual);            //Commit the transaction now that everything succeeded.         //Note: On error, Transaction.Dispose is called (from the using statement)         //and will automatically roll-back the pending transaction.         command.Transaction.Commit();      }   }   ```      > [!NOTE] >  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[3142,3204],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[3205,3342],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."}]},{"pos":[71784,71899],"content":"An array of bytes. This method copies the number of bytes specified in `count` from `buffer` to the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"This method copies the number of bytes specified in <ph id=\"ph1\">`count`</ph> from <ph id=\"ph2\">`buffer`</ph> to the current stream.","pos":[19,115],"source":" This method copies the number of bytes specified in `count` from `buffer` to the current stream."}]},{"pos":[71961,72227],"content":"The zero-based byte offset in `buffer` at which to begin copying bytes to the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based byte offset in <ph id=\"ph1\">`buffer`</ph> at which to begin copying bytes to the current stream.","pos":[0,93],"source":"The zero-based byte offset in `buffer` at which to begin copying bytes to the current stream."},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[94,266],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[72288,72517],"content":"The number of bytes to be written to the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to be written to the current stream.","pos":[0,56]},{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types, this must be an even number.","pos":[57,229],"source":" For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number."}]},{"pos":[72688,72827],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a null reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"The <code>buffer</code> parameter is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[72943,73525],"content":"A value in the <code>offset</code> or <code>count</code> parameter is not positive.       -or-       The sum of the <code>offset</code> and <code>count</code> parameters is larger than the <code>buffer</code> length.       -or-       A value specified in the <code>count</code> or <code>offset</code> parameter is less than zero or greater than 4 gigabytes.       -or-       You must specify <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types as an even number of bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"A value in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is not positive.","pos":[0,83],"source":"A value in the <code>offset</code> or <code>count</code> parameter is not positive."},{"content":"-or-       The sum of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters is larger than the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">buffer</ph><ept id=\"p3\">&lt;/code&gt;</ept> length.","pos":[90,216],"source":"       -or-       The sum of the <code>offset</code> and <code>count</code> parameters is larger than the <code>buffer</code> length."},{"content":"-or-       A value specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than zero or greater than 4 gigabytes.","pos":[223,357],"source":"       -or-       A value specified in the <code>count</code> or <code>offset</code> parameter is less than zero or greater than 4 gigabytes."},{"content":"-or-       You must specify <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> data types as an even number of bytes.","pos":[364,558],"source":"       -or-       You must specify <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types as an even number of bytes."}]},{"pos":[73637,73784],"content":"The operation is not within a transaction, the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is null, or the connection is closed.","needQuote":true,"needEscape":true,"source":"The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed."},{"pos":[73891,73925],"content":"The object was closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object was closed or disposed.","pos":[0,34]}]},{"pos":[74052,74081],"content":"An Oracle error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Oracle error has occurred.","pos":[0,29]}]},{"pos":[74500,74665],"content":"Writes a byte to the current position in the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleLob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> stream, and advances the position within the stream by one byte.","needQuote":true,"needEscape":true,"source":"Writes a byte to the current position in the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream, and advances the position within the stream by one byte."},{"pos":[74678,75423],"content":"If the write operation is successful, the position within the stream advances by one byte. If an exception occurs, the position within the stream remains unchanged.       Writing beyond the end of the `LOB` is allowed and enlarges the `LOB` by one byte.       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.      > [!NOTE] >  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the write operation is successful, the position within the stream advances by one byte.","pos":[0,90]},{"content":"If an exception occurs, the position within the stream remains unchanged.","pos":[91,164]},{"content":"Writing beyond the end of the <ph id=\"ph1\">`LOB`</ph> is allowed and enlarges the <ph id=\"ph2\">`LOB`</ph> by one byte.","pos":[171,253],"source":"       Writing beyond the end of the `LOB` is allowed and enlarges the `LOB` by one byte."},{"content":"To write to the <ph id=\"ph1\">`LOB`</ph>, you must have retrieved the <ph id=\"ph2\">`LOB`</ph> using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.","pos":[260,420],"source":"       To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A write operation to a read-only <ph id=\"ph2\">`LOB`</ph> might succeed, but does not update the <ph id=\"ph3\">`LOB`</ph> on the server.","pos":[426,537],"source":"      > [!NOTE] >  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server."},{"content":"In this case, however, the local copy of the <ph id=\"ph1\">`LOB`</ph> is updated.","pos":[538,600],"source":" In this case, however, the local copy of the `LOB` is updated."},{"content":"Therefore, later read operations on the &lt;xref:System.Data.OracleClient.OracleLob&gt; object might return the results of the write operation.","pos":[601,738],"source":" Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation."}]},{"pos":[75568,75600],"content":"The byte to write to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte to write to the stream.","pos":[0,32]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.OracleClient.OracleLob\n  id: OracleLob\n  children:\n  - System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)\n  - System.Data.OracleClient.OracleLob.BeginBatch\n  - System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)\n  - System.Data.OracleClient.OracleLob.CanRead\n  - System.Data.OracleClient.OracleLob.CanSeek\n  - System.Data.OracleClient.OracleLob.CanWrite\n  - System.Data.OracleClient.OracleLob.ChunkSize\n  - System.Data.OracleClient.OracleLob.Clone\n  - System.Data.OracleClient.OracleLob.Connection\n  - System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)\n  - System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)\n  - System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)\n  - System.Data.OracleClient.OracleLob.Dispose(System.Boolean)\n  - System.Data.OracleClient.OracleLob.EndBatch\n  - System.Data.OracleClient.OracleLob.Erase\n  - System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)\n  - System.Data.OracleClient.OracleLob.Flush\n  - System.Data.OracleClient.OracleLob.IsBatched\n  - System.Data.OracleClient.OracleLob.IsNull\n  - System.Data.OracleClient.OracleLob.IsTemporary\n  - System.Data.OracleClient.OracleLob.Length\n  - System.Data.OracleClient.OracleLob.LobType\n  - System.Data.OracleClient.OracleLob.Null\n  - System.Data.OracleClient.OracleLob.Position\n  - System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Data.OracleClient.OracleLob.SetLength(System.Int64)\n  - System.Data.OracleClient.OracleLob.Value\n  - System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Data.OracleClient.OracleLob.WriteByte(System.Byte)\n  langs:\n  - csharp\n  name: OracleLob\n  nameWithType: OracleLob\n  fullName: System.Data.OracleClient.OracleLob\n  type: Class\n  summary: Represents a large object binary (<xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>) data type stored on an Oracle server. This class cannot be inherited.\n  remarks: \"An OracleLob differs from an <xref:System.Data.OracleClient.OracleBFile> in that the data is stored on the server instead of in a physical file in the operating system. It can also be a read-write object, unlike an <xref:System.Data.OracleClient.OracleBFile>, which is always read-only.  \\n  \\n An OracleLob may be one of these <xref:System.Data.OracleClient.OracleType> data types.  \\n  \\n|OracleType data type|Description|  \\n|--------------------------|-----------------|  \\n|`Blob`|An Oracle `BLOB` data type that contains binary data with a maximum size of 4 gigabytes (GB). This maps to an <xref:System.Array> of type <xref:System.Byte>.|  \\n|`Clob`|An Oracle `CLOB` data type that contains character data, based on the default character set on the server, with a maximum size of 4 GB. This maps to <xref:System.String>.|  \\n|`NClob`|An Oracle `NCLOB` data type that contains character data, based on the national character set on the server with a maximum size of 4 GB. This maps to <xref:System.String>.|  \\n  \\n A .NET application developer can retrieve the Oracle `LOB` values into basic .NET data types, such as <xref:System.Array> of type <xref:System.Byte> and <xref:System.String>, or the specialized OracleLob data type. The OracleLob class supports reading data from and writing to the Oracle `LOB` in the Oracle database.  \\n  \\n The following are the main characteristics of an OracleLob data type that distinguish it from basic .NET data types:  \\n  \\n-   After you retrieve the Oracle `LOB` value from the Oracle database into the OracleLob class, you can change the `LOB` data in an open transaction and your changes are directly reflected to the database. If you retrieve the Oracle `LOB` value into an <xref:System.Array> of type <xref:System.Byte> or <xref:System.String> and update these arrays, your changes are not reflected to the database.  \\n  \\n-   When you use the OracleLob class to access a chunk of a `LOB` value, only that chunk is passed from the Oracle database to the client. When you use the <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> method to access a chunk of a `LOB` value, the entire contents of the value are passed from the Oracle database to the client.  \\n  \\n To obtain an OracleLob object, call the <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> method.  \\n  \\n You can construct an OracleLob that is NULL using this format:  \\n  \\n```  \\nOracleLob myLob = OracleLob.Null;  \\n```  \\n  \\n This technique is used primarily to test whether a `LOB` returned from the server is NULL, as this example illustrates:  \\n  \\n```  \\nIf(myLob == OracleLob.Null)  \\n```  \\n  \\n A NULL `LOB` behaves similarly to a zero-byte `LOB` in that <xref:System.Data.OracleClient.OracleLob.Read%2A> succeeds and always returns zero bytes.  \\n  \\n Selecting a `LOB` column that contains a null value returns <xref:System.Data.OracleClient.OracleLob.Null>.  \\n  \\n You must begin a transaction before obtaining a temporary `LOB`. Otherwise, the <xref:System.Data.OracleClient.OracleDataReader> may fail to obtain data later.  \\n  \\n You can also open a temporary `LOB` in Oracle by calling the DBMS_LOB.CREATETEMPORARY system stored procedure and binding a `LOB` output parameter. On the client side, a temporary `LOB` behaves like a table-based `LOB`. For example, to update the temporary `LOB`, it must be enclosed in a transaction.  \\n  \\n The following C# example demonstrates how to open a temporary `LOB`.  \\n  \\n```  \\nOracleConnection connection = new OracleConnection(\\\"server=MyServer; integrated security=yes;\\\");  \\nconnection.Open();  \\nOracleTransaction transaction = connection.BeginTransaction();  \\nOracleCommand command = connection.CreateCommand();  \\ncommand.Transaction = transaction;  \\ncommand.CommandText = \\\"declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;\\\";  \\ncommand.Parameters.Add(new OracleParameter(\\\"tempblob\\\", OracleType.Blob)).Direction = ParameterDirection.Output;  \\ncommand.ExecuteNonQuery();  \\nOracleLob tempLob = (OracleLob)command.Parameters[0].Value;  \\nbyte[] tempbuff = new byte[10000];  \\ntempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  \\ntempLob.Write(tempbuff,0,tempbuff.Length);  \\ntempLob.EndBatch();  \\ncommand.Parameters.Clear();  \\ncommand.CommandText = \\\"MyTable.MyProc\\\";  \\ncommand.CommandType = CommandType.StoredProcedure;    \\ncommand.Parameters.Add(new OracleParameter(\\\"ImportDoc\\\", OracleType.Blob)).Value = tempLob;  \\ncommand.ExecuteNonQuery();  \\ntransaction.Commit();  \\nconnection.Close  \\n```  \\n  \\n> [!NOTE]\\n>  The inherited <xref:System.IO.Stream.WriteByte%2A> method fails if used with character data, and an <xref:System.InvalidOperationException> is thrown. Use the <xref:System.Data.OracleClient.OracleLob.Write%2A> method instead.  \\n>   \\n>  Temporary `LOB`s are only closed when the connection is closed, but with pooling and under load, temporary `LOB`s do not close. This can be resolved by disposing the temporary `LOB`, by invoking `tempLob.Dispose()`.\"\n  syntax:\n    content: 'public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable'\n  inheritance:\n  - System.IO.Stream\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.ICloneable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)\n  id: Append(System.Data.OracleClient.OracleLob)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Append(OracleLob)\n  nameWithType: OracleLob.Append(OracleLob)\n  fullName: System.Data.OracleClient.OracleLob.Append(OracleLob)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Appends data from the specified <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> to the current <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>.\n  remarks: \"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n All data from the source `LOB` is appended to the end of the current `LOB`. The position of neither `LOB` is evaluated or changed during this process.  \\n  \\n The underlying data types must always be the same. For example, if you are appending from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.  \\n  \\n> [!NOTE]\\n>  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.\"\n  syntax:\n    content: public void Append (System.Data.OracleClient.OracleLob source);\n    parameters:\n    - id: source\n      type: System.Data.OracleClient.OracleLob\n      description: The <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> from which to append data.\n  overload: System.Data.OracleClient.OracleLob.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The source <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is null.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is null, or the connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The source <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.BeginBatch\n  id: BeginBatch\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: BeginBatch()\n  nameWithType: OracleLob.BeginBatch()\n  fullName: System.Data.OracleClient.OracleLob.BeginBatch()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Prevents server-side triggers from firing while performing multiple read operations.\n  remarks: \"Opens the `LOB` in <xref:System.Data.OracleClient.OracleLobOpenMode> mode; therefore, the `LOB` can only be read from, not written to, until the corresponding call to <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>. To perform batch writes to the `LOB`, call <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> with <xref:System.Data.OracleClient.OracleLobOpenMode>.  \\n  \\n Calling BeginBatch more than one time within the same transaction currently throws the Oracle \\\"ORA-22293: LOB already opened in the same transaction\\\" error. In addition, if you obtain the `LOB` using another <xref:System.Data.OracleClient.OracleDataReader>, and the original caller has not called the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method, the same error is generated. Therefore, you must call the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method when you are finished using the <xref:System.Data.OracleClient.OracleLob>.\"\n  syntax:\n    content: public void BeginBatch ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleLob.BeginBatch*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)\n  id: BeginBatch(System.Data.OracleClient.OracleLobOpenMode)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: BeginBatch(OracleLobOpenMode)\n  nameWithType: OracleLob.BeginBatch(OracleLobOpenMode)\n  fullName: System.Data.OracleClient.OracleLob.BeginBatch(OracleLobOpenMode)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Prevents server-side triggers from firing while performing multiple read and write operations in the specified access mode.\n  remarks: \"To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n Calling <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> more than one time within the same transaction currently throws the Oracle \\\"ORA-22293: LOB already opened in the same transaction\\\" error. In addition, if you obtain the `LOB` using another <xref:System.Data.OracleClient.OracleDataReader>, and the original caller has not called the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method, the same error is generated. Therefore, you must call the <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> method when you are finished using the <xref:System.Data.OracleClient.OracleLob>.\"\n  syntax:\n    content: public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);\n    parameters:\n    - id: mode\n      type: System.Data.OracleClient.OracleLobOpenMode\n      description: Mode (one of the <xref href=\"System.Data.OracleClient.OracleLobOpenMode\"></xref> values) in which the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> can be accessed between this BeginBatch call and the corresponding <xref:System.Data.OracleClient.OracleLob.EndBatch*> call.\n  overload: System.Data.OracleClient.OracleLob.BeginBatch*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.CanRead\n  id: CanRead\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: OracleLob.CanRead\n  fullName: System.Data.OracleClient.OracleLob.CanRead\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value indicating whether the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> stream can be read.\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> stream supports reading, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed.\n  overload: System.Data.OracleClient.OracleLob.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.CanSeek\n  id: CanSeek\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: OracleLob.CanSeek\n  fullName: System.Data.OracleClient.OracleLob.CanSeek\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value indicating whether forward and backward seek operations can be performed.\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed, otherwise <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>. Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for <xref href=\"System.Data.OracleClient.OracleLob.Null\"></xref>.\n  overload: System.Data.OracleClient.OracleLob.CanSeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.CanWrite\n  id: CanWrite\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: OracleLob.CanWrite\n  fullName: System.Data.OracleClient.OracleLob.CanWrite\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Always returns true, regardless of whether the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> supports writing or not.\n  remarks: To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have started a local transaction.\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: Always returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, regardless of whether an opened or undisposed <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> supports writing or not, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> is closed or disposed.\n  overload: System.Data.OracleClient.OracleLob.CanWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.ChunkSize\n  id: ChunkSize\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: ChunkSize\n  nameWithType: OracleLob.ChunkSize\n  fullName: System.Data.OracleClient.OracleLob.ChunkSize\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value indicating the minimum number of bytes to retrieve from or send to the server during a read/write operation.\n  remarks: The value returned by the ChunkSize property is not a setting of the .NET Framework Data Provider for Oracle. Instead, it is the value that the Oracle Call Interface (OCI) uses when communicating with the server. Use ChunkSize to ensure that client-side chunks are the same size. Reading or writing in smaller chunks does not cache data, and causes a less-optimized round trip to the server, because a full packet is not received or sent.\n  syntax:\n    content: public int ChunkSize { get; }\n    return:\n      type: System.Int32\n      description: The minimum number of bytes to retrieve or send.\n  overload: System.Data.OracleClient.OracleLob.ChunkSize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Clone\n  id: Clone\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: OracleLob.Clone()\n  fullName: System.Data.OracleClient.OracleLob.Clone()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Creates a new <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object that references the same Oracle <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> as the original <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object.\n  remarks: The properties of the new <xref:System.Data.OracleClient.OracleLob> object initially have the same values as those of the original object. However, after the Clone is complete, each <xref:System.Data.OracleClient.OracleLob> object is independent from the other. For example, changing the value of the <xref:System.Data.OracleClient.OracleLob.Position%2A> property on the original <xref:System.Data.OracleClient.OracleLob> does not change the value of <xref:System.Data.OracleClient.OracleLob.Position%2A> on the copy.\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object that references the same Oracle <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> as the original <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object.\n  overload: System.Data.OracleClient.OracleLob.Clone*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Connection\n  id: Connection\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Connection\n  nameWithType: OracleLob.Connection\n  fullName: System.Data.OracleClient.OracleLob.Connection\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> used by this instance of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref>.\n  syntax:\n    content: public System.Data.OracleClient.OracleConnection Connection { get; }\n    return:\n      type: System.Data.OracleClient.OracleConnection\n      description: The connection to a data source.\n  overload: System.Data.OracleClient.OracleLob.Connection*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)\n  id: CopyTo(System.Data.OracleClient.OracleLob)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: CopyTo(OracleLob)\n  nameWithType: OracleLob.CopyTo(OracleLob)\n  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Copies from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref> to a destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref>.\n  remarks: \"The underlying data types must always be the same. For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.  \\n  \\n If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended. The space between the end of the `LOB` and the destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  In this release, a write operation to a read-only `LOB` might succeed, but not update the `LOB` on the server. In this case, however, the local copy of the `LOB` will be updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.  \\n>   \\n>  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation.\"\n  syntax:\n    content: public long CopyTo (System.Data.OracleClient.OracleLob destination);\n    parameters:\n    - id: destination\n      type: System.Data.OracleClient.OracleLob\n      description: The destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref>.\n    return:\n      type: System.Int64\n      description: The number of bytes copied. This excludes any padded bytes.\n  overload: System.Data.OracleClient.OracleLob.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> specified in the <code>destination</code> parameter is null.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)\n  id: CopyTo(System.Data.OracleClient.OracleLob,System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: CopyTo(OracleLob,Int64)\n  nameWithType: OracleLob.CopyTo(OracleLob,Int64)\n  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob,Int64)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Copies from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref> to a destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref> with the specified amount of data.\n  remarks: \"The underlying data types must always be the same. For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.  \\n  \\n If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended. The space between the end of `LOB` and destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.  \\n>   \\n>  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation.\"\n  syntax:\n    content: public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);\n    parameters:\n    - id: destination\n      type: System.Data.OracleClient.OracleLob\n      description: The destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref>\n    - id: destinationOffset\n      type: System.Int64\n      description: The offset to which to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number of bytes.\n    return:\n      type: System.Int64\n      description: The number of bytes copied. This excludes any padded bytes.\n  overload: System.Data.OracleClient.OracleLob.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> specified in the <code>destination</code> parameter is full.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A value specified in the <code>destinationOffset</code> parameter is less than zero or greater than 4 gigabytes.  \\n  \\n -or-  \\n  \\n A value specified in the <code>destinationOffset</code> parameter for a <xref uid=\\\"langword_csharp_CLOB\\\" name=\\\"CLOB\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_NCLOB\\\" name=\\\"NCLOB\\\" href=\\\"\\\"></xref> data type is not even.  \\n  \\n -or-  \\n  \\n You must specify <xref uid=\\\"langword_csharp_CLOB\\\" name=\\\"CLOB\\\" href=\\\"\\\"></xref> and <xref uid=\\\"langword_csharp_NCLOB\\\" name=\\\"NCLOB\\\" href=\\\"\\\"></xref> data types as an even number of bytes.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)\n  id: CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: CopyTo(Int64,OracleLob,Int64,Int64)\n  nameWithType: OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)\n  fullName: System.Data.OracleClient.OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Copies from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref> to a destination <xref href=\"System.Data.OracleClient.OracleLob\"></xref> with the specified amount of data, and the source offset.\n  remarks: \"The underlying data types must always be the same. For example, if you are copying from an <xref:System.Data.OracleClient.OracleType>, the destination <xref:System.Data.OracleClient.OracleLob> must also be an <xref:System.Data.OracleClient.OracleType>.  \\n  \\n If the destination offset is beyond the end of destination `LOB`, the `LOB` to which the data is being copied is extended. The space between the end of `LOB` and destination offset beyond the end is padded with zeros for `BLOB` data types and spaces for `CLOB` and `NCLOB` data types.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.  \\n>   \\n>  The `CopyTo` method does not clear the contents of the destination `OracleLob` before performing the copy operation.\"\n  syntax:\n    content: public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);\n    parameters:\n    - id: sourceOffset\n      type: System.Int64\n      description: The offset from which to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    - id: destination\n      type: System.Data.OracleClient.OracleLob\n      description: The destination <xref uid=\"langword_csharp_OracleLob\" name=\"OracleLob\" href=\"\"></xref><xref href=\"System.Data.OracleClient\"></xref>.\n    - id: destinationOffset\n      type: System.Int64\n      description: The destination offset to which to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    - id: amount\n      type: System.Int64\n      description: The quantity of data, in bytes, to copy. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    return:\n      type: System.Int64\n      description: The number of bytes copied. This excludes any padded bytes.\n  overload: System.Data.OracleClient.OracleLob.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> specified in the <code>destination</code> parameter is full.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter is less than zero or greater than 4 gigabytes.  \\n  \\n -or-  \\n  \\n A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter for a <xref uid=\\\"langword_csharp_CLOB\\\" name=\\\"CLOB\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_NCLOB\\\" name=\\\"NCLOB\\\" href=\\\"\\\"></xref> data type is not even.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: OracleLob.Dispose(Boolean)\n  fullName: System.Data.OracleClient.OracleLob.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.OracleClient.OracleLob.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.EndBatch\n  id: EndBatch\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: EndBatch()\n  nameWithType: OracleLob.EndBatch()\n  fullName: System.Data.OracleClient.OracleLob.EndBatch()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Allows server-side triggers to resume firing after performing multiple write operations.\n  remarks: Call the <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> method before you begin performing write operations on the <xref:System.Data.OracleClient.OracleLob>.\n  syntax:\n    content: public void EndBatch ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleLob.EndBatch*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Erase\n  id: Erase\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Erase()\n  nameWithType: OracleLob.Erase()\n  fullName: System.Data.OracleClient.OracleLob.Erase()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Erases all data from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref>.\n  remarks: \"Erase does not truncate data. The `LOB` length remains the same for a `BLOB` data type, and the erased data is replaced by 0x00. `CLOB` and `NCLOB` data types are replaced by spaces.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.\"\n  syntax:\n    content: public long Erase ();\n    parameters: []\n    return:\n      type: System.Int64\n      description: The number of bytes erased.\n  overload: System.Data.OracleClient.OracleLob.Erase*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)\n  id: Erase(System.Int64,System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Erase(Int64,Int64)\n  nameWithType: OracleLob.Erase(Int64,Int64)\n  fullName: System.Data.OracleClient.OracleLob.Erase(Int64,Int64)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Erases the specified amount of data from this <xref href=\"System.Data.OracleClient.OracleLob\"></xref>.\n  remarks: \"The sum of the values in the `offset` and `amount` parameters can be greater than that of the size of the <xref:System.Data.OracleClient.OracleLob>. Therefore, specifying a value greater than that returned by the <xref:System.Data.OracleClient.OracleLob.Length%2A> property succeeds; however <xref:System.Data.OracleClient.OracleLob.Erase%2A> only erases to the end of the <xref:System.Data.OracleClient.OracleLob>. (Similarly, if a negative value is passed to `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> will succeed, but only erase starting from the beginning of the <xref:System.Data.OracleClient.OracleLob>.) This behavior is different from that of the <xref:System.Data.OracleClient.OracleLob.Read%2A> and <xref:System.Data.OracleClient.OracleLob.Write%2A> methods, and offers the advantage of being able to erase all data from the value specified by `offset` without making an additional roundtrip to the server to verify the actual size.  \\n  \\n <xref:System.Data.OracleClient.OracleLob.Erase%2A> does not truncate data. The `LOB` length remains the same for a `BLOB` data type, and the erased data is replaced by 0x00. `CLOB` and `NCLOB` data types are replaced by spaces.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  In this release, a write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.\"\n  syntax:\n    content: public long Erase (long offset, long amount);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: The offset from which to erase. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    - id: amount\n      type: System.Int64\n      description: The quantity of data, in bytes, to erase. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    return:\n      type: System.Int64\n      description: The number of bytes erased.\n  overload: System.Data.OracleClient.OracleLob.Erase*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Flush\n  id: Flush\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: OracleLob.Flush()\n  fullName: System.Data.OracleClient.OracleLob.Flush()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Not currently supported.\n  remarks: In this release, this method is not functional.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleLob.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.IsBatched\n  id: IsBatched\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: IsBatched\n  nameWithType: OracleLob.IsBatched\n  fullName: System.Data.OracleClient.OracleLob.IsBatched\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value indicating whether an application called the <xref:System.Data.OracleClient.OracleLob.BeginBatch*> method.\n  remarks: 'When using an Oracle 8.0.5 server, an Oracle \"ORA-00600: internal error code\" exception is thrown.'\n  syntax:\n    content: public bool IsBatched { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if application called the <xref:System.Data.OracleClient.OracleLob.BeginBatch*> method, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleLob.IsBatched*\n  exceptions:\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.IsNull\n  id: IsNull\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: IsNull\n  nameWithType: OracleLob.IsNull\n  fullName: System.Data.OracleClient.OracleLob.IsNull\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value that indicates whether the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a <xref href=\"System.Data.OracleClient.OracleBFile.Null\"></xref> stream.\n  syntax:\n    content: public bool IsNull { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a <xref href=\"System.Data.OracleClient.OracleBFile.Null\"></xref> stream, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleLob.IsNull*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.IsTemporary\n  id: IsTemporary\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: IsTemporary\n  nameWithType: OracleLob.IsTemporary\n  fullName: System.Data.OracleClient.OracleLob.IsTemporary\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value indicating whether the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a temporary <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>.\n  remarks: \"The following example demonstrates how to create a temporary `LOB`.  \\n  \\n```  \\nOracleConnection connection = new OracleConnection(\\\"server=MyServer; integrated security=yes;\\\");  \\nconnection.Open();  \\nOracleTransaction transaction = connection.BeginTransaction();  \\nOracleCommand command = connection.CreateCommand();  \\ncommand.Transaction = transaction;  \\ncommand.CommandText = \\\"declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;\\\";  \\ncommand.Parameters.Add(new OracleParameter(\\\"tempblob\\\", OracleType.Blob)).Direction = ParameterDirection.Output;  \\ncommand.ExecuteNonQuery();  \\nOracleLob tempLob = (OracleLob)command.Parameters[0].Value;  \\ntempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  \\ntempLob.Write(tempbuff,0,tempbuff.Length);  \\ntempLob.EndBatch();  \\ncommand.Parameters.Clear();  \\ncommand.CommandText = \\\"MyTable.MyProc\\\";  \\ncommand.CommandType = CommandType.StoredProcedure;    \\ncommand.Parameters.Add(new OracleParameter(\\\"ImportDoc\\\", OracleType.Blob)).Value = tempLob;  \\ncommand.ExecuteNonQuery();  \\ntransaction.Commit();  \\nconnection.Close  \\n```\"\n  syntax:\n    content: public bool IsTemporary { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> is a temporary <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref>, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleLob.IsTemporary*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Length\n  id: Length\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Length\n  nameWithType: OracleLob.Length\n  fullName: System.Data.OracleClient.OracleLob.Length\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value that returns the size of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref>.\n  remarks: The size of the <xref:System.Data.OracleClient.OracleLob> is always returned in bytes for all data types.\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: The size of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> in bytes.\n  overload: System.Data.OracleClient.OracleLob.Length*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.LobType\n  id: LobType\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: LobType\n  nameWithType: OracleLob.LobType\n  fullName: System.Data.OracleClient.OracleLob.LobType\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a value that returns the <xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> data type.\n  remarks: \"An <xref:System.Data.OracleClient.OracleLob> may be one of the following <xref:System.Data.OracleClient.OracleType> data types.  \\n  \\n|OracleType data type|Description|  \\n|--------------------------|-----------------|  \\n|`Blob`|An Oracle `BLOB` data type that contains binary data with a maximum size of 4 gigabytes. This maps to an <xref:System.Array> of type <xref:System.Byte>.|  \\n|`Clob`|An Oracle `CLOB` data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes. This maps to <xref:System.String>.|  \\n|`NClob`|An Oracle `NCLOB` data type that contains character data, based on the national character set on the server with a maximum size of 4 gigabytes. This maps to <xref:System.String>.|\"\n  syntax:\n    content: public System.Data.OracleClient.OracleType LobType { get; }\n    return:\n      type: System.Data.OracleClient.OracleType\n      description: One of the <xref href=\"System.Data.OracleClient.OracleType\"></xref><xref uid=\"langword_csharp_LOB\" name=\"LOB\" href=\"\"></xref> data types.\n  overload: System.Data.OracleClient.OracleLob.LobType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Null\n  id: \"Null\"\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: \"Null\"\n  nameWithType: OracleLob.Null\n  fullName: System.Data.OracleClient.OracleLob.Null\n  type: Field\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Represents a null <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object.\n  remarks: \"You can construct an <xref:System.Data.OracleClient.OracleLob> that is NULL using this format:  \\n  \\n```  \\nOracleLob myLob = OracleLOB.Null;  \\n```  \\n  \\n This technique is used primarily to test whether a `LOB` returned from the server is NULL, as this example illustrates:  \\n  \\n```  \\nIf(myLob == OracleLob.Null)  \\n```  \\n  \\n A NULL `LOB` behaves similarly to a zero byte `LOB` in that <xref:System.Data.OracleClient.OracleLob.Read%2A> succeeds and always returns zero bytes.\"\n  syntax:\n    content: public static readonly System.Data.OracleClient.OracleLob Null;\n    return:\n      type: System.Data.OracleClient.OracleLob\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Position\n  id: Position\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Position\n  nameWithType: OracleLob.Position\n  fullName: System.Data.OracleClient.OracleLob.Position\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the current read position in the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream.\n  remarks: \"The stream must support seeking to get or set the position. Use the <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> property to determine whether the stream supports seeking.  \\n  \\n Seeking to any location beyond the length of the stream is supported. Seeking to an odd position for `CLOB` and `NCLOB` data types is also supported. For more information, see the Remarks section of the <xref:System.Data.OracleClient.OracleLob.Read%2A> property.  \\n  \\n The Position property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.\"\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position within the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream.\n  overload: System.Data.OracleClient.OracleLob.Position*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: OracleLob.Read(Byte[],Int32,Int32)\n  fullName: System.Data.OracleClient.OracleLob.Read(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Reads a sequence of bytes from the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream and advances the position within the stream by the number of bytes read.\n  remarks: \"The Read method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Read returns the number of bytes read. The return value is zero only if the position is currently at the end of the stream. Read will block until at least one byte of data can be read, in the event that no data is available.Read returns 0 if you attempt to read from a `LOB` when the current position is at the end of `LOB`. Read can return fewer bytes than requested even if the end of the stream has not been reached.  \\n  \\n The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode. Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes. For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `Read` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.  \\n  \\n The following C# example demonstrates how to read <xref:System.Data.OracleClient.OracleLob> objects.  \\n  \\n```  \\npublic static void ReadLobExample(OracleCommand command)  \\n{  \\n   int actual = 0;  \\n  \\n   //Select some data.  \\n   // Table Schema:  \\n   //  \\\"CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)\\\";  \\n   //  \\\"INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')\\\";  \\n   command.CommandText = \\\"SELECT * FROM TableWithLobs\\\";  \\n   OracleDataReader reader = command.ExecuteReader();  \\n   using(reader)  \\n   {  \\n      //Obtain the first row of data.  \\n      reader.Read();  \\n      //Obtain the LOBs (all 3 varieties).  \\n      OracleLob BLOB = reader.GetOracleLob(1);  \\n      OracleLob CLOB  = reader.GetOracleLob(2);  \\n      OracleLob NCLOB = reader.GetOracleLob(3);  \\n  \\n      //Example - Reading binary data (in chunks).  \\n      byte[] buffer = new byte[100];  \\n      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  \\n         Console.WriteLine(BLOB.LobType + \\\".Read(\\\" + buffer + \\\", \\\" + buffer.Length + \\\") => \\\" + actual);  \\n  \\n      //Example - Reading CLOB/NCLOB data (in chunks).  \\n      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  \\n      //However, because the OracleLob object inherits directly from the.NET stream object,   \\n      //all the existing classes that manipluate streams can also be used. For example, the   \\n      //.NET StreamReader makes converting the raw bytes into actual characters easier.  \\n      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  \\n      char[] cbuffer = new char[100];  \\n      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  \\n         Console.WriteLine(CLOB.LobType + \\\".Read(\\\" + new string(cbuffer, 0, actual) + \\\", \\\" + cbuffer.Length + \\\") => \\\" + actual);  \\n  \\n      //Example - Reading data (all at once).  \\n      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  \\n      //call OracleLob.Value to obtain a contiguous allocation of all the data.  \\n      Console.WriteLine(NCLOB.LobType + \\\".Value => \\\" + NCLOB.Value);  \\n   }  \\n}  \\n```  \\n  \\n You can construct an <xref:System.Data.OracleClient.OracleLob> that is NULL using this format:  \\n  \\n```  \\nOracleLob myLob = OracleLob.Null;  \\n```  \\n  \\n This technique is used primarily to test whether a `LOB` returned from the server is NULL, as the following example illustrates.  \\n  \\n```  \\nIf(myLob == OracleLob.Null)  \\n```  \\n  \\n A NULL `LOB` behaves similarly to a zero byte `LOB` in that Read succeeds and always returns zero bytes.\"\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. When this method returns, the buffer contains the specified byte array with the values between `offset` and (`offset` + `count`) replaced by the bytes read from the current source.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in `buffer` at which to begin storing the data read from the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to be read from the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    return:\n      type: System.Int32\n      description: The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.\n  overload: System.Data.OracleClient.OracleLob.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A value in the <code>offset</code> or <code>count</code> parameter is not positive.  \\n  \\n -or-  \\n  \\n The sum of the offset and count parameters is larger than the buffer length.  \\n  \\n -or-  \\n  \\n A value specified in the <code>amount</code> or <code>offset</code> parameter is less than zero or greater than 4 gigabytes.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: OracleLob.Seek(Int64,SeekOrigin)\n  fullName: System.Data.OracleClient.OracleLob.Seek(Int64,SeekOrigin)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Sets the position on the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream.\n  remarks: \"If `offset` is negative, the new position must precede the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero, the new position must be the position specified by `origin`. If `offset` is positive, the new position must follow the position specified by `origin` by the number of bytes specified by `offset`.  \\n  \\n Seeking to any location beyond the length of the stream is supported. Seeking to an odd position for `CLOB` and `NCLOB` data types is also supported. For more information, see the Remarks section of the <xref:System.Data.OracleClient.OracleLob.Read%2A> property.\"\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: A byte offset relative to origin. If `offset` is negative, the new position precedes the position specified by `origin` by the number of bytes specified by `offset`. If `offset` is zero, the new position is the position specified by `origin`. If `offset` is positive, the new position follows the position specified by `origin` by the number of bytes specified by `offset`.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: A value of type <xref:System.IO.SeekOrigin> indicating the reference point used to obtain the new position.\n    return:\n      type: System.Int64\n      description: The new position within the current stream.\n  overload: System.Data.OracleClient.OracleLob.Seek*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>origin</code> parameter does not contain a valid value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The resulting position is beyond the length of the value.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: OracleLob.SetLength(Int64)\n  fullName: System.Data.OracleClient.OracleLob.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Sets the length of the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream to a value less than the current length.\n  remarks: \"An attempt to increase the length of the <xref:System.Data.OracleClient.OracleLob> stream fails, and returns \\\"Message: ORA-22926: specified trim length is greater than current LOB value's length\\\" from the Oracle server.  \\n  \\n A stream must support both writing and seeking for SetLength to function.  \\n  \\n The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode. Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes. For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `SetLength` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.\"\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The desired length of the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream in bytes. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n  overload: System.Data.OracleClient.OracleLob.SetLength*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A value specified in the <code>value</code> parameter for a <xref uid=\\\"langword_csharp_CLOB\\\" name=\\\"CLOB\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_NCLOB\\\" name=\\\"NCLOB\\\" href=\\\"\\\"></xref> data type is not even.  \\n  \\n -or-  \\n  \\n A value specified in the <code>value</code> parameter is less than zero or greater than 4 gigabytes.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Value\n  id: Value\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Value\n  nameWithType: OracleLob.Value\n  fullName: System.Data.OracleClient.OracleLob.Value\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the common language runtime stream value equivalent of the underlying value.\n  remarks: \"For <xref:System.Data.OracleClient.OracleType> data types, Value returns the entire underlying data as a contiguous array of type `Byte[]`. For <xref:System.Data.OracleClient.OracleType> and <xref:System.Data.OracleClient.OracleType> data types, Value returns all the data as a `String` data type. For null data, Value returns <xref:System.DBNull>. By comparing the returned values, you can distinguish among empty data, null data, and data.  \\n  \\n> [!NOTE]\\n>  A benefit of using `LOB` data types is the capability to retrieve large amounts of data in chunks at the client. However, when you use Value, you obtain all the data for the `LOB` column as one contiguous chunk, which can significantly increase application overhead.\"\n  syntax:\n    content: public object Value { get; }\n    return:\n      type: System.Object\n      description: For <xref href=\"System.Data.OracleClient.OracleType\"></xref>, an array of type <xref uid=\"langword_csharp_Byte[]\" name=\"Byte[]\" href=\"\"></xref>. For <xref href=\"System.Data.OracleClient.OracleType\"></xref> and <xref href=\"System.Data.OracleClient.OracleType\"></xref>, a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. For null data, <xref href=\"System.DBNull\"></xref>.\n  overload: System.Data.OracleClient.OracleLob.Value*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: OracleLob.Write(Byte[],Int32,Int32)\n  fullName: System.Data.OracleClient.OracleLob.Write(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Writes a sequence of bytes to the current <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream, and advances the current position within this stream by the number of bytes written.\n  remarks: \"If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.  \\n  \\n Writing beyond the end of `LOB` is allowed and enlarges the `LOB` by the number of bytes written.  \\n  \\n The .NET Framework Data Provider for Oracle handles all `CLOB` and `NCLOB` data as Unicode. Therefore, when accessing `CLOB` and `NCLOB` data types, you are always dealing with the number of bytes, where each character is 2 bytes. For example, if a string of text containing three characters is saved as an `NCLOB` on an Oracle server where the character set is 4 bytes per character, and you perform a `Write` operation, you specify the length of the string as 6 bytes, although it is stored as 12 bytes on the server.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n The following C# example demonstrates how to write to <xref:System.Data.OracleClient.OracleLob> objects.  \\n  \\n```  \\npublic static void WriteLobExample(OracleCommand command)  \\n{  \\n   //Note: Updating LOB data requires a transaction.  \\n   command.Transaction = command.Connection.BeginTransaction();  \\n   //Select some data.  \\n   //    Table Schema:  \\n   //        \\\"CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)\\\";  \\n   //        \\\"INSERT INTO tablewithlobs values (1, 'AA', 'AAA')\\\";  \\n   command.CommandText = \\\"SELECT * FROM TableWithLobs FOR UPDATE\\\";  \\n   OracleDataReader reader = command.ExecuteReader();  \\n   using(reader)  \\n   {  \\n      //Obtain the first row of data.  \\n      reader.Read();  \\n      //Obtain both LOBs.  \\n      OracleLob BLOB1    = reader.GetOracleLob(1);  \\n      OracleLob BLOB2    = reader.GetOracleLob(2);  \\n      //Perform any desired operations on the LOB, (read, position, and so on).  \\n      //...  \\n      //Example - Writing binary data (directly to the backend).  \\n      //To write, you can use any of the stream classes, or write raw binary data using   \\n      //the OracleLob write method. Writing character vs. binary is the same;  \\n      //however note that character is always in terms of Unicode byte counts  \\n      //(for example: even number of bytes - 2 bytes for every Unicode character).  \\n      byte[] buffer = new byte[100];  \\n      buffer[0] = 0xCC;  \\n      buffer[1] = 0xDD;  \\n      BLOB1.Write(buffer, 0, 2);  \\n      BLOB1.Position = 0;  \\n      Console.WriteLine(BLOB1.LobType + \\\".Write(\\\" + buffer + \\\", 0, 2) => \\\" + BLOB1.Value);  \\n  \\n      //Example - Copying data into another LOB.  \\n      long actual = BLOB1.CopyTo(BLOB2);  \\n      Console.WriteLine(BLOB1.LobType + \\\".CopyTo(\\\" + BLOB2.Value + \\\") => \\\" + actual);  \\n  \\n      //Commit the transaction now that everything succeeded.  \\n      //Note: On error, Transaction.Dispose is called (from the using statement)  \\n      //and will automatically roll-back the pending transaction.  \\n      command.Transaction.Commit();  \\n   }  \\n}  \\n```  \\n  \\n> [!NOTE]\\n>  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.\"\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. This method copies the number of bytes specified in `count` from `buffer` to the current stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in `buffer` at which to begin copying bytes to the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to be written to the current stream. For <xref uid=\"langword_csharp_CLOB\" name=\"CLOB\" href=\"\"></xref> and <xref uid=\"langword_csharp_NCLOB\" name=\"NCLOB\" href=\"\"></xref> data types, this must be an even number.\n  overload: System.Data.OracleClient.OracleLob.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A value in the <code>offset</code> or <code>count</code> parameter is not positive.  \\n  \\n -or-  \\n  \\n The sum of the <code>offset</code> and <code>count</code> parameters is larger than the <code>buffer</code> length.  \\n  \\n -or-  \\n  \\n A value specified in the <code>count</code> or <code>offset</code> parameter is less than zero or greater than 4 gigabytes.  \\n  \\n -or-  \\n  \\n You must specify <xref uid=\\\"langword_csharp_CLOB\\\" name=\\\"CLOB\\\" href=\\\"\\\"></xref> and <xref uid=\\\"langword_csharp_NCLOB\\\" name=\\\"NCLOB\\\" href=\\\"\\\"></xref> data types as an even number of bytes.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is not within a transaction, the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> object is null, or the connection is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object was closed or disposed.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: An Oracle error has occurred.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleLob.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.Data.OracleClient.OracleLob\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: OracleLob.WriteByte(Byte)\n  fullName: System.Data.OracleClient.OracleLob.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Writes a byte to the current position in the <xref href=\"System.Data.OracleClient.OracleLob\"></xref> stream, and advances the position within the stream by one byte.\n  remarks: \"If the write operation is successful, the position within the stream advances by one byte. If an exception occurs, the position within the stream remains unchanged.  \\n  \\n Writing beyond the end of the `LOB` is allowed and enlarges the `LOB` by one byte.  \\n  \\n To write to the `LOB`, you must have retrieved the `LOB` using the FOR UPDATE clause in the SQL SELECT statement, and you must have a local transaction started.  \\n  \\n> [!NOTE]\\n>  A write operation to a read-only `LOB` might succeed, but does not update the `LOB` on the server. In this case, however, the local copy of the `LOB` is updated. Therefore, later read operations on the <xref:System.Data.OracleClient.OracleLob> object might return the results of the write operation.\"\n  syntax:\n    content: public override void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The byte to write to the stream.\n  overload: System.Data.OracleClient.OracleLob.WriteByte*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IO.Stream\n  isExternal: false\n  name: System.IO.Stream\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.Data.OracleClient.OracleException\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleException\n  nameWithType: OracleException\n  fullName: System.Data.OracleClient.OracleException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Append(OracleLob)\n  nameWithType: OracleLob.Append(OracleLob)\n  fullName: System.Data.OracleClient.OracleLob.Append(OracleLob)\n- uid: System.Data.OracleClient.OracleLob\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleLob\n  nameWithType: OracleLob\n  fullName: System.Data.OracleClient.OracleLob\n- uid: System.Data.OracleClient.OracleLob.BeginBatch\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: BeginBatch()\n  nameWithType: OracleLob.BeginBatch()\n  fullName: System.Data.OracleClient.OracleLob.BeginBatch()\n- uid: System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: BeginBatch(OracleLobOpenMode)\n  nameWithType: OracleLob.BeginBatch(OracleLobOpenMode)\n  fullName: System.Data.OracleClient.OracleLob.BeginBatch(OracleLobOpenMode)\n- uid: System.Data.OracleClient.OracleLobOpenMode\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleLobOpenMode\n  nameWithType: OracleLobOpenMode\n  fullName: System.Data.OracleClient.OracleLobOpenMode\n- uid: System.Data.OracleClient.OracleLob.CanRead\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CanRead\n  nameWithType: OracleLob.CanRead\n  fullName: System.Data.OracleClient.OracleLob.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.OracleClient.OracleLob.CanSeek\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CanSeek\n  nameWithType: OracleLob.CanSeek\n  fullName: System.Data.OracleClient.OracleLob.CanSeek\n- uid: System.Data.OracleClient.OracleLob.CanWrite\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CanWrite\n  nameWithType: OracleLob.CanWrite\n  fullName: System.Data.OracleClient.OracleLob.CanWrite\n- uid: System.Data.OracleClient.OracleLob.ChunkSize\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: ChunkSize\n  nameWithType: OracleLob.ChunkSize\n  fullName: System.Data.OracleClient.OracleLob.ChunkSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.OracleClient.OracleLob.Clone\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Clone()\n  nameWithType: OracleLob.Clone()\n  fullName: System.Data.OracleClient.OracleLob.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.OracleClient.OracleLob.Connection\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Connection\n  nameWithType: OracleLob.Connection\n  fullName: System.Data.OracleClient.OracleLob.Connection\n- uid: System.Data.OracleClient.OracleConnection\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleConnection\n  nameWithType: OracleConnection\n  fullName: System.Data.OracleClient.OracleConnection\n- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CopyTo(OracleLob)\n  nameWithType: OracleLob.CopyTo(OracleLob)\n  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CopyTo(OracleLob,Int64)\n  nameWithType: OracleLob.CopyTo(OracleLob,Int64)\n  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob,Int64)\n- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CopyTo(Int64,OracleLob,Int64,Int64)\n  nameWithType: OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)\n  fullName: System.Data.OracleClient.OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)\n- uid: System.Data.OracleClient.OracleLob.Dispose(System.Boolean)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: OracleLob.Dispose(Boolean)\n  fullName: System.Data.OracleClient.OracleLob.Dispose(Boolean)\n- uid: System.Data.OracleClient.OracleLob.EndBatch\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: EndBatch()\n  nameWithType: OracleLob.EndBatch()\n  fullName: System.Data.OracleClient.OracleLob.EndBatch()\n- uid: System.Data.OracleClient.OracleLob.Erase\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Erase()\n  nameWithType: OracleLob.Erase()\n  fullName: System.Data.OracleClient.OracleLob.Erase()\n- uid: System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Erase(Int64,Int64)\n  nameWithType: OracleLob.Erase(Int64,Int64)\n  fullName: System.Data.OracleClient.OracleLob.Erase(Int64,Int64)\n- uid: System.Data.OracleClient.OracleLob.Flush\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Flush()\n  nameWithType: OracleLob.Flush()\n  fullName: System.Data.OracleClient.OracleLob.Flush()\n- uid: System.Data.OracleClient.OracleLob.IsBatched\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: IsBatched\n  nameWithType: OracleLob.IsBatched\n  fullName: System.Data.OracleClient.OracleLob.IsBatched\n- uid: System.Data.OracleClient.OracleLob.IsNull\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: IsNull\n  nameWithType: OracleLob.IsNull\n  fullName: System.Data.OracleClient.OracleLob.IsNull\n- uid: System.Data.OracleClient.OracleLob.IsTemporary\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: IsTemporary\n  nameWithType: OracleLob.IsTemporary\n  fullName: System.Data.OracleClient.OracleLob.IsTemporary\n- uid: System.Data.OracleClient.OracleLob.Length\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Length\n  nameWithType: OracleLob.Length\n  fullName: System.Data.OracleClient.OracleLob.Length\n- uid: System.Data.OracleClient.OracleLob.LobType\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: LobType\n  nameWithType: OracleLob.LobType\n  fullName: System.Data.OracleClient.OracleLob.LobType\n- uid: System.Data.OracleClient.OracleType\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleType\n  nameWithType: OracleType\n  fullName: System.Data.OracleClient.OracleType\n- uid: System.Data.OracleClient.OracleLob.Null\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: \"Null\"\n  nameWithType: OracleLob.Null\n  fullName: System.Data.OracleClient.OracleLob.Null\n- uid: System.Data.OracleClient.OracleLob.Position\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Position\n  nameWithType: OracleLob.Position\n  fullName: System.Data.OracleClient.OracleLob.Position\n- uid: System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: OracleLob.Read(Byte[],Int32,Int32)\n  fullName: System.Data.OracleClient.OracleLob.Read(Byte[],Int32,Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: OracleLob.Seek(Int64,SeekOrigin)\n  fullName: System.Data.OracleClient.OracleLob.Seek(Int64,SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: true\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Data.OracleClient.OracleLob.SetLength(System.Int64)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: OracleLob.SetLength(Int64)\n  fullName: System.Data.OracleClient.OracleLob.SetLength(Int64)\n- uid: System.Data.OracleClient.OracleLob.Value\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Value\n  nameWithType: OracleLob.Value\n  fullName: System.Data.OracleClient.OracleLob.Value\n- uid: System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: OracleLob.Write(Byte[],Int32,Int32)\n  fullName: System.Data.OracleClient.OracleLob.Write(Byte[],Int32,Int32)\n- uid: System.Data.OracleClient.OracleLob.WriteByte(System.Byte)\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: OracleLob.WriteByte(Byte)\n  fullName: System.Data.OracleClient.OracleLob.WriteByte(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Data.OracleClient.OracleLob.Append*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Append\n  nameWithType: OracleLob.Append\n- uid: System.Data.OracleClient.OracleLob.BeginBatch*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: BeginBatch\n  nameWithType: OracleLob.BeginBatch\n- uid: System.Data.OracleClient.OracleLob.CanRead*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CanRead\n  nameWithType: OracleLob.CanRead\n- uid: System.Data.OracleClient.OracleLob.CanSeek*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CanSeek\n  nameWithType: OracleLob.CanSeek\n- uid: System.Data.OracleClient.OracleLob.CanWrite*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CanWrite\n  nameWithType: OracleLob.CanWrite\n- uid: System.Data.OracleClient.OracleLob.ChunkSize*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: ChunkSize\n  nameWithType: OracleLob.ChunkSize\n- uid: System.Data.OracleClient.OracleLob.Clone*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Clone\n  nameWithType: OracleLob.Clone\n- uid: System.Data.OracleClient.OracleLob.Connection*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Connection\n  nameWithType: OracleLob.Connection\n- uid: System.Data.OracleClient.OracleLob.CopyTo*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: CopyTo\n  nameWithType: OracleLob.CopyTo\n- uid: System.Data.OracleClient.OracleLob.Dispose*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Dispose\n  nameWithType: OracleLob.Dispose\n- uid: System.Data.OracleClient.OracleLob.EndBatch*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: EndBatch\n  nameWithType: OracleLob.EndBatch\n- uid: System.Data.OracleClient.OracleLob.Erase*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Erase\n  nameWithType: OracleLob.Erase\n- uid: System.Data.OracleClient.OracleLob.Flush*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Flush\n  nameWithType: OracleLob.Flush\n- uid: System.Data.OracleClient.OracleLob.IsBatched*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: IsBatched\n  nameWithType: OracleLob.IsBatched\n- uid: System.Data.OracleClient.OracleLob.IsNull*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: IsNull\n  nameWithType: OracleLob.IsNull\n- uid: System.Data.OracleClient.OracleLob.IsTemporary*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: IsTemporary\n  nameWithType: OracleLob.IsTemporary\n- uid: System.Data.OracleClient.OracleLob.Length*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Length\n  nameWithType: OracleLob.Length\n- uid: System.Data.OracleClient.OracleLob.LobType*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: LobType\n  nameWithType: OracleLob.LobType\n- uid: System.Data.OracleClient.OracleLob.Position*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Position\n  nameWithType: OracleLob.Position\n- uid: System.Data.OracleClient.OracleLob.Read*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Read\n  nameWithType: OracleLob.Read\n- uid: System.Data.OracleClient.OracleLob.Seek*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Seek\n  nameWithType: OracleLob.Seek\n- uid: System.Data.OracleClient.OracleLob.SetLength*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: SetLength\n  nameWithType: OracleLob.SetLength\n- uid: System.Data.OracleClient.OracleLob.Value*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Value\n  nameWithType: OracleLob.Value\n- uid: System.Data.OracleClient.OracleLob.Write*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: Write\n  nameWithType: OracleLob.Write\n- uid: System.Data.OracleClient.OracleLob.WriteByte*\n  parent: System.Data.OracleClient.OracleLob\n  isExternal: false\n  name: WriteByte\n  nameWithType: OracleLob.WriteByte\n"}