{"nodes":[{"pos":[684,1076],"content":"Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.       **Security Note**: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).","needQuote":false,"needEscape":true,"nodes":[{"content":"Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.","pos":[0,113]},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept>: Calling methods in this class with untrusted data is a security risk.","pos":[120,208],"source":"**Security Note**: Calling methods in this class with untrusted data is a security risk."},{"content":"Call the methods in the class only with trusted data.","pos":[209,262]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.","pos":[263,390],"source":" For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)."}]},{"pos":[15049,15167],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified stream.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Resources.ResourceReader\"></xref> class for the specified stream."},{"pos":[15180,16063],"content":"The ResourceReader constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly. To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the ResourceReader constructor. To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the ResourceReader constructor.      > [!IMPORTANT] >  Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ResourceReader constructor instantiates a &lt;xref:System.Resources.ResourceReader&gt; object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.","pos":[0,216],"source":"The ResourceReader constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly."},{"content":"To read from a standalone .resources file, instantiate a &lt;xref:System.IO.Stream&gt; object and pass it to the ResourceReader constructor.","pos":[217,351],"source":" To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the ResourceReader constructor."},{"content":"To read from an embedded .resources file, call the &lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName&gt; method with the case-sensitive name of the .resources file, and pass the returned &lt;xref:System.IO.Stream&gt; object to the ResourceReader constructor.","pos":[352,638],"source":" To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the ResourceReader constructor."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Using an instance of this object with untrusted data is a security risk.","pos":[644,734],"source":"      > [!IMPORTANT] >  Using an instance of this object with untrusted data is a security risk."},{"content":"Use this object only with trusted data.","pos":[735,774]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.","pos":[775,880],"source":" For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)."}]},{"pos":[17673,17712],"content":"The input stream for reading resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input stream for reading resources.","pos":[0,39]}]},{"pos":[17872,17922],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not readable.","needQuote":true,"needEscape":true,"source":"The <code>stream</code> parameter is not readable."},{"pos":[18025,18123],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>stream</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18212,18274],"content":"An I/O error has occurred while accessing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An I/O error has occurred while accessing <code>stream</code>."},{"pos":[18689,18820],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified named resource file.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Resources.ResourceReader\"></xref> class for the specified named resource file."},{"pos":[18833,19375],"content":"The ResourceReader constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file. To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.      > [!IMPORTANT] >  Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ResourceReader constructor instantiates a &lt;xref:System.Resources.ResourceReader&gt; object that retrieves resources from a standalone .resources file.","pos":[0,151],"source":"The ResourceReader constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file."},{"content":"To retrieve resources from an embedded .resources file, use the &lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt; constructor.","pos":[152,297],"source":" To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Using an instance of this object with untrusted data is a security risk.","pos":[303,393],"source":"      > [!IMPORTANT] >  Using an instance of this object with untrusted data is a security risk."},{"content":"Use this object only with trusted data.","pos":[394,433]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.","pos":[434,539],"source":" For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)."}]},{"pos":[20487,20568],"content":"The path and name of the resource file to read. `filename` is not case-sensitive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path and name of the resource file to read.","pos":[0,47]},{"content":"<ph id=\"ph1\">`filename`</ph> is not case-sensitive.","pos":[48,81],"source":"`filename` is not case-sensitive."}]},{"pos":[20736,20836],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>fileName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20945,20970],"content":"The file cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file cannot be found.","pos":[0,25]}]},{"pos":[21059,21085],"content":"An I/O error has occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error has occurred.","pos":[0,26]}]},{"pos":[21192,21281],"content":"The resource file has an invalid format. For example, the length of the file may be zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resource file has an invalid format. For example, the length of the file may be zero.","pos":[0,89],"nodes":[{"content":"The resource file has an invalid format.","pos":[0,40]},{"content":"For example, the length of the file may be zero.","pos":[41,89]}]}]},{"pos":[21614,21735],"content":"Releases all operating system resources associated with this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases all operating system resources associated with this <xref href=\"System.Resources.ResourceReader\"></xref> object."},{"pos":[21747,21789],"content":"Close can be safely called multiple times.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Close can be safely called multiple times.","pos":[0,42]}]},{"pos":[22910,23028],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Resources.ResourceReader\"></xref> class."},{"pos":[23041,23622],"content":"When you are finished using this instance of <xref:System.Resources.ResourceReader>, call Dispose to release all resources used by this instance. You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.       Dispose calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources. For more information, see [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you are finished using this instance of &lt;xref:System.Resources.ResourceReader&gt;, call Dispose to release all resources used by this instance.","pos":[0,145],"source":"When you are finished using this instance of <xref:System.Resources.ResourceReader>, call Dispose to release all resources used by this instance."},{"content":"You should eliminate further references to this &lt;xref:System.Resources.ResourceReader&gt; instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.","pos":[146,356],"source":" You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization."},{"content":"Dispose calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.","pos":[363,481]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implementing a Dispose Method<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[482,579],"source":" For more information, see [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[24132,24223],"content":"Returns an enumerator for this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns an enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object."},{"pos":[24236,26010],"content":"Typically, you enumerate resources by calling the GetEnumerator method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`. The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property. The example illustrates how to enumerate resources in this way.       The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:      -   <xref:System.IO.FileNotFoundException>           The assembly that contains the type to which the data belongs cannot be found.      -   <xref:System.FormatException>           The data is not in the expected format.      -   <xref:System.TypeLoadException>           The type to which the data belongs cannot be found.       You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource. For more information, see the \"Retrieving Resources by Name with GetResourceData\" section in the <xref:System.Resources.ResourceReader> class topic.      > [!IMPORTANT] >  The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators. The GetEnumerator method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, you enumerate resources by calling the GetEnumerator method and then repeatedly calling the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method on the returned &lt;xref:System.Collections.IDictionaryEnumerator&gt; object until the method returns <ph id=\"ph1\">`false`</ph>.","pos":[0,264],"source":"Typically, you enumerate resources by calling the GetEnumerator method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`."},{"content":"The resource name is available from the &lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt; property; its value from the &lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt; property.","pos":[265,505],"source":" The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property."},{"content":"The example illustrates how to enumerate resources in this way.","pos":[506,569]},{"content":"The implementation of the &lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt; property by the &lt;xref:System.Resources.ResourceReader&gt; class can throw the following exceptions:      -   &lt;xref:System.IO.FileNotFoundException&gt;           The assembly that contains the type to which the data belongs cannot be found.","pos":[576,917],"source":"       The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:      -   <xref:System.IO.FileNotFoundException>           The assembly that contains the type to which the data belongs cannot be found."},{"content":"-   &lt;xref:System.FormatException&gt;           The data is not in the expected format.","pos":[923,1006],"source":"      -   <xref:System.FormatException>           The data is not in the expected format."},{"content":"-   &lt;xref:System.TypeLoadException&gt;           The type to which the data belongs cannot be found.","pos":[1012,1109],"source":"      -   <xref:System.TypeLoadException>           The type to which the data belongs cannot be found."},{"content":"You can handle the exception by calling the &lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt; method to retrieve information about the data type and the byte array assigned to the named resource.","pos":[1116,1319],"source":"       You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource."},{"content":"For more information, see the \"Retrieving Resources by Name with GetResourceData\" section in the &lt;xref:System.Resources.ResourceReader&gt; class topic.","pos":[1320,1468],"source":" For more information, see the \"Retrieving Resources by Name with GetResourceData\" section in the <xref:System.Resources.ResourceReader> class topic."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Resources.ResourceReader&gt; class includes two methods that return enumerators.","pos":[1474,1586],"source":"      > [!IMPORTANT] >  The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators."},{"content":"The GetEnumerator method returns an &lt;xref:System.Collections.IDictionaryEnumerator&gt; interface object and is the recommended method to call when enumerating resources.","pos":[1587,1753],"source":" The GetEnumerator method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources."}]},{"pos":[27169,27252],"content":"An enumerator for this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object."},{"pos":[27436,27499],"content":"The reader has been closed or disposed, and cannot be accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reader has been closed or disposed, and cannot be accessed.","pos":[0,63]}]},{"pos":[28032,28122],"content":"Retrieves the type name and data of a named resource from an open resource file or stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the type name and data of a named resource from an open resource file or stream.","pos":[0,90]}]},{"pos":[32023,32046],"content":"The name of a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a resource.","pos":[0,23]}]},{"pos":[32115,32293],"content":"When this method returns, contains a string that represents the type name of the retrieved resource (see the Remarks section for details). This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a string that represents the type name of the retrieved resource (see the Remarks section for details). This parameter is passed uninitialized.","pos":[0,178],"nodes":[{"content":"When this method returns, contains a string that represents the type name of the retrieved resource (see the Remarks section for details).","pos":[0,138]},{"content":"This parameter is passed uninitialized.","pos":[139,178]}]}]},{"pos":[32362,32506],"content":"When this method returns, contains a byte array that is the binary representation of the retrieved type. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a byte array that is the binary representation of the retrieved type. This parameter is passed uninitialized.","pos":[0,144],"nodes":[{"content":"When this method returns, contains a byte array that is the binary representation of the retrieved type.","pos":[0,104]},{"content":"This parameter is passed uninitialized.","pos":[105,144]}]}]},{"pos":[32684,32774],"content":"<ph id=\"ph1\">&lt;code&gt;resourceName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>resourceName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32869,32910],"content":"<ph id=\"ph1\">&lt;code&gt;resourceName&lt;/code&gt;</ph> does not exist.","needQuote":true,"needEscape":true,"source":"<code>resourceName</code> does not exist."},{"pos":[33017,33063],"content":"<ph id=\"ph1\">&lt;code&gt;resourceName&lt;/code&gt;</ph> has an invalid type.","needQuote":true,"needEscape":true,"source":"<code>resourceName</code> has an invalid type."},{"pos":[33154,33193],"content":"The retrieved resource data is corrupt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The retrieved resource data is corrupt.","pos":[0,39]}]},{"pos":[33304,33426],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is not initialized, probably because it is closed.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Resources.ResourceReader\"></xref> object is not initialized, probably because it is closed."},{"pos":[33968,34059],"content":"Returns an enumerator for this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns an enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object."},{"pos":[34071,34591],"content":"IEnumerable.GetEnumerator is an explicit interface implementation. It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface. The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"IEnumerable.GetEnumerator is an explicit interface implementation. It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface. The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method.","pos":[0,520],"nodes":[{"content":"IEnumerable.GetEnumerator is an explicit interface implementation.","pos":[0,66]},{"content":"It can be used only when the &lt;xref:System.Resources.ResourceReader&gt; instance is cast to an &lt;xref:System.Collections.IEnumerable&gt; interface.","pos":[67,206],"source":" It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface."},{"content":"The recommended approach to enumerating the resources in a .resources file is to call the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method of the &lt;xref:System.Collections.IDictionaryEnumerator&gt; object returned by the &lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName&gt; method.","pos":[207,520],"source":" The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method."}]}]},{"pos":[34769,34852],"content":"An enumerator for this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object."},{"pos":[35067,35125],"content":"The reader has already been closed and cannot be accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reader has already been closed and cannot be accessed.","pos":[0,58]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Resources.ResourceReader\n  id: ResourceReader\n  children:\n  - System.Resources.ResourceReader.#ctor(System.IO.Stream)\n  - System.Resources.ResourceReader.#ctor(System.String)\n  - System.Resources.ResourceReader.Close\n  - System.Resources.ResourceReader.Dispose\n  - System.Resources.ResourceReader.GetEnumerator\n  - System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)\n  - System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ResourceReader\n  nameWithType: ResourceReader\n  fullName: System.Resources.ResourceReader\n  type: Class\n  summary: \"Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.  \\n  \\n **Security Note**: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).\"\n  remarks: \"The ResourceReader class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface. A ResourceReader instance represents either a standalone .resources file or a .resources file that is embedded in an assembly. It is used to enumerate the resources in a .resources file and retrieve its name/value pairs. It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly. The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the ResourceReader class is useful for retrieving resources whose number or precise names are not known at compile time. For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance. Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a ResourceReader object.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \\n  \\n For more information about using the ResourceReader class, see the following sections:  \\n  \\n-   [Instantiating a ResourceReader object](#instantiate)  \\n  \\n-   [Enumerating a ResourceReader object's resources](#enumerate)  \\n  \\n    -   [Retrieving resources by using IDictionaryEnumerator properties](#idictionaryenumerator)  \\n  \\n    -   [Retrieving resources by name with GetResourceData](#getresourcedata)  \\n  \\n<a name=\\\"instantiate\\\"></a>   \\n## Instantiating a ResourceReader Object  \\n A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/add/includes/ajax-current-ext-md.md). A ResourceReader object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.  \\n  \\n To instantiate a ResourceReader object that reads from a standalone .resources file, use the ResourceReader class constructor with either an input stream or a string that contains the .resources file name. The following example illustrates both approaches. The first instantiates a ResourceReader object that represents a .resources file named `Resources1.resources` by using its file name. The second instantiates a ResourceReader object that represents a .resources file named `Resources2.resources` by using a stream created from the file.  \\n  \\n [!code-cs[System.Resources.ResourceReader.Class#2](~/add/codesnippet/csharp/t-system.resources.resou_0_1.cs)]\\n [!code-vb[System.Resources.ResourceReader.Class#2](~/add/codesnippet/visualbasic/t-system.resources.resou_0_1.vb)]  \\n  \\n To create a ResourceReader object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded. Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor. The following example instantiates a ResourceReader object that represents an embedded .resources file.  \\n  \\n [!code-cs[System.Resources.ResourceReader.Class#3](~/add/codesnippet/csharp/t-system.resources.resou_0_2.cs)]\\n [!code-vb[System.Resources.ResourceReader.Class#3](~/add/codesnippet/visualbasic/t-system.resources.resou_0_2.vb)]  \\n  \\n<a name=\\\"enumerate\\\"></a>   \\n## Enumerating a ResourceReader Object's Resources  \\n To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> object. You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next. The method returns `false` when all the resources in the .resources file have been enumerated.  \\n  \\n> [!NOTE]\\n>  Although the ResourceReader class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> implementation. Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.  \\n  \\n You can retrieve the individual resources in the collection in two ways:  \\n  \\n-   You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> properties to retrieve the resource name and value. We recommend this technique when all the resources are of the same type, or you know the data type of each resource.  \\n  \\n-   You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data. We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.  \\n  \\n<a name=\\\"idictionaryenumerator\\\"></a>   \\n### Retrieving Resources by Using IDictionaryEnumerator Properties  \\n The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair. After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property.  \\n  \\n The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> properties. To run the example, create the following text file named ApplicationResources.txt to define string resources.  \\n  \\n```  \\nTitle=\\\"Contact Information\\\"  \\nLabel1=\\\"First Name:\\\"  \\nLabel2=\\\"Middle Name:\\\"  \\nLabel3=\\\"Last Name:\\\"  \\nLabel4=\\\"SSN:\\\"  \\nLabel5=\\\"Street Address:\\\"  \\nLabel6=\\\"City:\\\"  \\nLabel7=\\\"State:\\\"  \\nLabel8=\\\"Zip Code:\\\"  \\nLabel9=\\\"Home Phone:\\\"  \\nLabel10=\\\"Business Phone:\\\"  \\nLabel11=\\\"Mobile Phone:\\\"  \\nLabel12=\\\"Other Phone:\\\"  \\nLabel13=\\\"Fax:\\\"  \\nLabel14=\\\"Email Address:\\\"  \\nLabel15=\\\"Alternate Email Address:\\\"  \\n```  \\n  \\n You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:  \\n  \\n **resgen ApplicationResources.txt**  \\n  \\n The following example then uses the ResourceReader class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.  \\n  \\n [!code-cs[System.Resources.ResourceReader.Class#1](~/add/codesnippet/csharp/t-system.resources.resou_0_3.cs)]\\n [!code-vb[System.Resources.ResourceReader.Class#1](~/add/codesnippet/visualbasic/t-system.resources.resou_0_3.vb)]  \\n  \\n The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property can throw the following exceptions:  \\n  \\n-   A <xref:System.FormatException> if the data is not in the expected format.  \\n  \\n-   A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.  \\n  \\n-   A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.  \\n  \\n Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type. If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows. This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property attempted to return.  \\n  \\n<a name=\\\"getresourcedata\\\"></a>   \\n### Retrieving Resources by Name with GetResourceData  \\n The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method. For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property, which is then passed to the [GetResourceData(String, String, Byte\\\\[\\\\])](assetId:///M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)?qualifyHint=False&autoUpgrade=False) method to retrieve the resource's data. This is returned as a byte array in the `resourceData` argument.  \\n  \\n This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> properties, because it returns the actual bytes that form the resource value. However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type. For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.  \\n  \\n The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown. It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object. To run the example, do the following:  \\n  \\n1.  Create an assembly named Library.dll that contains the `DateTimeTZI` structure. The following is the source code for the assembly.  \\n  \\n     [!code-vb[System.Resources.ResourceReader.Class#4](~/add/codesnippet/visualbasic/t-system.resources.resou_0_4.vb)]\\n     [!code-cs[System.Resources.ResourceReader.Class#4](~/add/codesnippet/csharp/t-system.resources.resou_0_4.cs)]  \\n  \\n     Compile the source code in C# by using the following command:  \\n  \\n    ```  \\n    csc /t:library library.cs  \\n    ```  \\n  \\n     Or, you can compile it in Visual Basic by using the following command:  \\n  \\n    ```  \\n    vbc library.vb /t:library  \\n    ```  \\n  \\n2.  Compile and execute the following source code, which creates a .resources file named ContactResources.resources.  \\n  \\n     [!code-cs[System.Resources.ResourceReader.Class#5](~/add/codesnippet/csharp/t-system.resources.resou_0_5.cs)]\\n     [!code-vb[System.Resources.ResourceReader.Class#5](~/add/codesnippet/visualbasic/t-system.resources.resou_0_5.vb)]  \\n  \\n     The source code file is named CreateResources.cs. You can compile it in C# by using the following command:  \\n  \\n    ```  \\n    csc CreateResources.cs /r:library.dll  \\n    ```  \\n  \\n     Or, you can compile it in Visual Basic by using the following command:  \\n  \\n    ```  \\n    vbc CreateResources.vb /r:library.dll  \\n    ```  \\n  \\n3.  Compile and run the following code to enumerate the resources in the ContactResources.resources file.  \\n  \\n     [!code-cs[System.Resources.ResourceReader.Class#6](~/add/codesnippet/csharp/t-system.resources.resou_0_6.cs)]\\n     [!code-vb[System.Resources.ResourceReader.Class#6](~/add/codesnippet/visualbasic/t-system.resources.resou_0_6.vb)]  \\n  \\n     After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ResourceReader : System.Resources.IResourceReader\n  inheritance:\n  - System.Object\n  implements:\n  - System.Resources.IResourceReader\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: ResourceReader(Stream)\n  nameWithType: ResourceReader.ResourceReader(Stream)\n  fullName: System.Resources.ResourceReader.ResourceReader(Stream)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Initializes a new instance of the <xref href=\"System.Resources.ResourceReader\"></xref> class for the specified stream.\n  remarks: \"The ResourceReader constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly. To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the ResourceReader constructor. To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the ResourceReader constructor.  \\n  \\n> [!IMPORTANT]\\n>  Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).\"\n  example:\n  - \"The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.  \\n  \\n```  \\n  \\nTitle=\\\"Top Pet Animal Clinic\\\"  \\nLabel1=\\\"Patient Number:\\\"  \\nLabel2=\\\"Pet Name:\\\"  \\nLabel3=\\\"Species:\\\"  \\nLabel4=\\\"Breed:\\\"  \\nLabel5=\\\"Date of Birth:\\\"  \\nLabel6=\\\"Age:\\\"  \\nLabel7=\\\"Owner:\\\"  \\nLabel8=\\\"Address:\\\"  \\nLabel9=\\\"Home Phone:\\\"  \\nLabel10=\\\"Work Phone:\\\"  \\nLabel11=\\\"Mobile Phone:\\\"  \\n  \\n```  \\n  \\n You can compile the .txt file into a .resources file by issuing the following command:  \\n  \\n **resgen PatientForm.txt**  \\n  \\n The following example assumes that the resource file is embedded in the assembly that contains the application's executable code. It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.  \\n  \\n [!code-vb[System.Resources.ResourceReader.Ctor#1](~/add/codesnippet/visualbasic/m-system.resources.resou_7_1.vb)]\\n [!code-cs[System.Resources.ResourceReader.Ctor#1](~/add/codesnippet/csharp/m-system.resources.resou_7_1.cs)]  \\n  \\n If the C# example is named `Example.cs`, you can compile it by using the following command:  \\n  \\n **csc Example.cs /res:PatientForm.resources**  \\n  \\n If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:  \\n  \\n **vbc Example.vb /res:PatientForm.resources**\"\n  syntax:\n    content: public ResourceReader (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The input stream for reading resources.\n  overload: System.Resources.ResourceReader.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>stream</code> parameter is not readable.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>stream</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error has occurred while accessing <code>stream</code>.\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: ResourceReader(String)\n  nameWithType: ResourceReader.ResourceReader(String)\n  fullName: System.Resources.ResourceReader.ResourceReader(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Initializes a new instance of the <xref href=\"System.Resources.ResourceReader\"></xref> class for the specified named resource file.\n  remarks: \"The ResourceReader constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file. To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.  \\n  \\n> [!IMPORTANT]\\n>  Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).\"\n  example:\n  - \"The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.  \\n  \\n```  \\n  \\nTitle=\\\"Top Pet Animal Clinic\\\"  \\nLabel1=\\\"Patient Number:\\\"  \\nLabel2=\\\"Pet Name:\\\"  \\nLabel3=\\\"Species:\\\"  \\nLabel4=\\\"Breed:\\\"  \\nLabel5=\\\"Date of Birth:\\\"  \\nLabel6=\\\"Age:\\\"  \\nLabel7=\\\"Owner:\\\"  \\nLabel8=\\\"Address:\\\"  \\nLabel9=\\\"Home Phone:\\\"  \\nLabel10=\\\"Work Phone:\\\"  \\nLabel11=\\\"Mobile Phone:\\\"  \\n  \\n```  \\n  \\n You can compile this .txt file into a .resources file by issuing the following command:  \\n  \\n **resgen PatientForm.txt**  \\n  \\n The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.  \\n  \\n [!code-cs[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/csharp/m-system.resources.resou_1_1.cs)]\\n [!code-vb[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/visualbasic/m-system.resources.resou_1_1.vb)]\"\n  syntax:\n    content: public ResourceReader (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The path and name of the resource file to read. `filename` is not case-sensitive.\n  overload: System.Resources.ResourceReader.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>fileName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error has occurred.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: The resource file has an invalid format. For example, the length of the file may be zero.\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.Close\n  id: Close\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: ResourceReader.Close()\n  fullName: System.Resources.ResourceReader.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Releases all operating system resources associated with this <xref href=\"System.Resources.ResourceReader\"></xref> object.\n  remarks: Close can be safely called multiple times.\n  example:\n  - \"The following example moves through a file's resources and displays all the key/value pairs it finds. The code then uses the Close method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.  \\n  \\n [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.resources.resou_8_1.vb)]\\n [!code-cs[System.Resources.ResourceReader.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.resources.resou_8_1.cs)]\\n [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.resources.resou_8_1.cpp)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Resources.ResourceReader.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.Dispose\n  id: Dispose\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ResourceReader.Dispose()\n  fullName: System.Resources.ResourceReader.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Resources.ResourceReader\"></xref> class.\n  remarks: \"When you are finished using this instance of <xref:System.Resources.ResourceReader>, call Dispose to release all resources used by this instance. You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.  \\n  \\n Dispose calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources. For more information, see [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Resources.ResourceReader.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.GetEnumerator\n  id: GetEnumerator\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ResourceReader.GetEnumerator()\n  fullName: System.Resources.ResourceReader.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Returns an enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object.\n  remarks: \"Typically, you enumerate resources by calling the GetEnumerator method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`. The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property. The example illustrates how to enumerate resources in this way.  \\n  \\n The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:  \\n  \\n-   <xref:System.IO.FileNotFoundException>  \\n  \\n     The assembly that contains the type to which the data belongs cannot be found.  \\n  \\n-   <xref:System.FormatException>  \\n  \\n     The data is not in the expected format.  \\n  \\n-   <xref:System.TypeLoadException>  \\n  \\n     The type to which the data belongs cannot be found.  \\n  \\n You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource. For more information, see the \\\"Retrieving Resources by Name with GetResourceData\\\" section in the <xref:System.Resources.ResourceReader> class topic.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators. The GetEnumerator method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.\"\n  example:\n  - \"The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.  \\n  \\n```  \\n  \\nTitle=\\\"Top Pet Animal Clinic\\\"  \\nLabel1=\\\"Patient Number:\\\"  \\nLabel2=\\\"Pet Name:\\\"  \\nLabel3=\\\"Species:\\\"  \\nLabel4=\\\"Breed:\\\"  \\nLabel5=\\\"Date of Birth:\\\"  \\nLabel6=\\\"Age:\\\"  \\nLabel7=\\\"Owner:\\\"  \\nLabel8=\\\"Address:\\\"  \\nLabel9=\\\"Home Phone:\\\"  \\nLabel10=\\\"Work Phone:\\\"  \\nLabel11=\\\"Mobile Phone:\\\"  \\n  \\n```  \\n  \\n You can compile the .txt file into a .resources file by issuing the following command:  \\n  \\n **resgen PatientForm.txt**  \\n  \\n The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.  \\n  \\n [!code-cs[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/csharp/m-system.resources.resou_3_1.cs)]\\n [!code-vb[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/visualbasic/m-system.resources.resou_3_1.vb)]\"\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object.\n  overload: System.Resources.ResourceReader.GetEnumerator*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader has been closed or disposed, and cannot be accessed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)\n  id: GetResourceData(System.String,System.String@,System.Byte[]@)\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: GetResourceData(String,String,Byte[])\n  nameWithType: ResourceReader.GetResourceData(String,String,Byte[])\n  fullName: System.Resources.ResourceReader.GetResourceData(String,String,Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Retrieves the type name and data of a named resource from an open resource file or stream.\n  remarks: \"The GetResourceData method retrieves the value of a named resource as a byte array. It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.  \\n  \\n `resourceType` is a string that represents the data type of the resource. It can be any of the following values:  \\n  \\n-   The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource. `ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types. These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.  \\n  \\n    |ResourceTypeCode value|Description|  \\n    |----------------------------|-----------------|  \\n    |`ResourceTypeCode.ByteArray`|The data is a byte array. This data type commonly results from the call to the [ResourceWriter.AddResource(String, Byte\\\\[\\\\])](assetId:///M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])?qualifyHint=True&autoUpgrade=False) method.|  \\n    |`ResourceTypeCode.Null`|The data is a null reference. This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=fullName> method with an object whose value is `null`.|  \\n    |`ResourceTypeCode.Stream`|The data is stored in a stream. This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=fullName> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=fullName> method.|  \\n  \\n     Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.  \\n  \\n-   A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`). In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type. For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.  \\n  \\n     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  \\n  \\n     Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=fullName> method.  \\n  \\n-   The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=fullName> method call.\"\n  syntax:\n    content: public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);\n    parameters:\n    - id: resourceName\n      type: System.String\n      description: The name of a resource.\n    - id: resourceType\n      type: System.String\n      description: When this method returns, contains a string that represents the type name of the retrieved resource (see the Remarks section for details). This parameter is passed uninitialized.\n    - id: resourceData\n      type: System.Byte[]\n      description: When this method returns, contains a byte array that is the binary representation of the retrieved type. This parameter is passed uninitialized.\n  overload: System.Resources.ResourceReader.GetResourceData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>resourceName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>resourceName</code> does not exist.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>resourceName</code> has an invalid type.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The retrieved resource data is corrupt.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current <xref href=\"System.Resources.ResourceReader\"></xref> object is not initialized, probably because it is closed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Resources.ResourceReader\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ResourceReader.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Resources.ResourceReader.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Returns an enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object.\n  remarks: IEnumerable.GetEnumerator is an explicit interface implementation. It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface. The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for this <xref href=\"System.Resources.ResourceReader\"></xref> object.\n  overload: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader has already been closed and cannot be accessed.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.BadImageFormatException\n  isExternal: true\n  name: System.BadImageFormatException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.FormatException\n  isExternal: true\n  name: System.FormatException\n- uid: System.Resources.ResourceReader.#ctor(System.IO.Stream)\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: ResourceReader(Stream)\n  nameWithType: ResourceReader.ResourceReader(Stream)\n  fullName: System.Resources.ResourceReader.ResourceReader(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Resources.ResourceReader.#ctor(System.String)\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: ResourceReader(String)\n  nameWithType: ResourceReader.ResourceReader(String)\n  fullName: System.Resources.ResourceReader.ResourceReader(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Resources.ResourceReader.Close\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: Close()\n  nameWithType: ResourceReader.Close()\n  fullName: System.Resources.ResourceReader.Close()\n- uid: System.Resources.ResourceReader.Dispose\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: Dispose()\n  nameWithType: ResourceReader.Dispose()\n  fullName: System.Resources.ResourceReader.Dispose()\n- uid: System.Resources.ResourceReader.GetEnumerator\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ResourceReader.GetEnumerator()\n  fullName: System.Resources.ResourceReader.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: GetResourceData(String,String,Byte[])\n  nameWithType: ResourceReader.GetResourceData(String,String,Byte[])\n  fullName: System.Resources.ResourceReader.GetResourceData(String,String,Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ResourceReader.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Resources.ResourceReader.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Resources.ResourceReader.#ctor*\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: ResourceReader\n  nameWithType: ResourceReader.ResourceReader\n- uid: System.Resources.ResourceReader.Close*\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: Close\n  nameWithType: ResourceReader.Close\n- uid: System.Resources.ResourceReader.Dispose*\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: Dispose\n  nameWithType: ResourceReader.Dispose\n- uid: System.Resources.ResourceReader.GetEnumerator*\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ResourceReader.GetEnumerator\n- uid: System.Resources.ResourceReader.GetResourceData*\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: GetResourceData\n  nameWithType: ResourceReader.GetResourceData\n- uid: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Resources.ResourceReader\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ResourceReader.System.Collections.IEnumerable.GetEnumerator\n"}