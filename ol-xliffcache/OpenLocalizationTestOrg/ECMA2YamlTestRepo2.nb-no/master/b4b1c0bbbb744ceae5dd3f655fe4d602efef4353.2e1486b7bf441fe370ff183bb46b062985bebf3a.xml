{"nodes":[{"pos":[727,889],"content":"Throws <xref:System.Text.EncoderFallbackException> when an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws <xref:System.Text.EncoderFallbackException> when an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited.","pos":[0,162],"nodes":[{"content":"Throws &lt;xref:System.Text.EncoderFallbackException&gt; when an input character cannot be converted to an encoded output byte sequence.","pos":[0,130],"source":"Throws <xref:System.Text.EncoderFallbackException> when an input character cannot be converted to an encoded output byte sequence."},{"content":"This class cannot be inherited.","pos":[131,162]}]}]},{"pos":[902,1799],"content":"A common reason for an encoding or decoding operation to fail is if the underlying encoding class does not provide a mapping between a character and an equivalent byte sequence. If the input character cannot be converted to an output byte sequence, the encoding operation calls the <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> method, which throws <xref:System.Text.EncoderFallbackException>.       The <xref:System.Text.EncoderFallbackBuffer?displayProperty=fullName> class, which represents a data buffer used in an encoding operation, is the base class for the EncoderExceptionFallbackBuffer class. However, instead of a data buffer, the EncoderExceptionFallbackBuffer class represents a standard behavior wherein an exception is thrown if an encoding operation fails. No actual data buffer exists, and the members designed to manipulate such a buffer do no significant work.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A common reason for an encoding or decoding operation to fail is if the underlying encoding class does not provide a mapping between a character and an equivalent byte sequence. If the input character cannot be converted to an output byte sequence, the encoding operation calls the <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> method, which throws <xref:System.Text.EncoderFallbackException>.       The <xref:System.Text.EncoderFallbackBuffer?displayProperty=fullName> class, which represents a data buffer used in an encoding operation, is the base class for the EncoderExceptionFallbackBuffer class. However, instead of a data buffer, the EncoderExceptionFallbackBuffer class represents a standard behavior wherein an exception is thrown if an encoding operation fails. No actual data buffer exists, and the members designed to manipulate such a buffer do no significant work.","pos":[0,895],"nodes":[{"content":"A common reason for an encoding or decoding operation to fail is if the underlying encoding class does not provide a mapping between a character and an equivalent byte sequence.","pos":[0,177]},{"content":"If the input character cannot be converted to an output byte sequence, the encoding operation calls the &lt;xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A&gt; method, which throws &lt;xref:System.Text.EncoderFallbackException&gt;.","pos":[178,409],"source":" If the input character cannot be converted to an output byte sequence, the encoding operation calls the <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> method, which throws <xref:System.Text.EncoderFallbackException>."},{"content":"The &lt;xref:System.Text.EncoderFallbackBuffer?displayProperty=fullName&gt; class, which represents a data buffer used in an encoding operation, is the base class for the EncoderExceptionFallbackBuffer class.","pos":[416,618],"source":"       The <xref:System.Text.EncoderFallbackBuffer?displayProperty=fullName> class, which represents a data buffer used in an encoding operation, is the base class for the EncoderExceptionFallbackBuffer class."},{"content":"However, instead of a data buffer, the EncoderExceptionFallbackBuffer class represents a standard behavior wherein an exception is thrown if an encoding operation fails.","pos":[619,788]},{"content":"No actual data buffer exists, and the members designed to manipulate such a buffer do no significant work.","pos":[789,895]}]}]},{"pos":[2464,2568],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Text.EncoderExceptionFallbackBuffer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Text.EncoderExceptionFallbackBuffer\"></xref> class."},{"pos":[3205,3362],"content":"Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the character that cannot be converted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the character that cannot be converted.","pos":[0,157],"nodes":[{"content":"Throws an exception because the input character cannot be encoded.","pos":[0,66]},{"content":"Parameters specify the value and index position of the character that cannot be converted.","pos":[67,157]}]}]},{"pos":[3374,3617],"content":"The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter an unknown character in their input. In response, Fallback always throws <xref:System.Text.EncoderFallbackException>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter an unknown character in their input. In response, Fallback always throws <xref:System.Text.EncoderFallbackException>.","pos":[0,243],"nodes":[{"content":"The &lt;xref:System.Text.Encoding.GetBytes%2A&gt; and &lt;xref:System.Text.Encoder.Convert%2A&gt; methods call Fallback if they encounter an unknown character in their input.","pos":[0,162],"source":"The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter an unknown character in their input."},{"content":"In response, Fallback always throws &lt;xref:System.Text.EncoderFallbackException&gt;.","pos":[163,243],"source":" In response, Fallback always throws <xref:System.Text.EncoderFallbackException>."}]}]},{"pos":[3783,3802],"content":"An input character.","needQuote":true,"needEscape":true,"nodes":[{"content":"An input character.","pos":[0,19]}]},{"pos":[3863,3919],"content":"The index position of the character in the input buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index position of the character in the input buffer.","pos":[0,56]}]},{"pos":[3978,4060],"content":"None. No value is returned because the Fallback method always throws an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"None. No value is returned because the Fallback method always throws an exception.","pos":[0,82],"nodes":[{"content":"None.","pos":[0,5]},{"content":"No value is returned because the Fallback method always throws an exception.","pos":[6,82]}]}]},{"pos":[4258,4430],"content":"<code>charUnknown</code> cannot be encoded. This method always throws an exception that reports the value of the <code>charUnknown</code> and <code>index</code> parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;charUnknown&lt;/code&gt;</ph> cannot be encoded.","pos":[0,43],"source":"<code>charUnknown</code> cannot be encoded."},{"content":"This method always throws an exception that reports the value of the <ph id=\"ph1\">&lt;code&gt;charUnknown&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;index&lt;/code&gt;</ph> parameters.","pos":[44,172],"source":" This method always throws an exception that reports the value of the <code>charUnknown</code> and <code>index</code> parameters."}]},{"pos":[4943,5135],"content":"Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used.","pos":[0,192],"nodes":[{"content":"Throws an exception because the input character cannot be encoded.","pos":[0,66]},{"content":"Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used.","pos":[67,192]}]}]},{"pos":[5147,5355],"content":"The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter a surrogate pair in their input. In response, Fallback always throws an exception.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter a surrogate pair in their input. In response, Fallback always throws an exception.","pos":[0,208],"nodes":[{"content":"The &lt;xref:System.Text.Encoding.GetBytes%2A&gt; and &lt;xref:System.Text.Encoder.Convert%2A&gt; methods call Fallback if they encounter a surrogate pair in their input.","pos":[0,158],"source":"The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter a surrogate pair in their input."},{"content":"In response, Fallback always throws an exception.","pos":[159,208]}]}]},{"pos":[5550,5587],"content":"The high surrogate of the input pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"The high surrogate of the input pair.","pos":[0,37]}]},{"pos":[5656,5692],"content":"The low surrogate of the input pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"The low surrogate of the input pair.","pos":[0,36]}]},{"pos":[5753,5814],"content":"The index position of the surrogate pair in the input buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index position of the surrogate pair in the input buffer.","pos":[0,61]}]},{"pos":[5873,5955],"content":"None. No value is returned because the Fallback method always throws an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"None. No value is returned because the Fallback method always throws an exception.","pos":[0,82],"nodes":[{"content":"None.","pos":[0,5]},{"content":"No value is returned because the Fallback method always throws an exception.","pos":[6,82]}]}]},{"pos":[6153,6261],"content":"The character represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">charUnknownHigh</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">charUnknownLow</ph><ept id=\"p2\">&lt;/code&gt;</ept> cannot be encoded.","needQuote":true,"needEscape":true,"source":"The character represented by <code>charUnknownHigh</code> and <code>charUnknownLow</code> cannot be encoded."},{"pos":[6376,6604],"content":"Either <code>charUnknownHigh</code> or <code>charUnknownLow</code> is invalid. <code>charUnknownHigh</code> is not between U+D800 and U+DBFF, inclusive, or <code>charUnknownLow</code> is not between U+DC00 and U+DFFF, inclusive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Either <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">charUnknownHigh</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">charUnknownLow</ph><ept id=\"p2\">&lt;/code&gt;</ept> is invalid.","pos":[0,78],"source":"Either <code>charUnknownHigh</code> or <code>charUnknownLow</code> is invalid."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">charUnknownHigh</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not between U+D800 and U+DBFF, inclusive, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">charUnknownLow</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not between U+DC00 and U+DFFF, inclusive.","pos":[79,228],"source":"<code>charUnknownHigh</code> is not between U+D800 and U+DBFF, inclusive, or <code>charUnknownLow</code> is not between U+DC00 and U+DFFF, inclusive."}]},{"pos":[7011,7073],"content":"Retrieves the next character in the exception fallback buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the next character in the exception fallback buffer.","pos":[0,62]}]},{"pos":[7085,7245],"content":"Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the GetNextChar method always returns the Unicode NULL character.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Because &lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt; has no actual exception data buffer, the GetNextChar method always returns the Unicode NULL character.","pos":[0,160],"source":"Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the GetNextChar method always returns the Unicode NULL character."}]},{"pos":[7381,7558],"content":"The return value is always the Unicode character, NULL (U+0000).       A return value is defined, although it is unchanging, because this method implements an abstract method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The return value is always the Unicode character, NULL (U+0000).       A return value is defined, although it is unchanging, because this method implements an abstract method.","pos":[0,175],"nodes":[{"content":"The return value is always the Unicode character, NULL (U+0000).","pos":[0,64]},{"content":"A return value is defined, although it is unchanging, because this method implements an abstract method.","pos":[71,175]}]}]},{"pos":[8056,8247],"content":"Causes the next call to the <xref:System.Text.EncoderExceptionFallbackBuffer.GetNextChar*> method to access the exception data buffer character position that is prior to the current position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes the next call to the &lt;xref:System.Text.EncoderExceptionFallbackBuffer.GetNextChar*&gt; method to access the exception data buffer character position that is prior to the current position.","pos":[0,191],"source":"Causes the next call to the <xref:System.Text.EncoderExceptionFallbackBuffer.GetNextChar*> method to access the exception data buffer character position that is prior to the current position."}]},{"pos":[8259,8401],"content":"Because &lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt; has no actual exception data buffer, the MovePrevious method always returns <ph id=\"ph1\">`false`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the MovePrevious method always returns `false`."},{"pos":[8541,8750],"content":"The return value is always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.       A return value is defined, although it is unchanging, because this method implements an abstract method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The return value is always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,90],"source":"The return value is always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"A return value is defined, although it is unchanging, because this method implements an abstract method.","pos":[97,201]}]},{"pos":[9230,9374],"content":"Gets the number of characters in the current <bpt id=\"p1\">&lt;xref href=\"System.Text.EncoderExceptionFallbackBuffer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that remain to be processed.","needQuote":true,"needEscape":true,"source":"Gets the number of characters in the current <xref href=\"System.Text.EncoderExceptionFallbackBuffer\"></xref> object that remain to be processed."},{"pos":[9386,9524],"content":"Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the Remaining property always returns zero.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Because &lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt; has no actual exception data buffer, the Remaining property always returns zero.","pos":[0,138],"source":"Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the Remaining property always returns zero."}]},{"pos":[9644,9789],"content":"The return value is always zero.       A return value is defined, although it is unchanging, because this method implements an abstract method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The return value is always zero.       A return value is defined, although it is unchanging, because this method implements an abstract method.","pos":[0,143],"nodes":[{"content":"The return value is always zero.","pos":[0,32]},{"content":"A return value is defined, although it is unchanging, because this method implements an abstract method.","pos":[39,143]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.EncoderExceptionFallbackBuffer\n  id: EncoderExceptionFallbackBuffer\n  children:\n  - System.Text.EncoderExceptionFallbackBuffer.#ctor\n  - System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)\n  - System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  - System.Text.EncoderExceptionFallbackBuffer.GetNextChar\n  - System.Text.EncoderExceptionFallbackBuffer.MovePrevious\n  - System.Text.EncoderExceptionFallbackBuffer.Remaining\n  langs:\n  - csharp\n  name: EncoderExceptionFallbackBuffer\n  nameWithType: EncoderExceptionFallbackBuffer\n  fullName: System.Text.EncoderExceptionFallbackBuffer\n  type: Class\n  summary: Throws <xref:System.Text.EncoderFallbackException> when an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited.\n  remarks: \"A common reason for an encoding or decoding operation to fail is if the underlying encoding class does not provide a mapping between a character and an equivalent byte sequence. If the input character cannot be converted to an output byte sequence, the encoding operation calls the <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> method, which throws <xref:System.Text.EncoderFallbackException>.  \\n  \\n The <xref:System.Text.EncoderFallbackBuffer?displayProperty=fullName> class, which represents a data buffer used in an encoding operation, is the base class for the EncoderExceptionFallbackBuffer class. However, instead of a data buffer, the EncoderExceptionFallbackBuffer class represents a standard behavior wherein an exception is thrown if an encoding operation fails. No actual data buffer exists, and the members designed to manipulate such a buffer do no significant work.\"\n  syntax:\n    content: 'public sealed class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer'\n  inheritance:\n  - System.Text.EncoderFallbackBuffer\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Text.EncoderExceptionFallbackBuffer.#ctor\n  id: '#ctor'\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  langs:\n  - csharp\n  name: EncoderExceptionFallbackBuffer()\n  nameWithType: EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()\n  fullName: System.Text.EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.EncoderExceptionFallbackBuffer\"></xref> class.\n  syntax:\n    content: public EncoderExceptionFallbackBuffer ();\n    parameters: []\n  overload: System.Text.EncoderExceptionFallbackBuffer.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)\n  id: Fallback(System.Char,System.Int32)\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  langs:\n  - csharp\n  name: Fallback(Char,Int32)\n  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Int32)\n  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  summary: Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the character that cannot be converted.\n  remarks: The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter an unknown character in their input. In response, Fallback always throws <xref:System.Text.EncoderFallbackException>.\n  syntax:\n    content: public override bool Fallback (char charUnknown, int index);\n    parameters:\n    - id: charUnknown\n      type: System.Char\n      description: An input character.\n    - id: index\n      type: System.Int32\n      description: The index position of the character in the input buffer.\n    return:\n      type: System.Boolean\n      description: None. No value is returned because the Fallback method always throws an exception.\n  overload: System.Text.EncoderExceptionFallbackBuffer.Fallback*\n  exceptions:\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: <code>charUnknown</code> cannot be encoded. This method always throws an exception that reports the value of the <code>charUnknown</code> and <code>index</code> parameters.\n  platform:\n  - net462\n- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  id: Fallback(System.Char,System.Char,System.Int32)\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  langs:\n  - csharp\n  name: Fallback(Char,Char,Int32)\n  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)\n  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  summary: Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used.\n  remarks: The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter a surrogate pair in their input. In response, Fallback always throws an exception.\n  syntax:\n    content: public override bool Fallback (char charUnknownHigh, char charUnknownLow, int index);\n    parameters:\n    - id: charUnknownHigh\n      type: System.Char\n      description: The high surrogate of the input pair.\n    - id: charUnknownLow\n      type: System.Char\n      description: The low surrogate of the input pair.\n    - id: index\n      type: System.Int32\n      description: The index position of the surrogate pair in the input buffer.\n    return:\n      type: System.Boolean\n      description: None. No value is returned because the Fallback method always throws an exception.\n  overload: System.Text.EncoderExceptionFallbackBuffer.Fallback*\n  exceptions:\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: The character represented by <code>charUnknownHigh</code> and <code>charUnknownLow</code> cannot be encoded.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Either <code>charUnknownHigh</code> or <code>charUnknownLow</code> is invalid. <code>charUnknownHigh</code> is not between U+D800 and U+DBFF, inclusive, or <code>charUnknownLow</code> is not between U+DC00 and U+DFFF, inclusive.\n  platform:\n  - net462\n- uid: System.Text.EncoderExceptionFallbackBuffer.GetNextChar\n  id: GetNextChar\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  langs:\n  - csharp\n  name: GetNextChar()\n  nameWithType: EncoderExceptionFallbackBuffer.GetNextChar()\n  fullName: System.Text.EncoderExceptionFallbackBuffer.GetNextChar()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  summary: Retrieves the next character in the exception fallback buffer.\n  remarks: Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the GetNextChar method always returns the Unicode NULL character.\n  syntax:\n    content: public override char GetNextChar ();\n    parameters: []\n    return:\n      type: System.Char\n      description: \"The return value is always the Unicode character, NULL (U+0000).  \\n  \\n A return value is defined, although it is unchanging, because this method implements an abstract method.\"\n  overload: System.Text.EncoderExceptionFallbackBuffer.GetNextChar*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Text.EncoderExceptionFallbackBuffer.MovePrevious\n  id: MovePrevious\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  langs:\n  - csharp\n  name: MovePrevious()\n  nameWithType: EncoderExceptionFallbackBuffer.MovePrevious()\n  fullName: System.Text.EncoderExceptionFallbackBuffer.MovePrevious()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  summary: Causes the next call to the <xref:System.Text.EncoderExceptionFallbackBuffer.GetNextChar*> method to access the exception data buffer character position that is prior to the current position.\n  remarks: Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the MovePrevious method always returns `false`.\n  syntax:\n    content: public override bool MovePrevious ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"The return value is always <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>.  \\n  \\n A return value is defined, although it is unchanging, because this method implements an abstract method.\"\n  overload: System.Text.EncoderExceptionFallbackBuffer.MovePrevious*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Text.EncoderExceptionFallbackBuffer.Remaining\n  id: Remaining\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  langs:\n  - csharp\n  name: Remaining\n  nameWithType: EncoderExceptionFallbackBuffer.Remaining\n  fullName: System.Text.EncoderExceptionFallbackBuffer.Remaining\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  summary: Gets the number of characters in the current <xref href=\"System.Text.EncoderExceptionFallbackBuffer\"></xref> object that remain to be processed.\n  remarks: Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the Remaining property always returns zero.\n  syntax:\n    content: public override int Remaining { get; }\n    return:\n      type: System.Int32\n      description: \"The return value is always zero.  \\n  \\n A return value is defined, although it is unchanging, because this method implements an abstract method.\"\n  overload: System.Text.EncoderExceptionFallbackBuffer.Remaining*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: System.Text.EncoderFallbackBuffer\n- uid: System.Text.EncoderFallbackException\n  isExternal: true\n  name: System.Text.EncoderFallbackException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Text.EncoderExceptionFallbackBuffer.#ctor\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: EncoderExceptionFallbackBuffer()\n  nameWithType: EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()\n  fullName: System.Text.EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()\n- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: Fallback(Char,Int32)\n  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Int32)\n  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: Fallback(Char,Char,Int32)\n  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)\n  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)\n- uid: System.Text.EncoderExceptionFallbackBuffer.GetNextChar\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: GetNextChar()\n  nameWithType: EncoderExceptionFallbackBuffer.GetNextChar()\n  fullName: System.Text.EncoderExceptionFallbackBuffer.GetNextChar()\n- uid: System.Text.EncoderExceptionFallbackBuffer.MovePrevious\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: MovePrevious()\n  nameWithType: EncoderExceptionFallbackBuffer.MovePrevious()\n  fullName: System.Text.EncoderExceptionFallbackBuffer.MovePrevious()\n- uid: System.Text.EncoderExceptionFallbackBuffer.Remaining\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: Remaining\n  nameWithType: EncoderExceptionFallbackBuffer.Remaining\n  fullName: System.Text.EncoderExceptionFallbackBuffer.Remaining\n- uid: System.Text.EncoderExceptionFallbackBuffer.#ctor*\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: EncoderExceptionFallbackBuffer\n  nameWithType: EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer\n- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback*\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: Fallback\n  nameWithType: EncoderExceptionFallbackBuffer.Fallback\n- uid: System.Text.EncoderExceptionFallbackBuffer.GetNextChar*\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: GetNextChar\n  nameWithType: EncoderExceptionFallbackBuffer.GetNextChar\n- uid: System.Text.EncoderExceptionFallbackBuffer.MovePrevious*\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: MovePrevious\n  nameWithType: EncoderExceptionFallbackBuffer.MovePrevious\n- uid: System.Text.EncoderExceptionFallbackBuffer.Remaining*\n  parent: System.Text.EncoderExceptionFallbackBuffer\n  isExternal: false\n  name: Remaining\n  nameWithType: EncoderExceptionFallbackBuffer.Remaining\n"}