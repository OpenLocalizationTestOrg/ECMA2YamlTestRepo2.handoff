{"nodes":[{"pos":[935,1060],"content":"Defines the extension methods to the <xref href=\"System.Data.DataTable\"></xref> class. DataTableExtensions is a static class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the extension methods to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","pos":[0,86],"source":"Defines the extension methods to the <xref href=\"System.Data.DataTable\"></xref> class."},{"content":"DataTableExtensions is a static class.","pos":[87,125]}]},{"pos":[1650,1734],"content":"Creates and returns a LINQ-enabled <bpt id=\"p1\">&lt;xref href=\"System.Data.DataView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates and returns a LINQ-enabled <xref href=\"System.Data.DataView\"></xref> object."},{"pos":[1747,2425],"content":"<xref:System.Data.DataView> enables data-binding scenarios for [!INCLUDE[linq_dataset](~/add/includes/linq-dataset-md.md)] and can be created from a typed or untyped <xref:System.Data.DataTable>, providing a default view of that table. Filtering and sorting can be set on the <xref:System.Data.DataView> after it has been created from a <xref:System.Data.DataTable>. The <xref:System.Data.DataView> is then bound to a UI control, such as a <xref:System.Windows.Forms.DataGrid> or a <xref:System.Windows.Forms.DataGridView>, providing a simple data binding model.       For more information and examples, see [Creating a DataView Object](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Data.DataView&gt; enables data-binding scenarios for <ph id=\"ph1\">[!INCLUDE[linq_dataset](~/add/includes/linq-dataset-md.md)]</ph> and can be created from a typed or untyped &lt;xref:System.Data.DataTable&gt;, providing a default view of that table.","pos":[0,235],"source":"<xref:System.Data.DataView> enables data-binding scenarios for [!INCLUDE[linq_dataset](~/add/includes/linq-dataset-md.md)] and can be created from a typed or untyped <xref:System.Data.DataTable>, providing a default view of that table."},{"content":"Filtering and sorting can be set on the &lt;xref:System.Data.DataView&gt; after it has been created from a &lt;xref:System.Data.DataTable&gt;.","pos":[236,366],"source":" Filtering and sorting can be set on the <xref:System.Data.DataView> after it has been created from a <xref:System.Data.DataTable>."},{"content":"The &lt;xref:System.Data.DataView&gt; is then bound to a UI control, such as a &lt;xref:System.Windows.Forms.DataGrid&gt; or a &lt;xref:System.Windows.Forms.DataGridView&gt;, providing a simple data binding model.","pos":[367,562],"source":" The <xref:System.Data.DataView> is then bound to a UI control, such as a <xref:System.Windows.Forms.DataGrid> or a <xref:System.Windows.Forms.DataGridView>, providing a simple data binding model."},{"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Creating a DataView Object<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[569,676],"source":"       For more information and examples, see [Creating a DataView Object](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[3149,3284],"content":"The source <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which the LINQ-enabled <bpt id=\"p2\">&lt;xref href=\"System.Data.DataView\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is created.","needQuote":true,"needEscape":true,"source":"The source <xref href=\"System.Data.DataTable\"></xref> from which the LINQ-enabled <xref href=\"System.Data.DataView\"></xref> is created."},{"pos":[3349,3413],"content":"A LINQ-enabled <bpt id=\"p1\">&lt;xref href=\"System.Data.DataView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A LINQ-enabled <xref href=\"System.Data.DataView\"></xref> object."},{"pos":[4285,4297],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4362,4374],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4914,5187],"content":"Returns an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object, where the generic parameter <code>T</code> is <xref href=\"System.Data.DataRow\"></xref>. This object can be used in a [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] expression or method query.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IEnumerable%601<ph id=\"ph2\">&amp;gt;</ph> object, where the generic parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,162],"source":"Returns an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object, where the generic parameter <code>T</code> is <xref href=\"System.Data.DataRow\"></xref>."},{"content":"This object can be used in a <ph id=\"ph1\">[!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)]</ph> expression or method query.","pos":[163,273],"source":" This object can be used in a [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] expression or method query."}]},{"pos":[5200,6171],"content":"[!INCLUDE[vbteclinqext](~/add/includes/vbteclinqext-md.md)] queries work on data sources that implement the <xref:System.Collections.Generic.IEnumerable%601> interface or the <xref:System.Query.IQueryable%601> interface.  The <xref:System.Data.DataTable> class does not implement either interface, so you must call the AsEnumerable method to use the <xref:System.Data.DataTable> as a source in the `From` clause of a [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] query. You can also obtain custom, domain-specific operators, such as <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, by returning an <xref:System.Collections.Generic.IEnumerable%601> object.       The enumerable object returned by the AsEnumerable method is permanently bound to the <xref:System.Data.DataTable> that produced it. Multiple calls to the AsEnumerable method will return multiple, independent queryable objects that are all bound to the source <xref:System.Data.DataTable>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[vbteclinqext](~/add/includes/vbteclinqext-md.md)]</ph> queries work on data sources that implement the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface or the &lt;xref:System.Query.IQueryable%601&gt; interface.","pos":[0,220],"source":"[!INCLUDE[vbteclinqext](~/add/includes/vbteclinqext-md.md)] queries work on data sources that implement the <xref:System.Collections.Generic.IEnumerable%601> interface or the <xref:System.Query.IQueryable%601> interface."},{"content":"The &lt;xref:System.Data.DataTable&gt; class does not implement either interface, so you must call the AsEnumerable method to use the &lt;xref:System.Data.DataTable&gt; as a source in the <ph id=\"ph1\">`From`</ph> clause of a <ph id=\"ph2\">[!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)]</ph> query.","pos":[222,477],"source":"  The <xref:System.Data.DataTable> class does not implement either interface, so you must call the AsEnumerable method to use the <xref:System.Data.DataTable> as a source in the `From` clause of a [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] query."},{"content":"You can also obtain custom, domain-specific operators, such as &lt;xref:System.Data.DataTableExtensions.CopyToDataTable%2A&gt;, by returning an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object.","pos":[478,673],"source":" You can also obtain custom, domain-specific operators, such as <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, by returning an <xref:System.Collections.Generic.IEnumerable%601> object."},{"content":"The enumerable object returned by the AsEnumerable method is permanently bound to the &lt;xref:System.Data.DataTable&gt; that produced it.","pos":[680,812],"source":"       The enumerable object returned by the AsEnumerable method is permanently bound to the <xref:System.Data.DataTable> that produced it."},{"content":"Multiple calls to the AsEnumerable method will return multiple, independent queryable objects that are all bound to the source &lt;xref:System.Data.DataTable&gt;.","pos":[813,969],"source":" Multiple calls to the AsEnumerable method will return multiple, independent queryable objects that are all bound to the source <xref:System.Data.DataTable>."}]},{"pos":[6854,6927],"content":"The source <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to make enumerable.","needQuote":true,"needEscape":true,"source":"The source <xref href=\"System.Data.DataTable\"></xref> to make enumerable."},{"pos":[7028,7182],"content":"An <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IEnumerable%601<ph id=\"ph2\">&amp;gt;</ph> object, where the generic parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object, where the generic parameter <code>T</code> is <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[7357,7475],"content":"The source <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The source <xref href=\"System.Data.DataTable\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8281,8293],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8359,8371],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9459,9471],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9541,9553],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9626,9638],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10908,10920],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10990,11002],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11075,11087],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11176,11188],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.DataTableExtensions\n  id: DataTableExtensions\n  children:\n  - System.Data.DataTableExtensions.AsDataView(System.Data.DataTable@)\n  - System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0}@)\n  - System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable@)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  langs:\n  - csharp\n  name: DataTableExtensions\n  nameWithType: DataTableExtensions\n  fullName: System.Data.DataTableExtensions\n  type: Class\n  summary: Defines the extension methods to the <xref href=\"System.Data.DataTable\"></xref> class. DataTableExtensions is a static class.\n  syntax:\n    content: public static class DataTableExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.DataTableExtensions.AsDataView(System.Data.DataTable@)\n  id: AsDataView(System.Data.DataTable@)\n  parent: System.Data.DataTableExtensions\n  langs:\n  - csharp\n  name: AsDataView(DataTable)\n  nameWithType: DataTableExtensions.AsDataView(DataTable)\n  fullName: System.Data.DataTableExtensions.AsDataView(DataTable)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  summary: Creates and returns a LINQ-enabled <xref href=\"System.Data.DataView\"></xref> object.\n  remarks: \"<xref:System.Data.DataView> enables data-binding scenarios for [!INCLUDE[linq_dataset](~/add/includes/linq-dataset-md.md)] and can be created from a typed or untyped <xref:System.Data.DataTable>, providing a default view of that table. Filtering and sorting can be set on the <xref:System.Data.DataView> after it has been created from a <xref:System.Data.DataTable>. The <xref:System.Data.DataView> is then bound to a UI control, such as a <xref:System.Windows.Forms.DataGrid> or a <xref:System.Windows.Forms.DataGridView>, providing a simple data binding model.  \\n  \\n For more information and examples, see [Creating a DataView Object](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataView> from the SalesOrderDetail table and sets it as the data source of a <xref:System.Windows.Forms.BindingSource> object, which acts as a proxy for a <xref:System.Windows.Forms.DataGridView> control:  \\n  \\n [!code-vb[DP DataView Samples#CreateLDVFromTable](~/add/codesnippet/visualbasic/DataViewSamplesVB/Form1.vb#createldvfromtable)]\\n [!code-cs[DP DataView Samples#CreateLDVFromTable](~/add/codesnippet/csharp/DataViewSamples/Form1.cs#createldvfromtable)]\"\n  syntax:\n    content: public static System.Data.DataView AsDataView (this System.Data.DataTable table);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The source <xref href=\"System.Data.DataTable\"></xref> from which the LINQ-enabled <xref href=\"System.Data.DataView\"></xref> is created.\n    return:\n      type: System.Data.DataView\n      description: A LINQ-enabled <xref href=\"System.Data.DataView\"></xref> object.\n  overload: System.Data.DataTableExtensions.AsDataView*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0}@)\n  id: AsDataView``1(System.Data.EnumerableRowCollection{``0}@)\n  parent: System.Data.DataTableExtensions\n  langs:\n  - csharp\n  name: AsDataView(EnumerableRowCollection<T>)\n  nameWithType: DataTableExtensions.AsDataView(EnumerableRowCollection<T>)\n  fullName: System.Data.DataTableExtensions.AsDataView(EnumerableRowCollection<T>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.DataView AsDataView<T> (this System.Data.EnumerableRowCollection<T> source) where T : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.EnumerableRowCollection{T}\n      description: To be added.\n    return:\n      type: System.Data.DataView\n      description: To be added.\n  overload: System.Data.DataTableExtensions.AsDataView<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable@)\n  id: AsEnumerable(System.Data.DataTable@)\n  parent: System.Data.DataTableExtensions\n  langs:\n  - csharp\n  name: AsEnumerable(DataTable)\n  nameWithType: DataTableExtensions.AsEnumerable(DataTable)\n  fullName: System.Data.DataTableExtensions.AsEnumerable(DataTable)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  summary: Returns an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object, where the generic parameter <code>T</code> is <xref href=\"System.Data.DataRow\"></xref>. This object can be used in a [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] expression or method query.\n  remarks: \"[!INCLUDE[vbteclinqext](~/add/includes/vbteclinqext-md.md)] queries work on data sources that implement the <xref:System.Collections.Generic.IEnumerable%601> interface or the <xref:System.Query.IQueryable%601> interface.  The <xref:System.Data.DataTable> class does not implement either interface, so you must call the AsEnumerable method to use the <xref:System.Data.DataTable> as a source in the `From` clause of a [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] query. You can also obtain custom, domain-specific operators, such as <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, by returning an <xref:System.Collections.Generic.IEnumerable%601> object.  \\n  \\n The enumerable object returned by the AsEnumerable method is permanently bound to the <xref:System.Data.DataTable> that produced it. Multiple calls to the AsEnumerable method will return multiple, independent queryable objects that are all bound to the source <xref:System.Data.DataTable>.\"\n  example:\n  - \"In the following sample, the `DisplayProducts` method receives a DataTable that contains a DataColumn named `ProductName`, extracts the `ProductName` values and then prints the values.  \\n  \\n [!code-cs[system.data.DataTableExtensions.AsEnumerable#1](~/add/codesnippet/csharp/m-system.data.datatablee_0_1.cs)]\\n [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/add/codesnippet/visualbasic/m-system.data.datatablee_0_1.vb)]\"\n  syntax:\n    content: public static System.Data.EnumerableRowCollection<System.Data.DataRow> AsEnumerable (this System.Data.DataTable source);\n    parameters:\n    - id: source\n      type: System.Data.DataTable\n      description: The source <xref href=\"System.Data.DataTable\"></xref> to make enumerable.\n    return:\n      type: System.Data.EnumerableRowCollection{System.Data.DataRow}\n      description: An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object, where the generic parameter <code>T</code> is <xref href=\"System.Data.DataRow\"></xref>.\n  overload: System.Data.DataTableExtensions.AsEnumerable*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The source <xref href=\"System.Data.DataTable\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@)\n  id: CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@)\n  parent: System.Data.DataTableExtensions\n  langs:\n  - csharp\n  name: CopyToDataTable(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable(IEnumerable<T>)\n  fullName: System.Data.DataTableExtensions.CopyToDataTable(IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.DataTable CopyToDataTable<T> (this System.Collections.Generic.IEnumerable<T> source) where T : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n    return:\n      type: System.Data.DataTable\n      description: To be added.\n  overload: System.Data.DataTableExtensions.CopyToDataTable<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption)\n  id: CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  langs:\n  - csharp\n  name: CopyToDataTable(IEnumerable<T>,DataTable,LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption)\n  fullName: System.Data.DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static void CopyToDataTable<T> (this System.Collections.Generic.IEnumerable<T> source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n    - id: table\n      type: System.Data.DataTable\n      description: To be added.\n    - id: options\n      type: System.Data.LoadOption\n      description: To be added.\n  overload: System.Data.DataTableExtensions.CopyToDataTable<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  id: CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  langs:\n  - csharp\n  name: CopyToDataTable(IEnumerable<T>,DataTable,LoadOption,FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption,FillErrorEventHandler)\n  fullName: System.Data.DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption,FillErrorEventHandler)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static void CopyToDataTable<T> (this System.Collections.Generic.IEnumerable<T> source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n    - id: table\n      type: System.Data.DataTable\n      description: To be added.\n    - id: options\n      type: System.Data.LoadOption\n      description: To be added.\n    - id: errorHandler\n      type: System.Data.FillErrorEventHandler\n      description: To be added.\n  overload: System.Data.DataTableExtensions.CopyToDataTable<T>*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Data.DataTableExtensions.AsDataView(System.Data.DataTable@)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: AsDataView(DataTable)\n  nameWithType: DataTableExtensions.AsDataView(DataTable)\n  fullName: System.Data.DataTableExtensions.AsDataView(DataTable)\n- uid: System.Data.DataView\n  parent: System.Data\n  isExternal: false\n  name: DataView\n  nameWithType: DataView\n  fullName: System.Data.DataView\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0}@)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: AsDataView(EnumerableRowCollection<T>)\n  nameWithType: DataTableExtensions.AsDataView(EnumerableRowCollection<T>)\n  fullName: System.Data.DataTableExtensions.AsDataView(EnumerableRowCollection<T>)\n- uid: System.Data.EnumerableRowCollection{T}\n  parent: System.Data\n  isExternal: false\n  name: EnumerableRowCollection<T>\n  nameWithType: EnumerableRowCollection<T>\n  fullName: System.Data.EnumerableRowCollection<T>\n  spec.csharp:\n  - uid: System.Data.EnumerableRowCollection`1\n    name: EnumerableRowCollection\n    nameWithType: EnumerableRowCollection\n    fullName: EnumerableRowCollection<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable@)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: AsEnumerable(DataTable)\n  nameWithType: DataTableExtensions.AsEnumerable(DataTable)\n  fullName: System.Data.DataTableExtensions.AsEnumerable(DataTable)\n- uid: System.Data.EnumerableRowCollection{System.Data.DataRow}\n  parent: System.Data\n  isExternal: false\n  name: EnumerableRowCollection<DataRow>\n  nameWithType: EnumerableRowCollection<DataRow>\n  fullName: System.Data.EnumerableRowCollection<System.Data.DataRow>\n  spec.csharp:\n  - uid: System.Data.EnumerableRowCollection`1\n    name: EnumerableRowCollection\n    nameWithType: EnumerableRowCollection\n    fullName: EnumerableRowCollection<System.Data.DataRow>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.DataRow\n    name: DataRow\n    nameWithType: DataRow\n    fullName: DataRow\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable(IEnumerable<T>)\n  fullName: System.Data.DataTableExtensions.CopyToDataTable(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable(IEnumerable<T>,DataTable,LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption)\n  fullName: System.Data.DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption)\n- uid: System.Data.LoadOption\n  parent: System.Data\n  isExternal: false\n  name: LoadOption\n  nameWithType: LoadOption\n  fullName: System.Data.LoadOption\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0}@,System.Data.Data``0able,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable(IEnumerable<T>,DataTable,LoadOption,FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption,FillErrorEventHandler)\n  fullName: System.Data.DataTableExtensions.CopyToDataTable(IEnumerable<T>,DataTable,LoadOption,FillErrorEventHandler)\n- uid: System.Data.FillErrorEventHandler\n  parent: System.Data\n  isExternal: false\n  name: FillErrorEventHandler\n  nameWithType: FillErrorEventHandler\n  fullName: System.Data.FillErrorEventHandler\n- uid: System.Data.DataTableExtensions.AsDataView*\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: AsDataView\n  nameWithType: DataTableExtensions.AsDataView\n- uid: System.Data.DataTableExtensions.AsDataView<T>*\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: AsDataView<T>\n  nameWithType: DataTableExtensions.AsDataView<T>\n- uid: System.Data.DataTableExtensions.AsEnumerable*\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: AsEnumerable\n  nameWithType: DataTableExtensions.AsEnumerable\n- uid: System.Data.DataTableExtensions.CopyToDataTable<T>*\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>\n  nameWithType: DataTableExtensions.CopyToDataTable<T>\n"}