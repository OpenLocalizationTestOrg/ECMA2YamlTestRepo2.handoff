{"nodes":[{"pos":[676,769],"content":"Provides support for user customization of interop stubs in managed-to-COM interop scenarios.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides support for user customization of interop stubs in managed-to-COM interop scenarios.","pos":[0,93]}]},{"pos":[782,3310],"content":"This attribute enables interop developers who have knowledge about marshaling and the inner workings of interop calls to do the following:      -   Take advantage of customized interop stubs at build time instead of run time.      -   Debug customized interop stubs.      -   Provide marshaling capabilities within a stub that the runtime does not provide.      -   Provide user-specific method dispatch capabilities.       You apply the attribute on a method in an interface to specify a corresponding stub method for managed-to-native COM interop.       If this attribute is encountered during run time, the common language runtime does not dynamically generate an interop stub. Instead, it invokes the custom stub that was created at build time.       The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:      -   The attribute can be used only on methods from interfaces that are marked `[ComImport]`. If the attribute is applied to non-interface types, it is ignored by the runtime.      -   The attribute can be used only once on the same method in an interface. If it is used more than once, the compiler generates a duplicated attribute error.      -   The attribute is not inheritable from a base interface. Derived interfaces must explicitly assign the attribute.      -   The assembly that contains the attributed method must also contain the customized stub.       Overloaded stub methods are valid. Although you specify only the type and the name of the stub method, the runtime will discover the corresponding stub. It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit `this` pointer.       It is also possible for multiple methods in an interface to share the same stub method; however, you should be careful when you use shared stubs.      > [!NOTE] >  Stub methods must be static.       You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:      ```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 \"ForwardTestStub\")]       void GetString (string arg);   }   ```       You could then use the following code to declare the corresponding stub method:      ```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This attribute enables interop developers who have knowledge about marshaling and the inner workings of interop calls to do the following:      -   Take advantage of customized interop stubs at build time instead of run time.","pos":[0,225]},{"content":"-   Debug customized interop stubs.","pos":[231,266]},{"content":"-   Provide marshaling capabilities within a stub that the runtime does not provide.","pos":[272,356]},{"content":"-   Provide user-specific method dispatch capabilities.","pos":[362,417]},{"content":"You apply the attribute on a method in an interface to specify a corresponding stub method for managed-to-native COM interop.","pos":[424,549]},{"content":"If this attribute is encountered during run time, the common language runtime does not dynamically generate an interop stub.","pos":[556,680]},{"content":"Instead, it invokes the custom stub that was created at build time.","pos":[681,748]},{"content":"The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:      -   The attribute can be used only on methods from interfaces that are marked <ph id=\"ph1\">`[ComImport]`</ph>.","pos":[755,940],"source":"       The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:      -   The attribute can be used only on methods from interfaces that are marked `[ComImport]`."},{"content":"If the attribute is applied to non-interface types, it is ignored by the runtime.","pos":[941,1022]},{"content":"-   The attribute can be used only once on the same method in an interface.","pos":[1028,1103]},{"content":"If it is used more than once, the compiler generates a duplicated attribute error.","pos":[1104,1186]},{"content":"-   The attribute is not inheritable from a base interface.","pos":[1192,1251]},{"content":"Derived interfaces must explicitly assign the attribute.","pos":[1252,1308]},{"content":"-   The assembly that contains the attributed method must also contain the customized stub.","pos":[1314,1405]},{"content":"Overloaded stub methods are valid.","pos":[1412,1446]},{"content":"Although you specify only the type and the name of the stub method, the runtime will discover the corresponding stub.","pos":[1447,1564]},{"content":"It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit <ph id=\"ph1\">`this`</ph> pointer.","pos":[1565,1714],"source":" It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit `this` pointer."},{"content":"It is also possible for multiple methods in an interface to share the same stub method; however, you should be careful when you use shared stubs.","pos":[1721,1866]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Stub methods must be static.","pos":[1872,1913],"source":"      > [!NOTE] >  Stub methods must be static."},{"content":"You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:      <ph id=\"ph1\">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 \"ForwardTestStub\")]       void GetString (string arg);   }   ```</ph>       You could then use the following code to declare the corresponding stub method:      <ph id=\"ph2\">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph>","pos":[1920,2475],"source":"       You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:      ```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 \"ForwardTestStub\")]       void GetString (string arg);   }   ```       You could then use the following code to declare the corresponding stub method:      ```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```"}]},{"pos":[4327,4504],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified class type and method name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\"></xref> class with the specified class type and method name."},{"pos":[4690,4739],"content":"The class that contains the required stub method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class that contains the required stub method.","pos":[0,49]}]},{"pos":[4806,4834],"content":"The name of the stub method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the stub method.","pos":[0,28]}]},{"pos":[5033,5241],"content":"<code>methodName</code> cannot be found.       -or-       The method is not static or non-generic.       -or-       The method's parameter list does not match the expected parameter list for the stub.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;methodName&lt;/code&gt;</ph> cannot be found.","pos":[0,40],"source":"<code>methodName</code> cannot be found."},{"content":"-or-       The method is not static or non-generic.","pos":[47,98]},{"content":"-or-       The method's parameter list does not match the expected parameter list for the stub.","pos":[105,200]}]},{"pos":[5345,5529],"content":"The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.","pos":[0,184]}]},{"pos":[6030,6084],"content":"Gets the class that contains the required stub method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the class that contains the required stub method.","pos":[0,54]}]},{"pos":[6194,6246],"content":"The class that contains the customized interop stub.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class that contains the customized interop stub.","pos":[0,52]}]},{"pos":[6862,6895],"content":"Gets the name of the stub method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the stub method.","pos":[0,33]}]},{"pos":[7010,7048],"content":"The name of a customized interop stub.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a customized interop stub.","pos":[0,38]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  id: ManagedToNativeComInteropStubAttribute\n  children:\n  - System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)\n  - System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType\n  - System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName\n  langs:\n  - csharp\n  name: ManagedToNativeComInteropStubAttribute\n  nameWithType: ManagedToNativeComInteropStubAttribute\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  type: Class\n  summary: Provides support for user customization of interop stubs in managed-to-COM interop scenarios.\n  remarks: \"This attribute enables interop developers who have knowledge about marshaling and the inner workings of interop calls to do the following:  \\n  \\n-   Take advantage of customized interop stubs at build time instead of run time.  \\n  \\n-   Debug customized interop stubs.  \\n  \\n-   Provide marshaling capabilities within a stub that the runtime does not provide.  \\n  \\n-   Provide user-specific method dispatch capabilities.  \\n  \\n You apply the attribute on a method in an interface to specify a corresponding stub method for managed-to-native COM interop.  \\n  \\n If this attribute is encountered during run time, the common language runtime does not dynamically generate an interop stub. Instead, it invokes the custom stub that was created at build time.  \\n  \\n The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:  \\n  \\n-   The attribute can be used only on methods from interfaces that are marked `[ComImport]`. If the attribute is applied to non-interface types, it is ignored by the runtime.  \\n  \\n-   The attribute can be used only once on the same method in an interface. If it is used more than once, the compiler generates a duplicated attribute error.  \\n  \\n-   The attribute is not inheritable from a base interface. Derived interfaces must explicitly assign the attribute.  \\n  \\n-   The assembly that contains the attributed method must also contain the customized stub.  \\n  \\n Overloaded stub methods are valid. Although you specify only the type and the name of the stub method, the runtime will discover the corresponding stub. It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit `this` pointer.  \\n  \\n It is also possible for multiple methods in an interface to share the same stub method; however, you should be careful when you use shared stubs.  \\n  \\n> [!NOTE]\\n>  Stub methods must be static.  \\n  \\n You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:  \\n  \\n```  \\n[ComImport]  \\ninterface IMyInterface  \\n{  \\n    [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),  \\n              \\\"ForwardTestStub\\\")]  \\n    void GetString (string arg);  \\n}  \\n```  \\n  \\n You could then use the following code to declare the corresponding stub method:  \\n  \\n```  \\nclass TestStubClass  \\n{  \\n    internal static void ForwardTestStub(IMyInterface thisObject,  \\n             string arg) {…}  \\n}  \\n```\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public sealed class ManagedToNativeComInteropStubAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)\n  id: '#ctor(System.Type,System.String)'\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  langs:\n  - csharp\n  name: ManagedToNativeComInteropStubAttribute(Type,String)\n  nameWithType: ManagedToNativeComInteropStubAttribute.ManagedToNativeComInteropStubAttribute(Type,String)\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ManagedToNativeComInteropStubAttribute(Type,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\"></xref> class with the specified class type and method name.\n  syntax:\n    content: public ManagedToNativeComInteropStubAttribute (Type classType, string methodName);\n    parameters:\n    - id: classType\n      type: System.Type\n      description: The class that contains the required stub method.\n    - id: methodName\n      type: System.String\n      description: The name of the stub method.\n  overload: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>methodName</code> cannot be found.  \\n  \\n -or-  \\n  \\n The method is not static or non-generic.  \\n  \\n -or-  \\n  \\n The method's parameter list does not match the expected parameter list for the stub.\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType\n  id: ClassType\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  langs:\n  - csharp\n  name: ClassType\n  nameWithType: ManagedToNativeComInteropStubAttribute.ClassType\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets the class that contains the required stub method.\n  syntax:\n    content: public Type ClassType { get; }\n    return:\n      type: System.Type\n      description: The class that contains the customized interop stub.\n  overload: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName\n  id: MethodName\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  langs:\n  - csharp\n  name: MethodName\n  nameWithType: ManagedToNativeComInteropStubAttribute.MethodName\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets the name of the stub method.\n  syntax:\n    content: public string MethodName { get; }\n    return:\n      type: System.String\n      description: The name of a customized interop stub.\n  overload: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.MethodAccessException\n  isExternal: true\n  name: System.MethodAccessException\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  isExternal: false\n  name: ManagedToNativeComInteropStubAttribute(Type,String)\n  nameWithType: ManagedToNativeComInteropStubAttribute.ManagedToNativeComInteropStubAttribute(Type,String)\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ManagedToNativeComInteropStubAttribute(Type,String)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  isExternal: false\n  name: ClassType\n  nameWithType: ManagedToNativeComInteropStubAttribute.ClassType\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  isExternal: false\n  name: MethodName\n  nameWithType: ManagedToNativeComInteropStubAttribute.MethodName\n  fullName: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor*\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  isExternal: false\n  name: ManagedToNativeComInteropStubAttribute\n  nameWithType: ManagedToNativeComInteropStubAttribute.ManagedToNativeComInteropStubAttribute\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType*\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  isExternal: false\n  name: ClassType\n  nameWithType: ManagedToNativeComInteropStubAttribute.ClassType\n- uid: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName*\n  parent: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute\n  isExternal: false\n  name: MethodName\n  nameWithType: ManagedToNativeComInteropStubAttribute.MethodName\n"}