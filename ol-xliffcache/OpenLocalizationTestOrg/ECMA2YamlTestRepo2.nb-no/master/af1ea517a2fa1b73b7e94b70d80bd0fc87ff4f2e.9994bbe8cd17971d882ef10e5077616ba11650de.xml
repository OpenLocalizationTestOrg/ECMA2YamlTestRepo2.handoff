{"nodes":[{"pos":[447,576],"content":"Provides the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class for implementing a license provider.","needQuote":true,"needEscape":true,"source":"Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for implementing a license provider."},{"pos":[1704,1803],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseProvider\"></xref> class."},{"pos":[2589,2755],"content":"When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.","pos":[0,166]}]},{"pos":[3036,3149],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies where you can use the licensed object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object."},{"pos":[3208,3282],"content":"A <xref:System.Type> that represents the component requesting the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the component requesting the license.","pos":[0,74],"source":"A <xref:System.Type> that represents the component requesting the license."}]},{"pos":[3347,3388],"content":"An object that is requesting the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is requesting the license.","pos":[0,41]}]},{"pos":[3461,3726],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.LicenseException\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> should be thrown when the component cannot be granted a license; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when the component cannot be granted a license; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3800,3859],"content":"A valid <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A valid <xref href=\"System.ComponentModel.License\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicenseProvider\n  id: LicenseProvider\n  children:\n  - System.ComponentModel.LicenseProvider.#ctor\n  - System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  langs:\n  - csharp\n  name: LicenseProvider\n  nameWithType: LicenseProvider\n  fullName: System.ComponentModel.LicenseProvider\n  type: Class\n  summary: Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for implementing a license provider.\n  remarks: ''\n  example:\n  - \"The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a LicenseProvider that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \\n  \\n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._164_1.cs)]\\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._164_1.vb)]\\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._164_1.cpp)]\"\n  syntax:\n    content: public abstract class LicenseProvider\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseProvider.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.LicenseProvider\n  langs:\n  - csharp\n  name: LicenseProvider()\n  nameWithType: LicenseProvider.LicenseProvider()\n  fullName: System.ComponentModel.LicenseProvider.LicenseProvider()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseProvider\"></xref> class.\n  syntax:\n    content: protected LicenseProvider ();\n    parameters: []\n  overload: System.ComponentModel.LicenseProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  parent: System.ComponentModel.LicenseProvider\n  langs:\n  - csharp\n  name: GetLicense(LicenseContext,Type,Object,Boolean)\n  nameWithType: LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)\n  fullName: System.ComponentModel.LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.\n  syntax:\n    content: public abstract System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);\n    parameters:\n    - id: context\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object.\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the component requesting the license.\n    - id: instance\n      type: System.Object\n      description: An object that is requesting the license.\n    - id: allowExceptions\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when the component cannot be granted a license; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.ComponentModel.License\n      description: A valid <xref href=\"System.ComponentModel.License\"></xref>.\n  overload: System.ComponentModel.LicenseProvider.GetLicense*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.LicenseProvider.#ctor\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: LicenseProvider()\n  nameWithType: LicenseProvider.LicenseProvider()\n  fullName: System.ComponentModel.LicenseProvider.LicenseProvider()\n- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: GetLicense(LicenseContext,Type,Object,Boolean)\n  nameWithType: LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)\n  fullName: System.ComponentModel.LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)\n- uid: System.ComponentModel.License\n  parent: System.ComponentModel\n  isExternal: false\n  name: License\n  nameWithType: License\n  fullName: System.ComponentModel.License\n- uid: System.ComponentModel.LicenseContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.LicenseProvider.#ctor*\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: LicenseProvider\n  nameWithType: LicenseProvider.LicenseProvider\n- uid: System.ComponentModel.LicenseProvider.GetLicense*\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: GetLicense\n  nameWithType: LicenseProvider.GetLicense\n"}