{"nodes":[{"pos":[1869,1988],"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,119]}]},{"pos":[2000,2090],"content":"This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class derives from the &lt;xref:System.Security.Cryptography.ECDsa&gt; abstract base class.","pos":[0,90],"source":"This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class."}]},{"pos":[4446,4568],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a random key pair.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair."},{"pos":[4580,4636],"content":"The random key pair has a public key length of 521 bits.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The random key pair has a public key length of 521 bits.","pos":[0,56]}]},{"pos":[4888,4964],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]},{"pos":[5383,5535],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a random key pair, using the specified key size.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair, using the specified key size."},{"pos":[5547,5634],"content":"The random key pair will have the public key length defined by the <ph id=\"ph1\">`keySize`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The random key pair will have the public key length defined by the `keySize` parameter."},{"pos":[5767,5831],"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","pos":[0,64],"nodes":[{"content":"The size of the key.","pos":[0,20]},{"content":"Valid key sizes are 256, 384, and 521 bits.","pos":[21,64]}]}]},{"pos":[6021,6097],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]},{"pos":[6246,6295],"content":"<ph id=\"ph1\">&lt;code&gt;keySize&lt;/code&gt;</ph> specifies an invalid length.","needQuote":true,"needEscape":true,"source":"<code>keySize</code> specifies an invalid length."},{"pos":[6763,6949],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object."},{"pos":[7129,7228],"content":"The key that will be used as input to the cryptographic operations performed by the current object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key that will be used as input to the cryptographic operations performed by the current object.","pos":[0,99]}]},{"pos":[7394,7488],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.","needQuote":true,"needEscape":true,"source":"<code>key</code> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group."},{"pos":[7591,7672],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7791,7867],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]},{"pos":[8434,8446],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8970,9001],"content":"This method is not implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not implemented.","pos":[0,31]}]},{"pos":[9013,9189],"content":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To deserialize an XML key, use the &lt;xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29&gt; overload instead.","pos":[0,176],"source":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead."}]},{"pos":[9349,9398],"content":"The XML-based key information to be deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML-based key information to be deserialized.","pos":[0,49]}]},{"pos":[9584,9633],"content":"This method was not overridden for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method was not overridden for this instance.","pos":[0,49]}]},{"pos":[10214,10296],"content":"Deserializes the key information from an XML string by using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Deserializes the key information from an XML string by using the specified format.","pos":[0,82]}]},{"pos":[10487,10536],"content":"The XML-based key information to be deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML-based key information to be deserialized.","pos":[0,49]}]},{"pos":[10629,10807],"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the format of the XML string.","pos":[0,74]},{"content":"The only currently accepted format is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[75,178],"source":" The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[10989,11070],"content":"<ph id=\"ph1\">&lt;code&gt;xml&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>xml</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11185,11326],"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> specifies an invalid format.","pos":[0,48],"source":"<code>format</code> specifies an invalid format."},{"content":"The only accepted value is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[49,141],"source":" The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[11475,11492],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[11888,11959],"content":"Gets or sets the hash algorithm to use when signing and verifying data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the hash algorithm to use when signing and verifying data.","pos":[0,71]}]},{"pos":[11972,12561],"content":"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.       Other custom hash algorithms may also be used.       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.       This property is not used if you are signing or verifying data that is already hashed.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.       Other custom hash algorithms may also be used.       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.       This property is not used if you are signing or verifying data that is already hashed.","pos":[0,583],"nodes":[{"content":"This property accepts the following algorithms: &lt;xref:System.Security.Cryptography.CngAlgorithm.MD5%2A&gt;, &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A&gt;, &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A&gt;, &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A&gt;, and &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A&gt;.","pos":[0,346],"source":"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>."},{"content":"Other custom hash algorithms may also be used.","pos":[353,399]},{"content":"The default algorithm is &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A&gt;.","pos":[406,490],"source":"       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>."},{"content":"This property is not used if you are signing or verifying data that is already hashed.","pos":[497,583]}]}]},{"pos":[12748,12792],"content":"An object that specifies the hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the hash algorithm.","pos":[0,44]}]},{"pos":[12974,13048],"content":"The value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13838,13850],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13953,13965],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14023,14035],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14994,15006],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15068,15080],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15141,15153],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15256,15268],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15326,15338],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15761,15821],"content":"Gets or sets the key to use when signing and verifying data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the key to use when signing and verifying data.","pos":[0,60]}]},{"pos":[15980,16013],"content":"An object that specifies the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the key.","pos":[0,33]}]},{"pos":[16508,16553],"content":"Generates a signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a signature for the specified data.","pos":[0,45]}]},{"pos":[16566,17008],"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","pos":[0,440],"nodes":[{"content":"This method generates a signature for the specified data by hashing the input data using the &lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt; property, and then signing the result.","pos":[0,193],"source":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result."},{"content":"The &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt; flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the &lt;xref:System.Security.Cryptography.ECDsaCng&gt; object.","pos":[200,440],"source":"       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]}]},{"pos":[17147,17177],"content":"The message data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message data to be signed.","pos":[0,30]}]},{"pos":[17235,17278],"content":"A digital signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A digital signature for the specified data.","pos":[0,43]}]},{"pos":[17455,17537],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17686,17771],"content":"The key information that is associated with the instance does not have a private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]},{"pos":[18200,18286],"content":"Generates a signature for the specified data stream, reading to the end of the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a signature for the specified data stream, reading to the end of the stream.","pos":[0,86]}]},{"pos":[18299,18748],"content":"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","pos":[0,447],"nodes":[{"content":"This method generates a signature for the specified data stream by hashing the input data using the &lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt; property, and then signing the result.","pos":[0,200],"source":"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result."},{"content":"The &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt; flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the &lt;xref:System.Security.Cryptography.ECDsaCng&gt; object.","pos":[207,447],"source":"       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]}]},{"pos":[18900,18929],"content":"The data stream to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data stream to be signed.","pos":[0,29]}]},{"pos":[18987,19037],"content":"A digital signature for the specified data stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A digital signature for the specified data stream.","pos":[0,50]}]},{"pos":[19214,19296],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19445,19530],"content":"The key information that is associated with the instance does not have a private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]},{"pos":[20041,20139],"content":"Generates a digital signature for the specified length of data, beginning at the specified offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a digital signature for the specified length of data, beginning at the specified offset.","pos":[0,98]}]},{"pos":[20152,20593],"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method generates a signature for the specified data by hashing the input data using the &lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt; property, and then signing the result       The &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt; flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the &lt;xref:System.Security.Cryptography.ECDsaCng&gt; object.","pos":[0,439],"source":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result       The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]},{"pos":[20755,20785],"content":"The message data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message data to be signed.","pos":[0,30]}]},{"pos":[20847,20900],"content":"The location in the string at which to start signing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location in the string at which to start signing.","pos":[0,53]}]},{"pos":[20961,21041],"content":"The length of the string, in characters, following <ph id=\"ph1\">`offset`</ph> that will be signed.","needQuote":true,"needEscape":true,"source":"The length of the string, in characters, following `offset` that will be signed."},{"pos":[21099,21152],"content":"A digital signature for the specified length of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A digital signature for the specified length of data.","pos":[0,53]}]},{"pos":[21329,21411],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21526,21621],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> caused reading outside the bounds of the data string.","needQuote":true,"needEscape":true,"source":"<code>count</code> or <code>offset</code> caused reading outside the bounds of the data string."},{"pos":[21770,21855],"content":"The key information that is associated with the instance does not have a private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]},{"pos":[22278,22329],"content":"Generates a signature for the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a signature for the specified hash value.","pos":[0,51]}]},{"pos":[22341,22581],"content":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt; flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the &lt;xref:System.Security.Cryptography.ECDsaCng&gt; object.","pos":[0,240],"source":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]},{"pos":[22728,22768],"content":"The hash value of the data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]},{"pos":[22826,22875],"content":"A digital signature for the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A digital signature for the specified hash value.","pos":[0,49]}]},{"pos":[23052,23134],"content":"<ph id=\"ph1\">&lt;code&gt;hash&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hash</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[23283,23368],"content":"The key information that is associated with the instance does not have a private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]},{"pos":[23811,23842],"content":"This method is not implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not implemented.","pos":[0,31]}]},{"pos":[23854,24038],"content":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To convert the current key to an XML representation, use the &lt;xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29&gt; overload instead.","pos":[0,184],"source":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead."}]},{"pos":[24227,24393],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24451,24466],"content":"Not applicable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not applicable.","pos":[0,15]}]},{"pos":[24650,24681],"content":"This method is not implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not implemented.","pos":[0,31]}]},{"pos":[25203,25281],"content":"Serializes the key information to an XML string by using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serializes the key information to an XML string by using the specified format.","pos":[0,78]}]},{"pos":[25493,25671],"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the format of the XML string.","pos":[0,74]},{"content":"The only currently accepted format is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[75,178],"source":" The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[25729,25842],"content":"A string object that contains the key information, serialized to an XML string according to the requested format.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string object that contains the key information, serialized to an XML string according to the requested format.","pos":[0,113]}]},{"pos":[26034,26175],"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> specifies an invalid format.","pos":[0,48],"source":"<code>format</code> specifies an invalid format."},{"content":"The only accepted value is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[49,141],"source":" The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[26324,26341],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[26823,26876],"content":"Verifies the digital signature of the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies the digital signature of the specified data.","pos":[0,53]}]},{"pos":[26888,27077],"content":"This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method generates a signature for the given data by hashing the input data using the &lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt; property, and then signing the result.","pos":[0,189],"source":"This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result."}]},{"pos":[27233,27258],"content":"The data that was signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data that was signed.","pos":[0,25]}]},{"pos":[27324,27353],"content":"The signature to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature to be verified.","pos":[0,29]}]},{"pos":[27412,27574],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27753,27861],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[28349,28443],"content":"Verifies the digital signature of the specified data stream, reading to the end of the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies the digital signature of the specified data stream, reading to the end of the stream.","pos":[0,94]}]},{"pos":[28455,28593],"content":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method hashes the input data by using the &lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt; property before verification.","pos":[0,138],"source":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification."}]},{"pos":[28762,28794],"content":"The data stream that was signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data stream that was signed.","pos":[0,32]}]},{"pos":[28860,28889],"content":"The signature to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature to be verified.","pos":[0,29]}]},{"pos":[28948,29110],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[29289,29397],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[29967,30056],"content":"Verifies a signature for the specified length of data, beginning at the specified offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies a signature for the specified length of data, beginning at the specified offset.","pos":[0,89]}]},{"pos":[30068,30206],"content":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method hashes the input data by using the &lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt; property before verification.","pos":[0,138],"source":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification."}]},{"pos":[30385,30410],"content":"The data that was signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data that was signed.","pos":[0,25]}]},{"pos":[30472,30529],"content":"The location in the data at which the signed data begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location in the data at which the signed data begins.","pos":[0,57]}]},{"pos":[30590,30668],"content":"The length of the data, in characters, following <ph id=\"ph1\">`offset`</ph> that will be signed.","needQuote":true,"needEscape":true,"source":"The length of the data, in characters, following `offset` that will be signed."},{"pos":[30734,30763],"content":"The signature to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature to be verified.","pos":[0,29]}]},{"pos":[30822,30984],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[31176,31386],"content":"<code>offset</code> or <code>count</code> is less then zero.       -or-       <code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less then zero.","pos":[0,60],"source":"<code>offset</code> or <code>count</code> is less then zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is larger than the length of the byte array passed in the <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph> parameter.","pos":[67,206],"source":"       -or-       <code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter."}]},{"pos":[31490,31598],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32080,32152],"content":"Verifies the specified digital signature against a specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies the specified digital signature against a specified hash value.","pos":[0,72]}]},{"pos":[32317,32359],"content":"The hash value of the data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the data to be verified.","pos":[0,42]}]},{"pos":[32425,32497],"content":"The digital signature of the data to be verified against the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digital signature of the data to be verified against the hash value.","pos":[0,72]}]},{"pos":[32556,32718],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[32897,33005],"content":"<ph id=\"ph1\">&lt;code&gt;hash&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hash</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDsaCng\n  id: ECDsaCng\n  children:\n  - System.Security.Cryptography.ECDsaCng.#ctor\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  - System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  - System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaCng.Key\n  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: ECDsaCng\n  nameWithType: ECDsaCng\n  fullName: System.Security.Cryptography.ECDsaCng\n  type: Class\n  summary: Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  remarks: This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class.\n  example:\n  - \"The following example shows how to use the ECDsaCng class to sign a message and how to use the signature to verify that the message has not been altered.  \\n  \\n [!code-cs[ECDsaCng#1](~/add/codesnippet/csharp/t-system.security.crypto_32_1.cs)]\\n [!code-vb[ECDsaCng#1](~/add/codesnippet/visualbasic/t-system.security.crypto_32_1.vb)]\"\n  syntax:\n    content: 'public sealed class ECDsaCng : System.Security.Cryptography.ECDsa'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.ECDsa\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.ECDsa.Create\n  - System.Security.Cryptography.ECDsa.Create(System.String)\n  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng()\n  nameWithType: ECDsaCng.ECDsaCng()\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair.\n  remarks: The random key pair has a public key length of 521 bits.\n  syntax:\n    content: public ECDsaCng ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng(Int32)\n  nameWithType: ECDsaCng.ECDsaCng(Int32)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair, using the specified key size.\n  remarks: The random key pair will have the public key length defined by the `keySize` parameter.\n  syntax:\n    content: public ECDsaCng (int keySize);\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: The size of the key. Valid key sizes are 256, 384, and 521 bits.\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>keySize</code> specifies an invalid length.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng(CngKey)\n  nameWithType: ECDsaCng.ECDsaCng(CngKey)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(CngKey)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object.\n  syntax:\n    content: public ECDsaCng (System.Security.Cryptography.CngKey key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: The key that will be used as input to the cryptographic operations performed by the current object.\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ECDsaCng.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Security.Cryptography.ECDsaCng.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: ECDsaCng.FromXmlString(String)\n  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: This method is not implemented.\n  remarks: To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: The XML-based key information to be deserialized.\n  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method was not overridden for this instance.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: FromXmlString(String,ECKeyXmlFormat)\n  nameWithType: ECDsaCng.FromXmlString(String,ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String,ECKeyXmlFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Deserializes the key information from an XML string by using the specified format.\n  syntax:\n    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);\n    parameters:\n    - id: xml\n      type: System.String\n      description: The XML-based key information to be deserialized.\n    - id: format\n      type: System.Security.Cryptography.ECKeyXmlFormat\n      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>xml</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: ECDsaCng.HashAlgorithm\n  fullName: System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the hash algorithm to use when signing and verifying data.\n  remarks: \"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.  \\n  \\n Other custom hash algorithms may also be used.  \\n  \\n The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.  \\n  \\n This property is not used if you are signing or verifying data that is already hashed.\"\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: An object that specifies the hash algorithm.\n  overload: System.Security.Cryptography.ECDsaCng.HashAlgorithm*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaCng.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: To be added.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: To be added.\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Cryptography.ECDsaCng.HashData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: To be added.\n    - id: offset\n      type: System.Int32\n      description: To be added.\n    - id: count\n      type: System.Int32\n      description: To be added.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: To be added.\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Cryptography.ECDsaCng.HashData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.Key\n  id: Key\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: Key\n  nameWithType: ECDsaCng.Key\n  fullName: System.Security.Cryptography.ECDsaCng.Key\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the key to use when signing and verifying data.\n  syntax:\n    content: public System.Security.Cryptography.CngKey Key { get; }\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An object that specifies the key.\n  overload: System.Security.Cryptography.ECDsaCng.Key*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  id: SignData(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignData(Byte[])\n  nameWithType: ECDsaCng.SignData(Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Generates a signature for the specified data.\n  remarks: \"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \\n  \\n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\"\n  syntax:\n    content: public byte[] SignData (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The message data to be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified data.\n  overload: System.Security.Cryptography.ECDsaCng.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  id: SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignData(Stream)\n  nameWithType: ECDsaCng.SignData(Stream)\n  fullName: System.Security.Cryptography.ECDsaCng.SignData(Stream)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Generates a signature for the specified data stream, reading to the end of the stream.\n  remarks: \"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \\n  \\n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\"\n  syntax:\n    content: public byte[] SignData (System.IO.Stream data);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The data stream to be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified data stream.\n  overload: System.Security.Cryptography.ECDsaCng.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  id: SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32)\n  nameWithType: ECDsaCng.SignData(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Generates a digital signature for the specified length of data, beginning at the specified offset.\n  remarks: \"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result  \\n  \\n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\"\n  syntax:\n    content: public byte[] SignData (byte[] data, int offset, int count);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The message data to be signed.\n    - id: offset\n      type: System.Int32\n      description: The location in the string at which to start signing.\n    - id: count\n      type: System.Int32\n      description: The length of the string, in characters, following `offset` that will be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified length of data.\n  overload: System.Security.Cryptography.ECDsaCng.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> or <code>offset</code> caused reading outside the bounds of the data string.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignHash(Byte[])\n  nameWithType: ECDsaCng.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.SignHash(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Generates a signature for the specified hash value.\n  remarks: The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\n  syntax:\n    content: public override byte[] SignHash (byte[] hash);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified hash value.\n  overload: System.Security.Cryptography.ECDsaCng.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hash</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: ECDsaCng.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: This method is not implemented.\n  remarks: To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: Not applicable.\n  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method is not implemented.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ToXmlString(ECKeyXmlFormat)\n  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(ECKeyXmlFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Serializes the key information to an XML string by using the specified format.\n  syntax:\n    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);\n    parameters:\n    - id: format\n      type: System.Security.Cryptography.ECKeyXmlFormat\n      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n    return:\n      type: System.String\n      description: A string object that contains the key information, serialized to an XML string according to the requested format.\n  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  id: VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies the digital signature of the specified data.\n  remarks: This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: signature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsaCng.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  id: VerifyData(System.IO.Stream,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyData(Stream,Byte[])\n  nameWithType: ECDsaCng.VerifyData(Stream,Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Stream,Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies the digital signature of the specified data stream, reading to the end of the stream.\n  remarks: This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.\n  syntax:\n    content: public bool VerifyData (System.IO.Stream data, byte[] signature);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The data stream that was signed.\n    - id: signature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsaCng.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Int32,Int32,Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies a signature for the specified length of data, beginning at the specified offset.\n  remarks: This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.\n  syntax:\n    content: public bool VerifyData (byte[] data, int offset, int count, byte[] signature);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: offset\n      type: System.Int32\n      description: The location in the data at which the signed data begins.\n    - id: count\n      type: System.Int32\n      description: The length of the data, in characters, following `offset` that will be signed.\n    - id: signature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsaCng.VerifyData*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>count</code> is less then zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyHash(Byte[],Byte[])\n  nameWithType: ECDsaCng.VerifyHash(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyHash(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies the specified digital signature against a specified hash value.\n  syntax:\n    content: public override bool VerifyHash (byte[] hash, byte[] signature);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data to be verified.\n    - id: signature\n      type: System.Byte[]\n      description: The digital signature of the data to be verified against the hash value.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsaCng.VerifyHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hash</code> or <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: System.Security.Cryptography.ECDsa\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ECDsaCng.#ctor\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng()\n  nameWithType: ECDsaCng.ECDsaCng()\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng()\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng(Int32)\n  nameWithType: ECDsaCng.ECDsaCng(Int32)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng(CngKey)\n  nameWithType: ECDsaCng.ECDsaCng(CngKey)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(CngKey)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ECDsaCng.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: ECDsaCng.FromXmlString(String)\n  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: FromXmlString(String,ECKeyXmlFormat)\n  nameWithType: ECDsaCng.FromXmlString(String,ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String,ECKeyXmlFormat)\n- uid: System.Security.Cryptography.ECKeyXmlFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECKeyXmlFormat\n  nameWithType: ECKeyXmlFormat\n  fullName: System.Security.Cryptography.ECKeyXmlFormat\n- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: ECDsaCng.HashAlgorithm\n  fullName: System.Security.Cryptography.ECDsaCng.HashAlgorithm\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaCng.HashData(Stream,HashAlgorithmName)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsaCng.Key\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Key\n  nameWithType: ECDsaCng.Key\n  fullName: System.Security.Cryptography.ECDsaCng.Key\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData(Byte[])\n  nameWithType: ECDsaCng.SignData(Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData(Stream)\n  nameWithType: ECDsaCng.SignData(Stream)\n  fullName: System.Security.Cryptography.ECDsaCng.SignData(Stream)\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32)\n  nameWithType: ECDsaCng.SignData(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignHash(Byte[])\n  nameWithType: ECDsaCng.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.SignHash(Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: ECDsaCng.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ToXmlString(ECKeyXmlFormat)\n  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(ECKeyXmlFormat)\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData(Byte[],Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData(Stream,Byte[])\n  nameWithType: ECDsaCng.VerifyData(Stream,Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Stream,Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData(Byte[],Int32,Int32,Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyHash(Byte[],Byte[])\n  nameWithType: ECDsaCng.VerifyHash(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyHash(Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.#ctor*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng\n  nameWithType: ECDsaCng.ECDsaCng\n- uid: System.Security.Cryptography.ECDsaCng.Dispose*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Dispose\n  nameWithType: ECDsaCng.Dispose\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: FromXmlString\n  nameWithType: ECDsaCng.FromXmlString\n- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: ECDsaCng.HashAlgorithm\n- uid: System.Security.Cryptography.ECDsaCng.HashData*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashData\n  nameWithType: ECDsaCng.HashData\n- uid: System.Security.Cryptography.ECDsaCng.Key*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Key\n  nameWithType: ECDsaCng.Key\n- uid: System.Security.Cryptography.ECDsaCng.SignData*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData\n  nameWithType: ECDsaCng.SignData\n- uid: System.Security.Cryptography.ECDsaCng.SignHash*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignHash\n  nameWithType: ECDsaCng.SignHash\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ToXmlString\n  nameWithType: ECDsaCng.ToXmlString\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData\n  nameWithType: ECDsaCng.VerifyData\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyHash\n  nameWithType: ECDsaCng.VerifyHash\n"}