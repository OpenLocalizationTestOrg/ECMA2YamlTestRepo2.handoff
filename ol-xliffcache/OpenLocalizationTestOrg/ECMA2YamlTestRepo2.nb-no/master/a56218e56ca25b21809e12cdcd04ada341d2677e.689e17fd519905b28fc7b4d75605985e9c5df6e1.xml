{"nodes":[{"pos":[832,1018],"content":"Allows security actions for <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows security actions for <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PublisherIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","pos":[0,154],"source":"Allows security actions for <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[155,186]}]},{"pos":[1031,2926],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.       The properties <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A>, <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A>, and <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> are mutually exclusive.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.      > [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.      > [!NOTE] >  By default, code access security does not check for <xref:System.Security.Policy.Publisher> evidence. Unless your computer has a custom code group based on the <xref:System.Security.Policy.PublisherMembershipCondition> class, you can improve performance by bypassing Authenticode signature verification. This is accomplished by configuring the runtime to not provide <xref:System.Security.Policy.Publisher> evidence for code access security. For more information about how to configure this option and which applications can use it, see the  element.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"The properties &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A&gt;, &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A&gt;, and &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A&gt; are mutually exclusive.","pos":[130,435],"source":"       The properties <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A>, <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A>, and <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> are mutually exclusive."},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[442,592]},{"content":"Security attributes are used only for declarative security.","pos":[593,652]},{"content":"For imperative security, use the corresponding permission class.","pos":[653,717]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Starting with the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, identity permissions are not used.","pos":[723,854],"source":"      > [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used."},{"content":"&gt;    &gt;  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an &lt;xref:System.Security.Permissions.PermissionState&gt; permission state value.","pos":[857,1019],"source":"   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value."},{"content":"Starting with the .NET Framework version 2.0, identity permissions can have any permission state value.","pos":[1020,1123]},{"content":"This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface.","pos":[1124,1314],"source":" This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  By default, code access security does not check for &lt;xref:System.Security.Policy.Publisher&gt; evidence.","pos":[1320,1434],"source":"      > [!NOTE] >  By default, code access security does not check for <xref:System.Security.Policy.Publisher> evidence."},{"content":"Unless your computer has a custom code group based on the &lt;xref:System.Security.Policy.PublisherMembershipCondition&gt; class, you can improve performance by bypassing Authenticode signature verification.","pos":[1435,1636],"source":" Unless your computer has a custom code group based on the <xref:System.Security.Policy.PublisherMembershipCondition> class, you can improve performance by bypassing Authenticode signature verification."},{"content":"This is accomplished by configuring the runtime to not provide &lt;xref:System.Security.Policy.Publisher&gt; evidence for code access security.","pos":[1637,1774],"source":" This is accomplished by configuring the runtime to not provide <xref:System.Security.Policy.Publisher> evidence for code access security."},{"content":"For more information about how to configure this option and which applications can use it, see the  element.","pos":[1775,1883]}]},{"pos":[4367,4576],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PublisherIdentityPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PublisherIdentityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[4804,4886],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."},{"pos":[5463,5544],"content":"Gets or sets a certification file containing an Authenticode X.509v3 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a certification file containing an Authenticode X.509v3 certificate.","pos":[0,81]}]},{"pos":[5556,5683],"content":"If <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> is set, this property is ignored.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A&gt; is set, this property is ignored.","pos":[0,127],"source":"If <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> is set, this property is ignored."}]},{"pos":[5801,5876],"content":"The file path of an X.509 certificate file (usually has the extension.cer).","needQuote":true,"needEscape":true,"nodes":[{"content":"The file path of an X.509 certificate file (usually has the extension.cer).","pos":[0,75]}]},{"pos":[6500,6615],"content":"Creates and returns a new instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PublisherIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a new instance of <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref>."},{"pos":[6628,6942],"content":"This method should be called only by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should be called only by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,312],"nodes":[{"content":"This method should be called only by the security system, never by application code.","pos":[0,84]},{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[91,182]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[183,312]}]}]},{"pos":[7122,7236],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PublisherIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to this attribute.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> that corresponds to this attribute."},{"pos":[7834,7919],"content":"Gets or sets a signed file from which to extract an Authenticode X.509v3 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a signed file from which to extract an Authenticode X.509v3 certificate.","pos":[0,85]}]},{"pos":[7931,8152],"content":"If either <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> or <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A> is set, this property is ignored.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If either &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A&gt; or &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A&gt; is set, this property is ignored.","pos":[0,221],"source":"If either <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> or <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A> is set, this property is ignored."}]},{"pos":[8272,8335],"content":"The file path of a file signed with the Authenticode signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file path of a file signed with the Authenticode signature.","pos":[0,63]}]},{"pos":[8952,9051],"content":"Gets or sets an Authenticode X.509v3 certificate that identifies the publisher of the calling code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an Authenticode X.509v3 certificate that identifies the publisher of the calling code.","pos":[0,99]}]},{"pos":[9064,9582],"content":"If this property is set, <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A> and <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A> are ignored.       You can obtain the hexadecimal representation by running the Strong Name tool (Sn.exe) with the token and public key options (**Sn** **-tp** *keyfile*`)` against a file that has an Authenticode signature. For more information, see [Sn.exe (Strong Name Tool)](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this property is set, &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A&gt; and &lt;xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A&gt; are ignored.","pos":[0,211],"source":"If this property is set, <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A> and <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A> are ignored."},{"content":"You can obtain the hexadecimal representation by running the Strong Name tool (Sn.exe) with the token and public key options (<bpt id=\"p1\">**</bpt>Sn<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>-tp<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>keyfile<ept id=\"p3\">*</ept><ph id=\"ph1\">`)`</ph> against a file that has an Authenticode signature.","pos":[218,422],"source":"       You can obtain the hexadecimal representation by running the Strong Name tool (Sn.exe) with the token and public key options (**Sn** **-tp** *keyfile*`)` against a file that has an Authenticode signature."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Sn.exe (Strong Name Tool)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[423,516],"source":" For more information, see [Sn.exe (Strong Name Tool)](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[9708,9762],"content":"A hexadecimal representation of the X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"A hexadecimal representation of the X.509 certificate.","pos":[0,54]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  id: PublisherIdentityPermissionAttribute\n  children:\n  - System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile\n  - System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission\n  - System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile\n  - System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate\n  langs:\n  - csharp\n  name: PublisherIdentityPermissionAttribute\n  nameWithType: PublisherIdentityPermissionAttribute\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  type: Class\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n The properties <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A>, <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A>, and <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> are mutually exclusive.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \\n  \\n> [!IMPORTANT]\\n>  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.  \\n>   \\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.  \\n  \\n> [!NOTE]\\n>  By default, code access security does not check for <xref:System.Security.Policy.Publisher> evidence. Unless your computer has a custom code group based on the <xref:System.Security.Policy.PublisherMembershipCondition> class, you can improve performance by bypassing Authenticode signature verification. This is accomplished by configuring the runtime to not provide <xref:System.Security.Policy.Publisher> evidence for code access security. For more information about how to configure this option and which applications can use it, see the  element.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PublisherIdentityPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: PublisherIdentityPermissionAttribute(SecurityAction)\n  nameWithType: PublisherIdentityPermissionAttribute.PublisherIdentityPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.PublisherIdentityPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PublisherIdentityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  syntax:\n    content: public PublisherIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile\n  id: CertFile\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: CertFile\n  nameWithType: PublisherIdentityPermissionAttribute.CertFile\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a certification file containing an Authenticode X.509v3 certificate.\n  remarks: If <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> is set, this property is ignored.\n  syntax:\n    content: public string CertFile { get; set; }\n    return:\n      type: System.String\n      description: The file path of an X.509 certificate file (usually has the extension.cer).\n  overload: System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: PublisherIdentityPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new instance of <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref>.\n  remarks: \"This method should be called only by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile\n  id: SignedFile\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: SignedFile\n  nameWithType: PublisherIdentityPermissionAttribute.SignedFile\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a signed file from which to extract an Authenticode X.509v3 certificate.\n  remarks: If either <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate%2A> or <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A> is set, this property is ignored.\n  syntax:\n    content: public string SignedFile { get; set; }\n    return:\n      type: System.String\n      description: The file path of a file signed with the Authenticode signature.\n  overload: System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate\n  id: X509Certificate\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: X509Certificate\n  nameWithType: PublisherIdentityPermissionAttribute.X509Certificate\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets an Authenticode X.509v3 certificate that identifies the publisher of the calling code.\n  remarks: \"If this property is set, <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile%2A> and <xref:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile%2A> are ignored.  \\n  \\n You can obtain the hexadecimal representation by running the Strong Name tool (Sn.exe) with the token and public key options (**Sn** **-tp** *keyfile*`)` against a file that has an Authenticode signature. For more information, see [Sn.exe (Strong Name Tool)](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public string X509Certificate { get; set; }\n    return:\n      type: System.String\n      description: A hexadecimal representation of the X.509 certificate.\n  overload: System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: PublisherIdentityPermissionAttribute(SecurityAction)\n  nameWithType: PublisherIdentityPermissionAttribute.PublisherIdentityPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.PublisherIdentityPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: CertFile\n  nameWithType: PublisherIdentityPermissionAttribute.CertFile\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: PublisherIdentityPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: SignedFile\n  nameWithType: PublisherIdentityPermissionAttribute.SignedFile\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: X509Certificate\n  nameWithType: PublisherIdentityPermissionAttribute.X509Certificate\n  fullName: System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: PublisherIdentityPermissionAttribute\n  nameWithType: PublisherIdentityPermissionAttribute.PublisherIdentityPermissionAttribute\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile*\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: CertFile\n  nameWithType: PublisherIdentityPermissionAttribute.CertFile\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: PublisherIdentityPermissionAttribute.CreatePermission\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile*\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: SignedFile\n  nameWithType: PublisherIdentityPermissionAttribute.SignedFile\n- uid: System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate*\n  parent: System.Security.Permissions.PublisherIdentityPermissionAttribute\n  isExternal: false\n  name: X509Certificate\n  nameWithType: PublisherIdentityPermissionAttribute.X509Certificate\n"}