{"nodes":[{"pos":[1864,1926],"content":"Represents a catalog after a filter function is applied to it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a catalog after a filter function is applied to it.","pos":[0,62]}]},{"pos":[4183,4351],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified underlying catalog and filter.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> class with the specified underlying catalog and filter."},{"pos":[4697,4720],"content":"The underlying catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying catalog.","pos":[0,23]}]},{"pos":[4867,4896],"content":"The function to filter parts.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function to filter parts.","pos":[0,29]}]},{"pos":[5455,5502],"content":"Occurs when the underlying catalog has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the underlying catalog has changed.","pos":[0,47]}]},{"pos":[5784,5796],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6283,6330],"content":"Occurs when the underlying catalog is changing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the underlying catalog is changing.","pos":[0,47]}]},{"pos":[6613,6625],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7125,7253],"content":"Gets a catalog that contains parts that are present in the underlying catalog but that were filtered out by the filter function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a catalog that contains parts that are present in the underlying catalog but that were filtered out by the filter function.","pos":[0,128]}]},{"pos":[7463,7518],"content":"A catalog that contains the complement of this catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"A catalog that contains the complement of this catalog.","pos":[0,55]}]},{"pos":[8142,8480],"content":"Called by the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Dispose()\" name=\"Dispose()\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Finalize()\" name=\"Finalize()\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> methods to release the managed and unmanaged resources used by the current instance of the <bpt id=\"p3\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Called by the <xref uid=\"langword_csharp_Dispose()\" name=\"Dispose()\" href=\"\"></xref> and <xref uid=\"langword_csharp_Finalize()\" name=\"Finalize()\" href=\"\"></xref> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> class."},{"pos":[8493,9106],"content":"This method is called only by the public `Dispose()` and `Finalize()` methods; do not call this method directly.When you implement the dispose pattern, the Boolean parameter of the `Dispose(Boolean)` method should be used as follows:      -   The `Dispose()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `true` to release both managed and unmanaged resources.      -   The `Finalize()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `false` to release only unmanaged resources.       For more information, see .","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called only by the public <ph id=\"ph1\">`Dispose()`</ph> and <ph id=\"ph2\">`Finalize()`</ph> methods; do not call this method directly.When you implement the dispose pattern, the Boolean parameter of the <ph id=\"ph3\">`Dispose(Boolean)`</ph> method should be used as follows:      -   The <ph id=\"ph4\">`Dispose()`</ph> method of the current object should call <ph id=\"ph5\">`Dispose(Boolean)`</ph> with the Boolean parameter set to <ph id=\"ph6\">`true`</ph> to release both managed and unmanaged resources.","pos":[0,408],"source":"This method is called only by the public `Dispose()` and `Finalize()` methods; do not call this method directly.When you implement the dispose pattern, the Boolean parameter of the `Dispose(Boolean)` method should be used as follows:      -   The `Dispose()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `true` to release both managed and unmanaged resources."},{"content":"-   The <ph id=\"ph1\">`Finalize()`</ph> method of the current object should call <ph id=\"ph2\">`Dispose(Boolean)`</ph> with the Boolean parameter set to <ph id=\"ph3\">`false`</ph> to release only unmanaged resources.","pos":[414,573],"source":"      -   The `Finalize()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `false` to release only unmanaged resources."},{"content":"For more information, see .","pos":[580,607]}]},{"pos":[9263,9467],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[10065,10121],"content":"Returns an enumerator that iterates through the catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through the catalog.","pos":[0,56]}]},{"pos":[10461,10523],"content":"An enumerator that can be used to iterate through the catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that can be used to iterate through the catalog.","pos":[0,62]}]},{"pos":[11286,11360],"content":"Gets the exported parts from this catalog that match the specified import.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the exported parts from this catalog that match the specified import.","pos":[0,74]}]},{"pos":[11796,11816],"content":"The import to match.","needQuote":true,"needEscape":true,"nodes":[{"content":"The import to match.","pos":[0,20]}]},{"pos":[12046,12077],"content":"A collection of matching parts.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of matching parts.","pos":[0,31]}]},{"pos":[12708,12878],"content":"Gets a new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains all the parts from this catalog and all their dependencies.","needQuote":true,"needEscape":true,"source":"Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all their dependencies."},{"pos":[13111,13127],"content":"The new catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new catalog.","pos":[0,16]}]},{"pos":[14039,14271],"content":"Gets a new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains all the parts from this catalog and all dependencies that can be reached through imports that match the specified filter.","needQuote":true,"needEscape":true,"source":"Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all dependencies that can be reached through imports that match the specified filter."},{"pos":[14629,14652],"content":"The filter for imports.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filter for imports.","pos":[0,23]}]},{"pos":[14754,14770],"content":"The new catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new catalog.","pos":[0,16]}]},{"pos":[15400,15568],"content":"Gets a new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains all the parts from this catalog and all their dependents.","needQuote":true,"needEscape":true,"source":"Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all their dependents."},{"pos":[15799,15815],"content":"The new catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new catalog.","pos":[0,16]}]},{"pos":[16715,16945],"content":"Gets a new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains all the parts from this catalog and all dependents that can be reached through imports that match the specified filter.","needQuote":true,"needEscape":true,"source":"Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all dependents that can be reached through imports that match the specified filter."},{"pos":[17301,17324],"content":"The filter for imports.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filter for imports.","pos":[0,23]}]},{"pos":[17426,17442],"content":"The new catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new catalog.","pos":[0,16]}]},{"pos":[18298,18402],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\"></xref> event."},{"pos":[18681,18709],"content":"Provides data for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data for the event.","pos":[0,28]}]},{"pos":[19562,19667],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\"></xref> event."},{"pos":[19947,19975],"content":"Provides data for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data for the event.","pos":[0,28]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  id: FilteredCatalog\n  children:\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  - System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  langs:\n  - csharp\n  name: FilteredCatalog\n  nameWithType: FilteredCatalog\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  type: Class\n  summary: Represents a catalog after a filter function is applied to it.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\n  syntax:\n    content: 'public class FilteredCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog, System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged'\n  inheritance:\n  - System.Object\n  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n  implements:\n  - System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged\n  inheritedMembers:\n  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose\n  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts\n  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  id: '#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})'\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  nameWithType: FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> class with the specified underlying catalog and filter.\n  syntax:\n    content: public FilteredCatalog (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool> filter);\n    parameters:\n    - id: catalog\n      type: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n      description: The underlying catalog.\n    - id: filter\n      type: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}\n      description: The function to filter parts.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\n  id: Changed\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: Changed\n  nameWithType: FilteredCatalog.Changed\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\n  type: Event\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Occurs when the underlying catalog has changed.\n  syntax:\n    content: public event EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs> Changed;\n    return:\n      type: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\n  id: Changing\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: Changing\n  nameWithType: FilteredCatalog.Changing\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\n  type: Event\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Occurs when the underlying catalog is changing.\n  syntax:\n    content: public event EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs> Changing;\n    return:\n      type: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement\n  id: Complement\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: Complement\n  nameWithType: FilteredCatalog.Complement\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement\n  type: Property\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a catalog that contains parts that are present in the underlying catalog but that were filtered out by the filter function.\n  syntax:\n    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog Complement { get; }\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: A catalog that contains the complement of this catalog.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: FilteredCatalog.Dispose(Boolean)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Called by the <xref uid=\"langword_csharp_Dispose()\" name=\"Dispose()\" href=\"\"></xref> and <xref uid=\"langword_csharp_Finalize()\" name=\"Finalize()\" href=\"\"></xref> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> class.\n  remarks: \"This method is called only by the public `Dispose()` and `Finalize()` methods; do not call this method directly.When you implement the dispose pattern, the Boolean parameter of the `Dispose(Boolean)` method should be used as follows:  \\n  \\n-   The `Dispose()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `true` to release both managed and unmanaged resources.  \\n  \\n-   The `Finalize()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `false` to release only unmanaged resources.  \\n  \\n For more information, see .\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator\n  id: GetEnumerator\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: FilteredCatalog.GetEnumerator()\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Returns an enumerator that iterates through the catalog.\n  syntax:\n    content: public override System.Collections.Generic.IEnumerator<System.ComponentModel.Composition.Primitives.ComposablePartDefinition> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.ComponentModel.Composition.Primitives.ComposablePartDefinition}\n      description: An enumerator that can be used to iterate through the catalog.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)\n  id: GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: GetExports(ImportDefinition)\n  nameWithType: FilteredCatalog.GetExports(ImportDefinition)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(ImportDefinition)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets the exported parts from this catalog that match the specified import.\n  syntax:\n    content: public override System.Collections.Generic.IEnumerable<Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>> GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);\n    parameters:\n    - id: definition\n      type: System.ComponentModel.Composition.Primitives.ImportDefinition\n      description: The import to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}}\n      description: A collection of matching parts.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies\n  id: IncludeDependencies\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: IncludeDependencies()\n  nameWithType: FilteredCatalog.IncludeDependencies()\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all their dependencies.\n  syntax:\n    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies ();\n    parameters: []\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: The new catalog.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  id: IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: IncludeDependencies(Func<ImportDefinition,Boolean>)\n  nameWithType: FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all dependencies that can be reached through imports that match the specified filter.\n  syntax:\n    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies (Func<System.ComponentModel.Composition.Primitives.ImportDefinition,bool> importFilter);\n    parameters:\n    - id: importFilter\n      type: System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean}\n      description: The filter for imports.\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: The new catalog.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents\n  id: IncludeDependents\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: IncludeDependents()\n  nameWithType: FilteredCatalog.IncludeDependents()\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all their dependents.\n  syntax:\n    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents ();\n    parameters: []\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: The new catalog.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  id: IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: IncludeDependents(Func<ImportDefinition,Boolean>)\n  nameWithType: FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a new <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog\"></xref> object that contains all the parts from this catalog and all dependents that can be reached through imports that match the specified filter.\n  syntax:\n    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents (Func<System.ComponentModel.Composition.Primitives.ImportDefinition,bool> importFilter);\n    parameters:\n    - id: importFilter\n      type: System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean}\n      description: The filter for imports.\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: The new catalog.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  id: OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: OnChanged(ComposablePartCatalogChangeEventArgs)\n  nameWithType: FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Raises the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\"></xref> event.\n  syntax:\n    content: protected virtual void OnChanged (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs\n      description: Provides data for the event.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  id: OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  langs:\n  - csharp\n  name: OnChanging(ComposablePartCatalogChangeEventArgs)\n  nameWithType: FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Raises the <xref href=\"System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\"></xref> event.\n  syntax:\n    content: protected virtual void OnChanging (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs\n      description: Provides data for the event.\n  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n  isExternal: false\n  name: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  nameWithType: FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n- uid: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}\n  parent: System\n  isExternal: true\n  name: Func<ComposablePartDefinition,Boolean>\n  nameWithType: Func<ComposablePartDefinition,Boolean>\n  fullName: System.Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n    name: ComposablePartDefinition\n    nameWithType: ComposablePartDefinition\n    fullName: ComposablePartDefinition\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: Changed\n  nameWithType: FilteredCatalog.Changed\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed\n- uid: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<ComposablePartCatalogChangeEventArgs>\n  nameWithType: EventHandler<ComposablePartCatalogChangeEventArgs>\n  fullName: System.EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs\n    name: ComposablePartCatalogChangeEventArgs\n    nameWithType: ComposablePartCatalogChangeEventArgs\n    fullName: ComposablePartCatalogChangeEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: Changing\n  nameWithType: FilteredCatalog.Changing\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: Complement\n  nameWithType: FilteredCatalog.Complement\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  parent: System.ComponentModel.Composition.Hosting\n  isExternal: false\n  name: FilteredCatalog\n  nameWithType: FilteredCatalog\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: FilteredCatalog.Dispose(Boolean)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: FilteredCatalog.GetEnumerator()\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.ComponentModel.Composition.Primitives.ComposablePartDefinition}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<ComposablePartDefinition>\n  nameWithType: IEnumerator<ComposablePartDefinition>\n  fullName: System.Collections.Generic.IEnumerator<System.ComponentModel.Composition.Primitives.ComposablePartDefinition>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.ComponentModel.Composition.Primitives.ComposablePartDefinition>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n    name: ComposablePartDefinition\n    nameWithType: ComposablePartDefinition\n    fullName: ComposablePartDefinition\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: GetExports(ImportDefinition)\n  nameWithType: FilteredCatalog.GetExports(ImportDefinition)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(ImportDefinition)\n- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Tuple<ComposablePartDefinition,ExportDefinition>>\n  nameWithType: IEnumerable<Tuple<ComposablePartDefinition,ExportDefinition>>\n  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Tuple`2\n    name: Tuple\n    nameWithType: Tuple\n    fullName: Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n    name: ComposablePartDefinition\n    nameWithType: ComposablePartDefinition\n    fullName: ComposablePartDefinition\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.ComponentModel.Composition.Primitives.ExportDefinition\n    name: ExportDefinition\n    nameWithType: ExportDefinition\n    fullName: ExportDefinition\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Primitives.ImportDefinition\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ImportDefinition\n  nameWithType: ImportDefinition\n  fullName: System.ComponentModel.Composition.Primitives.ImportDefinition\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: IncludeDependencies()\n  nameWithType: FilteredCatalog.IncludeDependencies()\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies()\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: IncludeDependencies(Func<ImportDefinition,Boolean>)\n  nameWithType: FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)\n- uid: System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean}\n  parent: System\n  isExternal: true\n  name: Func<ImportDefinition,Boolean>\n  nameWithType: Func<ImportDefinition,Boolean>\n  fullName: System.Func<System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Primitives.ImportDefinition\n    name: ImportDefinition\n    nameWithType: ImportDefinition\n    fullName: ImportDefinition\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: IncludeDependents()\n  nameWithType: FilteredCatalog.IncludeDependents()\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents()\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: IncludeDependents(Func<ImportDefinition,Boolean>)\n  nameWithType: FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: OnChanged(ComposablePartCatalogChangeEventArgs)\n  nameWithType: FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)\n- uid: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs\n  parent: System.ComponentModel.Composition.Hosting\n  isExternal: false\n  name: ComposablePartCatalogChangeEventArgs\n  nameWithType: ComposablePartCatalogChangeEventArgs\n  fullName: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: OnChanging(ComposablePartCatalogChangeEventArgs)\n  nameWithType: FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: FilteredCatalog\n  nameWithType: FilteredCatalog.FilteredCatalog\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: Complement\n  nameWithType: FilteredCatalog.Complement\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: Dispose\n  nameWithType: FilteredCatalog.Dispose\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: FilteredCatalog.GetEnumerator\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: GetExports\n  nameWithType: FilteredCatalog.GetExports\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: IncludeDependencies\n  nameWithType: FilteredCatalog.IncludeDependencies\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: IncludeDependents\n  nameWithType: FilteredCatalog.IncludeDependents\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: OnChanged\n  nameWithType: FilteredCatalog.OnChanged\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging*\n  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  isExternal: false\n  name: OnChanging\n  nameWithType: FilteredCatalog.OnChanging\n"}