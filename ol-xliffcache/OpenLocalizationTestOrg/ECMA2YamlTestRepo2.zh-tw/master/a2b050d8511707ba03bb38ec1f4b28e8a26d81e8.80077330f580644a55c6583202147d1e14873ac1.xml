{"nodes":[{"pos":[359,536],"content":"Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.","pos":[0,177]}]},{"pos":[549,1117],"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.       Controls implement IInvokeProvider if the same behavior is not exposed through another control pattern provider. For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement IInvokeProvider.","needQuote":false,"needEscape":true,"nodes":[{"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.       Controls implement IInvokeProvider if the same behavior is not exposed through another control pattern provider. For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement IInvokeProvider.","pos":[0,566],"nodes":[{"content":"Implemented on a UI Automation provider that must support the &lt;xref:System.Windows.Automation.InvokePattern&gt; control pattern.","pos":[0,125],"source":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern."},{"content":"Controls implement IInvokeProvider if the same behavior is not exposed through another control pattern provider.","pos":[132,244]},{"content":"For example, if the &lt;xref:System.Windows.Automation.InvokePattern.Invoke%2A&gt; method on a control performs the same action as the &lt;xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A&gt; or &lt;xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A&gt; method, the control should not implement IInvokeProvider.","pos":[245,566],"source":" For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement IInvokeProvider."}]}]},{"pos":[1891,1973],"content":"Sends a request to activate a control and initiate its single, unambiguous action.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a request to activate a control and initiate its single, unambiguous action.","pos":[0,82]}]},{"pos":[1986,2912],"content":"Invoke is an asynchronous call and must return immediately without blocking.      > [!NOTE] >  This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked. Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.       Invoke raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event. If possible, the event should be raised after the control has completed its associated action.       <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the Invoke request in the following scenarios:      -   It is not possible or practical to wait until the action is complete.      -   The action requires user interaction.      -   The action is time-consuming and will cause the calling client to block for a significant length of time.","needQuote":false,"needEscape":true,"nodes":[{"content":"Invoke is an asynchronous call and must return immediately without blocking.","pos":[0,76]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.","pos":[82,212],"source":"      > [!NOTE] >  This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked."},{"content":"Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.","pos":[213,317]},{"content":"Invoke raises the &lt;xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent&gt; event.","pos":[324,419],"source":"       Invoke raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event."},{"content":"If possible, the event should be raised after the control has completed its associated action.","pos":[420,514]},{"content":"&lt;xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent&gt; should be raised before servicing the Invoke request in the following scenarios:      -   It is not possible or practical to wait until the action is complete.","pos":[521,751],"source":"       <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the Invoke request in the following scenarios:      -   It is not possible or practical to wait until the action is complete."},{"content":"-   The action requires user interaction.","pos":[757,798]},{"content":"-   The action is time-consuming and will cause the calling client to block for a significant length of time.","pos":[804,913]}]},{"pos":[3525,3555],"content":"If the control is not enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the control is not enabled.","pos":[0,30]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Automation.Provider.IInvokeProvider\n  id: IInvokeProvider\n  children:\n  - System.Windows.Automation.Provider.IInvokeProvider.Invoke\n  langs:\n  - csharp\n  name: IInvokeProvider\n  nameWithType: IInvokeProvider\n  fullName: System.Windows.Automation.Provider.IInvokeProvider\n  type: Interface\n  summary: Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.\n  remarks: \"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.  \\n  \\n Controls implement IInvokeProvider if the same behavior is not exposed through another control pattern provider. For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement IInvokeProvider.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"54fcb24b-e18e-47a2-b4d3-eccbe77599a2\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface IInvokeProvider\n  implements: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke\n  id: Invoke\n  parent: System.Windows.Automation.Provider.IInvokeProvider\n  langs:\n  - csharp\n  name: Invoke()\n  nameWithType: IInvokeProvider.Invoke()\n  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Sends a request to activate a control and initiate its single, unambiguous action.\n  remarks: \"Invoke is an asynchronous call and must return immediately without blocking.  \\n  \\n> [!NOTE]\\n>  This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked. Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.  \\n  \\n Invoke raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event. If possible, the event should be raised after the control has completed its associated action.  \\n  \\n <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the Invoke request in the following scenarios:  \\n  \\n-   It is not possible or practical to wait until the action is complete.  \\n  \\n-   The action requires user interaction.  \\n  \\n-   The action is time-consuming and will cause the calling client to block for a significant length of time.\"\n  example:\n  - \"The following example implements the Invoke method on the MouseDown event handler of a control. Assume that `providerControl` is a member variable that was initialized when the class was constructed.  \\n  \\n [!code-cs[UIAProvider_snip#106](~/add/codesnippet/csharp/UIAProvider/Invoker.cs#106)]\"\n  syntax:\n    content: public void Invoke ();\n    parameters: []\n  overload: System.Windows.Automation.Provider.IInvokeProvider.Invoke*\n  exceptions:\n  - type: System.Windows.Automation.ElementNotEnabledException\n    commentId: T:System.Windows.Automation.ElementNotEnabledException\n    description: If the control is not enabled.\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Automation.ElementNotEnabledException\n  parent: System.Windows.Automation\n  isExternal: false\n  name: ElementNotEnabledException\n  nameWithType: ElementNotEnabledException\n  fullName: System.Windows.Automation.ElementNotEnabledException\n- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke\n  parent: System.Windows.Automation.Provider.IInvokeProvider\n  isExternal: false\n  name: Invoke()\n  nameWithType: IInvokeProvider.Invoke()\n  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()\n- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke*\n  parent: System.Windows.Automation.Provider.IInvokeProvider\n  isExternal: false\n  name: Invoke\n  nameWithType: IInvokeProvider.Invoke\n"}