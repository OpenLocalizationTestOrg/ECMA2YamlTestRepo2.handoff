{"nodes":[{"pos":[740,918],"content":"Allows security actions for <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows security actions for <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","pos":[0,146],"source":"Allows security actions for <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[147,178]}]},{"pos":[931,2570],"content":"PrincipalPermissionAttribute can be used to declaratively demand that users running your code belong to a specified role or have been authenticated. Use of <xref:System.Security.Permissions.PermissionState> creates a <xref:System.Security.Permissions.PrincipalPermission> with <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> set to `true` and <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> and <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> set to `null`.       The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used. PrincipalPermissionAttribute cannot be applied at the assembly level.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.      > [!IMPORTANT] >  Before you use this class to demand principal permission, you must set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded: `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`","needQuote":false,"needEscape":true,"nodes":[{"content":"PrincipalPermissionAttribute can be used to declaratively demand that users running your code belong to a specified role or have been authenticated.","pos":[0,148]},{"content":"Use of &lt;xref:System.Security.Permissions.PermissionState&gt; creates a &lt;xref:System.Security.Permissions.PrincipalPermission&gt; with &lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A&gt; set to <ph id=\"ph1\">`true`</ph> and &lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A&gt; and &lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A&gt; set to <ph id=\"ph2\">`null`</ph>.","pos":[149,538],"source":" Use of <xref:System.Security.Permissions.PermissionState> creates a <xref:System.Security.Permissions.PrincipalPermission> with <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> set to `true` and <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> and <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> set to `null`."},{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[545,668],"source":"       The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"PrincipalPermissionAttribute cannot be applied at the assembly level.","pos":[669,738]},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[745,895]},{"content":"Security attributes are used only for declarative security.","pos":[896,955]},{"content":"For imperative security, use the corresponding permission class.","pos":[956,1020]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Before you use this class to demand principal permission, you must set the current application domain's principal policy to the enumeration value &lt;xref:System.Security.Principal.PrincipalPolicy&gt;.","pos":[1026,1239],"source":"      > [!IMPORTANT] >  Before you use this class to demand principal permission, you must set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy>."},{"content":"By default, the principal policy is set to &lt;xref:System.Security.Principal.PrincipalPolicy&gt;.","pos":[1240,1332],"source":" By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy>."},{"content":"If you do not set the principal policy to &lt;xref:System.Security.Principal.PrincipalPolicy&gt;, a demand for principal permission will fail.","pos":[1333,1469],"source":" If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy>, a demand for principal permission will fail."},{"content":"The following code should be executed before the principal permission is demanded: <ph id=\"ph1\">`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`</ph>","pos":[1470,1632],"source":" The following code should be executed before the principal permission is demanded: `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"}]},{"pos":[4978,5179],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[5192,5430],"content":"`Demand`, `InheritanceDemand`, and `LinkDemand` are the only values of <xref:System.Security.Permissions.SecurityAction> that have meaning for this attribute. Other actions do not apply to permissions that are not code access permissions.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`Demand`</ph>, <ph id=\"ph2\">`InheritanceDemand`</ph>, and <ph id=\"ph3\">`LinkDemand`</ph> are the only values of &lt;xref:System.Security.Permissions.SecurityAction&gt; that have meaning for this attribute.","pos":[0,158],"source":"`Demand`, `InheritanceDemand`, and `LinkDemand` are the only values of <xref:System.Security.Permissions.SecurityAction> that have meaning for this attribute."},{"content":"Other actions do not apply to permissions that are not code access permissions.","pos":[159,238]}]},{"pos":[6770,6852],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."},{"pos":[7414,7546],"content":"Gets or sets a value indicating whether the current principal has been authenticated by the underlying role-based security provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the current principal has been authenticated by the underlying role-based security provider.","pos":[0,132]}]},{"pos":[7668,7852],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current principal has been authenticated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal has been authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8441,8536],"content":"Creates and returns a new <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a new <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>."},{"pos":[8549,8863],"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,312],"nodes":[{"content":"This method should only be called by the security system, never by application code.","pos":[0,84]},{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[91,182]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[183,312]}]}]},{"pos":[9043,9149],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to this attribute.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> that corresponds to this attribute."},{"pos":[9677,9753],"content":"Gets or sets the name of the identity associated with the current principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the identity associated with the current principal.","pos":[0,76]}]},{"pos":[9765,10049],"content":"If the authentication provider is Windows NT, Name is the same as the user's Windows NT login name (in the form \"DomainName\\UserName\"). Check the documentation of your host to determine which authentication provider it uses and how it determines the identity of the current principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the authentication provider is Windows NT, Name is the same as the user's Windows NT login name (in the form \"DomainName\\UserName\"). Check the documentation of your host to determine which authentication provider it uses and how it determines the identity of the current principal.","pos":[0,284],"nodes":[{"content":"If the authentication provider is Windows NT, Name is the same as the user's Windows NT login name (in the form \"DomainName\\UserName\").","pos":[0,135]},{"content":"Check the documentation of your host to determine which authentication provider it uses and how it determines the identity of the current principal.","pos":[136,284]}]}]},{"pos":[10163,10248],"content":"A name to match against that provided by the underlying role-based security provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name to match against that provided by the underlying role-based security provider.","pos":[0,85]}]},{"pos":[10764,10817],"content":"Gets or sets membership in a specified security role.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets membership in a specified security role.","pos":[0,53]}]},{"pos":[10829,11158],"content":"The available roles will differ based on the authentication provider in use by the host. If the authentication provider is Windows NT, roles are Windows NT user groups (in the form \"DomainName\\GroupName\"). Check the documentation of your host to determine which authentication provider it uses and what roles users can belong to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The available roles will differ based on the authentication provider in use by the host. If the authentication provider is Windows NT, roles are Windows NT user groups (in the form \"DomainName\\GroupName\"). Check the documentation of your host to determine which authentication provider it uses and what roles users can belong to.","pos":[0,329],"nodes":[{"content":"The available roles will differ based on the authentication provider in use by the host.","pos":[0,88]},{"content":"If the authentication provider is Windows NT, roles are Windows NT user groups (in the form \"DomainName\\GroupName\").","pos":[89,205]},{"content":"Check the documentation of your host to determine which authentication provider it uses and what roles users can belong to.","pos":[206,329]}]}]},{"pos":[11272,11340],"content":"The name of a role from the underlying role-based security provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a role from the underlying role-based security provider.","pos":[0,68]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.PrincipalPermissionAttribute\n  id: PrincipalPermissionAttribute\n  children:\n  - System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.PrincipalPermissionAttribute.Authenticated\n  - System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission\n  - System.Security.Permissions.PrincipalPermissionAttribute.Name\n  - System.Security.Permissions.PrincipalPermissionAttribute.Role\n  langs:\n  - csharp\n  name: PrincipalPermissionAttribute\n  nameWithType: PrincipalPermissionAttribute\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute\n  type: Class\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"PrincipalPermissionAttribute can be used to declaratively demand that users running your code belong to a specified role or have been authenticated. Use of <xref:System.Security.Permissions.PermissionState> creates a <xref:System.Security.Permissions.PrincipalPermission> with <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> set to `true` and <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> and <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> set to `null`.  \\n  \\n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used. PrincipalPermissionAttribute cannot be applied at the assembly level.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \\n  \\n> [!IMPORTANT]\\n>  Before you use this class to demand principal permission, you must set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded: `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`\"\n  example:\n  - \"The following example demonstrates how the PrincipalPermissionAttribute class is used declaratively to demand that the current user be an administrator.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_17_1.cpp)]\\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_17_1.vb)]\\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_17_1.cs)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PrincipalPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  langs:\n  - csharp\n  name: PrincipalPermissionAttribute(SecurityAction)\n  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  remarks: '`Demand`, `InheritanceDemand`, and `LinkDemand` are the only values of <xref:System.Security.Permissions.SecurityAction> that have meaning for this attribute. Other actions do not apply to permissions that are not code access permissions.'\n  example:\n  - \"The following example demonstrates how to use the PrincipalPermissionAttribute constructor to demand that the current user be an administrator.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/b59d1850-818f-411e-9c11-_1.cpp)]\\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/b59d1850-818f-411e-9c11-_1.vb)]\\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/b59d1850-818f-411e-9c11-_1.cs)]\"\n  syntax:\n    content: public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated\n  id: Authenticated\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  langs:\n  - csharp\n  name: Authenticated\n  nameWithType: PrincipalPermissionAttribute.Authenticated\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether the current principal has been authenticated by the underlying role-based security provider.\n  syntax:\n    content: public bool Authenticated { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal has been authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: PrincipalPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>.\n  remarks: \"This method should only be called by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name\n  id: Name\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  langs:\n  - csharp\n  name: Name\n  nameWithType: PrincipalPermissionAttribute.Name\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the name of the identity associated with the current principal.\n  remarks: If the authentication provider is Windows NT, Name is the same as the user's Windows NT login name (in the form \"DomainName\\UserName\"). Check the documentation of your host to determine which authentication provider it uses and how it determines the identity of the current principal.\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: A name to match against that provided by the underlying role-based security provider.\n  overload: System.Security.Permissions.PrincipalPermissionAttribute.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role\n  id: Role\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  langs:\n  - csharp\n  name: Role\n  nameWithType: PrincipalPermissionAttribute.Role\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets membership in a specified security role.\n  remarks: The available roles will differ based on the authentication provider in use by the host. If the authentication provider is Windows NT, roles are Windows NT user groups (in the form \"DomainName\\GroupName\"). Check the documentation of your host to determine which authentication provider it uses and what roles users can belong to.\n  syntax:\n    content: public string Role { get; set; }\n    return:\n      type: System.String\n      description: The name of a role from the underlying role-based security provider.\n  overload: System.Security.Permissions.PrincipalPermissionAttribute.Role*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: PrincipalPermissionAttribute(SecurityAction)\n  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: Authenticated\n  nameWithType: PrincipalPermissionAttribute.Authenticated\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: PrincipalPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: Name\n  nameWithType: PrincipalPermissionAttribute.Name\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: Role\n  nameWithType: PrincipalPermissionAttribute.Role\n  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: PrincipalPermissionAttribute\n  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: Authenticated\n  nameWithType: PrincipalPermissionAttribute.Authenticated\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: PrincipalPermissionAttribute.CreatePermission\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name*\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: Name\n  nameWithType: PrincipalPermissionAttribute.Name\n- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role*\n  parent: System.Security.Permissions.PrincipalPermissionAttribute\n  isExternal: false\n  name: Role\n  nameWithType: PrincipalPermissionAttribute.Role\n"}