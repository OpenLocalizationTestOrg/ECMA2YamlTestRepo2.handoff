{"nodes":[{"pos":[1262,1362],"content":"Represents a security key that is generated using the RSA algorithm. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a security key that is generated using the RSA algorithm. This class cannot be inherited.","pos":[0,100],"nodes":[{"content":"Represents a security key that is generated using the RSA algorithm.","pos":[0,68]},{"content":"This class cannot be inherited.","pos":[69,100]}]}]},{"pos":[2145,2283],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.RsaSecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified RSA algorithm.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.RsaSecurityKey\"></xref> class using the specified RSA algorithm."},{"pos":[2463,2553],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents an RSA algorithm.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.RSA\"></xref> that represents an RSA algorithm."},{"pos":[2732,2813],"content":"<ph id=\"ph1\">&lt;code&gt;rsa&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rsa</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[3324,3361],"content":"Decrypts the specified encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrypts the specified encrypted key.","pos":[0,37]}]},{"pos":[3536,3796],"content":"The cryptographic algorithm that was used to encrypt the key. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm that was used to encrypt the key.","pos":[0,61]},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[62,260],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>."}]},{"pos":[3860,3923],"content":"An array of <xref:System.Byte> that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the encrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the encrypted key."}]},{"pos":[3981,4044],"content":"An array of <xref:System.Byte> that contains the decrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the decrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the decrypted key."}]},{"pos":[4274,4513],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[41,239],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>."}]},{"pos":[4616,4701],"content":"<ph id=\"ph1\">&lt;code&gt;keyData&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5212,5269],"content":"Encrypts the specified key using the specified algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encrypts the specified key using the specified algorithm.","pos":[0,57]}]},{"pos":[5444,5496],"content":"The cryptographic algorithm to encrypt the key with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm to encrypt the key with.","pos":[0,52]}]},{"pos":[5560,5613],"content":"An array of <xref:System.Byte> that contains the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the key.","pos":[0,53],"source":"An array of <xref:System.Byte> that contains the key."}]},{"pos":[5671,5734],"content":"An array of <xref:System.Byte> that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the encrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the encrypted key."}]},{"pos":[5964,6203],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[41,239],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>."}]},{"pos":[6306,6391],"content":"<ph id=\"ph1\">&lt;code&gt;keyData&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6967,7021],"content":"Gets the specified asymmetric cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the specified asymmetric cryptographic algorithm.","pos":[0,54]}]},{"pos":[7259,7294],"content":"The asymmetric algorithm to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asymmetric algorithm to create.","pos":[0,35]}]},{"pos":[7370,7561],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when a private key is required to create the algorithm; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when a private key is required to create the algorithm; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7654,7792],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the specified asymmetric cryptographic algorithm.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that represents the specified asymmetric cryptographic algorithm."},{"pos":[8034,8165],"content":"<ph id=\"ph1\">&lt;code&gt;requiresPrivateKey &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and a private key is not available.","needQuote":true,"needEscape":true,"source":"<code>requiresPrivateKey </code>is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and a private key is not available."},{"pos":[8717,8794],"content":"Gets a cryptographic algorithm that generates a hash for a digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a cryptographic algorithm that generates a hash for a digital signature.","pos":[0,77]}]},{"pos":[9007,9139],"content":"The hash algorithm. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm.","pos":[0,19]},{"content":"The supported algorithm is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[20,132],"source":" The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>."}]},{"pos":[9226,9337],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that generates hashes for digital signatures.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures."},{"pos":[9585,9738],"content":"<code>algorithm </code>is not supported. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm &lt;/code&gt;</ph>is not supported.","pos":[0,40],"source":"<code>algorithm </code>is not supported."},{"content":"The supported algorithm is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[41,153],"source":" The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>."}]},{"pos":[10265,10323],"content":"Gets the de-formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the de-formatter algorithm for the digital signature.","pos":[0,58]}]},{"pos":[10548,10736],"content":"The de-formatter algorithm for the digital signature to get an instance of. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The de-formatter algorithm for the digital signature to get an instance of.","pos":[0,75]},{"content":"The supported algorithm is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[76,188],"source":" The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>."}]},{"pos":[10840,10993],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the de-formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the de-formatter algorithm for the digital signature."},{"pos":[11236,11389],"content":"<code>algorithm </code>is not supported. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm &lt;/code&gt;</ph>is not supported.","pos":[0,40],"source":"<code>algorithm </code>is not supported."},{"content":"The supported algorithm is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[41,153],"source":" The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>."}]},{"pos":[11906,11961],"content":"Gets the formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the formatter algorithm for the digital signature.","pos":[0,55]}]},{"pos":[12182,12367],"content":"The formatter algorithm for the digital signature to get an instance of. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatter algorithm for the digital signature to get an instance of.","pos":[0,72]},{"content":"The supported algorithm is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[73,185],"source":" The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>."}]},{"pos":[12469,12619],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the formatter algorithm for the digital signature."},{"pos":[12860,13013],"content":"<code>algorithm </code>is not supported. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm &lt;/code&gt;</ph>is not supported.","pos":[0,40],"source":"<code>algorithm </code>is not supported."},{"content":"The supported algorithm is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[41,153],"source":" The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>."}]},{"pos":[13442,13507],"content":"Gets a value that indicates whether the private key is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the private key is available.","pos":[0,65]}]},{"pos":[13647,13817],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the private key is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the private key is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14421,14502],"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","pos":[0,81]}]},{"pos":[14670,14698],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[14757,14943],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm uses asymmetric keys; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses asymmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15550,15637],"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","pos":[0,87]}]},{"pos":[15804,15832],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[15891,16314],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm is <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, or <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16920,17000],"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","pos":[0,80]}]},{"pos":[17167,17195],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[17254,17439],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm uses symmetric keys; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses symmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17928,17963],"content":"Gets the size, in bits, of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size, in bits, of the key.","pos":[0,35]}]},{"pos":[17975,18320],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed. It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed. It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[0,345],"nodes":[{"content":"The &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.","pos":[0,206],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed."},{"content":"It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[207,345]}]}]},{"pos":[18437,18467],"content":"The size, in bits, of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bits, of the key.","pos":[0,30]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.RsaSecurityKey\n  id: RsaSecurityKey\n  children:\n  - System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)\n  - System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  - System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)\n  - System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)\n  - System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)\n  - System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey\n  - System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.RsaSecurityKey.KeySize\n  langs:\n  - csharp\n  name: RsaSecurityKey\n  nameWithType: RsaSecurityKey\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey\n  type: Class\n  summary: Represents a security key that is generated using the RSA algorithm. This class cannot be inherited.\n  syntax:\n    content: 'public sealed class RsaSecurityKey : System.IdentityModel.Tokens.AsymmetricSecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)\n  id: '#ctor(System.Security.Cryptography.RSA)'\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: RsaSecurityKey(RSA)\n  nameWithType: RsaSecurityKey.RsaSecurityKey(RSA)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.RsaSecurityKey(RSA)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.RsaSecurityKey\"></xref> class using the specified RSA algorithm.\n  syntax:\n    content: public RsaSecurityKey (System.Security.Cryptography.RSA rsa);\n    parameters:\n    - id: rsa\n      type: System.Security.Cryptography.RSA\n      description: An <xref href=\"System.Security.Cryptography.RSA\"></xref> that represents an RSA algorithm.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rsa</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])\n  id: DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: DecryptKey(String,Byte[])\n  nameWithType: RsaSecurityKey.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Decrypts the specified encrypted key.\n  syntax:\n    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm that was used to encrypt the key. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the encrypted key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the decrypted key.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])\n  id: EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: EncryptKey(String,Byte[])\n  nameWithType: RsaSecurityKey.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Encrypts the specified key using the specified algorithm.\n  syntax:\n    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to encrypt the key with.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the encrypted key.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref> and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  id: GetAsymmetricAlgorithm(System.String,System.Boolean)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: GetAsymmetricAlgorithm(String,Boolean)\n  nameWithType: RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the specified asymmetric cryptographic algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool requiresPrivateKey);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The asymmetric algorithm to create.\n    - id: requiresPrivateKey\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when a private key is required to create the algorithm; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that represents the specified asymmetric cryptographic algorithm.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>requiresPrivateKey </code>is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and a private key is not available.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)\n  id: GetHashAlgorithmForSignature(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: GetHashAlgorithmForSignature(String)\n  nameWithType: RsaSecurityKey.GetHashAlgorithmForSignature(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a cryptographic algorithm that generates a hash for a digital signature.\n  syntax:\n    content: public override System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The hash algorithm. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>algorithm </code>is not supported. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)\n  id: GetSignatureDeformatter(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: GetSignatureDeformatter(String)\n  nameWithType: RsaSecurityKey.GetSignatureDeformatter(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the de-formatter algorithm for the digital signature.\n  syntax:\n    content: public override System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The de-formatter algorithm for the digital signature to get an instance of. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.\n    return:\n      type: System.Security.Cryptography.AsymmetricSignatureDeformatter\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the de-formatter algorithm for the digital signature.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>algorithm </code>is not supported. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)\n  id: GetSignatureFormatter(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: GetSignatureFormatter(String)\n  nameWithType: RsaSecurityKey.GetSignatureFormatter(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the formatter algorithm for the digital signature.\n  syntax:\n    content: public override System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The formatter algorithm for the digital signature to get an instance of. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.\n    return:\n      type: System.Security.Cryptography.AsymmetricSignatureFormatter\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the formatter algorithm for the digital signature.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>algorithm </code>is not supported. The supported algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey\n  id: HasPrivateKey\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: HasPrivateKey()\n  nameWithType: RsaSecurityKey.HasPrivateKey()\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the private key is available.\n  syntax:\n    content: public override bool HasPrivateKey ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the private key is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)\n  id: IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: RsaSecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm uses asymmetric keys.\n  syntax:\n    content: public override bool IsAsymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses asymmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)\n  id: IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: IsSupportedAlgorithm(String)\n  nameWithType: RsaSecurityKey.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm is supported by this class.\n  syntax:\n    content: public override bool IsSupportedAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)\n  id: IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: RsaSecurityKey.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm uses symmetric keys.\n  syntax:\n    content: public override bool IsSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses symmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.KeySize\n  id: KeySize\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: RsaSecurityKey.KeySize\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.KeySize\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the size, in bits, of the key.\n  remarks: The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed. It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the key.\n  overload: System.IdentityModel.Tokens.RsaSecurityKey.KeySize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: System.IdentityModel.Tokens.AsymmetricSecurityKey\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: RsaSecurityKey(RSA)\n  nameWithType: RsaSecurityKey.RsaSecurityKey(RSA)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.RsaSecurityKey(RSA)\n- uid: System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  nameWithType: RSA\n  fullName: System.Security.Cryptography.RSA\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: DecryptKey(String,Byte[])\n  nameWithType: RsaSecurityKey.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(String,Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: EncryptKey(String,Byte[])\n  nameWithType: RsaSecurityKey.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(String,Byte[])\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetAsymmetricAlgorithm(String,Boolean)\n  nameWithType: RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetHashAlgorithmForSignature(String)\n  nameWithType: RsaSecurityKey.GetHashAlgorithmForSignature(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(String)\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetSignatureDeformatter(String)\n  nameWithType: RsaSecurityKey.GetSignatureDeformatter(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(String)\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetSignatureFormatter(String)\n  nameWithType: RsaSecurityKey.GetSignatureFormatter(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(String)\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: HasPrivateKey()\n  nameWithType: RsaSecurityKey.HasPrivateKey()\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey()\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: RsaSecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: RsaSecurityKey.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: RsaSecurityKey.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: RsaSecurityKey.KeySize\n  fullName: System.IdentityModel.Tokens.RsaSecurityKey.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: RsaSecurityKey\n  nameWithType: RsaSecurityKey.RsaSecurityKey\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: DecryptKey\n  nameWithType: RsaSecurityKey.DecryptKey\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: EncryptKey\n  nameWithType: RsaSecurityKey.EncryptKey\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetAsymmetricAlgorithm\n  nameWithType: RsaSecurityKey.GetAsymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetHashAlgorithmForSignature\n  nameWithType: RsaSecurityKey.GetHashAlgorithmForSignature\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetSignatureDeformatter\n  nameWithType: RsaSecurityKey.GetSignatureDeformatter\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: GetSignatureFormatter\n  nameWithType: RsaSecurityKey.GetSignatureFormatter\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: HasPrivateKey\n  nameWithType: RsaSecurityKey.HasPrivateKey\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm\n  nameWithType: RsaSecurityKey.IsAsymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm\n  nameWithType: RsaSecurityKey.IsSupportedAlgorithm\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm\n  nameWithType: RsaSecurityKey.IsSymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.RsaSecurityKey.KeySize*\n  parent: System.IdentityModel.Tokens.RsaSecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: RsaSecurityKey.KeySize\n"}