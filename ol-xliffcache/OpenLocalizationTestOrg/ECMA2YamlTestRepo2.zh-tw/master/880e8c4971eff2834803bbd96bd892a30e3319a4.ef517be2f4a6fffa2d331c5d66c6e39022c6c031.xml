{"nodes":[{"pos":[946,980],"content":"Defines a set of logical counters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a set of logical counters.","pos":[0,34]}]},{"pos":[992,1184],"content":"Call the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method when you are finished to remove your provider's registration and to release all managed and unmanaged resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Call the &lt;xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A&gt; method when you are finished to remove your provider's registration and to release all managed and unmanaged resources.","pos":[0,192],"source":"Call the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method when you are finished to remove your provider's registration and to release all managed and unmanaged resources."}]},{"pos":[2094,2201],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.PerformanceData.CounterSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.PerformanceData.CounterSet\"></xref> class."},{"pos":[2213,2346],"content":"Registers your provider. Calling the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method removes the registration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers your provider. Calling the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method removes the registration.","pos":[0,133],"nodes":[{"content":"Registers your provider.","pos":[0,24]},{"content":"Calling the &lt;xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A&gt; method removes the registration.","pos":[25,133],"source":" Calling the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method removes the registration."}]}]},{"pos":[2662,2765],"content":"Guid that uniquely identifies the provider of the counter data. Use the Guid specified in the manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid that uniquely identifies the provider of the counter data. Use the Guid specified in the manifest.","pos":[0,103],"nodes":[{"content":"Guid that uniquely identifies the provider of the counter data.","pos":[0,63]},{"content":"Use the Guid specified in the manifest.","pos":[64,103]}]}]},{"pos":[2834,2935],"content":"Guid that uniquely identifies the counter set for a provider. Use the Guid specified in the manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid that uniquely identifies the counter set for a provider. Use the Guid specified in the manifest.","pos":[0,101],"nodes":[{"content":"Guid that uniquely identifies the counter set for a provider.","pos":[0,61]},{"content":"Use the Guid specified in the manifest.","pos":[62,101]}]}]},{"pos":[3048,3170],"content":"Identifies the type of the counter set, for example, whether the counter set is a single or multiple instance counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the type of the counter set, for example, whether the counter set is a single or multiple instance counter set.","pos":[0,122]}]},{"pos":[3364,3421],"content":"Not enough memory is available to complete the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not enough memory is available to complete the operation.","pos":[0,57]}]},{"pos":[3540,3577],"content":"Not supported prior to Windows Vista.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not supported prior to Windows Vista.","pos":[0,37]}]},{"pos":[3672,3715],"content":"One of the parameters is NULL or not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the parameters is NULL or not valid.","pos":[0,43]}]},{"pos":[3834,3875],"content":"An underlying Win32 function call failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An underlying Win32 function call failed.","pos":[0,41]}]},{"pos":[4465,4550],"content":"Adds a counter to the counter set by using the specified counter identifier and type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a counter to the counter set by using the specified counter identifier and type.","pos":[0,85]}]},{"pos":[4562,4650],"content":"You must add counters to the counter set before creating an instance of the counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"You must add counters to the counter set before creating an instance of the counter set.","pos":[0,88]}]},{"pos":[4854,4949],"content":"Identifies the counter. Use the same value that you used in the manifest to define the counter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the counter. Use the same value that you used in the manifest to define the counter.","pos":[0,95],"nodes":[{"content":"Identifies the counter.","pos":[0,23]},{"content":"Use the same value that you used in the manifest to define the counter.","pos":[24,95]}]}]},{"pos":[5050,5167],"content":"Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed.","pos":[0,117],"nodes":[{"content":"Identifies the counter type.","pos":[0,28]},{"content":"The counter type determines how the counter data is calculated, averaged, and displayed.","pos":[29,117]}]}]},{"pos":[5346,5452],"content":"The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.","pos":[0,106]}]},{"pos":[5563,5652],"content":"You cannot add counters to the counter set after creating an instance of the counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"You cannot add counters to the counter set after creating an instance of the counter set.","pos":[0,89]}]},{"pos":[6291,6411],"content":"Adds a counter to the counter set by using the specified counter identifier and type and a display name for the counter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a counter to the counter set by using the specified counter identifier and type and a display name for the counter.","pos":[0,120]}]},{"pos":[6423,6511],"content":"You must add counters to the counter set before creating an instance of the counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"You must add counters to the counter set before creating an instance of the counter set.","pos":[0,88]}]},{"pos":[6813,6908],"content":"Identifies the counter. Use the same value that you used in the manifest to define the counter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the counter. Use the same value that you used in the manifest to define the counter.","pos":[0,95],"nodes":[{"content":"Identifies the counter.","pos":[0,23]},{"content":"Use the same value that you used in the manifest to define the counter.","pos":[24,95]}]}]},{"pos":[7009,7126],"content":"Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed.","pos":[0,117],"nodes":[{"content":"Identifies the counter type.","pos":[0,28]},{"content":"The counter type determines how the counter data is calculated, averaged, and displayed.","pos":[29,117]}]}]},{"pos":[7194,7407],"content":"Name of the counter. You can use this name to index the counter in the counter set instance. (See &lt;xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName&gt;.)","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the counter. You can use this name to index the counter in the counter set instance. (See &lt;xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName&gt;.)","pos":[0,213],"nodes":[{"content":"Name of the counter.","pos":[0,20]},{"content":"You can use this name to index the counter in the counter set instance.","pos":[21,92]},{"content":"(See <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.)","pos":[93,213],"source":" (See &lt;xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName&gt;.)"}]}]},{"pos":[7586,7692],"content":"The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.","pos":[0,106]}]},{"pos":[7803,7892],"content":"You cannot add counters to the counter set after creating an instance of the counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"You cannot add counters to the counter set after creating an instance of the counter set.","pos":[0,89]}]},{"pos":[8427,8466],"content":"Creates an instance of the counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of the counter set.","pos":[0,39]}]},{"pos":[8479,9238],"content":"Call this method one time for single-instance counter sets and one or more times for multiple-instance counter sets.       The provider determines when it creates an instance. If the counter data is more static, the provider can create an instance at initialization time. For example, the number of processors on a computer would be considered static, so a provider that provides counter data for processors could create an instance for each processor on the computer at initialization time. For counters that are more dynamic, such as disk or process counters, the providers would create the new instances in response to a new USB device being added or a new process being created.       The provider should keep the counter data up-to-date at all times.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call this method one time for single-instance counter sets and one or more times for multiple-instance counter sets.       The provider determines when it creates an instance. If the counter data is more static, the provider can create an instance at initialization time. For example, the number of processors on a computer would be considered static, so a provider that provides counter data for processors could create an instance for each processor on the computer at initialization time. For counters that are more dynamic, such as disk or process counters, the providers would create the new instances in response to a new USB device being added or a new process being created.       The provider should keep the counter data up-to-date at all times.","pos":[0,755],"nodes":[{"content":"Call this method one time for single-instance counter sets and one or more times for multiple-instance counter sets.","pos":[0,116]},{"content":"The provider determines when it creates an instance.","pos":[123,175]},{"content":"If the counter data is more static, the provider can create an instance at initialization time.","pos":[176,271]},{"content":"For example, the number of processors on a computer would be considered static, so a provider that provides counter data for processors could create an instance for each processor on the computer at initialization time.","pos":[272,491]},{"content":"For counters that are more dynamic, such as disk or process counters, the providers would create the new instances in response to a new USB device being added or a new process being created.","pos":[492,682]},{"content":"The provider should keep the counter data up-to-date at all times.","pos":[689,755]}]}]},{"pos":[9534,9580],"content":"Name of the instance. The name must be unique.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the instance. The name must be unique.","pos":[0,46],"nodes":[{"content":"Name of the instance.","pos":[0,21]},{"content":"The name must be unique.","pos":[22,46]}]}]},{"pos":[9678,9745],"content":"An instance of the counter set which will contain the counter data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the counter set which will contain the counter data.","pos":[0,67]}]},{"pos":[9938,9964],"content":"The instance name is NULL.","needQuote":true,"needEscape":true,"nodes":[{"content":"The instance name is NULL.","pos":[0,26]}]},{"pos":[10075,10163],"content":"You must add counters to the counter set before creating an instance of the counter set.","needQuote":true,"needEscape":true,"nodes":[{"content":"You must add counters to the counter set before creating an instance of the counter set.","pos":[0,88]}]},{"pos":[10565,10618],"content":"Releases all unmanaged resources used by this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases all unmanaged resources used by this object.","pos":[0,53]}]},{"pos":[11223,11321],"content":"Releases all unmanaged resources used by this object and optionally release the managed resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases all unmanaged resources used by this object and optionally release the managed resources.","pos":[0,98]}]},{"pos":[11476,11673],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this was called from the Dispose method, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if called from the finalizer.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if this was called from the Dispose method, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> if called from the finalizer."},{"pos":[12164,12233],"content":"Frees resources before the object is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Frees resources before the object is reclaimed by garbage collection.","pos":[0,69]}]},{"pos":[12245,12296],"content":"This method is called automatically by the runtime.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called automatically by the runtime.","pos":[0,51]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.PerformanceData.CounterSet\n  id: CounterSet\n  children:\n  - System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)\n  - System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)\n  - System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)\n  - System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)\n  - System.Diagnostics.PerformanceData.CounterSet.Dispose\n  - System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)\n  - System.Diagnostics.PerformanceData.CounterSet.Finalize\n  langs:\n  - csharp\n  name: CounterSet\n  nameWithType: CounterSet\n  fullName: System.Diagnostics.PerformanceData.CounterSet\n  type: Class\n  summary: Defines a set of logical counters.\n  remarks: Call the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method when you are finished to remove your provider's registration and to release all managed and unmanaged resources.\n  example:\n  - For an example, see <xref:System.Diagnostics.PerformanceData>.\n  syntax:\n    content: 'public class CounterSet : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)\n  id: '#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)'\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: CounterSet(Guid,Guid,CounterSetInstanceType)\n  nameWithType: CounterSet.CounterSet(Guid,Guid,CounterSetInstanceType)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.CounterSet(Guid,Guid,CounterSetInstanceType)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.PerformanceData.CounterSet\"></xref> class.\n  remarks: Registers your provider. Calling the <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> method removes the registration.\n  example:\n  - For an example, see <xref:System.Diagnostics.PerformanceData>.\n  syntax:\n    content: public CounterSet (Guid providerGuid, Guid counterSetGuid, System.Diagnostics.PerformanceData.CounterSetInstanceType instanceType);\n    parameters:\n    - id: providerGuid\n      type: System.Guid\n      description: Guid that uniquely identifies the provider of the counter data. Use the Guid specified in the manifest.\n    - id: counterSetGuid\n      type: System.Guid\n      description: Guid that uniquely identifies the counter set for a provider. Use the Guid specified in the manifest.\n    - id: instanceType\n      type: System.Diagnostics.PerformanceData.CounterSetInstanceType\n      description: Identifies the type of the counter set, for example, whether the counter set is a single or multiple instance counter set.\n  overload: System.Diagnostics.PerformanceData.CounterSet.#ctor*\n  exceptions:\n  - type: System.InsufficientMemoryException\n    commentId: T:System.InsufficientMemoryException\n    description: Not enough memory is available to complete the operation.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Not supported prior to Windows Vista.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One of the parameters is NULL or not valid.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: An underlying Win32 function call failed.\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)\n  id: AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: AddCounter(Int32,CounterType)\n  nameWithType: CounterSet.AddCounter(Int32,CounterType)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.AddCounter(Int32,CounterType)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Adds a counter to the counter set by using the specified counter identifier and type.\n  remarks: You must add counters to the counter set before creating an instance of the counter set.\n  syntax:\n    content: public void AddCounter (int counterId, System.Diagnostics.PerformanceData.CounterType counterType);\n    parameters:\n    - id: counterId\n      type: System.Int32\n      description: Identifies the counter. Use the same value that you used in the manifest to define the counter.\n    - id: counterType\n      type: System.Diagnostics.PerformanceData.CounterType\n      description: Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed.\n  overload: System.Diagnostics.PerformanceData.CounterSet.AddCounter*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: You cannot add counters to the counter set after creating an instance of the counter set.\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)\n  id: AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: AddCounter(Int32,CounterType,String)\n  nameWithType: CounterSet.AddCounter(Int32,CounterType,String)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.AddCounter(Int32,CounterType,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Adds a counter to the counter set by using the specified counter identifier and type and a display name for the counter.\n  remarks: You must add counters to the counter set before creating an instance of the counter set.\n  example:\n  - For an example, see <xref:System.Diagnostics.PerformanceData>.\n  syntax:\n    content: public void AddCounter (int counterId, System.Diagnostics.PerformanceData.CounterType counterType, string counterName);\n    parameters:\n    - id: counterId\n      type: System.Int32\n      description: Identifies the counter. Use the same value that you used in the manifest to define the counter.\n    - id: counterType\n      type: System.Diagnostics.PerformanceData.CounterType\n      description: Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed.\n    - id: counterName\n      type: System.String\n      description: Name of the counter. You can use this name to index the counter in the counter set instance. (See &lt;xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName&gt;.)\n  overload: System.Diagnostics.PerformanceData.CounterSet.AddCounter*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: You cannot add counters to the counter set after creating an instance of the counter set.\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)\n  id: CreateCounterSetInstance(System.String)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: CreateCounterSetInstance(String)\n  nameWithType: CounterSet.CreateCounterSetInstance(String)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Creates an instance of the counter set.\n  remarks: \"Call this method one time for single-instance counter sets and one or more times for multiple-instance counter sets.  \\n  \\n The provider determines when it creates an instance. If the counter data is more static, the provider can create an instance at initialization time. For example, the number of processors on a computer would be considered static, so a provider that provides counter data for processors could create an instance for each processor on the computer at initialization time. For counters that are more dynamic, such as disk or process counters, the providers would create the new instances in response to a new USB device being added or a new process being created.  \\n  \\n The provider should keep the counter data up-to-date at all times.\"\n  example:\n  - For an example, see <xref:System.Diagnostics.PerformanceData>.\n  syntax:\n    content: public System.Diagnostics.PerformanceData.CounterSetInstance CreateCounterSetInstance (string instanceName);\n    parameters:\n    - id: instanceName\n      type: System.String\n      description: Name of the instance. The name must be unique.\n    return:\n      type: System.Diagnostics.PerformanceData.CounterSetInstance\n      description: An instance of the counter set which will contain the counter data.\n  overload: System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The instance name is NULL.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: You must add counters to the counter set before creating an instance of the counter set.\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.Dispose\n  id: Dispose\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CounterSet.Dispose()\n  fullName: System.Diagnostics.PerformanceData.CounterSet.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Releases all unmanaged resources used by this object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.PerformanceData.CounterSet.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: CounterSet.Dispose(Boolean)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Releases all unmanaged resources used by this object and optionally release the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if this was called from the Dispose method, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> if called from the finalizer.\n  overload: System.Diagnostics.PerformanceData.CounterSet.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterSet.Finalize\n  id: Finalize\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: CounterSet.Finalize()\n  fullName: System.Diagnostics.PerformanceData.CounterSet.Finalize()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Frees resources before the object is reclaimed by garbage collection.\n  remarks: This method is called automatically by the runtime.\n  syntax:\n    content: ~CounterSet ();\n    parameters: []\n  overload: System.Diagnostics.PerformanceData.CounterSet.Finalize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InsufficientMemoryException\n  parent: System\n  isExternal: false\n  name: InsufficientMemoryException\n  nameWithType: InsufficientMemoryException\n  fullName: System.InsufficientMemoryException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ComponentModel.Win32Exception\n  parent: System.ComponentModel\n  isExternal: false\n  name: Win32Exception\n  nameWithType: Win32Exception\n  fullName: System.ComponentModel.Win32Exception\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: CounterSet(Guid,Guid,CounterSetInstanceType)\n  nameWithType: CounterSet.CounterSet(Guid,Guid,CounterSetInstanceType)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.CounterSet(Guid,Guid,CounterSetInstanceType)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.PerformanceData.CounterSetInstanceType\n  parent: System.Diagnostics.PerformanceData\n  isExternal: false\n  name: CounterSetInstanceType\n  nameWithType: CounterSetInstanceType\n  fullName: System.Diagnostics.PerformanceData.CounterSetInstanceType\n- uid: System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: AddCounter(Int32,CounterType)\n  nameWithType: CounterSet.AddCounter(Int32,CounterType)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.AddCounter(Int32,CounterType)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.PerformanceData.CounterType\n  parent: System.Diagnostics.PerformanceData\n  isExternal: false\n  name: CounterType\n  nameWithType: CounterType\n  fullName: System.Diagnostics.PerformanceData.CounterType\n- uid: System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: AddCounter(Int32,CounterType,String)\n  nameWithType: CounterSet.AddCounter(Int32,CounterType,String)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.AddCounter(Int32,CounterType,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: CreateCounterSetInstance(String)\n  nameWithType: CounterSet.CreateCounterSetInstance(String)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(String)\n- uid: System.Diagnostics.PerformanceData.CounterSetInstance\n  parent: System.Diagnostics.PerformanceData\n  isExternal: false\n  name: CounterSetInstance\n  nameWithType: CounterSetInstance\n  fullName: System.Diagnostics.PerformanceData.CounterSetInstance\n- uid: System.Diagnostics.PerformanceData.CounterSet.Dispose\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: Dispose()\n  nameWithType: CounterSet.Dispose()\n  fullName: System.Diagnostics.PerformanceData.CounterSet.Dispose()\n- uid: System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CounterSet.Dispose(Boolean)\n  fullName: System.Diagnostics.PerformanceData.CounterSet.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.PerformanceData.CounterSet.Finalize\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: Finalize()\n  nameWithType: CounterSet.Finalize()\n  fullName: System.Diagnostics.PerformanceData.CounterSet.Finalize()\n- uid: System.Diagnostics.PerformanceData.CounterSet.#ctor*\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: CounterSet\n  nameWithType: CounterSet.CounterSet\n- uid: System.Diagnostics.PerformanceData.CounterSet.AddCounter*\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: AddCounter\n  nameWithType: CounterSet.AddCounter\n- uid: System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance*\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: CreateCounterSetInstance\n  nameWithType: CounterSet.CreateCounterSetInstance\n- uid: System.Diagnostics.PerformanceData.CounterSet.Dispose*\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: Dispose\n  nameWithType: CounterSet.Dispose\n- uid: System.Diagnostics.PerformanceData.CounterSet.Finalize*\n  parent: System.Diagnostics.PerformanceData.CounterSet\n  isExternal: false\n  name: Finalize\n  nameWithType: CounterSet.Finalize\n"}