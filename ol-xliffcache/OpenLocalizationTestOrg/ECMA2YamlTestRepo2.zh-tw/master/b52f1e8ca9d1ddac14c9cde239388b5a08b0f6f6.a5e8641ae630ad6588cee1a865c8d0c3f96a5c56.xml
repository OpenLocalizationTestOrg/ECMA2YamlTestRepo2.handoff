{"nodes":[{"pos":[810,872],"content":"Defines the basic operations of cryptographic transformations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the basic operations of cryptographic transformations.","pos":[0,62]}]},{"pos":[884,1000],"content":"Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>).","needQuote":true,"needEscape":true,"nodes":[{"content":"Hash algorithms are an example of cryptographic transformations (&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;).","pos":[0,116],"source":"Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>)."}]},{"pos":[1619,1687],"content":"Gets a value indicating whether the current transform can be reused.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]},{"pos":[1808,1983],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current transform can be reused; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current transform can be reused; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[2567,2634],"content":"Gets a value indicating whether multiple blocks can be transformed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether multiple blocks can be transformed.","pos":[0,67]}]},{"pos":[2764,2938],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if multiple blocks can be transformed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3471,3497],"content":"Gets the input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the input block size.","pos":[0,26]}]},{"pos":[3612,3655],"content":"The size of the input data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the input data blocks in bytes.","pos":[0,43]}]},{"pos":[4181,4208],"content":"Gets the output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the output block size.","pos":[0,27]}]},{"pos":[4324,4368],"content":"The size of the output data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the output data blocks in bytes.","pos":[0,44]}]},{"pos":[5123,5263],"content":"Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.","pos":[0,140]}]},{"pos":[5490,5535],"content":"The input for which to compute the transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input for which to compute the transform.","pos":[0,45]}]},{"pos":[5602,5670],"content":"The offset into the input byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the input byte array from which to begin using data.","pos":[0,68]}]},{"pos":[5736,5795],"content":"The number of bytes in the input byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]},{"pos":[5864,5907],"content":"The output to which to write the transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output to which to write the transform.","pos":[0,43]}]},{"pos":[5975,6046],"content":"The offset into the output byte array from which to begin writing data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the output byte array from which to begin writing data.","pos":[0,71]}]},{"pos":[6103,6131],"content":"The number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes written.","pos":[0,28]}]},{"pos":[6817,6877],"content":"Transforms the specified region of the specified byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms the specified region of the specified byte array.","pos":[0,60]}]},{"pos":[6889,7204],"content":"TransformFinalBlock is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","pos":[0,315],"nodes":[{"content":"TransformFinalBlock is a special function for transforming the last block or a partial block in the stream.","pos":[0,107]},{"content":"It returns a new array that contains the remaining transformed bytes.","pos":[108,177]},{"content":"A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.","pos":[178,315]}]}]},{"pos":[7400,7445],"content":"The input for which to compute the transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input for which to compute the transform.","pos":[0,45]}]},{"pos":[7512,7574],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[7640,7693],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[7751,7774],"content":"The computed transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed transform.","pos":[0,23]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ICryptoTransform\n  id: ICryptoTransform\n  children:\n  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  type: Interface\n  summary: Defines the basic operations of cryptographic transformations.\n  remarks: Hash algorithms are an example of cryptographic transformations (<xref:System.Security.Cryptography.HashAlgorithm>).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ICryptoTransform : IDisposable\n  implements:\n  - System.IDisposable\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  syntax:\n    content: public bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current transform can be reused; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether multiple blocks can be transformed.\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the input data blocks in bytes.\n  overload: System.Security.Cryptography.ICryptoTransform.InputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output data blocks in bytes.\n  overload: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input for which to compute the transform.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to which to write the transform.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.ICryptoTransform.TransformBlock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Transforms the specified region of the specified byte array.\n  remarks: TransformFinalBlock is a special function for transforming the last block or a partial block in the stream. It returns a new array that contains the remaining transformed bytes. A new array is returned, because the amount of information returned at the end might be larger than a single block when padding is added.\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input for which to compute the transform.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed transform.\n  overload: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: ICryptoTransform.TransformBlock\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: ICryptoTransform.TransformFinalBlock\n"}