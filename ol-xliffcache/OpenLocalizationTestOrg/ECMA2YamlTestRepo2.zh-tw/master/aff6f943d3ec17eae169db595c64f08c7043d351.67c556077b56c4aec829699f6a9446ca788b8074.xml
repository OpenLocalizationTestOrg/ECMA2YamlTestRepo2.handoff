{"nodes":[{"pos":[376,588],"content":"Represents the method that will handle the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event of the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Represents the method that will handle the <xref href=\"System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing\"></xref> event of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control."},{"pos":[601,1051],"content":"When you create an ObjectDataSourceDisposingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"nodes":[{"content":"When you create an ObjectDataSourceDisposingEventHandler delegate, you identify the method that will handle the event.","pos":[0,118]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[119,212]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[213,299]},{"content":"For more information about event handler delegates, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[300,450],"source":" For more information about event handler delegates, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\n  id: ObjectDataSourceDisposingEventHandler\n  langs:\n  - csharp\n  name: ObjectDataSourceDisposingEventHandler\n  nameWithType: ObjectDataSourceDisposingEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\n  type: Delegate\n  summary: Represents the method that will handle the <xref href=\"System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing\"></xref> event of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control.\n  remarks: 'When you create an ObjectDataSourceDisposingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides an example middle-tier business object that the first code example uses.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive (in terms of time or resources) to create for every data operation that your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache first for an object, and then create an instance, only if one is not already cached. Then, handle the  <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> class is set to `true`, to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> on the instance.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_7_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_7_1.aspx)]  \\n  \\n The following code example provides an example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a class that maintains state and encapsulates business logic. For a complete working example, you must compile this code as a library, and then use these classes from an ASP page.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_7_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_7_2.vb)]\"\n  syntax:\n    content: public delegate void ObjectDataSourceDisposingEventHandler(object sender, ObjectDataSourceDisposingEventArgs e);\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}