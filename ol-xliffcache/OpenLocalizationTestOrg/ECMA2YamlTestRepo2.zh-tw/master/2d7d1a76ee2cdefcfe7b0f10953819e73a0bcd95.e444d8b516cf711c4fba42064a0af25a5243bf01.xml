{"nodes":[{"pos":[3095,3158],"content":"Represents a configuration element within a configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a configuration element within a configuration file.","pos":[0,63]}]},{"pos":[3171,4541],"content":"The ConfigurationElement is an abstract class that is used to represent an XML element in a configuration file (such as Web.config). An element in a configuration file can contain zero, one, or more child elements.       Because the ConfigurationElement class is defined as abstract, you cannot create an instance of it. You can only derive classes from it. The .NET Framework includes classes that derive from the ConfigurationElement class in order to represent standard XML configuration elements, such as <xref:System.Configuration.ConfigurationSection>. You can also extend the ConfigurationElement class to access custom configuration elements and sections. The example included later in this topic shows how to access custom configuration elements and sections by using custom classes that derive from ConfigurationElement.       You can also extend the standard configuration types such as ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection>. For more information, see the documentation for those classes.       For more information about how to access information in configuration files, see the <xref:System.Configuration.ConfigurationManager> class and the <xref:System.Web.Configuration.WebConfigurationManager> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ConfigurationElement is an abstract class that is used to represent an XML element in a configuration file (such as Web.config). An element in a configuration file can contain zero, one, or more child elements.       Because the ConfigurationElement class is defined as abstract, you cannot create an instance of it. You can only derive classes from it. The .NET Framework includes classes that derive from the ConfigurationElement class in order to represent standard XML configuration elements, such as <xref:System.Configuration.ConfigurationSection>. You can also extend the ConfigurationElement class to access custom configuration elements and sections. The example included later in this topic shows how to access custom configuration elements and sections by using custom classes that derive from ConfigurationElement.       You can also extend the standard configuration types such as ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection>. For more information, see the documentation for those classes.       For more information about how to access information in configuration files, see the <xref:System.Configuration.ConfigurationManager> class and the <xref:System.Web.Configuration.WebConfigurationManager> class.","pos":[0,1364],"nodes":[{"content":"The ConfigurationElement is an abstract class that is used to represent an XML element in a configuration file (such as Web.config).","pos":[0,132]},{"content":"An element in a configuration file can contain zero, one, or more child elements.","pos":[133,214]},{"content":"Because the ConfigurationElement class is defined as abstract, you cannot create an instance of it.","pos":[221,320]},{"content":"You can only derive classes from it.","pos":[321,357]},{"content":"The .NET Framework includes classes that derive from the ConfigurationElement class in order to represent standard XML configuration elements, such as &lt;xref:System.Configuration.ConfigurationSection&gt;.","pos":[358,558],"source":" The .NET Framework includes classes that derive from the ConfigurationElement class in order to represent standard XML configuration elements, such as <xref:System.Configuration.ConfigurationSection>."},{"content":"You can also extend the ConfigurationElement class to access custom configuration elements and sections.","pos":[559,663]},{"content":"The example included later in this topic shows how to access custom configuration elements and sections by using custom classes that derive from ConfigurationElement.","pos":[664,830]},{"content":"You can also extend the standard configuration types such as ConfigurationElement, &lt;xref:System.Configuration.ConfigurationElementCollection&gt;, &lt;xref:System.Configuration.ConfigurationProperty&gt;, and &lt;xref:System.Configuration.ConfigurationSection&gt;.","pos":[837,1084],"source":"       You can also extend the standard configuration types such as ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection>."},{"content":"For more information, see the documentation for those classes.","pos":[1085,1147]},{"content":"For more information about how to access information in configuration files, see the &lt;xref:System.Configuration.ConfigurationManager&gt; class and the &lt;xref:System.Web.Configuration.WebConfigurationManager&gt; class.","pos":[1154,1364],"source":"       For more information about how to access information in configuration files, see the <xref:System.Configuration.ConfigurationManager> class and the <xref:System.Web.Configuration.WebConfigurationManager> class."}]}]},{"pos":[8140,8243],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> class."},{"pos":[8255,8497],"content":"You create a new instance of the <xref:System.Configuration.ConfigurationElement> class, for example, every time your application needs to add a new element to the related <xref:System.Configuration.ConfigurationElementCollection> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"You create a new instance of the &lt;xref:System.Configuration.ConfigurationElement&gt; class, for example, every time your application needs to add a new element to the related &lt;xref:System.Configuration.ConfigurationElementCollection&gt; collection.","pos":[0,242],"source":"You create a new instance of the <xref:System.Configuration.ConfigurationElement> class, for example, every time your application needs to add a new element to the related <xref:System.Configuration.ConfigurationElementCollection> collection."}]},{"pos":[9437,9680],"content":"Gets a reference to the top-level <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that represents the configuration hierarchy that the current <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance belongs to.","needQuote":true,"needEscape":true,"source":"Gets a reference to the top-level <xref href=\"System.Configuration.Configuration\"></xref> instance that represents the configuration hierarchy that the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance belongs to."},{"pos":[9692,10028],"content":"The CurrentConfiguration property makes it easy to determine which version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted. The <xref:System.Configuration.Configuration.TargetFramework%2A> property of the top-level <xref:System.Configuration.Configuration> instance indicates the targeted framework version.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CurrentConfiguration property makes it easy to determine which version of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> is targeted.","pos":[0,152],"source":"The CurrentConfiguration property makes it easy to determine which version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted."},{"content":"The &lt;xref:System.Configuration.Configuration.TargetFramework%2A&gt; property of the top-level &lt;xref:System.Configuration.Configuration&gt; instance indicates the targeted framework version.","pos":[153,336],"source":" The <xref:System.Configuration.Configuration.TargetFramework%2A> property of the top-level <xref:System.Configuration.Configuration> instance indicates the targeted framework version."}]},{"pos":[10202,10381],"content":"The top-level <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that the current <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance belongs to.","needQuote":true,"needEscape":true,"source":"The top-level <xref href=\"System.Configuration.Configuration\"></xref> instance that the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance belongs to."},{"pos":[11049,11087],"content":"Reads XML from the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads XML from the configuration file.","pos":[0,38]}]},{"pos":[11650,11721],"content":"The <xref:System.Xml.XmlReader> that reads from the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; that reads from the configuration file.","pos":[0,71],"source":"The <xref:System.Xml.XmlReader> that reads from the configuration file."}]},{"pos":[11801,11985],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to serialize only the collection key properties; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to serialize only the collection key properties; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12856,13074],"content":"Gets an <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ElementInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the non-customizable information and functionality of the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets an <xref href=\"System.Configuration.ElementInformation\"></xref> object that contains the non-customizable information and functionality of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object."},{"pos":[13606,13805],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ElementInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the non-customizable information and functionality of the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Configuration.ElementInformation\"></xref> that contains the non-customizable information and functionality of the <xref href=\"System.Configuration.ConfigurationElement\"></xref>."},{"pos":[14327,14511],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElementProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object itself.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Configuration.ConfigurationElementProperty\"></xref> object that represents the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object itself."},{"pos":[14721,14886],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElementProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> itself.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationElementProperty\"></xref> that represents the <xref href=\"System.Configuration.ConfigurationElement\"></xref> itself."},{"pos":[15412,15529],"content":"Compares the current <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance to the specified object.","needQuote":true,"needEscape":true,"source":"Compares the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance to the specified object."},{"pos":[15682,15709],"content":"The object to compare with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with.","pos":[0,27]}]},{"pos":[15768,16109],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object to compare with is equal to the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the object to compare with is equal to the current <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,262],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object to compare with is equal to the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[263,341],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[16629,16784],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ContextInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Configuration.ContextInformation\"></xref> object for the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object."},{"pos":[16797,17539],"content":"A <xref:System.Configuration.ContextInformation> object provides the context necessary for a <xref:System.Configuration.ConfigurationElement> object to make decisions based upon where it is being evaluated.       The <xref:System.Configuration.ContextInformation> object provides environment details related to an element of the configuration. For example, you can use the <xref:System.Configuration.ContextInformation.IsMachineLevel%2A> property to determine whether a <xref:System.Configuration.ConfigurationElement> was set in Machine.config, or you can determine which hierarchy a <xref:System.Configuration.ConfigurationElement> element belongs to by using the <xref:System.Configuration.ContextInformation.HostingContext%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <xref:System.Configuration.ContextInformation> object provides the context necessary for a <xref:System.Configuration.ConfigurationElement> object to make decisions based upon where it is being evaluated.       The <xref:System.Configuration.ContextInformation> object provides environment details related to an element of the configuration. For example, you can use the <xref:System.Configuration.ContextInformation.IsMachineLevel%2A> property to determine whether a <xref:System.Configuration.ConfigurationElement> was set in Machine.config, or you can determine which hierarchy a <xref:System.Configuration.ConfigurationElement> element belongs to by using the <xref:System.Configuration.ContextInformation.HostingContext%2A> property.","pos":[0,740],"nodes":[{"content":"A &lt;xref:System.Configuration.ContextInformation&gt; object provides the context necessary for a &lt;xref:System.Configuration.ConfigurationElement&gt; object to make decisions based upon where it is being evaluated.","pos":[0,206],"source":"A <xref:System.Configuration.ContextInformation> object provides the context necessary for a <xref:System.Configuration.ConfigurationElement> object to make decisions based upon where it is being evaluated."},{"content":"The &lt;xref:System.Configuration.ContextInformation&gt; object provides environment details related to an element of the configuration.","pos":[213,343],"source":"       The <xref:System.Configuration.ContextInformation> object provides environment details related to an element of the configuration."},{"content":"For example, you can use the &lt;xref:System.Configuration.ContextInformation.IsMachineLevel%2A&gt; property to determine whether a &lt;xref:System.Configuration.ConfigurationElement&gt; was set in Machine.config, or you can determine which hierarchy a &lt;xref:System.Configuration.ConfigurationElement&gt; element belongs to by using the &lt;xref:System.Configuration.ContextInformation.HostingContext%2A&gt; property.","pos":[344,740],"source":" For example, you can use the <xref:System.Configuration.ContextInformation.IsMachineLevel%2A> property to determine whether a <xref:System.Configuration.ConfigurationElement> was set in Machine.config, or you can determine which hierarchy a <xref:System.Configuration.ConfigurationElement> element belongs to by using the <xref:System.Configuration.ContextInformation.HostingContext%2A> property."}]}]},{"pos":[17724,17860],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ContextInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ContextInformation\"></xref> for the <xref href=\"System.Configuration.ConfigurationElement\"></xref>."},{"pos":[18092,18145],"content":"The current element is not associated with a context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current element is not associated with a context.","pos":[0,53]}]},{"pos":[18560,18677],"content":"Gets a unique value representing the current <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets a unique value representing the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance."},{"pos":[18812,18924],"content":"A unique value representing the current <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"A unique value representing the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance."},{"pos":[19556,19619],"content":"Returns the transformed version of the specified assembly name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the transformed version of the specified assembly name.","pos":[0,63]}]},{"pos":[19631,19957],"content":"The &lt;xref:System.Configuration.ConfigurationElement.SerializeElement%2A&gt; method and the &lt;xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A&gt; method call this method in order to transform an assembly name when an earlier version of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> is targeted.","needQuote":true,"needEscape":true,"source":"The <xref:System.Configuration.ConfigurationElement.SerializeElement%2A> method and the <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> method call this method in order to transform an assembly name when an earlier version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted."},{"pos":[20142,20167],"content":"The name of the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the assembly.","pos":[0,25]}]},{"pos":[20225,20545],"content":"The transformed version of the assembly name. If no transformer is available, the <code>assemblyName</code> parameter value is returned unchanged. The <xref:System.Configuration.Configuration.TypeStringTransformer*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no transformer is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed version of the assembly name.","pos":[0,45]},{"content":"If no transformer is available, the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter value is returned unchanged.","pos":[46,146],"source":" If no transformer is available, the <code>assemblyName</code> parameter value is returned unchanged."},{"content":"The &lt;xref:System.Configuration.Configuration.TypeStringTransformer*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no transformer is available.","pos":[147,320],"source":" The <xref:System.Configuration.Configuration.TypeStringTransformer*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no transformer is available."}]},{"pos":[21174,21233],"content":"Returns the transformed version of the specified type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the transformed version of the specified type name.","pos":[0,59]}]},{"pos":[21245,21566],"content":"The &lt;xref:System.Configuration.ConfigurationElement.SerializeElement%2A&gt; method and the &lt;xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A&gt; method call this method in order to transform a type name when an earlier version of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> is targeted.","needQuote":true,"needEscape":true,"source":"The <xref:System.Configuration.ConfigurationElement.SerializeElement%2A> method and the <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> method call this method in order to transform a type name when an earlier version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted."},{"pos":[21739,21760],"content":"The name of the type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the type.","pos":[0,21]}]},{"pos":[21818,22140],"content":"The transformed version of the specified type name. If no transformer is available, the <code>typeName</code> parameter value is returned unchanged. The <xref:System.Configuration.Configuration.TypeStringTransformer*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no transformer is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed version of the specified type name.","pos":[0,51]},{"content":"If no transformer is available, the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter value is returned unchanged.","pos":[52,148],"source":" If no transformer is available, the <code>typeName</code> parameter value is returned unchanged."},{"content":"The &lt;xref:System.Configuration.Configuration.TypeStringTransformer*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no transformer is available.","pos":[149,322],"source":" The <xref:System.Configuration.Configuration.TypeStringTransformer*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no transformer is available."}]},{"pos":[22643,22827],"content":"Gets a value that indicates whether the &lt;xref:System.Configuration.ConfigurationElement.CurrentConfiguration*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22944,23174],"content":"false if the &lt;xref:System.Configuration.ConfigurationElement.CurrentConfiguration*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"false if the <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[23637,23737],"content":"Sets the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to its initial state.","needQuote":true,"needEscape":true,"source":"Sets the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object to its initial state."},{"pos":[24333,24454],"content":"Used to initialize a default set of values for the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Used to initialize a default set of values for the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object."},{"pos":[24466,24543],"content":"Called to set the internal state of the object to appropriate default values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called to set the internal state of the object to appropriate default values.","pos":[0,77]}]},{"pos":[25130,25264],"content":"Indicates whether this configuration element has been modified since it was last saved or loaded, when implemented in a derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether this configuration element has been modified since it was last saved or loaded, when implemented in a derived class.","pos":[0,134]}]},{"pos":[25277,25918],"content":"The IsModified method determines whether this <xref:System.Configuration.ConfigurationElement> object will be written to the configuration file when the <xref:System.Configuration.Configuration.Save%2A> method is called. If the return value is `false`, it is assumed that the configuration file represents the current state of the element.       By default, IsModified returns `true` after a property is set through the indexer to this <xref:System.Configuration.ConfigurationElement> object.       Override the IsModified method to provide custom indication of the state of this <xref:System.Configuration.ConfigurationElement> element.","needQuote":false,"needEscape":true,"nodes":[{"content":"The IsModified method determines whether this &lt;xref:System.Configuration.ConfigurationElement&gt; object will be written to the configuration file when the &lt;xref:System.Configuration.Configuration.Save%2A&gt; method is called.","pos":[0,220],"source":"The IsModified method determines whether this <xref:System.Configuration.ConfigurationElement> object will be written to the configuration file when the <xref:System.Configuration.Configuration.Save%2A> method is called."},{"content":"If the return value is <ph id=\"ph1\">`false`</ph>, it is assumed that the configuration file represents the current state of the element.","pos":[221,339],"source":" If the return value is `false`, it is assumed that the configuration file represents the current state of the element."},{"content":"By default, IsModified returns <ph id=\"ph1\">`true`</ph> after a property is set through the indexer to this &lt;xref:System.Configuration.ConfigurationElement&gt; object.","pos":[346,492],"source":"       By default, IsModified returns `true` after a property is set through the indexer to this <xref:System.Configuration.ConfigurationElement> object."},{"content":"Override the IsModified method to provide custom indication of the state of this &lt;xref:System.Configuration.ConfigurationElement&gt; element.","pos":[499,637],"source":"       Override the IsModified method to provide custom indication of the state of this <xref:System.Configuration.ConfigurationElement> element."}]},{"pos":[26747,26916],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the element has been modified; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element has been modified; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27409,27528],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object is read-only."},{"pos":[27541,27687],"content":"The system defines configuration elements that cannot be modified.       To determine which elements can be modified, use the IsReadOnly method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The system defines configuration elements that cannot be modified.       To determine which elements can be modified, use the IsReadOnly method.","pos":[0,144],"nodes":[{"content":"The system defines configuration elements that cannot be modified.","pos":[0,66]},{"content":"To determine which elements can be modified, use the IsReadOnly method.","pos":[73,144]}]}]},{"pos":[28200,28426],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is read-only; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[29042,29109],"content":"Gets or sets a property or attribute of this configuration element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a property or attribute of this configuration element.","pos":[0,67]}]},{"pos":[29122,29349],"content":"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.       In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.       In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class.","pos":[0,225],"nodes":[{"content":"Use the Item property to get or set the values of a &lt;xref:System.Configuration.ConfigurationProperty&gt; object.","pos":[0,109],"source":"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object."},{"content":"In C#, this property is the indexer for the &lt;xref:System.Configuration.ConfigurationSectionCollection&gt; class.","pos":[116,225],"source":"       In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class."}]}]},{"pos":[29564,29587],"content":"The property to access.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property to access.","pos":[0,23]}]},{"pos":[29645,29697],"content":"The specified property, attribute, or child element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified property, attribute, or child element.","pos":[0,52]}]},{"pos":[29904,30023],"content":"<ph id=\"ph1\">&lt;code&gt;prop&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or does not exist within the element.","needQuote":true,"needEscape":true,"source":"<code>prop</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or does not exist within the element."},{"pos":[30168,30209],"content":"<ph id=\"ph1\">&lt;code&gt;prop&lt;/code&gt;</ph> is read only or locked.","needQuote":true,"needEscape":true,"source":"<code>prop</code> is read only or locked."},{"pos":[30639,30722],"content":"Gets or sets a property, attribute, or child element of this configuration element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a property, attribute, or child element of this configuration element.","pos":[0,83]}]},{"pos":[30735,30962],"content":"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.       In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.       In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class.","pos":[0,225],"nodes":[{"content":"Use the Item property to get or set the values of a &lt;xref:System.Configuration.ConfigurationProperty&gt; object.","pos":[0,109],"source":"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object."},{"content":"In C#, this property is the indexer for the &lt;xref:System.Configuration.ConfigurationSectionCollection&gt; class.","pos":[116,225],"source":"       In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class."}]}]},{"pos":[31128,31218],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to access.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Configuration.ConfigurationProperty\"></xref> to access."},{"pos":[31276,31327],"content":"The specified property, attribute, or child element","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified property, attribute, or child element","pos":[0,51]}]},{"pos":[31546,31587],"content":"<ph id=\"ph1\">&lt;code&gt;prop&lt;/code&gt;</ph> is read-only or locked.","needQuote":true,"needEscape":true,"source":"<code>prop</code> is read-only or locked."},{"pos":[32064,32219],"content":"Adds the invalid-property errors in this <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, and in all subelements, to the passed list.","needQuote":true,"needEscape":true,"source":"Adds the invalid-property errors in this <xref href=\"System.Configuration.ConfigurationElement\"></xref> object, and in all subelements, to the passed list."},{"pos":[32407,32479],"content":"An object that implements the <xref:System.Collections.IList> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that implements the &lt;xref:System.Collections.IList&gt; interface.","pos":[0,72],"source":"An object that implements the <xref:System.Collections.IList> interface."}]},{"pos":[33033,33074],"content":"Gets the collection of locked attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of locked attributes.","pos":[0,41]}]},{"pos":[33087,33692],"content":"The LockAllAttributesExcept property allows you to lock all the attributes at once, with the exception of the one you specify. To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section.      > [!NOTE] >  The LockAllAttributesExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the parent element itself and its child elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"The LockAllAttributesExcept property allows you to lock all the attributes at once, with the exception of the one you specify.","pos":[0,126]},{"content":"To do that, you use the &lt;xref:System.Configuration.ConfigurationLockCollection.Contains%2A&gt; method, as explained in the Example section.","pos":[127,263],"source":" To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The LockAllAttributesExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified.","pos":[269,437],"source":"      > [!NOTE] >  The LockAllAttributesExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified."},{"content":"Use the &lt;xref:System.Configuration.ConfigurationElement.LockItem%2A&gt; property if you want to put a general lock on the parent element itself and its child elements.","pos":[438,602],"source":" Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the parent element itself and its child elements."}]},{"pos":[34228,34352],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of locked attributes (properties) for the element.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked attributes (properties) for the element."},{"pos":[34909,34948],"content":"Gets the collection of locked elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of locked elements.","pos":[0,39]}]},{"pos":[34961,35405],"content":"The LockAllElementsExcept property allows you to lock all the elements at once, except for the one you specify.      > [!NOTE] >  The LockAllElementsExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the element itself and its child elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"The LockAllElementsExcept property allows you to lock all the elements at once, except for the one you specify.","pos":[0,111]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The LockAllElementsExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified.","pos":[117,283],"source":"      > [!NOTE] >  The LockAllElementsExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified."},{"content":"Use the &lt;xref:System.Configuration.ConfigurationElement.LockItem%2A&gt; property if you want to put a general lock on the element itself and its child elements.","pos":[284,441],"source":" Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the element itself and its child elements."}]},{"pos":[35944,36037],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of locked elements.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked elements."},{"pos":[36557,36597],"content":"Gets the collection of locked attributes","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of locked attributes","pos":[0,40]}]},{"pos":[36610,37145],"content":"The LockAttributes property allows you to lock all the attributes you specify.       To do that you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section.      > [!NOTE] >  The LockAttributes property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"The LockAttributes property allows you to lock all the attributes you specify.","pos":[0,78]},{"content":"To do that you use the &lt;xref:System.Configuration.ConfigurationLockCollection.Contains%2A&gt; method, as explained in the Example section.","pos":[85,220],"source":"       To do that you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The LockAttributes property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified.","pos":[226,385],"source":"      > [!NOTE] >  The LockAttributes property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified."},{"content":"Use &lt;xref:System.Configuration.ConfigurationElement.LockItem%2A&gt; if you want to put a general lock on the element itself and its child elements.","pos":[386,530],"source":" Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements."}]},{"pos":[37672,37796],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of locked attributes (properties) for the element.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked attributes (properties) for the element."},{"pos":[38299,38338],"content":"Gets the collection of locked elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of locked elements.","pos":[0,39]}]},{"pos":[38351,38878],"content":"The LockElements property allows you to lock all the elements you specify.       To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the next example.      > [!NOTE] >  The LockElements property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"The LockElements property allows you to lock all the elements you specify.","pos":[0,74]},{"content":"To do that, you use the &lt;xref:System.Configuration.ConfigurationLockCollection.Contains%2A&gt; method, as explained in the next example.","pos":[81,214],"source":"       To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the next example."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The LockElements property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified.","pos":[220,377],"source":"      > [!NOTE] >  The LockElements property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified."},{"content":"Use &lt;xref:System.Configuration.ConfigurationElement.LockItem%2A&gt; if you want to put a general lock on the element itself and its child elements.","pos":[378,522],"source":" Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements."}]},{"pos":[39401,39494],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of locked elements.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked elements."},{"pos":[39975,40037],"content":"Gets or sets a value indicating whether the element is locked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the element is locked.","pos":[0,62]}]},{"pos":[40049,40154],"content":"Use the LockItem property if you want to put a general lock on the element itself and its child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the LockItem property if you want to put a general lock on the element itself and its child elements.","pos":[0,105]}]},{"pos":[40586,40826],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element is locked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the element is locked; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,161],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element is locked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[162,240],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[41049,41117],"content":"The element has already been locked at a higher configuration level.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element has already been locked at a higher configuration level.","pos":[0,68]}]},{"pos":[41744,41835],"content":"Gets a value indicating whether an unknown attribute is encountered during deserialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether an unknown attribute is encountered during deserialization.","pos":[0,91]}]},{"pos":[41847,42018],"content":"The OnDeserializeUnrecognizedAttribute is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The OnDeserializeUnrecognizedAttribute is invoked when an unknown attribute is encountered while deserializing the &lt;xref:System.Configuration.ConfigurationElement&gt; object.","pos":[0,171],"source":"The OnDeserializeUnrecognizedAttribute is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object."}]},{"pos":[42205,42244],"content":"The name of the unrecognized attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the unrecognized attribute.","pos":[0,39]}]},{"pos":[42306,42346],"content":"The value of the unrecognized attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the unrecognized attribute.","pos":[0,40]}]},{"pos":[42405,42602],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when an unknown attribute is encountered while deserializing; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when an unknown attribute is encountered while deserializing; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[43349,43438],"content":"Gets a value indicating whether an unknown element is encountered during deserialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether an unknown element is encountered during deserialization.","pos":[0,89]}]},{"pos":[43450,43619],"content":"The OnDeserializeUnrecognizedElement is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The OnDeserializeUnrecognizedElement is invoked when an unknown attribute is encountered while deserializing the &lt;xref:System.Configuration.ConfigurationElement&gt; object.","pos":[0,169],"source":"The OnDeserializeUnrecognizedElement is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object."}]},{"pos":[43833,43868],"content":"The name of the unknown subelement.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the unknown subelement.","pos":[0,35]}]},{"pos":[43938,44001],"content":"The <xref:System.Xml.XmlReader> being used for deserialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; being used for deserialization.","pos":[0,63],"source":"The <xref:System.Xml.XmlReader> being used for deserialization."}]},{"pos":[44060,44255],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when an unknown element is encountered while deserializing; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when an unknown element is encountered while deserializing; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[45654,45712],"content":"Throws an exception when a required property is not found.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an exception when a required property is not found.","pos":[0,58]}]},{"pos":[45724,45945],"content":"The <xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A> is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A&gt; is invoked when an unknown attribute is encountered while deserializing the &lt;xref:System.Configuration.ConfigurationElement&gt; object.","pos":[0,221],"source":"The <xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A> is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object."}]},{"pos":[46112,46166],"content":"The name of the required attribute that was not found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the required attribute that was not found.","pos":[0,54]}]},{"pos":[46224,46229],"content":"None.","needQuote":true,"needEscape":true,"nodes":[{"content":"None.","pos":[0,5]}]},{"pos":[46470,46483],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[46918,46947],"content":"Called after deserialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called after deserialization.","pos":[0,29]}]},{"pos":[47611,47639],"content":"Called before serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called before serialization.","pos":[0,28]}]},{"pos":[47815,47945],"content":"The &lt;xref:System.Xml.XmlWriter&gt; that will be used to serialize the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Xml.XmlWriter> that will be used to serialize the <xref href=\"System.Configuration.ConfigurationElement\"></xref>."},{"pos":[48436,48470],"content":"Gets the collection of properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of properties.","pos":[0,34]}]},{"pos":[48482,48604],"content":"The Properties property, also called the property bag, contains all the properties (attributes) that apply to the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Properties property, also called the property bag, contains all the properties (attributes) that apply to the element.","pos":[0,122]}]},{"pos":[48962,49070],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationPropertyCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of properties for the element.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> of properties for the element."},{"pos":[49684,49839],"content":"Resets the internal state of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, including the locks and the properties collections.","needQuote":true,"needEscape":true,"source":"Resets the internal state of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object, including the locks and the properties collections."},{"pos":[50064,50109],"content":"The parent node of the configuration element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parent node of the configuration element.","pos":[0,45]}]},{"pos":[50612,50806],"content":"Resets the value of the &lt;xref:System.Configuration.ConfigurationElement.IsModified*&gt; method to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when implemented in a derived class.","needQuote":true,"needEscape":true,"source":"Resets the value of the <xref:System.Configuration.ConfigurationElement.IsModified*> method to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when implemented in a derived class."},{"pos":[50818,50989],"content":"The ResetModified method is automatically called after changes to this <xref:System.Configuration.ConfigurationElement> object have been written to the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ResetModified method is automatically called after changes to this &lt;xref:System.Configuration.ConfigurationElement&gt; object have been written to the configuration file.","pos":[0,171],"source":"The ResetModified method is automatically called after changes to this <xref:System.Configuration.ConfigurationElement> object have been written to the configuration file."}]},{"pos":[51723,51835],"content":"Writes the contents of this configuration element to the configuration file when implemented in a derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the contents of this configuration element to the configuration file when implemented in a derived class.","pos":[0,112]}]},{"pos":[52387,52457],"content":"The <xref:System.Xml.XmlWriter> that writes to the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; that writes to the configuration file.","pos":[0,70],"source":"The <xref:System.Xml.XmlWriter> that writes to the configuration file."}]},{"pos":[52537,52721],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to serialize only the collection key properties; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to serialize only the collection key properties; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[52780,52952],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if any data was actually serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any data was actually serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[53183,53247],"content":"The current attribute is locked at a higher configuration level.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current attribute is locked at a higher configuration level.","pos":[0,64]}]},{"pos":[53832,53946],"content":"Writes the outer tags of this configuration element to the configuration file when implemented in a derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the outer tags of this configuration element to the configuration file when implemented in a derived class.","pos":[0,114]}]},{"pos":[53958,54324],"content":"The SerializeToXmlElement method is called after the call to the <xref:System.Configuration.ConfigurationElement.Unmerge%2A> method during serialization. The SerializeToXmlElement method writes out the contents of the configuration element between the beginning and ending tags of the element. Override SerializeToXmlElement to provide a custom serialization method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SerializeToXmlElement method is called after the call to the <xref:System.Configuration.ConfigurationElement.Unmerge%2A> method during serialization. The SerializeToXmlElement method writes out the contents of the configuration element between the beginning and ending tags of the element. Override SerializeToXmlElement to provide a custom serialization method.","pos":[0,366],"nodes":[{"content":"The SerializeToXmlElement method is called after the call to the &lt;xref:System.Configuration.ConfigurationElement.Unmerge%2A&gt; method during serialization.","pos":[0,153],"source":"The SerializeToXmlElement method is called after the call to the <xref:System.Configuration.ConfigurationElement.Unmerge%2A> method during serialization."},{"content":"The SerializeToXmlElement method writes out the contents of the configuration element between the beginning and ending tags of the element.","pos":[154,293]},{"content":"Override SerializeToXmlElement to provide a custom serialization method.","pos":[294,366]}]}]},{"pos":[54529,54599],"content":"The <xref:System.Xml.XmlWriter> that writes to the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; that writes to the configuration file.","pos":[0,70],"source":"The <xref:System.Xml.XmlWriter> that writes to the configuration file."}]},{"pos":[54667,54760],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be written.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> to be written."},{"pos":[54819,54981],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if writing was successful; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if writing was successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[55151,55191],"content":"The element has multiple child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element has multiple child elements.","pos":[0,40]}]},{"pos":[55885,55924],"content":"Sets a property to the specified value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets a property to the specified value.","pos":[0,39]}]},{"pos":[56168,56196],"content":"The element property to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element property to set.","pos":[0,28]}]},{"pos":[56258,56294],"content":"The value to assign to the property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to the property.","pos":[0,36]}]},{"pos":[56363,56546],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the locks on the property should be ignored; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the locks on the property should be ignored; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[56777,56936],"content":"Occurs if the element is read-only or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ignoreLocks</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> but the locks cannot be ignored.","needQuote":true,"needEscape":true,"source":"Occurs if the element is read-only or <code>ignoreLocks</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> but the locks cannot be ignored."},{"pos":[57351,57528],"content":"Sets the &lt;xref:System.Configuration.ConfigurationElement.IsReadOnly*&gt; property for the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and all subelements.","needQuote":true,"needEscape":true,"source":"Sets the <xref:System.Configuration.ConfigurationElement.IsReadOnly*> property for the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object and all subelements."},{"pos":[57541,57777],"content":"This method is used internally to set aside those system-configuration elements that cannot be modified.       To determine which elements can be modified, use the <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is used internally to set aside those system-configuration elements that cannot be modified.       To determine which elements can be modified, use the <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A> method.","pos":[0,234],"nodes":[{"content":"This method is used internally to set aside those system-configuration elements that cannot be modified.","pos":[0,104]},{"content":"To determine which elements can be modified, use the &lt;xref:System.Configuration.ConfigurationElement.IsReadOnly%2A&gt; method.","pos":[111,234],"source":"       To determine which elements can be modified, use the <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A> method."}]}]},{"pos":[58783,58912],"content":"Modifies the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to remove all values that should not be saved.","needQuote":true,"needEscape":true,"source":"Modifies the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object to remove all values that should not be saved."},{"pos":[58924,59121],"content":"This method is called before the <xref:System.Configuration.ConfigurationElement> object is saved by the <xref:System.Configuration.Configuration> object in order to remove all unneeded properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called before the &lt;xref:System.Configuration.ConfigurationElement&gt; object is saved by the &lt;xref:System.Configuration.Configuration&gt; object in order to remove all unneeded properties.","pos":[0,197],"source":"This method is called before the <xref:System.Configuration.ConfigurationElement> object is saved by the <xref:System.Configuration.Configuration> object in order to remove all unneeded properties."}]},{"pos":[59458,59587],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the current level containing a merged view of the properties.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Configuration.ConfigurationElement\"></xref> at the current level containing a merged view of the properties."},{"pos":[59685,59849],"content":"The parent <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if this is the top level.","needQuote":true,"needEscape":true,"source":"The parent <xref href=\"System.Configuration.ConfigurationElement\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this is the top level."},{"pos":[59943,60058],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationSaveMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines which property values to include.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Configuration.ConfigurationSaveMode\"></xref> that determines which property values to include."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.ConfigurationElement\n  id: ConfigurationElement\n  children:\n  - System.Configuration.ConfigurationElement.#ctor\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Properties\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  langs:\n  - csharp\n  name: ConfigurationElement\n  nameWithType: ConfigurationElement\n  fullName: System.Configuration.ConfigurationElement\n  type: Class\n  summary: Represents a configuration element within a configuration file.\n  remarks: \"The ConfigurationElement is an abstract class that is used to represent an XML element in a configuration file (such as Web.config). An element in a configuration file can contain zero, one, or more child elements.  \\n  \\n Because the ConfigurationElement class is defined as abstract, you cannot create an instance of it. You can only derive classes from it. The .NET Framework includes classes that derive from the ConfigurationElement class in order to represent standard XML configuration elements, such as <xref:System.Configuration.ConfigurationSection>. You can also extend the ConfigurationElement class to access custom configuration elements and sections. The example included later in this topic shows how to access custom configuration elements and sections by using custom classes that derive from ConfigurationElement.  \\n  \\n You can also extend the standard configuration types such as ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection>. For more information, see the documentation for those classes.  \\n  \\n For more information about how to access information in configuration files, see the <xref:System.Configuration.ConfigurationManager> class and the <xref:System.Web.Configuration.WebConfigurationManager> class.\"\n  example:\n  - \"The following code example shows how to implement a custom ConfigurationElement both as an individual element in a custom section and as a collection of elements in a custom section. The example consists of the following files:  \\n  \\n-   An app.config file that contains a custom section that is named `MyUrls`. This section contains a simple element (it does not contain any other elements) and a collection of elements. The simple element is named `simple` and the collection is named `urls`.  \\n  \\n-   A console application. The application reads the contents of the app.config file and writes the information to the console. It uses classes that derive from ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, and <xref:System.Configuration.ConfigurationSection>.  \\n  \\n-   A class named `UrlsSection` that derives from the <xref:System.Configuration.ConfigurationSection> class. This class is used to access the `MyUrls` section in the configuration file.  \\n  \\n-   A class named `UrlsCollection` that derives from the <xref:System.Configuration.ConfigurationElementCollection> class. This class is used to access the `urls` collection in the configuration file.  \\n  \\n-   A class named `UrlConfigElement` that derives from the ConfigurationElement class. This class is used to access the `simple` element and the members of the `urls` collection in the configuration file.  \\n  \\n To run the example, perform the following steps:  \\n  \\n1.  Create a solution that has a console application project and a class library project that is named `ConfigurationElement`.  \\n  \\n2.  Put the three class files in the class library project and put the other files in the console library project.  \\n  \\n3.  In both projects set a reference to `System.Configuration`.  \\n  \\n4.  In the console application project set a project reference to the class library project.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#151](~/add/codesnippet/csharp/t-system.configuration.c_8_2.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#151](~/add/codesnippet/visualbasic/t-system.configuration.c_8_2.vb)]  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#71](~/add/codesnippet/csharp/t-system.configuration.c_8_3.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#71](~/add/codesnippet/visualbasic/t-system.configuration.c_8_3.vb)]  \\n  \\n [!code-vb[System.Configuration.ConfigurationElement#51](~/add/codesnippet/visualbasic/t-system.configuration.c_8_4.vb)]\\n [!code-cs[System.Configuration.ConfigurationElement#51](~/add/codesnippet/csharp/t-system.configuration.c_8_4.cs)]  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#31](~/add/codesnippet/csharp/t-system.configuration.c_8_5.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#31](~/add/codesnippet/visualbasic/t-system.configuration.c_8_5.vb)]\"\n  syntax:\n    content: public abstract class ConfigurationElement\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.#ctor\n  id: '#ctor'\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: ConfigurationElement()\n  nameWithType: ConfigurationElement.ConfigurationElement()\n  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()\n  type: Constructor\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> class.\n  remarks: You create a new instance of the <xref:System.Configuration.ConfigurationElement> class, for example, every time your application needs to add a new element to the related <xref:System.Configuration.ConfigurationElementCollection> collection.\n  example:\n  - \"The following example shows how to use a customized constructor.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#32](~/add/codesnippet/csharp/m-system.configuration.c_36_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#32](~/add/codesnippet/visualbasic/m-system.configuration.c_36_1.vb)]\"\n  syntax:\n    content: protected ConfigurationElement ();\n    parameters: []\n  overload: System.Configuration.ConfigurationElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.CurrentConfiguration\n  id: CurrentConfiguration\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: CurrentConfiguration\n  nameWithType: ConfigurationElement.CurrentConfiguration\n  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a reference to the top-level <xref href=\"System.Configuration.Configuration\"></xref> instance that represents the configuration hierarchy that the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance belongs to.\n  remarks: The CurrentConfiguration property makes it easy to determine which version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted. The <xref:System.Configuration.Configuration.TargetFramework%2A> property of the top-level <xref:System.Configuration.Configuration> instance indicates the targeted framework version.\n  syntax:\n    content: public System.Configuration.Configuration CurrentConfiguration { get; }\n    return:\n      type: System.Configuration.Configuration\n      description: The top-level <xref href=\"System.Configuration.Configuration\"></xref> instance that the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance belongs to.\n  overload: System.Configuration.ConfigurationElement.CurrentConfiguration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  id: DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: DeserializeElement(XmlReader,Boolean)\n  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)\n  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Reads XML from the configuration file.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to extend the DeserializeElement method.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#33](~/add/codesnippet/csharp/6dc9ac84-77cf-449c-b380-_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#33](~/add/codesnippet/visualbasic/6dc9ac84-77cf-449c-b380-_1.vb)]\"\n  syntax:\n    content: protected virtual void DeserializeElement (System.Xml.XmlReader reader, bool serializeCollectionKey);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> that reads from the configuration file.\n    - id: serializeCollectionKey\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to serialize only the collection key properties; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.DeserializeElement*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: \"The element to read is locked.  \\n  \\n \\\\- or -  \\n  \\n An attribute of the current node is not recognized.  \\n  \\n \\\\- or -  \\n  \\n The lock status of the current node cannot be determined.\"\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.ElementInformation\n  id: ElementInformation\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: ElementInformation\n  nameWithType: ConfigurationElement.ElementInformation\n  fullName: System.Configuration.ConfigurationElement.ElementInformation\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets an <xref href=\"System.Configuration.ElementInformation\"></xref> object that contains the non-customizable information and functionality of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the ElementInformation property.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#80](~/add/codesnippet/csharp/p-system.configuration.c_48_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#80](~/add/codesnippet/visualbasic/p-system.configuration.c_48_1.vb)]\"\n  syntax:\n    content: public System.Configuration.ElementInformation ElementInformation { get; }\n    return:\n      type: System.Configuration.ElementInformation\n      description: An <xref href=\"System.Configuration.ElementInformation\"></xref> that contains the non-customizable information and functionality of the <xref href=\"System.Configuration.ConfigurationElement\"></xref>.\n  overload: System.Configuration.ConfigurationElement.ElementInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.ElementProperty\n  id: ElementProperty\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: ElementProperty\n  nameWithType: ConfigurationElement.ElementProperty\n  fullName: System.Configuration.ConfigurationElement.ElementProperty\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the <xref href=\"System.Configuration.ConfigurationElementProperty\"></xref> object that represents the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object itself.\n  syntax:\n    content: protected virtual System.Configuration.ConfigurationElementProperty ElementProperty { get; }\n    return:\n      type: System.Configuration.ConfigurationElementProperty\n      description: The <xref href=\"System.Configuration.ConfigurationElementProperty\"></xref> that represents the <xref href=\"System.Configuration.ConfigurationElement\"></xref> itself.\n  overload: System.Configuration.ConfigurationElement.ElementProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ConfigurationElement.Equals(Object)\n  fullName: System.Configuration.ConfigurationElement.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Compares the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance to the specified object.\n  syntax:\n    content: public override bool Equals (object compareTo);\n    parameters:\n    - id: compareTo\n      type: System.Object\n      description: The object to compare with.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object to compare with is equal to the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.EvaluationContext\n  id: EvaluationContext\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: EvaluationContext\n  nameWithType: ConfigurationElement.EvaluationContext\n  fullName: System.Configuration.ConfigurationElement.EvaluationContext\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the <xref href=\"System.Configuration.ContextInformation\"></xref> object for the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object.\n  remarks: \"A <xref:System.Configuration.ContextInformation> object provides the context necessary for a <xref:System.Configuration.ConfigurationElement> object to make decisions based upon where it is being evaluated.  \\n  \\n The <xref:System.Configuration.ContextInformation> object provides environment details related to an element of the configuration. For example, you can use the <xref:System.Configuration.ContextInformation.IsMachineLevel%2A> property to determine whether a <xref:System.Configuration.ConfigurationElement> was set in Machine.config, or you can determine which hierarchy a <xref:System.Configuration.ConfigurationElement> element belongs to by using the <xref:System.Configuration.ContextInformation.HostingContext%2A> property.\"\n  syntax:\n    content: protected System.Configuration.ContextInformation EvaluationContext { get; }\n    return:\n      type: System.Configuration.ContextInformation\n      description: The <xref href=\"System.Configuration.ContextInformation\"></xref> for the <xref href=\"System.Configuration.ConfigurationElement\"></xref>.\n  overload: System.Configuration.ConfigurationElement.EvaluationContext*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The current element is not associated with a context.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.GetHashCode\n  id: GetHashCode\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ConfigurationElement.GetHashCode()\n  fullName: System.Configuration.ConfigurationElement.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a unique value representing the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A unique value representing the current <xref href=\"System.Configuration.ConfigurationElement\"></xref> instance.\n  overload: System.Configuration.ConfigurationElement.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  id: GetTransformedAssemblyString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: GetTransformedAssemblyString(String)\n  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)\n  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Returns the transformed version of the specified assembly name.\n  remarks: The <xref:System.Configuration.ConfigurationElement.SerializeElement%2A> method and the <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> method call this method in order to transform an assembly name when an earlier version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted.\n  syntax:\n    content: protected virtual string GetTransformedAssemblyString (string assemblyName);\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: The name of the assembly.\n    return:\n      type: System.String\n      description: The transformed version of the assembly name. If no transformer is available, the <code>assemblyName</code> parameter value is returned unchanged. The <xref:System.Configuration.Configuration.TypeStringTransformer*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no transformer is available.\n  overload: System.Configuration.ConfigurationElement.GetTransformedAssemblyString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  id: GetTransformedTypeString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: GetTransformedTypeString(String)\n  nameWithType: ConfigurationElement.GetTransformedTypeString(String)\n  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Returns the transformed version of the specified type name.\n  remarks: The <xref:System.Configuration.ConfigurationElement.SerializeElement%2A> method and the <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> method call this method in order to transform a type name when an earlier version of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] is targeted.\n  syntax:\n    content: protected virtual string GetTransformedTypeString (string typeName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The name of the type.\n    return:\n      type: System.String\n      description: The transformed version of the specified type name. If no transformer is available, the <code>typeName</code> parameter value is returned unchanged. The <xref:System.Configuration.Configuration.TypeStringTransformer*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no transformer is available.\n  overload: System.Configuration.ConfigurationElement.GetTransformedTypeString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.HasContext\n  id: HasContext\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: HasContext\n  nameWithType: ConfigurationElement.HasContext\n  fullName: System.Configuration.ConfigurationElement.HasContext\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value that indicates whether the <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  syntax:\n    content: protected bool HasContext { get; }\n    return:\n      type: System.Boolean\n      description: false if the <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.HasContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Init\n  id: Init\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Init()\n  nameWithType: ConfigurationElement.Init()\n  fullName: System.Configuration.ConfigurationElement.Init()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Sets the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object to its initial state.\n  syntax:\n    content: protected virtual void Init ();\n    parameters: []\n  overload: System.Configuration.ConfigurationElement.Init*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.InitializeDefault\n  id: InitializeDefault\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: InitializeDefault()\n  nameWithType: ConfigurationElement.InitializeDefault()\n  fullName: System.Configuration.ConfigurationElement.InitializeDefault()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Used to initialize a default set of values for the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object.\n  remarks: Called to set the internal state of the object to appropriate default values.\n  syntax:\n    content: protected virtual void InitializeDefault ();\n    parameters: []\n  overload: System.Configuration.ConfigurationElement.InitializeDefault*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.IsModified\n  id: IsModified\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: IsModified()\n  nameWithType: ConfigurationElement.IsModified()\n  fullName: System.Configuration.ConfigurationElement.IsModified()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Indicates whether this configuration element has been modified since it was last saved or loaded, when implemented in a derived class.\n  remarks: \"The IsModified method determines whether this <xref:System.Configuration.ConfigurationElement> object will be written to the configuration file when the <xref:System.Configuration.Configuration.Save%2A> method is called. If the return value is `false`, it is assumed that the configuration file represents the current state of the element.  \\n  \\n By default, IsModified returns `true` after a property is set through the indexer to this <xref:System.Configuration.ConfigurationElement> object.  \\n  \\n Override the IsModified method to provide custom indication of the state of this <xref:System.Configuration.ConfigurationElement> element.\"\n  example:\n  - \"The following example shows how to extend IsModified.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#35](~/add/codesnippet/csharp/m-system.configuration.c_9_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#35](~/add/codesnippet/visualbasic/m-system.configuration.c_9_1.vb)]  \\n  \\n The method shown in the previous example is called when a configuration element is modified, as in the following example.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#6](~/add/codesnippet/csharp/m-system.configuration.c_9_2.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#6](~/add/codesnippet/visualbasic/m-system.configuration.c_9_2.vb)]\"\n  syntax:\n    content: protected virtual bool IsModified ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element has been modified; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.IsModified*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.IsReadOnly\n  id: IsReadOnly\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: IsReadOnly()\n  nameWithType: ConfigurationElement.IsReadOnly()\n  fullName: System.Configuration.ConfigurationElement.IsReadOnly()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value indicating whether the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object is read-only.\n  remarks: \"The system defines configuration elements that cannot be modified.  \\n  \\n To determine which elements can be modified, use the IsReadOnly method.\"\n  example:\n  - \"The following example shows how to use the IsReadOnly method. It is used on a custom section and returns `false`.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#7](~/add/codesnippet/csharp/m-system.configuration.c_12_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#7](~/add/codesnippet/visualbasic/m-system.configuration.c_12_1.vb)]\"\n  syntax:\n    content: public virtual bool IsReadOnly ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  id: Item(System.Configuration.ConfigurationProperty)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Item(ConfigurationProperty)\n  nameWithType: ConfigurationElement.Item(ConfigurationProperty)\n  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets or sets a property or attribute of this configuration element.\n  remarks: \"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.  \\n  \\n In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class.\"\n  syntax:\n    content: protected object this[System.Configuration.ConfigurationProperty prop] { get; set; }\n    parameters:\n    - id: prop\n      type: System.Configuration.ConfigurationProperty\n      description: The property to access.\n    return:\n      type: System.Object\n      description: The specified property, attribute, or child element.\n  overload: System.Configuration.ConfigurationElement.Item*\n  exceptions:\n  - type: System.Configuration.ConfigurationException\n    commentId: T:System.Configuration.ConfigurationException\n    description: <code>prop</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or does not exist within the element.\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: <code>prop</code> is read only or locked.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Item(System.String)\n  id: Item(System.String)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: ConfigurationElement.Item(String)\n  fullName: System.Configuration.ConfigurationElement.Item(String)\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets or sets a property, attribute, or child element of this configuration element.\n  remarks: \"Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.  \\n  \\n In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class.\"\n  syntax:\n    content: protected object this[string propertyName] { get; set; }\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: The name of the <xref href=\"System.Configuration.ConfigurationProperty\"></xref> to access.\n    return:\n      type: System.Object\n      description: The specified property, attribute, or child element\n  overload: System.Configuration.ConfigurationElement.Item*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: <code>prop</code> is read-only or locked.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  id: ListErrors(System.Collections.IList)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: ListErrors(IList)\n  nameWithType: ConfigurationElement.ListErrors(IList)\n  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Adds the invalid-property errors in this <xref href=\"System.Configuration.ConfigurationElement\"></xref> object, and in all subelements, to the passed list.\n  syntax:\n    content: protected virtual void ListErrors (System.Collections.IList errorList);\n    parameters:\n    - id: errorList\n      type: System.Collections.IList\n      description: An object that implements the <xref:System.Collections.IList> interface.\n  overload: System.Configuration.ConfigurationElement.ListErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  id: LockAllAttributesExcept\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: LockAllAttributesExcept\n  nameWithType: ConfigurationElement.LockAllAttributesExcept\n  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the collection of locked attributes.\n  remarks: \"The LockAllAttributesExcept property allows you to lock all the attributes at once, with the exception of the one you specify. To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section.  \\n  \\n> [!NOTE]\\n>  The LockAllAttributesExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the parent element itself and its child elements.\"\n  example:\n  - \"The following example shows how to use the LockAllAttributesExcept.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#9](~/add/codesnippet/csharp/p-system.configuration.c_59_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#9](~/add/codesnippet/visualbasic/p-system.configuration.c_59_1.vb)]\"\n  syntax:\n    content: public System.Configuration.ConfigurationLockCollection LockAllAttributesExcept { get; }\n    return:\n      type: System.Configuration.ConfigurationLockCollection\n      description: The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked attributes (properties) for the element.\n  overload: System.Configuration.ConfigurationElement.LockAllAttributesExcept*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept\n  id: LockAllElementsExcept\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: LockAllElementsExcept\n  nameWithType: ConfigurationElement.LockAllElementsExcept\n  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the collection of locked elements.\n  remarks: \"The LockAllElementsExcept property allows you to lock all the elements at once, except for the one you specify.  \\n  \\n> [!NOTE]\\n>  The LockAllElementsExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the element itself and its child elements.\"\n  example:\n  - \"The following example shows how to use the LockAllElementsExcept property.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#5](~/add/codesnippet/csharp/p-system.configuration.c_3_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#5](~/add/codesnippet/visualbasic/p-system.configuration.c_3_1.vb)]\"\n  syntax:\n    content: public System.Configuration.ConfigurationLockCollection LockAllElementsExcept { get; }\n    return:\n      type: System.Configuration.ConfigurationLockCollection\n      description: The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked elements.\n  overload: System.Configuration.ConfigurationElement.LockAllElementsExcept*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.LockAttributes\n  id: LockAttributes\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: LockAttributes\n  nameWithType: ConfigurationElement.LockAttributes\n  fullName: System.Configuration.ConfigurationElement.LockAttributes\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the collection of locked attributes\n  remarks: \"The LockAttributes property allows you to lock all the attributes you specify.  \\n  \\n To do that you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section.  \\n  \\n> [!NOTE]\\n>  The LockAttributes property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements.\"\n  example:\n  - \"The following example shows how to use the LockAttributes property.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#8](~/add/codesnippet/csharp/p-system.configuration.c_45_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#8](~/add/codesnippet/visualbasic/p-system.configuration.c_45_1.vb)]\"\n  syntax:\n    content: public System.Configuration.ConfigurationLockCollection LockAttributes { get; }\n    return:\n      type: System.Configuration.ConfigurationLockCollection\n      description: The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked attributes (properties) for the element.\n  overload: System.Configuration.ConfigurationElement.LockAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.LockElements\n  id: LockElements\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: LockElements\n  nameWithType: ConfigurationElement.LockElements\n  fullName: System.Configuration.ConfigurationElement.LockElements\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the collection of locked elements.\n  remarks: \"The LockElements property allows you to lock all the elements you specify.  \\n  \\n To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the next example.  \\n  \\n> [!NOTE]\\n>  The LockElements property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements.\"\n  example:\n  - \"The following example shows how to use the LockElements property.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#4](~/add/codesnippet/csharp/p-system.configuration.c_11_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#4](~/add/codesnippet/visualbasic/p-system.configuration.c_11_1.vb)]\"\n  syntax:\n    content: public System.Configuration.ConfigurationLockCollection LockElements { get; }\n    return:\n      type: System.Configuration.ConfigurationLockCollection\n      description: The <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> of locked elements.\n  overload: System.Configuration.ConfigurationElement.LockElements*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.LockItem\n  id: LockItem\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: LockItem\n  nameWithType: ConfigurationElement.LockItem\n  fullName: System.Configuration.ConfigurationElement.LockItem\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets or sets a value indicating whether the element is locked.\n  remarks: Use the LockItem property if you want to put a general lock on the element itself and its child elements.\n  example:\n  - \"The following example shows how to use the LockItem.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#3](~/add/codesnippet/csharp/p-system.configuration.c_20_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#3](~/add/codesnippet/visualbasic/p-system.configuration.c_20_1.vb)]\"\n  syntax:\n    content: public bool LockItem { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element is locked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.LockItem*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The element has already been locked at a higher configuration level.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  id: OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: OnDeserializeUnrecognizedAttribute(String,String)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)\n  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value indicating whether an unknown attribute is encountered during deserialization.\n  remarks: The OnDeserializeUnrecognizedAttribute is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.\n  syntax:\n    content: protected virtual bool OnDeserializeUnrecognizedAttribute (string name, string value);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the unrecognized attribute.\n    - id: value\n      type: System.String\n      description: The value of the unrecognized attribute.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when an unknown attribute is encountered while deserializing; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  id: OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: OnDeserializeUnrecognizedElement(String,XmlReader)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)\n  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value indicating whether an unknown element is encountered during deserialization.\n  remarks: The OnDeserializeUnrecognizedElement is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.\n  syntax:\n    content: protected virtual bool OnDeserializeUnrecognizedElement (string elementName, System.Xml.XmlReader reader);\n    parameters:\n    - id: elementName\n      type: System.String\n      description: The name of the unknown subelement.\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> being used for deserialization.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when an unknown element is encountered while deserializing; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: \"The element identified by <code>elementName</code> is locked.  \\n  \\n \\\\- or -  \\n  \\n One or more of the element's attributes is locked.  \\n  \\n \\\\- or -  \\n  \\n <code>elementName</code> is unrecognized, or the element has an unrecognized attribute.  \\n  \\n \\\\- or -  \\n  \\n The element has a Boolean attribute with an invalid value.  \\n  \\n \\\\- or -  \\n  \\n An attempt was made to deserialize a property more than once.  \\n  \\n \\\\- or -  \\n  \\n An attempt was made to deserialize a property that is not a valid member of the element.  \\n  \\n \\\\- or -  \\n  \\n The element cannot contain a CDATA or text element.\"\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  id: OnRequiredPropertyNotFound(System.String)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: OnRequiredPropertyNotFound(String)\n  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)\n  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Throws an exception when a required property is not found.\n  remarks: The <xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A> is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.\n  syntax:\n    content: protected virtual object OnRequiredPropertyNotFound (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the required attribute that was not found.\n    return:\n      type: System.Object\n      description: None.\n  overload: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.PostDeserialize\n  id: PostDeserialize\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: PostDeserialize()\n  nameWithType: ConfigurationElement.PostDeserialize()\n  fullName: System.Configuration.ConfigurationElement.PostDeserialize()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Called after deserialization.\n  syntax:\n    content: protected virtual void PostDeserialize ();\n    parameters: []\n  overload: System.Configuration.ConfigurationElement.PostDeserialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  id: PreSerialize(System.Xml.XmlWriter)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: PreSerialize(XmlWriter)\n  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)\n  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Called before serialization.\n  syntax:\n    content: protected virtual void PreSerialize (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> that will be used to serialize the <xref href=\"System.Configuration.ConfigurationElement\"></xref>.\n  overload: System.Configuration.ConfigurationElement.PreSerialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Properties\n  id: Properties\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: ConfigurationElement.Properties\n  fullName: System.Configuration.ConfigurationElement.Properties\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the collection of properties.\n  remarks: The Properties property, also called the property bag, contains all the properties (attributes) that apply to the element.\n  example:\n  - For an example that shows how to use the Properties property, refer to the <xref:System.Configuration.ConfigurationProperty> class.\n  syntax:\n    content: protected virtual System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: The <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> of properties for the element.\n  overload: System.Configuration.ConfigurationElement.Properties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  id: Reset(System.Configuration.ConfigurationElement)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Reset(ConfigurationElement)\n  nameWithType: ConfigurationElement.Reset(ConfigurationElement)\n  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Resets the internal state of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object, including the locks and the properties collections.\n  syntax:\n    content: protected virtual void Reset (System.Configuration.ConfigurationElement parentElement);\n    parameters:\n    - id: parentElement\n      type: System.Configuration.ConfigurationElement\n      description: The parent node of the configuration element.\n  overload: System.Configuration.ConfigurationElement.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.ResetModified\n  id: ResetModified\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: ResetModified()\n  nameWithType: ConfigurationElement.ResetModified()\n  fullName: System.Configuration.ConfigurationElement.ResetModified()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Resets the value of the <xref:System.Configuration.ConfigurationElement.IsModified*> method to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when implemented in a derived class.\n  remarks: The ResetModified method is automatically called after changes to this <xref:System.Configuration.ConfigurationElement> object have been written to the configuration file.\n  syntax:\n    content: protected virtual void ResetModified ();\n    parameters: []\n  overload: System.Configuration.ConfigurationElement.ResetModified*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  id: SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: SerializeElement(XmlWriter,Boolean)\n  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)\n  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Writes the contents of this configuration element to the configuration file when implemented in a derived class.\n  remarks: ''\n  example:\n  - \"The following example shows how to extend the SerializeElement method.  \\n  \\n [!code-cs[System.Configuration.ConfigurationElement#34](~/add/codesnippet/csharp/640dc581-4dbf-4d04-aba6-_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationElement#34](~/add/codesnippet/visualbasic/640dc581-4dbf-4d04-aba6-_1.vb)]\"\n  syntax:\n    content: protected virtual bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> that writes to the configuration file.\n    - id: serializeCollectionKey\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to serialize only the collection key properties; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any data was actually serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.SerializeElement*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The current attribute is locked at a higher configuration level.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  id: SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: SerializeToXmlElement(XmlWriter,String)\n  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)\n  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Writes the outer tags of this configuration element to the configuration file when implemented in a derived class.\n  remarks: The SerializeToXmlElement method is called after the call to the <xref:System.Configuration.ConfigurationElement.Unmerge%2A> method during serialization. The SerializeToXmlElement method writes out the contents of the configuration element between the beginning and ending tags of the element. Override SerializeToXmlElement to provide a custom serialization method.\n  syntax:\n    content: protected virtual bool SerializeToXmlElement (System.Xml.XmlWriter writer, string elementName);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> that writes to the configuration file.\n    - id: elementName\n      type: System.String\n      description: The name of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> to be written.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if writing was successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.SerializeToXmlElement*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: The element has multiple child elements.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  id: SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)\n  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)\n  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Sets a property to the specified value.\n  syntax:\n    content: protected void SetPropertyValue (System.Configuration.ConfigurationProperty prop, object value, bool ignoreLocks);\n    parameters:\n    - id: prop\n      type: System.Configuration.ConfigurationProperty\n      description: The element property to set.\n    - id: value\n      type: System.Object\n      description: The value to assign to the property.\n    - id: ignoreLocks\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the locks on the property should be ignored; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationElement.SetPropertyValue*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: Occurs if the element is read-only or <code>ignoreLocks</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> but the locks cannot be ignored.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.SetReadOnly\n  id: SetReadOnly\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: SetReadOnly()\n  nameWithType: ConfigurationElement.SetReadOnly()\n  fullName: System.Configuration.ConfigurationElement.SetReadOnly()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Sets the <xref:System.Configuration.ConfigurationElement.IsReadOnly*> property for the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object and all subelements.\n  remarks: \"This method is used internally to set aside those system-configuration elements that cannot be modified.  \\n  \\n To determine which elements can be modified, use the <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A> method.\"\n  syntax:\n    content: protected virtual void SetReadOnly ();\n    parameters: []\n  overload: System.Configuration.ConfigurationElement.SetReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  id: Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  parent: System.Configuration.ConfigurationElement\n  langs:\n  - csharp\n  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)\n  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)\n  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Modifies the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object to remove all values that should not be saved.\n  remarks: This method is called before the <xref:System.Configuration.ConfigurationElement> object is saved by the <xref:System.Configuration.Configuration> object in order to remove all unneeded properties.\n  syntax:\n    content: protected virtual void Unmerge (System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode);\n    parameters:\n    - id: sourceElement\n      type: System.Configuration.ConfigurationElement\n      description: A <xref href=\"System.Configuration.ConfigurationElement\"></xref> at the current level containing a merged view of the properties.\n    - id: parentElement\n      type: System.Configuration.ConfigurationElement\n      description: The parent <xref href=\"System.Configuration.ConfigurationElement\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this is the top level.\n    - id: saveMode\n      type: System.Configuration.ConfigurationSaveMode\n      description: A <xref href=\"System.Configuration.ConfigurationSaveMode\"></xref> that determines which property values to include.\n  overload: System.Configuration.ConfigurationElement.Unmerge*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Configuration.ConfigurationErrorsException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationErrorsException\n  nameWithType: ConfigurationErrorsException\n  fullName: System.Configuration.ConfigurationErrorsException\n- uid: System.Configuration.ConfigurationException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationException\n  nameWithType: ConfigurationException\n  fullName: System.Configuration.ConfigurationException\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.Configuration.ConfigurationElement.#ctor\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ConfigurationElement()\n  nameWithType: ConfigurationElement.ConfigurationElement()\n  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()\n- uid: System.Configuration.ConfigurationElement.CurrentConfiguration\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: CurrentConfiguration\n  nameWithType: ConfigurationElement.CurrentConfiguration\n  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration\n- uid: System.Configuration.Configuration\n  parent: System.Configuration\n  isExternal: false\n  name: Configuration\n  nameWithType: Configuration\n  fullName: System.Configuration.Configuration\n- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: DeserializeElement(XmlReader,Boolean)\n  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)\n  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Configuration.ConfigurationElement.ElementInformation\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementInformation\n  nameWithType: ConfigurationElement.ElementInformation\n  fullName: System.Configuration.ConfigurationElement.ElementInformation\n- uid: System.Configuration.ElementInformation\n  parent: System.Configuration\n  isExternal: false\n  name: ElementInformation\n  nameWithType: ElementInformation\n  fullName: System.Configuration.ElementInformation\n- uid: System.Configuration.ConfigurationElement.ElementProperty\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementProperty\n  nameWithType: ConfigurationElement.ElementProperty\n  fullName: System.Configuration.ConfigurationElement.ElementProperty\n- uid: System.Configuration.ConfigurationElementProperty\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationElementProperty\n  nameWithType: ConfigurationElementProperty\n  fullName: System.Configuration.ConfigurationElementProperty\n- uid: System.Configuration.ConfigurationElement.Equals(System.Object)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ConfigurationElement.Equals(Object)\n  fullName: System.Configuration.ConfigurationElement.Equals(Object)\n- uid: System.Configuration.ConfigurationElement.EvaluationContext\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: EvaluationContext\n  nameWithType: ConfigurationElement.EvaluationContext\n  fullName: System.Configuration.ConfigurationElement.EvaluationContext\n- uid: System.Configuration.ContextInformation\n  parent: System.Configuration\n  isExternal: false\n  name: ContextInformation\n  nameWithType: ContextInformation\n  fullName: System.Configuration.ContextInformation\n- uid: System.Configuration.ConfigurationElement.GetHashCode\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ConfigurationElement.GetHashCode()\n  fullName: System.Configuration.ConfigurationElement.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedAssemblyString(String)\n  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)\n  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedTypeString(String)\n  nameWithType: ConfigurationElement.GetTransformedTypeString(String)\n  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)\n- uid: System.Configuration.ConfigurationElement.HasContext\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: HasContext\n  nameWithType: ConfigurationElement.HasContext\n  fullName: System.Configuration.ConfigurationElement.HasContext\n- uid: System.Configuration.ConfigurationElement.Init\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Init()\n  nameWithType: ConfigurationElement.Init()\n  fullName: System.Configuration.ConfigurationElement.Init()\n- uid: System.Configuration.ConfigurationElement.InitializeDefault\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: InitializeDefault()\n  nameWithType: ConfigurationElement.InitializeDefault()\n  fullName: System.Configuration.ConfigurationElement.InitializeDefault()\n- uid: System.Configuration.ConfigurationElement.IsModified\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsModified()\n  nameWithType: ConfigurationElement.IsModified()\n  fullName: System.Configuration.ConfigurationElement.IsModified()\n- uid: System.Configuration.ConfigurationElement.IsReadOnly\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsReadOnly()\n  nameWithType: ConfigurationElement.IsReadOnly()\n  fullName: System.Configuration.ConfigurationElement.IsReadOnly()\n- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item(ConfigurationProperty)\n  nameWithType: ConfigurationElement.Item(ConfigurationProperty)\n  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)\n- uid: System.Configuration.ConfigurationProperty\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationProperty\n  nameWithType: ConfigurationProperty\n  fullName: System.Configuration.ConfigurationProperty\n- uid: System.Configuration.ConfigurationElement.Item(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item(String)\n  nameWithType: ConfigurationElement.Item(String)\n  fullName: System.Configuration.ConfigurationElement.Item(String)\n- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ListErrors(IList)\n  nameWithType: ConfigurationElement.ListErrors(IList)\n  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllAttributesExcept\n  nameWithType: ConfigurationElement.LockAllAttributesExcept\n  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept\n- uid: System.Configuration.ConfigurationLockCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationLockCollection\n  nameWithType: ConfigurationLockCollection\n  fullName: System.Configuration.ConfigurationLockCollection\n- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllElementsExcept\n  nameWithType: ConfigurationElement.LockAllElementsExcept\n  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept\n- uid: System.Configuration.ConfigurationElement.LockAttributes\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAttributes\n  nameWithType: ConfigurationElement.LockAttributes\n  fullName: System.Configuration.ConfigurationElement.LockAttributes\n- uid: System.Configuration.ConfigurationElement.LockElements\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockElements\n  nameWithType: ConfigurationElement.LockElements\n  fullName: System.Configuration.ConfigurationElement.LockElements\n- uid: System.Configuration.ConfigurationElement.LockItem\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockItem\n  nameWithType: ConfigurationElement.LockItem\n  fullName: System.Configuration.ConfigurationElement.LockItem\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedAttribute(String,String)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)\n  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedElement(String,XmlReader)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)\n  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)\n- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnRequiredPropertyNotFound(String)\n  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)\n  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)\n- uid: System.Configuration.ConfigurationElement.PostDeserialize\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PostDeserialize()\n  nameWithType: ConfigurationElement.PostDeserialize()\n  fullName: System.Configuration.ConfigurationElement.PostDeserialize()\n- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PreSerialize(XmlWriter)\n  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)\n  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Configuration.ConfigurationElement.Properties\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Properties\n  nameWithType: ConfigurationElement.Properties\n  fullName: System.Configuration.ConfigurationElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Reset(ConfigurationElement)\n  nameWithType: ConfigurationElement.Reset(ConfigurationElement)\n  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)\n- uid: System.Configuration.ConfigurationElement\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationElement\n  nameWithType: ConfigurationElement\n  fullName: System.Configuration.ConfigurationElement\n- uid: System.Configuration.ConfigurationElement.ResetModified\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ResetModified()\n  nameWithType: ConfigurationElement.ResetModified()\n  fullName: System.Configuration.ConfigurationElement.ResetModified()\n- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeElement(XmlWriter,Boolean)\n  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)\n  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)\n- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeToXmlElement(XmlWriter,String)\n  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)\n  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)\n- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)\n  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)\n  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)\n- uid: System.Configuration.ConfigurationElement.SetReadOnly\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetReadOnly()\n  nameWithType: ConfigurationElement.SetReadOnly()\n  fullName: System.Configuration.ConfigurationElement.SetReadOnly()\n- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)\n  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)\n  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)\n- uid: System.Configuration.ConfigurationSaveMode\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationSaveMode\n  nameWithType: ConfigurationSaveMode\n  fullName: System.Configuration.ConfigurationSaveMode\n- uid: System.Configuration.ConfigurationElement.#ctor*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ConfigurationElement\n  nameWithType: ConfigurationElement.ConfigurationElement\n- uid: System.Configuration.ConfigurationElement.CurrentConfiguration*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: CurrentConfiguration\n  nameWithType: ConfigurationElement.CurrentConfiguration\n- uid: System.Configuration.ConfigurationElement.DeserializeElement*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: DeserializeElement\n  nameWithType: ConfigurationElement.DeserializeElement\n- uid: System.Configuration.ConfigurationElement.ElementInformation*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementInformation\n  nameWithType: ConfigurationElement.ElementInformation\n- uid: System.Configuration.ConfigurationElement.ElementProperty*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementProperty\n  nameWithType: ConfigurationElement.ElementProperty\n- uid: System.Configuration.ConfigurationElement.Equals*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Equals\n  nameWithType: ConfigurationElement.Equals\n- uid: System.Configuration.ConfigurationElement.EvaluationContext*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: EvaluationContext\n  nameWithType: ConfigurationElement.EvaluationContext\n- uid: System.Configuration.ConfigurationElement.GetHashCode*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ConfigurationElement.GetHashCode\n- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedAssemblyString\n  nameWithType: ConfigurationElement.GetTransformedAssemblyString\n- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedTypeString\n  nameWithType: ConfigurationElement.GetTransformedTypeString\n- uid: System.Configuration.ConfigurationElement.HasContext*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: HasContext\n  nameWithType: ConfigurationElement.HasContext\n- uid: System.Configuration.ConfigurationElement.Init*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Init\n  nameWithType: ConfigurationElement.Init\n- uid: System.Configuration.ConfigurationElement.InitializeDefault*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: InitializeDefault\n  nameWithType: ConfigurationElement.InitializeDefault\n- uid: System.Configuration.ConfigurationElement.IsModified*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsModified\n  nameWithType: ConfigurationElement.IsModified\n- uid: System.Configuration.ConfigurationElement.IsReadOnly*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ConfigurationElement.IsReadOnly\n- uid: System.Configuration.ConfigurationElement.Item*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item\n  nameWithType: ConfigurationElement.Item\n- uid: System.Configuration.ConfigurationElement.ListErrors*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ListErrors\n  nameWithType: ConfigurationElement.ListErrors\n- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllAttributesExcept\n  nameWithType: ConfigurationElement.LockAllAttributesExcept\n- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllElementsExcept\n  nameWithType: ConfigurationElement.LockAllElementsExcept\n- uid: System.Configuration.ConfigurationElement.LockAttributes*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAttributes\n  nameWithType: ConfigurationElement.LockAttributes\n- uid: System.Configuration.ConfigurationElement.LockElements*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockElements\n  nameWithType: ConfigurationElement.LockElements\n- uid: System.Configuration.ConfigurationElement.LockItem*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockItem\n  nameWithType: ConfigurationElement.LockItem\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedAttribute\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedElement\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement\n- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnRequiredPropertyNotFound\n  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound\n- uid: System.Configuration.ConfigurationElement.PostDeserialize*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PostDeserialize\n  nameWithType: ConfigurationElement.PostDeserialize\n- uid: System.Configuration.ConfigurationElement.PreSerialize*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PreSerialize\n  nameWithType: ConfigurationElement.PreSerialize\n- uid: System.Configuration.ConfigurationElement.Properties*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Properties\n  nameWithType: ConfigurationElement.Properties\n- uid: System.Configuration.ConfigurationElement.Reset*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Reset\n  nameWithType: ConfigurationElement.Reset\n- uid: System.Configuration.ConfigurationElement.ResetModified*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ResetModified\n  nameWithType: ConfigurationElement.ResetModified\n- uid: System.Configuration.ConfigurationElement.SerializeElement*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeElement\n  nameWithType: ConfigurationElement.SerializeElement\n- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeToXmlElement\n  nameWithType: ConfigurationElement.SerializeToXmlElement\n- uid: System.Configuration.ConfigurationElement.SetPropertyValue*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetPropertyValue\n  nameWithType: ConfigurationElement.SetPropertyValue\n- uid: System.Configuration.ConfigurationElement.SetReadOnly*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetReadOnly\n  nameWithType: ConfigurationElement.SetReadOnly\n- uid: System.Configuration.ConfigurationElement.Unmerge*\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Unmerge\n  nameWithType: ConfigurationElement.Unmerge\n"}