{"nodes":[{"pos":[1491,1691],"content":"Provides the ability to iterate through subpaths in a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> and test the types of shapes contained in each subpath. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the ability to iterate through subpaths in a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and test the types of shapes contained in each subpath.","pos":[0,168],"source":"Provides the ability to iterate through subpaths in a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> and test the types of shapes contained in each subpath."},{"content":"This class cannot be inherited.","pos":[169,200]}]},{"pos":[2695,2887],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object."},{"pos":[3085,3204],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for which this helper class is to be initialized.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object for which this helper class is to be initialized."},{"pos":[3911,4171],"content":"Copies the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints<bpt id=\"p1\">*</bpt>&gt; property and &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes<ept id=\"p1\">*</ept>&gt; property arrays of the associated <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> into the two specified arrays.","needQuote":true,"needEscape":true,"source":"Copies the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> property and <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> property arrays of the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into the two specified arrays."},{"pos":[4183,4273],"content":"Use the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`endIndex`</ph> parameters to copy a specified range of the path data.","needQuote":true,"needEscape":true,"source":"Use the `startIndex` and `endIndex` parameters to copy a specified range of the path data."},{"pos":[5641,5768],"content":"Upon return, contains an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points in the path.","needQuote":true,"needEscape":true,"source":"Upon return, contains an array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points in the path."},{"pos":[5830,5918],"content":"Upon return, contains an array of bytes that represents the types of points in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Upon return, contains an array of bytes that represents the types of points in the path.","pos":[0,88]}]},{"pos":[5984,6027],"content":"Specifies the starting index of the arrays.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the starting index of the arrays.","pos":[0,43]}]},{"pos":[6091,6132],"content":"Specifies the ending index of the arrays.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the ending index of the arrays.","pos":[0,41]}]},{"pos":[6189,6217],"content":"The number of points copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of points copied.","pos":[0,28]}]},{"pos":[6693,6731],"content":"Gets the number of points in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of points in the path.","pos":[0,38]}]},{"pos":[6837,6870],"content":"The number of points in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of points in the path.","pos":[0,33]}]},{"pos":[7357,7467],"content":"Releases all resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> object."},{"pos":[7479,7628],"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by this &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator&gt; object to be reallocated for other purposes.","needQuote":true,"needEscape":true,"source":"Calling `Dispose` allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object to be reallocated for other purposes."},{"pos":[8320,8580],"content":"Copies the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints<bpt id=\"p1\">*</bpt>&gt; property and &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes<ept id=\"p1\">*</ept>&gt; property arrays of the associated <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> into the two specified arrays.","needQuote":true,"needEscape":true,"source":"Copies the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> property and <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> property arrays of the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into the two specified arrays."},{"pos":[9894,10021],"content":"Upon return, contains an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points in the path.","needQuote":true,"needEscape":true,"source":"Upon return, contains an array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points in the path."},{"pos":[10083,10171],"content":"Upon return, contains an array of bytes that represents the types of points in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Upon return, contains an array of bytes that represents the types of points in the path.","pos":[0,88]}]},{"pos":[10228,10256],"content":"The number of points copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of points copied.","pos":[0,28]}]},{"pos":[10752,10876],"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","pos":[0,124]}]},{"pos":[11439,11571],"content":"Indicates whether the path associated with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a curve.","needQuote":true,"needEscape":true,"source":"Indicates whether the path associated with this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> contains a curve."},{"pos":[11584,12742],"content":"All curves in a path are stored as sequences of Bézier splines. For example, when you add an ellipse to a path, you specify the upper-left corner, the width, and the height of the ellipse's bounding rectangle. Those numbers (upper-left corner, width, and height) are not stored in the path; instead; the ellipse is converted to a sequence of four Bézier splines. The path stores the endpoints and control points of those Bézier splines.       A path stores an array of data points, each of which belongs to a line or a Bézier spline. If some of the points in the array belong to Bézier splines, then HasCurve returns `true`. If all points in the array belong to lines, then HasCurve returns `false`.       Certain methods flatten a path, which means that all the curves in the path are converted to sequences of lines. After a path has been flattened, HasCurve will always return `false`. Calling the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, or <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> method of the <xref:System.Drawing.Drawing2D.GraphicsPath> class will flatten a path.","needQuote":false,"needEscape":true,"nodes":[{"content":"All curves in a path are stored as sequences of Bézier splines.","pos":[0,63]},{"content":"For example, when you add an ellipse to a path, you specify the upper-left corner, the width, and the height of the ellipse's bounding rectangle.","pos":[64,209]},{"content":"Those numbers (upper-left corner, width, and height) are not stored in the path; instead; the ellipse is converted to a sequence of four Bézier splines.","pos":[210,362]},{"content":"The path stores the endpoints and control points of those Bézier splines.","pos":[363,436]},{"content":"A path stores an array of data points, each of which belongs to a line or a Bézier spline.","pos":[443,533]},{"content":"If some of the points in the array belong to Bézier splines, then HasCurve returns <ph id=\"ph1\">`true`</ph>.","pos":[534,624],"source":" If some of the points in the array belong to Bézier splines, then HasCurve returns `true`."},{"content":"If all points in the array belong to lines, then HasCurve returns <ph id=\"ph1\">`false`</ph>.","pos":[625,699],"source":" If all points in the array belong to lines, then HasCurve returns `false`."},{"content":"Certain methods flatten a path, which means that all the curves in the path are converted to sequences of lines.","pos":[706,818]},{"content":"After a path has been flattened, HasCurve will always return <ph id=\"ph1\">`false`</ph>.","pos":[819,888],"source":" After a path has been flattened, HasCurve will always return `false`."},{"content":"Calling the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A&gt;, &lt;xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A&gt;, or &lt;xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A&gt; method of the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt; class will flatten a path.","pos":[889,1154],"source":" Calling the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, or <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> method of the <xref:System.Drawing.Drawing2D.GraphicsPath> class will flatten a path."}]},{"pos":[13873,14069],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current subpath contains a curve; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current subpath contains a curve; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14688,15202],"content":"This <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> object has a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object associated with it. The NextMarker method increments the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object passed in to the parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"This <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object associated with it.","pos":[0,170],"source":"This <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> object has a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object associated with it."},{"content":"The NextMarker method increments the associated <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object passed in to the parameter.","pos":[171,514],"source":" The NextMarker method increments the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object passed in to the parameter."}]},{"pos":[15214,15409],"content":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.","pos":[0,195],"nodes":[{"content":"Use the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A&gt; method to set markers in a path.","pos":[0,99],"source":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path."},{"content":"Markers are used to create groups of subpaths.","pos":[100,146]},{"content":"One or more subpaths can be between two markers.","pos":[147,195]}]}]},{"pos":[17009,17114],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to which the points will be copied.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object to which the points will be copied."},{"pos":[17171,17225],"content":"The number of points between this marker and the next.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of points between this marker and the next.","pos":[0,54]}]},{"pos":[17823,18006],"content":"Increments the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the next marker in the path and returns the start and stop indexes by way of the [out] parameters.","needQuote":true,"needEscape":true,"source":"Increments the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the next marker in the path and returns the start and stop indexes by way of the [out] parameters."},{"pos":[18018,18213],"content":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.","pos":[0,195],"nodes":[{"content":"Use the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A&gt; method to set markers in a path.","pos":[0,99],"source":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path."},{"content":"Markers are used to create groups of subpaths.","pos":[100,146]},{"content":"One or more subpaths can be between two markers.","pos":[147,195]}]}]},{"pos":[19572,19681],"content":"[out] The integer reference supplied to this parameter receives the index of the point that starts a subpath.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] The integer reference supplied to this parameter receives the index of the point that starts a subpath.","pos":[0,109]}]},{"pos":[19747,19885],"content":"[out] The integer reference supplied to this parameter receives the index of the point that ends the subpath to which <ph id=\"ph1\">`startIndex`</ph> points.","needQuote":false,"needEscape":true,"source":"[out] The integer reference supplied to this parameter receives the index of the point that ends the subpath to which `startIndex` points."},{"pos":[19943,19997],"content":"The number of points between this marker and the next.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of points between this marker and the next.","pos":[0,54]}]},{"pos":[20646,20752],"content":"Gets the starting index and the ending index of the next group of data points that all have the same type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the starting index and the ending index of the next group of data points that all have the same type.","pos":[0,106]}]},{"pos":[22379,22557],"content":"[out] Receives the point type shared by all points in the group. Possible types can be retrieved from the <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Receives the point type shared by all points in the group.","pos":[0,64]},{"content":"Possible types can be retrieved from the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","pos":[65,178],"source":" Possible types can be retrieved from the <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration."}]},{"pos":[22625,22682],"content":"[out] Receives the starting index of the group of points.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Receives the starting index of the group of points.","pos":[0,57]}]},{"pos":[22748,22803],"content":"[out] Receives the ending index of the group of points.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Receives the ending index of the group of points.","pos":[0,55]}]},{"pos":[22861,22984],"content":"This method returns the number of data points in the group. If there are no more groups in the path, this method returns 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method returns the number of data points in the group. If there are no more groups in the path, this method returns 0.","pos":[0,123],"nodes":[{"content":"This method returns the number of data points in the group.","pos":[0,59]},{"content":"If there are no more groups in the path, this method returns 0.","pos":[60,123]}]}]},{"pos":[23668,23799],"content":"Gets the next figure (subpath) from the associated path of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the next figure (subpath) from the associated path of this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref>."},{"pos":[25417,25591],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is to have its data points set to match the data points of the retrieved figure (subpath) for this iterator.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> that is to have its data points set to match the data points of the retrieved figure (subpath) for this iterator."},{"pos":[25658,25891],"content":"[out] Indicates whether the current subpath is closed. It is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the if the figure is closed, otherwise it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Indicates whether the current subpath is closed.","pos":[0,54]},{"content":"It is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the if the figure is closed, otherwise it is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[55,233],"source":" It is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the if the figure is closed, otherwise it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[25949,26069],"content":"The number of data points in the retrieved figure (subpath). If there are no more figures to retrieve, zero is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of data points in the retrieved figure (subpath). If there are no more figures to retrieve, zero is returned.","pos":[0,120],"nodes":[{"content":"The number of data points in the retrieved figure (subpath).","pos":[0,60]},{"content":"If there are no more figures to retrieve, zero is returned.","pos":[61,120]}]}]},{"pos":[26729,26927],"content":"Moves the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the next subpath in the path. The start index and end index of the next subpath are contained in the [out] parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the next subpath in the path.","pos":[0,109],"source":"Moves the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the next subpath in the path."},{"content":"The start index and end index of the next subpath are contained in the [out] parameters.","pos":[110,198]}]},{"pos":[28297,28351],"content":"[out] Receives the starting index of the next subpath.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Receives the starting index of the next subpath.","pos":[0,54]}]},{"pos":[28417,28469],"content":"[out] Receives the ending index of the next subpath.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Receives the ending index of the next subpath.","pos":[0,52]}]},{"pos":[28537,28583],"content":"[out] Indicates whether the subpath is closed.","needQuote":false,"needEscape":true,"nodes":[{"content":"[out] Indicates whether the subpath is closed.","pos":[0,46]}]},{"pos":[28641,28737],"content":"The number of subpaths in the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The number of subpaths in the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object."},{"pos":[29225,29345],"content":"Rewinds this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the beginning of its associated path.","needQuote":true,"needEscape":true,"source":"Rewinds this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the beginning of its associated path."},{"pos":[29357,29982],"content":"The first time you call the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> method of an iterator, it gets the first figure (subpath) of that iterator's associated path. The second time, it gets the second figure, and so on. When you call the Rewind method, the sequence starts over; that is, after you call Rewind, the next call to <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> gets the first figure in the path. The <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> and <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> methods behave similarly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first time you call the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> method of an iterator, it gets the first figure (subpath) of that iterator's associated path. The second time, it gets the second figure, and so on. When you call the Rewind method, the sequence starts over; that is, after you call Rewind, the next call to <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> gets the first figure in the path. The <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> and <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> methods behave similarly.","pos":[0,625],"nodes":[{"content":"The first time you call the &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A&gt; method of an iterator, it gets the first figure (subpath) of that iterator's associated path.","pos":[0,189],"source":"The first time you call the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> method of an iterator, it gets the first figure (subpath) of that iterator's associated path."},{"content":"The second time, it gets the second figure, and so on.","pos":[190,244]},{"content":"When you call the Rewind method, the sequence starts over; that is, after you call Rewind, the next call to &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A&gt; gets the first figure in the path.","pos":[245,455],"source":" When you call the Rewind method, the sequence starts over; that is, after you call Rewind, the next call to <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> gets the first figure in the path."},{"content":"The &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A&gt; and &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A&gt; methods behave similarly.","pos":[456,625],"source":" The <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> and <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> methods behave similarly."}]}]},{"pos":[30556,30596],"content":"Gets the number of subpaths in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of subpaths in the path.","pos":[0,40]}]},{"pos":[30709,30744],"content":"The number of subpaths in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of subpaths in the path.","pos":[0,35]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator\n  id: GraphicsPathIterator\n  children:\n  - System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.Count\n  - System.Drawing.Drawing2D.GraphicsPathIterator.Dispose\n  - System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.Finalize\n  - System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve\n  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)\n  - System.Drawing.Drawing2D.GraphicsPathIterator.Rewind\n  - System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount\n  langs:\n  - csharp\n  name: GraphicsPathIterator\n  nameWithType: GraphicsPathIterator\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator\n  type: Class\n  summary: Provides the ability to iterate through subpaths in a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> and test the types of shapes contained in each subpath. This class cannot be inherited.\n  syntax:\n    content: 'public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)\n  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath)'\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: GraphicsPathIterator(GraphicsPath)\n  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object.\n  syntax:\n    content: public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);\n    parameters:\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object for which this helper class is to be initialized.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)\n  id: CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: CopyData(PointF[],Byte[],Int32,Int32)\n  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Copies the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> property and <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> property arrays of the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into the two specified arrays.\n  remarks: Use the `startIndex` and `endIndex` parameters to copy a specified range of the path data.\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a graphics path.  \\n  \\n-   Populates it with several primitives and some markers.  \\n  \\n-   Lists the path data on the left side of the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \\n  \\n-   Increments the path data index to the second marker.  \\n  \\n-   Calls the CopyData method to copy the path data contained between the start and end indexes to the points and types arrays.  \\n  \\n-   Lists this copied data on the right side of the screen.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/visualbasic/b1ea0b64-123f-4dcb-86c3-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/cpp/b1ea0b64-123f-4dcb-86c3-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/csharp/b1ea0b64-123f-4dcb-86c3-_1.cs)]\"\n  syntax:\n    content: public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Upon return, contains an array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points in the path.\n    - id: types\n      type: System.Byte[]\n      description: Upon return, contains an array of bytes that represents the types of points in the path.\n    - id: startIndex\n      type: System.Int32\n      description: Specifies the starting index of the arrays.\n    - id: endIndex\n      type: System.Int32\n      description: Specifies the ending index of the arrays.\n    return:\n      type: System.Int32\n      description: The number of points copied.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count\n  id: Count\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: Count\n  nameWithType: GraphicsPathIterator.Count\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the number of points in the path.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of points in the path.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose\n  id: Dispose\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: GraphicsPathIterator.Dispose()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> object.\n  remarks: Calling `Dispose` allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object to be reallocated for other purposes.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)\n  id: Enumerate(System.Drawing.PointF[]@,System.Byte[]@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: Enumerate(PointF[],Byte[])\n  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Copies the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> property and <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> property arrays of the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into the two specified arrays.\n  remarks: ''\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a graphics path.  \\n  \\n-   Populates it with several primitives and some markers.  \\n  \\n-   Lists the path data on the left side of the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \\n  \\n-   Increments the path data index to the second marker.  \\n  \\n-   Calls the Enumerate method to copy the path data to the `points` and `types` arrays.  \\n  \\n-   Lists this copied data on the right side of the screen.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/visualbasic/5dbb8a2f-b3c5-4d23-b81d-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/cpp/5dbb8a2f-b3c5-4d23-b81d-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/csharp/5dbb8a2f-b3c5-4d23-b81d-_1.cs)]\"\n  syntax:\n    content: public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Upon return, contains an array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points in the path.\n    - id: types\n      type: System.Byte[]\n      description: Upon return, contains an array of bytes that represents the types of points in the path.\n    return:\n      type: System.Int32\n      description: The number of points copied.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize\n  id: Finalize\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: GraphicsPathIterator.Finalize()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.\n  syntax:\n    content: ~GraphicsPathIterator ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve\n  id: HasCurve\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: HasCurve()\n  nameWithType: GraphicsPathIterator.HasCurve()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the path associated with this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> contains a curve.\n  remarks: \"All curves in a path are stored as sequences of Bézier splines. For example, when you add an ellipse to a path, you specify the upper-left corner, the width, and the height of the ellipse's bounding rectangle. Those numbers (upper-left corner, width, and height) are not stored in the path; instead; the ellipse is converted to a sequence of four Bézier splines. The path stores the endpoints and control points of those Bézier splines.  \\n  \\n A path stores an array of data points, each of which belongs to a line or a Bézier spline. If some of the points in the array belong to Bézier splines, then HasCurve returns `true`. If all points in the array belong to lines, then HasCurve returns `false`.  \\n  \\n Certain methods flatten a path, which means that all the curves in the path are converted to sequences of lines. After a path has been flattened, HasCurve will always return `false`. Calling the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, or <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> method of the <xref:System.Drawing.Drawing2D.GraphicsPath> class will flatten a path.\"\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPath`.  \\n  \\n-   Adds three lines, a rectangle, and an ellipse.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object for `myPath`.  \\n  \\n-   Tests to see if the current path `myPath` contains a curve.  \\n  \\n-   Shows the result of the test in a message box.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_17_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/cpp/m-system.drawing.drawing_17_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/csharp/m-system.drawing.drawing_17_1.cs)]\"\n  syntax:\n    content: public bool HasCurve ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current subpath contains a curve; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)\n  id: NextMarker(System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: NextMarker(GraphicsPath)\n  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: This <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> object has a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object associated with it. The NextMarker method increments the associated <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object passed in to the parameter.\n  remarks: Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \\n  \\n-   Adds three lines, a rectangle, an ellipse, and two markers.  \\n  \\n-   Lists the values of all the path's points to the left side of the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \\n  \\n-   Calls the NextMarker method, which iterates to the first marker and copies all the points contained between that marker and the next to `myPathSection`.  \\n  \\n-   Returns the number of points copied to `markerPoints`.  \\n  \\n-   Lists the marker number (the first marker) and number of points it contains to the right side of the screen.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/visualbasic/8b47b275-716e-4cd3-9f07-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/cpp/8b47b275-716e-4cd3-9f07-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/csharp/8b47b275-716e-4cd3-9f07-_1.cs)]\"\n  syntax:\n    content: public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);\n    parameters:\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object to which the points will be copied.\n    return:\n      type: System.Int32\n      description: The number of points between this marker and the next.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)\n  id: NextMarker(System.Int32@,System.Int32@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: NextMarker(Int32,Int32)\n  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Increments the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the next marker in the path and returns the start and stop indexes by way of the [out] parameters.\n  remarks: Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \\n  \\n-   Adds three lines, a rectangle, and an ellipse ¾ with markers between each.  \\n  \\n-   Draws the values for the array of points to the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \\n  \\n-   Calls the NextMarker method.  \\n  \\n-   Uses the values returned from the iterative calls to NextMarker to draw the start and stop points for each marker to the screen.  \\n  \\n-   Draws the value for the total number of points to the screen.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/visualbasic/2a36a4b2-3946-4c96-a406-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/cpp/2a36a4b2-3946-4c96-a406-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/csharp/2a36a4b2-3946-4c96-a406-_1.cs)]\"\n  syntax:\n    content: public int NextMarker (out int startIndex, out int endIndex);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: '[out] The integer reference supplied to this parameter receives the index of the point that starts a subpath.'\n    - id: endIndex\n      type: System.Int32\n      description: '[out] The integer reference supplied to this parameter receives the index of the point that ends the subpath to which `startIndex` points.'\n    return:\n      type: System.Int32\n      description: The number of points between this marker and the next.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)\n  id: NextPathType(System.Byte@,System.Int32@,System.Int32@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: NextPathType(Byte,Int32,Int32)\n  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the starting index and the ending index of the next group of data points that all have the same type.\n  remarks: ''\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \\n  \\n-   Adds three lines, a rectangle, and an ellipse.  \\n  \\n-   Lists the values of all the points to the left side of the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \\n  \\n-   In a `for` loop, iterates through the points using the NextPathType and NextPathType methods.  \\n  \\n-   Uses the values returned from the iterative calls to list the subpath number, the number of points in it, and the type of the path points to the right side of the screen.  \\n  \\n-   Displays the value for the total number of points to the screen.  \\n  \\n Note that `ListPathPoints` is a helper function that separates most (not all) of the display code from the graphics path code.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/visualbasic/95680980-3c12-42ae-ac98-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/cpp/95680980-3c12-42ae-ac98-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/csharp/95680980-3c12-42ae-ac98-_1.cs)]\"\n  syntax:\n    content: public int NextPathType (out byte pathType, out int startIndex, out int endIndex);\n    parameters:\n    - id: pathType\n      type: System.Byte\n      description: '[out] Receives the point type shared by all points in the group. Possible types can be retrieved from the <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration.'\n    - id: startIndex\n      type: System.Int32\n      description: '[out] Receives the starting index of the group of points.'\n    - id: endIndex\n      type: System.Int32\n      description: '[out] Receives the ending index of the group of points.'\n    return:\n      type: System.Int32\n      description: This method returns the number of data points in the group. If there are no more groups in the path, this method returns 0.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)\n  id: NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: NextSubpath(GraphicsPath,Boolean)\n  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the next figure (subpath) from the associated path of this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \\n  \\n-   Adds three lines, a rectangle, an ellipse, and two markers.  \\n  \\n-   Lists the values of all the path's points to the left side of the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \\n  \\n-   Calls the NextSubpath method, which iterates to the third subpath (figure) and copies all the points contained in that subpath to the `myPathSection` path, and also returns the number of points copied to `subpathPoints`.  \\n  \\n-   Lists the subpath number and number of points it contains to the right side of the screen.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/visualbasic/fe78f5d8-9a93-4fb0-b017-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/cpp/fe78f5d8-9a93-4fb0-b017-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/csharp/fe78f5d8-9a93-4fb0-b017-_1.cs)]\"\n  syntax:\n    content: public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);\n    parameters:\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> that is to have its data points set to match the data points of the retrieved figure (subpath) for this iterator.\n    - id: isClosed\n      type: System.Boolean\n      description: '[out] Indicates whether the current subpath is closed. It is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the if the figure is closed, otherwise it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.'\n    return:\n      type: System.Int32\n      description: The number of data points in the retrieved figure (subpath). If there are no more figures to retrieve, zero is returned.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)\n  id: NextSubpath(System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: NextSubpath(Int32,Int32,Boolean)\n  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Moves the <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the next subpath in the path. The start index and end index of the next subpath are contained in the [out] parameters.\n  remarks: ''\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \\n  \\n-   Adds three lines, a rectangle, and an ellipse.  \\n  \\n-   Draws the values for the array of points to the screen.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \\n  \\n-   Calls the NextSubpath method.  \\n  \\n-   Uses the values returned from the iterative calls to NextSubpath to draw the start and stop values for each subpath to the screen.  \\n  \\n-   Draws the value for the total number of subpaths to the screen.  \\n  \\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/visualbasic/63165689-53f3-4b43-b800-_1.vb)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/cpp/63165689-53f3-4b43-b800-_1.cpp)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/csharp/63165689-53f3-4b43-b800-_1.cs)]\"\n  syntax:\n    content: public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: '[out] Receives the starting index of the next subpath.'\n    - id: endIndex\n      type: System.Int32\n      description: '[out] Receives the ending index of the next subpath.'\n    - id: isClosed\n      type: System.Boolean\n      description: '[out] Indicates whether the subpath is closed.'\n    return:\n      type: System.Int32\n      description: The number of subpaths in the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind\n  id: Rewind\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: Rewind()\n  nameWithType: GraphicsPathIterator.Rewind()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Rewinds this <xref href=\"System.Drawing.Drawing2D.GraphicsPathIterator\"></xref> to the beginning of its associated path.\n  remarks: The first time you call the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> method of an iterator, it gets the first figure (subpath) of that iterator's associated path. The second time, it gets the second figure, and so on. When you call the Rewind method, the sequence starts over; that is, after you call Rewind, the next call to <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> gets the first figure in the path. The <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> and <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> methods behave similarly.\n  syntax:\n    content: public void Rewind ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount\n  id: SubpathCount\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  langs:\n  - csharp\n  name: SubpathCount\n  nameWithType: GraphicsPathIterator.SubpathCount\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the number of subpaths in the path.\n  syntax:\n    content: public int SubpathCount { get; }\n    return:\n      type: System.Int32\n      description: The number of subpaths in the path.\n  overload: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: GraphicsPathIterator(GraphicsPath)\n  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)\n- uid: System.Drawing.Drawing2D.GraphicsPath\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: GraphicsPath\n  nameWithType: GraphicsPath\n  fullName: System.Drawing.Drawing2D.GraphicsPath\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: CopyData(PointF[],Byte[],Int32,Int32)\n  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Drawing.PointF[]\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF[]\n  spec.csharp:\n  - uid: System.Drawing.PointF\n    name: PointF\n    nameWithType: PointF\n    fullName: PointF[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Count\n  nameWithType: GraphicsPathIterator.Count\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Dispose()\n  nameWithType: GraphicsPathIterator.Dispose()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Enumerate(PointF[],Byte[])\n  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Finalize()\n  nameWithType: GraphicsPathIterator.Finalize()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: HasCurve()\n  nameWithType: GraphicsPathIterator.HasCurve()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextMarker(GraphicsPath)\n  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextMarker(Int32,Int32)\n  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextPathType(Byte,Int32,Int32)\n  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextSubpath(GraphicsPath,Boolean)\n  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextSubpath(Int32,Int32,Boolean)\n  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Rewind()\n  nameWithType: GraphicsPathIterator.Rewind()\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: SubpathCount\n  nameWithType: GraphicsPathIterator.SubpathCount\n  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: GraphicsPathIterator\n  nameWithType: GraphicsPathIterator.GraphicsPathIterator\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: CopyData\n  nameWithType: GraphicsPathIterator.CopyData\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Count\n  nameWithType: GraphicsPathIterator.Count\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Dispose\n  nameWithType: GraphicsPathIterator.Dispose\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Enumerate\n  nameWithType: GraphicsPathIterator.Enumerate\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Finalize\n  nameWithType: GraphicsPathIterator.Finalize\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: HasCurve\n  nameWithType: GraphicsPathIterator.HasCurve\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextMarker\n  nameWithType: GraphicsPathIterator.NextMarker\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextPathType\n  nameWithType: GraphicsPathIterator.NextPathType\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: NextSubpath\n  nameWithType: GraphicsPathIterator.NextSubpath\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: Rewind\n  nameWithType: GraphicsPathIterator.Rewind\n- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*\n  parent: System.Drawing.Drawing2D.GraphicsPathIterator\n  isExternal: false\n  name: SubpathCount\n  nameWithType: GraphicsPathIterator.SubpathCount\n"}