{"nodes":[{"pos":[633,701],"content":"Serves as the base class for all the health-monitoring error events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serves as the base class for all the health-monitoring error events.","pos":[0,68]}]},{"pos":[714,1768],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       The WebBaseErrorEvent class is the base class for the health-monitoring events that represent error conditions. ASP.NET uses WebBaseErrorEvent and its derived types to indicate error conditions during the lifetime of a Web application.      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebBaseErrorEvent class, see the example provided in this topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management&gt; namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,294],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[295,378]},{"content":"The WebBaseErrorEvent class is the base class for the health-monitoring events that represent error conditions.","pos":[385,496]},{"content":"ASP.NET uses WebBaseErrorEvent and its derived types to indicate error conditions during the lifetime of a Web application.","pos":[497,620]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented and you will control the health-monitoring system by specifying values in the <ph id=\"ph2\">`healthMonitoring`</ph> configuration section.","pos":[626,847],"source":"      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[848,948]},{"content":"For an example of deriving from the WebBaseErrorEvent class, see the example provided in this topic.","pos":[949,1049]}]},{"pos":[5375,5476],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebBaseErrorEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebBaseErrorEvent\"></xref> class."},{"pos":[5488,5663],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You can call this constructor when implementing your own event type that inherits from this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You can call this constructor when implementing your own event type that inherits from this class.","pos":[0,175],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You can call this constructor when implementing your own event type that inherits from this class.","pos":[77,175]}]}]},{"pos":[6318,6340],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[6408,6451],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[6516,6696],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[6757,6811],"content":"The <xref:System.Exception> associated with the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Exception&gt; associated with the error.","pos":[0,54],"source":"The <xref:System.Exception> associated with the error."}]},{"pos":[7546,7647],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebBaseErrorEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebBaseErrorEvent\"></xref> class."},{"pos":[7659,7834],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You can call this constructor when implementing your own event type that inherits from this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You can call this constructor when implementing your own event type that inherits from this class.","pos":[0,175],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You can call this constructor when implementing your own event type that inherits from this class.","pos":[77,175]}]}]},{"pos":[8510,8532],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[8600,8643],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[8708,8888],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[8959,8997],"content":"The detailed identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The detailed identifier for the event.","pos":[0,38]}]},{"pos":[9058,9112],"content":"The <xref:System.Exception> associated with the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Exception&gt; associated with the error.","pos":[0,54],"source":"The <xref:System.Exception> associated with the error."}]},{"pos":[9596,9655],"content":"Gets the <xref:System.Exception> associated with the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Exception&gt; associated with the error.","pos":[0,59],"source":"Gets the <xref:System.Exception> associated with the error."}]},{"pos":[9667,9809],"content":"If you implement a custom <xref:System.Web.Management.WebBaseErrorEvent>, you must ensure that your custom error event handles this exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"If you implement a custom &lt;xref:System.Web.Management.WebBaseErrorEvent&gt;, you must ensure that your custom error event handles this exception.","pos":[0,142],"source":"If you implement a custom <xref:System.Web.Management.WebBaseErrorEvent>, you must ensure that your custom error event handles this exception."}]},{"pos":[9934,9988],"content":"The <xref:System.Exception> associated with the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Exception&gt; associated with the error.","pos":[0,54],"source":"The <xref:System.Exception> associated with the error."}]},{"pos":[10520,10576],"content":"Increments the event-error performance-related counters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Increments the event-error performance-related counters.","pos":[0,56]}]},{"pos":[10589,11542],"content":"This method increments the following performance counters:      -   Infrastructure Error Events Raised. This is a global counter that tracks the error events raised.      -   Error Events Raised. This is an application-specific counter that tracks the number of error events raised since the application started.       This method also calls the parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A>, which increments the Events Raised counter. This counter tracks the total number of events raised.       To view these performance counters in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** in the **Performance object** drop-down list, select the performance counter you want to view, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) in the IIS documentation on MSDN.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method increments the following performance counters:      -   Infrastructure Error Events Raised.","pos":[0,103]},{"content":"This is a global counter that tracks the error events raised.","pos":[104,165]},{"content":"-   Error Events Raised.","pos":[171,195]},{"content":"This is an application-specific counter that tracks the number of error events raised since the application started.","pos":[196,312]},{"content":"This method also calls the parent &lt;xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A&gt;, which increments the Events Raised counter.","pos":[319,464],"source":"       This method also calls the parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A>, which increments the Events Raised counter."},{"content":"This counter tracks the total number of events raised.","pos":[465,519]},{"content":"To view these performance counters in System Monitor (PerfMon), in the <bpt id=\"p1\">**</bpt>Add Counters<ept id=\"p1\">**</ept> window select <bpt id=\"p2\">**</bpt>ASP.NET<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Performance object<ept id=\"p3\">**</ept> drop-down list, select the performance counter you want to view, and click the <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept> button.","pos":[526,764],"source":"       To view these performance counters in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** in the **Performance object** drop-down list, select the performance counter you want to view, and click the **Add** button."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using the System Monitor (PerfMon) with ASP.NET Applications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=36882&amp;clcid=0x409)</ept> in the IIS documentation on MSDN.","pos":[765,945],"source":" For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) in the IIS documentation on MSDN."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebBaseErrorEvent\n  id: WebBaseErrorEvent\n  children:\n  - System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Exception)\n  - System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.Exception)\n  - System.Web.Management.WebBaseErrorEvent.ErrorException\n  - System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters\n  langs:\n  - csharp\n  name: WebBaseErrorEvent\n  nameWithType: WebBaseErrorEvent\n  fullName: System.Web.Management.WebBaseErrorEvent\n  type: Class\n  summary: Serves as the base class for all the health-monitoring error events.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n The WebBaseErrorEvent class is the base class for the health-monitoring events that represent error conditions. ASP.NET uses WebBaseErrorEvent and its derived types to indicate error conditions during the lifetime of a Web application.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebBaseErrorEvent class, see the example provided in this topic.\"\n  example:\n  - \"The following code example has two parts. The first is an excerpt of a configuration file that enables ASP.NET health monitoring to use an event derived from the WebBaseErrorEvent class. The second shows how to derive from the WebBaseErrorEvent class to create the custom event.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\" heartBeatInterval=\\\"0\\\">  \\n  \\n  <providers>  \\n    <!-- Define the custom provider that   \\n         processes custom Web request events. -->  \\n    <add name=\\\"SampleWebEventProvider\\\"   \\n      type=\\\"SamplesAspNet.SampleEventProvider,  \\n      webeventprovider,Version=1.0.1573.18094,   \\n      Culture=neutral, PublicKeyToken=b5a57a9a9d487cf4,   \\n      processorArchitecture=MSIL\\\"/>  \\n  </providers>  \\n  \\n  <eventMappings>  \\n  \\n    <!--  Define the event source that issues custom events.   -->  \\n    <add  name=\\\"SampleWebBaseErrorEvent\\\"      \\n      type=\\\"SamplesAspNet.SampleWebBaseErrorEvent,  \\n      webbaseerrorevent,Version=1.0.1573.21549, Culture=neutral,     \\n      PublicKeyToken=2a0b23915ac7352b, processorArchitecture=MSIL\\\"/>  \\n  </eventMappings>  \\n  \\n  <rules>  \\n    <!-- Associate custom event with related   \\n      custom provider -->  \\n    <add   \\n       name=\\\"Custom Web Base Errors\\\"  \\n       eventName=\\\"SampleWebBaseErrorEvent\\\"   \\n       provider=\\\"SampleWebEventProvider\\\"   \\n       profile=\\\"Custom\\\"/>    \\n  </rules>  \\n  \\n</healthMonitoring>  \\n```  \\n  \\n The following code shows how to derive from the WebBaseErrorEvent class to create a custom event.  \\n  \\n [!code-cs[System.Web.Management.WebErrorEvent#1](~/add/codesnippet/csharp/t-system.web.management._23_1.cs)]\\n [!code-vb[System.Web.Management.WebErrorEvent#1](~/add/codesnippet/visualbasic/t-system.web.management._23_1.vb)]\"\n  syntax:\n    content: 'public class WebBaseErrorEvent : System.Web.Management.WebManagementEvent'\n  inheritance:\n  - System.Object\n  - System.Web.Management.WebBaseEvent\n  - System.Web.Management.WebManagementEvent\n  implements: []\n  inheritedMembers:\n  - System.Web.Management.WebBaseEvent.ApplicationInformation\n  - System.Web.Management.WebBaseEvent.EventCode\n  - System.Web.Management.WebBaseEvent.EventDetailCode\n  - System.Web.Management.WebBaseEvent.EventID\n  - System.Web.Management.WebBaseEvent.EventOccurrence\n  - System.Web.Management.WebBaseEvent.EventSequence\n  - System.Web.Management.WebBaseEvent.EventSource\n  - System.Web.Management.WebBaseEvent.EventTime\n  - System.Web.Management.WebBaseEvent.EventTimeUtc\n  - System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebBaseEvent.Message\n  - System.Web.Management.WebBaseEvent.Raise\n  - System.Web.Management.WebBaseEvent.Raise(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.WebBaseEvent.ToString\n  - System.Web.Management.WebBaseEvent.ToString(System.Boolean,System.Boolean)\n  - System.Web.Management.WebManagementEvent.ProcessInformation\n  platform:\n  - net462\n- uid: System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Exception)\n  id: '#ctor(System.String,System.Object,System.Int32,System.Exception)'\n  parent: System.Web.Management.WebBaseErrorEvent\n  langs:\n  - csharp\n  name: WebBaseErrorEvent(String,Object,Int32,Exception)\n  nameWithType: WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Exception)\n  fullName: System.Web.Management.WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Exception)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebBaseErrorEvent\"></xref> class.\n  remarks: This constructor is used internally by the ASP.NET health-monitoring system. You can call this constructor when implementing your own event type that inherits from this class.\n  example:\n  - \"The following code example shows how to call this constructor from a constructor for the `SampleWebBaseErrorEvent` class, a class that derives from the <xref:System.Web.Management.WebBaseErrorEvent> class.  \\n  \\n [!code-cs[System.Web.Management.WebBaseErrorEvent#2](~/add/codesnippet/csharp/490f1ed0-2b88-4f74-b1da-_1.cs)]\\n [!code-vb[System.Web.Management.WebBaseErrorEvent#2](~/add/codesnippet/visualbasic/490f1ed0-2b88-4f74-b1da-_1.vb)]\"\n  syntax:\n    content: protected WebBaseErrorEvent (string message, object eventSource, int eventCode, Exception e);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: e\n      type: System.Exception\n      description: The <xref:System.Exception> associated with the error.\n  overload: System.Web.Management.WebBaseErrorEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.Exception)\n  id: '#ctor(System.String,System.Object,System.Int32,System.Int32,System.Exception)'\n  parent: System.Web.Management.WebBaseErrorEvent\n  langs:\n  - csharp\n  name: WebBaseErrorEvent(String,Object,Int32,Int32,Exception)\n  nameWithType: WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Int32,Exception)\n  fullName: System.Web.Management.WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Int32,Exception)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebBaseErrorEvent\"></xref> class.\n  remarks: This constructor is used internally by the ASP.NET health-monitoring system. You can call this constructor when implementing your own event type that inherits from this class.\n  example:\n  - \"The following code example shows how to call this constructor from a constructor for the `SampleWebBaseErrorEvent` class, a class that derives from the <xref:System.Web.Management.WebBaseErrorEvent> class.  \\n  \\n [!code-cs[System.Web.Management.WebBaseErrorEvent#3](~/add/codesnippet/csharp/d926271b-b6dc-48d8-931e-_1.cs)]\\n [!code-vb[System.Web.Management.WebBaseErrorEvent#3](~/add/codesnippet/visualbasic/d926271b-b6dc-48d8-931e-_1.vb)]\"\n  syntax:\n    content: protected WebBaseErrorEvent (string message, object eventSource, int eventCode, int eventDetailCode, Exception e);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: eventDetailCode\n      type: System.Int32\n      description: The detailed identifier for the event.\n    - id: e\n      type: System.Exception\n      description: The <xref:System.Exception> associated with the error.\n  overload: System.Web.Management.WebBaseErrorEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebBaseErrorEvent.ErrorException\n  id: ErrorException\n  parent: System.Web.Management.WebBaseErrorEvent\n  langs:\n  - csharp\n  name: ErrorException\n  nameWithType: WebBaseErrorEvent.ErrorException\n  fullName: System.Web.Management.WebBaseErrorEvent.ErrorException\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the <xref:System.Exception> associated with the error.\n  remarks: If you implement a custom <xref:System.Web.Management.WebBaseErrorEvent>, you must ensure that your custom error event handles this exception.\n  syntax:\n    content: public Exception ErrorException { get; }\n    return:\n      type: System.Exception\n      description: The <xref:System.Exception> associated with the error.\n  overload: System.Web.Management.WebBaseErrorEvent.ErrorException*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters\n  id: IncrementPerfCounters\n  parent: System.Web.Management.WebBaseErrorEvent\n  langs:\n  - csharp\n  name: IncrementPerfCounters()\n  nameWithType: WebBaseErrorEvent.IncrementPerfCounters()\n  fullName: System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Increments the event-error performance-related counters.\n  remarks: \"This method increments the following performance counters:  \\n  \\n-   Infrastructure Error Events Raised. This is a global counter that tracks the error events raised.  \\n  \\n-   Error Events Raised. This is an application-specific counter that tracks the number of error events raised since the application started.  \\n  \\n This method also calls the parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A>, which increments the Events Raised counter. This counter tracks the total number of events raised.  \\n  \\n To view these performance counters in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** in the **Performance object** drop-down list, select the performance counter you want to view, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) in the IIS documentation on MSDN.\"\n  syntax:\n    content: protected override void IncrementPerfCounters ();\n    parameters: []\n  overload: System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Management.WebManagementEvent\n  isExternal: false\n  name: System.Web.Management.WebManagementEvent\n- uid: System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Exception)\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: WebBaseErrorEvent(String,Object,Int32,Exception)\n  nameWithType: WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Exception)\n  fullName: System.Web.Management.WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Exception)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.Exception)\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: WebBaseErrorEvent(String,Object,Int32,Int32,Exception)\n  nameWithType: WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Int32,Exception)\n  fullName: System.Web.Management.WebBaseErrorEvent.WebBaseErrorEvent(String,Object,Int32,Int32,Exception)\n- uid: System.Web.Management.WebBaseErrorEvent.ErrorException\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: ErrorException\n  nameWithType: WebBaseErrorEvent.ErrorException\n  fullName: System.Web.Management.WebBaseErrorEvent.ErrorException\n- uid: System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: IncrementPerfCounters()\n  nameWithType: WebBaseErrorEvent.IncrementPerfCounters()\n  fullName: System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters()\n- uid: System.Web.Management.WebBaseErrorEvent.#ctor*\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: WebBaseErrorEvent\n  nameWithType: WebBaseErrorEvent.WebBaseErrorEvent\n- uid: System.Web.Management.WebBaseErrorEvent.ErrorException*\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: ErrorException\n  nameWithType: WebBaseErrorEvent.ErrorException\n- uid: System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters*\n  parent: System.Web.Management.WebBaseErrorEvent\n  isExternal: false\n  name: IncrementPerfCounters\n  nameWithType: WebBaseErrorEvent.IncrementPerfCounters\n"}