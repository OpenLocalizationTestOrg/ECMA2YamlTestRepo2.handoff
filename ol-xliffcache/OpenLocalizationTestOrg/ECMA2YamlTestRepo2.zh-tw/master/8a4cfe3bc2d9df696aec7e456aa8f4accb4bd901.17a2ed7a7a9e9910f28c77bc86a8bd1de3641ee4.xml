{"nodes":[{"pos":[1263,1305],"content":"Represents a method within a symbol store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a method within a symbol store.","pos":[0,42]}]},{"pos":[1318,1802],"content":"The ISymbolMethod interface provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use it with the <xref:System.Reflection> classes to read the type-related attributes of a method.      > [!NOTE] >  This interface is the managed counterpart of the `ISymUnmanagedMethod` interface, one of the unmanaged symbol store interfaces that provide an alternative way to read and write debug symbol information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ISymbolMethod interface provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information.","pos":[0,162]},{"content":"Use it with the &lt;xref:System.Reflection&gt; classes to read the type-related attributes of a method.","pos":[163,260],"source":" Use it with the <xref:System.Reflection> classes to read the type-related attributes of a method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This interface is the managed counterpart of the <ph id=\"ph2\">`ISymUnmanagedMethod`</ph> interface, one of the unmanaged symbol store interfaces that provide an alternative way to read and write debug symbol information.","pos":[266,481],"source":"      > [!NOTE] >  This interface is the managed counterpart of the `ISymUnmanagedMethod` interface, one of the unmanaged symbol store interfaces that provide an alternative way to read and write debug symbol information."}]},{"pos":[2360,2421],"content":"Gets the namespace that the current method is defined within.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the namespace that the current method is defined within.","pos":[0,61]}]},{"pos":[2627,2683],"content":"The namespace that the current method is defined within.","needQuote":true,"needEscape":true,"nodes":[{"content":"The namespace that the current method is defined within.","pos":[0,56]}]},{"pos":[3405,3521],"content":"Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.","pos":[0,116]}]},{"pos":[3533,3631],"content":"The parameters are returned in the order that they are defined within the signature of the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters are returned in the order that they are defined within the signature of the method.","pos":[0,98]}]},{"pos":[3870,3917],"content":"The document for which the offset is requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document for which the offset is requested.","pos":[0,47]}]},{"pos":[3977,4023],"content":"The document line corresponding to the offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document line corresponding to the offset.","pos":[0,46]}]},{"pos":[4085,4133],"content":"The document column corresponding to the offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document column corresponding to the offset.","pos":[0,48]}]},{"pos":[4190,4231],"content":"The offset within the specified document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset within the specified document.","pos":[0,41]}]},{"pos":[4741,4784],"content":"Gets the parameters for the current method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters for the current method.","pos":[0,43]}]},{"pos":[4796,4894],"content":"The parameters are returned in the order that they are defined within the signature of the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters are returned in the order that they are defined within the signature of the method.","pos":[0,98]}]},{"pos":[5103,5150],"content":"The array of parameters for the current method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of parameters for the current method.","pos":[0,47]}]},{"pos":[5873,6037],"content":"Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.","pos":[0,164]}]},{"pos":[6049,6200],"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}. The number of range pairs is the length of the array divided by 2.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}. The number of range pairs is the length of the array divided by 2.","pos":[0,151],"nodes":[{"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}.","pos":[0,84]},{"content":"The number of range pairs is the length of the array divided by 2.","pos":[85,151]}]}]},{"pos":[6441,6488],"content":"The document for which the offset is requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document for which the offset is requested.","pos":[0,47]}]},{"pos":[6548,6594],"content":"The document line corresponding to the ranges.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document line corresponding to the ranges.","pos":[0,46]}]},{"pos":[6656,6704],"content":"The document column corresponding to the ranges.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document column corresponding to the ranges.","pos":[0,48]}]},{"pos":[6763,6802],"content":"An array of start and end offset pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of start and end offset pairs.","pos":[0,39]}]},{"pos":[7330,7408],"content":"Returns the most enclosing lexical scope when given an offset within a method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the most enclosing lexical scope when given an offset within a method.","pos":[0,78]}]},{"pos":[7420,7485],"content":"You can use the GetScope method to start local variable searches.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use the GetScope method to start local variable searches.","pos":[0,65]}]},{"pos":[7660,7715],"content":"The byte offset within the method of the lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset within the method of the lexical scope.","pos":[0,55]}]},{"pos":[7803,7880],"content":"The most enclosing lexical scope for the given byte offset within the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The most enclosing lexical scope for the given byte offset within the method.","pos":[0,77]}]},{"pos":[8830,8878],"content":"Gets the sequence points for the current method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the sequence points for the current method.","pos":[0,48]}]},{"pos":[8891,9309],"content":"The sequence points are sorted by offset and are for all documents in the method. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size.       GetSequencePoints verifies the size of each array and places the sequence point information into each. If any array is `null`, the data for that array is not returned.","needQuote":false,"needEscape":true,"nodes":[{"content":"The sequence points are sorted by offset and are for all documents in the method.","pos":[0,81]},{"content":"Use &lt;xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A&gt; to retrieve the count of all sequence points and create arrays of the proper size.","pos":[82,242],"source":" Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size."},{"content":"GetSequencePoints verifies the size of each array and places the sequence point information into each.","pos":[249,351]},{"content":"If any array is <ph id=\"ph1\">`null`</ph>, the data for that array is not returned.","pos":[352,416],"source":" If any array is `null`, the data for that array is not returned."}]},{"pos":[9583,9666],"content":"The array of byte offsets from the beginning of the method for the sequence points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of byte offsets from the beginning of the method for the sequence points.","pos":[0,83]}]},{"pos":[9767,9831],"content":"The array of documents in which the sequence points are located.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of documents in which the sequence points are located.","pos":[0,64]}]},{"pos":[9894,9971],"content":"The array of lines in the documents at which the sequence points are located.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of lines in the documents at which the sequence points are located.","pos":[0,77]}]},{"pos":[10036,10115],"content":"The array of columns in the documents at which the sequence points are located.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of columns in the documents at which the sequence points are located.","pos":[0,79]}]},{"pos":[10181,10250],"content":"The array of lines in the documents at which the sequence points end.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of lines in the documents at which the sequence points end.","pos":[0,69]}]},{"pos":[10318,10389],"content":"The array of columns in the documents at which the sequence points end.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array of columns in the documents at which the sequence points end.","pos":[0,71]}]},{"pos":[11186,11256],"content":"Gets the start and end positions for the source of the current method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the start and end positions for the source of the current method.","pos":[0,70]}]},{"pos":[11268,11333],"content":"The first array position is the start, and the second is the end.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first array position is the start, and the second is the end.","pos":[0,65]}]},{"pos":[11583,11624],"content":"The starting and ending source documents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting and ending source documents.","pos":[0,41]}]},{"pos":[11687,11755],"content":"The starting and ending lines in the corresponding source documents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting and ending lines in the corresponding source documents.","pos":[0,68]}]},{"pos":[11820,11890],"content":"The starting and ending columns in the corresponding source documents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting and ending columns in the corresponding source documents.","pos":[0,70]}]},{"pos":[11949,12115],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the positions were defined; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the positions were defined; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12609,12699],"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","pos":[0,90],"nodes":[{"content":"Gets the root lexical scope for the current method.","pos":[0,51]},{"content":"This scope encloses the entire method.","pos":[52,90]}]}]},{"pos":[12880,12935],"content":"The root lexical scope that encloses the entire method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root lexical scope that encloses the entire method.","pos":[0,55]}]},{"pos":[13466,13516],"content":"Gets a count of the sequence points in the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a count of the sequence points in the method.","pos":[0,50]}]},{"pos":[13635,13682],"content":"The count of the sequence points in the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The count of the sequence points in the method.","pos":[0,47]}]},{"pos":[14157,14277],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the metadata for the current method.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"></xref> containing the metadata for the current method."},{"pos":[14452,14494],"content":"The metadata token for the current method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata token for the current method.","pos":[0,42]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod\n  id: ISymbolMethod\n  children:\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  - System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  - System.Diagnostics.SymbolStore.ISymbolMethod.RootScope\n  - System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount\n  - System.Diagnostics.SymbolStore.ISymbolMethod.Token\n  langs:\n  - csharp\n  name: ISymbolMethod\n  nameWithType: ISymbolMethod\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod\n  type: Interface\n  summary: Represents a method within a symbol store.\n  remarks: \"The ISymbolMethod interface provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use it with the <xref:System.Reflection> classes to read the type-related attributes of a method.  \\n  \\n> [!NOTE]\\n>  This interface is the managed counterpart of the `ISymUnmanagedMethod` interface, one of the unmanaged symbol store interfaces that provide an alternative way to read and write debug symbol information.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ISymbolMethod\n  implements: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace\n  id: GetNamespace\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetNamespace()\n  nameWithType: ISymbolMethod.GetNamespace()\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the namespace that the current method is defined within.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolNamespace\n      description: The namespace that the current method is defined within.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetOffset(ISymbolDocument,Int32,Int32)\n  nameWithType: ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.\n  remarks: The parameters are returned in the order that they are defined within the signature of the method.\n  syntax:\n    content: public int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);\n    parameters:\n    - id: document\n      type: System.Diagnostics.SymbolStore.ISymbolDocument\n      description: The document for which the offset is requested.\n    - id: line\n      type: System.Int32\n      description: The document line corresponding to the offset.\n    - id: column\n      type: System.Int32\n      description: The document column corresponding to the offset.\n    return:\n      type: System.Int32\n      description: The offset within the specified document.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters\n  id: GetParameters\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetParameters()\n  nameWithType: ISymbolMethod.GetParameters()\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the parameters for the current method.\n  remarks: The parameters are returned in the order that they are defined within the signature of the method.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolVariable[]\n      description: The array of parameters for the current method.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetRanges(ISymbolDocument,Int32,Int32)\n  nameWithType: ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.\n  remarks: The array is an array of integers in the format {{start1, end1}, {start2, end2}...}. The number of range pairs is the length of the array divided by 2.\n  syntax:\n    content: public int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);\n    parameters:\n    - id: document\n      type: System.Diagnostics.SymbolStore.ISymbolDocument\n      description: The document for which the offset is requested.\n    - id: line\n      type: System.Int32\n      description: The document line corresponding to the ranges.\n    - id: column\n      type: System.Int32\n      description: The document column corresponding to the ranges.\n    return:\n      type: System.Int32[]\n      description: An array of start and end offset pairs.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)\n  id: GetScope(System.Int32)\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetScope(Int32)\n  nameWithType: ISymbolMethod.GetScope(Int32)\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Returns the most enclosing lexical scope when given an offset within a method.\n  remarks: You can use the GetScope method to start local variable searches.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: The byte offset within the method of the lexical scope.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The most enclosing lexical scope for the given byte offset within the method.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])\n  nameWithType: ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the sequence points for the current method.\n  remarks: \"The sequence points are sorted by offset and are for all documents in the method. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size.  \\n  \\n GetSequencePoints verifies the size of each array and places the sequence point information into each. If any array is `null`, the data for that array is not returned.\"\n  syntax:\n    content: public void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);\n    parameters:\n    - id: offsets\n      type: System.Int32[]\n      description: The array of byte offsets from the beginning of the method for the sequence points.\n    - id: documents\n      type: System.Diagnostics.SymbolStore.ISymbolDocument[]\n      description: The array of documents in which the sequence points are located.\n    - id: lines\n      type: System.Int32[]\n      description: The array of lines in the documents at which the sequence points are located.\n    - id: columns\n      type: System.Int32[]\n      description: The array of columns in the documents at which the sequence points are located.\n    - id: endLines\n      type: System.Int32[]\n      description: The array of lines in the documents at which the sequence points end.\n    - id: endColumns\n      type: System.Int32[]\n      description: The array of columns in the documents at which the sequence points end.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])\n  nameWithType: ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the start and end positions for the source of the current method.\n  remarks: The first array position is the start, and the second is the end.\n  syntax:\n    content: public bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);\n    parameters:\n    - id: docs\n      type: System.Diagnostics.SymbolStore.ISymbolDocument[]\n      description: The starting and ending source documents.\n    - id: lines\n      type: System.Int32[]\n      description: The starting and ending lines in the corresponding source documents.\n    - id: columns\n      type: System.Int32[]\n      description: The starting and ending columns in the corresponding source documents.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the positions were defined; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope\n  id: RootScope\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: RootScope\n  nameWithType: ISymbolMethod.RootScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the root lexical scope for the current method. This scope encloses the entire method.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The root lexical scope that encloses the entire method.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount\n  id: SequencePointCount\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: SequencePointCount\n  nameWithType: ISymbolMethod.SequencePointCount\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets a count of the sequence points in the method.\n  syntax:\n    content: public int SequencePointCount { get; }\n    return:\n      type: System.Int32\n      description: The count of the sequence points in the method.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.Token\n  id: Token\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  langs:\n  - csharp\n  name: Token\n  nameWithType: ISymbolMethod.Token\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.Token\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the <xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"></xref> containing the metadata for the current method.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.SymbolToken Token { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: The metadata token for the current method.\n  overload: System.Diagnostics.SymbolStore.ISymbolMethod.Token*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetNamespace()\n  nameWithType: ISymbolMethod.GetNamespace()\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace()\n- uid: System.Diagnostics.SymbolStore.ISymbolNamespace\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolNamespace\n  nameWithType: ISymbolNamespace\n  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetOffset(ISymbolDocument,Int32,Int32)\n  nameWithType: ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.ISymbolDocument\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocument\n  nameWithType: ISymbolDocument\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocument\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetParameters()\n  nameWithType: ISymbolMethod.GetParameters()\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters()\n- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolVariable\n  nameWithType: ISymbolVariable\n  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolVariable\n    name: ISymbolVariable\n    nameWithType: ISymbolVariable\n    fullName: ISymbolVariable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetRanges(ISymbolDocument,Int32,Int32)\n  nameWithType: ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetScope(Int32)\n  nameWithType: ISymbolMethod.GetScope(Int32)\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(Int32)\n- uid: System.Diagnostics.SymbolStore.ISymbolScope\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])\n  nameWithType: ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])\n- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocument\n  nameWithType: ISymbolDocument\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolDocument\n    name: ISymbolDocument\n    nameWithType: ISymbolDocument\n    fullName: ISymbolDocument[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])\n  nameWithType: ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: RootScope\n  nameWithType: ISymbolMethod.RootScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: SequencePointCount\n  nameWithType: ISymbolMethod.SequencePointCount\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.Token\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: Token\n  nameWithType: ISymbolMethod.Token\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.Token\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetNamespace\n  nameWithType: ISymbolMethod.GetNamespace\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetOffset\n  nameWithType: ISymbolMethod.GetOffset\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetParameters\n  nameWithType: ISymbolMethod.GetParameters\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetRanges\n  nameWithType: ISymbolMethod.GetRanges\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetScope\n  nameWithType: ISymbolMethod.GetScope\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetSequencePoints\n  nameWithType: ISymbolMethod.GetSequencePoints\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: GetSourceStartEnd\n  nameWithType: ISymbolMethod.GetSourceStartEnd\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: RootScope\n  nameWithType: ISymbolMethod.RootScope\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: SequencePointCount\n  nameWithType: ISymbolMethod.SequencePointCount\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod.Token*\n  parent: System.Diagnostics.SymbolStore.ISymbolMethod\n  isExternal: false\n  name: Token\n  nameWithType: ISymbolMethod.Token\n"}