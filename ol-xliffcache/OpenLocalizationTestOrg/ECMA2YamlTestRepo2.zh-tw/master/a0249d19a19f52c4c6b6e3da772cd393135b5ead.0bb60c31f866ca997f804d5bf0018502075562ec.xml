{"nodes":[{"pos":[1577,1670],"content":"Represents an ordered collection of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Represents an ordered collection of <xref href=\"System.Windows.Media.Visual\"></xref> objects."},{"pos":[1682,1910],"content":"A VisualCollection has implied context affinity. If a procedure attempts to access the VisualCollection from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"A VisualCollection has implied context affinity. If a procedure attempts to access the VisualCollection from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown.","pos":[0,228],"nodes":[{"content":"A VisualCollection has implied context affinity.","pos":[0,48]},{"content":"If a procedure attempts to access the VisualCollection from a different context than the context of the owning &lt;xref:System.Windows.Media.ContainerVisual&gt;, an exception is thrown.","pos":[49,228],"source":" If a procedure attempts to access the VisualCollection from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown."}]}]},{"pos":[3036,3135],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Media.VisualCollection\"></xref> class."},{"pos":[3313,3415],"content":"The parent visual object whose <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is returned.","needQuote":true,"needEscape":true,"source":"The parent visual object whose <xref href=\"System.Windows.Media.VisualCollection\"></xref> is returned."},{"pos":[3920,4056],"content":"Appends a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the end of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends a <xref href=\"System.Windows.Media.Visual\"></xref> to the end of the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[4069,4780],"content":"Adding a <xref:System.Windows.Media.Visual> whose value is `null` is permitted and does not raise an exception.       The Add method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.       If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you must define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Adding a &lt;xref:System.Windows.Media.Visual&gt; whose value is <ph id=\"ph1\">`null`</ph> is permitted and does not raise an exception.","pos":[0,111],"source":"Adding a <xref:System.Windows.Media.Visual> whose value is `null` is permitted and does not raise an exception."},{"content":"The Add method also sets up the parent-child relationship between the parent visual, which is the owner of the &lt;xref:System.Windows.Media.VisualCollection&gt;, and the child <ph id=\"ph1\">`visual`</ph>.","pos":[118,298],"source":"       The Add method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`."},{"content":"If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the &lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt; and &lt;xref:System.Windows.Media.Visual.RemoveVisualChild%2A&gt; methods.","pos":[305,569],"source":"       If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods."},{"content":"When you use these methods, you must define your own storage implementation, and do not use &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[570,707],"source":" When you use these methods, you must define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>."}]},{"pos":[5423,5552],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to append to the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Visual\"></xref> to append to the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[5609,5676],"content":"The index in the collection at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">visual</ph><ept id=\"p1\">&lt;/code&gt;</ept> was added.","needQuote":true,"needEscape":true,"source":"The index in the collection at which <code>visual</code> was added."},{"pos":[5840,5959],"content":"An &lt;xref:System.ArgumentException&gt; is thrown if the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a root element.","needQuote":true,"needEscape":true,"source":"An <xref:System.ArgumentException> is thrown if the <xref href=\"System.Windows.Media.Visual\"></xref> is a root element."},{"pos":[6335,6451],"content":"Gets or sets the number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"Gets or sets the number of elements that the <xref href=\"System.Windows.Media.VisualCollection\"></xref> can contain."},{"pos":[6463,7041],"content":"The value of Capacity is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing. <xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>. Capacity is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>. If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds Capacity while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased. By default Capacity is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of Capacity is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing. <xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>. Capacity is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>. If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds Capacity while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased. By default Capacity is zero.","pos":[0,578],"nodes":[{"content":"The value of Capacity is the number of elements that the &lt;xref:System.Windows.Media.VisualCollection&gt; is capable of storing.","pos":[0,124],"source":"The value of Capacity is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing."},{"content":"&lt;xref:System.Windows.Media.VisualCollection.Count%2A&gt; is the number of visuals that are actually in the &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[125,274],"source":" <xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>."},{"content":"Capacity is always greater than or equal to &lt;xref:System.Windows.Media.VisualCollection.Count%2A&gt;.","pos":[275,373],"source":" Capacity is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>."},{"content":"If &lt;xref:System.Windows.Media.VisualCollection.Count%2A&gt; exceeds Capacity while adding elements, the capacity of the &lt;xref:System.Windows.Media.VisualCollection&gt; is increased.","pos":[374,549],"source":" If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds Capacity while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased."},{"content":"By default Capacity is zero.","pos":[550,578]}]}]},{"pos":[7155,7258],"content":"The number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"The number of elements that the <xref href=\"System.Windows.Media.VisualCollection\"></xref> can contain."},{"pos":[7447,7544],"content":"Capacity is set to a value that is less than <xref:System.Windows.Media.VisualCollection.Count*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Capacity is set to a value that is less than &lt;xref:System.Windows.Media.VisualCollection.Count*&gt;.","pos":[0,97],"source":"Capacity is set to a value that is less than <xref:System.Windows.Media.VisualCollection.Count*>."}]},{"pos":[7909,7998],"content":"Removes all elements from the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all elements from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[8010,8348],"content":"The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero. The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero. The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size.","pos":[0,338],"nodes":[{"content":"The &lt;xref:System.Windows.Media.VisualCollection.Count%2A&gt; is reset to zero.","pos":[0,75],"source":"The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero."},{"content":"The value of the &lt;xref:System.Windows.Media.VisualCollection.Capacity%2A&gt; remains unchanged.","pos":[76,168],"source":" The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged."},{"content":"To reset the capacity of the &lt;xref:System.Windows.Media.VisualCollection&gt;, set the &lt;xref:System.Windows.Media.VisualCollection.Capacity%2A&gt; property to the desired size.","pos":[169,338],"source":" To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size."}]}]},{"pos":[8942,9097],"content":"Returns a &lt;xref:System.Boolean&gt; value that indicates whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is contained in the collection.","needQuote":true,"needEscape":true,"source":"Returns a <xref:System.Boolean> value that indicates whether the specified <xref href=\"System.Windows.Media.Visual\"></xref> is contained in the collection."},{"pos":[9109,9254],"content":"The worst-case runtime scenario of this function is <ph id=\"ph1\">`O(n)`</ph>, where <ph id=\"ph2\">`n`</ph> is the number of items in the &lt;xref:System.Windows.Media.VisualCollection&gt;.","needQuote":true,"needEscape":true,"source":"The worst-case runtime scenario of this function is `O(n)`, where `n` is the number of items in the <xref:System.Windows.Media.VisualCollection>."},{"pos":[9429,9514],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to search for in the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Visual\"></xref> to search for in the collection."},{"pos":[9573,9763],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">visual</ph><ept id=\"p2\">&lt;/code&gt;</ept> is contained in the collection; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>visual</code> is contained in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10297,10380],"content":"Copies the items in the collection to an array, starting at a specific array index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the items in the collection to an array, starting at a specific array index.","pos":[0,83]}]},{"pos":[10525,10689],"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements that are copied from the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The one-dimensional <xref:System.Array> that is the destination of the elements that are copied from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[10750,10806],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[11381,11482],"content":"Copies the current collection into the passed <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array.","needQuote":true,"needEscape":true,"source":"Copies the current collection into the passed <xref href=\"System.Windows.Media.Visual\"></xref> array."},{"pos":[11668,11775],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects (which must have zero-based indexing).","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Windows.Media.Visual\"></xref> objects (which must have zero-based indexing)."},{"pos":[11836,11883],"content":"The index to start copying from within <ph id=\"ph1\">`array`</ph>.","needQuote":true,"needEscape":true,"source":"The index to start copying from within `array`."},{"pos":[12319,12365],"content":"Gets the number of elements in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of elements in the collection.","pos":[0,46]}]},{"pos":[12378,12987],"content":"Count is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.       Count is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>. If Count exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"Count is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.       Count is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>. If Count exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,607],"nodes":[{"content":"Count is the number of elements that are actually in the &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[0,102],"source":"Count is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>."},{"content":"&lt;xref:System.Windows.Media.VisualCollection.Capacity%2A&gt; is the number of elements that the &lt;xref:System.Windows.Media.VisualCollection&gt; is capable of storing.","pos":[103,262],"source":" <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing."},{"content":"Count is always less than or equal to &lt;xref:System.Windows.Media.VisualCollection.Capacity%2A&gt;.","pos":[269,364],"source":"       Count is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>."},{"content":"If Count exceeds &lt;xref:System.Windows.Media.VisualCollection.Capacity%2A&gt; while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[365,607],"source":" If Count exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[13094,13194],"content":"The number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains.","needQuote":true,"needEscape":true,"source":"The number of elements that the <xref href=\"System.Windows.Media.VisualCollection\"></xref> contains."},{"pos":[13673,13785],"content":"Retrieves an enumerator that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Retrieves an enumerator that can iterate through the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[13994,14059],"content":"An enumerator that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that can be used to iterate through the collection.","pos":[0,65]}]},{"pos":[14592,14677],"content":"Returns the zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the zero-based index of the <xref href=\"System.Windows.Media.Visual\"></xref>."},{"pos":[14689,14942],"content":"If the <xref:System.Windows.Media.Visual> is not in the <xref:System.Windows.Media.VisualCollection>, -1 is returned. If `null` is passed to the method, the index of the first entry that has `null` is returned. If there is no null entry, -1 is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the &lt;xref:System.Windows.Media.Visual&gt; is not in the &lt;xref:System.Windows.Media.VisualCollection&gt;, -1 is returned.","pos":[0,117],"source":"If the <xref:System.Windows.Media.Visual> is not in the <xref:System.Windows.Media.VisualCollection>, -1 is returned."},{"content":"If <ph id=\"ph1\">`null`</ph> is passed to the method, the index of the first entry that has <ph id=\"ph2\">`null`</ph> is returned.","pos":[118,210],"source":" If `null` is passed to the method, the index of the first entry that has `null` is returned."},{"content":"If there is no null entry, -1 is returned.","pos":[211,253]}]},{"pos":[15115,15244],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to locate in the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Visual\"></xref> to locate in the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[15301,15367],"content":"The index of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The index of the <xref href=\"System.Windows.Media.Visual\"></xref>."},{"pos":[15933,16043],"content":"Inserts an element into the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Inserts an element into the <xref href=\"System.Windows.Media.VisualCollection\"></xref> at the specified index."},{"pos":[16056,17239],"content":"If <xref:System.Windows.Media.VisualCollection.Count%2A> already equals <xref:System.Windows.Media.VisualCollection.Capacity%2A>, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased before the new <xref:System.Windows.Media.Visual> is inserted. If `index` is equal to <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` is added to the end of <xref:System.Windows.Media.VisualCollection>. Any existing visual objects that are equal to or greater than `index` are shifted to accommodate the new <xref:System.Windows.Media.Visual>, and their index values are updated.       The Insert method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Windows.Media.VisualCollection.Count%2A&gt; already equals &lt;xref:System.Windows.Media.VisualCollection.Capacity%2A&gt;, the capacity of the &lt;xref:System.Windows.Media.VisualCollection&gt; is increased before the new &lt;xref:System.Windows.Media.Visual&gt; is inserted.","pos":[0,270],"source":"If <xref:System.Windows.Media.VisualCollection.Count%2A> already equals <xref:System.Windows.Media.VisualCollection.Capacity%2A>, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased before the new <xref:System.Windows.Media.Visual> is inserted."},{"content":"If <ph id=\"ph1\">`index`</ph> is equal to &lt;xref:System.Windows.Media.VisualCollection.Count%2A&gt;, <ph id=\"ph2\">`visual`</ph> is added to the end of &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[271,426],"source":" If `index` is equal to <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` is added to the end of <xref:System.Windows.Media.VisualCollection>."},{"content":"Any existing visual objects that are equal to or greater than <ph id=\"ph1\">`index`</ph> are shifted to accommodate the new &lt;xref:System.Windows.Media.Visual&gt;, and their index values are updated.","pos":[427,603],"source":" Any existing visual objects that are equal to or greater than `index` are shifted to accommodate the new <xref:System.Windows.Media.Visual>, and their index values are updated."},{"content":"The Insert method also sets up the parent-child relationship between the parent visual, which is the owner of the &lt;xref:System.Windows.Media.VisualCollection&gt;, and the child <ph id=\"ph1\">`visual`</ph>.","pos":[610,793],"source":"       The Insert method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`."},{"content":"If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the &lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt; and &lt;xref:System.Windows.Media.Visual.RemoveVisualChild%2A&gt; methods.","pos":[800,1046],"source":"       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods."},{"content":"When you use these methods, you define your own storage implementation, and do not use &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[1047,1179],"source":" When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>."}]},{"pos":[17408,17467],"content":"The zero-based index at which the value should be inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index at which the value should be inserted.","pos":[0,59]}]},{"pos":[17544,17675],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to insert into the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Visual\"></xref> to insert into the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[17862,17967],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref:System.Windows.Media.VisualCollection.Count*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero or greater than <xref:System.Windows.Media.VisualCollection.Count*>."},{"pos":[18353,18465],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is read-only."},{"pos":[18477,18570],"content":"This property is always <ph id=\"ph1\">`false`</ph> for all &lt;xref:System.Windows.Media.VisualCollection&gt; objects.","needQuote":true,"needEscape":true,"source":"This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects."},{"pos":[18684,18793],"content":"The value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"The value that indicates whether the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is read-only."},{"pos":[19278,19417],"content":"Gets a value that indicates whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread-safe).","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether access to the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is synchronized (thread-safe)."},{"pos":[19429,19522],"content":"This property is always <ph id=\"ph1\">`false`</ph> for all &lt;xref:System.Windows.Media.VisualCollection&gt; objects.","needQuote":true,"needEscape":true,"source":"This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects."},{"pos":[19640,19766],"content":"The value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread-safe).","needQuote":true,"needEscape":true,"source":"The value that indicates whether the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is synchronized (thread-safe)."},{"pos":[20254,20425],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is stored at the zero-based index of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Windows.Media.Visual\"></xref> that is stored at the zero-based index of the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[20437,20598],"content":"This property provides the ability to access a specific <xref:System.Windows.Media.Visual> in the <xref:System.Windows.Media.VisualCollection> by using an index.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property provides the ability to access a specific &lt;xref:System.Windows.Media.Visual&gt; in the &lt;xref:System.Windows.Media.VisualCollection&gt; by using an index.","pos":[0,161],"source":"This property provides the ability to access a specific <xref:System.Windows.Media.Visual> in the <xref:System.Windows.Media.VisualCollection> by using an index."}]},{"pos":[20763,20928],"content":"The zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to get or set the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <xref href=\"System.Windows.Media.VisualCollection\"></xref> from which to get or set the <xref href=\"System.Windows.Media.Visual\"></xref>."},{"pos":[21000,21090],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is stored at <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Visual\"></xref> that is stored at <code>index</code>."},{"pos":[21275,21415],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or <ph id=\"ph2\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph3\">&lt;xref:System.Windows.Media.VisualCollection.Count*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero, or <code>index</code> is equal to or greater than <xref:System.Windows.Media.VisualCollection.Count*>."},{"pos":[21510,21658],"content":"The new child element already has a parent, or the value at the specified index is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The new child element already has a parent, or the value at the specified index is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22104,22250],"content":"Removes the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the specified <xref href=\"System.Windows.Media.Visual\"></xref> object from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[22263,23105],"content":"The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated. If `visual` is `null`, the first `null` entry is removed. Note that removing a `null` entry is linear in the size of the collection.       The Remove method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.","pos":[0,129]},{"content":"If <ph id=\"ph1\">`visual`</ph> is <ph id=\"ph2\">`null`</ph>, the first <ph id=\"ph3\">`null`</ph> entry is removed.","pos":[130,187],"source":" If `visual` is `null`, the first `null` entry is removed."},{"content":"Note that removing a <ph id=\"ph1\">`null`</ph> entry is linear in the size of the collection.","pos":[188,262],"source":" Note that removing a `null` entry is linear in the size of the collection."},{"content":"The Remove method also removes the parent-child relationship between the parent visual, which is the owner of the &lt;xref:System.Windows.Media.VisualCollection&gt;, and the child <ph id=\"ph1\">`visual`</ph>.","pos":[269,452],"source":"       The Remove method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`."},{"content":"If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the &lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt; and &lt;xref:System.Windows.Media.Visual.RemoveVisualChild%2A&gt; methods.","pos":[459,705],"source":"       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods."},{"content":"When you use these methods, you define your own storage implementation, and do not use &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[706,838],"source":" When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>."}]},{"pos":[23279,23410],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Visual\"></xref> to remove from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[23908,24023],"content":"Removes the visual object at the specified index in the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the visual object at the specified index in the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[24036,24747],"content":"The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.       The RemoveAt method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.","pos":[0,129]},{"content":"The RemoveAt method also removes the parent-child relationship between the parent visual, which is the owner of the &lt;xref:System.Windows.Media.VisualCollection&gt;, and the child <ph id=\"ph1\">`visual`</ph>.","pos":[136,321],"source":"       The RemoveAt method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`."},{"content":"If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the &lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt; and &lt;xref:System.Windows.Media.Visual.RemoveVisualChild%2A&gt; methods.","pos":[328,574],"source":"       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods."},{"content":"When you use these methods, you define your own storage implementation, and do not use &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[575,707],"source":" When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>."}]},{"pos":[24882,24927],"content":"The zero-based index of the visual to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the visual to remove.","pos":[0,45]}]},{"pos":[25116,25256],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or <ph id=\"ph2\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph3\">&lt;xref:System.Windows.Media.VisualCollection.Count*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero, or <code>index</code> is equal to or greater than <xref:System.Windows.Media.VisualCollection.Count*>."},{"pos":[25738,25840],"content":"Removes a range of visual objects from the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes a range of visual objects from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[25853,26578],"content":"The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.       The RemoveRange method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals.       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.       The RemoveRange method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals.       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.","pos":[0,721],"nodes":[{"content":"The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.","pos":[0,131]},{"content":"The RemoveRange method also removes the parent-child relationships between the parent visual, which is the owner of the &lt;xref:System.Windows.Media.VisualCollection&gt;, and the range of child visuals.","pos":[138,335],"source":"       The RemoveRange method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals."},{"content":"If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the &lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt; and &lt;xref:System.Windows.Media.Visual.RemoveVisualChild%2A&gt; methods.","pos":[342,588],"source":"       If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods."},{"content":"When you use these methods, you define your own storage implementation, and do not use &lt;xref:System.Windows.Media.VisualCollection&gt;.","pos":[589,721],"source":" When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>."}]}]},{"pos":[26727,26783],"content":"The zero-based index of the range of elements to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the range of elements to remove.","pos":[0,56]}]},{"pos":[26844,26877],"content":"The number of elements to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements to remove.","pos":[0,33]}]},{"pos":[27069,27146],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero or <code>count</code> is less than zero."},{"pos":[27241,27391],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not refer to a valid range of elements in the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>index</code> and <code>count</code> do not refer to a valid range of elements in the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[27767,27887],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.VisualCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Windows.Media.VisualCollection\"></xref>."},{"pos":[28000,28037],"content":"A value of type <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of type &lt;xref:System.Object&gt;.","pos":[0,37],"source":"A value of type <xref:System.Object>."}]},{"pos":[28688,28951],"content":"This member supports the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref:System.Collections.IEnumerable.GetEnumerator*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member supports the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","pos":[0,171],"source":"This member supports the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code."},{"content":"For a description of this member, see &lt;xref:System.Collections.IEnumerable.GetEnumerator*&gt;.","pos":[172,263],"source":" For a description of this member, see <xref:System.Collections.IEnumerable.GetEnumerator*>."}]},{"pos":[29129,29190],"content":"An object that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to iterate through the collection.","pos":[0,61]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.VisualCollection\n  id: VisualCollection\n  children:\n  - System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)\n  - System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)\n  - System.Windows.Media.VisualCollection.Capacity\n  - System.Windows.Media.VisualCollection.Clear\n  - System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)\n  - System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)\n  - System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)\n  - System.Windows.Media.VisualCollection.Count\n  - System.Windows.Media.VisualCollection.GetEnumerator\n  - System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)\n  - System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)\n  - System.Windows.Media.VisualCollection.IsReadOnly\n  - System.Windows.Media.VisualCollection.IsSynchronized\n  - System.Windows.Media.VisualCollection.Item(System.Int32)\n  - System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)\n  - System.Windows.Media.VisualCollection.RemoveAt(System.Int32)\n  - System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)\n  - System.Windows.Media.VisualCollection.SyncRoot\n  - System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: VisualCollection\n  nameWithType: VisualCollection\n  fullName: System.Windows.Media.VisualCollection\n  type: Class\n  summary: Represents an ordered collection of <xref href=\"System.Windows.Media.Visual\"></xref> objects.\n  remarks: A VisualCollection has implied context affinity. If a procedure attempts to access the VisualCollection from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown.\n  example:\n  - \"The following example shows how to create a VisualCollection and add members to it.  \\n  \\n [!code-cs[DrawingVisualSample#100](~/add/codesnippet/csharp/DrawingVisual/Window1.xaml.cs#100)]\\n [!code-vb[DrawingVisualSample#100](~/add/codesnippet/visualbasic/drawingvisual/window1.xaml.vb#100)]  \\n  \\n> [!NOTE]\\n>  For the complete sample, see [Hit Test Using DrawingVisuals Sample](http://go.microsoft.com/fwlink/?LinkID=159994).\"\n  syntax:\n    content: 'public sealed class VisualCollection : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)\n  id: '#ctor(System.Windows.Media.Visual)'\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: VisualCollection(Visual)\n  nameWithType: VisualCollection.VisualCollection(Visual)\n  fullName: System.Windows.Media.VisualCollection.VisualCollection(Visual)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Media.VisualCollection\"></xref> class.\n  syntax:\n    content: public VisualCollection (System.Windows.Media.Visual parent);\n    parameters:\n    - id: parent\n      type: System.Windows.Media.Visual\n      description: The parent visual object whose <xref href=\"System.Windows.Media.VisualCollection\"></xref> is returned.\n  overload: System.Windows.Media.VisualCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)\n  id: Add(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Add(Visual)\n  nameWithType: VisualCollection.Add(Visual)\n  fullName: System.Windows.Media.VisualCollection.Add(Visual)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Appends a <xref href=\"System.Windows.Media.Visual\"></xref> to the end of the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  remarks: \"Adding a <xref:System.Windows.Media.Visual> whose value is `null` is permitted and does not raise an exception.  \\n  \\n The Add method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.  \\n  \\n If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you must define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.\"\n  example:\n  - \"The following example shows how to create a <xref:System.Windows.Media.VisualCollection> and add members to it.  \\n  \\n [!code-cs[DrawingVisualSample#100](~/add/codesnippet/csharp/DrawingVisual/Window1.xaml.cs#100)]\\n [!code-vb[DrawingVisualSample#100](~/add/codesnippet/visualbasic/drawingvisual/window1.xaml.vb#100)]  \\n  \\n> [!NOTE]\\n>  For the complete sample, see [Hit Test Using DrawingVisuals Sample](http://go.microsoft.com/fwlink/?LinkID=159994).\"\n  syntax:\n    content: public int Add (System.Windows.Media.Visual visual);\n    parameters:\n    - id: visual\n      type: System.Windows.Media.Visual\n      description: The <xref href=\"System.Windows.Media.Visual\"></xref> to append to the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n    return:\n      type: System.Int32\n      description: The index in the collection at which <code>visual</code> was added.\n  overload: System.Windows.Media.VisualCollection.Add*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An <xref:System.ArgumentException> is thrown if the <xref href=\"System.Windows.Media.Visual\"></xref> is a root element.\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Capacity\n  id: Capacity\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: VisualCollection.Capacity\n  fullName: System.Windows.Media.VisualCollection.Capacity\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Gets or sets the number of elements that the <xref href=\"System.Windows.Media.VisualCollection\"></xref> can contain.\n  remarks: The value of Capacity is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing. <xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>. Capacity is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>. If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds Capacity while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased. By default Capacity is zero.\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Windows.Media.VisualCollection\"></xref> can contain.\n  overload: System.Windows.Media.VisualCollection.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Capacity is set to a value that is less than <xref:System.Windows.Media.VisualCollection.Count*>.\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Clear\n  id: Clear\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: VisualCollection.Clear()\n  fullName: System.Windows.Media.VisualCollection.Clear()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Removes all elements from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  remarks: The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero. The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Windows.Media.VisualCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)\n  id: Contains(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Contains(Visual)\n  nameWithType: VisualCollection.Contains(Visual)\n  fullName: System.Windows.Media.VisualCollection.Contains(Visual)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Returns a <xref:System.Boolean> value that indicates whether the specified <xref href=\"System.Windows.Media.Visual\"></xref> is contained in the collection.\n  remarks: The worst-case runtime scenario of this function is `O(n)`, where `n` is the number of items in the <xref:System.Windows.Media.VisualCollection>.\n  syntax:\n    content: public bool Contains (System.Windows.Media.Visual visual);\n    parameters:\n    - id: visual\n      type: System.Windows.Media.Visual\n      description: The <xref href=\"System.Windows.Media.Visual\"></xref> to search for in the collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>visual</code> is contained in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Media.VisualCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: VisualCollection.CopyTo(Array,Int32)\n  fullName: System.Windows.Media.VisualCollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Copies the items in the collection to an array, starting at a specific array index.\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements that are copied from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Windows.Media.VisualCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)\n  id: CopyTo(System.Windows.Media.Visual[],System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: CopyTo(Visual[],Int32)\n  nameWithType: VisualCollection.CopyTo(Visual[],Int32)\n  fullName: System.Windows.Media.VisualCollection.CopyTo(Visual[],Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Copies the current collection into the passed <xref href=\"System.Windows.Media.Visual\"></xref> array.\n  syntax:\n    content: public void CopyTo (System.Windows.Media.Visual[] array, int index);\n    parameters:\n    - id: array\n      type: System.Windows.Media.Visual[]\n      description: An array of <xref href=\"System.Windows.Media.Visual\"></xref> objects (which must have zero-based indexing).\n    - id: index\n      type: System.Int32\n      description: The index to start copying from within `array`.\n  overload: System.Windows.Media.VisualCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Count\n  id: Count\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: VisualCollection.Count\n  fullName: System.Windows.Media.VisualCollection.Count\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Gets the number of elements in the collection.\n  remarks: \"Count is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.  \\n  \\n Count is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>. If Count exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Windows.Media.VisualCollection\"></xref> contains.\n  overload: System.Windows.Media.VisualCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: VisualCollection.GetEnumerator()\n  fullName: System.Windows.Media.VisualCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Retrieves an enumerator that can iterate through the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  syntax:\n    content: public System.Windows.Media.VisualCollection.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Windows.Media.VisualCollection.Enumerator\n      description: An enumerator that can be used to iterate through the collection.\n  overload: System.Windows.Media.VisualCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)\n  id: IndexOf(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: IndexOf(Visual)\n  nameWithType: VisualCollection.IndexOf(Visual)\n  fullName: System.Windows.Media.VisualCollection.IndexOf(Visual)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Returns the zero-based index of the <xref href=\"System.Windows.Media.Visual\"></xref>.\n  remarks: If the <xref:System.Windows.Media.Visual> is not in the <xref:System.Windows.Media.VisualCollection>, -1 is returned. If `null` is passed to the method, the index of the first entry that has `null` is returned. If there is no null entry, -1 is returned.\n  syntax:\n    content: public int IndexOf (System.Windows.Media.Visual visual);\n    parameters:\n    - id: visual\n      type: System.Windows.Media.Visual\n      description: The <xref href=\"System.Windows.Media.Visual\"></xref> to locate in the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n    return:\n      type: System.Int32\n      description: The index of the <xref href=\"System.Windows.Media.Visual\"></xref>.\n  overload: System.Windows.Media.VisualCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)\n  id: Insert(System.Int32,System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Insert(Int32,Visual)\n  nameWithType: VisualCollection.Insert(Int32,Visual)\n  fullName: System.Windows.Media.VisualCollection.Insert(Int32,Visual)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Inserts an element into the <xref href=\"System.Windows.Media.VisualCollection\"></xref> at the specified index.\n  remarks: \"If <xref:System.Windows.Media.VisualCollection.Count%2A> already equals <xref:System.Windows.Media.VisualCollection.Capacity%2A>, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased before the new <xref:System.Windows.Media.Visual> is inserted. If `index` is equal to <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` is added to the end of <xref:System.Windows.Media.VisualCollection>. Any existing visual objects that are equal to or greater than `index` are shifted to accommodate the new <xref:System.Windows.Media.Visual>, and their index values are updated.  \\n  \\n The Insert method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.  \\n  \\n If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.\"\n  syntax:\n    content: public void Insert (int index, System.Windows.Media.Visual visual);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which the value should be inserted.\n    - id: visual\n      type: System.Windows.Media.Visual\n      description: The <xref href=\"System.Windows.Media.Visual\"></xref> to insert into the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  overload: System.Windows.Media.VisualCollection.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than <xref:System.Windows.Media.VisualCollection.Count*>.\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: VisualCollection.IsReadOnly\n  fullName: System.Windows.Media.VisualCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Gets a value that indicates whether the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is read-only.\n  remarks: This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: The value that indicates whether the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is read-only.\n  overload: System.Windows.Media.VisualCollection.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: VisualCollection.IsSynchronized\n  fullName: System.Windows.Media.VisualCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Gets a value that indicates whether access to the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is synchronized (thread-safe).\n  remarks: This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: The value that indicates whether the <xref href=\"System.Windows.Media.VisualCollection\"></xref> is synchronized (thread-safe).\n  overload: System.Windows.Media.VisualCollection.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: VisualCollection.Item(Int32)\n  fullName: System.Windows.Media.VisualCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Gets or sets the <xref href=\"System.Windows.Media.Visual\"></xref> that is stored at the zero-based index of the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  remarks: This property provides the ability to access a specific <xref:System.Windows.Media.Visual> in the <xref:System.Windows.Media.VisualCollection> by using an index.\n  syntax:\n    content: public System.Windows.Media.Visual this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.Windows.Media.VisualCollection\"></xref> from which to get or set the <xref href=\"System.Windows.Media.Visual\"></xref>.\n    return:\n      type: System.Windows.Media.Visual\n      description: The <xref href=\"System.Windows.Media.Visual\"></xref> that is stored at <code>index</code>.\n  overload: System.Windows.Media.VisualCollection.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero, or <code>index</code> is equal to or greater than <xref:System.Windows.Media.VisualCollection.Count*>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The new child element already has a parent, or the value at the specified index is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)\n  id: Remove(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: Remove(Visual)\n  nameWithType: VisualCollection.Remove(Visual)\n  fullName: System.Windows.Media.VisualCollection.Remove(Visual)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Removes the specified <xref href=\"System.Windows.Media.Visual\"></xref> object from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  remarks: \"The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated. If `visual` is `null`, the first `null` entry is removed. Note that removing a `null` entry is linear in the size of the collection.  \\n  \\n The Remove method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.  \\n  \\n If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.\"\n  syntax:\n    content: public void Remove (System.Windows.Media.Visual visual);\n    parameters:\n    - id: visual\n      type: System.Windows.Media.Visual\n      description: The <xref href=\"System.Windows.Media.Visual\"></xref> to remove from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  overload: System.Windows.Media.VisualCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: VisualCollection.RemoveAt(Int32)\n  fullName: System.Windows.Media.VisualCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Removes the visual object at the specified index in the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  remarks: \"The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.  \\n  \\n The RemoveAt method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.  \\n  \\n If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.\"\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the visual to remove.\n  overload: System.Windows.Media.VisualCollection.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero, or <code>index</code> is equal to or greater than <xref:System.Windows.Media.VisualCollection.Count*>.\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)\n  id: RemoveRange(System.Int32,System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: RemoveRange(Int32,Int32)\n  nameWithType: VisualCollection.RemoveRange(Int32,Int32)\n  fullName: System.Windows.Media.VisualCollection.RemoveRange(Int32,Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Removes a range of visual objects from the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  remarks: \"The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.  \\n  \\n The RemoveRange method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals.  \\n  \\n If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.\"\n  syntax:\n    content: public void RemoveRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the range of elements to remove.\n    - id: count\n      type: System.Int32\n      description: The number of elements to remove.\n  overload: System.Windows.Media.VisualCollection.RemoveRange*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or <code>count</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not refer to a valid range of elements in the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: VisualCollection.SyncRoot\n  fullName: System.Windows.Media.VisualCollection.SyncRoot\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Windows.Media.VisualCollection\"></xref>.\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: A value of type <xref:System.Object>.\n  overload: System.Windows.Media.VisualCollection.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Windows.Media.VisualCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: VisualCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Windows.Media.VisualCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  summary: This member supports the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref:System.Collections.IEnumerable.GetEnumerator*>.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An object that can be used to iterate through the collection.\n  overload: System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: VisualCollection(Visual)\n  nameWithType: VisualCollection.VisualCollection(Visual)\n  fullName: System.Windows.Media.VisualCollection.VisualCollection(Visual)\n- uid: System.Windows.Media.Visual\n  parent: System.Windows.Media\n  isExternal: false\n  name: Visual\n  nameWithType: Visual\n  fullName: System.Windows.Media.Visual\n- uid: System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Add(Visual)\n  nameWithType: VisualCollection.Add(Visual)\n  fullName: System.Windows.Media.VisualCollection.Add(Visual)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.VisualCollection.Capacity\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Capacity\n  nameWithType: VisualCollection.Capacity\n  fullName: System.Windows.Media.VisualCollection.Capacity\n- uid: System.Windows.Media.VisualCollection.Clear\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: VisualCollection.Clear()\n  fullName: System.Windows.Media.VisualCollection.Clear()\n- uid: System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Contains(Visual)\n  nameWithType: VisualCollection.Contains(Visual)\n  fullName: System.Windows.Media.VisualCollection.Contains(Visual)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: VisualCollection.CopyTo(Array,Int32)\n  fullName: System.Windows.Media.VisualCollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: CopyTo(Visual[],Int32)\n  nameWithType: VisualCollection.CopyTo(Visual[],Int32)\n  fullName: System.Windows.Media.VisualCollection.CopyTo(Visual[],Int32)\n- uid: System.Windows.Media.Visual[]\n  parent: System.Windows.Media\n  isExternal: false\n  name: Visual\n  nameWithType: Visual\n  fullName: System.Windows.Media.Visual[]\n  spec.csharp:\n  - uid: System.Windows.Media.Visual\n    name: Visual\n    nameWithType: Visual\n    fullName: Visual[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Media.VisualCollection.Count\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Count\n  nameWithType: VisualCollection.Count\n  fullName: System.Windows.Media.VisualCollection.Count\n- uid: System.Windows.Media.VisualCollection.GetEnumerator\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: VisualCollection.GetEnumerator()\n  fullName: System.Windows.Media.VisualCollection.GetEnumerator()\n- uid: System.Windows.Media.VisualCollection.Enumerator\n  parent: System.Windows.Media\n  isExternal: false\n  name: VisualCollection+Enumerator\n  nameWithType: VisualCollection+Enumerator\n  fullName: System.Windows.Media.VisualCollection+Enumerator\n- uid: System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: IndexOf(Visual)\n  nameWithType: VisualCollection.IndexOf(Visual)\n  fullName: System.Windows.Media.VisualCollection.IndexOf(Visual)\n- uid: System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Insert(Int32,Visual)\n  nameWithType: VisualCollection.Insert(Int32,Visual)\n  fullName: System.Windows.Media.VisualCollection.Insert(Int32,Visual)\n- uid: System.Windows.Media.VisualCollection.IsReadOnly\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: VisualCollection.IsReadOnly\n  fullName: System.Windows.Media.VisualCollection.IsReadOnly\n- uid: System.Windows.Media.VisualCollection.IsSynchronized\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: VisualCollection.IsSynchronized\n  fullName: System.Windows.Media.VisualCollection.IsSynchronized\n- uid: System.Windows.Media.VisualCollection.Item(System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: VisualCollection.Item(Int32)\n  fullName: System.Windows.Media.VisualCollection.Item(Int32)\n- uid: System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Remove(Visual)\n  nameWithType: VisualCollection.Remove(Visual)\n  fullName: System.Windows.Media.VisualCollection.Remove(Visual)\n- uid: System.Windows.Media.VisualCollection.RemoveAt(System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: VisualCollection.RemoveAt(Int32)\n  fullName: System.Windows.Media.VisualCollection.RemoveAt(Int32)\n- uid: System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: RemoveRange(Int32,Int32)\n  nameWithType: VisualCollection.RemoveRange(Int32,Int32)\n  fullName: System.Windows.Media.VisualCollection.RemoveRange(Int32,Int32)\n- uid: System.Windows.Media.VisualCollection.SyncRoot\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: VisualCollection.SyncRoot\n  fullName: System.Windows.Media.VisualCollection.SyncRoot\n- uid: System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: VisualCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Windows.Media.VisualCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.Media.VisualCollection.#ctor*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: VisualCollection\n  nameWithType: VisualCollection.VisualCollection\n- uid: System.Windows.Media.VisualCollection.Add*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Add\n  nameWithType: VisualCollection.Add\n- uid: System.Windows.Media.VisualCollection.Capacity*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Capacity\n  nameWithType: VisualCollection.Capacity\n- uid: System.Windows.Media.VisualCollection.Clear*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Clear\n  nameWithType: VisualCollection.Clear\n- uid: System.Windows.Media.VisualCollection.Contains*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Contains\n  nameWithType: VisualCollection.Contains\n- uid: System.Windows.Media.VisualCollection.CopyTo*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: VisualCollection.CopyTo\n- uid: System.Windows.Media.VisualCollection.Count*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Count\n  nameWithType: VisualCollection.Count\n- uid: System.Windows.Media.VisualCollection.GetEnumerator*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: VisualCollection.GetEnumerator\n- uid: System.Windows.Media.VisualCollection.IndexOf*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: VisualCollection.IndexOf\n- uid: System.Windows.Media.VisualCollection.Insert*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Insert\n  nameWithType: VisualCollection.Insert\n- uid: System.Windows.Media.VisualCollection.IsReadOnly*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: VisualCollection.IsReadOnly\n- uid: System.Windows.Media.VisualCollection.IsSynchronized*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: VisualCollection.IsSynchronized\n- uid: System.Windows.Media.VisualCollection.Item*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Item\n  nameWithType: VisualCollection.Item\n- uid: System.Windows.Media.VisualCollection.Remove*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: Remove\n  nameWithType: VisualCollection.Remove\n- uid: System.Windows.Media.VisualCollection.RemoveAt*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: VisualCollection.RemoveAt\n- uid: System.Windows.Media.VisualCollection.RemoveRange*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: RemoveRange\n  nameWithType: VisualCollection.RemoveRange\n- uid: System.Windows.Media.VisualCollection.SyncRoot*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: VisualCollection.SyncRoot\n- uid: System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Windows.Media.VisualCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: VisualCollection.System.Collections.IEnumerable.GetEnumerator\n"}