{"nodes":[{"pos":[346,426],"content":"Provides a base class from which all objects to be used as evidence must derive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base class from which all objects to be used as evidence must derive.","pos":[0,80]}]},{"pos":[439,1962],"content":"Before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], almost any object could be used as an evidence object if the hosting code wanted to apply it as evidence. For example, some .NET Framework code recognized <xref:System.Uri?displayProperty=fullName> objects as evidence. The common language runtime (CLR) considered evidence objects as <xref:System.Object?displayProperty=fullName> references, and did not apply any type safety to them.       This presented a problem because there were implicit restrictions on which types could be used as evidence objects. Specifically, any object used as evidence had to be serializable and could not be `null`. If these requirements were not met, the CLR threw an exception whenever an operation that required one of these assumptions was performed.       The EvidenceBase class, which all evidence objects must derive from, was introduced in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] to enable constraints on the types of objects that can be used as evidence and to provide the ability to add new features and requirements to all evidence objects. The EvidenceBase class ensures, upon instantiation, that the evidence object is serializable. In addition, it enables new evidence requirements to be created by adding new default implementations to the base class.       All the types used by the CLR as evidence objects have been updated in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] to derive from EvidenceBase.","needQuote":false,"needEscape":true,"nodes":[{"content":"Before the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, almost any object could be used as an evidence object if the hosting code wanted to apply it as evidence.","pos":[0,177],"source":"Before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], almost any object could be used as an evidence object if the hosting code wanted to apply it as evidence."},{"content":"For example, some .NET Framework code recognized &lt;xref:System.Uri?displayProperty=fullName&gt; objects as evidence.","pos":[178,290],"source":" For example, some .NET Framework code recognized <xref:System.Uri?displayProperty=fullName> objects as evidence."},{"content":"The common language runtime (CLR) considered evidence objects as &lt;xref:System.Object?displayProperty=fullName&gt; references, and did not apply any type safety to them.","pos":[291,456],"source":" The common language runtime (CLR) considered evidence objects as <xref:System.Object?displayProperty=fullName> references, and did not apply any type safety to them."},{"content":"This presented a problem because there were implicit restrictions on which types could be used as evidence objects.","pos":[463,578]},{"content":"Specifically, any object used as evidence had to be serializable and could not be <ph id=\"ph1\">`null`</ph>.","pos":[579,668],"source":" Specifically, any object used as evidence had to be serializable and could not be `null`."},{"content":"If these requirements were not met, the CLR threw an exception whenever an operation that required one of these assumptions was performed.","pos":[669,807]},{"content":"The EvidenceBase class, which all evidence objects must derive from, was introduced in the <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> to enable constraints on the types of objects that can be used as evidence and to provide the ability to add new features and requirements to all evidence objects.","pos":[814,1130],"source":"       The EvidenceBase class, which all evidence objects must derive from, was introduced in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] to enable constraints on the types of objects that can be used as evidence and to provide the ability to add new features and requirements to all evidence objects."},{"content":"The EvidenceBase class ensures, upon instantiation, that the evidence object is serializable.","pos":[1131,1224]},{"content":"In addition, it enables new evidence requirements to be created by adding new default implementations to the base class.","pos":[1225,1345]},{"content":"All the types used by the CLR as evidence objects have been updated in the <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> to derive from EvidenceBase.","pos":[1352,1517],"source":"       All the types used by the CLR as evidence objects have been updated in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] to derive from EvidenceBase."}]},{"pos":[2537,2634],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.EvidenceBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Policy.EvidenceBase\"></xref> class."},{"pos":[2646,2825],"content":"All objects to be used as evidence must be serializable. You must mark any derived types as serializable, because the serializable attribute does not propagate to derived classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"All objects to be used as evidence must be serializable. You must mark any derived types as serializable, because the serializable attribute does not propagate to derived classes.","pos":[0,179],"nodes":[{"content":"All objects to be used as evidence must be serializable.","pos":[0,56]},{"content":"You must mark any derived types as serializable, because the serializable attribute does not propagate to derived classes.","pos":[57,179]}]}]},{"pos":[3074,3127],"content":"An object to be used as evidence is not serializable.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object to be used as evidence is not serializable.","pos":[0,53]}]},{"pos":[3476,3545],"content":"Creates a new object that is a complete copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new object that is a complete copy of the current instance.","pos":[0,69]}]},{"pos":[3557,3652],"content":"The duplicate copy is a complete copy that includes all the evidence objects in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duplicate copy is a complete copy that includes all the evidence objects in the collection.","pos":[0,95]}]},{"pos":[3835,3876],"content":"A duplicate copy of this evidence object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A duplicate copy of this evidence object.","pos":[0,41]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Policy.EvidenceBase\n  id: EvidenceBase\n  children:\n  - System.Security.Policy.EvidenceBase.#ctor\n  - System.Security.Policy.EvidenceBase.Clone\n  langs:\n  - csharp\n  name: EvidenceBase\n  nameWithType: EvidenceBase\n  fullName: System.Security.Policy.EvidenceBase\n  type: Class\n  summary: Provides a base class from which all objects to be used as evidence must derive.\n  remarks: \"Before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], almost any object could be used as an evidence object if the hosting code wanted to apply it as evidence. For example, some .NET Framework code recognized <xref:System.Uri?displayProperty=fullName> objects as evidence. The common language runtime (CLR) considered evidence objects as <xref:System.Object?displayProperty=fullName> references, and did not apply any type safety to them.  \\n  \\n This presented a problem because there were implicit restrictions on which types could be used as evidence objects. Specifically, any object used as evidence had to be serializable and could not be `null`. If these requirements were not met, the CLR threw an exception whenever an operation that required one of these assumptions was performed.  \\n  \\n The EvidenceBase class, which all evidence objects must derive from, was introduced in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] to enable constraints on the types of objects that can be used as evidence and to provide the ability to add new features and requirements to all evidence objects. The EvidenceBase class ensures, upon instantiation, that the evidence object is serializable. In addition, it enables new evidence requirements to be created by adding new default implementations to the base class.  \\n  \\n All the types used by the CLR as evidence objects have been updated in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] to derive from EvidenceBase.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class EvidenceBase\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Policy.EvidenceBase.#ctor\n  id: '#ctor'\n  parent: System.Security.Policy.EvidenceBase\n  langs:\n  - csharp\n  name: EvidenceBase()\n  nameWithType: EvidenceBase.EvidenceBase()\n  fullName: System.Security.Policy.EvidenceBase.EvidenceBase()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new instance of the <xref href=\"System.Security.Policy.EvidenceBase\"></xref> class.\n  remarks: All objects to be used as evidence must be serializable. You must mark any derived types as serializable, because the serializable attribute does not propagate to derived classes.\n  syntax:\n    content: protected EvidenceBase ();\n    parameters: []\n  overload: System.Security.Policy.EvidenceBase.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An object to be used as evidence is not serializable.\n  platform:\n  - net462\n- uid: System.Security.Policy.EvidenceBase.Clone\n  id: Clone\n  parent: System.Security.Policy.EvidenceBase\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: EvidenceBase.Clone()\n  fullName: System.Security.Policy.EvidenceBase.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Creates a new object that is a complete copy of the current instance.\n  remarks: The duplicate copy is a complete copy that includes all the evidence objects in the collection.\n  syntax:\n    content: public virtual System.Security.Policy.EvidenceBase Clone ();\n    parameters: []\n    return:\n      type: System.Security.Policy.EvidenceBase\n      description: A duplicate copy of this evidence object.\n  overload: System.Security.Policy.EvidenceBase.Clone*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.Policy.EvidenceBase.#ctor\n  parent: System.Security.Policy.EvidenceBase\n  isExternal: false\n  name: EvidenceBase()\n  nameWithType: EvidenceBase.EvidenceBase()\n  fullName: System.Security.Policy.EvidenceBase.EvidenceBase()\n- uid: System.Security.Policy.EvidenceBase.Clone\n  parent: System.Security.Policy.EvidenceBase\n  isExternal: false\n  name: Clone()\n  nameWithType: EvidenceBase.Clone()\n  fullName: System.Security.Policy.EvidenceBase.Clone()\n- uid: System.Security.Policy.EvidenceBase\n  parent: System.Security.Policy\n  isExternal: false\n  name: EvidenceBase\n  nameWithType: EvidenceBase\n  fullName: System.Security.Policy.EvidenceBase\n- uid: System.Security.Policy.EvidenceBase.#ctor*\n  parent: System.Security.Policy.EvidenceBase\n  isExternal: false\n  name: EvidenceBase\n  nameWithType: EvidenceBase.EvidenceBase\n- uid: System.Security.Policy.EvidenceBase.Clone*\n  parent: System.Security.Policy.EvidenceBase\n  isExternal: false\n  name: Clone\n  nameWithType: EvidenceBase.Clone\n"}