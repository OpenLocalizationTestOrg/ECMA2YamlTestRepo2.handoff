{"nodes":[{"pos":[584,758],"content":"Provides a safe handle to a Windows thread or process access token. For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a safe handle to a Windows thread or process access token.","pos":[0,67]},{"content":"For more information see <bpt id=\"p1\">[</bpt>Access Tokens<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)</ept>","pos":[68,174],"source":" For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)"}]},{"pos":[1527,1638],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> class."},{"pos":[1786,1918],"content":"An <xref:System.IntPtr> object that represents the pre-existing handle to use. Using <xref:System.IntPtr> returns an invalid handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <xref:System.IntPtr> object that represents the pre-existing handle to use. Using <xref:System.IntPtr> returns an invalid handle.","pos":[0,132],"nodes":[{"content":"An &lt;xref:System.IntPtr&gt; object that represents the pre-existing handle to use.","pos":[0,78],"source":"An <xref:System.IntPtr> object that represents the pre-existing handle to use."},{"content":"Using &lt;xref:System.IntPtr&gt; returns an invalid handle.","pos":[79,132],"source":" Using <xref:System.IntPtr> returns an invalid handle."}]}]},{"pos":[2445,2599],"content":"Returns an invalid handle by instantiating a <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with &lt;xref:System.IntPtr.Zero&gt;.","needQuote":true,"needEscape":true,"source":"Returns an invalid handle by instantiating a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object with <xref:System.IntPtr.Zero>."},{"pos":[2803,2890],"content":"Returns a<bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns a<xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object."},{"pos":[3405,3463],"content":"Gets a value that indicates whether the handle is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]},{"pos":[3585,3748],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handle is not valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4414,4426],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  id: SafeAccessTokenHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  type: Class\n  summary: Provides a safe handle to a Windows thread or process access token. For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public sealed class SafeAccessTokenHandle : System.Runtime.InteropServices.SafeHandle\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: SafeAccessTokenHandle(IntPtr)\n  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> class.\n  syntax:\n    content: public SafeAccessTokenHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: An <xref:System.IntPtr> object that represents the pre-existing handle to use. Using <xref:System.IntPtr> returns an invalid handle.\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  id: InvalidHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: InvalidHandle\n  nameWithType: SafeAccessTokenHandle.InvalidHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Returns an invalid handle by instantiating a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object with <xref:System.IntPtr.Zero>.\n  syntax:\n    content: public static Microsoft.Win32.SafeHandles.SafeAccessTokenHandle InvalidHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: Returns a<xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object.\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeAccessTokenHandle.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  syntax:\n    content: public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeAccessTokenHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: SafeAccessTokenHandle(IntPtr)\n  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: InvalidHandle\n  nameWithType: SafeAccessTokenHandle.InvalidHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeAccessTokenHandle.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeAccessTokenHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: InvalidHandle\n  nameWithType: SafeAccessTokenHandle.InvalidHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeAccessTokenHandle.IsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeAccessTokenHandle.ReleaseHandle\n"}