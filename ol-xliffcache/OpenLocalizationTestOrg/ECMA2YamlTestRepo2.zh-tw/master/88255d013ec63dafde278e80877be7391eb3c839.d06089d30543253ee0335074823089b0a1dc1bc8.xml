{"nodes":[{"pos":[620,750],"content":"Represents the base interface for all contracts that are used for communication between components that are updated independently.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the base interface for all contracts that are used for communication between components that are updated independently.","pos":[0,130]}]},{"pos":[762,1370],"content":"The IContract interface defines a contract that independently updated components, such as an application and an add-in, can use to communicate. Components can use IContract to communicate across process or application domain boundaries, or to communicate with other components in the same process or application domain. IContract serves a similar purpose for components created using the .NET Framework as the `IUnknown` interface serves for components created using COM. To determine whether an object implements a particular contract, use the <xref:System.AddIn.Contract.IContract.QueryContract%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IContract interface defines a contract that independently updated components, such as an application and an add-in, can use to communicate.","pos":[0,143]},{"content":"Components can use IContract to communicate across process or application domain boundaries, or to communicate with other components in the same process or application domain.","pos":[144,319]},{"content":"IContract serves a similar purpose for components created using the .NET Framework as the <ph id=\"ph1\">`IUnknown`</ph> interface serves for components created using COM.","pos":[320,471],"source":" IContract serves a similar purpose for components created using the .NET Framework as the `IUnknown` interface serves for components created using COM."},{"content":"To determine whether an object implements a particular contract, use the &lt;xref:System.AddIn.Contract.IContract.QueryContract%2A&gt; method.","pos":[472,608],"source":" To determine whether an object implements a particular contract, use the <xref:System.AddIn.Contract.IContract.QueryContract%2A> method."}]},{"pos":[1858,1950],"content":"Specifies that the contract is accessible to a client until the client revokes the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the contract is accessible to a client until the client revokes the contract.","pos":[0,92]}]},{"pos":[1963,2419],"content":"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the AcquireLifetimeToken method to notify the object that the client requires access to the contract. An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.       To revoke a contract, clients call the <xref:System.AddIn.Contract.IContract.RevokeLifetimeToken%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the AcquireLifetimeToken method to notify the object that the client requires access to the contract. An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.       To revoke a contract, clients call the <xref:System.AddIn.Contract.IContract.RevokeLifetimeToken%2A> method.","pos":[0,454],"nodes":[{"content":"Clients of an object that implements &lt;xref:System.AddIn.Contract.IContract&gt; call the AcquireLifetimeToken method to notify the object that the client requires access to the contract.","pos":[0,182],"source":"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the AcquireLifetimeToken method to notify the object that the client requires access to the contract."},{"content":"An &lt;xref:System.AddIn.Contract.IContract&gt; is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.","pos":[183,339],"source":" An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked."},{"content":"To revoke a contract, clients call the &lt;xref:System.AddIn.Contract.IContract.RevokeLifetimeToken%2A&gt; method.","pos":[346,454],"source":"       To revoke a contract, clients call the <xref:System.AddIn.Contract.IContract.RevokeLifetimeToken%2A> method."}]}]},{"pos":[2555,2654],"content":"A value, also known as a lifetime token, that identifies the client that has acquired the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value, also known as a lifetime token, that identifies the client that has acquired the contract.","pos":[0,99]}]},{"pos":[3143,3224],"content":"Returns a hash code for the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a hash code for the <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[3356,3429],"content":"A hash code for the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A hash code for the <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[3943,3999],"content":"Returns a contract that is implemented by this contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a contract that is implemented by this contract.","pos":[0,56]}]},{"pos":[4012,4465],"content":"The QueryContract method enables <xref:System.AddIn.Contract.IContract> objects to expose other contracts. QueryContract serves a purpose similar to that of the `IUnknown.QueryInterface` method in COM.       The format of the strings used to identify contracts is defined by the <xref:System.AddIn.Contract.IContract> implementation. It is recommended that you use the <xref:System.Type.AssemblyQualifiedName%2A> of the contract that is being queried.","needQuote":false,"needEscape":true,"nodes":[{"content":"The QueryContract method enables &lt;xref:System.AddIn.Contract.IContract&gt; objects to expose other contracts.","pos":[0,106],"source":"The QueryContract method enables <xref:System.AddIn.Contract.IContract> objects to expose other contracts."},{"content":"QueryContract serves a purpose similar to that of the <ph id=\"ph1\">`IUnknown.QueryInterface`</ph> method in COM.","pos":[107,201],"source":" QueryContract serves a purpose similar to that of the `IUnknown.QueryInterface` method in COM."},{"content":"The format of the strings used to identify contracts is defined by the &lt;xref:System.AddIn.Contract.IContract&gt; implementation.","pos":[208,333],"source":"       The format of the strings used to identify contracts is defined by the <xref:System.AddIn.Contract.IContract> implementation."},{"content":"It is recommended that you use the &lt;xref:System.Type.AssemblyQualifiedName%2A&gt; of the contract that is being queried.","pos":[334,451],"source":" It is recommended that you use the <xref:System.Type.AssemblyQualifiedName%2A> of the contract that is being queried."}]},{"pos":[4662,4724],"content":"A string that identifies the contract that is being requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that identifies the contract that is being requested.","pos":[0,62]}]},{"pos":[4800,5071],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents a contract that a client is requesting from the current contract; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the current contract does not support the contract that is requested.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.AddIn.Contract.IContract\"></xref> that represents a contract that a client is requesting from the current contract; <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the current contract does not support the contract that is requested."},{"pos":[5621,5732],"content":"Indicates whether the specified contract is equal to this <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified contract is equal to this <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[5923,6010],"content":"The contract to compare with this <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The contract to compare with this <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[6069,6300],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">contract</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to this <bpt id=\"p3\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>contract</code> is equal to this <xref href=\"System.AddIn.Contract.IContract\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6766,6866],"content":"Returns a string representation of the current <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a string representation of the current <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[6999,7091],"content":"A string representation of the current <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string representation of the current <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[7627,7691],"content":"Specifies that the contract is no longer accessible to a client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the contract is no longer accessible to a client.","pos":[0,64]}]},{"pos":[7704,8158],"content":"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the RevokeLifetimeToken method to notify the object that the client no longer needs the contract. An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.       To acquire a contract, clients call the <xref:System.AddIn.Contract.IContract.AcquireLifetimeToken%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the RevokeLifetimeToken method to notify the object that the client no longer needs the contract. An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.       To acquire a contract, clients call the <xref:System.AddIn.Contract.IContract.AcquireLifetimeToken%2A> method.","pos":[0,452],"nodes":[{"content":"Clients of an object that implements &lt;xref:System.AddIn.Contract.IContract&gt; call the RevokeLifetimeToken method to notify the object that the client no longer needs the contract.","pos":[0,178],"source":"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the RevokeLifetimeToken method to notify the object that the client no longer needs the contract."},{"content":"An &lt;xref:System.AddIn.Contract.IContract&gt; is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.","pos":[179,335],"source":" An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked."},{"content":"To acquire a contract, clients call the &lt;xref:System.AddIn.Contract.IContract.AcquireLifetimeToken%2A&gt; method.","pos":[342,452],"source":"       To acquire a contract, clients call the <xref:System.AddIn.Contract.IContract.AcquireLifetimeToken%2A> method."}]}]},{"pos":[8304,8402],"content":"A value, also known as a lifetime token, that identifies the client that is revoking the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value, also known as a lifetime token, that identifies the client that is revoking the contract.","pos":[0,98]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Contract.IContract\n  id: IContract\n  children:\n  - System.AddIn.Contract.IContract.AcquireLifetimeToken\n  - System.AddIn.Contract.IContract.GetRemoteHashCode\n  - System.AddIn.Contract.IContract.QueryContract(System.String)\n  - System.AddIn.Contract.IContract.RemoteEquals(System.AddIn.Contract.IContract)\n  - System.AddIn.Contract.IContract.RemoteToString\n  - System.AddIn.Contract.IContract.RevokeLifetimeToken(System.Int32)\n  langs:\n  - csharp\n  name: IContract\n  nameWithType: IContract\n  fullName: System.AddIn.Contract.IContract\n  type: Interface\n  summary: Represents the base interface for all contracts that are used for communication between components that are updated independently.\n  remarks: The IContract interface defines a contract that independently updated components, such as an application and an add-in, can use to communicate. Components can use IContract to communicate across process or application domain boundaries, or to communicate with other components in the same process or application domain. IContract serves a similar purpose for components created using the .NET Framework as the `IUnknown` interface serves for components created using COM. To determine whether an object implements a particular contract, use the <xref:System.AddIn.Contract.IContract.QueryContract%2A> method.\n  syntax:\n    content: public interface IContract\n  implements: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IContract.AcquireLifetimeToken\n  id: AcquireLifetimeToken\n  parent: System.AddIn.Contract.IContract\n  langs:\n  - csharp\n  name: AcquireLifetimeToken()\n  nameWithType: IContract.AcquireLifetimeToken()\n  fullName: System.AddIn.Contract.IContract.AcquireLifetimeToken()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  summary: Specifies that the contract is accessible to a client until the client revokes the contract.\n  remarks: \"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the AcquireLifetimeToken method to notify the object that the client requires access to the contract. An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.  \\n  \\n To revoke a contract, clients call the <xref:System.AddIn.Contract.IContract.RevokeLifetimeToken%2A> method.\"\n  syntax:\n    content: public int AcquireLifetimeToken ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A value, also known as a lifetime token, that identifies the client that has acquired the contract.\n  overload: System.AddIn.Contract.IContract.AcquireLifetimeToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IContract.GetRemoteHashCode\n  id: GetRemoteHashCode\n  parent: System.AddIn.Contract.IContract\n  langs:\n  - csharp\n  name: GetRemoteHashCode()\n  nameWithType: IContract.GetRemoteHashCode()\n  fullName: System.AddIn.Contract.IContract.GetRemoteHashCode()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  summary: Returns a hash code for the <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  syntax:\n    content: public int GetRemoteHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  overload: System.AddIn.Contract.IContract.GetRemoteHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IContract.QueryContract(System.String)\n  id: QueryContract(System.String)\n  parent: System.AddIn.Contract.IContract\n  langs:\n  - csharp\n  name: QueryContract(String)\n  nameWithType: IContract.QueryContract(String)\n  fullName: System.AddIn.Contract.IContract.QueryContract(String)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  summary: Returns a contract that is implemented by this contract.\n  remarks: \"The QueryContract method enables <xref:System.AddIn.Contract.IContract> objects to expose other contracts. QueryContract serves a purpose similar to that of the `IUnknown.QueryInterface` method in COM.  \\n  \\n The format of the strings used to identify contracts is defined by the <xref:System.AddIn.Contract.IContract> implementation. It is recommended that you use the <xref:System.Type.AssemblyQualifiedName%2A> of the contract that is being queried.\"\n  syntax:\n    content: public System.AddIn.Contract.IContract QueryContract (string contractIdentifier);\n    parameters:\n    - id: contractIdentifier\n      type: System.String\n      description: A string that identifies the contract that is being requested.\n    return:\n      type: System.AddIn.Contract.IContract\n      description: An <xref href=\"System.AddIn.Contract.IContract\"></xref> that represents a contract that a client is requesting from the current contract; <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the current contract does not support the contract that is requested.\n  overload: System.AddIn.Contract.IContract.QueryContract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IContract.RemoteEquals(System.AddIn.Contract.IContract)\n  id: RemoteEquals(System.AddIn.Contract.IContract)\n  parent: System.AddIn.Contract.IContract\n  langs:\n  - csharp\n  name: RemoteEquals(IContract)\n  nameWithType: IContract.RemoteEquals(IContract)\n  fullName: System.AddIn.Contract.IContract.RemoteEquals(IContract)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  summary: Indicates whether the specified contract is equal to this <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  syntax:\n    content: public bool RemoteEquals (System.AddIn.Contract.IContract contract);\n    parameters:\n    - id: contract\n      type: System.AddIn.Contract.IContract\n      description: The contract to compare with this <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>contract</code> is equal to this <xref href=\"System.AddIn.Contract.IContract\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.AddIn.Contract.IContract.RemoteEquals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IContract.RemoteToString\n  id: RemoteToString\n  parent: System.AddIn.Contract.IContract\n  langs:\n  - csharp\n  name: RemoteToString()\n  nameWithType: IContract.RemoteToString()\n  fullName: System.AddIn.Contract.IContract.RemoteToString()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  summary: Returns a string representation of the current <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  syntax:\n    content: public string RemoteToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representation of the current <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  overload: System.AddIn.Contract.IContract.RemoteToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IContract.RevokeLifetimeToken(System.Int32)\n  id: RevokeLifetimeToken(System.Int32)\n  parent: System.AddIn.Contract.IContract\n  langs:\n  - csharp\n  name: RevokeLifetimeToken(Int32)\n  nameWithType: IContract.RevokeLifetimeToken(Int32)\n  fullName: System.AddIn.Contract.IContract.RevokeLifetimeToken(Int32)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  summary: Specifies that the contract is no longer accessible to a client.\n  remarks: \"Clients of an object that implements <xref:System.AddIn.Contract.IContract> call the RevokeLifetimeToken method to notify the object that the client no longer needs the contract. An <xref:System.AddIn.Contract.IContract> is guaranteed to be usable as long as at least one lifetime token that it passed to a client has not been revoked.  \\n  \\n To acquire a contract, clients call the <xref:System.AddIn.Contract.IContract.AcquireLifetimeToken%2A> method.\"\n  syntax:\n    content: public void RevokeLifetimeToken (int token);\n    parameters:\n    - id: token\n      type: System.Int32\n      description: A value, also known as a lifetime token, that identifies the client that is revoking the contract.\n  overload: System.AddIn.Contract.IContract.RevokeLifetimeToken*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.AddIn.Contract.IContract.AcquireLifetimeToken\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: AcquireLifetimeToken()\n  nameWithType: IContract.AcquireLifetimeToken()\n  fullName: System.AddIn.Contract.IContract.AcquireLifetimeToken()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AddIn.Contract.IContract.GetRemoteHashCode\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: GetRemoteHashCode()\n  nameWithType: IContract.GetRemoteHashCode()\n  fullName: System.AddIn.Contract.IContract.GetRemoteHashCode()\n- uid: System.AddIn.Contract.IContract.QueryContract(System.String)\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: QueryContract(String)\n  nameWithType: IContract.QueryContract(String)\n  fullName: System.AddIn.Contract.IContract.QueryContract(String)\n- uid: System.AddIn.Contract.IContract\n  parent: System.AddIn.Contract\n  isExternal: false\n  name: IContract\n  nameWithType: IContract\n  fullName: System.AddIn.Contract.IContract\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.AddIn.Contract.IContract.RemoteEquals(System.AddIn.Contract.IContract)\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: RemoteEquals(IContract)\n  nameWithType: IContract.RemoteEquals(IContract)\n  fullName: System.AddIn.Contract.IContract.RemoteEquals(IContract)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Contract.IContract.RemoteToString\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: RemoteToString()\n  nameWithType: IContract.RemoteToString()\n  fullName: System.AddIn.Contract.IContract.RemoteToString()\n- uid: System.AddIn.Contract.IContract.RevokeLifetimeToken(System.Int32)\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: RevokeLifetimeToken(Int32)\n  nameWithType: IContract.RevokeLifetimeToken(Int32)\n  fullName: System.AddIn.Contract.IContract.RevokeLifetimeToken(Int32)\n- uid: System.AddIn.Contract.IContract.AcquireLifetimeToken*\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: AcquireLifetimeToken\n  nameWithType: IContract.AcquireLifetimeToken\n- uid: System.AddIn.Contract.IContract.GetRemoteHashCode*\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: GetRemoteHashCode\n  nameWithType: IContract.GetRemoteHashCode\n- uid: System.AddIn.Contract.IContract.QueryContract*\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: QueryContract\n  nameWithType: IContract.QueryContract\n- uid: System.AddIn.Contract.IContract.RemoteEquals*\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: RemoteEquals\n  nameWithType: IContract.RemoteEquals\n- uid: System.AddIn.Contract.IContract.RemoteToString*\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: RemoteToString\n  nameWithType: IContract.RemoteToString\n- uid: System.AddIn.Contract.IContract.RevokeLifetimeToken*\n  parent: System.AddIn.Contract.IContract\n  isExternal: false\n  name: RevokeLifetimeToken\n  nameWithType: IContract.RevokeLifetimeToken\n"}