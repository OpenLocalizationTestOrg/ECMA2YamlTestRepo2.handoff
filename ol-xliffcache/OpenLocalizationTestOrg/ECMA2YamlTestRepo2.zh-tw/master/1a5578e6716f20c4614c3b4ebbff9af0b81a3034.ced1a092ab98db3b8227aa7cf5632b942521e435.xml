{"nodes":[{"pos":[1018,1125],"content":"Represents a claim for a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> security token.","needQuote":true,"needEscape":true,"source":"Represents a claim for a <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token."},{"pos":[1138,1782],"content":"<xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated. The claims in a SAML assertion are represented by SAML statements, which are represented by the SamlStatement class.       The SAML specification defines the following statement types:      -   <xref:System.IdentityModel.Tokens.SamlAttributeStatement>      -   <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement>      -   <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement>      -   <xref:System.IdentityModel.Tokens.SamlSubjectStatement>","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated. The claims in a SAML assertion are represented by SAML statements, which are represented by the SamlStatement class.       The SAML specification defines the following statement types:      -   <xref:System.IdentityModel.Tokens.SamlAttributeStatement>      -   <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement>      -   <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement>      -   <xref:System.IdentityModel.Tokens.SamlSubjectStatement>","pos":[0,634],"nodes":[{"content":"&lt;xref:System.IdentityModel.Tokens.SamlSecurityToken&gt; security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated.","pos":[0,166],"source":"<xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated."},{"content":"The claims in a SAML assertion are represented by SAML statements, which are represented by the SamlStatement class.","pos":[167,283]},{"content":"The SAML specification defines the following statement types:      -   &lt;xref:System.IdentityModel.Tokens.SamlAttributeStatement&gt;      -   &lt;xref:System.IdentityModel.Tokens.SamlAuthenticationStatement&gt;      -   &lt;xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement&gt;      -   &lt;xref:System.IdentityModel.Tokens.SamlSubjectStatement&gt;","pos":[290,634],"source":"       The SAML specification defines the following statement types:      -   <xref:System.IdentityModel.Tokens.SamlAttributeStatement>      -   <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement>      -   <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement>      -   <xref:System.IdentityModel.Tokens.SamlSubjectStatement>"}]}]},{"pos":[2331,2434],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SamlStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SamlStatement\"></xref> class."},{"pos":[3319,3439],"content":"Creates an authorization policy for a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> security token.","needQuote":true,"needEscape":true,"source":"Creates an authorization policy for a <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token."},{"pos":[3451,3584],"content":"Use the CreatePolicy method to get an authorization policy for a <xref:System.IdentityModel.Tokens.SamlSecurityToken> security token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the CreatePolicy method to get an authorization policy for a &lt;xref:System.IdentityModel.Tokens.SamlSecurityToken&gt; security token.","pos":[0,133],"source":"Use the CreatePolicy method to get an authorization policy for a <xref:System.IdentityModel.Tokens.SamlSecurityToken> security token."}]},{"pos":[3915,4091],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Claims.ClaimSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the issuer of the <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> security token.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token."},{"pos":[4213,4400],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to authenticate the <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> security token.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator\"></xref> to authenticate the <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token."},{"pos":[4493,4696],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents an authorization policy for the <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> security token.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref> that represents an authorization policy for the <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token."},{"pos":[5187,5305],"content":"When overridden in a derived class, gets a value that indicates whether the properties of this instance are read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the properties of this instance are read-only.","pos":[0,118]}]},{"pos":[5317,5538],"content":"Classes that derive from the &lt;xref:System.IdentityModel.Tokens.SamlStatement&gt; class, should set the IsReadOnly property to <ph id=\"ph1\">`true`</ph> when the &lt;xref:System.IdentityModel.Tokens.SamlStatement.MakeReadOnly%2A&gt; method is called.","needQuote":true,"needEscape":true,"source":"Classes that derive from the <xref:System.IdentityModel.Tokens.SamlStatement> class, should set the IsReadOnly property to `true` when the <xref:System.IdentityModel.Tokens.SamlStatement.MakeReadOnly%2A> method is called."},{"pos":[5661,5925],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the properties of this instance are read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the properties of this instance are read-only; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,185],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the properties of this instance are read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[186,264],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[6428,6465],"content":"Causes this instance to be read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes this instance to be read-only.","pos":[0,37]}]},{"pos":[6477,6663],"content":"When the MakeReadOnly method is called, the &lt;xref:System.IdentityModel.Tokens.SamlStatement.IsReadOnly%2A&gt; property is set to <ph id=\"ph1\">`true`</ph> and properties of this instance can no longer be set.","needQuote":true,"needEscape":true,"source":"When the MakeReadOnly method is called, the <xref:System.IdentityModel.Tokens.SamlStatement.IsReadOnly%2A> property is set to `true` and properties of this instance can no longer be set."},{"pos":[7829,7920],"content":"When overridden in a derived class, reads the SAML statement from the specified XML reader.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, reads the SAML statement from the specified XML reader.","pos":[0,91]}]},{"pos":[7932,8084],"content":"Use the ReadXml method to read in a SAML statement, validate the XML, and set the appropriate properties that correspond to the attributes and elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the ReadXml method to read in a SAML statement, validate the XML, and set the appropriate properties that correspond to the attributes and elements.","pos":[0,152]}]},{"pos":[8483,8550],"content":"A <xref:System.Xml.XmlDictionaryReader> to read the SAML statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Xml.XmlDictionaryReader&gt; to read the SAML statement.","pos":[0,67],"source":"A <xref:System.Xml.XmlDictionaryReader> to read the SAML statement."}]},{"pos":[8650,8820],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSerializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is capable of reading XML elements in the SAML statement that is defined in the SAML specification.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Tokens.SamlSerializer\"></xref> that is capable of reading XML elements in the SAML statement that is defined in the SAML specification."},{"pos":[8935,9127],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Selectors.SecurityTokenSerializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that reads the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_KeyInfo\" name=\"KeyInfo\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> clause of the digital signature.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Selectors.SecurityTokenSerializer\"></xref> that reads the <xref uid=\"langword_csharp_KeyInfo\" name=\"KeyInfo\" href=\"\"></xref> clause of the digital signature."},{"pos":[9245,9391],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Selectors.SecurityTokenResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the security token that created the digital signature.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Selectors.SecurityTokenResolver\"></xref> that determines the security token that created the digital signature."},{"pos":[10305,10365],"content":"Writes the SAML statement into the specified XML serializer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the SAML statement into the specified XML serializer.","pos":[0,60]}]},{"pos":[10688,10756],"content":"A <xref:System.Xml.XmlDictionaryWriter> to write the SAML statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Xml.XmlDictionaryWriter&gt; to write the SAML statement.","pos":[0,68],"source":"A <xref:System.Xml.XmlDictionaryWriter> to write the SAML statement."}]},{"pos":[10856,10982],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SamlSerializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is capable of writing XML elements in a SAML assertion.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Tokens.SamlSerializer\"></xref> that is capable of writing XML elements in a SAML assertion."},{"pos":[11097,11277],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Selectors.SecurityTokenSerializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is capable of writing <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_KeyInfo\" name=\"KeyInfo\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> clauses.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Selectors.SecurityTokenSerializer\"></xref> that is capable of writing <xref uid=\"langword_csharp_KeyInfo\" name=\"KeyInfo\" href=\"\"></xref> clauses."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SamlStatement\n  id: SamlStatement\n  children:\n  - System.IdentityModel.Tokens.SamlStatement.#ctor\n  - System.IdentityModel.Tokens.SamlStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)\n  - System.IdentityModel.Tokens.SamlStatement.IsReadOnly\n  - System.IdentityModel.Tokens.SamlStatement.MakeReadOnly\n  - System.IdentityModel.Tokens.SamlStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)\n  - System.IdentityModel.Tokens.SamlStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)\n  langs:\n  - csharp\n  name: SamlStatement\n  nameWithType: SamlStatement\n  fullName: System.IdentityModel.Tokens.SamlStatement\n  type: Class\n  summary: Represents a claim for a <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token.\n  remarks: \"<xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated. The claims in a SAML assertion are represented by SAML statements, which are represented by the SamlStatement class.  \\n  \\n The SAML specification defines the following statement types:  \\n  \\n-   <xref:System.IdentityModel.Tokens.SamlAttributeStatement>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SamlSubjectStatement>\"\n  syntax:\n    content: public abstract class SamlStatement\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SamlStatement.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.SamlStatement\n  langs:\n  - csharp\n  name: SamlStatement()\n  nameWithType: SamlStatement.SamlStatement()\n  fullName: System.IdentityModel.Tokens.SamlStatement.SamlStatement()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SamlStatement\"></xref> class.\n  syntax:\n    content: protected SamlStatement ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SamlStatement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SamlStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)\n  id: CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)\n  parent: System.IdentityModel.Tokens.SamlStatement\n  langs:\n  - csharp\n  name: CreatePolicy(ClaimSet,SamlSecurityTokenAuthenticator)\n  nameWithType: SamlStatement.CreatePolicy(ClaimSet,SamlSecurityTokenAuthenticator)\n  fullName: System.IdentityModel.Tokens.SamlStatement.CreatePolicy(ClaimSet,SamlSecurityTokenAuthenticator)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Creates an authorization policy for a <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token.\n  remarks: Use the CreatePolicy method to get an authorization policy for a <xref:System.IdentityModel.Tokens.SamlSecurityToken> security token.\n  syntax:\n    content: public abstract System.IdentityModel.Policy.IAuthorizationPolicy CreatePolicy (System.IdentityModel.Claims.ClaimSet issuer, System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator samlAuthenticator);\n    parameters:\n    - id: issuer\n      type: System.IdentityModel.Claims.ClaimSet\n      description: A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token.\n    - id: samlAuthenticator\n      type: System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator\n      description: A <xref href=\"System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator\"></xref> to authenticate the <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token.\n    return:\n      type: System.IdentityModel.Policy.IAuthorizationPolicy\n      description: An <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref> that represents an authorization policy for the <xref href=\"System.IdentityModel.Tokens.SamlSecurityToken\"></xref> security token.\n  overload: System.IdentityModel.Tokens.SamlStatement.CreatePolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SamlStatement.IsReadOnly\n  id: IsReadOnly\n  parent: System.IdentityModel.Tokens.SamlStatement\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: SamlStatement.IsReadOnly\n  fullName: System.IdentityModel.Tokens.SamlStatement.IsReadOnly\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the properties of this instance are read-only.\n  remarks: Classes that derive from the <xref:System.IdentityModel.Tokens.SamlStatement> class, should set the IsReadOnly property to `true` when the <xref:System.IdentityModel.Tokens.SamlStatement.MakeReadOnly%2A> method is called.\n  syntax:\n    content: public abstract bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the properties of this instance are read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SamlStatement.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SamlStatement.MakeReadOnly\n  id: MakeReadOnly\n  parent: System.IdentityModel.Tokens.SamlStatement\n  langs:\n  - csharp\n  name: MakeReadOnly()\n  nameWithType: SamlStatement.MakeReadOnly()\n  fullName: System.IdentityModel.Tokens.SamlStatement.MakeReadOnly()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Causes this instance to be read-only.\n  remarks: When the MakeReadOnly method is called, the <xref:System.IdentityModel.Tokens.SamlStatement.IsReadOnly%2A> property is set to `true` and properties of this instance can no longer be set.\n  syntax:\n    content: public abstract void MakeReadOnly ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SamlStatement.MakeReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SamlStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)\n  id: ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.SamlStatement\n  langs:\n  - csharp\n  name: ReadXml(XmlDictionaryReader,SamlSerializer,SecurityTokenSerializer,SecurityTokenResolver)\n  nameWithType: SamlStatement.ReadXml(XmlDictionaryReader,SamlSerializer,SecurityTokenSerializer,SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.SamlStatement.ReadXml(XmlDictionaryReader,SamlSerializer,SecurityTokenSerializer,SecurityTokenResolver)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, reads the SAML statement from the specified XML reader.\n  remarks: Use the ReadXml method to read in a SAML statement, validate the XML, and set the appropriate properties that correspond to the attributes and elements.\n  syntax:\n    content: public abstract void ReadXml (System.Xml.XmlDictionaryReader reader, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.IdentityModel.Selectors.SecurityTokenSerializer keyInfoSerializer, System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlDictionaryReader\n      description: A <xref:System.Xml.XmlDictionaryReader> to read the SAML statement.\n    - id: samlSerializer\n      type: System.IdentityModel.Tokens.SamlSerializer\n      description: A <xref href=\"System.IdentityModel.Tokens.SamlSerializer\"></xref> that is capable of reading XML elements in the SAML statement that is defined in the SAML specification.\n    - id: keyInfoSerializer\n      type: System.IdentityModel.Selectors.SecurityTokenSerializer\n      description: A <xref href=\"System.IdentityModel.Selectors.SecurityTokenSerializer\"></xref> that reads the <xref uid=\"langword_csharp_KeyInfo\" name=\"KeyInfo\" href=\"\"></xref> clause of the digital signature.\n    - id: outOfBandTokenResolver\n      type: System.IdentityModel.Selectors.SecurityTokenResolver\n      description: A <xref href=\"System.IdentityModel.Selectors.SecurityTokenResolver\"></xref> that determines the security token that created the digital signature.\n  overload: System.IdentityModel.Tokens.SamlStatement.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SamlStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)\n  id: WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)\n  parent: System.IdentityModel.Tokens.SamlStatement\n  langs:\n  - csharp\n  name: WriteXml(XmlDictionaryWriter,SamlSerializer,SecurityTokenSerializer)\n  nameWithType: SamlStatement.WriteXml(XmlDictionaryWriter,SamlSerializer,SecurityTokenSerializer)\n  fullName: System.IdentityModel.Tokens.SamlStatement.WriteXml(XmlDictionaryWriter,SamlSerializer,SecurityTokenSerializer)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Writes the SAML statement into the specified XML serializer.\n  syntax:\n    content: public abstract void WriteXml (System.Xml.XmlDictionaryWriter writer, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.IdentityModel.Selectors.SecurityTokenSerializer keyInfoSerializer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlDictionaryWriter\n      description: A <xref:System.Xml.XmlDictionaryWriter> to write the SAML statement.\n    - id: samlSerializer\n      type: System.IdentityModel.Tokens.SamlSerializer\n      description: A <xref href=\"System.IdentityModel.Tokens.SamlSerializer\"></xref> that is capable of writing XML elements in a SAML assertion.\n    - id: keyInfoSerializer\n      type: System.IdentityModel.Selectors.SecurityTokenSerializer\n      description: A <xref href=\"System.IdentityModel.Selectors.SecurityTokenSerializer\"></xref> that is capable of writing <xref uid=\"langword_csharp_KeyInfo\" name=\"KeyInfo\" href=\"\"></xref> clauses.\n  overload: System.IdentityModel.Tokens.SamlStatement.WriteXml*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.IdentityModel.Tokens.SamlStatement.#ctor\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: SamlStatement()\n  nameWithType: SamlStatement.SamlStatement()\n  fullName: System.IdentityModel.Tokens.SamlStatement.SamlStatement()\n- uid: System.IdentityModel.Tokens.SamlStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: CreatePolicy(ClaimSet,SamlSecurityTokenAuthenticator)\n  nameWithType: SamlStatement.CreatePolicy(ClaimSet,SamlSecurityTokenAuthenticator)\n  fullName: System.IdentityModel.Tokens.SamlStatement.CreatePolicy(ClaimSet,SamlSecurityTokenAuthenticator)\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy\n  parent: System.IdentityModel.Policy\n  isExternal: false\n  name: IAuthorizationPolicy\n  nameWithType: IAuthorizationPolicy\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy\n- uid: System.IdentityModel.Claims.ClaimSet\n  parent: System.IdentityModel.Claims\n  isExternal: false\n  name: ClaimSet\n  nameWithType: ClaimSet\n  fullName: System.IdentityModel.Claims.ClaimSet\n- uid: System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator\n  parent: System.IdentityModel.Selectors\n  isExternal: false\n  name: SamlSecurityTokenAuthenticator\n  nameWithType: SamlSecurityTokenAuthenticator\n  fullName: System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator\n- uid: System.IdentityModel.Tokens.SamlStatement.IsReadOnly\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SamlStatement.IsReadOnly\n  fullName: System.IdentityModel.Tokens.SamlStatement.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.SamlStatement.MakeReadOnly\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: MakeReadOnly()\n  nameWithType: SamlStatement.MakeReadOnly()\n  fullName: System.IdentityModel.Tokens.SamlStatement.MakeReadOnly()\n- uid: System.IdentityModel.Tokens.SamlStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: ReadXml(XmlDictionaryReader,SamlSerializer,SecurityTokenSerializer,SecurityTokenResolver)\n  nameWithType: SamlStatement.ReadXml(XmlDictionaryReader,SamlSerializer,SecurityTokenSerializer,SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.SamlStatement.ReadXml(XmlDictionaryReader,SamlSerializer,SecurityTokenSerializer,SecurityTokenResolver)\n- uid: System.Xml.XmlDictionaryReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlDictionaryReader\n  nameWithType: XmlDictionaryReader\n  fullName: System.Xml.XmlDictionaryReader\n- uid: System.IdentityModel.Tokens.SamlSerializer\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SamlSerializer\n  nameWithType: SamlSerializer\n  fullName: System.IdentityModel.Tokens.SamlSerializer\n- uid: System.IdentityModel.Selectors.SecurityTokenSerializer\n  parent: System.IdentityModel.Selectors\n  isExternal: false\n  name: SecurityTokenSerializer\n  nameWithType: SecurityTokenSerializer\n  fullName: System.IdentityModel.Selectors.SecurityTokenSerializer\n- uid: System.IdentityModel.Selectors.SecurityTokenResolver\n  parent: System.IdentityModel.Selectors\n  isExternal: false\n  name: SecurityTokenResolver\n  nameWithType: SecurityTokenResolver\n  fullName: System.IdentityModel.Selectors.SecurityTokenResolver\n- uid: System.IdentityModel.Tokens.SamlStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: WriteXml(XmlDictionaryWriter,SamlSerializer,SecurityTokenSerializer)\n  nameWithType: SamlStatement.WriteXml(XmlDictionaryWriter,SamlSerializer,SecurityTokenSerializer)\n  fullName: System.IdentityModel.Tokens.SamlStatement.WriteXml(XmlDictionaryWriter,SamlSerializer,SecurityTokenSerializer)\n- uid: System.Xml.XmlDictionaryWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlDictionaryWriter\n  nameWithType: XmlDictionaryWriter\n  fullName: System.Xml.XmlDictionaryWriter\n- uid: System.IdentityModel.Tokens.SamlStatement.#ctor*\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: SamlStatement\n  nameWithType: SamlStatement.SamlStatement\n- uid: System.IdentityModel.Tokens.SamlStatement.CreatePolicy*\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: CreatePolicy\n  nameWithType: SamlStatement.CreatePolicy\n- uid: System.IdentityModel.Tokens.SamlStatement.IsReadOnly*\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SamlStatement.IsReadOnly\n- uid: System.IdentityModel.Tokens.SamlStatement.MakeReadOnly*\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: MakeReadOnly\n  nameWithType: SamlStatement.MakeReadOnly\n- uid: System.IdentityModel.Tokens.SamlStatement.ReadXml*\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: ReadXml\n  nameWithType: SamlStatement.ReadXml\n- uid: System.IdentityModel.Tokens.SamlStatement.WriteXml*\n  parent: System.IdentityModel.Tokens.SamlStatement\n  isExternal: false\n  name: WriteXml\n  nameWithType: SamlStatement.WriteXml\n"}