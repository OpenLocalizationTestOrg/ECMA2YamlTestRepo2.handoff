{"nodes":[{"pos":[2370,2562],"content":"Represents a set of data commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update a SQL Server database. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a set of data commands and a database connection that are used to fill the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and update a SQL Server database.","pos":[0,160],"source":"Represents a set of data commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update a SQL Server database."},{"content":"This class cannot be inherited.","pos":[161,192]}]},{"pos":[2575,6555],"content":"The SqlDataAdapter, serves as a bridge between a <xref:System.Data.DataSet> and SQL Server for retrieving and saving data. The SqlDataAdapter provides this bridge by mapping <xref:System.Data.Common.DbDataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.Common.DbDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>, using the appropriate Transact-SQL statements against the data source. The update is performed on a by-row basis. For every inserted, modified, and deleted row, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method determines the type of change that has been performed on it (`Insert`, `Update`, or `Delete`). Depending on the type of change, the `Insert`, `Update`, or `Delete` command template executes to propagate the modified row to the data source. When the SqlDataAdapter fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>. You may also have the SqlDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using `FillSchema`. For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md).       SqlDataAdapter is used in conjunction with <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a SQL Server database.      > [!NOTE] >  If you are using SQL Server stored procedures to edit or delete data using a `DataAdapter`, make sure that you do not use SET NOCOUNT ON in the stored procedure definition. This causes the rows affected count returned to be zero, which the `DataAdapter` interprets as a concurrency conflict. In this event, a <xref:System.Data.DBConcurrencyException> will be thrown.       The SqlDataAdapter also includes the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data.       When an instance of SqlDataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the SqlDataAdapter constructor.       The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> are generic templates that are automatically filled with individual values from every modified row through the parameters mechanism.       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The <xref:System.Data.Common.DbParameter.SourceColumn%2A> property of the <xref:System.Data.Common.DbParameter> object should be set to the name of the column. This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.      > [!NOTE] >  An <xref:System.InvalidOperationException> will occur if the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method is called and the table contains a user-defined type that is not available on the client computer. For more information, see [Creating and Using User-Defined Types](http://go.microsoft.com/fwlink/?LinkId=139492) in SQL Server Books Online.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SqlDataAdapter, serves as a bridge between a &lt;xref:System.Data.DataSet&gt; and SQL Server for retrieving and saving data.","pos":[0,122],"source":"The SqlDataAdapter, serves as a bridge between a <xref:System.Data.DataSet> and SQL Server for retrieving and saving data."},{"content":"The SqlDataAdapter provides this bridge by mapping &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;, which changes the data in the &lt;xref:System.Data.DataSet&gt; to match the data in the data source, and &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, which changes the data in the data source to match the data in the &lt;xref:System.Data.DataSet&gt;, using the appropriate Transact-SQL statements against the data source.","pos":[123,538],"source":" The SqlDataAdapter provides this bridge by mapping <xref:System.Data.Common.DbDataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.Common.DbDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>, using the appropriate Transact-SQL statements against the data source."},{"content":"The update is performed on a by-row basis.","pos":[539,581]},{"content":"For every inserted, modified, and deleted row, the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method determines the type of change that has been performed on it (<ph id=\"ph1\">`Insert`</ph>, <ph id=\"ph2\">`Update`</ph>, or <ph id=\"ph3\">`Delete`</ph>).","pos":[582,784],"source":" For every inserted, modified, and deleted row, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method determines the type of change that has been performed on it (`Insert`, `Update`, or `Delete`)."},{"content":"Depending on the type of change, the <ph id=\"ph1\">`Insert`</ph>, <ph id=\"ph2\">`Update`</ph>, or <ph id=\"ph3\">`Delete`</ph> command template executes to propagate the modified row to the data source.","pos":[785,929],"source":" Depending on the type of change, the `Insert`, `Update`, or `Delete` command template executes to propagate the modified row to the data source."},{"content":"When the SqlDataAdapter fills a &lt;xref:System.Data.DataSet&gt;, it creates the necessary tables and columns for the returned data if they do not already exist.","pos":[930,1085],"source":" When the SqlDataAdapter fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist."},{"content":"However, primary key information is not included in the implicitly created schema unless the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property is set to &lt;xref:System.Data.MissingSchemaAction&gt;.","pos":[1086,1298],"source":" However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>."},{"content":"You may also have the SqlDataAdapter create the schema of the &lt;xref:System.Data.DataSet&gt;, including primary key information, before filling it with data using <ph id=\"ph1\">`FillSchema`</ph>.","pos":[1299,1471],"source":" You may also have the SqlDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using `FillSchema`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Adding Existing Constraints to a DataSet<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1472,1580],"source":" For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md)."},{"content":"SqlDataAdapter is used in conjunction with &lt;xref:System.Data.SqlClient.SqlConnection&gt; and &lt;xref:System.Data.SqlClient.SqlCommand&gt; to increase performance when connecting to a SQL Server database.","pos":[1587,1782],"source":"       SqlDataAdapter is used in conjunction with <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a SQL Server database."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you are using SQL Server stored procedures to edit or delete data using a <ph id=\"ph2\">`DataAdapter`</ph>, make sure that you do not use SET NOCOUNT ON in the stored procedure definition.","pos":[1788,1973],"source":"      > [!NOTE] >  If you are using SQL Server stored procedures to edit or delete data using a `DataAdapter`, make sure that you do not use SET NOCOUNT ON in the stored procedure definition."},{"content":"This causes the rows affected count returned to be zero, which the <ph id=\"ph1\">`DataAdapter`</ph> interprets as a concurrency conflict.","pos":[1974,2092],"source":" This causes the rows affected count returned to be zero, which the `DataAdapter` interprets as a concurrency conflict."},{"content":"In this event, a &lt;xref:System.Data.DBConcurrencyException&gt; will be thrown.","pos":[2093,2167],"source":" In this event, a <xref:System.Data.DBConcurrencyException> will be thrown."},{"content":"The SqlDataAdapter also includes the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt;, &lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A&gt;, &lt;xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A&gt;, and &lt;xref:System.Data.Common.DataAdapter.TableMappings%2A&gt; properties to facilitate the loading and updating of data.","pos":[2174,2576],"source":"       The SqlDataAdapter also includes the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data."},{"content":"When an instance of SqlDataAdapter is created, the read/write properties are set to initial values.","pos":[2583,2682]},{"content":"For a list of these values, see the SqlDataAdapter constructor.","pos":[2683,2746]},{"content":"The &lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A&gt;, and &lt;xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A&gt; are generic templates that are automatically filled with individual values from every modified row through the parameters mechanism.","pos":[2753,3078],"source":"       The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> are generic templates that are automatically filled with individual values from every modified row through the parameters mechanism."},{"content":"For every column that you propagate to the data source on &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, a parameter should be added to the <ph id=\"ph1\">`InsertCommand`</ph>, <ph id=\"ph2\">`UpdateCommand`</ph>, or <ph id=\"ph3\">`DeleteCommand`</ph>.","pos":[3085,3282],"source":"       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`."},{"content":"The &lt;xref:System.Data.Common.DbParameter.SourceColumn%2A&gt; property of the &lt;xref:System.Data.Common.DbParameter&gt; object should be set to the name of the column.","pos":[3283,3442],"source":" The <xref:System.Data.Common.DbParameter.SourceColumn%2A> property of the <xref:System.Data.Common.DbParameter> object should be set to the name of the column."},{"content":"This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","pos":[3443,3590]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will occur if the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method is called and the table contains a user-defined type that is not available on the client computer.","pos":[3596,3823],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will occur if the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method is called and the table contains a user-defined type that is not available on the client computer."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Creating and Using User-Defined Types<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139492)</ept> in SQL Server Books Online.","pos":[3824,3964],"source":" For more information, see [Creating and Using User-Defined Types](http://go.microsoft.com/fwlink/?LinkId=139492) in SQL Server Books Online."}]},{"pos":[12735,12833],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class."},{"pos":[12846,13369],"content":"When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an instance of &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; is created, the following read/write properties are set to the following initial values.","pos":[0,152],"source":"When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[158,516],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[14394,14640],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*&gt; property.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class with the specified <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> as the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property."},{"pos":[14653,15815],"content":"This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.       When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.       When <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> (or any of the other command properties) is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation of the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; constructor sets the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; property to the value specified in the <ph id=\"ph1\">`selectCommand`</ph> parameter.","pos":[0,218],"source":"This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter."},{"content":"When an instance of &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; is created, the following read/write properties are set to the following initial values.","pos":[225,377],"source":"       When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[383,741],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."},{"content":"When &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; (or any of the other command properties) is assigned to a previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt;, the &lt;xref:System.Data.SqlClient.SqlCommand&gt; is not cloned.","pos":[748,990],"source":"       When <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> (or any of the other command properties) is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned."},{"content":"The &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; maintains a reference to the previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[991,1151],"source":" The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object."}]},{"pos":[16407,16674],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is a Transact-SQL SELECT statement or stored procedure and is set as the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> that is a Transact-SQL SELECT statement or stored procedure and is set as the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref>."},{"pos":[17299,17533],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*&gt; and a <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class with a <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> and a <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object."},{"pos":[17546,18550],"content":"This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> opens and closes a <xref:System.Data.SqlClient.SqlConnection> if it is not already open. This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.SqlClient.SqlDataAdapter> objects. If the <xref:System.Data.SqlClient.SqlConnection> is already open, you must explicitly call **Close** or **Dispose** to close it.       When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of either of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation of the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; opens and closes a &lt;xref:System.Data.SqlClient.SqlConnection&gt; if it is not already open.","pos":[0,159],"source":"This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> opens and closes a <xref:System.Data.SqlClient.SqlConnection> if it is not already open."},{"content":"This can be useful in an application that must call the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method for two or more &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; objects.","pos":[160,339],"source":" This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.SqlClient.SqlDataAdapter> objects."},{"content":"If the &lt;xref:System.Data.SqlClient.SqlConnection&gt; is already open, you must explicitly call <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Dispose<ept id=\"p2\">**</ept> to close it.","pos":[340,469],"source":" If the <xref:System.Data.SqlClient.SqlConnection> is already open, you must explicitly call **Close** or **Dispose** to close it."},{"content":"When an instance of &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; is created, the following read/write properties are set to the following initial values.","pos":[476,628],"source":"       When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of either of these properties through a separate call to the property.","pos":[634,995],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of either of these properties through a separate call to the property."}]},{"pos":[19159,19393],"content":"A &lt;xref:System.String&gt; that is a Transact-SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> that is a Transact-SQL SELECT statement or stored procedure to be used by the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref>."},{"pos":[19488,19917],"content":"A <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> that represents the connection. If your connection string does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, you can use <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the connection.","pos":[0,90],"source":"A <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> that represents the connection."},{"content":"If your connection string does not use <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, you can use <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.","pos":[91,429],"source":" If your connection string does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, you can use <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string."}]},{"pos":[20477,20665],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*&gt; and a connection string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class with a <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> and a connection string."},{"pos":[20678,21548],"content":"This overload of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor uses the `selectCommandText` parameter to set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property. The <xref:System.Data.SqlClient.SqlDataAdapter> will create and maintain the connection created with the `selectConnectionString` parameter.       When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This overload of the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; constructor uses the <ph id=\"ph1\">`selectCommandText`</ph> parameter to set the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; property.","pos":[0,197],"source":"This overload of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor uses the `selectCommandText` parameter to set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property."},{"content":"The &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; will create and maintain the connection created with the <ph id=\"ph1\">`selectConnectionString`</ph> parameter.","pos":[198,338],"source":" The <xref:System.Data.SqlClient.SqlDataAdapter> will create and maintain the connection created with the `selectConnectionString` parameter."},{"content":"When an instance of &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; is created, the following read/write properties are set to the following initial values.","pos":[345,497],"source":"       When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[503,861],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[22138,22372],"content":"A &lt;xref:System.String&gt; that is a Transact-SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> that is a Transact-SQL SELECT statement or stored procedure to be used by the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref>."},{"pos":[22451,22877],"content":"The connection string. If your connection string does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, you can use &lt;xref:System.Data.SqlClient.SqlDataAdapter.%23ctor%2A&gt; and <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection string.","pos":[0,22]},{"content":"If your connection string does not use <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, you can use <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.SqlClient.SqlDataAdapter.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> and <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.","pos":[23,426],"source":" If your connection string does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, you can use &lt;xref:System.Data.SqlClient.SqlDataAdapter.%23ctor%2A&gt; and <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string."}]},{"pos":[23577,23589],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23646,23658],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25390,25402],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25475,25487],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25569,25581],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25672,25684],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25767,25779],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27001,27013],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27086,27098],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27180,27192],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27283,27295],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27379,27391],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27873,27967],"content":"Gets or sets a Transact-SQL statement or stored procedure to delete records from the data set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Transact-SQL statement or stored procedure to delete records from the data set.","pos":[0,94]}]},{"pos":[27980,29373],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When DeleteCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the DeleteCommand can be generated automatically if you set the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; property and use the &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt;.","pos":[0,353],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>."},{"content":"Then, any additional commands that you do not set are generated by the &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt;.","pos":[354,472],"source":" Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[473,575],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[576,684],"source":" For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When DeleteCommand is assigned to a previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt;, the &lt;xref:System.Data.SqlClient.SqlCommand&gt; is not cloned.","pos":[691,845],"source":"       When DeleteCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned."},{"content":"The DeleteCommand maintains a reference to the previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[846,959],"source":" The DeleteCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object."},{"content":"For every column that you propagate to the data source on &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, a parameter should be added to the <ph id=\"ph1\">`InsertCommand`</ph>, <ph id=\"ph2\">`UpdateCommand`</ph>, or <ph id=\"ph3\">`DeleteCommand`</ph>.","pos":[966,1163],"source":"       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`."},{"content":"The <ph id=\"ph1\">`SourceColumn`</ph> property of the parameter should be set to the name of the column.","pos":[1164,1249],"source":" The `SourceColumn` property of the parameter should be set to the name of the column."},{"content":"This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","pos":[1250,1389]}]},{"pos":[30180,30410],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to delete records in the database that correspond to deleted rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the database that correspond to deleted rows in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[31009,31021],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31825,31837],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31907,31919],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31990,32002],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32921,32933],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33004,33016],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33081,33093],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33152,33164],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[34233,34334],"content":"Gets or sets a Transact-SQL statement or stored procedure to insert new records into the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Transact-SQL statement or stored procedure to insert new records into the data source.","pos":[0,101]}]},{"pos":[34347,35959],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When InsertCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.       If execution of this command returns rows, these rows can be added to the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object.       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the InsertCommand can be generated automatically if you set the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; property and use the &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt;.","pos":[0,353],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>."},{"content":"Then, any additional commands that you do not set are generated by the &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt;.","pos":[354,472],"source":" Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[473,575],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[576,684],"source":" For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When InsertCommand is assigned to a previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt;, the &lt;xref:System.Data.SqlClient.SqlCommand&gt; is not cloned.","pos":[691,845],"source":"       When InsertCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned."},{"content":"The InsertCommand maintains a reference to the previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[846,959],"source":" The InsertCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object."},{"content":"If execution of this command returns rows, these rows can be added to the &lt;xref:System.Data.DataSet&gt; depending on how you set the <bpt id=\"p1\">**</bpt>UpdatedRowSource<ept id=\"p1\">**</ept> property of the &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[966,1180],"source":"       If execution of this command returns rows, these rows can be added to the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object."},{"content":"For every column that you propagate to the data source on &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, a parameter should be added to <ph id=\"ph1\">`InsertCommand`</ph>, <ph id=\"ph2\">`UpdateCommand`</ph>, or <ph id=\"ph3\">`DeleteCommand`</ph>.","pos":[1187,1380],"source":"       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`."},{"content":"The <ph id=\"ph1\">`SourceColumn`</ph> property of the parameter should be set to the name of the column.","pos":[1381,1466],"source":" The `SourceColumn` property of the parameter should be set to the name of the column."},{"content":"This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","pos":[1467,1606]}]},{"pos":[36766,36994],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to insert records into the database that correspond to new rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records into the database that correspond to new rows in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[37802,37814],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38634,38646],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39101,39266],"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source. The attempt to update is made, so the event fires.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source. The attempt to update is made, so the event fires.","pos":[0,165],"nodes":[{"content":"Occurs during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; after a command is executed against the data source.","pos":[0,114],"source":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source."},{"content":"The attempt to update is made, so the event fires.","pos":[115,165]}]}]},{"pos":[39279,40023],"content":"When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.","needQuote":false,"needEscape":true,"nodes":[{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, there are two events that occur per data row updated.","pos":[0,115],"source":"When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated."},{"content":"The order of execution is as follows:      1.","pos":[116,161]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[163,242],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[248,250]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[252,329],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[335,337]},{"content":"The command executes.","pos":[339,360]},{"content":"4.","pos":[366,368]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[370,488],"source":"  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[494,496]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[498,580],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[586,588]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[590,666],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[672,674]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[676,730],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."}]},{"pos":[40978,40990],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41386,41552],"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source. The attempt to update is made, so the event fires.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source. The attempt to update is made, so the event fires.","pos":[0,166],"nodes":[{"content":"Occurs during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; before a command is executed against the data source.","pos":[0,115],"source":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source."},{"content":"The attempt to update is made, so the event fires.","pos":[116,166]}]}]},{"pos":[41565,42309],"content":"When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.","needQuote":false,"needEscape":true,"nodes":[{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, there are two events that occur per data row updated.","pos":[0,115],"source":"When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated."},{"content":"The order of execution is as follows:      1.","pos":[116,161]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[163,242],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[248,250]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[252,329],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[335,337]},{"content":"The command executes.","pos":[339,360]},{"content":"4.","pos":[366,368]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[370,488],"source":"  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[494,496]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[498,580],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[586,588]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[590,666],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[672,674]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[676,730],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."}]},{"pos":[43267,43279],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[43688,43788],"content":"Gets or sets a Transact-SQL statement or stored procedure used to select records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Transact-SQL statement or stored procedure used to select records in the data source.","pos":[0,100]}]},{"pos":[43801,44207],"content":"When SelectCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.       If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"When SelectCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.       If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.","pos":[0,404],"nodes":[{"content":"When SelectCommand is assigned to a previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt;, the &lt;xref:System.Data.SqlClient.SqlCommand&gt; is not cloned.","pos":[0,154],"source":"When SelectCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned."},{"content":"The SelectCommand maintains a reference to the previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[155,268],"source":" The SelectCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object."},{"content":"If the SelectCommand does not return any rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, and no exception is raised.","pos":[275,404],"source":"       If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised."}]}]},{"pos":[45014,45226],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Fill*&gt; to select records from the database for placement in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Fill*> to select records from the database for placement in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[45848,45935],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.DeleteCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>."}]},{"pos":[45947,46147],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,200],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,200],"source":" It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[46315,46500],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to delete records in the data source for deleted rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set."},{"pos":[47149,47236],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.InsertCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>."}]},{"pos":[47248,47448],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,200],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,200],"source":" It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[47616,47797],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to insert records in the data source for new rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set."},{"pos":[48446,48533],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.SelectCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>."}]},{"pos":[48545,48745],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,200],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,200],"source":" It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[48913,49093],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to select records from data source for placement in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set."},{"pos":[49742,49829],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.UpdateCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>."}]},{"pos":[49841,50041],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,200],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,200],"source":" It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[50209,50381],"content":"An <xref:System.Data.IdbCommand> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Data.IdbCommand&gt; that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to update records in the data source for modified rows in the data set.","pos":[0,172],"source":"An <xref:System.Data.IdbCommand> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set."}]},{"pos":[50949,51019],"content":"For a description of this member, see <xref:System.ICloneable.Clone*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.ICloneable.Clone*&gt;.","pos":[0,70],"source":"For a description of this member, see <xref:System.ICloneable.Clone*>."}]},{"pos":[51031,51222],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.ICloneable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.ICloneable> interface.","pos":[0,191],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.","pos":[60,191],"source":" It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.ICloneable> interface."}]}]},{"pos":[51350,51402],"content":"A new object that is a copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object that is a copy of the current instance.","pos":[0,52]}]},{"pos":[52472,52556],"content":"Gets or sets the number of rows that are processed in each round-trip to the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of rows that are processed in each round-trip to the server.","pos":[0,84]}]},{"pos":[52569,53200],"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.       Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. This can increase application performance by reducing the number of round-trips to the server.       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.       An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.       Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. This can increase application performance by reducing the number of round-trips to the server.       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.       An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.","pos":[0,625],"nodes":[{"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.","pos":[0,141]},{"content":"Use the UpdateBatchSize property to update a data source with changes from a &lt;xref:System.Data.DataSet&gt;.","pos":[148,252],"source":"       Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>."},{"content":"This can increase application performance by reducing the number of round-trips to the server.","pos":[253,347]},{"content":"Executing an extremely large batch could decrease performance.","pos":[354,416]},{"content":"Therefore, you should test for the optimum batch size setting before implementing your application.","pos":[417,516]},{"content":"An &lt;xref:System.ArgumentOutOfRangeException&gt; is thrown if the value is set to a number less than zero.","pos":[523,625],"source":"       An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero."}]}]},{"pos":[53332,54167],"content":"The number of rows to process per-batch.       <table><thead><tr><th> Value is       </th><th> Effect       </th></tr></thead><tbody><tr><td> 0       </td><td> There is no limit on the batch size..       </td></tr><tr><td> 1       </td><td> Disables batch updating.       </td></tr><tr><td> &gt;1       </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.       </td></tr></tbody></table>       When setting this to a value other than 1, all the commands associated with the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> have to have their **UpdatedRowSource** property set to <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref> or <xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"></xref>. An exception is thrown otherwise.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of rows to process per-batch.       ","pos":[0,47],"nodes":[{"content":"The number of rows to process per-batch.","pos":[0,40]}]},{"content":"Value is","pos":[70,78]},{"content":"Effect","pos":[95,101]},{"content":"0","pos":[142,143]},{"content":" There is no limit on the batch size..       ","pos":[159,204],"nodes":[{"content":"There is no limit on the batch size..","pos":[1,38]}]},{"content":"1","pos":[223,224]},{"content":" Disables batch updating.       ","pos":[240,272],"nodes":[{"content":"Disables batch updating.","pos":[1,25]}]},{"content":"<ph id=\"ph1\">&amp;gt;</ph>1","pos":[291,296],"source":"&gt;1       "},{"content":" Changes are sent using batches of UpdateBatchSize operations at a time.       ","pos":[312,391],"nodes":[{"content":"Changes are sent using batches of UpdateBatchSize operations at a time.","pos":[1,72]}]},{"content":"       When setting this to a value other than 1, all the commands associated with the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> have to have their **UpdatedRowSource** property set to <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref> or <xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"></xref>. An exception is thrown otherwise.","pos":[417,801],"nodes":[{"content":"When setting this to a value other than 1, all the commands associated with the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> have to have their <bpt id=\"p2\">**</bpt>UpdatedRowSource<ept id=\"p2\">**</ept> property set to <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> or <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[7,350],"source":"       When setting this to a value other than 1, all the commands associated with the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> have to have their **UpdatedRowSource** property set to <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref> or <xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"></xref>."},{"content":"An exception is thrown otherwise.","pos":[351,384]}]}]},{"pos":[54643,54743],"content":"Gets or sets a Transact-SQL statement or stored procedure used to update records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Transact-SQL statement or stored procedure used to update records in the data source.","pos":[0,100]}]},{"pos":[54756,56395],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When UpdateCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.      > [!NOTE] >  If execution of this command returns rows, the updated rows may be merged with the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object.       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`.       The `SourceColumn` property of the parameter should be set to the name of the column. This indicates that the value of the parameter is not set manually, but taken from the particular column in the currently processed row.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the UpdateCommand can be generated automatically if you set the &lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt; property and use the &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt;.","pos":[0,353],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>."},{"content":"Then, any additional commands that you do not set are generated by the &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt;.","pos":[354,472],"source":" Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[473,575],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[576,684],"source":" For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When UpdateCommand is assigned to a previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt;, the &lt;xref:System.Data.SqlClient.SqlCommand&gt; is not cloned.","pos":[691,845],"source":"       When UpdateCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned."},{"content":"The UpdateCommand maintains a reference to the previously created &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[846,959],"source":" The UpdateCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, the updated rows may be merged with the &lt;xref:System.Data.DataSet&gt; depending on how you set the <bpt id=\"p1\">**</bpt>UpdatedRowSource<ept id=\"p1\">**</ept> property of the &lt;xref:System.Data.SqlClient.SqlCommand&gt; object.","pos":[965,1201],"source":"      > [!NOTE] >  If execution of this command returns rows, the updated rows may be merged with the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object."},{"content":"For every column that you propagate to the data source on &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, a parameter should be added to <ph id=\"ph1\">`InsertCommand`</ph>, <ph id=\"ph2\">`UpdateCommand`</ph>, or <ph id=\"ph3\">`DeleteCommand`</ph>.","pos":[1208,1401],"source":"       For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`."},{"content":"The <ph id=\"ph1\">`SourceColumn`</ph> property of the parameter should be set to the name of the column.","pos":[1408,1493],"source":"       The `SourceColumn` property of the parameter should be set to the name of the column."},{"content":"This indicates that the value of the parameter is not set manually, but taken from the particular column in the currently processed row.","pos":[1494,1630]}]},{"pos":[57201,57432],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to update records in the database that correspond to modified rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the database that correspond to modified rows in the <xref href=\"System.Data.DataSet\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlClient.SqlDataAdapter\n  id: SqlDataAdapter\n  children:\n  - System.Data.SqlClient.SqlDataAdapter.#ctor\n  - System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)\n  - System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)\n  - System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)\n  - System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)\n  - System.Data.SqlClient.SqlDataAdapter.ClearBatch\n  - System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.SqlClient.SqlDataAdapter.DeleteCommand\n  - System.Data.SqlClient.SqlDataAdapter.ExecuteBatch\n  - System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  - System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  - System.Data.SqlClient.SqlDataAdapter.InitializeBatching\n  - System.Data.SqlClient.SqlDataAdapter.InsertCommand\n  - System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  - System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  - System.Data.SqlClient.SqlDataAdapter.RowUpdated\n  - System.Data.SqlClient.SqlDataAdapter.RowUpdating\n  - System.Data.SqlClient.SqlDataAdapter.SelectCommand\n  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  - System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone\n  - System.Data.SqlClient.SqlDataAdapter.TerminateBatching\n  - System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize\n  - System.Data.SqlClient.SqlDataAdapter.UpdateCommand\n  langs:\n  - csharp\n  name: SqlDataAdapter\n  nameWithType: SqlDataAdapter\n  fullName: System.Data.SqlClient.SqlDataAdapter\n  type: Class\n  summary: Represents a set of data commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update a SQL Server database. This class cannot be inherited.\n  remarks: \"The SqlDataAdapter, serves as a bridge between a <xref:System.Data.DataSet> and SQL Server for retrieving and saving data. The SqlDataAdapter provides this bridge by mapping <xref:System.Data.Common.DbDataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.Common.DbDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>, using the appropriate Transact-SQL statements against the data source. The update is performed on a by-row basis. For every inserted, modified, and deleted row, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method determines the type of change that has been performed on it (`Insert`, `Update`, or `Delete`). Depending on the type of change, the `Insert`, `Update`, or `Delete` command template executes to propagate the modified row to the data source. When the SqlDataAdapter fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>. You may also have the SqlDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using `FillSchema`. For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md).  \\n  \\n SqlDataAdapter is used in conjunction with <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a SQL Server database.  \\n  \\n> [!NOTE]\\n>  If you are using SQL Server stored procedures to edit or delete data using a `DataAdapter`, make sure that you do not use SET NOCOUNT ON in the stored procedure definition. This causes the rows affected count returned to be zero, which the `DataAdapter` interprets as a concurrency conflict. In this event, a <xref:System.Data.DBConcurrencyException> will be thrown.  \\n  \\n The SqlDataAdapter also includes the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data.  \\n  \\n When an instance of SqlDataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the SqlDataAdapter constructor.  \\n  \\n The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> are generic templates that are automatically filled with individual values from every modified row through the parameters mechanism.  \\n  \\n For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The <xref:System.Data.Common.DbParameter.SourceColumn%2A> property of the <xref:System.Data.Common.DbParameter> object should be set to the name of the column. This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will occur if the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method is called and the table contains a user-defined type that is not available on the client computer. For more information, see [Creating and Using User-Defined Types](http://go.microsoft.com/fwlink/?LinkId=139492) in SQL Server Books Online.\"\n  example:\n  - \"The following example uses the <xref:System.Data.SqlClient.SqlCommand>, SqlDataAdapter, and <xref:System.Data.SqlClient.SqlConnection> to select records from a database and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._14_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._14_1.cs)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"RowUpdated\")]\n\n      [System.ComponentModel.Designer(\"Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ComponentModel.ToolboxItem(\"Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      public sealed class SqlDataAdapter : System.Data.Common.DbDataAdapter, ICloneable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DataAdapter\n  - System.Data.Common.DbDataAdapter\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  - System.Data.Common.DataAdapter.CloneInternals\n  - System.Data.Common.DataAdapter.ContinueUpdateOnError\n  - System.Data.Common.DataAdapter.CreateTableMappings\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.FillError\n  - System.Data.Common.DataAdapter.FillLoadOption\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.HasTableMappings\n  - System.Data.Common.DataAdapter.MissingMappingAction\n  - System.Data.Common.DataAdapter.MissingSchemaAction\n  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  - System.Data.Common.DataAdapter.ResetFillLoadOption\n  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  - System.Data.Common.DataAdapter.TableMappings\n  - System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  - System.Data.Common.DbDataAdapter.FillCommandBehavior\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.GetFillParameters\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: SqlDataAdapter()\n  nameWithType: SqlDataAdapter.SqlDataAdapter()\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class.\n  remarks: \"When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._37_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._37_1.cs)]\"\n  syntax:\n    content: public SqlDataAdapter ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)\n  id: '#ctor(System.Data.SqlClient.SqlCommand)'\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: SqlDataAdapter(SqlCommand)\n  nameWithType: SqlDataAdapter.SqlDataAdapter(SqlCommand)\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(SqlCommand)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class with the specified <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> as the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property.\n  remarks: \"This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.  \\n  \\n When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.  \\n  \\n When <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> (or any of the other command properties) is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter1 Example#1](~/add/codesnippet/csharp/9d168a15-4587-40fd-a80e-_1.cs)]\\n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter1 Example#1](~/add/codesnippet/visualbasic/9d168a15-4587-40fd-a80e-_1.vb)]\"\n  syntax:\n    content: public SqlDataAdapter (System.Data.SqlClient.SqlCommand selectCommand);\n    parameters:\n    - id: selectCommand\n      type: System.Data.SqlClient.SqlCommand\n      description: A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> that is a Transact-SQL SELECT statement or stored procedure and is set as the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref>.\n  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)\n  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection)'\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: SqlDataAdapter(String,SqlConnection)\n  nameWithType: SqlDataAdapter.SqlDataAdapter(String,SqlConnection)\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,SqlConnection)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class with a <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> and a <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object.\n  remarks: \"This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> opens and closes a <xref:System.Data.SqlClient.SqlConnection> if it is not already open. This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.SqlClient.SqlDataAdapter> objects. If the <xref:System.Data.SqlClient.SqlConnection> is already open, you must explicitly call **Close** or **Dispose** to close it.  \\n  \\n When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of either of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter3 Example#1](~/add/codesnippet/visualbasic/fa8f1b27-cd12-4c35-bbde-_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter3 Example#1](~/add/codesnippet/csharp/fa8f1b27-cd12-4c35-bbde-_1.cs)]\"\n  syntax:\n    content: public SqlDataAdapter (string selectCommandText, System.Data.SqlClient.SqlConnection selectConnection);\n    parameters:\n    - id: selectCommandText\n      type: System.String\n      description: A <xref:System.String> that is a Transact-SQL SELECT statement or stored procedure to be used by the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref>.\n    - id: selectConnection\n      type: System.Data.SqlClient.SqlConnection\n      description: A <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> that represents the connection. If your connection string does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, you can use <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.\n  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: SqlDataAdapter(String,String)\n  nameWithType: SqlDataAdapter.SqlDataAdapter(String,String)\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref> class with a <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> and a connection string.\n  remarks: \"This overload of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor uses the `selectCommandText` parameter to set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property. The <xref:System.Data.SqlClient.SqlDataAdapter> will create and maintain the connection created with the `selectConnectionString` parameter.  \\n  \\n When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._6_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._6_1.cs)]\"\n  syntax:\n    content: public SqlDataAdapter (string selectCommandText, string selectConnectionString);\n    parameters:\n    - id: selectCommandText\n      type: System.String\n      description: A <xref:System.String> that is a Transact-SQL SELECT statement or stored procedure to be used by the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.SqlClient.SqlDataAdapter\"></xref>.\n    - id: selectConnectionString\n      type: System.String\n      description: The connection string. If your connection string does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, you can use &lt;xref:System.Data.SqlClient.SqlDataAdapter.%23ctor%2A&gt; and <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.\n  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)\n  id: AddToBatch(System.Data.IDbCommand)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: AddToBatch(IDbCommand)\n  nameWithType: SqlDataAdapter.AddToBatch(IDbCommand)\n  fullName: System.Data.SqlClient.SqlDataAdapter.AddToBatch(IDbCommand)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override int AddToBatch (System.Data.IDbCommand command);\n    parameters:\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.AddToBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.ClearBatch\n  id: ClearBatch\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: ClearBatch()\n  nameWithType: SqlDataAdapter.ClearBatch()\n  fullName: System.Data.SqlClient.SqlDataAdapter.ClearBatch()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void ClearBatch ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlDataAdapter.ClearBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: To be added.\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    - id: statementType\n      type: System.Data.StatementType\n      description: To be added.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: To be added.\n    return:\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: To be added.\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    - id: statementType\n      type: System.Data.StatementType\n      description: To be added.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: To be added.\n    return:\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.DeleteCommand\n  id: DeleteCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: DeleteCommand\n  nameWithType: SqlDataAdapter.DeleteCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets a Transact-SQL statement or stored procedure to delete records from the data set.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When DeleteCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.  \\n  \\n For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and DeleteCommand properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \\n  \\n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._16_1.vb)]\\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._16_1.cs)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlCommand DeleteCommand { get; set; }\n    return:\n      type: System.Data.SqlClient.SqlCommand\n      description: A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the database that correspond to deleted rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.SqlClient.SqlDataAdapter.DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch\n  id: ExecuteBatch\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: ExecuteBatch()\n  nameWithType: SqlDataAdapter.ExecuteBatch()\n  fullName: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override int ExecuteBatch ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  id: GetBatchedParameter(System.Int32,System.Int32)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: GetBatchedParameter(Int32,Int32)\n  nameWithType: SqlDataAdapter.GetBatchedParameter(Int32,Int32)\n  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);\n    parameters:\n    - id: commandIdentifier\n      type: System.Int32\n      description: To be added.\n    - id: parameterIndex\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Data.IDataParameter\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: GetBatchedRecordsAffected(Int32,Int32,Exception)\n  nameWithType: SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);\n    parameters:\n    - id: commandIdentifier\n      type: System.Int32\n      description: To be added.\n    - id: recordsAffected\n      type: System.Int32\n      description: To be added.\n    - id: error\n      type: System.Exception\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.InitializeBatching\n  id: InitializeBatching\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: InitializeBatching()\n  nameWithType: SqlDataAdapter.InitializeBatching()\n  fullName: System.Data.SqlClient.SqlDataAdapter.InitializeBatching()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void InitializeBatching ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlDataAdapter.InitializeBatching*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.InsertCommand\n  id: InsertCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: InsertCommand\n  nameWithType: SqlDataAdapter.InsertCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets a Transact-SQL statement or stored procedure to insert new records into the data source.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When InsertCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.  \\n  \\n If execution of this command returns rows, these rows can be added to the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object.  \\n  \\n For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, InsertCommand, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \\n  \\n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._33_1.vb)]\\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._33_1.cs)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlCommand InsertCommand { get; set; }\n    return:\n      type: System.Data.SqlClient.SqlCommand\n      description: A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records into the database that correspond to new rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.SqlClient.SqlDataAdapter.InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: To be added.\n  overload: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdated\n  id: RowUpdated\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: RowUpdated\n  nameWithType: SqlDataAdapter.RowUpdated\n  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdated\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source. The attempt to update is made, so the event fires.\n  remarks: \"When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.\"\n  example:\n  - \"The following example shows how to use both the <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> and RowUpdated events.  \\n  \\n The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> event returns this output:  \\n  \\n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)  \\n  \\n The RowUpdated event returns this output:  \\n  \\n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 row=System.Data.DataRow[37] status=0)  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._0_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.sqlclient._0_1.cs)]\"\n  syntax:\n    content: public event System.Data.SqlClient.SqlRowUpdatedEventHandler RowUpdated;\n    return:\n      type: System.Data.SqlClient.SqlRowUpdatedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdating\n  id: RowUpdating\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: RowUpdating\n  nameWithType: SqlDataAdapter.RowUpdating\n  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdating\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source. The attempt to update is made, so the event fires.\n  remarks: \"When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.\"\n  example:\n  - \"The following example shows how to use both the RowUpdating and <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> events.  \\n  \\n The RowUpdating event returns this output:  \\n  \\n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)  \\n  \\n The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> event returns this output:  \\n  \\n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 row=System.Data.DataRow[37] status=0)  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._1_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.sqlclient._1_1.cs)]\"\n  syntax:\n    content: public event System.Data.SqlClient.SqlRowUpdatingEventHandler RowUpdating;\n    return:\n      type: System.Data.SqlClient.SqlRowUpdatingEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.SelectCommand\n  id: SelectCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: SelectCommand\n  nameWithType: SqlDataAdapter.SelectCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets a Transact-SQL statement or stored procedure used to select records in the data source.\n  remarks: \"When SelectCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.  \\n  \\n If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the SelectCommand, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \\n  \\n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._23_1.vb)]\\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._23_1.cs)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlCommand SelectCommand { get; set; }\n    return:\n      type: System.Data.SqlClient.SqlCommand\n      description: A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Fill*> to select records from the database for placement in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.SqlClient.SqlDataAdapter.SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  id: System#Data#IDbDataAdapter#DeleteCommand\n  isEii: true\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set.\n  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  id: System#Data#IDbDataAdapter#InsertCommand\n  isEii: true\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set.\n  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  id: System#Data#IDbDataAdapter#SelectCommand\n  isEii: true\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set.\n  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  id: System#Data#IDbDataAdapter#UpdateCommand\n  isEii: true\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref:System.Data.IdbCommand> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set.\n  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: SqlDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: For a description of this member, see <xref:System.ICloneable.Clone*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.ICloneable> interface.\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new object that is a copy of the current instance.\n  overload: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.TerminateBatching\n  id: TerminateBatching\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: TerminateBatching()\n  nameWithType: SqlDataAdapter.TerminateBatching()\n  fullName: System.Data.SqlClient.SqlDataAdapter.TerminateBatching()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void TerminateBatching ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlDataAdapter.TerminateBatching*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize\n  id: UpdateBatchSize\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: UpdateBatchSize\n  nameWithType: SqlDataAdapter.UpdateBatchSize\n  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets the number of rows that are processed in each round-trip to the server.\n  remarks: \"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.  \\n  \\n Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. This can increase application performance by reducing the number of round-trips to the server.  \\n  \\n Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.  \\n  \\n An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.\"\n  syntax:\n    content: public override int UpdateBatchSize { get; set; }\n    return:\n      type: System.Int32\n      description: \"The number of rows to process per-batch.  \\n  \\n <table><thead><tr><th> Value is  \\n  \\n </th><th> Effect  \\n  \\n </th></tr></thead><tbody><tr><td> 0  \\n  \\n </td><td> There is no limit on the batch size..  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td> Disables batch updating.  \\n  \\n </td></tr><tr><td> &gt;1  \\n  \\n </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.  \\n  \\n </td></tr></tbody></table>  \\n  \\n When setting this to a value other than 1, all the commands associated with the <xref href=\\\"System.Data.SqlClient.SqlDataAdapter\\\"></xref> have to have their **UpdatedRowSource** property set to <xref uid=\\\"langword_csharp_None\\\" name=\\\"None\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_OutputParameters\\\" name=\\\"OutputParameters\\\" href=\\\"\\\"></xref>. An exception is thrown otherwise.\"\n  overload: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlDataAdapter.UpdateCommand\n  id: UpdateCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  langs:\n  - csharp\n  name: UpdateCommand\n  nameWithType: SqlDataAdapter.UpdateCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets a Transact-SQL statement or stored procedure used to update records in the data source.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When UpdateCommand is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, the updated rows may be merged with the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object.  \\n  \\n For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`.  \\n  \\n The `SourceColumn` property of the parameter should be set to the name of the column. This indicates that the value of the parameter is not set manually, but taken from the particular column in the currently processed row.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, UpdateCommand and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \\n  \\n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._31_1.vb)]\\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._31_1.cs)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlCommand UpdateCommand { get; set; }\n    return:\n      type: System.Data.SqlClient.SqlCommand\n      description: A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the database that correspond to modified rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.SqlClient.SqlDataAdapter.UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.Common.DbDataAdapter\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SqlDataAdapter()\n  nameWithType: SqlDataAdapter.SqlDataAdapter()\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter()\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SqlDataAdapter(SqlCommand)\n  nameWithType: SqlDataAdapter.SqlDataAdapter(SqlCommand)\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(SqlCommand)\n- uid: System.Data.SqlClient.SqlCommand\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlCommand\n  nameWithType: SqlCommand\n  fullName: System.Data.SqlClient.SqlCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SqlDataAdapter(String,SqlConnection)\n  nameWithType: SqlDataAdapter.SqlDataAdapter(String,SqlConnection)\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,SqlConnection)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.SqlClient.SqlConnection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlConnection\n  nameWithType: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SqlDataAdapter(String,String)\n  nameWithType: SqlDataAdapter.SqlDataAdapter(String,String)\n  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,String)\n- uid: System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: AddToBatch(IDbCommand)\n  nameWithType: SqlDataAdapter.AddToBatch(IDbCommand)\n  fullName: System.Data.SqlClient.SqlDataAdapter.AddToBatch(IDbCommand)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.ClearBatch\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: ClearBatch()\n  nameWithType: SqlDataAdapter.ClearBatch()\n  fullName: System.Data.SqlClient.SqlDataAdapter.ClearBatch()\n- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatedEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatedEventArgs\n  nameWithType: RowUpdatedEventArgs\n  fullName: System.Data.Common.RowUpdatedEventArgs\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.StatementType\n  parent: System.Data\n  isExternal: false\n  name: StatementType\n  nameWithType: StatementType\n  fullName: System.Data.StatementType\n- uid: System.Data.Common.DataTableMapping\n  parent: System.Data.Common\n  isExternal: false\n  name: DataTableMapping\n  nameWithType: DataTableMapping\n  fullName: System.Data.Common.DataTableMapping\n- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatingEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatingEventArgs\n  nameWithType: RowUpdatingEventArgs\n  fullName: System.Data.Common.RowUpdatingEventArgs\n- uid: System.Data.SqlClient.SqlDataAdapter.DeleteCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: SqlDataAdapter.DeleteCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.DeleteCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: ExecuteBatch()\n  nameWithType: SqlDataAdapter.ExecuteBatch()\n  fullName: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch()\n- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: GetBatchedParameter(Int32,Int32)\n  nameWithType: SqlDataAdapter.GetBatchedParameter(Int32,Int32)\n  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(Int32,Int32)\n- uid: System.Data.IDataParameter\n  parent: System.Data\n  isExternal: false\n  name: IDataParameter\n  nameWithType: IDataParameter\n  fullName: System.Data.IDataParameter\n- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: GetBatchedRecordsAffected(Int32,Int32,Exception)\n  nameWithType: SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Data.SqlClient.SqlDataAdapter.InitializeBatching\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: InitializeBatching()\n  nameWithType: SqlDataAdapter.InitializeBatching()\n  fullName: System.Data.SqlClient.SqlDataAdapter.InitializeBatching()\n- uid: System.Data.SqlClient.SqlDataAdapter.InsertCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: SqlDataAdapter.InsertCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.InsertCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdated\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: RowUpdated\n  nameWithType: SqlDataAdapter.RowUpdated\n  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdated\n- uid: System.Data.SqlClient.SqlRowUpdatedEventHandler\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlRowUpdatedEventHandler\n  nameWithType: SqlRowUpdatedEventHandler\n  fullName: System.Data.SqlClient.SqlRowUpdatedEventHandler\n- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdating\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: RowUpdating\n  nameWithType: SqlDataAdapter.RowUpdating\n  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdating\n- uid: System.Data.SqlClient.SqlRowUpdatingEventHandler\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlRowUpdatingEventHandler\n  nameWithType: SqlRowUpdatingEventHandler\n  fullName: System.Data.SqlClient.SqlRowUpdatingEventHandler\n- uid: System.Data.SqlClient.SqlDataAdapter.SelectCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: SqlDataAdapter.SelectCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.SelectCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: SqlDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.SqlClient.SqlDataAdapter.System.ICloneable.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.SqlClient.SqlDataAdapter.TerminateBatching\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: TerminateBatching()\n  nameWithType: SqlDataAdapter.TerminateBatching()\n  fullName: System.Data.SqlClient.SqlDataAdapter.TerminateBatching()\n- uid: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: UpdateBatchSize\n  nameWithType: SqlDataAdapter.UpdateBatchSize\n  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize\n- uid: System.Data.SqlClient.SqlDataAdapter.UpdateCommand\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: SqlDataAdapter.UpdateCommand\n  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.#ctor*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SqlDataAdapter\n  nameWithType: SqlDataAdapter.SqlDataAdapter\n- uid: System.Data.SqlClient.SqlDataAdapter.AddToBatch*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: AddToBatch\n  nameWithType: SqlDataAdapter.AddToBatch\n- uid: System.Data.SqlClient.SqlDataAdapter.ClearBatch*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: ClearBatch\n  nameWithType: SqlDataAdapter.ClearBatch\n- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent\n  nameWithType: SqlDataAdapter.CreateRowUpdatedEvent\n- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent\n  nameWithType: SqlDataAdapter.CreateRowUpdatingEvent\n- uid: System.Data.SqlClient.SqlDataAdapter.DeleteCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: SqlDataAdapter.DeleteCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: ExecuteBatch\n  nameWithType: SqlDataAdapter.ExecuteBatch\n- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: GetBatchedParameter\n  nameWithType: SqlDataAdapter.GetBatchedParameter\n- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: GetBatchedRecordsAffected\n  nameWithType: SqlDataAdapter.GetBatchedRecordsAffected\n- uid: System.Data.SqlClient.SqlDataAdapter.InitializeBatching*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: InitializeBatching\n  nameWithType: SqlDataAdapter.InitializeBatching\n- uid: System.Data.SqlClient.SqlDataAdapter.InsertCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: SqlDataAdapter.InsertCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: OnRowUpdated\n  nameWithType: SqlDataAdapter.OnRowUpdated\n- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: OnRowUpdating\n  nameWithType: SqlDataAdapter.OnRowUpdating\n- uid: System.Data.SqlClient.SqlDataAdapter.SelectCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: SqlDataAdapter.SelectCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: SqlDataAdapter.System.ICloneable.Clone\n- uid: System.Data.SqlClient.SqlDataAdapter.TerminateBatching*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: TerminateBatching\n  nameWithType: SqlDataAdapter.TerminateBatching\n- uid: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: UpdateBatchSize\n  nameWithType: SqlDataAdapter.UpdateBatchSize\n- uid: System.Data.SqlClient.SqlDataAdapter.UpdateCommand*\n  parent: System.Data.SqlClient.SqlDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: SqlDataAdapter.UpdateCommand\n"}