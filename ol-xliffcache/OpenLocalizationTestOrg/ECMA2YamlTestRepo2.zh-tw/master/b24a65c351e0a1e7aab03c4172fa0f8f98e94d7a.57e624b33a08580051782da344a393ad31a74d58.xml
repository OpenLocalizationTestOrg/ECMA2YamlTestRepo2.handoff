{"nodes":[{"pos":[1110,1221],"content":"Provides a property and methods for writing event and exception information to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a property and methods for writing event and exception information to the application's log listeners.","pos":[0,111]}]},{"pos":[1234,2546],"content":"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]'s logging services. The `WriteEntry` and `WriteException` methods write messages to the application's log listeners. The listeners can be configured by the application's configuration file. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md) and [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).       The `My.Application.Log` object is available only for client applications. For Web applications, use `My.Log`. For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>.       The following table lists examples of tasks involving the `My.Application.Log` object.      |To|See|   |--------|---------|   |Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|   |Write exception information to the application's log listeners|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|   |Determine where `My.Application.Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md)|","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`My.Application.Log`</ph> object provides a straightforward entry point from which to access the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph>'s logging services.","pos":[0,173],"source":"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]'s logging services."},{"content":"The <ph id=\"ph1\">`WriteEntry`</ph> and <ph id=\"ph2\">`WriteException`</ph> methods write messages to the application's log listeners.","pos":[174,270],"source":" The `WriteEntry` and `WriteException` methods write messages to the application's log listeners."},{"content":"The listeners can be configured by the application's configuration file.","pos":[271,343]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Changing Where My.Application.Log Writes Information<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Working with Application Logs<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[344,552],"source":" For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md) and [Working with Application Logs](~/add/includes/ajax-current-ext-md.md)."},{"content":"The <ph id=\"ph1\">`My.Application.Log`</ph> object is available only for client applications.","pos":[559,633],"source":"       The `My.Application.Log` object is available only for client applications."},{"content":"For Web applications, use <ph id=\"ph1\">`My.Log`</ph>.","pos":[634,669],"source":" For Web applications, use `My.Log`."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.Logging.AspLog&gt;.","pos":[670,740],"source":" For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>."},{"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`My.Application.Log`</ph> object.","pos":[747,833],"source":"       The following table lists examples of tasks involving the `My.Application.Log` object."},{"content":"|To|See|   |--------|---------|   |Write event information to the application's log listeners|<bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Write exception information to the application's log listeners|<bpt id=\"p2\">[</bpt>How to: Log Exceptions<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Determine where <ph id=\"ph1\">`My.Application.Log`</ph> writes information|<bpt id=\"p3\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p3\">](~/add/includes/ajax-current-ext-md.md)</ept><ph id=\"ph2\">|</ph>","pos":[839,1302],"source":"      |To|See|   |--------|---------|   |Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|   |Write exception information to the application's log listeners|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|   |Determine where `My.Application.Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md)|"}]},{"pos":[3374,3469],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.Log\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class."},{"pos":[3999,4094],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.Log\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class."},{"pos":[4220,4336],"content":"<xref:System.String>. The name to give to the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource*> property object.","needQuote":true,"needEscape":true,"nodes":[{"content":"<xref:System.String>. The name to give to the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource*> property object.","pos":[0,116],"nodes":[{"content":"&lt;xref:System.String&gt;.","pos":[0,21],"source":"<xref:System.String>."},{"content":"The name to give to the &lt;xref:Microsoft.VisualBasic.Logging.Log.TraceSource*&gt; property object.","pos":[22,116],"source":" The name to give to the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource*> property object."}]}]},{"pos":[4831,5013],"content":"Gets the file the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that underlies the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the file the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object."},{"pos":[5026,5346],"content":"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object.       In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use this property to determine the current configuration of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; object.","pos":[0,137],"source":"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object."},{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[144,238],"source":"       In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[239,318],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[5553,5729],"content":"Returns the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that underlies the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object."},{"pos":[6348,6520],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and adds it to the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object and adds it to the <xref:System.Diagnostics.TraceSource.Listeners*> collection."},{"pos":[6533,7162],"content":"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels> and greater. The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.       The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method creates a new &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;, sets its name to <ph id=\"ph1\">`FileLog`</ph>, and configures it to log messages with severity level &lt;xref:System.Diagnostics.SourceLevels&gt; and greater.","pos":[0,218],"source":"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels> and greater."},{"content":"The new &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; object is then added to the &lt;xref:System.Diagnostics.TraceSource.Listeners%2A&gt; collection.","pos":[219,375],"source":" The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection."},{"content":"The &lt;xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A&gt; calls the method if the &lt;xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A&gt; property has not been configured.","pos":[382,551],"source":"       The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured."},{"content":"The trace source can be configured in the application's configuration file.","pos":[552,627]}]},{"pos":[7760,7916],"content":"Gets to the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that underlies the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets to the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object."},{"pos":[7929,8893],"content":"You can use this property to determine the current configuration of the `Log` object.       In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.       This is an advanced member; it does not show in IntelliSense unless you select the **All** tab.       The following table lists an example of a task involving the `TraceSource` property.      |To|See|   |--------|---------|   |Get information for each of the `Log` object's log listeners.|[Troubleshooting: Log Listeners](~/add/includes/ajax-current-ext-md.md)|      ## Availability by Project Type      |Project type|Available|   |------------------|---------------|   |Windows Application|**Yes**|   |Class Library|**Yes**|   |Console Application|**Yes**|   |Windows Control Library|**Yes**|   |Web Control Library|No|   |Windows Service|**Yes**|   |Web Site|**Yes**|","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use this property to determine the current configuration of the <ph id=\"ph1\">`Log`</ph> object.","pos":[0,85],"source":"You can use this property to determine the current configuration of the `Log` object."},{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[92,186],"source":"       In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[187,266],"source":" In Web applications, the `Log` object is available through the `My.Log` object."},{"content":"This is an advanced member; it does not show in IntelliSense unless you select the <bpt id=\"p1\">**</bpt>All<ept id=\"p1\">**</ept> tab.","pos":[273,368],"source":"       This is an advanced member; it does not show in IntelliSense unless you select the **All** tab."},{"content":"The following table lists an example of a task involving the <ph id=\"ph1\">`TraceSource`</ph> property.","pos":[375,459],"source":"       The following table lists an example of a task involving the `TraceSource` property."},{"content":"|To|See|   |--------|---------|   |Get information for each of the <ph id=\"ph1\">`Log`</ph> object's log listeners.|<bpt id=\"p1\">[</bpt>Troubleshooting: Log Listeners<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>|      ## Availability by Project Type      |Project type|Available|   |------------------|---------------|   |Windows Application|<bpt id=\"p2\">**</bpt>Yes<ept id=\"p2\">**</ept>|   |Class Library|<bpt id=\"p3\">**</bpt>Yes<ept id=\"p3\">**</ept>|   |Console Application|<bpt id=\"p4\">**</bpt>Yes<ept id=\"p4\">**</ept>|   |Windows Control Library|<bpt id=\"p5\">**</bpt>Yes<ept id=\"p5\">**</ept>|   |Web Control Library|No|   |Windows Service|<bpt id=\"p6\">**</bpt>Yes<ept id=\"p6\">**</ept>|   |Web Site|<bpt id=\"p7\">**</bpt>Yes<ept id=\"p7\">**</ept><ph id=\"ph2\">|</ph>","pos":[465,942],"source":"      |To|See|   |--------|---------|   |Get information for each of the `Log` object's log listeners.|[Troubleshooting: Log Listeners](~/add/includes/ajax-current-ext-md.md)|      ## Availability by Project Type      |Project type|Available|   |------------------|---------------|   |Windows Application|**Yes**|   |Class Library|**Yes**|   |Console Application|**Yes**|   |Windows Control Library|**Yes**|   |Web Control Library|No|   |Windows Service|**Yes**|   |Web Site|**Yes**|"}]},{"pos":[9051,9207],"content":"Returns the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that underlies the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object."},{"pos":[9710,9762],"content":"Writes a message to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the application's log listeners.","pos":[0,52]}]},{"pos":[12514,12652],"content":"Required. The message to log. If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"The message to log.","pos":[10,29]},{"content":"If <ph id=\"ph1\">`message`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, an empty string is used.","pos":[30,138],"source":" If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used."}]},{"pos":[12837,12940],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","needQuote":true,"needEscape":true,"nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]},{"pos":[13480,13532],"content":"Writes a message to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the application's log listeners.","pos":[0,52]}]},{"pos":[16328,16466],"content":"Required. The message to log. If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"The message to log.","pos":[10,29]},{"content":"If <ph id=\"ph1\">`message`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, an empty string is used.","pos":[30,138],"source":" If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used."}]},{"pos":[16551,16689],"content":"The type of message. By default, <xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,138],"source":" By default, <xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"></xref>."}]},{"pos":[16908,17017],"content":"The message type is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[17130,17233],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","needQuote":true,"needEscape":true,"nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]},{"pos":[17817,17869],"content":"Writes a message to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the application's log listeners.","pos":[0,52]}]},{"pos":[20673,20811],"content":"Required. The message to log. If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"The message to log.","pos":[10,29]},{"content":"If <ph id=\"ph1\">`message`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, an empty string is used.","pos":[30,138],"source":" If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used."}]},{"pos":[20896,21034],"content":"The type of message. By default, <xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,138],"source":" By default, <xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"></xref>."}]},{"pos":[21092,21205],"content":"Message identifier, typically used for correlation. By default, related to `entryType` as described in the table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Message identifier, typically used for correlation.","pos":[0,51]},{"content":"By default, related to <ph id=\"ph1\">`entryType`</ph> as described in the table.","pos":[52,113],"source":" By default, related to `entryType` as described in the table."}]},{"pos":[21424,21533],"content":"The message type is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[21646,21749],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","needQuote":true,"needEscape":true,"nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]},{"pos":[22211,22275],"content":"Writes exception information to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes exception information to the application's log listeners.","pos":[0,64]}]},{"pos":[25175,25202],"content":"Required. Exception to log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Exception to log.","pos":[0,27],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Exception to log.","pos":[10,27]}]}]},{"pos":[25381,25467],"content":"<ph id=\"ph1\">&lt;code&gt;ex&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ex</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."},{"pos":[25580,25683],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","needQuote":true,"needEscape":true,"nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]},{"pos":[26307,26371],"content":"Writes exception information to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes exception information to the application's log listeners.","pos":[0,64]}]},{"pos":[29338,29365],"content":"Required. Exception to log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Exception to log.","pos":[0,27],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Exception to log.","pos":[10,27]}]}]},{"pos":[29450,29538],"content":"The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,88],"source":" By default, <xref href=\"System.Diagnostics.TraceEventType\"></xref>."}]},{"pos":[29609,29678],"content":"String to append to the message. By default, this is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to append to the message. By default, this is an empty string.","pos":[0,69],"nodes":[{"content":"String to append to the message.","pos":[0,32]},{"content":"By default, this is an empty string.","pos":[33,69]}]}]},{"pos":[29857,29943],"content":"<ph id=\"ph1\">&lt;code&gt;ex&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ex</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."},{"pos":[30090,30199],"content":"The message type is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[30312,30415],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","needQuote":true,"needEscape":true,"nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]},{"pos":[31083,31147],"content":"Writes exception information to the application's log listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes exception information to the application's log listeners.","pos":[0,64]}]},{"pos":[34122,34149],"content":"Required. Exception to log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Exception to log.","pos":[0,27],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Exception to log.","pos":[10,27]}]}]},{"pos":[34234,34322],"content":"The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,88],"source":" By default, <xref href=\"System.Diagnostics.TraceEventType\"></xref>."}]},{"pos":[34393,34462],"content":"String to append to the message. By default, this is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to append to the message. By default, this is an empty string.","pos":[0,69],"nodes":[{"content":"String to append to the message.","pos":[0,32]},{"content":"By default, this is an empty string.","pos":[33,69]}]}]},{"pos":[34520,34656],"content":"Message identifier, typically used for correlation. By default, related to `entryType` as described in the table in the Remarks section.","needQuote":true,"needEscape":true,"nodes":[{"content":"Message identifier, typically used for correlation.","pos":[0,51]},{"content":"By default, related to <ph id=\"ph1\">`entryType`</ph> as described in the table in the Remarks section.","pos":[52,136],"source":" By default, related to `entryType` as described in the table in the Remarks section."}]},{"pos":[34835,34921],"content":"<ph id=\"ph1\">&lt;code&gt;ex&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ex</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."},{"pos":[35068,35177],"content":"The message type is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[35290,35393],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","needQuote":true,"needEscape":true,"nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Logging.Log\n  id: Log\n  children:\n  - Microsoft.VisualBasic.Logging.Log.#ctor\n  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  - Microsoft.VisualBasic.Logging.Log.TraceSource\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  langs:\n  - csharp\n  name: Log\n  nameWithType: Log\n  fullName: Microsoft.VisualBasic.Logging.Log\n  type: Class\n  summary: Provides a property and methods for writing event and exception information to the application's log listeners.\n  remarks: \"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]'s logging services. The `WriteEntry` and `WriteException` methods write messages to the application's log listeners. The listeners can be configured by the application's configuration file. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md) and [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The `My.Application.Log` object is available only for client applications. For Web applications, use `My.Log`. For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>.  \\n  \\n The following table lists examples of tasks involving the `My.Application.Log` object.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \\n|Write exception information to the application's log listeners|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `My.Application.Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md)|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\\\(Visual%20Basic\\\\).md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]\"\n  syntax:\n    content: public class Log\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: Log()\n  nameWithType: Log.Log()\n  fullName: Microsoft.VisualBasic.Logging.Log.Log()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class.\n  syntax:\n    content: public Log ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.Log.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: Log(String)\n  nameWithType: Log.Log(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class.\n  syntax:\n    content: public Log (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: <xref:System.String>. The name to give to the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource*> property object.\n  overload: Microsoft.VisualBasic.Logging.Log.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  id: DefaultFileLogWriter\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets the file the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object.\n  remarks: \"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.\"\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }\n    return:\n      type: Microsoft.VisualBasic.Logging.FileLogTraceListener\n      description: Returns the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object.\n  overload: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  id: InitializeWithDefaultsSinceNoConfigExists\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: InitializeWithDefaultsSinceNoConfigExists()\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()\n  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Creates a new <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object and adds it to the <xref:System.Diagnostics.TraceSource.Listeners*> collection.\n  remarks: \"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels> and greater. The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  \\n  \\n The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file.\"\n  syntax:\n    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource\n  id: TraceSource\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets to the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object.\n  remarks: \"You can use this property to determine the current configuration of the `Log` object.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n This is an advanced member; it does not show in IntelliSense unless you select the **All** tab.  \\n  \\n The following table lists an example of a task involving the `TraceSource` property.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Get information for each of the `Log` object's log listeners.|[Troubleshooting: Log Listeners](~/add/includes/ajax-current-ext-md.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  syntax:\n    content: public System.Diagnostics.TraceSource TraceSource { get; }\n    return:\n      type: System.Diagnostics.TraceSource\n      description: Returns the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the <xref uid=\"langword_csharp_Log\" name=\"Log\" href=\"\"></xref> object.\n  overload: Microsoft.VisualBasic.Logging.Log.TraceSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  id: WriteEntry(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String)\n  nameWithType: Log.WriteEntry(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a message to the application's log listeners.\n  remarks: \"The `WriteEntry` method writes a message to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType>|0|  \\n|<xref:System.Diagnostics.TraceEventType>|1|  \\n|<xref:System.Diagnostics.TraceEventType>|2|  \\n|<xref:System.Diagnostics.TraceEventType>|3|  \\n|<xref:System.Diagnostics.TraceEventType>|4|  \\n|<xref:System.Diagnostics.TraceEventType>|5|  \\n|<xref:System.Diagnostics.TraceEventType>|6|  \\n|<xref:System.Diagnostics.TraceEventType>|7|  \\n|<xref:System.Diagnostics.TraceEventType>|8|  \\n|<xref:System.Diagnostics.TraceEventType>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteEntry` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\\\(Visual%20Basic\\\\).md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\\\(Visual%20Basic\\\\).md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications.\"\n  syntax:\n    content: public void WriteEntry (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: Required. The message to log. If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String,TraceEventType)\n  nameWithType: Log.WriteEntry(String,TraceEventType)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a message to the application's log listeners.\n  remarks: \"The `WriteEntry` method writes a message to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType>|0|  \\n|<xref:System.Diagnostics.TraceEventType>|1|  \\n|<xref:System.Diagnostics.TraceEventType>|2|  \\n|<xref:System.Diagnostics.TraceEventType>|3|  \\n|<xref:System.Diagnostics.TraceEventType>|4|  \\n|<xref:System.Diagnostics.TraceEventType>|5|  \\n|<xref:System.Diagnostics.TraceEventType>|6|  \\n|<xref:System.Diagnostics.TraceEventType>|7|  \\n|<xref:System.Diagnostics.TraceEventType>|8|  \\n|<xref:System.Diagnostics.TraceEventType>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteEntry` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\\\(Visual%20Basic\\\\).md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\\\(Visual%20Basic\\\\).md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications.\"\n  syntax:\n    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);\n    parameters:\n    - id: message\n      type: System.String\n      description: Required. The message to log. If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, <xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String,TraceEventType,Int32)\n  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a message to the application's log listeners.\n  remarks: \"The `WriteEntry` method writes a message to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType>|0|  \\n|<xref:System.Diagnostics.TraceEventType>|1|  \\n|<xref:System.Diagnostics.TraceEventType>|2|  \\n|<xref:System.Diagnostics.TraceEventType>|3|  \\n|<xref:System.Diagnostics.TraceEventType>|4|  \\n|<xref:System.Diagnostics.TraceEventType>|5|  \\n|<xref:System.Diagnostics.TraceEventType>|6|  \\n|<xref:System.Diagnostics.TraceEventType>|7|  \\n|<xref:System.Diagnostics.TraceEventType>|8|  \\n|<xref:System.Diagnostics.TraceEventType>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteEntry` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\\\(Visual%20Basic\\\\).md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\\\(Visual%20Basic\\\\).md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications.\"\n  syntax:\n    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);\n    parameters:\n    - id: message\n      type: System.String\n      description: Required. The message to log. If `message` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, an empty string is used.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, <xref uid=\"langword_csharp_TraceEventType.Information\" name=\"TraceEventType.Information\" href=\"\"></xref>.\n    - id: id\n      type: System.Int32\n      description: Message identifier, typically used for correlation. By default, related to `entryType` as described in the table.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  id: WriteException(System.Exception)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception)\n  nameWithType: Log.WriteException(Exception)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes exception information to the application's log listeners.\n  remarks: \"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType>|0|  \\n|<xref:System.Diagnostics.TraceEventType>|1|  \\n|<xref:System.Diagnostics.TraceEventType>|2|  \\n|<xref:System.Diagnostics.TraceEventType>|3|  \\n|<xref:System.Diagnostics.TraceEventType>|4|  \\n|<xref:System.Diagnostics.TraceEventType>|5|  \\n|<xref:System.Diagnostics.TraceEventType>|6|  \\n|<xref:System.Diagnostics.TraceEventType>|7|  \\n|<xref:System.Diagnostics.TraceEventType>|8|  \\n|<xref:System.Diagnostics.TraceEventType>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteException` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\\\(Visual%20Basic\\\\).md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications.\"\n  syntax:\n    content: public void WriteException (Exception ex);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Required. Exception to log.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ex</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception,TraceEventType,String)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes exception information to the application's log listeners.\n  remarks: \"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType>|0|  \\n|<xref:System.Diagnostics.TraceEventType>|1|  \\n|<xref:System.Diagnostics.TraceEventType>|2|  \\n|<xref:System.Diagnostics.TraceEventType>|3|  \\n|<xref:System.Diagnostics.TraceEventType>|4|  \\n|<xref:System.Diagnostics.TraceEventType>|5|  \\n|<xref:System.Diagnostics.TraceEventType>|6|  \\n|<xref:System.Diagnostics.TraceEventType>|7|  \\n|<xref:System.Diagnostics.TraceEventType>|8|  \\n|<xref:System.Diagnostics.TraceEventType>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteException` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\\\(Visual%20Basic\\\\).md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications.\"\n  syntax:\n    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Required. Exception to log.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType\"></xref>.\n    - id: additionalInfo\n      type: System.String\n      description: String to append to the message. By default, this is an empty string.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ex</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception,TraceEventType,String,Int32)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes exception information to the application's log listeners.\n  remarks: \"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType>|0|  \\n|<xref:System.Diagnostics.TraceEventType>|1|  \\n|<xref:System.Diagnostics.TraceEventType>|2|  \\n|<xref:System.Diagnostics.TraceEventType>|3|  \\n|<xref:System.Diagnostics.TraceEventType>|4|  \\n|<xref:System.Diagnostics.TraceEventType>|5|  \\n|<xref:System.Diagnostics.TraceEventType>|6|  \\n|<xref:System.Diagnostics.TraceEventType>|7|  \\n|<xref:System.Diagnostics.TraceEventType>|8|  \\n|<xref:System.Diagnostics.TraceEventType>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteException` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \\n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\\\(Visual%20Basic\\\\).md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications.\"\n  syntax:\n    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Required. Exception to log.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType\"></xref>.\n    - id: additionalInfo\n      type: System.String\n      description: String to append to the message. By default, this is an empty string.\n    - id: id\n      type: System.Int32\n      description: Message identifier, typically used for correlation. By default, related to `entryType` as described in the table in the Remarks section.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ex</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log()\n  nameWithType: Log.Log()\n  fullName: Microsoft.VisualBasic.Logging.Log.Log()\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log(String)\n  nameWithType: Log.Log(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: InitializeWithDefaultsSinceNoConfigExists()\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()\n  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource\n- uid: System.Diagnostics.TraceSource\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceSource\n  nameWithType: TraceSource\n  fullName: System.Diagnostics.TraceSource\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String)\n  nameWithType: Log.WriteEntry(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String,TraceEventType)\n  nameWithType: Log.WriteEntry(String,TraceEventType)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String,TraceEventType,Int32)\n  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception)\n  nameWithType: Log.WriteException(Exception)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception,TraceEventType,String)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception,TraceEventType,String,Int32)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log\n  nameWithType: Log.Log\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: InitializeWithDefaultsSinceNoConfigExists\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: TraceSource\n  nameWithType: Log.TraceSource\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry\n  nameWithType: Log.WriteEntry\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException\n  nameWithType: Log.WriteException\n"}