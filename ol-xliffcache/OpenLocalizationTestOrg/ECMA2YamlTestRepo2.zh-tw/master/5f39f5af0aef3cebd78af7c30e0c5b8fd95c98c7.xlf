<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f39f5af0aef3cebd78af7c30e0c5b8fd95c98c7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeTypeReference.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85e884cf35edcec353f50e025ed9715a3b13370c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74667c2ed0cd9f78f4e58c220bd21bee5cc1c4ca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reference to a type.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A CodeTypeReference object is used to represent a type for CodeDOM objects.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When CodeDOM types have a <ph id="ph1">`Type`</ph> property, it is of type CodeTypeReference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName&gt; property is a CodeTypeReference that represents a field's data type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A CodeTypeReference can be initialized with a &lt;xref:System.Type&gt; object or a string.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is generally recommended to use a &lt;xref:System.Type&gt; to do this, although it may not always be possible.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt; property specifies the name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For references to array types, the &lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt; property indicates the type of the elements of the array, and the &lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt; property indicates the number of dimensions in the array.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This constructor creates an empty &lt;xref:System.CodeDom.CodeTypeReference&gt; object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you use this constructor, set properties to establish the type reference.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified code type parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the type of the type parameter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type name.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`typeName`</ph> parameter references a generic type, it must follow the syntax conventions for generic types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the reflection signature for a &lt;xref:System.Collections.Generic.Dictionary%602&gt; type, where <ph id="ph1">`K`</ph> is a string and <ph id="ph2">`V`</ph> is a &lt;xref:System.Collections.Generic.List%601&gt; of integers, is represented by reflection as the following (with the assembly information removed): <ph id="ph3">`System.Collections.Generic.Dictionary`</ph>2[[System.String], [System.Collections.Generic.List<ph id="ph4">`1[[System.Int32]]]]`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You must use square brackets ([]) and not the C# angle brackets (&lt;&gt;) to delimit generic parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to reference.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type &lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified array type and rank.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This constructor can be used to construct arrays of arrays by nesting &lt;xref:System.CodeDom.CodeTypeReference&gt; objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the type of the array.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The number of dimensions in the array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type name and type arguments.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type name and code type reference option.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code type reference option, one of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified array type name and rank.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name of the type of the elements of the array.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type and code type reference.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to reference.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The code type reference option, one of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of the elements in the array.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is disregarded unless the &lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt; property is greater than or equal to 1.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the type of the array elements.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets or sets the array rank of the array.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the type being referenced.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This property contains the name of the type unless it is an array type, in which case it is the array element type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The name of the property may be misleading.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the BaseType value for <ph id="ph1">`System.Collections.Generic.Dictionary`</ph>2[[System.String], [System.Collections.Generic.List<ph id="ph2">`1[[System.Int32]]]]`</ph> is <ph id="ph3">`System.Collections.Generic.Dictionary`</ph>2<ph id="ph4">`.      ## Representation of Generic Types    The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages. The return value can contain generic types. Generic types are formatted with the name of the type followed by a grave accent ("`</ph>") followed by a count of the generic type arguments.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The generic type arguments can be found in the &lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt; returned by the &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The values returned by BaseType and the associated &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; contain the same content as the value of the type returned by reflection.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, a constructed &lt;xref:System.Collections.Generic.Dictionary%602&gt; where <ph id="ph1">`K`</ph> is a string and <ph id="ph2">`V`</ph> is a constructed &lt;xref:System.Collections.Generic.List%601&gt; of integers is represented by reflection as the following (with the assembly information removed):      <ph id="ph3">```   System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]   ```</ph>       Recursively parsing the BaseType property from the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Collections.Generic.Dictionary%602&gt; yields the same strings as the reflection representation above:      -   The BaseType property for the parent &lt;xref:System.CodeDom.CodeTypeReference&gt; returns the following:      <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept>   -   The BaseType property for the first &lt;xref:System.CodeDom.CodeTypeReference&gt; object in the &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; collection returns the following:      <bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept>   -   The BaseType property for the second &lt;xref:System.CodeDom.CodeTypeReference&gt; object in the &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; collection returns the following:      <bpt id="p3">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p3">&lt;/CodeContentPlaceHolder&gt;</ept>   -   The &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; property in the &lt;xref:System.CodeDom.CodeTypeReference&gt; object for <ph id="ph4">`System.Collections.Generic.List`</ph>1` returns the following:          <ph id="ph5">```       System.Int32       ```</ph>       The type argument count should be used when parsing the associated &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When creating a generic &lt;xref:System.CodeDom.CodeTypeReference&gt;, the recommended practice is to specify the type arguments as &lt;xref:System.CodeDom.CodeTypeReference&gt; objects or use the constructor that takes a &lt;xref:System.Type&gt;.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Use of the constructor that creates a &lt;xref:System.CodeDom.CodeTypeReference&gt; from a string can lead to undiscoverable type-argument errors.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The name of the type being referenced.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets the code type reference option.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets the type arguments for the current generic type reference.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The TypeArguments property is a collection of type references to be substituted for the type parameter references of the current generic type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The collection contains all the type arguments for all nested types.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For an example, see the &lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type arguments for the current <bpt id="p2">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>