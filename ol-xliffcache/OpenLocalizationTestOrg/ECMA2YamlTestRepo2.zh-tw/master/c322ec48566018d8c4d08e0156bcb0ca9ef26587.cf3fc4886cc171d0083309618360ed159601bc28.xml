{"nodes":[{"pos":[456,505],"content":"Provides a base class for a data-binding handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base class for a data-binding handler.","pos":[0,49]}]},{"pos":[518,2238],"content":"DataBindingHandler provides a base class for data-binding handlers. A data-binding handler can be used within a designer to perform data-binding to enable a meaningful display of the control on the design surface. Typically a control's designer is responsible for this functionality. However, when a control is not live on the design surface, such as within the template of another control, it does not have a designer, and this functionality is provided by a data-binding handler if one has been specified with a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the control.       To use a data-binding handler, the control which has the data-bound property or properties must have a <xref:System.Web.UI.DataBindingHandlerAttribute> specified within its code that indicates the type of data-binding handler to use.       For example, the <xref:System.Web.UI.WebControls.Label> control is associated with the <xref:System.Web.UI.Design.TextDataBindingHandler> class through a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the <xref:System.Web.UI.WebControls.Label> class. Within a template for a <xref:System.Web.UI.WebControls.DataList>, a <xref:System.Web.UI.WebControls.Label> control whose text property has been data bound displays the word \"DataBound\" on the label. Without the data-binding handler, the label would be invisible at design-time, as it does not have a designer to bind its data-bound properties while in a templated control at design-time.       To implement a data-binding handler, define a new class that derives from this class and implement the <xref:System.Web.UI.Design.DataBindingHandler.DataBindControl%2A> method to set the appropriate properties.","needQuote":false,"needEscape":true,"nodes":[{"content":"DataBindingHandler provides a base class for data-binding handlers. A data-binding handler can be used within a designer to perform data-binding to enable a meaningful display of the control on the design surface. Typically a control's designer is responsible for this functionality. However, when a control is not live on the design surface, such as within the template of another control, it does not have a designer, and this functionality is provided by a data-binding handler if one has been specified with a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the control.       To use a data-binding handler, the control which has the data-bound property or properties must have a <xref:System.Web.UI.DataBindingHandlerAttribute> specified within its code that indicates the type of data-binding handler to use.       For example, the <xref:System.Web.UI.WebControls.Label> control is associated with the <xref:System.Web.UI.Design.TextDataBindingHandler> class through a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the <xref:System.Web.UI.WebControls.Label> class. Within a template for a <xref:System.Web.UI.WebControls.DataList>, a <xref:System.Web.UI.WebControls.Label> control whose text property has been data bound displays the word \"DataBound\" on the label. Without the data-binding handler, the label would be invisible at design-time, as it does not have a designer to bind its data-bound properties while in a templated control at design-time.       To implement a data-binding handler, define a new class that derives from this class and implement the <xref:System.Web.UI.Design.DataBindingHandler.DataBindControl%2A> method to set the appropriate properties.","pos":[0,1712],"nodes":[{"content":"DataBindingHandler provides a base class for data-binding handlers.","pos":[0,67]},{"content":"A data-binding handler can be used within a designer to perform data-binding to enable a meaningful display of the control on the design surface.","pos":[68,213]},{"content":"Typically a control's designer is responsible for this functionality.","pos":[214,283]},{"content":"However, when a control is not live on the design surface, such as within the template of another control, it does not have a designer, and this functionality is provided by a data-binding handler if one has been specified with a &lt;xref:System.Web.UI.DataBindingHandlerAttribute&gt; in the code for the control.","pos":[284,591],"source":" However, when a control is not live on the design surface, such as within the template of another control, it does not have a designer, and this functionality is provided by a data-binding handler if one has been specified with a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the control."},{"content":"To use a data-binding handler, the control which has the data-bound property or properties must have a &lt;xref:System.Web.UI.DataBindingHandlerAttribute&gt; specified within its code that indicates the type of data-binding handler to use.","pos":[598,831],"source":"       To use a data-binding handler, the control which has the data-bound property or properties must have a <xref:System.Web.UI.DataBindingHandlerAttribute> specified within its code that indicates the type of data-binding handler to use."},{"content":"For example, the &lt;xref:System.Web.UI.WebControls.Label&gt; control is associated with the &lt;xref:System.Web.UI.Design.TextDataBindingHandler&gt; class through a &lt;xref:System.Web.UI.DataBindingHandlerAttribute&gt; in the code for the &lt;xref:System.Web.UI.WebControls.Label&gt; class.","pos":[838,1106],"source":"       For example, the <xref:System.Web.UI.WebControls.Label> control is associated with the <xref:System.Web.UI.Design.TextDataBindingHandler> class through a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the <xref:System.Web.UI.WebControls.Label> class."},{"content":"Within a template for a &lt;xref:System.Web.UI.WebControls.DataList&gt;, a &lt;xref:System.Web.UI.WebControls.Label&gt; control whose text property has been data bound displays the word \"DataBound\" on the label.","pos":[1107,1306],"source":" Within a template for a <xref:System.Web.UI.WebControls.DataList>, a <xref:System.Web.UI.WebControls.Label> control whose text property has been data bound displays the word \"DataBound\" on the label."},{"content":"Without the data-binding handler, the label would be invisible at design-time, as it does not have a designer to bind its data-bound properties while in a templated control at design-time.","pos":[1307,1495]},{"content":"To implement a data-binding handler, define a new class that derives from this class and implement the &lt;xref:System.Web.UI.Design.DataBindingHandler.DataBindControl%2A&gt; method to set the appropriate properties.","pos":[1502,1712],"source":"       To implement a data-binding handler, define a new class that derives from this class and implement the <xref:System.Web.UI.Design.DataBindingHandler.DataBindControl%2A> method to set the appropriate properties."}]}]},{"pos":[2792,2893],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Design.DataBindingHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.Design.DataBindingHandler\"></xref> class."},{"pos":[3659,3687],"content":"Binds the specified control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Binds the specified control.","pos":[0,28]}]},{"pos":[3699,3994],"content":"This method should be implemented in a derived class to provide functionality to a custom data-binding handler. The logic for the data binding should be implemented within this method, and can be specific to the type or types that the data-binding handler is to bind a property or properties on.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method should be implemented in a derived class to provide functionality to a custom data-binding handler. The logic for the data binding should be implemented within this method, and can be specific to the type or types that the data-binding handler is to bind a property or properties on.","pos":[0,295],"nodes":[{"content":"This method should be implemented in a derived class to provide functionality to a custom data-binding handler.","pos":[0,111]},{"content":"The logic for the data binding should be implemented within this method, and can be specific to the type or types that the data-binding handler is to bind a property or properties on.","pos":[112,295]}]}]},{"pos":[4258,4343],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.IDesignerHost\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the document.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.Design.IDesignerHost\"></xref> for the document."},{"pos":[4415,4470],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to bind.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> to bind."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.Design.DataBindingHandler\n  id: DataBindingHandler\n  children:\n  - System.Web.UI.Design.DataBindingHandler.#ctor\n  - System.Web.UI.Design.DataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)\n  langs:\n  - csharp\n  name: DataBindingHandler\n  nameWithType: DataBindingHandler\n  fullName: System.Web.UI.Design.DataBindingHandler\n  type: Class\n  summary: Provides a base class for a data-binding handler.\n  remarks: \"DataBindingHandler provides a base class for data-binding handlers. A data-binding handler can be used within a designer to perform data-binding to enable a meaningful display of the control on the design surface. Typically a control's designer is responsible for this functionality. However, when a control is not live on the design surface, such as within the template of another control, it does not have a designer, and this functionality is provided by a data-binding handler if one has been specified with a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the control.  \\n  \\n To use a data-binding handler, the control which has the data-bound property or properties must have a <xref:System.Web.UI.DataBindingHandlerAttribute> specified within its code that indicates the type of data-binding handler to use.  \\n  \\n For example, the <xref:System.Web.UI.WebControls.Label> control is associated with the <xref:System.Web.UI.Design.TextDataBindingHandler> class through a <xref:System.Web.UI.DataBindingHandlerAttribute> in the code for the <xref:System.Web.UI.WebControls.Label> class. Within a template for a <xref:System.Web.UI.WebControls.DataList>, a <xref:System.Web.UI.WebControls.Label> control whose text property has been data bound displays the word \\\"DataBound\\\" on the label. Without the data-binding handler, the label would be invisible at design-time, as it does not have a designer to bind its data-bound properties while in a templated control at design-time.  \\n  \\n To implement a data-binding handler, define a new class that derives from this class and implement the <xref:System.Web.UI.Design.DataBindingHandler.DataBindControl%2A> method to set the appropriate properties.\"\n  syntax:\n    content: public abstract class DataBindingHandler\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.Design.DataBindingHandler.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.Design.DataBindingHandler\n  langs:\n  - csharp\n  name: DataBindingHandler()\n  nameWithType: DataBindingHandler.DataBindingHandler()\n  fullName: System.Web.UI.Design.DataBindingHandler.DataBindingHandler()\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.Design.DataBindingHandler\"></xref> class.\n  syntax:\n    content: protected DataBindingHandler ();\n    parameters: []\n  overload: System.Web.UI.Design.DataBindingHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.Design.DataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)\n  id: DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)\n  parent: System.Web.UI.Design.DataBindingHandler\n  langs:\n  - csharp\n  name: DataBindControl(IDesignerHost,Control)\n  nameWithType: DataBindingHandler.DataBindControl(IDesignerHost,Control)\n  fullName: System.Web.UI.Design.DataBindingHandler.DataBindControl(IDesignerHost,Control)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: Binds the specified control.\n  remarks: This method should be implemented in a derived class to provide functionality to a custom data-binding handler. The logic for the data binding should be implemented within this method, and can be specific to the type or types that the data-binding handler is to bind a property or properties on.\n  syntax:\n    content: public abstract void DataBindControl (System.ComponentModel.Design.IDesignerHost designerHost, System.Web.UI.Control control);\n    parameters:\n    - id: designerHost\n      type: System.ComponentModel.Design.IDesignerHost\n      description: The <xref href=\"System.ComponentModel.Design.IDesignerHost\"></xref> for the document.\n    - id: control\n      type: System.Web.UI.Control\n      description: The <xref href=\"System.Web.UI.Control\"></xref> to bind.\n  overload: System.Web.UI.Design.DataBindingHandler.DataBindControl*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.UI.Design.DataBindingHandler.#ctor\n  parent: System.Web.UI.Design.DataBindingHandler\n  isExternal: false\n  name: DataBindingHandler()\n  nameWithType: DataBindingHandler.DataBindingHandler()\n  fullName: System.Web.UI.Design.DataBindingHandler.DataBindingHandler()\n- uid: System.Web.UI.Design.DataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)\n  parent: System.Web.UI.Design.DataBindingHandler\n  isExternal: false\n  name: DataBindControl(IDesignerHost,Control)\n  nameWithType: DataBindingHandler.DataBindControl(IDesignerHost,Control)\n  fullName: System.Web.UI.Design.DataBindingHandler.DataBindControl(IDesignerHost,Control)\n- uid: System.ComponentModel.Design.IDesignerHost\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: IDesignerHost\n  nameWithType: IDesignerHost\n  fullName: System.ComponentModel.Design.IDesignerHost\n- uid: System.Web.UI.Control\n  parent: System.Web.UI\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Web.UI.Control\n- uid: System.Web.UI.Design.DataBindingHandler.#ctor*\n  parent: System.Web.UI.Design.DataBindingHandler\n  isExternal: false\n  name: DataBindingHandler\n  nameWithType: DataBindingHandler.DataBindingHandler\n- uid: System.Web.UI.Design.DataBindingHandler.DataBindControl*\n  parent: System.Web.UI.Design.DataBindingHandler\n  isExternal: false\n  name: DataBindControl\n  nameWithType: DataBindingHandler.DataBindControl\n"}