{"nodes":[{"pos":[695,911],"content":"Defines the common characteristics of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.Binding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.Windows.Data.PriorityBinding\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and <bpt id=\"p3\">&lt;xref href=\"System.Windows.Data.MultiBinding\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> classes.","needQuote":true,"needEscape":true,"source":"Defines the common characteristics of the <xref href=\"System.Windows.Data.Binding\"></xref>, <xref href=\"System.Windows.Data.PriorityBinding\"></xref>, and <xref href=\"System.Windows.Data.MultiBinding\"></xref> classes."},{"pos":[923,1200],"content":"Because the &lt;xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName&gt; method is sealed, a custom binding class that derives from BindingBase will not function correctly as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> markup extension.","needQuote":true,"needEscape":true,"source":"Because the <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName> method is sealed, a custom binding class that derives from BindingBase will not function correctly as a [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] markup extension."},{"pos":[2069,2182],"content":"Gets or sets the name of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.BindingGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which this binding belongs.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the <xref href=\"System.Windows.Data.BindingGroup\"></xref> to which this binding belongs."},{"pos":[2195,3744],"content":"If BindingGroupName is not set, the binding belongs to a <xref:System.Windows.Data.BindingGroup> only if the binding's source and the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> are the same object.       If BindingGroupName is set to a value, the binding belongs to a <xref:System.Windows.Data.BindingGroup> if the following conditions are true:      -   The <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and BindingGroupName are equal.      -   The <xref:System.Windows.Data.BindingGroup> belongs to a parent element of the binding's target element.       If BindingGroupName is set to `null`, the binding is never a part of a <xref:System.Windows.Data.BindingGroup>.       You can include bindings that have a source that is different from the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName property of a binding to the same value.  You can exclude bindings that have the same source as <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName property of a binding to different values.","needQuote":false,"needEscape":true,"nodes":[{"content":"If BindingGroupName is not set, the binding belongs to a &lt;xref:System.Windows.Data.BindingGroup&gt; only if the binding's source and the &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; of the parent element that has the &lt;xref:System.Windows.Data.BindingGroup&gt; are the same object.","pos":[0,283],"source":"If BindingGroupName is not set, the binding belongs to a <xref:System.Windows.Data.BindingGroup> only if the binding's source and the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> are the same object."},{"content":"If BindingGroupName is set to a value, the binding belongs to a &lt;xref:System.Windows.Data.BindingGroup&gt; if the following conditions are true:      -   The &lt;xref:System.Windows.Data.BindingGroup.Name%2A&gt; of the &lt;xref:System.Windows.Data.BindingGroup&gt; and BindingGroupName are equal.","pos":[290,571],"source":"       If BindingGroupName is set to a value, the binding belongs to a <xref:System.Windows.Data.BindingGroup> if the following conditions are true:      -   The <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and BindingGroupName are equal."},{"content":"-   The &lt;xref:System.Windows.Data.BindingGroup&gt; belongs to a parent element of the binding's target element.","pos":[577,685],"source":"      -   The <xref:System.Windows.Data.BindingGroup> belongs to a parent element of the binding's target element."},{"content":"If BindingGroupName is set to <ph id=\"ph1\">`null`</ph>, the binding is never a part of a &lt;xref:System.Windows.Data.BindingGroup&gt;.","pos":[692,803],"source":"       If BindingGroupName is set to `null`, the binding is never a part of a <xref:System.Windows.Data.BindingGroup>."},{"content":"You can include bindings that have a source that is different from the &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; of the parent element that has the &lt;xref:System.Windows.Data.BindingGroup&gt; by setting &lt;xref:System.Windows.Data.BindingGroup.Name%2A&gt; of the &lt;xref:System.Windows.Data.BindingGroup&gt; and the BindingGroupName property of a binding to the same value.","pos":[810,1181],"source":"       You can include bindings that have a source that is different from the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName property of a binding to the same value."},{"content":"You can exclude bindings that have the same source as &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; of the parent element that has the &lt;xref:System.Windows.Data.BindingGroup&gt; by setting &lt;xref:System.Windows.Data.BindingGroup.Name%2A&gt; of the &lt;xref:System.Windows.Data.BindingGroup&gt; and the BindingGroupName property of a binding to different values.","pos":[1183,1539],"source":"  You can exclude bindings that have the same source as <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName property of a binding to different values."}]},{"pos":[5766,5866],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.BindingGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which this binding belongs.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Windows.Data.BindingGroup\"></xref> to which this binding belongs."},{"pos":[6287,6418],"content":"Gets or sets the amount of time, in milliseconds, to wait before updating the binding source after the value on the target changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time, in milliseconds, to wait before updating the binding source after the value on the target changes.","pos":[0,131]}]},{"pos":[6430,7769],"content":"When you use a binding to update the binding source whenever the value of the property changes on the target, you set the <xref:System.Windows.Data.Binding.Mode%2A> property to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>.  In this situation, you can use the Delay property to specify whether there should be a time delay between when the target is changed and when the source is updated.  This is useful when you want to enable users to change a property on a source object but you don't want each change to be immediately committed to the source.  For example, suppose that you have a text box that is data two-way bound to a property of a data object.  When the user changes the value in the text box, the source gets updated.  To enable this scenario, you set the <xref:System.Windows.Data.Binding.Mode%2A> property on the <xref:System.Windows.Data.Binding> to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>.  To avoid updating the source object with every keystroke, set the Delay property to a reasonable value to cause the binding to update only after that amount of time has elapsed since the user stopped typing.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you use a binding to update the binding source whenever the value of the property changes on the target, you set the <xref:System.Windows.Data.Binding.Mode%2A> property to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>.  In this situation, you can use the Delay property to specify whether there should be a time delay between when the target is changed and when the source is updated.  This is useful when you want to enable users to change a property on a source object but you don't want each change to be immediately committed to the source.  For example, suppose that you have a text box that is data two-way bound to a property of a data object.  When the user changes the value in the text box, the source gets updated.  To enable this scenario, you set the <xref:System.Windows.Data.Binding.Mode%2A> property on the <xref:System.Windows.Data.Binding> to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>.  To avoid updating the source object with every keystroke, set the Delay property to a reasonable value to cause the binding to update only after that amount of time has elapsed since the user stopped typing.","pos":[0,1339],"nodes":[{"content":"When you use a binding to update the binding source whenever the value of the property changes on the target, you set the &lt;xref:System.Windows.Data.Binding.Mode%2A&gt; property to &lt;xref:System.Windows.Data.BindingMode&gt; and the &lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt; to &lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;.","pos":[0,332],"source":"When you use a binding to update the binding source whenever the value of the property changes on the target, you set the <xref:System.Windows.Data.Binding.Mode%2A> property to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>."},{"content":"In this situation, you can use the Delay property to specify whether there should be a time delay between when the target is changed and when the source is updated.","pos":[334,498]},{"content":"This is useful when you want to enable users to change a property on a source object but you don't want each change to be immediately committed to the source.","pos":[500,658]},{"content":"For example, suppose that you have a text box that is data two-way bound to a property of a data object.","pos":[660,764]},{"content":"When the user changes the value in the text box, the source gets updated.","pos":[766,839]},{"content":"To enable this scenario, you set the &lt;xref:System.Windows.Data.Binding.Mode%2A&gt; property on the &lt;xref:System.Windows.Data.Binding&gt; to &lt;xref:System.Windows.Data.BindingMode&gt; and the &lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt; to &lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;.","pos":[841,1130],"source":"  To enable this scenario, you set the <xref:System.Windows.Data.Binding.Mode%2A> property on the <xref:System.Windows.Data.Binding> to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>."},{"content":"To avoid updating the source object with every keystroke, set the Delay property to a reasonable value to cause the binding to update only after that amount of time has elapsed since the user stopped typing.","pos":[1132,1339]}]}]},{"pos":[7880,7960],"content":"The amount of time, in milliseconds, to wait before updating the binding source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount of time, in milliseconds, to wait before updating the binding source.","pos":[0,80]}]},{"pos":[8410,8485],"content":"Gets or sets the value to use when the binding is unable to return a value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the value to use when the binding is unable to return a value.","pos":[0,75]}]},{"pos":[8498,9966],"content":"A binding returns a value successfully if:      1.  The path to the binding source resolves successfully.      2.  The value converter, if any, is able to convert the resulting value.      3.  The resulting value is valid for the binding target (target) property.       If 1 and 2 return <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>, the target property is set to the value of the FallbackValue, if one is available. If there is no FallbackValue, the default value of the target property is used.       The value <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> is not considered a successful return value.      <a name=\"xamlTextUsage_FallbackValue\"></a>    ## XAML Text Usage      ```   <object FallbackValue=\"fallbackValue\" />   ```       **- or –**      ```   <object>     <object.FallbackValue>       fallbackValue       </object.FallbackValue>   </object>   ```      <a name=\"xamlValues_FallbackValue\"></a>    ## XAML Values    *fallbackValue*    An attribute or object element value of the same type as the target property. See that type's documentation for XAML usage information. That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type). The target property type will therefore influence which syntax you use for the value of the FallbackValue property.","needQuote":false,"needEscape":true,"nodes":[{"content":"A binding returns a value successfully if:      1.","pos":[0,50]},{"content":"The path to the binding source resolves successfully.","pos":[52,105]},{"content":"2.","pos":[111,113]},{"content":"The value converter, if any, is able to convert the resulting value.","pos":[115,183]},{"content":"3.","pos":[189,191]},{"content":"The resulting value is valid for the binding target (target) property.","pos":[193,263]},{"content":"If 1 and 2 return &lt;xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName&gt;, the target property is set to the value of the FallbackValue, if one is available.","pos":[270,448],"source":"       If 1 and 2 return <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>, the target property is set to the value of the FallbackValue, if one is available."},{"content":"If there is no FallbackValue, the default value of the target property is used.","pos":[449,528]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName&gt; is not considered a successful return value.","pos":[535,666],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> is not considered a successful return value."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_FallbackValue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage      <ph id=\"ph1\">```   &lt;object FallbackValue=\"fallbackValue\" /&gt;   ```</ph>       <bpt id=\"p2\">**</bpt>- or –<ept id=\"p2\">**</ept>      <ph id=\"ph2\">```   &lt;object&gt;     &lt;object.FallbackValue&gt;       fallbackValue       &lt;/object.FallbackValue&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_FallbackValue\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>fallbackValue<ept id=\"p4\">*</ept>    An attribute or object element value of the same type as the target property.","pos":[672,1089],"source":"<a name=\"xamlTextUsage_FallbackValue\"></a>    ## XAML Text Usage      ```   <object FallbackValue=\"fallbackValue\" />   ```       **- or –**      ```   <object>     <object.FallbackValue>       fallbackValue       </object.FallbackValue>   </object>   ```      <a name=\"xamlValues_FallbackValue\"></a>    ## XAML Values    *fallbackValue*    An attribute or object element value of the same type as the target property."},{"content":"See that type's documentation for XAML usage information.","pos":[1090,1147]},{"content":"That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type).","pos":[1148,1314]},{"content":"The target property type will therefore influence which syntax you use for the value of the FallbackValue property.","pos":[1315,1430]}]},{"pos":[10090,10177],"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The default value is <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>."},{"pos":[10732,10830],"content":"Returns an object that should be set on the property where this binding and extension are applied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an object that should be set on the property where this binding and extension are applied.","pos":[0,98]}]},{"pos":[10843,12778],"content":"This implementation provides the base syntax support for binding through [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] for all provided practical derived classes (<xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, and <xref:System.Windows.Data.MultiBinding>).       The <xref:System.Windows.Data.BindingBase> class implementation of this method is expected to return an expression object that is the result of a binding. Binding a property works by targeting a given <xref:System.Windows.DependencyProperty> on a given <xref:System.Windows.DependencyObject>. These two pieces of information are transmitted by querying for an <xref:System.Windows.Markup.IProvideValueTarget> implementation on the `serviceProvider`, which the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] reader makes available during parsing of a binding. This base class implementation is responsible for checking for a valid <xref:System.Windows.DependencyProperty> and <xref:System.Windows.DependencyObject>. If these are found, the actual implementation of returning a binding expression falls to various derived classes, as implemented by having the base class call an internal abstract method. Otherwise, the extension returns the binding object itself. Returning the binding itself results in a type mismatch error, but this should not occur under normal circumstances.      > [!IMPORTANT] >  Because the syntax for binding through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] as implemented in this method relies on implementing an internal override, and because ProvideValue itself is sealed, a custom binding class that derives from <xref:System.Windows.Data.BindingBase> will not function correctly as a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] markup extension.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation provides the base syntax support for binding through <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> for all provided practical derived classes (&lt;xref:System.Windows.Data.Binding&gt;, &lt;xref:System.Windows.Data.PriorityBinding&gt;, and &lt;xref:System.Windows.Data.MultiBinding&gt;).","pos":[0,306],"source":"This implementation provides the base syntax support for binding through [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] for all provided practical derived classes (<xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, and <xref:System.Windows.Data.MultiBinding>)."},{"content":"The &lt;xref:System.Windows.Data.BindingBase&gt; class implementation of this method is expected to return an expression object that is the result of a binding.","pos":[313,467],"source":"       The <xref:System.Windows.Data.BindingBase> class implementation of this method is expected to return an expression object that is the result of a binding."},{"content":"Binding a property works by targeting a given &lt;xref:System.Windows.DependencyProperty&gt; on a given &lt;xref:System.Windows.DependencyObject&gt;.","pos":[468,605],"source":" Binding a property works by targeting a given <xref:System.Windows.DependencyProperty> on a given <xref:System.Windows.DependencyObject>."},{"content":"These two pieces of information are transmitted by querying for an &lt;xref:System.Windows.Markup.IProvideValueTarget&gt; implementation on the <ph id=\"ph1\">`serviceProvider`</ph>, which the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> reader makes available during parsing of a binding.","pos":[606,966],"source":" These two pieces of information are transmitted by querying for an <xref:System.Windows.Markup.IProvideValueTarget> implementation on the `serviceProvider`, which the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] reader makes available during parsing of a binding."},{"content":"This base class implementation is responsible for checking for a valid &lt;xref:System.Windows.DependencyProperty&gt; and &lt;xref:System.Windows.DependencyObject&gt;.","pos":[967,1122],"source":" This base class implementation is responsible for checking for a valid <xref:System.Windows.DependencyProperty> and <xref:System.Windows.DependencyObject>."},{"content":"If these are found, the actual implementation of returning a binding expression falls to various derived classes, as implemented by having the base class call an internal abstract method.","pos":[1123,1310]},{"content":"Otherwise, the extension returns the binding object itself.","pos":[1311,1370]},{"content":"Returning the binding itself results in a type mismatch error, but this should not occur under normal circumstances.","pos":[1371,1487]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Because the syntax for binding through <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> as implemented in this method relies on implementing an internal override, and because ProvideValue itself is sealed, a custom binding class that derives from &lt;xref:System.Windows.Data.BindingBase&gt; will not function correctly as a <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> markup extension.","pos":[1493,1930],"source":"      > [!IMPORTANT] >  Because the syntax for binding through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] as implemented in this method relies on implementing an internal override, and because ProvideValue itself is sealed, a custom binding class that derives from <xref:System.Windows.Data.BindingBase> will not function correctly as a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] markup extension."}]},{"pos":[12979,13156],"content":"The object that can provide services for the markup extension. May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; see the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that can provide services for the markup extension.","pos":[0,62]},{"content":"May be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see the Remarks section for more information.","pos":[63,177],"source":" May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; see the Remarks section for more information."}]},{"pos":[13214,13262],"content":"The value to set on the binding target property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to set on the binding target property.","pos":[0,48]}]},{"pos":[13798,13995],"content":"Returns a value that indicates whether serialization processes should serialize the effective value of the <xref:System.Windows.Data.BindingBase.FallbackValue*> property on instances of this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether serialization processes should serialize the effective value of the &lt;xref:System.Windows.Data.BindingBase.FallbackValue*&gt; property on instances of this class.","pos":[0,197],"source":"Returns a value that indicates whether serialization processes should serialize the effective value of the <xref:System.Windows.Data.BindingBase.FallbackValue*> property on instances of this class."}]},{"pos":[14141,14374],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.Data.BindingBase.FallbackValue*&gt; property value should be serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Data.BindingBase.FallbackValue*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14936,15065],"content":"Returns a value that indicates whether the <xref:System.Windows.Data.BindingBase.TargetNullValue*> property should be serialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the &lt;xref:System.Windows.Data.BindingBase.TargetNullValue*&gt; property should be serialized.","pos":[0,129],"source":"Returns a value that indicates whether the <xref:System.Windows.Data.BindingBase.TargetNullValue*> property should be serialized."}]},{"pos":[15213,15442],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.Data.BindingBase.TargetNullValue*&gt; property should be serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Data.BindingBase.TargetNullValue*> property should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15912,16018],"content":"Gets or sets a string that specifies how to format the binding if it displays the bound value as a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a string that specifies how to format the binding if it displays the bound value as a string.","pos":[0,106]}]},{"pos":[16031,17421],"content":"StringFormat can be a predefined, composite, or custom string format. For more information about string formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).       If you set the <xref:System.Windows.Data.Binding.Converter%2A> and StringFormat properties, the converter is applied to the data value first, and then the StringFormat is applied.       When you set the StringFormat on a <xref:System.Windows.Data.Binding> to a composite string format, you can specify only one parameter.       When you use a <xref:System.Windows.Data.MultiBinding>, the StringFormat property applies only when it is set on the <xref:System.Windows.Data.MultiBinding>.  The value of StringFormat that is set on any child <xref:System.Windows.Data.Binding> objects is ignored.  The number of parameters in a composite string format cannot exceed the number of child <xref:System.Windows.Data.Binding> objects in the <xref:System.Windows.Data.MultiBinding>.       When you use a <xref:System.Windows.Data.PriorityBinding>, you can set the StringFormat on the <xref:System.Windows.Data.PriorityBinding>, on child binding objects, or both.  If the StringFormat is set on the child binding that is applied, that value is used.  If the StringFormat is not set on the child binding that is applied, the StringFormat of the <xref:System.Windows.Data.PriorityBinding> is applied if it is set.","needQuote":false,"needEscape":true,"nodes":[{"content":"StringFormat can be a predefined, composite, or custom string format.","pos":[0,69]},{"content":"For more information about string formats, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[70,175],"source":" For more information about string formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."},{"content":"If you set the &lt;xref:System.Windows.Data.Binding.Converter%2A&gt; and StringFormat properties, the converter is applied to the data value first, and then the StringFormat is applied.","pos":[182,361],"source":"       If you set the <xref:System.Windows.Data.Binding.Converter%2A> and StringFormat properties, the converter is applied to the data value first, and then the StringFormat is applied."},{"content":"When you set the StringFormat on a &lt;xref:System.Windows.Data.Binding&gt; to a composite string format, you can specify only one parameter.","pos":[368,503],"source":"       When you set the StringFormat on a <xref:System.Windows.Data.Binding> to a composite string format, you can specify only one parameter."},{"content":"When you use a &lt;xref:System.Windows.Data.MultiBinding&gt;, the StringFormat property applies only when it is set on the &lt;xref:System.Windows.Data.MultiBinding&gt;.","pos":[510,667],"source":"       When you use a <xref:System.Windows.Data.MultiBinding>, the StringFormat property applies only when it is set on the <xref:System.Windows.Data.MultiBinding>."},{"content":"The value of StringFormat that is set on any child &lt;xref:System.Windows.Data.Binding&gt; objects is ignored.","pos":[669,774],"source":"  The value of StringFormat that is set on any child <xref:System.Windows.Data.Binding> objects is ignored."},{"content":"The number of parameters in a composite string format cannot exceed the number of child &lt;xref:System.Windows.Data.Binding&gt; objects in the &lt;xref:System.Windows.Data.MultiBinding&gt;.","pos":[776,954],"source":"  The number of parameters in a composite string format cannot exceed the number of child <xref:System.Windows.Data.Binding> objects in the <xref:System.Windows.Data.MultiBinding>."},{"content":"When you use a &lt;xref:System.Windows.Data.PriorityBinding&gt;, you can set the StringFormat on the &lt;xref:System.Windows.Data.PriorityBinding&gt;, on child binding objects, or both.","pos":[961,1134],"source":"       When you use a <xref:System.Windows.Data.PriorityBinding>, you can set the StringFormat on the <xref:System.Windows.Data.PriorityBinding>, on child binding objects, or both."},{"content":"If the StringFormat is set on the child binding that is applied, that value is used.","pos":[1136,1220]},{"content":"If the StringFormat is not set on the child binding that is applied, the StringFormat of the &lt;xref:System.Windows.Data.PriorityBinding&gt; is applied if it is set.","pos":[1222,1382],"source":"  If the StringFormat is not set on the child binding that is applied, the StringFormat of the <xref:System.Windows.Data.PriorityBinding> is applied if it is set."}]},{"pos":[18179,18272],"content":"A string that specifies how to format the binding if it displays the bound value as a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that specifies how to format the binding if it displays the bound value as a string.","pos":[0,93]}]},{"pos":[18739,18882],"content":"Gets or sets the value that is used in the target when the value of the source is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the value that is used in the target when the value of the source is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18895,19561],"content":"<a name=\"xamlTextUsage_TargetNullValue\"></a>    ## XAML Text Usage      ```   <object TargetNullValue=\"nullValue\" />   ```       **- or –**      ```   <object>     <object.TargetNullValue>       nullValue       </object.TargetNullValue>   </object>   ```      <a name=\"xamlValues_TargetNullValue\"></a>    ## XAML Values    *nullValue*    An attribute or object element value of the same type as the target property. See that type's documentation for XAML usage information. That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type).","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_TargetNullValue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage      <ph id=\"ph1\">```   &lt;object TargetNullValue=\"nullValue\" /&gt;   ```</ph>       <bpt id=\"p2\">**</bpt>- or –<ept id=\"p2\">**</ept>      <ph id=\"ph2\">```   &lt;object&gt;     &lt;object.TargetNullValue&gt;       nullValue       &lt;/object.TargetNullValue&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_TargetNullValue\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>nullValue<ept id=\"p4\">*</ept>    An attribute or object element value of the same type as the target property.","pos":[0,415],"source":"<a name=\"xamlTextUsage_TargetNullValue\"></a>    ## XAML Text Usage      ```   <object TargetNullValue=\"nullValue\" />   ```       **- or –**      ```   <object>     <object.TargetNullValue>       nullValue       </object.TargetNullValue>   </object>   ```      <a name=\"xamlValues_TargetNullValue\"></a>    ## XAML Values    *nullValue*    An attribute or object element value of the same type as the target property."},{"content":"See that type's documentation for XAML usage information.","pos":[416,473]},{"content":"That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type).","pos":[474,640]}]},{"pos":[20040,20170],"content":"The value that is used in the target when the value of the source is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value that is used in the target when the value of the source is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Data.BindingBase\n  id: BindingBase\n  children:\n  - System.Windows.Data.BindingBase.BindingGroupName\n  - System.Windows.Data.BindingBase.Delay\n  - System.Windows.Data.BindingBase.FallbackValue\n  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)\n  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue\n  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue\n  - System.Windows.Data.BindingBase.StringFormat\n  - System.Windows.Data.BindingBase.TargetNullValue\n  langs:\n  - csharp\n  name: BindingBase\n  nameWithType: BindingBase\n  fullName: System.Windows.Data.BindingBase\n  type: Class\n  summary: Defines the common characteristics of the <xref href=\"System.Windows.Data.Binding\"></xref>, <xref href=\"System.Windows.Data.PriorityBinding\"></xref>, and <xref href=\"System.Windows.Data.MultiBinding\"></xref> classes.\n  remarks: Because the <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName> method is sealed, a custom binding class that derives from BindingBase will not function correctly as a [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] markup extension.\n  syntax:\n    content: >-\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)]\n\n      [System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Object))]\n\n      public abstract class BindingBase : System.Windows.Markup.MarkupExtension\n  inheritance:\n  - System.Windows.Markup.MarkupExtension\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.BindingGroupName\n  id: BindingGroupName\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: BindingGroupName\n  nameWithType: BindingBase.BindingGroupName\n  fullName: System.Windows.Data.BindingBase.BindingGroupName\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Gets or sets the name of the <xref href=\"System.Windows.Data.BindingGroup\"></xref> to which this binding belongs.\n  remarks: \"If BindingGroupName is not set, the binding belongs to a <xref:System.Windows.Data.BindingGroup> only if the binding's source and the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> are the same object.  \\n  \\n If BindingGroupName is set to a value, the binding belongs to a <xref:System.Windows.Data.BindingGroup> if the following conditions are true:  \\n  \\n-   The <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and BindingGroupName are equal.  \\n  \\n-   The <xref:System.Windows.Data.BindingGroup> belongs to a parent element of the binding's target element.  \\n  \\n If BindingGroupName is set to `null`, the binding is never a part of a <xref:System.Windows.Data.BindingGroup>.  \\n  \\n You can include bindings that have a source that is different from the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName property of a binding to the same value.  You can exclude bindings that have the same source as <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName property of a binding to different values.\"\n  example:\n  - \"The following examples are part of an application that checks whether the user has set the properties of two objects to equal values. The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is data bound to a different source: The binding of the first <xref:System.Windows.Controls.TextBox> is part of the <xref:System.Windows.Data.BindingGroup> because the <xref:System.Windows.Controls.TextBox> inherits the <xref:System.Windows.FrameworkElement.DataContext%2A> and <xref:System.Windows.Data.BindingGroup> from its parent <xref:System.Windows.Controls.StackPanel>  \\n  \\n The binding on the second <xref:System.Windows.Controls.TextBox> is part of the <xref:System.Windows.Data.BindingGroup> because the <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName of the <xref:System.Windows.Data.Binding> are both set to `bindingGroup`.  \\n  \\n [!code-xml[BindingGroupSnippets#BindingGroupName](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#bindinggroupname)]  \\n[!code-xml[BindingGroupSnippets#ValidationAdornerSite](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#validationadornersite)]  \\n  \\n The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.  In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.  \\n  \\n [!code-cs[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#bindinggroupnamevalidationrule)]\\n [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#bindinggroupnamevalidationrule)]\"\n  syntax:\n    content: public string BindingGroupName { get; set; }\n    return:\n      type: System.String\n      description: The name of the <xref href=\"System.Windows.Data.BindingGroup\"></xref> to which this binding belongs.\n  overload: System.Windows.Data.BindingBase.BindingGroupName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.Delay\n  id: Delay\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: Delay\n  nameWithType: BindingBase.Delay\n  fullName: System.Windows.Data.BindingBase.Delay\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Gets or sets the amount of time, in milliseconds, to wait before updating the binding source after the value on the target changes.\n  remarks: When you use a binding to update the binding source whenever the value of the property changes on the target, you set the <xref:System.Windows.Data.Binding.Mode%2A> property to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>.  In this situation, you can use the Delay property to specify whether there should be a time delay between when the target is changed and when the source is updated.  This is useful when you want to enable users to change a property on a source object but you don't want each change to be immediately committed to the source.  For example, suppose that you have a text box that is data two-way bound to a property of a data object.  When the user changes the value in the text box, the source gets updated.  To enable this scenario, you set the <xref:System.Windows.Data.Binding.Mode%2A> property on the <xref:System.Windows.Data.Binding> to <xref:System.Windows.Data.BindingMode> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> to <xref:System.Windows.Data.UpdateSourceTrigger>.  To avoid updating the source object with every keystroke, set the Delay property to a reasonable value to cause the binding to update only after that amount of time has elapsed since the user stopped typing.\n  syntax:\n    content: public int Delay { get; set; }\n    return:\n      type: System.Int32\n      description: The amount of time, in milliseconds, to wait before updating the binding source.\n  overload: System.Windows.Data.BindingBase.Delay*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.FallbackValue\n  id: FallbackValue\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: FallbackValue\n  nameWithType: BindingBase.FallbackValue\n  fullName: System.Windows.Data.BindingBase.FallbackValue\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Gets or sets the value to use when the binding is unable to return a value.\n  remarks: \"A binding returns a value successfully if:  \\n  \\n1.  The path to the binding source resolves successfully.  \\n  \\n2.  The value converter, if any, is able to convert the resulting value.  \\n  \\n3.  The resulting value is valid for the binding target (target) property.  \\n  \\n If 1 and 2 return <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>, the target property is set to the value of the FallbackValue, if one is available. If there is no FallbackValue, the default value of the target property is used.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> is not considered a successful return value.  \\n  \\n<a name=\\\"xamlTextUsage_FallbackValue\\\"></a>   \\n## XAML Text Usage  \\n  \\n```  \\n<object FallbackValue=\\\"fallbackValue\\\" />  \\n```  \\n  \\n **- or –**  \\n  \\n```  \\n<object>  \\n  <object.FallbackValue>  \\n    fallbackValue  \\n    </object.FallbackValue>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_FallbackValue\\\"></a>   \\n## XAML Values  \\n *fallbackValue*  \\n An attribute or object element value of the same type as the target property. See that type's documentation for XAML usage information. That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type). The target property type will therefore influence which syntax you use for the value of the FallbackValue property.\"\n  syntax:\n    content: public object FallbackValue { get; set; }\n    return:\n      type: System.Object\n      description: The default value is <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.\n  overload: System.Windows.Data.BindingBase.FallbackValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)\n  id: ProvideValue(System.IServiceProvider)\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: ProvideValue(IServiceProvider)\n  nameWithType: BindingBase.ProvideValue(IServiceProvider)\n  fullName: System.Windows.Data.BindingBase.ProvideValue(IServiceProvider)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Returns an object that should be set on the property where this binding and extension are applied.\n  remarks: \"This implementation provides the base syntax support for binding through [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] for all provided practical derived classes (<xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, and <xref:System.Windows.Data.MultiBinding>).  \\n  \\n The <xref:System.Windows.Data.BindingBase> class implementation of this method is expected to return an expression object that is the result of a binding. Binding a property works by targeting a given <xref:System.Windows.DependencyProperty> on a given <xref:System.Windows.DependencyObject>. These two pieces of information are transmitted by querying for an <xref:System.Windows.Markup.IProvideValueTarget> implementation on the `serviceProvider`, which the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] reader makes available during parsing of a binding. This base class implementation is responsible for checking for a valid <xref:System.Windows.DependencyProperty> and <xref:System.Windows.DependencyObject>. If these are found, the actual implementation of returning a binding expression falls to various derived classes, as implemented by having the base class call an internal abstract method. Otherwise, the extension returns the binding object itself. Returning the binding itself results in a type mismatch error, but this should not occur under normal circumstances.  \\n  \\n> [!IMPORTANT]\\n>  Because the syntax for binding through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] as implemented in this method relies on implementing an internal override, and because ProvideValue itself is sealed, a custom binding class that derives from <xref:System.Windows.Data.BindingBase> will not function correctly as a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] markup extension.\"\n  syntax:\n    content: public override sealed object ProvideValue (IServiceProvider serviceProvider);\n    parameters:\n    - id: serviceProvider\n      type: System.IServiceProvider\n      description: The object that can provide services for the markup extension. May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; see the Remarks section for more information.\n    return:\n      type: System.Object\n      description: The value to set on the binding target property.\n  overload: System.Windows.Data.BindingBase.ProvideValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue\n  id: ShouldSerializeFallbackValue\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: ShouldSerializeFallbackValue()\n  nameWithType: BindingBase.ShouldSerializeFallbackValue()\n  fullName: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Returns a value that indicates whether serialization processes should serialize the effective value of the <xref:System.Windows.Data.BindingBase.FallbackValue*> property on instances of this class.\n  syntax:\n    content: public bool ShouldSerializeFallbackValue ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Data.BindingBase.FallbackValue*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue\n  id: ShouldSerializeTargetNullValue\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: ShouldSerializeTargetNullValue()\n  nameWithType: BindingBase.ShouldSerializeTargetNullValue()\n  fullName: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Returns a value that indicates whether the <xref:System.Windows.Data.BindingBase.TargetNullValue*> property should be serialized.\n  syntax:\n    content: public bool ShouldSerializeTargetNullValue ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Data.BindingBase.TargetNullValue*> property should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.StringFormat\n  id: StringFormat\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: StringFormat\n  nameWithType: BindingBase.StringFormat\n  fullName: System.Windows.Data.BindingBase.StringFormat\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Gets or sets a string that specifies how to format the binding if it displays the bound value as a string.\n  remarks: \"StringFormat can be a predefined, composite, or custom string format. For more information about string formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If you set the <xref:System.Windows.Data.Binding.Converter%2A> and StringFormat properties, the converter is applied to the data value first, and then the StringFormat is applied.  \\n  \\n When you set the StringFormat on a <xref:System.Windows.Data.Binding> to a composite string format, you can specify only one parameter.  \\n  \\n When you use a <xref:System.Windows.Data.MultiBinding>, the StringFormat property applies only when it is set on the <xref:System.Windows.Data.MultiBinding>.  The value of StringFormat that is set on any child <xref:System.Windows.Data.Binding> objects is ignored.  The number of parameters in a composite string format cannot exceed the number of child <xref:System.Windows.Data.Binding> objects in the <xref:System.Windows.Data.MultiBinding>.  \\n  \\n When you use a <xref:System.Windows.Data.PriorityBinding>, you can set the StringFormat on the <xref:System.Windows.Data.PriorityBinding>, on child binding objects, or both.  If the StringFormat is set on the child binding that is applied, that value is used.  If the StringFormat is not set on the child binding that is applied, the StringFormat of the <xref:System.Windows.Data.PriorityBinding> is applied if it is set.\"\n  example:\n  - \"The following example uses the StringFormat property to convert `Price`, which is a <xref:System.Double>, to a string that represents a currency.  \\n  \\n [!code-xml[ContentStringSnippets#Binding](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#binding)]  \\n  \\n The following example uses the StringFormat property on a <xref:System.Windows.Data.MultiBinding> to build a string that includes the `Description` and `Price` of each item in a <xref:System.Windows.Controls.ListBox>.  \\n  \\n [!code-xml[ContentStringSnippets#MultiBinding](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#multibinding)]\"\n  syntax:\n    content: public string StringFormat { get; set; }\n    return:\n      type: System.String\n      description: A string that specifies how to format the binding if it displays the bound value as a string.\n  overload: System.Windows.Data.BindingBase.StringFormat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingBase.TargetNullValue\n  id: TargetNullValue\n  parent: System.Windows.Data.BindingBase\n  langs:\n  - csharp\n  name: TargetNullValue\n  nameWithType: BindingBase.TargetNullValue\n  fullName: System.Windows.Data.BindingBase.TargetNullValue\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Gets or sets the value that is used in the target when the value of the source is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  remarks: \"<a name=\\\"xamlTextUsage_TargetNullValue\\\"></a>   \\n## XAML Text Usage  \\n  \\n```  \\n<object TargetNullValue=\\\"nullValue\\\" />  \\n```  \\n  \\n **- or –**  \\n  \\n```  \\n<object>  \\n  <object.TargetNullValue>  \\n    nullValue  \\n    </object.TargetNullValue>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_TargetNullValue\\\"></a>   \\n## XAML Values  \\n *nullValue*  \\n An attribute or object element value of the same type as the target property. See that type's documentation for XAML usage information. That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type).\"\n  example:\n  - \"The following example binds a <xref:System.Windows.Controls.TextBox> to a property of an object.  If the property is `null`, the <xref:System.Windows.Controls.TextBox> displays \\\"please enter a string.\\\"  \\n  \\n [!code-xml[BindingGroupSnippets#TargetNullValue](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#targetnullvalue)]\"\n  syntax:\n    content: public object TargetNullValue { get; set; }\n    return:\n      type: System.Object\n      description: The value that is used in the target when the value of the source is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Data.BindingBase.TargetNullValue*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Markup.MarkupExtension\n  isExternal: false\n  name: System.Windows.Markup.MarkupExtension\n- uid: System.Windows.Data.BindingBase.BindingGroupName\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: BindingGroupName\n  nameWithType: BindingBase.BindingGroupName\n  fullName: System.Windows.Data.BindingBase.BindingGroupName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Data.BindingBase.Delay\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: Delay\n  nameWithType: BindingBase.Delay\n  fullName: System.Windows.Data.BindingBase.Delay\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Data.BindingBase.FallbackValue\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: FallbackValue\n  nameWithType: BindingBase.FallbackValue\n  fullName: System.Windows.Data.BindingBase.FallbackValue\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: ProvideValue(IServiceProvider)\n  nameWithType: BindingBase.ProvideValue(IServiceProvider)\n  fullName: System.Windows.Data.BindingBase.ProvideValue(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: true\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: ShouldSerializeFallbackValue()\n  nameWithType: BindingBase.ShouldSerializeFallbackValue()\n  fullName: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: ShouldSerializeTargetNullValue()\n  nameWithType: BindingBase.ShouldSerializeTargetNullValue()\n  fullName: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue()\n- uid: System.Windows.Data.BindingBase.StringFormat\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: StringFormat\n  nameWithType: BindingBase.StringFormat\n  fullName: System.Windows.Data.BindingBase.StringFormat\n- uid: System.Windows.Data.BindingBase.TargetNullValue\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: TargetNullValue\n  nameWithType: BindingBase.TargetNullValue\n  fullName: System.Windows.Data.BindingBase.TargetNullValue\n- uid: System.Windows.Data.BindingBase.BindingGroupName*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: BindingGroupName\n  nameWithType: BindingBase.BindingGroupName\n- uid: System.Windows.Data.BindingBase.Delay*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: Delay\n  nameWithType: BindingBase.Delay\n- uid: System.Windows.Data.BindingBase.FallbackValue*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: FallbackValue\n  nameWithType: BindingBase.FallbackValue\n- uid: System.Windows.Data.BindingBase.ProvideValue*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: ProvideValue\n  nameWithType: BindingBase.ProvideValue\n- uid: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: ShouldSerializeFallbackValue\n  nameWithType: BindingBase.ShouldSerializeFallbackValue\n- uid: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: ShouldSerializeTargetNullValue\n  nameWithType: BindingBase.ShouldSerializeTargetNullValue\n- uid: System.Windows.Data.BindingBase.StringFormat*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: StringFormat\n  nameWithType: BindingBase.StringFormat\n- uid: System.Windows.Data.BindingBase.TargetNullValue*\n  parent: System.Windows.Data.BindingBase\n  isExternal: false\n  name: TargetNullValue\n  nameWithType: BindingBase.TargetNullValue\n"}