{"nodes":[{"pos":[492,561],"content":"Defines a set of rules for authorizing a user, given a set of claims.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a set of rules for authorizing a user, given a set of claims.","pos":[0,69]}]},{"pos":[574,2197],"content":"Implement the IAuthorizationPolicy interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.       Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.","needQuote":false,"needEscape":true,"nodes":[{"content":"Implement the IAuthorizationPolicy interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.       Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.","pos":[0,1621],"nodes":[{"content":"Implement the IAuthorizationPolicy interface to add or map one set of claims to another.","pos":[0,88]},{"content":"An authorization policy examines a set of claims and adds additional claims based on the current set.","pos":[89,190]},{"content":"For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the &lt;xref:System.IdentityModel.Policy.EvaluationContext&gt;.","pos":[191,431],"source":" For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>."},{"content":"Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the &lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt; class to do so.","pos":[438,610],"source":"       Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so."},{"content":"The &lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt; calls the &lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt; method for each authorization policy in effect.","pos":[611,795],"source":" The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect."},{"content":"The &lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt; method determines whether additional claims should be added for the user, based on the current context.","pos":[796,971],"source":" The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context."},{"content":"An authorization policy's &lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt; method may be called multiple times, as claims are added to the &lt;xref:System.IdentityModel.Policy.EvaluationContext&gt; by other authorization policies.","pos":[972,1215],"source":" An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies."},{"content":"When all authorization policies in effect are done, the &lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt; class makes authorization decisions based upon the final set of claims.","pos":[1216,1398],"source":" When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims."},{"content":"The &lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt; class then creates an &lt;xref:System.IdentityModel.Policy.AuthorizationContext&gt; that contains an immutable set of claims that reflects these authorization decisions.","pos":[1399,1621],"source":" The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions."}]}]},{"pos":[3231,3309],"content":"Evaluates whether a user meets the requirements for this authorization policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Evaluates whether a user meets the requirements for this authorization policy.","pos":[0,78]}]},{"pos":[3322,3878],"content":"> [!NOTE] >  Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the Evaluate method to be called multiple times by different threads.       Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the Evaluate method. If a state object is set inside a given call to the Evaluate method, the same object instance is passed to each and every subsequent call to the Evaluate method in the current evaluation process.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  Implementers of the &lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt; interface should expect the Evaluate method to be called multiple times by different threads.","pos":[0,182],"source":"> [!NOTE] >  Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the Evaluate method to be called multiple times by different threads."},{"content":"Implementers of the &lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt; interface can use the <ph id=\"ph1\">`state`</ph> parameter to track state between calls to the Evaluate method.","pos":[189,357],"source":"       Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the Evaluate method."},{"content":"If a state object is set inside a given call to the Evaluate method, the same object instance is passed to each and every subsequent call to the Evaluate method in the current evaluation process.","pos":[358,553]}]},{"pos":[4348,4486],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Policy.EvaluationContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the claim set that the authorization policy evaluates.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.IdentityModel.Policy.EvaluationContext\"></xref> that contains the claim set that the authorization policy evaluates."},{"pos":[4548,4655],"content":"A <xref:System.Object>, passed by reference that represents the custom state for this authorization policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Object&gt;, passed by reference that represents the custom state for this authorization policy.","pos":[0,107],"source":"A <xref:System.Object>, passed by reference that represents the custom state for this authorization policy."}]},{"pos":[4714,5090],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the Evaluate method for this authorization policy must be called if additional claims are added by other authorization policies to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">evaluationContext</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to state no additional evaluation is required by this authorization policy.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the Evaluate method for this authorization policy must be called if additional claims are added by other authorization policies to <code>evaluationContext</code>; otherwise, <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to state no additional evaluation is required by this authorization policy."},{"pos":[5592,5664],"content":"Gets a claim set that represents the issuer of the authorization policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a claim set that represents the issuer of the authorization policy.","pos":[0,72]}]},{"pos":[5828,5943],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Claims.ClaimSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the issuer of the authorization policy.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the authorization policy."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy\n  id: IAuthorizationPolicy\n  children:\n  - System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  - System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  langs:\n  - csharp\n  name: IAuthorizationPolicy\n  nameWithType: IAuthorizationPolicy\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy\n  type: Interface\n  summary: Defines a set of rules for authorizing a user, given a set of claims.\n  remarks: \"Implement the IAuthorizationPolicy interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.  \\n  \\n Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.\"\n  example:\n  - >-\n    [!code-cs[C_IAuthorizationPolicy#1](~/add/codesnippet/csharp/t-system.identitymodel.p_1_1.cs)]\n     [!code-vb[C_IAuthorizationPolicy#1](~/add/codesnippet/visualbasic/t-system.identitymodel.p_1_1.vb)]\n  syntax:\n    content: 'public interface IAuthorizationPolicy : System.IdentityModel.Policy.IAuthorizationComponent'\n  implements:\n  - System.IdentityModel.Policy.IAuthorizationComponent\n  platform:\n  - net462\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  id: Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  langs:\n  - csharp\n  name: Evaluate(EvaluationContext,Object)\n  nameWithType: IAuthorizationPolicy.Evaluate(EvaluationContext,Object)\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(EvaluationContext,Object)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Policy\n  summary: Evaluates whether a user meets the requirements for this authorization policy.\n  remarks: \"> [!NOTE]\\n>  Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the Evaluate method to be called multiple times by different threads.  \\n  \\n Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the Evaluate method. If a state object is set inside a given call to the Evaluate method, the same object instance is passed to each and every subsequent call to the Evaluate method in the current evaluation process.\"\n  example:\n  - >-\n    [!code-cs[C_IAuthorizationPolicy#2](~/add/codesnippet/csharp/b64090c9-1ef7-4f2c-956c-_1.cs)]\n     [!code-vb[C_IAuthorizationPolicy#2](~/add/codesnippet/visualbasic/b64090c9-1ef7-4f2c-956c-_1.vb)]\n  syntax:\n    content: public bool Evaluate (System.IdentityModel.Policy.EvaluationContext evaluationContext, ref object state);\n    parameters:\n    - id: evaluationContext\n      type: System.IdentityModel.Policy.EvaluationContext\n      description: An <xref href=\"System.IdentityModel.Policy.EvaluationContext\"></xref> that contains the claim set that the authorization policy evaluates.\n    - id: state\n      type: System.Object\n      description: A <xref:System.Object>, passed by reference that represents the custom state for this authorization policy.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the Evaluate method for this authorization policy must be called if additional claims are added by other authorization policies to <code>evaluationContext</code>; otherwise, <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to state no additional evaluation is required by this authorization policy.\n  overload: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  id: Issuer\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  langs:\n  - csharp\n  name: Issuer\n  nameWithType: IAuthorizationPolicy.Issuer\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Policy\n  summary: Gets a claim set that represents the issuer of the authorization policy.\n  syntax:\n    content: public System.IdentityModel.Claims.ClaimSet Issuer { get; }\n    return:\n      type: System.IdentityModel.Claims.ClaimSet\n      description: A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the authorization policy.\n  overload: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Evaluate(EvaluationContext,Object)\n  nameWithType: IAuthorizationPolicy.Evaluate(EvaluationContext,Object)\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(EvaluationContext,Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Policy.EvaluationContext\n  parent: System.IdentityModel.Policy\n  isExternal: false\n  name: EvaluationContext\n  nameWithType: EvaluationContext\n  fullName: System.IdentityModel.Policy.EvaluationContext\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Issuer\n  nameWithType: IAuthorizationPolicy.Issuer\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n- uid: System.IdentityModel.Claims.ClaimSet\n  parent: System.IdentityModel.Claims\n  isExternal: false\n  name: ClaimSet\n  nameWithType: ClaimSet\n  fullName: System.IdentityModel.Claims.ClaimSet\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate*\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Evaluate\n  nameWithType: IAuthorizationPolicy.Evaluate\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer*\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Issuer\n  nameWithType: IAuthorizationPolicy.Issuer\n"}