{"nodes":[{"pos":[1267,1362],"content":"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.","pos":[0,95]}]},{"pos":[1375,3210],"content":"BitVector32 is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a BitVector32 uses only 32 bits.       A BitVector32 structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the BitVector32 and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same BitVector32.       Some members can be used for a BitVector32 that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a BitVector32 that is set up as bit flags.       Using a mask on a BitVector32 that is set up as sections might cause unexpected results.","needQuote":false,"needEscape":true,"nodes":[{"content":"BitVector32 is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a BitVector32 uses only 32 bits.       A BitVector32 structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the BitVector32 and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same BitVector32.       Some members can be used for a BitVector32 that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a BitVector32 that is set up as bit flags.       Using a mask on a BitVector32 that is set up as sections might cause unexpected results.","pos":[0,1829],"nodes":[{"content":"BitVector32 is more efficient than &lt;xref:System.Collections.BitArray&gt; for Boolean values and small integers that are used internally.","pos":[0,133],"source":"BitVector32 is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally."},{"content":"A &lt;xref:System.Collections.BitArray&gt; can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires.","pos":[134,282],"source":" A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires."},{"content":"In contrast, a BitVector32 uses only 32 bits.","pos":[283,328]},{"content":"A BitVector32 structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both.","pos":[335,459]},{"content":"A &lt;xref:System.Collections.Specialized.BitVector32.Section&gt; is a window into the BitVector32 and is composed of the smallest number of consecutive bits that can contain the maximum value specified in &lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;.","pos":[460,727],"source":" A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the BitVector32 and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>."},{"content":"For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.","pos":[728,876]},{"content":"You can create a &lt;xref:System.Collections.Specialized.BitVector32.Section&gt; with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same BitVector32.","pos":[877,1077],"source":" You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same BitVector32."},{"content":"Some members can be used for a BitVector32 that is set up as sections, while other members can be used for one that is set up as bit flags.","pos":[1084,1223]},{"content":"For example, the &lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName&gt; property is the indexer for a BitVector32 that is set up as sections, and the &lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName&gt; property is the indexer for a BitVector32 that is set up as bit flags.","pos":[1224,1555],"source":" For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as bit flags."},{"content":"&lt;xref:System.Collections.Specialized.BitVector32.CreateMask%2A&gt; creates a series of masks that can be used to access individual bits in a BitVector32 that is set up as bit flags.","pos":[1556,1734],"source":" <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a BitVector32 that is set up as bit flags."},{"content":"Using a mask on a BitVector32 that is set up as sections might cause unexpected results.","pos":[1741,1829]}]}]},{"pos":[4792,5021],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure containing the data represented in an existing <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an existing <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure."},{"pos":[5033,5071],"content":"This constructor is an O(1) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]},{"pos":[5272,5379],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that contains the data to copy.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure that contains the data to copy."},{"pos":[5901,6055],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure containing the data represented in an integer.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an integer."},{"pos":[6067,6105],"content":"This constructor is an O(1) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]},{"pos":[6235,6343],"content":"An integer representing the data of the new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer representing the data of the new <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[6822,7008],"content":"Creates the first mask in a series of masks that can be used to retrieve individual bits in a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is set up as bit flags.","needQuote":true,"needEscape":true,"source":"Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags."},{"pos":[7021,7643],"content":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.       Multiple masks can be created to refer to the same bit flag.       The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.       Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use <ph id=\"ph1\">`CreateMask()`</ph> to create the first mask in a series and <ph id=\"ph2\">`CreateMask(int)`</ph> for all subsequent masks.","pos":[0,103],"source":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks."},{"content":"Multiple masks can be created to refer to the same bit flag.","pos":[110,170]},{"content":"The resulting mask isolates only one bit flag in the &lt;xref:System.Collections.Specialized.BitVector32&gt;.","pos":[177,280],"source":"       The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>."},{"content":"You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the &lt;xref:System.Collections.Specialized.BitVector32&gt;.","pos":[281,441],"source":" You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>."},{"content":"Using a mask on a &lt;xref:System.Collections.Specialized.BitVector32&gt; that is set up as sections might cause unexpected results.","pos":[448,574],"source":"       Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."},{"content":"This method is an O(1) operation.","pos":[581,614]}]},{"pos":[8252,8363],"content":"A mask that isolates the first bit flag in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A mask that isolates the first bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[8890,9109],"content":"Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is set up as bit flags.","needQuote":true,"needEscape":true,"source":"Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags."},{"pos":[9122,9744],"content":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.       Multiple masks can be created to refer to the same bit flag.       The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.       Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use <ph id=\"ph1\">`CreateMask()`</ph> to create the first mask in a series and <ph id=\"ph2\">`CreateMask(int)`</ph> for all subsequent masks.","pos":[0,103],"source":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks."},{"content":"Multiple masks can be created to refer to the same bit flag.","pos":[110,170]},{"content":"The resulting mask isolates only one bit flag in the &lt;xref:System.Collections.Specialized.BitVector32&gt;.","pos":[177,280],"source":"       The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>."},{"content":"You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the &lt;xref:System.Collections.Specialized.BitVector32&gt;.","pos":[281,441],"source":" You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>."},{"content":"Using a mask on a &lt;xref:System.Collections.Specialized.BitVector32&gt; that is set up as sections might cause unexpected results.","pos":[448,574],"source":"       Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."},{"content":"This method is an O(1) operation.","pos":[581,614]}]},{"pos":[10369,10415],"content":"The mask that indicates the previous bit flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"The mask that indicates the previous bit flag.","pos":[0,46]}]},{"pos":[10472,10628],"content":"A mask that isolates the bit flag following the one that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">previous</ph><ept id=\"p1\">&lt;/code&gt;</ept> points to in <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A mask that isolates the bit flag following the one that <code>previous</code> points to in <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[10820,10941],"content":"<ph id=\"ph1\">&lt;code&gt;previous&lt;/code&gt;</ph> indicates the last bit flag in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>previous</code> indicates the last bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[11399,11527],"content":"Creates the first <xref:System.Collections.Specialized.BitVector32.Section> in a series of sections that contain small integers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the first &lt;xref:System.Collections.Specialized.BitVector32.Section&gt; in a series of sections that contain small integers.","pos":[0,128],"source":"Creates the first <xref:System.Collections.Specialized.BitVector32.Section> in a series of sections that contain small integers."}]},{"pos":[11540,12413],"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in CreateSection. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.       If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in CreateSection. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.       If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.       This method is an O(1) operation.","pos":[0,869],"nodes":[{"content":"A &lt;xref:System.Collections.Specialized.BitVector32.Section&gt; is a window into the &lt;xref:System.Collections.Specialized.BitVector32&gt; and is composed of the smallest number of consecutive bits that can contain the maximum value specified in CreateSection.","pos":[0,252],"source":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in CreateSection."},{"content":"For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.","pos":[253,401]},{"content":"You can create a &lt;xref:System.Collections.Specialized.BitVector32.Section&gt; with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same &lt;xref:System.Collections.Specialized.BitVector32&gt;.","pos":[402,640],"source":" You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>."},{"content":"If sections already exist in the &lt;xref:System.Collections.Specialized.BitVector32&gt;, those sections are still accessible; however, overlapping sections might cause unexpected results.","pos":[647,829],"source":"       If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results."},{"content":"This method is an O(1) operation.","pos":[836,869]}]}]},{"pos":[13135,13262],"content":"A 16-bit signed integer that specifies the maximum value for the new <xref:System.Collections.Specialized.BitVector32.Section>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 16-bit signed integer that specifies the maximum value for the new &lt;xref:System.Collections.Specialized.BitVector32.Section&gt;.","pos":[0,127],"source":"A 16-bit signed integer that specifies the maximum value for the new <xref:System.Collections.Specialized.BitVector32.Section>."}]},{"pos":[13357,13475],"content":"A &lt;xref:System.Collections.Specialized.BitVector32.Section&gt; that can hold a number from zero to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Collections.Specialized.BitVector32.Section> that can hold a number from zero to <code>maxValue</code>."},{"pos":[13654,13691],"content":"<ph id=\"ph1\">&lt;code&gt;maxValue&lt;/code&gt;</ph> is less than 1.","needQuote":true,"needEscape":true,"source":"<code>maxValue</code> is less than 1."},{"pos":[14560,14572],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14674,14686],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14781,14793],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15246,15346],"content":"Gets the value of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an integer.","needQuote":true,"needEscape":true,"source":"Gets the value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer."},{"pos":[15359,15563],"content":"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property.       Retrieving the value of this property is an O(1) operation.","pos":[0,202],"nodes":[{"content":"To access the value of the individual sections or bit flags, use the &lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt; property.","pos":[0,136],"source":"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[143,202]}]}]},{"pos":[15669,15764],"content":"The value of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an integer.","needQuote":true,"needEscape":true,"source":"The value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer."},{"pos":[16270,16390],"content":"Determines whether the specified object is equal to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[16403,16741],"content":"The object `o` is considered equal to the <xref:System.Collections.Specialized.BitVector32> if the type of `o` is compatible with the <xref:System.Collections.Specialized.BitVector32> type and if the value of `o` is equal to the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The object <ph id=\"ph1\">`o`</ph> is considered equal to the &lt;xref:System.Collections.Specialized.BitVector32&gt; if the type of <ph id=\"ph2\">`o`</ph> is compatible with the &lt;xref:System.Collections.Specialized.BitVector32&gt; type and if the value of <ph id=\"ph3\">`o`</ph> is equal to the value of &lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;.","pos":[0,296],"source":"The object `o` is considered equal to the <xref:System.Collections.Specialized.BitVector32> if the type of `o` is compatible with the <xref:System.Collections.Specialized.BitVector32> type and if the value of `o` is equal to the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>."},{"content":"This method is an O(1) operation.","pos":[303,336]}]},{"pos":[17465,17568],"content":"The object to compare with the current <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to compare with the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[17627,17867],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified object is equal to the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18352,18450],"content":"Serves as a hash function for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Serves as a hash function for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[18463,18845],"content":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.       This method is an O(1) operation.","pos":[0,380],"nodes":[{"content":"The hash code of a &lt;xref:System.Collections.Specialized.BitVector32&gt; is based on the value of &lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;.","pos":[0,152],"source":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>."},{"content":"Two instances of &lt;xref:System.Collections.Specialized.BitVector32&gt; with the same value for &lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt; will also generate the same hash code.","pos":[153,340],"source":" Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code."},{"content":"This method is an O(1) operation.","pos":[347,380]}]}]},{"pos":[18981,19065],"content":"A hash code for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A hash code for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[19901,19913],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19970,19982],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20475,20546],"content":"Gets or sets the state of the bit flag indicated by the specified mask.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the state of the bit flag indicated by the specified mask.","pos":[0,71]}]},{"pos":[20559,21279],"content":"The Item [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the Item [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.       Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Item [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the Item [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.       Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,714],"nodes":[{"content":"The Item [Section] property is the indexer for a &lt;xref:System.Collections.Specialized.BitVector32&gt; that is set up as sections, and the Item [int] property is the indexer for a &lt;xref:System.Collections.Specialized.BitVector32&gt; that is set up as bit flags.","pos":[0,254],"source":"The Item [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the Item [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags."},{"content":"Using this property on a &lt;xref:System.Collections.Specialized.BitVector32&gt; that is set up as sections might cause unexpected results.","pos":[261,394],"source":"       Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."},{"content":"The C# language uses the  keyword to define the indexers instead of implementing the Item property.","pos":[401,500]},{"content":"Visual Basic implements Item as a default property, which provides the same indexing functionality.","pos":[501,600]},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[607,714]}]}]},{"pos":[21418,21462],"content":"A mask that indicates the bit to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"A mask that indicates the bit to get or set.","pos":[0,44]}]},{"pos":[21521,21693],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified bit flag is on (1); otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified bit flag is on (1); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22161,22270],"content":"Returns a string that represents the current <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[22283,22405],"content":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.       This method is an O(1) operation.","pos":[0,120],"nodes":[{"content":"This method overrides &lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;.","pos":[0,80],"source":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>."},{"content":"This method is an O(1) operation.","pos":[87,120]}]}]},{"pos":[22542,22643],"content":"A string that represents the current <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[23236,23347],"content":"Returns a string that represents the specified <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[23359,23392],"content":"This method is an O(1) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]},{"pos":[23604,23685],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to represent.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Specialized.BitVector32\"></xref> to represent."},{"pos":[23743,23846],"content":"A string that represents the specified <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.BitVector32\n  id: BitVector32\n  children:\n  - System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  - System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  - System.Collections.Specialized.BitVector32.CreateMask\n  - System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Data\n  - System.Collections.Specialized.BitVector32.Equals(System.Object)\n  - System.Collections.Specialized.BitVector32.GetHashCode\n  - System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Item(System.Int32)\n  - System.Collections.Specialized.BitVector32.ToString\n  - System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  langs:\n  - csharp\n  name: BitVector32\n  nameWithType: BitVector32\n  fullName: System.Collections.Specialized.BitVector32\n  type: Struct\n  summary: Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.\n  remarks: \"BitVector32 is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a BitVector32 uses only 32 bits.  \\n  \\n A BitVector32 structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the BitVector32 and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same BitVector32.  \\n  \\n Some members can be used for a BitVector32 that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a BitVector32 that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a BitVector32 that is set up as bit flags.  \\n  \\n Using a mask on a BitVector32 that is set up as sections might cause unexpected results.\"\n  example:\n  - \"The following code example uses a BitVector32 as a collection of bit flags.  \\n  \\n [!code-cs[System.Collections.Specialized.BitVector32_BitFlags#1](~/add/codesnippet/csharp/t-system.collections.spe_10_1.cs)]\\n [!code-vb[System.Collections.Specialized.BitVector32_BitFlags#1](~/add/codesnippet/visualbasic/t-system.collections.spe_10_1.vb)]\\n [!code-cpp[System.Collections.Specialized.BitVector32_BitFlags#1](~/add/codesnippet/cpp/t-system.collections.spe_10_1.cpp)]  \\n  \\n The following code example uses a BitVector32 as a collection of sections.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/add/codesnippet/cpp/t-system.collections.spe_10_2.cpp)]\\n [!code-cs[System.Collections.Specialized.BitVector32_Sections#1](~/add/codesnippet/csharp/t-system.collections.spe_10_2.cs)]\\n [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/add/codesnippet/visualbasic/t-system.collections.spe_10_2.vb)]\"\n  syntax:\n    content: public struct BitVector32\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  id: '#ctor(System.Collections.Specialized.BitVector32)'\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: BitVector32(BitVector32)\n  nameWithType: BitVector32.BitVector32(BitVector32)\n  fullName: System.Collections.Specialized.BitVector32.BitVector32(BitVector32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an existing <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure.\n  remarks: This constructor is an O(1) operation.\n  syntax:\n    content: public BitVector32 (System.Collections.Specialized.BitVector32 value);\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32\n      description: A <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure that contains the data to copy.\n  overload: System.Collections.Specialized.BitVector32.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: BitVector32(Int32)\n  nameWithType: BitVector32.BitVector32(Int32)\n  fullName: System.Collections.Specialized.BitVector32.BitVector32(Int32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an integer.\n  remarks: This constructor is an O(1) operation.\n  syntax:\n    content: public BitVector32 (int data);\n    parameters:\n    - id: data\n      type: System.Int32\n      description: An integer representing the data of the new <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.CreateMask\n  id: CreateMask\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateMask()\n  nameWithType: BitVector32.CreateMask()\n  fullName: System.Collections.Specialized.BitVector32.CreateMask()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags.\n  remarks: \"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.  \\n  \\n Multiple masks can be created to refer to the same bit flag.  \\n  \\n The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create and use masks.  \\n  \\n [!code-cs[System.Collections.Specialized.BitVector32.CreateMasks#1](~/add/codesnippet/csharp/m-system.collections.spe_3_1.cs)]\\n [!code-cpp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/add/codesnippet/cpp/m-system.collections.spe_3_1.cpp)]\\n [!code-vb[System.Collections.Specialized.BitVector32.CreateMasks#1](~/add/codesnippet/visualbasic/m-system.collections.spe_3_1.vb)]\"\n  syntax:\n    content: public static int CreateMask ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A mask that isolates the first bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.CreateMask*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  id: CreateMask(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateMask(Int32)\n  nameWithType: BitVector32.CreateMask(Int32)\n  fullName: System.Collections.Specialized.BitVector32.CreateMask(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags.\n  remarks: \"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.  \\n  \\n Multiple masks can be created to refer to the same bit flag.  \\n  \\n The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create and use masks.  \\n  \\n [!code-cs[System.Collections.Specialized.BitVector32.CreateMasks#1](~/add/codesnippet/csharp/m-system.collections.spe_5_1.cs)]\\n [!code-cpp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/add/codesnippet/cpp/m-system.collections.spe_5_1.cpp)]\\n [!code-vb[System.Collections.Specialized.BitVector32.CreateMasks#1](~/add/codesnippet/visualbasic/m-system.collections.spe_5_1.vb)]\"\n  syntax:\n    content: public static int CreateMask (int previous);\n    parameters:\n    - id: previous\n      type: System.Int32\n      description: The mask that indicates the previous bit flag.\n    return:\n      type: System.Int32\n      description: A mask that isolates the bit flag following the one that <code>previous</code> points to in <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.CreateMask*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>previous</code> indicates the last bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  id: CreateSection(System.Int16)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateSection(Int16)\n  nameWithType: BitVector32.CreateSection(Int16)\n  fullName: System.Collections.Specialized.BitVector32.CreateSection(Int16)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates the first <xref:System.Collections.Specialized.BitVector32.Section> in a series of sections that contain small integers.\n  remarks: \"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in CreateSection. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example uses a <xref:System.Collections.Specialized.BitVector32> as a collection of sections.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/add/codesnippet/cpp/m-system.collections.spe_18_1.cpp)]\\n [!code-cs[System.Collections.Specialized.BitVector32_Sections#1](~/add/codesnippet/csharp/m-system.collections.spe_18_1.cs)]\\n [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/add/codesnippet/visualbasic/m-system.collections.spe_18_1.vb)]\"\n  syntax:\n    content: public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue);\n    parameters:\n    - id: maxValue\n      type: System.Int16\n      description: A 16-bit signed integer that specifies the maximum value for the new <xref:System.Collections.Specialized.BitVector32.Section>.\n    return:\n      type: System.Collections.Specialized.BitVector32.Section\n      description: A <xref:System.Collections.Specialized.BitVector32.Section> that can hold a number from zero to <code>maxValue</code>.\n  overload: System.Collections.Specialized.BitVector32.CreateSection*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>maxValue</code> is less than 1.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  id: CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateSection(Int16,BitVector32+Section)\n  nameWithType: BitVector32.CreateSection(Int16,BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32.CreateSection(Int16,BitVector32+Section)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue, System.Collections.Specialized.BitVector32.Section previous);\n    parameters:\n    - id: maxValue\n      type: System.Int16\n      description: To be added.\n    - id: previous\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    return:\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.CreateSection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Data\n  id: Data\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Data\n  nameWithType: BitVector32.Data\n  fullName: System.Collections.Specialized.BitVector32.Data\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets the value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer.\n  remarks: \"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public int Data { get; }\n    return:\n      type: System.Int32\n      description: The value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer.\n  overload: System.Collections.Specialized.BitVector32.Data*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: BitVector32.Equals(Object)\n  fullName: System.Collections.Specialized.BitVector32.Equals(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Determines whether the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: \"The object `o` is considered equal to the <xref:System.Collections.Specialized.BitVector32> if the type of `o` is compatible with the <xref:System.Collections.Specialized.BitVector32> type and if the value of `o` is equal to the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example compares a <xref:System.Collections.Specialized.BitVector32> with another <xref:System.Collections.Specialized.BitVector32> and with an <xref:System.Int32>.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32.Equals#1](~/add/codesnippet/cpp/m-system.collections.spe_34_1.cpp)]\\n [!code-cs[System.Collections.Specialized.BitVector32.Equals#1](~/add/codesnippet/csharp/m-system.collections.spe_34_1.cs)]\\n [!code-vb[System.Collections.Specialized.BitVector32.Equals#1](~/add/codesnippet/visualbasic/m-system.collections.spe_34_1.vb)]\"\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to compare with the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.GetHashCode\n  id: GetHashCode\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: BitVector32.GetHashCode()\n  fullName: System.Collections.Specialized.BitVector32.GetHashCode()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Serves as a hash function for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: \"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  id: Item(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Item(BitVector32+Section)\n  nameWithType: BitVector32.Item(BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32.Item(BitVector32+Section)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public int this[System.Collections.Specialized.BitVector32.Section section] { get; set; }\n    parameters:\n    - id: section\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: BitVector32.Item(Int32)\n  fullName: System.Collections.Specialized.BitVector32.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the state of the bit flag indicated by the specified mask.\n  remarks: \"The Item [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the Item [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \\n  \\n Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: public bool this[int bit] { get; set; }\n    parameters:\n    - id: bit\n      type: System.Int32\n      description: A mask that indicates the bit to get or set.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified bit flag is on (1); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.ToString\n  id: ToString\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: BitVector32.ToString()\n  fullName: System.Collections.Specialized.BitVector32.ToString()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns a string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: \"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  id: ToString(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: ToString(BitVector32)\n  nameWithType: BitVector32.ToString(BitVector32)\n  fullName: System.Collections.Specialized.BitVector32.ToString(BitVector32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns a string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: This method is an O(1) operation.\n  syntax:\n    content: public static string ToString (System.Collections.Specialized.BitVector32 value);\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32\n      description: The <xref href=\"System.Collections.Specialized.BitVector32\"></xref> to represent.\n    return:\n      type: System.String\n      description: A string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: BitVector32(BitVector32)\n  nameWithType: BitVector32.BitVector32(BitVector32)\n  fullName: System.Collections.Specialized.BitVector32.BitVector32(BitVector32)\n- uid: System.Collections.Specialized.BitVector32\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32\n  nameWithType: BitVector32\n  fullName: System.Collections.Specialized.BitVector32\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: BitVector32(Int32)\n  nameWithType: BitVector32.BitVector32(Int32)\n  fullName: System.Collections.Specialized.BitVector32.BitVector32(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Specialized.BitVector32.CreateMask\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateMask()\n  nameWithType: BitVector32.CreateMask()\n  fullName: System.Collections.Specialized.BitVector32.CreateMask()\n- uid: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateMask(Int32)\n  nameWithType: BitVector32.CreateMask(Int32)\n  fullName: System.Collections.Specialized.BitVector32.CreateMask(Int32)\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateSection(Int16)\n  nameWithType: BitVector32.CreateSection(Int16)\n  fullName: System.Collections.Specialized.BitVector32.CreateSection(Int16)\n- uid: System.Collections.Specialized.BitVector32.Section\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32+Section\n  nameWithType: BitVector32+Section\n  fullName: System.Collections.Specialized.BitVector32+Section\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateSection(Int16,BitVector32+Section)\n  nameWithType: BitVector32.CreateSection(Int16,BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32.CreateSection(Int16,BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Data\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Data\n  nameWithType: BitVector32.Data\n  fullName: System.Collections.Specialized.BitVector32.Data\n- uid: System.Collections.Specialized.BitVector32.Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: BitVector32.Equals(Object)\n  fullName: System.Collections.Specialized.BitVector32.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Specialized.BitVector32.GetHashCode\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: BitVector32.GetHashCode()\n  fullName: System.Collections.Specialized.BitVector32.GetHashCode()\n- uid: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Item(BitVector32+Section)\n  nameWithType: BitVector32.Item(BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32.Item(BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Item(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: BitVector32.Item(Int32)\n  fullName: System.Collections.Specialized.BitVector32.Item(Int32)\n- uid: System.Collections.Specialized.BitVector32.ToString\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: ToString()\n  nameWithType: BitVector32.ToString()\n  fullName: System.Collections.Specialized.BitVector32.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: ToString(BitVector32)\n  nameWithType: BitVector32.ToString(BitVector32)\n  fullName: System.Collections.Specialized.BitVector32.ToString(BitVector32)\n- uid: System.Collections.Specialized.BitVector32.#ctor*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: BitVector32\n  nameWithType: BitVector32.BitVector32\n- uid: System.Collections.Specialized.BitVector32.CreateMask*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateMask\n  nameWithType: BitVector32.CreateMask\n- uid: System.Collections.Specialized.BitVector32.CreateSection*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateSection\n  nameWithType: BitVector32.CreateSection\n- uid: System.Collections.Specialized.BitVector32.Data*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Data\n  nameWithType: BitVector32.Data\n- uid: System.Collections.Specialized.BitVector32.Equals*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Equals\n  nameWithType: BitVector32.Equals\n- uid: System.Collections.Specialized.BitVector32.GetHashCode*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: GetHashCode\n  nameWithType: BitVector32.GetHashCode\n- uid: System.Collections.Specialized.BitVector32.Item*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Item\n  nameWithType: BitVector32.Item\n- uid: System.Collections.Specialized.BitVector32.ToString*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: ToString\n  nameWithType: BitVector32.ToString\n"}