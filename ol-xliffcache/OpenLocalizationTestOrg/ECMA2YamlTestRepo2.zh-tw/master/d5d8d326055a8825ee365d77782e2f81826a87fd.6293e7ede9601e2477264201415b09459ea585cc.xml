{"nodes":[{"pos":[592,728],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class for different classes of filters used to query messages.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for different classes of filters used to query messages."},{"pos":[741,2679],"content":"MessageFilter is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages. Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message. A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.       Filters are stored in a filter table that implements <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>. Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter. The <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter.       The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change. The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.       The following classes implement the `abstract`MessageFilter class:      -   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match.      -   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> matches all messages.      -   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> matches none of the messages.      -   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions.      -   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address.       <xref:System.ServiceModel.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners.","needQuote":false,"needEscape":true,"nodes":[{"content":"MessageFilter is an <ph id=\"ph1\">`abstract`</ph> class that developers implement in order to specify the criteria to use for inspecting messages.","pos":[0,127],"source":"MessageFilter is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages."},{"content":"Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message.","pos":[128,274]},{"content":"A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.","pos":[275,447]},{"content":"Filters are stored in a filter table that implements &lt;xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601&gt;.","pos":[454,569],"source":"       Filters are stored in a filter table that implements <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>."},{"content":"Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter.","pos":[570,718]},{"content":"The &lt;xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A&gt; methods are used to determine if a message satisfies a filter.","pos":[719,846],"source":" The <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter."},{"content":"The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change.","pos":[853,989]},{"content":"The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.","pos":[990,1095]},{"content":"The following classes implement the <ph id=\"ph1\">`abstract`</ph>MessageFilter class:      -   &lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter&gt; uses an XPath 1.0 expression to specify the criteria for a match.","pos":[1102,1300],"source":"       The following classes implement the `abstract`MessageFilter class:      -   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match."},{"content":"-   &lt;xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter&gt; matches all messages.","pos":[1306,1391],"source":"      -   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> matches all messages."},{"content":"-   &lt;xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter&gt; matches none of the messages.","pos":[1397,1491],"source":"      -   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> matches none of the messages."},{"content":"-   &lt;xref:System.ServiceModel.Dispatcher.ActionMessageFilter&gt; tests whether the action of a message is one of a specified set of actions.","pos":[1497,1634],"source":"      -   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions."},{"content":"-   &lt;xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter&gt; tests whether a message satisfies a specified endpoint address.","pos":[1640,1774],"source":"      -   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address."},{"content":"&lt;xref:System.ServiceModel.Channels.ChannelListenerBase%601&gt; is an <ph id=\"ph1\">`abstract`</ph> base class that you can use for writing non-queuing listeners.","pos":[1781,1920],"source":"       <xref:System.ServiceModel.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners."}]},{"pos":[3735,3873],"content":"When called in a derived class, initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Dispatcher.MessageFilter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"When called in a derived class, initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.MessageFilter\"></xref> class."},{"pos":[3885,4024],"content":"The constructor is protected so that only filters that derive from <xref:System.ServiceModel.Dispatcher.MessageFilter> can be instantiated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The constructor is protected so that only filters that derive from &lt;xref:System.ServiceModel.Dispatcher.MessageFilter&gt; can be instantiated.","pos":[0,139],"source":"The constructor is protected so that only filters that derive from <xref:System.ServiceModel.Dispatcher.MessageFilter> can be instantiated."}]},{"pos":[4889,4901],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5499,5618],"content":"When overridden in a derived class, tests whether a message satisfies the filter criteria. The body cannot be examined.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, tests whether a message satisfies the filter criteria. The body cannot be examined.","pos":[0,119],"nodes":[{"content":"When overridden in a derived class, tests whether a message satisfies the filter criteria.","pos":[0,90]},{"content":"The body cannot be examined.","pos":[91,119]}]}]},{"pos":[5630,5690],"content":"This method cannot inspect the contents of the message body.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method cannot inspect the contents of the message body.","pos":[0,60]}]},{"pos":[5891,5954],"content":"The <xref:System.ServiceModel.Channels.Message> object to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.Message&gt; object to test.","pos":[0,63],"source":"The <xref:System.ServiceModel.Channels.Message> object to test."}]},{"pos":[6013,6237],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.ServiceModel.Channels.Message&gt; object satisfies the filter criteria; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.Message> object satisfies the filter criteria; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6841,6945],"content":"When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.","pos":[0,104]}]},{"pos":[6957,7447],"content":"The message must be fully buffered if the body is to be inspected by the filter. The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter. The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection. The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message must be fully buffered if the body is to be inspected by the filter. The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter. The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection. The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed.","pos":[0,490],"nodes":[{"content":"The message must be fully buffered if the body is to be inspected by the filter.","pos":[0,80]},{"content":"The body of the &lt;xref:System.ServiceModel.Channels.MessageBuffer&gt; is fully buffered and therefore can be inspected by a filter.","pos":[81,208],"source":" The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter."},{"content":"The body of a &lt;xref:System.ServiceModel.Channels.Message&gt; that has not been fully buffered may be consumed by the filter inspection.","pos":[209,341],"source":" The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection."},{"content":"The header element of a &lt;xref:System.ServiceModel.Channels.Message&gt; is automatically buffered and therefore can be inspected without being consumed.","pos":[342,490],"source":" The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed."}]}]},{"pos":[7658,7727],"content":"The <xref:System.ServiceModel.Channels.MessageBuffer> object to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.MessageBuffer&gt; object to test.","pos":[0,69],"source":"The <xref:System.ServiceModel.Channels.MessageBuffer> object to test."}]},{"pos":[7786,8016],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.ServiceModel.Channels.MessageBuffer&gt; object satisfies the filter criteria; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.MessageBuffer> object satisfies the filter criteria; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.MessageFilter\n  id: MessageFilter\n  children:\n  - System.ServiceModel.Dispatcher.MessageFilter.#ctor\n  - System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1\n  - System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)\n  - System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)\n  langs:\n  - csharp\n  name: MessageFilter\n  nameWithType: MessageFilter\n  fullName: System.ServiceModel.Dispatcher.MessageFilter\n  type: Class\n  summary: <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for different classes of filters used to query messages.\n  remarks: \"MessageFilter is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages. Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message. A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.  \\n  \\n Filters are stored in a filter table that implements <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>. Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter. The <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter.  \\n  \\n The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change. The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.  \\n  \\n The following classes implement the `abstract`MessageFilter class:  \\n  \\n-   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match.  \\n  \\n-   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> matches all messages.  \\n  \\n-   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> matches none of the messages.  \\n  \\n-   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions.  \\n  \\n-   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address.  \\n  \\n <xref:System.ServiceModel.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners.\"\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract]\n\n      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))]\n\n      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))]\n\n      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))]\n\n      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))]\n\n      public abstract class MessageFilter\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageFilter.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  langs:\n  - csharp\n  name: MessageFilter()\n  nameWithType: MessageFilter.MessageFilter()\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.MessageFilter()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: When called in a derived class, initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.MessageFilter\"></xref> class.\n  remarks: The constructor is protected so that only filters that derive from <xref:System.ServiceModel.Dispatcher.MessageFilter> can be instantiated.\n  syntax:\n    content: protected MessageFilter ();\n    parameters: []\n  overload: System.ServiceModel.Dispatcher.MessageFilter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1\n  id: CreateFilterTable``1\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  langs:\n  - csharp\n  name: CreateFilterTable()\n  nameWithType: MessageFilter.CreateFilterTable()\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: protected virtual System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData> ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Dispatcher.IMessageFilterTable{FilterData}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable<FilterData>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)\n  id: Match(System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  langs:\n  - csharp\n  name: Match(Message)\n  nameWithType: MessageFilter.Match(Message)\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: When overridden in a derived class, tests whether a message satisfies the filter criteria. The body cannot be examined.\n  remarks: This method cannot inspect the contents of the message body.\n  syntax:\n    content: public abstract bool Match (System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The <xref:System.ServiceModel.Channels.Message> object to test.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.Message> object satisfies the filter criteria; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Dispatcher.MessageFilter.Match*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)\n  id: Match(System.ServiceModel.Channels.MessageBuffer)\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  langs:\n  - csharp\n  name: Match(MessageBuffer)\n  nameWithType: MessageFilter.Match(MessageBuffer)\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(MessageBuffer)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.\n  remarks: The message must be fully buffered if the body is to be inspected by the filter. The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter. The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection. The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed.\n  syntax:\n    content: public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);\n    parameters:\n    - id: buffer\n      type: System.ServiceModel.Channels.MessageBuffer\n      description: The <xref:System.ServiceModel.Channels.MessageBuffer> object to test.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.MessageBuffer> object satisfies the filter criteria; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Dispatcher.MessageFilter.Match*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ServiceModel.Dispatcher.MessageFilter.#ctor\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: MessageFilter()\n  nameWithType: MessageFilter.MessageFilter()\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.MessageFilter()\n- uid: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: CreateFilterTable()\n  nameWithType: MessageFilter.CreateFilterTable()\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable()\n- uid: System.ServiceModel.Dispatcher.IMessageFilterTable{FilterData}\n  parent: System.ServiceModel.Dispatcher\n  isExternal: false\n  name: IMessageFilterTable<FilterData>\n  nameWithType: IMessageFilterTable<FilterData>\n  fullName: System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData>\n  spec.csharp:\n  - uid: System.ServiceModel.Dispatcher.IMessageFilterTable`1\n    name: IMessageFilterTable\n    nameWithType: IMessageFilterTable\n    fullName: IMessageFilterTable<FilterData>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: FilterData\n    name: FilterData\n    nameWithType: FilterData\n    fullName: FilterData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: Match(Message)\n  nameWithType: MessageFilter.Match(Message)\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(Message)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: Match(MessageBuffer)\n  nameWithType: MessageFilter.Match(MessageBuffer)\n  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(MessageBuffer)\n- uid: System.ServiceModel.Channels.MessageBuffer\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: MessageBuffer\n  nameWithType: MessageBuffer\n  fullName: System.ServiceModel.Channels.MessageBuffer\n- uid: System.ServiceModel.Dispatcher.MessageFilter.#ctor*\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: MessageFilter\n  nameWithType: MessageFilter.MessageFilter\n- uid: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable<FilterData>*\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: CreateFilterTable<FilterData>\n  nameWithType: MessageFilter.CreateFilterTable<FilterData>\n- uid: System.ServiceModel.Dispatcher.MessageFilter.Match*\n  parent: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: Match\n  nameWithType: MessageFilter.Match\n"}