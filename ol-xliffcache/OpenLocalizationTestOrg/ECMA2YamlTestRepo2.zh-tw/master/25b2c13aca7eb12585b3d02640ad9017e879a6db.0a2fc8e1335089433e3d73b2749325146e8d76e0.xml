{"nodes":[{"pos":[2339,2544],"content":"Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Provider.ITextProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <xref href=\"System.Windows.Automation.Provider.ITextProvider\"></xref>."},{"pos":[2557,2869],"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.       A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.","needQuote":false,"needEscape":true,"nodes":[{"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.       A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.","pos":[0,310],"nodes":[{"content":"Implemented on a UI Automation provider that must support the &lt;xref:System.Windows.Automation.TextPattern&gt; control pattern.","pos":[0,123],"source":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern."},{"content":"A &lt;xref:System.Windows.Automation.Text.TextPatternRange&gt; can represent an insertion point, a subset, or all of the text in a &lt;xref:System.Windows.Automation.TextPattern&gt; container.","pos":[130,310],"source":"       A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container."}]}]},{"pos":[3698,3805],"content":"Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.","pos":[0,107]}]},{"pos":[3818,3951],"content":"The text insertion point moves to the area of the new selection.       Providing a degenerate text range moves the insertion point.","needQuote":false,"needEscape":true,"nodes":[{"content":"The text insertion point moves to the area of the new selection.       Providing a degenerate text range moves the insertion point.","pos":[0,131],"nodes":[{"content":"The text insertion point moves to the area of the new selection.","pos":[0,64]},{"content":"Providing a degenerate text range moves the insertion point.","pos":[71,131]}]}]},{"pos":[4232,4477],"content":"If text provider does not support multiple, disjoint selections (that is, &lt;xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection*&gt; must have a value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"If text provider does not support multiple, disjoint selections (that is, <xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>)."},{"pos":[4910,5146],"content":"Returns a new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> identical to the original <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and inheriting all properties of the original.","needQuote":true,"needEscape":true,"source":"Returns a new <xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\"></xref> identical to the original <xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\"></xref> and inheriting all properties of the original."},{"pos":[5158,5223],"content":"The new range can be manipulated independently from the original.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new range can be manipulated independently from the original.","pos":[0,65]}]},{"pos":[5434,5637],"content":"The new text range. A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new text range.","pos":[0,19]},{"content":"A null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>) is never returned.","pos":[20,203],"source":" A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned."}]},{"pos":[6334,6617],"content":"Returns a value that indicates whether the span (the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> endpoint to the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoint) of a text range is the same as another text range.","needQuote":true,"needEscape":true,"source":"Returns a value that indicates whether the span (the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint to the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint) of a text range is the same as another text range."},{"pos":[6841,6864],"content":"A text range to compare","needQuote":true,"needEscape":true,"nodes":[{"content":"A text range to compare","pos":[0,23]}]},{"pos":[6923,7103],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the span of both text ranges is identical; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the span of both text ranges is identical; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7287,7357],"content":"If the range being compared does not come from the same text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the range being compared does not come from the same text provider.","pos":[0,70]}]},{"pos":[8383,8463],"content":"Returns a value that specifies whether two text ranges have identical endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that specifies whether two text ranges have identical endpoints.","pos":[0,80]}]},{"pos":[8844,9028],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoint of the caller.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the caller."},{"pos":[9136,9168],"content":"The target range for comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target range for comparison.","pos":[0,32]}]},{"pos":[9281,9465],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoint of the target.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the target."},{"pos":[9523,9828],"content":"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.       Returns zero if the caller's endpoint is at the same location as the target endpoint.       Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.       Returns zero if the caller's endpoint is at the same location as the target endpoint.       Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.","pos":[0,301],"nodes":[{"content":"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.","pos":[0,102]},{"content":"Returns zero if the caller's endpoint is at the same location as the target endpoint.","pos":[109,194]},{"content":"Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.","pos":[201,301]}]}]},{"pos":[10022,10084],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">targetRange</ph><ept id=\"p1\">&lt;/code&gt;</ept> is from a different text provider.","needQuote":true,"needEscape":true,"source":"If <code>targetRange</code> is from a different text provider."},{"pos":[10703,10753],"content":"Expands the text range to the specified text unit.","needQuote":true,"needEscape":true,"nodes":[{"content":"Expands the text range to the specified text unit.","pos":[0,50]}]},{"pos":[10766,13318],"content":"If the range is already an exact quantity of the specified units then it remains unchanged.       There is a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.      4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      > [!NOTE] >  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.       ExpandToEnclosingUnit respects both hidden and visible text.       ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>","needQuote":false,"needEscape":true,"nodes":[{"content":"If the range is already an exact quantity of the specified units then it remains unchanged.","pos":[0,91]},{"content":"There is a series of steps are involved behind the scenes in order for the &lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt; method to execute successfully.","pos":[98,273],"source":"       There is a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully."},{"content":"1.","pos":[279,281]},{"content":"The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.","pos":[283,552],"source":"  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous."},{"content":"This step is necessary to remove ambiguity in situations where a text range spans <ph id=\"ph1\">`unit`</ph> boundaries; for example, \"{The U}RL <bpt id=\"p1\">[</bpt>http://www.microsoft.com<ept id=\"p1\">](http://www.microsoft.com)</ept> is embedded in text\" where \"{\" and \"}\" are the text range endpoints.","pos":[553,799],"source":" This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints."},{"content":"2.","pos":[805,807]},{"content":"The resulting range is moved backward in the &lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt; to the beginning of the requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[809,977],"source":"  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary."},{"content":"3.","pos":[983,985]},{"content":"The range is moved forward or backward in the &lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt; by the requested number of <ph id=\"ph1\">`unit`</ph> boundaries.","pos":[987,1151],"source":"  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries."},{"content":"4.","pos":[1157,1159]},{"content":"The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[1161,1337],"source":"  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary."},{"content":"<bpt id=\"p1\">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-moveandexpand-examples.png \"</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p2\">\")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      &gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.","pos":[1344,1779],"source":"![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      > [!NOTE] >  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position."},{"content":"ExpandToEnclosingUnit respects both hidden and visible text.","pos":[1786,1846]},{"content":"ExpandToEnclosingUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.","pos":[1853,2051],"source":"       ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control."},{"content":"The order, from smallest unit to largest, is listed below.","pos":[2058,2116]},{"content":"-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;","pos":[2122,2508],"source":"      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>"}]},{"pos":[13527,13544],"content":"The textual unit.","needQuote":true,"needEscape":true,"nodes":[{"content":"The textual unit.","pos":[0,17]}]},{"pos":[14269,14336],"content":"Returns a text range subset that has the specified attribute value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a text range subset that has the specified attribute value.","pos":[0,67]}]},{"pos":[14348,14408],"content":"There is no differentiation between hidden and visible text.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no differentiation between hidden and visible text.","pos":[0,60]}]},{"pos":[14633,14661],"content":"The attribute to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute to search for.","pos":[0,28]}]},{"pos":[14723,14817],"content":"The attribute value to search for. This value must match the type specified for the attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute value to search for. This value must match the type specified for the attribute.","pos":[0,94],"nodes":[{"content":"The attribute value to search for.","pos":[0,34]},{"content":"This value must match the type specified for the attribute.","pos":[35,94]}]}]},{"pos":[14883,15091],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15189,15414],"content":"A text range having a matching attribute and attribute value; otherwise null (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).","needQuote":true,"needEscape":true,"source":"A text range having a matching attribute and attribute value; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."},{"pos":[16116,16177],"content":"Returns a text range subset that contains the specified text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a text range subset that contains the specified text.","pos":[0,61]}]},{"pos":[16189,16249],"content":"There is no differentiation between hidden and visible text.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no differentiation between hidden and visible text.","pos":[0,60]}]},{"pos":[16466,16496],"content":"The text string to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string to search for.","pos":[0,30]}]},{"pos":[16562,16770],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16838,16999],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if case should be ignored; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if case should be ignored; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17097,17302],"content":"A text range matching the specified text; otherwise null (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).","needQuote":true,"needEscape":true,"source":"A text range matching the specified text; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."},{"pos":[17931,18000],"content":"Retrieves the value of the specified attribute across the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the value of the specified attribute across the text range.","pos":[0,69]}]},{"pos":[18012,18072],"content":"There is no differentiation between hidden and visible text.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no differentiation between hidden and visible text.","pos":[0,60]}]},{"pos":[18225,18244],"content":"The text attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text attribute.","pos":[0,19]}]},{"pos":[18303,18953],"content":"Retrieves an object representing the value of the specified attribute. For example, `GetAttributeValue(TextPattern.FontNameAttribute)` would return a string that represents the font name of the text range while `GetAttributeValue(TextPattern.IsItalicAttribute)` would return a value of type <xref:System.Boolean>.       Returns <xref href=\"System.Windows.Automation.TextPattern.MixedAttributeValue\"></xref> if the value of the specified attribute varies over the text range.       Returns <xref href=\"System.Windows.Automation.AutomationElement.NotSupported\"></xref> if the specified attribute is not supported by the provider or the control.","needQuote":false,"needEscape":true,"nodes":[{"content":"Retrieves an object representing the value of the specified attribute.","pos":[0,70]},{"content":"For example, <ph id=\"ph1\">`GetAttributeValue(TextPattern.FontNameAttribute)`</ph> would return a string that represents the font name of the text range while <ph id=\"ph2\">`GetAttributeValue(TextPattern.IsItalicAttribute)`</ph> would return a value of type &lt;xref:System.Boolean&gt;.","pos":[71,313],"source":" For example, `GetAttributeValue(TextPattern.FontNameAttribute)` would return a string that represents the font name of the text range while `GetAttributeValue(TextPattern.IsItalicAttribute)` would return a value of type <xref:System.Boolean>."},{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.TextPattern.MixedAttributeValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the value of the specified attribute varies over the text range.","pos":[320,474],"source":"       Returns <xref href=\"System.Windows.Automation.TextPattern.MixedAttributeValue\"></xref> if the value of the specified attribute varies over the text range."},{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.AutomationElement.NotSupported\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified attribute is not supported by the provider or the control.","pos":[481,642],"source":"       Returns <xref href=\"System.Windows.Automation.AutomationElement.NotSupported\"></xref> if the specified attribute is not supported by the provider or the control."}]},{"pos":[19148,19188],"content":"If the specified attribute is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the specified attribute is not valid.","pos":[0,40]}]},{"pos":[19701,19812],"content":"Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.","pos":[0,111]}]},{"pos":[19957,20252],"content":"An array of bounding rectangles for each full or partial line of text in a text range.       An empty array for a degenerate range.       An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.","needQuote":false,"needEscape":true,"nodes":[{"content":"An array of bounding rectangles for each full or partial line of text in a text range.       An empty array for a degenerate range.       An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.","pos":[0,291],"nodes":[{"content":"An array of bounding rectangles for each full or partial line of text in a text range.","pos":[0,86]},{"content":"An empty array for a degenerate range.","pos":[93,131]},{"content":"An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.","pos":[138,291]}]}]},{"pos":[20822,20901],"content":"Retrieves a collection of all embedded objects that fall within the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves a collection of all embedded objects that fall within the text range.","pos":[0,79]}]},{"pos":[21137,21380],"content":"A collection of child objects that fall within the range. Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.       Returns an empty collection if there are no child objects.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection of child objects that fall within the range. Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.       Returns an empty collection if there are no child objects.","pos":[0,241],"nodes":[{"content":"A collection of child objects that fall within the range.","pos":[0,57]},{"content":"Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.","pos":[58,176]},{"content":"Returns an empty collection if there are no child objects.","pos":[183,241]}]}]},{"pos":[21980,22039],"content":"Returns the innermost control that encloses the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the innermost control that encloses the text range.","pos":[0,59]}]},{"pos":[22278,22513],"content":"The enclosing control, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The enclosing control, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.","pos":[0,235],"nodes":[{"content":"The enclosing control, typically the text provider that supplies the text range.","pos":[0,80]},{"content":"However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.","pos":[81,235]}]}]},{"pos":[23103,23141],"content":"Retrieves the plain text of the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the plain text of the range.","pos":[0,38]}]},{"pos":[23154,23542],"content":"GetText respects both hidden and visible text.       If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.       GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.","needQuote":false,"needEscape":true,"nodes":[{"content":"GetText respects both hidden and visible text.","pos":[0,46]},{"content":"If <ph id=\"ph1\">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.","pos":[53,188],"source":"       If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range."},{"content":"GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.","pos":[195,384]}]},{"pos":[23686,23763],"content":"The maximum length of the string to return. Use `-1` if no limit is required.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum length of the string to return.","pos":[0,43]},{"content":"Use <ph id=\"ph1\">`-1`</ph> if no limit is required.","pos":[44,77],"source":" Use `-1` if no limit is required."}]},{"pos":[23821,23914],"content":"The plain text of the text range, possibly truncated at the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxLength</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The plain text of the text range, possibly truncated at the specified <code>maxLength</code>."},{"pos":[24118,24160],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxLength</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1.","needQuote":true,"needEscape":true,"source":"If <code>maxLength</code> is less than -1."},{"pos":[24738,24794],"content":"Moves the text range the specified number of text units.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves the text range the specified number of text units.","pos":[0,56]}]},{"pos":[24807,27687],"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.      4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.       ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \"Text ranges spanned by embedded objects.\")   Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text.       Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>       The text is not altered in any way, the text range just spans a different part of the text.","needQuote":false,"needEscape":true,"nodes":[{"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.","pos":[0,164]},{"content":"1.","pos":[170,172]},{"content":"The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.","pos":[174,443],"source":"  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous."},{"content":"This step is necessary to remove ambiguity in situations where a text range spans <ph id=\"ph1\">`unit`</ph> boundaries; for example, \"{The U}RL <bpt id=\"p1\">[</bpt>http://www.microsoft.com<ept id=\"p1\">](http://www.microsoft.com)</ept> is embedded in text\" where \"{\" and \"}\" are the text range endpoints.","pos":[444,690],"source":" This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints."},{"content":"2.","pos":[696,698]},{"content":"The resulting range is moved backward in the &lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt; to the beginning of the requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[700,868],"source":"  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary."},{"content":"3.","pos":[874,876]},{"content":"The range is moved forward or backward in the &lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt; by the requested number of <ph id=\"ph1\">`unit`</ph> boundaries.","pos":[878,1042],"source":"  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries."},{"content":"4.","pos":[1048,1050]},{"content":"The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[1052,1228],"source":"  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary."},{"content":"<bpt id=\"p1\">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-moveandexpand-examples.png \"</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p2\">\")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.","pos":[1235,1817],"source":"![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored."},{"content":"<bpt id=\"p1\">![</bpt>Text ranges spanned by embedded objects.<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-embeddedobjecttextranges.png \"</bpt>Text ranges spanned by embedded objects.<ept id=\"p2\">\")</ept>","pos":[1824,1968],"source":"![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \"Text ranges spanned by embedded objects.\")"},{"content":"Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text.","pos":[1971,2089]},{"content":"Move defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.","pos":[2096,2277],"source":"       Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control."},{"content":"The order, from smallest unit to largest, is listed below.","pos":[2284,2342]},{"content":"-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;       The text is not altered in any way, the text range just spans a different part of the text.","pos":[2348,2832],"source":"      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>       The text is not altered in any way, the text range just spans a different part of the text."}]},{"pos":[27889,27912],"content":"The text unit boundary.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text unit boundary.","pos":[0,23]}]},{"pos":[27974,28131],"content":"The number of text units to move.       A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of text units to move.       A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.","pos":[0,155],"nodes":[{"content":"The number of text units to move.","pos":[0,33]},{"content":"A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.","pos":[40,155]}]}]},{"pos":[28189,28424],"content":"The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*> endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*> endpoints.","pos":[0,235],"nodes":[{"content":"The number of units actually moved.","pos":[0,35]},{"content":"This can be less than the number requested if either of the new text range endpoints is greater than or less than the &lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*&gt; endpoints.","pos":[36,235],"source":" This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*> endpoints."}]}]},{"pos":[29554,29638],"content":"Moves one endpoint of a text range to the specified endpoint of a second text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves one endpoint of a text range to the specified endpoint of a second text range.","pos":[0,84]}]},{"pos":[29650,30020],"content":"If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>).","needQuote":true,"needEscape":true,"nodes":[{"content":"If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; is always less than or equal to &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;).","pos":[0,370],"source":"If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>)."}]},{"pos":[30405,30426],"content":"The endpoint to move.","needQuote":true,"needEscape":true,"nodes":[{"content":"The endpoint to move.","pos":[0,21]}]},{"pos":[30534,30576],"content":"Another range from the same text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Another range from the same text provider.","pos":[0,42]}]},{"pos":[30689,30720],"content":"An endpoint on the other range.","needQuote":true,"needEscape":true,"nodes":[{"content":"An endpoint on the other range.","pos":[0,31]}]},{"pos":[31659,31757],"content":"Moves one endpoint of the text range the specified number of text units within the document range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves one endpoint of the text range the specified number of text units within the document range.","pos":[0,98]}]},{"pos":[31770,33831],"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>","needQuote":false,"needEscape":true,"nodes":[{"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the &lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt; method to execute successfully.","pos":[0,228],"source":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully."},{"content":"1.","pos":[234,236]},{"content":"The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.","pos":[238,507],"source":"  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous."},{"content":"This step is necessary to remove ambiguity in situations where a text range spans <ph id=\"ph1\">`unit`</ph> boundaries; for example, \"{The U}RL <bpt id=\"p1\">[</bpt>http://www.microsoft.com<ept id=\"p1\">](http://www.microsoft.com)</ept> is embedded in text\" where \"{\" and \"}\" are the text range endpoints.","pos":[508,754],"source":" This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints."},{"content":"2.","pos":[760,762]},{"content":"The resulting range is moved backward in the &lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt; to the beginning of the requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[764,932],"source":"  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary."},{"content":"3.","pos":[938,940]},{"content":"The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[942,1118],"source":"  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary."},{"content":"<bpt id=\"p1\">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-moveandexpand-examples.png \"</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p2\">\")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       MoveEndpointByUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.","pos":[1125,1569],"source":"![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control."},{"content":"The order, from smallest unit to largest, is listed below.","pos":[1576,1634]},{"content":"-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;","pos":[1640,2026],"source":"      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>"}]},{"pos":[34133,34154],"content":"The endpoint to move.","needQuote":true,"needEscape":true,"nodes":[{"content":"The endpoint to move.","pos":[0,21]}]},{"pos":[34241,34269],"content":"The textual unit for moving.","needQuote":true,"needEscape":true,"nodes":[{"content":"The textual unit for moving.","pos":[0,28]}]},{"pos":[34330,34464],"content":"The number of units to move. A positive value moves the endpoint forward. A negative value moves backward. A value of 0 has no effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of units to move. A positive value moves the endpoint forward. A negative value moves backward. A value of 0 has no effect.","pos":[0,134],"nodes":[{"content":"The number of units to move.","pos":[0,28]},{"content":"A positive value moves the endpoint forward.","pos":[29,73]},{"content":"A negative value moves backward.","pos":[74,106]},{"content":"A value of 0 has no effect.","pos":[107,134]}]}]},{"pos":[34521,34671],"content":"The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.","pos":[0,150]}]},{"pos":[35277,35619],"content":"Removes a highlighted section of text, corresponding to the caller's <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.","needQuote":true,"needEscape":true,"source":"Removes a highlighted section of text, corresponding to the caller's <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections."},{"pos":[35632,35777],"content":"The text insertion point will move to the area of the removed highlight.       Providing a degenerate text range will move the insertion point.","needQuote":false,"needEscape":true,"nodes":[{"content":"The text insertion point will move to the area of the removed highlight.       Providing a degenerate text range will move the insertion point.","pos":[0,143],"nodes":[{"content":"The text insertion point will move to the area of the removed highlight.","pos":[0,72]},{"content":"Providing a degenerate text range will move the insertion point.","pos":[79,143]}]}]},{"pos":[36068,36306],"content":"If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>)."},{"pos":[36837,36930],"content":"Causes the text control to scroll vertically until the text range is visible in the viewport.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes the text control to scroll vertically until the text range is visible in the viewport.","pos":[0,93]}]},{"pos":[36943,37117],"content":"ScrollIntoView respects both hidden and visible text.       If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.","needQuote":false,"needEscape":true,"nodes":[{"content":"ScrollIntoView respects both hidden and visible text.       If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.","pos":[0,172],"nodes":[{"content":"ScrollIntoView respects both hidden and visible text.","pos":[0,53]},{"content":"If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.","pos":[60,172]}]}]},{"pos":[37271,37545],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the text control should be scrolled so the text range is flush with the top of the viewport; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if it should be flush with the bottom of the viewport.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the text control should be scrolled so the text range is flush with the top of the viewport; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it should be flush with the bottom of the viewport."},{"pos":[38082,38318],"content":"Highlights text in the text control corresponding to the text range <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoints.","needQuote":true,"needEscape":true,"source":"Highlights text in the text control corresponding to the text range <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints."},{"pos":[38330,38502],"content":"If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"If a degenerate text range is provided, the text insertion point will move to the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint of the text range.","pos":[0,172],"source":"If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range."}]},{"pos":[38766,38830],"content":"Occurs when text selection is not supported by the text control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when text selection is not supported by the text control.","pos":[0,64]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Automation.Provider.ITextRangeProvider\n  id: ITextRangeProvider\n  children:\n  - System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection\n  - System.Windows.Automation.Provider.ITextRangeProvider.Clone\n  - System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)\n  - System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  - System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  - System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)\n  - System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)\n  - System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)\n  - System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles\n  - System.Windows.Automation.Provider.ITextRangeProvider.GetChildren\n  - System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement\n  - System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)\n  - System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  - System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection\n  - System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)\n  - System.Windows.Automation.Provider.ITextRangeProvider.Select\n  langs:\n  - csharp\n  name: ITextRangeProvider\n  nameWithType: ITextRangeProvider\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider\n  type: Interface\n  summary: Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <xref href=\"System.Windows.Automation.Provider.ITextProvider\"></xref>.\n  remarks: \"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.  \\n  \\n A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"5347ad7b-c355-46f8-aff5-909033582f63\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface ITextRangeProvider\n  implements: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection\n  id: AddToSelection\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: AddToSelection()\n  nameWithType: ITextRangeProvider.AddToSelection()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.\n  remarks: \"The text insertion point moves to the area of the new selection.  \\n  \\n Providing a degenerate text range moves the insertion point.\"\n  syntax:\n    content: public void AddToSelection ();\n    parameters: []\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: If text provider does not support multiple, disjoint selections (that is, <xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>).\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone\n  id: Clone\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ITextRangeProvider.Clone()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Returns a new <xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\"></xref> identical to the original <xref href=\"System.Windows.Automation.Provider.ITextRangeProvider\"></xref> and inheriting all properties of the original.\n  remarks: The new range can be manipulated independently from the original.\n  syntax:\n    content: public System.Windows.Automation.Provider.ITextRangeProvider Clone ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Provider.ITextRangeProvider\n      description: The new text range. A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)\n  id: Compare(System.Windows.Automation.Provider.ITextRangeProvider)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: Compare(ITextRangeProvider)\n  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Returns a value that indicates whether the span (the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint to the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint) of a text range is the same as another text range.\n  syntax:\n    content: public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);\n    parameters:\n    - id: range\n      type: System.Windows.Automation.Provider.ITextRangeProvider\n      description: A text range to compare\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the span of both text ranges is identical; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If the range being compared does not come from the same text provider.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  id: CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Returns a value that specifies whether two text ranges have identical endpoints.\n  syntax:\n    content: public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);\n    parameters:\n    - id: endpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the caller.\n    - id: targetRange\n      type: System.Windows.Automation.Provider.ITextRangeProvider\n      description: The target range for comparison.\n    - id: targetEndpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the target.\n    return:\n      type: System.Int32\n      description: \"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.  \\n  \\n Returns zero if the caller's endpoint is at the same location as the target endpoint.  \\n  \\n Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.\"\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If <code>targetRange</code> is from a different text provider.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  id: ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: ExpandToEnclosingUnit(TextUnit)\n  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Expands the text range to the specified text unit.\n  remarks: \"If the range is already an exact quantity of the specified units then it remains unchanged.  \\n  \\n There is a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.  \\n  \\n1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \\\"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\\\" where \\\"{\\\" and \\\"}\\\" are the text range endpoints.  \\n  \\n2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.  \\n  \\n3.  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.  \\n  \\n4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.  \\n  \\n ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \\\"Range adjustments by Move & ExpandToEnclosingUnit\\\")  \\nExamples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  \\n  \\n> [!NOTE]\\n>  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.  \\n  \\n ExpandToEnclosingUnit respects both hidden and visible text.  \\n  \\n ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.  \\n  \\n The order, from smallest unit to largest, is listed below.  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>\"\n  syntax:\n    content: public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);\n    parameters:\n    - id: unit\n      type: System.Windows.Automation.Text.TextUnit\n      description: The textual unit.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)\n  id: FindAttribute(System.Int32,System.Object,System.Boolean)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: FindAttribute(Int32,Object,Boolean)\n  nameWithType: ITextRangeProvider.FindAttribute(Int32,Object,Boolean)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(Int32,Object,Boolean)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Returns a text range subset that has the specified attribute value.\n  remarks: There is no differentiation between hidden and visible text.\n  syntax:\n    content: public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);\n    parameters:\n    - id: attribute\n      type: System.Int32\n      description: The attribute to search for.\n    - id: value\n      type: System.Object\n      description: The attribute value to search for. This value must match the type specified for the attribute.\n    - id: backward\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Windows.Automation.Provider.ITextRangeProvider\n      description: A text range having a matching attribute and attribute value; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]).\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)\n  id: FindText(System.String,System.Boolean,System.Boolean)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: FindText(String,Boolean,Boolean)\n  nameWithType: ITextRangeProvider.FindText(String,Boolean,Boolean)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(String,Boolean,Boolean)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Returns a text range subset that contains the specified text.\n  remarks: There is no differentiation between hidden and visible text.\n  syntax:\n    content: public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);\n    parameters:\n    - id: text\n      type: System.String\n      description: The text string to search for.\n    - id: backward\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: ignoreCase\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if case should be ignored; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Windows.Automation.Provider.ITextRangeProvider\n      description: A text range matching the specified text; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]).\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)\n  id: GetAttributeValue(System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: GetAttributeValue(Int32)\n  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(Int32)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Retrieves the value of the specified attribute across the text range.\n  remarks: There is no differentiation between hidden and visible text.\n  syntax:\n    content: public object GetAttributeValue (int attribute);\n    parameters:\n    - id: attribute\n      type: System.Int32\n      description: The text attribute.\n    return:\n      type: System.Object\n      description: \"Retrieves an object representing the value of the specified attribute. For example, `GetAttributeValue(TextPattern.FontNameAttribute)` would return a string that represents the font name of the text range while `GetAttributeValue(TextPattern.IsItalicAttribute)` would return a value of type <xref:System.Boolean>.  \\n  \\n Returns <xref href=\\\"System.Windows.Automation.TextPattern.MixedAttributeValue\\\"></xref> if the value of the specified attribute varies over the text range.  \\n  \\n Returns <xref href=\\\"System.Windows.Automation.AutomationElement.NotSupported\\\"></xref> if the specified attribute is not supported by the provider or the control.\"\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If the specified attribute is not valid.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles\n  id: GetBoundingRectangles\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: GetBoundingRectangles()\n  nameWithType: ITextRangeProvider.GetBoundingRectangles()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.\n  syntax:\n    content: public double[] GetBoundingRectangles ();\n    parameters: []\n    return:\n      type: System.Double[]\n      description: \"An array of bounding rectangles for each full or partial line of text in a text range.  \\n  \\n An empty array for a degenerate range.  \\n  \\n An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.\"\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren\n  id: GetChildren\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: GetChildren()\n  nameWithType: ITextRangeProvider.GetChildren()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Retrieves a collection of all embedded objects that fall within the text range.\n  syntax:\n    content: public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Provider.IRawElementProviderSimple[]\n      description: \"A collection of child objects that fall within the range. Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.  \\n  \\n Returns an empty collection if there are no child objects.\"\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement\n  id: GetEnclosingElement\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: GetEnclosingElement()\n  nameWithType: ITextRangeProvider.GetEnclosingElement()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Returns the innermost control that encloses the text range.\n  syntax:\n    content: public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Provider.IRawElementProviderSimple\n      description: The enclosing control, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)\n  id: GetText(System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: GetText(Int32)\n  nameWithType: ITextRangeProvider.GetText(Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(Int32)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Retrieves the plain text of the range.\n  remarks: \"GetText respects both hidden and visible text.  \\n  \\n If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.  \\n  \\n GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.\"\n  syntax:\n    content: public string GetText (int maxLength);\n    parameters:\n    - id: maxLength\n      type: System.Int32\n      description: The maximum length of the string to return. Use `-1` if no limit is required.\n    return:\n      type: System.String\n      description: The plain text of the text range, possibly truncated at the specified <code>maxLength</code>.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetText*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: If <code>maxLength</code> is less than -1.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  id: Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: Move(TextUnit,Int32)\n  nameWithType: ITextRangeProvider.Move(TextUnit,Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit,Int32)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Moves the text range the specified number of text units.\n  remarks: \"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.  \\n  \\n1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \\\"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\\\" where \\\"{\\\" and \\\"}\\\" are the text range endpoints.  \\n  \\n2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.  \\n  \\n3.  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.  \\n  \\n4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.  \\n  \\n ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \\\"Range adjustments by Move & ExpandToEnclosingUnit\\\")  \\nExamples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  \\n  \\n The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.  \\n  \\n ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \\\"Text ranges spanned by embedded objects.\\\")  \\nExample of a text stream with embedded objects and their range spans  \\n  \\n Move respects both hidden and visible text.  \\n  \\n Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.  \\n  \\n The order, from smallest unit to largest, is listed below.  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n The text is not altered in any way, the text range just spans a different part of the text.\"\n  syntax:\n    content: public int Move (System.Windows.Automation.Text.TextUnit unit, int count);\n    parameters:\n    - id: unit\n      type: System.Windows.Automation.Text.TextUnit\n      description: The text unit boundary.\n    - id: count\n      type: System.Int32\n      description: \"The number of text units to move.  \\n  \\n A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.\"\n    return:\n      type: System.Int32\n      description: The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*> endpoints.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.Move*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  id: MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Moves one endpoint of a text range to the specified endpoint of a second text range.\n  remarks: If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>).\n  syntax:\n    content: public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);\n    parameters:\n    - id: endpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The endpoint to move.\n    - id: targetRange\n      type: System.Windows.Automation.Provider.ITextRangeProvider\n      description: Another range from the same text provider.\n    - id: targetEndpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: An endpoint on the other range.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  id: MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Moves one endpoint of the text range the specified number of text units within the document range.\n  remarks: \"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.  \\n  \\n1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \\\"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\\\" where \\\"{\\\" and \\\"}\\\" are the text range endpoints.  \\n  \\n2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.  \\n  \\n3.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.  \\n  \\n ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \\\"Range adjustments by Move & ExpandToEnclosingUnit\\\")  \\nExamples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  \\n  \\n MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.  \\n  \\n The order, from smallest unit to largest, is listed below.  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>\"\n  syntax:\n    content: public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);\n    parameters:\n    - id: endpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The endpoint to move.\n    - id: unit\n      type: System.Windows.Automation.Text.TextUnit\n      description: The textual unit for moving.\n    - id: count\n      type: System.Int32\n      description: The number of units to move. A positive value moves the endpoint forward. A negative value moves backward. A value of 0 has no effect.\n    return:\n      type: System.Int32\n      description: The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection\n  id: RemoveFromSelection\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: RemoveFromSelection()\n  nameWithType: ITextRangeProvider.RemoveFromSelection()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Removes a highlighted section of text, corresponding to the caller's <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.\n  remarks: \"The text insertion point will move to the area of the removed highlight.  \\n  \\n Providing a degenerate text range will move the insertion point.\"\n  syntax:\n    content: public void RemoveFromSelection ();\n    parameters: []\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>).\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)\n  id: ScrollIntoView(System.Boolean)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: ScrollIntoView(Boolean)\n  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(Boolean)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Causes the text control to scroll vertically until the text range is visible in the viewport.\n  remarks: \"ScrollIntoView respects both hidden and visible text.  \\n  \\n If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.\"\n  syntax:\n    content: public void ScrollIntoView (bool alignToTop);\n    parameters:\n    - id: alignToTop\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the text control should be scrolled so the text range is flush with the top of the viewport; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it should be flush with the bottom of the viewport.\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select\n  id: Select\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  langs:\n  - csharp\n  name: Select()\n  nameWithType: ITextRangeProvider.Select()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Highlights text in the text control corresponding to the text range <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints.\n  remarks: If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range.\n  syntax:\n    content: public void Select ();\n    parameters: []\n  overload: System.Windows.Automation.Provider.ITextRangeProvider.Select*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Occurs when text selection is not supported by the text control.\n  platform:\n  - net462\nreferences:\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: AddToSelection()\n  nameWithType: ITextRangeProvider.AddToSelection()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Clone()\n  nameWithType: ITextRangeProvider.Clone()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()\n- uid: System.Windows.Automation.Provider.ITextRangeProvider\n  parent: System.Windows.Automation.Provider\n  isExternal: false\n  name: ITextRangeProvider\n  nameWithType: ITextRangeProvider\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Compare(ITextRangeProvider)\n  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint\n  parent: System.Windows.Automation.Text\n  isExternal: false\n  name: TextPatternRangeEndpoint\n  nameWithType: TextPatternRangeEndpoint\n  fullName: System.Windows.Automation.Text.TextPatternRangeEndpoint\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: ExpandToEnclosingUnit(TextUnit)\n  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)\n- uid: System.Windows.Automation.Text.TextUnit\n  parent: System.Windows.Automation.Text\n  isExternal: false\n  name: TextUnit\n  nameWithType: TextUnit\n  fullName: System.Windows.Automation.Text.TextUnit\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: FindAttribute(Int32,Object,Boolean)\n  nameWithType: ITextRangeProvider.FindAttribute(Int32,Object,Boolean)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(Int32,Object,Boolean)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: FindText(String,Boolean,Boolean)\n  nameWithType: ITextRangeProvider.FindText(String,Boolean,Boolean)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(String,Boolean,Boolean)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetAttributeValue(Int32)\n  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(Int32)\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetBoundingRectangles()\n  nameWithType: ITextRangeProvider.GetBoundingRectangles()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()\n- uid: System.Double[]\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double[]\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: Double[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetChildren()\n  nameWithType: ITextRangeProvider.GetChildren()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()\n- uid: System.Windows.Automation.Provider.IRawElementProviderSimple[]\n  parent: System.Windows.Automation.Provider\n  isExternal: false\n  name: IRawElementProviderSimple\n  nameWithType: IRawElementProviderSimple\n  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple[]\n  spec.csharp:\n  - uid: System.Windows.Automation.Provider.IRawElementProviderSimple\n    name: IRawElementProviderSimple\n    nameWithType: IRawElementProviderSimple\n    fullName: IRawElementProviderSimple[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetEnclosingElement()\n  nameWithType: ITextRangeProvider.GetEnclosingElement()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()\n- uid: System.Windows.Automation.Provider.IRawElementProviderSimple\n  parent: System.Windows.Automation.Provider\n  isExternal: false\n  name: IRawElementProviderSimple\n  nameWithType: IRawElementProviderSimple\n  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetText(Int32)\n  nameWithType: ITextRangeProvider.GetText(Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(Int32)\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Move(TextUnit,Int32)\n  nameWithType: ITextRangeProvider.Move(TextUnit,Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit,Int32)\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: RemoveFromSelection()\n  nameWithType: ITextRangeProvider.RemoveFromSelection()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: ScrollIntoView(Boolean)\n  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(Boolean)\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Select()\n  nameWithType: ITextRangeProvider.Select()\n  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: AddToSelection\n  nameWithType: ITextRangeProvider.AddToSelection\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Clone\n  nameWithType: ITextRangeProvider.Clone\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Compare\n  nameWithType: ITextRangeProvider.Compare\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: CompareEndpoints\n  nameWithType: ITextRangeProvider.CompareEndpoints\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: ExpandToEnclosingUnit\n  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: FindAttribute\n  nameWithType: ITextRangeProvider.FindAttribute\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: FindText\n  nameWithType: ITextRangeProvider.FindText\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetAttributeValue\n  nameWithType: ITextRangeProvider.GetAttributeValue\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetBoundingRectangles\n  nameWithType: ITextRangeProvider.GetBoundingRectangles\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetChildren\n  nameWithType: ITextRangeProvider.GetChildren\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetEnclosingElement\n  nameWithType: ITextRangeProvider.GetEnclosingElement\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: GetText\n  nameWithType: ITextRangeProvider.GetText\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Move\n  nameWithType: ITextRangeProvider.Move\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: MoveEndpointByRange\n  nameWithType: ITextRangeProvider.MoveEndpointByRange\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: MoveEndpointByUnit\n  nameWithType: ITextRangeProvider.MoveEndpointByUnit\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: RemoveFromSelection\n  nameWithType: ITextRangeProvider.RemoveFromSelection\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: ScrollIntoView\n  nameWithType: ITextRangeProvider.ScrollIntoView\n- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select*\n  parent: System.Windows.Automation.Provider.ITextRangeProvider\n  isExternal: false\n  name: Select\n  nameWithType: ITextRangeProvider.Select\n"}