{"nodes":[{"pos":[1658,1733],"content":"Provides access to documents, methods, and variables within a symbol store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to documents, methods, and variables within a symbol store.","pos":[0,75]}]},{"pos":[2993,3005],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3464,3591],"content":"Releases the resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymReader\"></xref> class."},{"pos":[4187,4479],"content":"Called by the &lt;xref:System.Diagnostics.SymbolStore.SymReader.Dispose<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Diagnostics.SymbolStore.SymReader.Finalize<ept id=\"p1\">*</ept>&gt; methods to release the managed and unmanaged resources used by the current instance of the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Called by the <xref:System.Diagnostics.SymbolStore.SymReader.Dispose*> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize*> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymReader\"></xref> class."},{"pos":[4491,4697],"content":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymReader.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize%2A> methods; do not call this method directly.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called only by the public &lt;xref:System.Diagnostics.SymbolStore.SymReader.Dispose%2A&gt; and &lt;xref:System.Diagnostics.SymbolStore.SymReader.Finalize%2A&gt; methods; do not call this method directly.","pos":[0,206],"source":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymReader.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize%2A> methods; do not call this method directly."}]},{"pos":[4840,5044],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[5510,5685],"content":"Releases unmanaged resources and performs other cleanup operations before the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"source":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymReader\"></xref> is reclaimed by garbage collection."},{"pos":[5697,6006],"content":"This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method overrides  &lt;xref:System.Object.Finalize%2A&gt;.","pos":[0,56],"source":"This method overrides  <xref:System.Object.Finalize%2A>."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A&gt; method.","pos":[57,309],"source":" Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method."}]},{"pos":[6710,6819],"content":"Gets a document specified by the URL for the document and optionally the language, language vendor, and type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a document specified by the URL for the document and optionally the language, language vendor, and type.","pos":[0,109]}]},{"pos":[6831,6917],"content":"The <ph id=\"ph1\">`language`</ph>, <ph id=\"ph2\">`languageVendor`</ph>, and <ph id=\"ph3\">`documentType`</ph> parameters are currently ignored.","needQuote":true,"needEscape":true,"source":"The `language`, `languageVendor`, and `documentType` parameters are currently ignored."},{"pos":[7159,7196],"content":"The URL that identifies the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL that identifies the document.","pos":[0,37]}]},{"pos":[7259,7361],"content":"The document language. You can specify this parameter as <xref:System.Guid>. to indicate any language.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document language. You can specify this parameter as <xref:System.Guid>. to indicate any language.","pos":[0,102],"nodes":[{"content":"The document language.","pos":[0,22]},{"content":"You can specify this parameter as &lt;xref:System.Guid&gt;.","pos":[23,76],"source":" You can specify this parameter as <xref:System.Guid>."},{"content":"to indicate any language.","pos":[77,102]}]}]},{"pos":[7430,7569],"content":"The identity of the vendor for the document language. You can specify this parameter as <xref:System.Guid> to indicate any language vendor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identity of the vendor for the document language. You can specify this parameter as <xref:System.Guid> to indicate any language vendor.","pos":[0,139],"nodes":[{"content":"The identity of the vendor for the document language.","pos":[0,53]},{"content":"You can specify this parameter as &lt;xref:System.Guid&gt; to indicate any language vendor.","pos":[54,139],"source":" You can specify this parameter as <xref:System.Guid> to indicate any language vendor."}]}]},{"pos":[7636,7745],"content":"The type of the document. You can specify this parameter as <xref:System.Guid> to indicate any document type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the document. You can specify this parameter as <xref:System.Guid> to indicate any document type.","pos":[0,109],"nodes":[{"content":"The type of the document.","pos":[0,25]},{"content":"You can specify this parameter as &lt;xref:System.Guid&gt; to indicate any document type.","pos":[26,109],"source":" You can specify this parameter as <xref:System.Guid> to indicate any document type."}]}]},{"pos":[7836,7997],"content":"The document with the specified URL if found in the symbol store, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the document does not exist.","needQuote":true,"needEscape":true,"source":"The document with the specified URL if found in the symbol store, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the document does not exist."},{"pos":[8487,8546],"content":"Gets an array of all documents defined in the symbol store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an array of all documents defined in the symbol store.","pos":[0,59]}]},{"pos":[8762,8816],"content":"An array of all documents defined in the symbol store.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of all documents defined in the symbol store.","pos":[0,54]}]},{"pos":[8998,9050],"content":"There is insufficient memory to satisfy the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]},{"pos":[9487,9545],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[9767,9825],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[10015,10028],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[10541,10614],"content":"Gets a symbol reader method object when given the identifier of a method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a symbol reader method object when given the identifier of a method.","pos":[0,73]}]},{"pos":[10868,10901],"content":"The metadata token of the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata token of the method.","pos":[0,33]}]},{"pos":[10990,11058],"content":"The symbol reader method object for the specified method identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symbol reader method object for the specified method identifier.","pos":[0,68]}]},{"pos":[11696,11803],"content":"Gets a symbol reader method object when given the identifier of a method and its edit and continue version.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a symbol reader method object when given the identifier of a method and its edit and continue version.","pos":[0,107]}]},{"pos":[12070,12103],"content":"The metadata token of the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata token of the method.","pos":[0,33]}]},{"pos":[12166,12210],"content":"The edit and continue version of the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The edit and continue version of the method.","pos":[0,44]}]},{"pos":[12299,12379],"content":"The symbol reader method object for the specified method identifier and version.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symbol reader method object for the specified method identifier and version.","pos":[0,80]}]},{"pos":[13181,13265],"content":"Gets a symbol reader method object that contains a specified position in a document.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a symbol reader method object that contains a specified position in a document.","pos":[0,84]}]},{"pos":[13573,13617],"content":"The document in which the method is located.","needQuote":true,"needEscape":true,"nodes":[{"content":"The document in which the method is located.","pos":[0,44]}]},{"pos":[13677,13764],"content":"The position of the line within the document. The lines are numbered, beginning with 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the line within the document. The lines are numbered, beginning with 1.","pos":[0,87],"nodes":[{"content":"The position of the line within the document.","pos":[0,45]},{"content":"The lines are numbered, beginning with 1.","pos":[46,87]}]}]},{"pos":[13826,13913],"content":"The position of column within the document. The columns are numbered, beginning with 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of column within the document. The columns are numbered, beginning with 1.","pos":[0,87],"nodes":[{"content":"The position of column within the document.","pos":[0,43]},{"content":"The columns are numbered, beginning with 1.","pos":[44,87]}]}]},{"pos":[14002,14077],"content":"The symbol reader method object for the specified position in the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symbol reader method object for the specified position in the document.","pos":[0,75]}]},{"pos":[14590,14648],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[14867,14925],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[15110,15123],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[15715,15773],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[16008,16035],"content":"This parameter is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used.","pos":[0,27]}]},{"pos":[16096,16123],"content":"This parameter is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used.","pos":[0,27]}]},{"pos":[16181,16239],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[16426,16439],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[16967,17025],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[17286,17313],"content":"This parameter is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used.","pos":[0,27]}]},{"pos":[17406,17464],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[17648,17661],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[18195,18256],"content":"Replaces the existing symbol store with a delta symbol store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Replaces the existing symbol store with a delta symbol store.","pos":[0,61]}]},{"pos":[18269,18763],"content":"The ReplaceSymbolStore is much like the <xref:System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore%2A> method, but the given delta acts as a complete replacement rather than an update.       Only one of the parameters, `fileName` or `stream`, needs to be specified. If `fileName` is specified, the symbol store is updated with the symbols in that file. If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> .","needQuote":false,"needEscape":true,"nodes":[{"content":"The ReplaceSymbolStore is much like the &lt;xref:System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore%2A&gt; method, but the given delta acts as a complete replacement rather than an update.","pos":[0,190],"source":"The ReplaceSymbolStore is much like the <xref:System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore%2A> method, but the given delta acts as a complete replacement rather than an update."},{"content":"Only one of the parameters, <ph id=\"ph1\">`fileName`</ph> or <ph id=\"ph2\">`stream`</ph>, needs to be specified.","pos":[197,271],"source":"       Only one of the parameters, `fileName` or `stream`, needs to be specified."},{"content":"If <ph id=\"ph1\">`fileName`</ph> is specified, the symbol store is updated with the symbols in that file.","pos":[272,358],"source":" If `fileName` is specified, the symbol store is updated with the symbols in that file."},{"content":"If <ph id=\"ph1\">`stream`</ph> is specified, the symbol store is updated with the data from the &lt;xref:System.Runtime.InteropServices.ComTypes.IStream&gt; .","pos":[359,492],"source":" If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> ."}]},{"pos":[18941,19083],"content":"The name of the file containing the symbol store, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if using an in-memory store.","needQuote":true,"needEscape":true,"source":"The name of the file containing the symbol store, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if using an in-memory store."},{"pos":[19146,19250],"content":"The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pointer to the input stream for the symbol store, or &lt;xref:System.IntPtr&gt; if using an on-disk store.","pos":[0,104],"source":"The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store."}]},{"pos":[19869,19929],"content":"Updates the existing symbol store with a delta symbol store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the existing symbol store with a delta symbol store.","pos":[0,60]}]},{"pos":[19942,20373],"content":"This method is used in Edit and Continue scenarios as a way to update the symbol store to match deltas to the original PE file.       Only one of the parameters, `fileName` or `stream`, needs to be specified. If `fileName` is specified, the symbol store is updated with the symbols in that file. If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> .","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is used in Edit and Continue scenarios as a way to update the symbol store to match deltas to the original PE file.","pos":[0,127]},{"content":"Only one of the parameters, <ph id=\"ph1\">`fileName`</ph> or <ph id=\"ph2\">`stream`</ph>, needs to be specified.","pos":[134,208],"source":"       Only one of the parameters, `fileName` or `stream`, needs to be specified."},{"content":"If <ph id=\"ph1\">`fileName`</ph> is specified, the symbol store is updated with the symbols in that file.","pos":[209,295],"source":" If `fileName` is specified, the symbol store is updated with the symbols in that file."},{"content":"If <ph id=\"ph1\">`stream`</ph> is specified, the symbol store is updated with the data from the &lt;xref:System.Runtime.InteropServices.ComTypes.IStream&gt; .","pos":[296,429],"source":" If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> ."}]},{"pos":[20550,20692],"content":"The name of the file containing the symbol store, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if using an in-memory store.","needQuote":true,"needEscape":true,"source":"The name of the file containing the symbol store, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if using an in-memory store."},{"pos":[20755,20859],"content":"The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pointer to the input stream for the symbol store, or &lt;xref:System.IntPtr&gt; if using an on-disk store.","pos":[0,104],"source":"The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store."}]},{"pos":[21361,21466],"content":"Gets the metadata token for the method that was specified as the user entry point for the module, if any.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the metadata token for the method that was specified as the user entry point for the module, if any.","pos":[0,105]}]},{"pos":[21478,21523],"content":"The return value is normally the main method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The return value is normally the main method.","pos":[0,45]}]},{"pos":[21715,21793],"content":"The metadata token for the method that is the user entry point for the module.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata token for the method that is the user entry point for the module.","pos":[0,78]}]},{"pos":[22009,22038],"content":"An entry point was not found.","needQuote":true,"needEscape":true,"nodes":[{"content":"An entry point was not found.","pos":[0,29]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.SymbolStore.SymReader\n  id: SymReader\n  children:\n  - System.Diagnostics.SymbolStore.SymReader.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)\n  - System.Diagnostics.SymbolStore.SymReader.Dispose\n  - System.Diagnostics.SymbolStore.SymReader.Dispose(System.Boolean)\n  - System.Diagnostics.SymbolStore.SymReader.Finalize\n  - System.Diagnostics.SymbolStore.SymReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Diagnostics.SymbolStore.SymReader.GetDocuments\n  - System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables\n  - System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)\n  - System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)\n  - System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  - System.Diagnostics.SymbolStore.SymReader.GetNamespaces\n  - System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)\n  - System.Diagnostics.SymbolStore.SymReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)\n  - System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(System.String,System.IntPtr)\n  - System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(System.String,System.IntPtr)\n  - System.Diagnostics.SymbolStore.SymReader.UserEntryPoint\n  langs:\n  - csharp\n  name: SymReader\n  nameWithType: SymReader\n  fullName: System.Diagnostics.SymbolStore.SymReader\n  type: Class\n  summary: Provides access to documents, methods, and variables within a symbol store.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SymReader : System.Diagnostics.SymbolStore.SymReaderBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolReader\n  inheritance:\n  - System.Object\n  - System.Diagnostics.SymbolStore.SymReaderBase\n  implements:\n  - System.Diagnostics.SymbolStore.ISymbolReader\n  - System.IDisposable\n  inheritedMembers:\n  - System.Diagnostics.SymbolStore.SymReaderBase.{dtor}\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)\n  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)'\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: SymReader(ISymUnmanagedReader*)\n  nameWithType: SymReader.SymReader(ISymUnmanagedReader*)\n  fullName: System.Diagnostics.SymbolStore.SymReader.SymReader(ISymUnmanagedReader*)\n  type: Constructor\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public SymReader (System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader* pReader);\n    parameters:\n    - id: pReader\n      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*\n      description: To be added.\n  overload: System.Diagnostics.SymbolStore.SymReader.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.Dispose\n  id: Dispose\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SymReader.Dispose()\n  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymReader\"></xref> class.\n  syntax:\n    content: public override sealed void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.SymbolStore.SymReader.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SymReader.Dispose(Boolean)\n  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Called by the <xref:System.Diagnostics.SymbolStore.SymReader.Dispose*> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize*> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymReader\"></xref> class.\n  remarks: This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymReader.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize%2A> methods; do not call this method directly.\n  syntax:\n    content: protected virtual void Dispose (bool A_0);\n    parameters:\n    - id: A_0\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Diagnostics.SymbolStore.SymReader.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.Finalize\n  id: Finalize\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SymReader.Finalize()\n  fullName: System.Diagnostics.SymbolStore.SymReader.Finalize()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymReader\"></xref> is reclaimed by garbage collection.\n  remarks: This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.\n  syntax:\n    content: ~SymReader ();\n    parameters: []\n  overload: System.Diagnostics.SymbolStore.SymReader.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)\n  id: GetDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetDocument(String,Guid,Guid,Guid)\n  nameWithType: SymReader.GetDocument(String,Guid,Guid,Guid)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocument(String,Guid,Guid,Guid)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets a document specified by the URL for the document and optionally the language, language vendor, and type.\n  remarks: The `language`, `languageVendor`, and `documentType` parameters are currently ignored.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolDocument GetDocument (string url, Guid language, Guid languageVendor, Guid documentType);\n    parameters:\n    - id: url\n      type: System.String\n      description: The URL that identifies the document.\n    - id: language\n      type: System.Guid\n      description: The document language. You can specify this parameter as <xref:System.Guid>. to indicate any language.\n    - id: languageVendor\n      type: System.Guid\n      description: The identity of the vendor for the document language. You can specify this parameter as <xref:System.Guid> to indicate any language vendor.\n    - id: documentType\n      type: System.Guid\n      description: The type of the document. You can specify this parameter as <xref:System.Guid> to indicate any document type.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolDocument\n      description: The document with the specified URL if found in the symbol store, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the document does not exist.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetDocument*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetDocuments\n  id: GetDocuments\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetDocuments()\n  nameWithType: SymReader.GetDocuments()\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocuments()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets an array of all documents defined in the symbol store.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolDocument[] GetDocuments ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolDocument[]\n      description: An array of all documents defined in the symbol store.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetDocuments*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables\n  id: GetGlobalVariables\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetGlobalVariables()\n  nameWithType: SymReader.GetGlobalVariables()\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref:System.NotSupportedException> in all cases.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetGlobalVariables ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolVariable[]\n      description: Throws a <xref:System.NotSupportedException> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)\n  id: GetMethod(System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetMethod(SymbolToken)\n  nameWithType: SymReader.GetMethod(SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets a symbol reader method object when given the identifier of a method.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod GetMethod (System.Diagnostics.SymbolStore.SymbolToken method);\n    parameters:\n    - id: method\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: The metadata token of the method.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolMethod\n      description: The symbol reader method object for the specified method identifier.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)\n  id: GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetMethod(SymbolToken,Int32)\n  nameWithType: SymReader.GetMethod(SymbolToken,Int32)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken,Int32)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets a symbol reader method object when given the identifier of a method and its edit and continue version.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod GetMethod (System.Diagnostics.SymbolStore.SymbolToken method, int version);\n    parameters:\n    - id: method\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: The metadata token of the method.\n    - id: version\n      type: System.Int32\n      description: The edit and continue version of the method.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolMethod\n      description: The symbol reader method object for the specified method identifier and version.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  id: GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)\n  nameWithType: SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets a symbol reader method object that contains a specified position in a document.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod GetMethodFromDocumentPosition (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);\n    parameters:\n    - id: document\n      type: System.Diagnostics.SymbolStore.ISymbolDocument\n      description: The document in which the method is located.\n    - id: line\n      type: System.Int32\n      description: The position of the line within the document. The lines are numbered, beginning with 1.\n    - id: column\n      type: System.Int32\n      description: The position of column within the document. The columns are numbered, beginning with 1.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolMethod\n      description: The symbol reader method object for the specified position in the document.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetNamespaces\n  id: GetNamespaces\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetNamespaces()\n  nameWithType: SymReader.GetNamespaces()\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetNamespaces()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref:System.NotSupportedException> in all cases.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n      description: Throws a <xref:System.NotSupportedException> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetNamespaces*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)\n  id: GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetSymAttribute(SymbolToken,String)\n  nameWithType: SymReader.GetSymAttribute(SymbolToken,String)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(SymbolToken,String)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref:System.NotSupportedException> in all cases.\n  syntax:\n    content: public virtual byte[] GetSymAttribute (System.Diagnostics.SymbolStore.SymbolToken parent, string name);\n    parameters:\n    - id: parent\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: This parameter is not used.\n    - id: name\n      type: System.String\n      description: This parameter is not used.\n    return:\n      type: System.Byte[]\n      description: Throws a <xref:System.NotSupportedException> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)\n  id: GetVariables(System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: GetVariables(SymbolToken)\n  nameWithType: SymReader.GetVariables(SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetVariables(SymbolToken)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref:System.NotSupportedException> in all cases.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetVariables (System.Diagnostics.SymbolStore.SymbolToken parent);\n    parameters:\n    - id: parent\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: This parameter is not used.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolVariable[]\n      description: Throws a <xref:System.NotSupportedException> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymReader.GetVariables*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(System.String,System.IntPtr)\n  id: ReplaceSymbolStore(System.String,System.IntPtr)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: ReplaceSymbolStore(String,IntPtr)\n  nameWithType: SymReader.ReplaceSymbolStore(String,IntPtr)\n  fullName: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(String,IntPtr)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Replaces the existing symbol store with a delta symbol store.\n  remarks: \"The ReplaceSymbolStore is much like the <xref:System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore%2A> method, but the given delta acts as a complete replacement rather than an update.  \\n  \\n Only one of the parameters, `fileName` or `stream`, needs to be specified. If `fileName` is specified, the symbol store is updated with the symbols in that file. If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> .\"\n  syntax:\n    content: public virtual void ReplaceSymbolStore (string fileName, IntPtr stream);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file containing the symbol store, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if using an in-memory store.\n    - id: stream\n      type: System.IntPtr\n      description: The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store.\n  overload: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(System.String,System.IntPtr)\n  id: UpdateSymbolStore(System.String,System.IntPtr)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: UpdateSymbolStore(String,IntPtr)\n  nameWithType: SymReader.UpdateSymbolStore(String,IntPtr)\n  fullName: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(String,IntPtr)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Updates the existing symbol store with a delta symbol store.\n  remarks: \"This method is used in Edit and Continue scenarios as a way to update the symbol store to match deltas to the original PE file.  \\n  \\n Only one of the parameters, `fileName` or `stream`, needs to be specified. If `fileName` is specified, the symbol store is updated with the symbols in that file. If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> .\"\n  syntax:\n    content: public virtual void UpdateSymbolStore (string fileName, IntPtr stream);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file containing the symbol store, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if using an in-memory store.\n    - id: stream\n      type: System.IntPtr\n      description: The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store.\n  overload: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint\n  id: UserEntryPoint\n  parent: System.Diagnostics.SymbolStore.SymReader\n  langs:\n  - csharp\n  name: UserEntryPoint\n  nameWithType: SymReader.UserEntryPoint\n  fullName: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the metadata token for the method that was specified as the user entry point for the module, if any.\n  remarks: The return value is normally the main method.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.SymbolToken UserEntryPoint { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: The metadata token for the method that is the user entry point for the module.\n  overload: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An entry point was not found.\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.SymbolStore.SymReaderBase\n  isExternal: false\n  name: System.Diagnostics.SymbolStore.SymReaderBase\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Runtime.InteropServices.COMException\n  isExternal: true\n  name: System.Runtime.InteropServices.COMException\n- uid: System.Diagnostics.SymbolStore.SymReader.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: SymReader(ISymUnmanagedReader*)\n  nameWithType: SymReader.SymReader(ISymUnmanagedReader*)\n  fullName: System.Diagnostics.SymbolStore.SymReader.SymReader(ISymUnmanagedReader*)\n- uid: System.Diagnostics.SymbolStore.SymReader.Dispose\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymReader.Dispose()\n  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose()\n- uid: System.Diagnostics.SymbolStore.SymReader.Dispose(System.Boolean)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymReader.Dispose(Boolean)\n  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.SymReader.Finalize\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: Finalize()\n  nameWithType: SymReader.Finalize()\n  fullName: System.Diagnostics.SymbolStore.SymReader.Finalize()\n- uid: System.Diagnostics.SymbolStore.SymReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetDocument(String,Guid,Guid,Guid)\n  nameWithType: SymReader.GetDocument(String,Guid,Guid,Guid)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocument(String,Guid,Guid,Guid)\n- uid: System.Diagnostics.SymbolStore.ISymbolDocument\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocument\n  nameWithType: ISymbolDocument\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocument\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.SymbolStore.SymReader.GetDocuments\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetDocuments()\n  nameWithType: SymReader.GetDocuments()\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocuments()\n- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocument\n  nameWithType: ISymbolDocument\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolDocument\n    name: ISymbolDocument\n    nameWithType: ISymbolDocument\n    fullName: ISymbolDocument[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetGlobalVariables()\n  nameWithType: SymReader.GetGlobalVariables()\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables()\n- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolVariable\n  nameWithType: ISymbolVariable\n  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolVariable\n    name: ISymbolVariable\n    nameWithType: ISymbolVariable\n    fullName: ISymbolVariable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetMethod(SymbolToken)\n  nameWithType: SymReader.GetMethod(SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken)\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolMethod\n  nameWithType: ISymbolMethod\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetMethod(SymbolToken,Int32)\n  nameWithType: SymReader.GetMethod(SymbolToken,Int32)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)\n  nameWithType: SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)\n- uid: System.Diagnostics.SymbolStore.SymReader.GetNamespaces\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetNamespaces()\n  nameWithType: SymReader.GetNamespaces()\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetNamespaces()\n- uid: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolNamespace\n  nameWithType: ISymbolNamespace\n  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolNamespace\n    name: ISymbolNamespace\n    nameWithType: ISymbolNamespace\n    fullName: ISymbolNamespace[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetSymAttribute(SymbolToken,String)\n  nameWithType: SymReader.GetSymAttribute(SymbolToken,String)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(SymbolToken,String)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetVariables(SymbolToken)\n  nameWithType: SymReader.GetVariables(SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymReader.GetVariables(SymbolToken)\n- uid: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(System.String,System.IntPtr)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: ReplaceSymbolStore(String,IntPtr)\n  nameWithType: SymReader.ReplaceSymbolStore(String,IntPtr)\n  fullName: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(String,IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(System.String,System.IntPtr)\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: UpdateSymbolStore(String,IntPtr)\n  nameWithType: SymReader.UpdateSymbolStore(String,IntPtr)\n  fullName: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(String,IntPtr)\n- uid: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: UserEntryPoint\n  nameWithType: SymReader.UserEntryPoint\n  fullName: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint\n- uid: System.Diagnostics.SymbolStore.SymReader.#ctor*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: SymReader\n  nameWithType: SymReader.SymReader\n- uid: System.Diagnostics.SymbolStore.SymReader.Dispose*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: Dispose\n  nameWithType: SymReader.Dispose\n- uid: System.Diagnostics.SymbolStore.SymReader.Finalize*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: Finalize\n  nameWithType: SymReader.Finalize\n- uid: System.Diagnostics.SymbolStore.SymReader.GetDocument*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetDocument\n  nameWithType: SymReader.GetDocument\n- uid: System.Diagnostics.SymbolStore.SymReader.GetDocuments*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetDocuments\n  nameWithType: SymReader.GetDocuments\n- uid: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetGlobalVariables\n  nameWithType: SymReader.GetGlobalVariables\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetMethod\n  nameWithType: SymReader.GetMethod\n- uid: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetMethodFromDocumentPosition\n  nameWithType: SymReader.GetMethodFromDocumentPosition\n- uid: System.Diagnostics.SymbolStore.SymReader.GetNamespaces*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetNamespaces\n  nameWithType: SymReader.GetNamespaces\n- uid: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetSymAttribute\n  nameWithType: SymReader.GetSymAttribute\n- uid: System.Diagnostics.SymbolStore.SymReader.GetVariables*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: GetVariables\n  nameWithType: SymReader.GetVariables\n- uid: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: ReplaceSymbolStore\n  nameWithType: SymReader.ReplaceSymbolStore\n- uid: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: UpdateSymbolStore\n  nameWithType: SymReader.UpdateSymbolStore\n- uid: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint*\n  parent: System.Diagnostics.SymbolStore.SymReader\n  isExternal: false\n  name: UserEntryPoint\n  nameWithType: SymReader.UserEntryPoint\n"}