{"nodes":[{"pos":[679,812],"content":"Contains properties and methods that when implemented by a <xref:System.Xml.XmlDictionaryWriter>, allows processing of XML fragments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains properties and methods that when implemented by a &lt;xref:System.Xml.XmlDictionaryWriter&gt;, allows processing of XML fragments.","pos":[0,133],"source":"Contains properties and methods that when implemented by a <xref:System.Xml.XmlDictionaryWriter>, allows processing of XML fragments."}]},{"pos":[824,1169],"content":"This class defines the properties and methods related to the capability of an <xref:System.Xml.XmlDictionaryWriter> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class defines the properties and methods related to the capability of an &lt;xref:System.Xml.XmlDictionaryWriter&gt; to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.","pos":[0,345],"source":"This class defines the properties and methods related to the capability of an <xref:System.Xml.XmlDictionaryWriter> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point."}]},{"pos":[1701,1806],"content":"Gets a value that indicates whether this <xref:System.Xml.XmlDictionaryWriter> can process XML fragments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether this &lt;xref:System.Xml.XmlDictionaryWriter&gt; can process XML fragments.","pos":[0,105],"source":"Gets a value that indicates whether this <xref:System.Xml.XmlDictionaryWriter> can process XML fragments."}]},{"pos":[1818,1916],"content":"Returns t<ph id=\"ph1\">`r`</ph>ue if the writer that implements this interface can generate and accept XML fragments.","needQuote":true,"needEscape":true,"source":"Returns t`r`ue if the writer that implements this interface can generate and accept XML fragments."},{"pos":[2031,2239],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this &lt;xref:System.Xml.XmlDictionaryWriter&gt; can process XML fragments; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref:System.Xml.XmlDictionaryWriter> can process XML fragments; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[2771,2810],"content":"Ends the processing of an XML fragment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends the processing of an XML fragment.","pos":[0,39]}]},{"pos":[2822,3029],"content":"Stops redirecting output to the stream supplied by the matching `StartFragment` call. After this call, the XML writing output goes to the stream originally used by the writer before the `StartFragment` call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops redirecting output to the stream supplied by the matching <ph id=\"ph1\">`StartFragment`</ph> call.","pos":[0,85],"source":"Stops redirecting output to the stream supplied by the matching `StartFragment` call."},{"content":"After this call, the XML writing output goes to the stream originally used by the writer before the <ph id=\"ph1\">`StartFragment`</ph> call.","pos":[86,207],"source":" After this call, the XML writing output goes to the stream originally used by the writer before the `StartFragment` call."}]},{"pos":[3749,3790],"content":"Starts the processing of an XML fragment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts the processing of an XML fragment.","pos":[0,41]}]},{"pos":[3802,4115],"content":"Temporarily starts redirecting the writing of the XML output to the supplied stream until `EndFragment` is called. If `generateSelfContainedTextFragment` is `true`, then the redirected XML output is always text XML and is self-contained in terms of its namespace context. `StartFragment`() calls cannot be nested.","needQuote":true,"needEscape":true,"nodes":[{"content":"Temporarily starts redirecting the writing of the XML output to the supplied stream until <ph id=\"ph1\">`EndFragment`</ph> is called.","pos":[0,114],"source":"Temporarily starts redirecting the writing of the XML output to the supplied stream until `EndFragment` is called."},{"content":"If <ph id=\"ph1\">`generateSelfContainedTextFragment`</ph> is <ph id=\"ph2\">`true`</ph>, then the redirected XML output is always text XML and is self-contained in terms of its namespace context.","pos":[115,271],"source":" If `generateSelfContainedTextFragment` is `true`, then the redirected XML output is always text XML and is self-contained in terms of its namespace context."},{"content":"<ph id=\"ph1\">`StartFragment`</ph>() calls cannot be nested.","pos":[272,313],"source":"`StartFragment`() calls cannot be nested."}]},{"pos":[4313,4336],"content":"The stream to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to write to.","pos":[0,23]}]},{"pos":[4427,4681],"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, any namespaces declared outside the fragment is declared again if used inside of it; if <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> the namespaces are not declared again.","needQuote":true,"needEscape":true,"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, any namespaces declared outside the fragment is declared again if used inside of it; if <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> the namespaces are not declared again."},{"pos":[5361,5423],"content":"Writes an XML fragment to the underlying stream of the writer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an XML fragment to the underlying stream of the writer.","pos":[0,62]}]},{"pos":[5435,5755],"content":"Writes a fragment captured between `StartFragment` and `EndFragment` and calls back into the XmlDictionaryWriter's main stream. The fragment written is `count` bytes starting at the index `offset` from the supplied `buffer`. The behavior is undefined if the supplied fragment was not captured using this writer instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a fragment captured between <ph id=\"ph1\">`StartFragment`</ph> and <ph id=\"ph2\">`EndFragment`</ph> and calls back into the XmlDictionaryWriter's main stream.","pos":[0,127],"source":"Writes a fragment captured between `StartFragment` and `EndFragment` and calls back into the XmlDictionaryWriter's main stream."},{"content":"The fragment written is <ph id=\"ph1\">`count`</ph> bytes starting at the index <ph id=\"ph2\">`offset`</ph> from the supplied <ph id=\"ph3\">`buffer`</ph>.","pos":[128,224],"source":" The fragment written is `count` bytes starting at the index `offset` from the supplied `buffer`."},{"content":"The behavior is undefined if the supplied fragment was not captured using this writer instance.","pos":[225,320]}]},{"pos":[6876,6899],"content":"The buffer to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to write to.","pos":[0,23]}]},{"pos":[6961,7015],"content":"The starting position from which to write in <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"The starting position from which to write in `buffer`."},{"pos":[7076,7126],"content":"The number of bytes to be written to the <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"The number of bytes to be written to the `buffer`."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter\n  id: IFragmentCapableXmlDictionaryWriter\n  children:\n  - System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment\n  - System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment\n  - System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)\n  - System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: IFragmentCapableXmlDictionaryWriter\n  nameWithType: IFragmentCapableXmlDictionaryWriter\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter\n  type: Interface\n  summary: Contains properties and methods that when implemented by a <xref:System.Xml.XmlDictionaryWriter>, allows processing of XML fragments.\n  remarks: This class defines the properties and methods related to the capability of an <xref:System.Xml.XmlDictionaryWriter> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.\n  syntax:\n    content: public interface IFragmentCapableXmlDictionaryWriter\n  implements: []\n  platform:\n  - net462\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment\n  id: CanFragment\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  langs:\n  - csharp\n  name: CanFragment\n  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization\n  namespace: System.Xml\n  summary: Gets a value that indicates whether this <xref:System.Xml.XmlDictionaryWriter> can process XML fragments.\n  remarks: Returns t`r`ue if the writer that implements this interface can generate and accept XML fragments.\n  syntax:\n    content: public bool CanFragment { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref:System.Xml.XmlDictionaryWriter> can process XML fragments; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment\n  id: EndFragment\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  langs:\n  - csharp\n  name: EndFragment()\n  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment()\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment()\n  type: Method\n  assemblies:\n  - System.Runtime.Serialization\n  namespace: System.Xml\n  summary: Ends the processing of an XML fragment.\n  remarks: Stops redirecting output to the stream supplied by the matching `StartFragment` call. After this call, the XML writing output goes to the stream originally used by the writer before the `StartFragment` call.\n  syntax:\n    content: public void EndFragment ();\n    parameters: []\n  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)\n  id: StartFragment(System.IO.Stream,System.Boolean)\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  langs:\n  - csharp\n  name: StartFragment(Stream,Boolean)\n  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Serialization\n  namespace: System.Xml\n  summary: Starts the processing of an XML fragment.\n  remarks: Temporarily starts redirecting the writing of the XML output to the supplied stream until `EndFragment` is called. If `generateSelfContainedTextFragment` is `true`, then the redirected XML output is always text XML and is self-contained in terms of its namespace context. `StartFragment`() calls cannot be nested.\n  syntax:\n    content: public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to write to.\n    - id: generateSelfContainedTextFragment\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, any namespaces declared outside the fragment is declared again if used inside of it; if <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> the namespaces are not declared again.\n  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)\n  id: WriteFragment(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  langs:\n  - csharp\n  name: WriteFragment(Byte[],Int32,Int32)\n  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Serialization\n  namespace: System.Xml\n  summary: Writes an XML fragment to the underlying stream of the writer.\n  remarks: Writes a fragment captured between `StartFragment` and `EndFragment` and calls back into the XmlDictionaryWriter's main stream. The fragment written is `count` bytes starting at the index `offset` from the supplied `buffer`. The behavior is undefined if the supplied fragment was not captured using this writer instance.\n  example:\n  - \"```  \\nMemoryStream stream = new MemoryStream();  \\nMemoryStream fragmentStream = new MemoryStream();  \\nXmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  \\nIXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  \\nif (fragmentWriter == null || !fragmentWriter.CanFragment)  \\n{  \\nConsole.WriteLine(\\\"This writer doesn't support fragments\\\");  \\nreturn;  \\n}  \\nwriter.WriteStartElement(\\\"Root\\\");  \\nfragmentWriter.StartFragment(fragmentStream, false);  \\nwriter.WriteStartElement(\\\"Body\\\");  \\nwriter.WriteString(\\\"This is my body\\\");  \\nwriter.WriteEndElement();  \\nfragmentWriter.EndFragment();  \\nwriter.WriteStartElement(\\\"CharsInTheBody\\\");  \\nwriter.WriteValue(fragmentStream.Length);  \\nwriter.WriteEndElement();  \\nfragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  \\nwriter.WriteEndElement(); // Root  \\n```\"\n  syntax:\n    content: public void WriteFragment (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write to.\n    - id: offset\n      type: System.Int32\n      description: The starting position from which to write in `buffer`.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to be written to the `buffer`.\n  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: CanFragment\n  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: EndFragment()\n  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment()\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment()\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: StartFragment(Stream,Boolean)\n  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: WriteFragment(Byte[],Int32,Int32)\n  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)\n  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment*\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: CanFragment\n  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment*\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: EndFragment\n  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment*\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: StartFragment\n  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment\n- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment*\n  parent: System.Xml.IFragmentCapableXmlDictionaryWriter\n  isExternal: false\n  name: WriteFragment\n  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment\n"}