{"nodes":[{"pos":[918,1055],"content":"Represents the encrypted key encrypting credentials. These are usually used as data encrypting credentials to encrypt things like tokens.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the encrypted key encrypting credentials. These are usually used as data encrypting credentials to encrypt things like tokens.","pos":[0,137],"nodes":[{"content":"Represents the encrypted key encrypting credentials.","pos":[0,52]},{"content":"These are usually used as data encrypting credentials to encrypt things like tokens.","pos":[53,137]}]}]},{"pos":[2241,2405],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified X.509 certificate.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"></xref> class based on the specified X.509 certificate."},{"pos":[2417,2609],"content":"Use this constructor if the wrapping credential is an X.509 certificate and you want to use the default wrapping algorithm and encryption algorithm, which are RSA-OAEP and AES256 respectively.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if the wrapping credential is an X.509 certificate and you want to use the default wrapping algorithm and encryption algorithm, which are RSA-OAEP and AES256 respectively.","pos":[0,192]}]},{"pos":[2884,2924],"content":"The certificate used to encrypt the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The certificate used to encrypt the key.","pos":[0,40]}]},{"pos":[3836,4096],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object, key size, and encryption algorithm.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"></xref> class based on the specified <xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"></xref> object, key size, and encryption algorithm."},{"pos":[4108,4264],"content":"Use this constructor if you already have an <xref:System.IdentityModel.Tokens.EncryptingCredentials> object and you want to use it as a wrapping credential.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if you already have an &lt;xref:System.IdentityModel.Tokens.EncryptingCredentials&gt; object and you want to use it as a wrapping credential.","pos":[0,156],"source":"Use this constructor if you already have an <xref:System.IdentityModel.Tokens.EncryptingCredentials> object and you want to use it as a wrapping credential."}]},{"pos":[4576,4637],"content":"The key wrapping credentials used to encrypt the session key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key wrapping credentials used to encrypt the session key.","pos":[0,61]}]},{"pos":[4706,4746],"content":"The key size of the wrapped session key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key size of the wrapped session key.","pos":[0,40]}]},{"pos":[4822,4940],"content":"A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.","pos":[0,118],"nodes":[{"content":"A URI that represents the encryption algorithm when the session key is used.","pos":[0,76]},{"content":"This should be a symmetric key algorithm.","pos":[77,118]}]}]},{"pos":[5138,5235],"content":"<ph id=\"ph1\">&lt;code&gt;wrappingCredentials&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>wrappingCredentials</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6109,6329],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified X.509 certificate, wrapping algorithm, key size, and encryption algorithm.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"></xref> class based on the specified X.509 certificate, wrapping algorithm, key size, and encryption algorithm."},{"pos":[6341,6489],"content":"Use this constructor if the wrapping credential is an X.509 certificate and you want to supply your own wrapping algorithm and encryption algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if the wrapping credential is an X.509 certificate and you want to supply your own wrapping algorithm and encryption algorithm.","pos":[0,148]}]},{"pos":[6840,6880],"content":"The certificate used to encrypt the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The certificate used to encrypt the key.","pos":[0,40]}]},{"pos":[6957,7046],"content":"A URI that represents the key wrapping algorithm. This should be an asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI that represents the key wrapping algorithm. This should be an asymmetric algorithm.","pos":[0,89],"nodes":[{"content":"A URI that represents the key wrapping algorithm.","pos":[0,49]},{"content":"This should be an asymmetric algorithm.","pos":[50,89]}]}]},{"pos":[7115,7155],"content":"The key size of the wrapped session key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key size of the wrapped session key.","pos":[0,40]}]},{"pos":[7231,7349],"content":"A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.","pos":[0,118],"nodes":[{"content":"A URI that represents the encryption algorithm when the session key is used.","pos":[0,76]},{"content":"This should be a symmetric key algorithm.","pos":[77,118]}]}]},{"pos":[7978,8133],"content":"Gets the key wrapping credentials used to encrypt the session key; for example, <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.X509EncryptingCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the key wrapping credentials used to encrypt the session key; for example, <xref href=\"System.IdentityModel.Tokens.X509EncryptingCredentials\"></xref>."},{"pos":[8336,8474],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the credentials used to encrypt the session key.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"></xref> that represents the credentials used to encrypt the session key."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  id: EncryptedKeyEncryptingCredentials\n  children:\n  - System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)\n  - System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)\n  - System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials\n  langs:\n  - csharp\n  name: EncryptedKeyEncryptingCredentials\n  nameWithType: EncryptedKeyEncryptingCredentials\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  type: Class\n  summary: Represents the encrypted key encrypting credentials. These are usually used as data encrypting credentials to encrypt things like tokens.\n  syntax:\n    content: 'public class EncryptedKeyEncryptingCredentials : System.IdentityModel.Tokens.EncryptingCredentials'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.EncryptingCredentials\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.EncryptingCredentials.Algorithm\n  - System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey\n  - System.IdentityModel.Tokens.EncryptingCredentials.SecurityKeyIdentifier\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)'\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  langs:\n  - csharp\n  name: EncryptedKeyEncryptingCredentials(X509Certificate2)\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2)\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"></xref> class based on the specified X.509 certificate.\n  remarks: Use this constructor if the wrapping credential is an X.509 certificate and you want to use the default wrapping algorithm and encryption algorithm, which are RSA-OAEP and AES256 respectively.\n  syntax:\n    content: public EncryptedKeyEncryptingCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The certificate used to encrypt the key.\n  overload: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)\n  id: '#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)'\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  langs:\n  - csharp\n  name: EncryptedKeyEncryptingCredentials(EncryptingCredentials,Int32,String)\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(EncryptingCredentials,Int32,String)\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(EncryptingCredentials,Int32,String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"></xref> class based on the specified <xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"></xref> object, key size, and encryption algorithm.\n  remarks: Use this constructor if you already have an <xref:System.IdentityModel.Tokens.EncryptingCredentials> object and you want to use it as a wrapping credential.\n  syntax:\n    content: public EncryptedKeyEncryptingCredentials (System.IdentityModel.Tokens.EncryptingCredentials wrappingCredentials, int keySizeInBits, string encryptionAlgorithm);\n    parameters:\n    - id: wrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key wrapping credentials used to encrypt the session key.\n    - id: keySizeInBits\n      type: System.Int32\n      description: The key size of the wrapped session key.\n    - id: encryptionAlgorithm\n      type: System.String\n      description: A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.\n  overload: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>wrappingCredentials</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)'\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  langs:\n  - csharp\n  name: EncryptedKeyEncryptingCredentials(X509Certificate2,String,Int32,String)\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2,String,Int32,String)\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2,String,Int32,String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\"></xref> class based on the specified X.509 certificate, wrapping algorithm, key size, and encryption algorithm.\n  remarks: Use this constructor if the wrapping credential is an X.509 certificate and you want to supply your own wrapping algorithm and encryption algorithm.\n  syntax:\n    content: public EncryptedKeyEncryptingCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string keyWrappingAlgorithm, int keySizeInBits, string encryptionAlgorithm);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The certificate used to encrypt the key.\n    - id: keyWrappingAlgorithm\n      type: System.String\n      description: A URI that represents the key wrapping algorithm. This should be an asymmetric algorithm.\n    - id: keySizeInBits\n      type: System.Int32\n      description: The key size of the wrapped session key.\n    - id: encryptionAlgorithm\n      type: System.String\n      description: A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.\n  overload: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials\n  id: WrappingCredentials\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  langs:\n  - csharp\n  name: WrappingCredentials\n  nameWithType: EncryptedKeyEncryptingCredentials.WrappingCredentials\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the key wrapping credentials used to encrypt the session key; for example, <xref href=\"System.IdentityModel.Tokens.X509EncryptingCredentials\"></xref>.\n  syntax:\n    content: public System.IdentityModel.Tokens.EncryptingCredentials WrappingCredentials { get; }\n    return:\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: An <xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"></xref> that represents the credentials used to encrypt the session key.\n  overload: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.EncryptingCredentials\n  isExternal: false\n  name: System.IdentityModel.Tokens.EncryptingCredentials\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  isExternal: false\n  name: EncryptedKeyEncryptingCredentials(X509Certificate2)\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2)\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  isExternal: false\n  name: EncryptedKeyEncryptingCredentials(EncryptingCredentials,Int32,String)\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(EncryptingCredentials,Int32,String)\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(EncryptingCredentials,Int32,String)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  isExternal: false\n  name: EncryptedKeyEncryptingCredentials(X509Certificate2,String,Int32,String)\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2,String,Int32,String)\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials(X509Certificate2,String,Int32,String)\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  isExternal: false\n  name: WrappingCredentials\n  nameWithType: EncryptedKeyEncryptingCredentials.WrappingCredentials\n  fullName: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor*\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  isExternal: false\n  name: EncryptedKeyEncryptingCredentials\n  nameWithType: EncryptedKeyEncryptingCredentials.EncryptedKeyEncryptingCredentials\n- uid: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials*\n  parent: System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials\n  isExternal: false\n  name: WrappingCredentials\n  nameWithType: EncryptedKeyEncryptingCredentials.WrappingCredentials\n"}