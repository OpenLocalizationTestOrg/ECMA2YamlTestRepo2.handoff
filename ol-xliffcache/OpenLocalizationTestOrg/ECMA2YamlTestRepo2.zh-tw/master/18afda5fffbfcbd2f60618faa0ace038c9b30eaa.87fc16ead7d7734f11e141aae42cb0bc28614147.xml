{"nodes":[{"pos":[1802,1814],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1846,1858],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5668,5680],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6712,6724],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6823,6835],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7944,7956],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8055,8067],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8150,8162],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8893,8905],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8956,8968],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10292,10304],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10363,10375],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11115,11127],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11847,11859],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11905,11917],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12692,12704],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12753,12765],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13426,13438],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13484,13496],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14157,14169],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14228,14240],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14988,15000],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15754,15766],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15815,15827],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2\n  id: SynchronizedKeyedCollection`2\n  children:\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)\n  - System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)\n  langs:\n  - csharp\n  name: SynchronizedKeyedCollection<K,T>\n  nameWithType: SynchronizedKeyedCollection<K,T>\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public abstract class SynchronizedKeyedCollection<K,T> : System.Collections.Generic.SynchronizedCollection<T>\n    typeParameters:\n    - id: K\n      description: To be added.\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Collections.Generic.SynchronizedCollection`1\n  implements: []\n  inheritedMembers:\n  - System.Collections.Generic.SynchronizedCollection`1.Add(`0)\n  - System.Collections.Generic.SynchronizedCollection`1.Clear\n  - System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.SynchronizedCollection`1.Count\n  - System.Collections.Generic.SynchronizedCollection`1.GetEnumerator\n  - System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)\n  - System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)\n  - System.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)\n  - System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)\n  - System.Collections.Generic.SynchronizedCollection`1.Items\n  - System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)\n  - System.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)\n  - System.Collections.Generic.SynchronizedCollection`1.SyncRoot\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: SynchronizedKeyedCollection()\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection()\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected SynchronizedKeyedCollection ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: SynchronizedKeyedCollection(Object)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected SynchronizedKeyedCollection (object syncRoot);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: SynchronizedKeyedCollection(Object,IEqualityComparer<K>)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected SynchronizedKeyedCollection (object syncRoot, System.Collections.Generic.IEqualityComparer<K> comparer);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: To be added.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{K}\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)\n  id: '#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)'\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: SynchronizedKeyedCollection(Object,IEqualityComparer<K>,Int32)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>,Int32)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>,Int32)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected SynchronizedKeyedCollection (object syncRoot, System.Collections.Generic.IEqualityComparer<K> comparer, int dictionaryCreationThreshold);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: To be added.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{K}\n      description: To be added.\n    - id: dictionaryCreationThreshold\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)\n  id: ChangeItemKey(`1,`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: ChangeItemKey(T,K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.ChangeItemKey(T,K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.ChangeItemKey(T,K)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected void ChangeItemKey (T item, K newKey);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    - id: newKey\n      type: K\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems\n  id: ClearItems\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: ClearItems()\n  nameWithType: SynchronizedKeyedCollection<K,T>.ClearItems()\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.ClearItems()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override void ClearItems ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: Contains(K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.Contains(K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Contains(K)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Contains (K key);\n    parameters:\n    - id: key\n      type: K\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary\n  id: Dictionary\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: Dictionary\n  nameWithType: SynchronizedKeyedCollection<K,T>.Dictionary\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Dictionary\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected System.Collections.Generic.IDictionary<K,T> Dictionary { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{K,T}\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)\n  id: GetKeyForItem(`1)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: GetKeyForItem(T)\n  nameWithType: SynchronizedKeyedCollection<K,T>.GetKeyForItem(T)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.GetKeyForItem(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected abstract K GetKeyForItem (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: K\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)\n  id: InsertItem(System.Int32,`1)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: InsertItem(Int32,T)\n  nameWithType: SynchronizedKeyedCollection<K,T>.InsertItem(Int32,T)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.InsertItem(Int32,T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override void InsertItem (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)\n  id: Item(`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: Item(K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.Item(K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Item(K)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T this[K key] { get; }\n    parameters:\n    - id: key\n      type: K\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: Remove(K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.Remove(K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Remove(K)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Remove (K key);\n    parameters:\n    - id: key\n      type: K\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)\n  id: RemoveItem(System.Int32)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: RemoveItem(Int32)\n  nameWithType: SynchronizedKeyedCollection<K,T>.RemoveItem(Int32)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.RemoveItem(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override void RemoveItem (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)\n  id: SetItem(System.Int32,`1)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  langs:\n  - csharp\n  name: SetItem(Int32,T)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SetItem(Int32,T)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SetItem(Int32,T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override void SetItem (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Collections.Generic.SynchronizedCollection`1\n  isExternal: false\n  name: System.Collections.Generic.SynchronizedCollection<T>\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SynchronizedKeyedCollection()\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection()\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection()\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SynchronizedKeyedCollection(Object)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SynchronizedKeyedCollection(Object,IEqualityComparer<K>)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>)\n- uid: System.Collections.Generic.IEqualityComparer{K}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEqualityComparer<K>\n  nameWithType: IEqualityComparer<K>\n  fullName: System.Collections.Generic.IEqualityComparer<K>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: IEqualityComparer<K>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: K\n    name: K\n    nameWithType: K\n    fullName: K\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SynchronizedKeyedCollection(Object,IEqualityComparer<K>,Int32)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>,Int32)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection(Object,IEqualityComparer<K>,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: ChangeItemKey(T,K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.ChangeItemKey(T,K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.ChangeItemKey(T,K)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: K\n  isExternal: true\n  name: K\n  nameWithType: K\n  fullName: K\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: ClearItems()\n  nameWithType: SynchronizedKeyedCollection<K,T>.ClearItems()\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.ClearItems()\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Contains(K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.Contains(K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Contains(K)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Dictionary\n  nameWithType: SynchronizedKeyedCollection<K,T>.Dictionary\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Dictionary\n- uid: System.Collections.Generic.IDictionary{K,T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<K,T>\n  nameWithType: IDictionary<K,T>\n  fullName: System.Collections.Generic.IDictionary<K,T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<K,T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: K\n    name: K\n    nameWithType: K\n    fullName: K\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: GetKeyForItem(T)\n  nameWithType: SynchronizedKeyedCollection<K,T>.GetKeyForItem(T)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.GetKeyForItem(T)\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: InsertItem(Int32,T)\n  nameWithType: SynchronizedKeyedCollection<K,T>.InsertItem(Int32,T)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.InsertItem(Int32,T)\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Item(K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.Item(K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Item(K)\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Remove(K)\n  nameWithType: SynchronizedKeyedCollection<K,T>.Remove(K)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.Remove(K)\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: RemoveItem(Int32)\n  nameWithType: SynchronizedKeyedCollection<K,T>.RemoveItem(Int32)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.RemoveItem(Int32)\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SetItem(Int32,T)\n  nameWithType: SynchronizedKeyedCollection<K,T>.SetItem(Int32,T)\n  fullName: System.Collections.Generic.SynchronizedKeyedCollection<K,T>.SetItem(Int32,T)\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SynchronizedKeyedCollection<K,T>\n  nameWithType: SynchronizedKeyedCollection<K,T>.SynchronizedKeyedCollection<K,T>\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: ChangeItemKey\n  nameWithType: SynchronizedKeyedCollection<K,T>.ChangeItemKey\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: ClearItems\n  nameWithType: SynchronizedKeyedCollection<K,T>.ClearItems\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Contains*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Contains\n  nameWithType: SynchronizedKeyedCollection<K,T>.Contains\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Dictionary\n  nameWithType: SynchronizedKeyedCollection<K,T>.Dictionary\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: GetKeyForItem\n  nameWithType: SynchronizedKeyedCollection<K,T>.GetKeyForItem\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: InsertItem\n  nameWithType: SynchronizedKeyedCollection<K,T>.InsertItem\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Item*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Item\n  nameWithType: SynchronizedKeyedCollection<K,T>.Item\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.Remove*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: Remove\n  nameWithType: SynchronizedKeyedCollection<K,T>.Remove\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: RemoveItem\n  nameWithType: SynchronizedKeyedCollection<K,T>.RemoveItem\n- uid: System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem*\n  parent: System.Collections.Generic.SynchronizedKeyedCollection`2\n  isExternal: false\n  name: SetItem\n  nameWithType: SynchronizedKeyedCollection<K,T>.SetItem\n"}