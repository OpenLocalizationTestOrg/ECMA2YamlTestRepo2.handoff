{"nodes":[{"pos":[1286,1381],"content":"Provides access to configuration files for client applications. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to configuration files for client applications. This class cannot be inherited.","pos":[0,95],"nodes":[{"content":"Provides access to configuration files for client applications.","pos":[0,63]},{"content":"This class cannot be inherited.","pos":[64,95]}]}]},{"pos":[1394,4976],"content":"The ConfigurationManager class enables you to access machine, application, and user configuration information. This class replaces the <xref:System.Configuration.ConfigurationSettings> class, which is deprecated. For web applications, use the <xref:System.Web.Configuration.WebConfigurationManager> class.       To use the ConfigurationManager class, your project must reference the `System.Configuration` assembly. By default, some project templates, like Console Application, do not reference this assembly so you must manually reference it.      > [!NOTE] >  The name and location of the application configuration file depend on the application's host. For more information, see [NIB: Application Configuration Files](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0).       You can use the built-in <xref:System.Configuration> types or derive from them to handle configuration information. By using these types, you can work directly with configuration information and you can extend configuration files to include custom information.       The ConfigurationManager class includes members that enable you to perform the following tasks:      -   Read a section from a configuration file. To access configuration information, call the <xref:System.Configuration.ConfigurationManager.GetSection%2A> method. For some sections such as `appSettings` and `connectionStrings`, use the <xref:System.Configuration.ConfigurationManager.AppSettings%2A> and <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> classes. These members perform read-only operations, use a single cached instance of the configuration, and are multithread aware.      -   Read and write configuration files as a whole. Your application can read and write configuration settings at any level, for itself or for other applications or computers, locally or remotely. Use one of the methods provided by the ConfigurationManager class to open a configuration file such as SampleApp.exe.config. These methods return a <xref:System.Configuration.Configuration> object that in turn exposes methods and properties you can use to work with the associated configuration files. The methods perform read or write operations and create the configuration data every time that a file is written.      -   Support configuration tasks. The following types are used to support various configuration tasks:          -   <xref:System.Configuration.SectionInformation>          -   <xref:System.Configuration.PropertyInformation>          -   <xref:System.Configuration.PropertyInformationCollection>          -   <xref:System.Configuration.ElementInformation>          -   <xref:System.Configuration.ContextInformation>          -   <xref:System.Configuration.ConfigurationSectionGroup>          -   <xref:System.Configuration.ConfigurationSectionGroupCollection>           In addition to working with existing configuration information, you can create and work with custom configuration elements by extending the built-in configuration types such as the <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection> classes. For an example of how to extend a built-in configuration type programmatically, see <xref:System.Configuration.ConfigurationSection>. For an example of how to extend a built-in configuration type that uses the attribute-based model, see <xref:System.Configuration.ConfigurationElement>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ConfigurationManager class enables you to access machine, application, and user configuration information.","pos":[0,110]},{"content":"This class replaces the &lt;xref:System.Configuration.ConfigurationSettings&gt; class, which is deprecated.","pos":[111,212],"source":" This class replaces the <xref:System.Configuration.ConfigurationSettings> class, which is deprecated."},{"content":"For web applications, use the &lt;xref:System.Web.Configuration.WebConfigurationManager&gt; class.","pos":[213,305],"source":" For web applications, use the <xref:System.Web.Configuration.WebConfigurationManager> class."},{"content":"To use the ConfigurationManager class, your project must reference the <ph id=\"ph1\">`System.Configuration`</ph> assembly.","pos":[312,415],"source":"       To use the ConfigurationManager class, your project must reference the `System.Configuration` assembly."},{"content":"By default, some project templates, like Console Application, do not reference this assembly so you must manually reference it.","pos":[416,543]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The name and location of the application configuration file depend on the application's host.","pos":[549,655],"source":"      > [!NOTE] >  The name and location of the application configuration file depend on the application's host."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Application Configuration Files<ept id=\"p1\">](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0)</ept>.","pos":[656,791],"source":" For more information, see [NIB: Application Configuration Files](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0)."},{"content":"You can use the built-in &lt;xref:System.Configuration&gt; types or derive from them to handle configuration information.","pos":[798,913],"source":"       You can use the built-in <xref:System.Configuration> types or derive from them to handle configuration information."},{"content":"By using these types, you can work directly with configuration information and you can extend configuration files to include custom information.","pos":[914,1058]},{"content":"The ConfigurationManager class includes members that enable you to perform the following tasks:      -   Read a section from a configuration file.","pos":[1065,1211]},{"content":"To access configuration information, call the &lt;xref:System.Configuration.ConfigurationManager.GetSection%2A&gt; method.","pos":[1212,1328],"source":" To access configuration information, call the <xref:System.Configuration.ConfigurationManager.GetSection%2A> method."},{"content":"For some sections such as <ph id=\"ph1\">`appSettings`</ph> and <ph id=\"ph2\">`connectionStrings`</ph>, use the &lt;xref:System.Configuration.ConfigurationManager.AppSettings%2A&gt; and &lt;xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A&gt; classes.","pos":[1329,1548],"source":" For some sections such as `appSettings` and `connectionStrings`, use the <xref:System.Configuration.ConfigurationManager.AppSettings%2A> and <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> classes."},{"content":"These members perform read-only operations, use a single cached instance of the configuration, and are multithread aware.","pos":[1549,1670]},{"content":"-   Read and write configuration files as a whole.","pos":[1676,1726]},{"content":"Your application can read and write configuration settings at any level, for itself or for other applications or computers, locally or remotely.","pos":[1727,1871]},{"content":"Use one of the methods provided by the ConfigurationManager class to open a configuration file such as SampleApp.exe.config.","pos":[1872,1996]},{"content":"These methods return a &lt;xref:System.Configuration.Configuration&gt; object that in turn exposes methods and properties you can use to work with the associated configuration files.","pos":[1997,2173],"source":" These methods return a <xref:System.Configuration.Configuration> object that in turn exposes methods and properties you can use to work with the associated configuration files."},{"content":"The methods perform read or write operations and create the configuration data every time that a file is written.","pos":[2174,2287]},{"content":"-   Support configuration tasks.","pos":[2293,2325]},{"content":"The following types are used to support various configuration tasks:          -   &lt;xref:System.Configuration.SectionInformation&gt;          -   &lt;xref:System.Configuration.PropertyInformation&gt;          -   &lt;xref:System.Configuration.PropertyInformationCollection&gt;          -   &lt;xref:System.Configuration.ElementInformation&gt;          -   &lt;xref:System.Configuration.ContextInformation&gt;          -   &lt;xref:System.Configuration.ConfigurationSectionGroup&gt;          -   &lt;xref:System.Configuration.ConfigurationSectionGroupCollection&gt;           In addition to working with existing configuration information, you can create and work with custom configuration elements by extending the built-in configuration types such as the &lt;xref:System.Configuration.ConfigurationElement&gt;, &lt;xref:System.Configuration.ConfigurationElementCollection&gt;, &lt;xref:System.Configuration.ConfigurationProperty&gt;, and &lt;xref:System.Configuration.ConfigurationSection&gt; classes.","pos":[2326,3264],"source":" The following types are used to support various configuration tasks:          -   <xref:System.Configuration.SectionInformation>          -   <xref:System.Configuration.PropertyInformation>          -   <xref:System.Configuration.PropertyInformationCollection>          -   <xref:System.Configuration.ElementInformation>          -   <xref:System.Configuration.ContextInformation>          -   <xref:System.Configuration.ConfigurationSectionGroup>          -   <xref:System.Configuration.ConfigurationSectionGroupCollection>           In addition to working with existing configuration information, you can create and work with custom configuration elements by extending the built-in configuration types such as the <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection> classes."},{"content":"For an example of how to extend a built-in configuration type programmatically, see &lt;xref:System.Configuration.ConfigurationSection&gt;.","pos":[3265,3398],"source":" For an example of how to extend a built-in configuration type programmatically, see <xref:System.Configuration.ConfigurationSection>."},{"content":"For an example of how to extend a built-in configuration type that uses the attribute-based model, see &lt;xref:System.Configuration.ConfigurationElement&gt;.","pos":[3399,3551],"source":" For an example of how to extend a built-in configuration type that uses the attribute-based model, see <xref:System.Configuration.ConfigurationElement>."}]},{"pos":[13571,13698],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.AppSettingsSection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> data for the current application's default configuration.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Configuration.AppSettingsSection\"></xref> data for the current application's default configuration."},{"pos":[13710,13838],"content":"A &lt;xref:System.Configuration.AppSettingsSection&gt; object contains the contents of the configuration file's <ph id=\"ph1\">`appSettings`</ph> section.","needQuote":true,"needEscape":true,"source":"A <xref:System.Configuration.AppSettingsSection> object contains the contents of the configuration file's `appSettings` section."},{"pos":[19540,19783],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the contents of the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.AppSettingsSection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object for the current application's default configuration.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object that contains the contents of the <xref href=\"System.Configuration.AppSettingsSection\"></xref> object for the current application's default configuration."},{"pos":[20009,20144],"content":"Could not retrieve a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with the application settings data.","needQuote":true,"needEscape":true,"source":"Could not retrieve a <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object with the application settings data."},{"pos":[20585,20718],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConnectionStringsSection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> data for the current application's default configuration.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Configuration.ConnectionStringsSection\"></xref> data for the current application's default configuration."},{"pos":[20730,20870],"content":"A &lt;xref:System.Configuration.ConnectionStringsSection&gt; object contains the contents of the configuration file's <ph id=\"ph1\">`connectionStrings`</ph> section.","needQuote":true,"needEscape":true,"source":"A <xref:System.Configuration.ConnectionStringsSection> object contains the contents of the configuration file's `connectionStrings` section."},{"pos":[23647,23901],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConnectionStringSettingsCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the contents of the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConnectionStringsSection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object for the current application's default configuration.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Configuration.ConnectionStringSettingsCollection\"></xref> object that contains the contents of the <xref href=\"System.Configuration.ConnectionStringsSection\"></xref> object for the current application's default configuration."},{"pos":[24133,24238],"content":"Could not retrieve a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConnectionStringSettingsCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Could not retrieve a <xref href=\"System.Configuration.ConnectionStringSettingsCollection\"></xref> object."},{"pos":[24696,24792],"content":"Retrieves a specified configuration section for the current application's default configuration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves a specified configuration section for the current application's default configuration.","pos":[0,96]}]},{"pos":[24805,25638],"content":"For client applications, this method retrieves a configuration file obtained by merging the application configuration file, the local user configuration file, and the roaming configuration file.       The GetSection method accesses run-time configuration information that it cannot change. To change the configuration, you use the <xref:System.Configuration.Configuration.GetSection%2A> method on the configuration file that you obtain by using one of the following Open methods:      -   <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"For client applications, this method retrieves a configuration file obtained by merging the application configuration file, the local user configuration file, and the roaming configuration file.       The GetSection method accesses run-time configuration information that it cannot change. To change the configuration, you use the <xref:System.Configuration.Configuration.GetSection%2A> method on the configuration file that you obtain by using one of the following Open methods:      -   <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>","pos":[0,823],"nodes":[{"content":"For client applications, this method retrieves a configuration file obtained by merging the application configuration file, the local user configuration file, and the roaming configuration file.","pos":[0,194]},{"content":"The GetSection method accesses run-time configuration information that it cannot change.","pos":[201,289]},{"content":"To change the configuration, you use the &lt;xref:System.Configuration.Configuration.GetSection%2A&gt; method on the configuration file that you obtain by using one of the following Open methods:      -   &lt;xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A&gt;      -   &lt;xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A&gt;      -   &lt;xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A&gt;      -   &lt;xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A&gt;","pos":[290,823],"source":" To change the configuration, you use the <xref:System.Configuration.Configuration.GetSection%2A> method on the configuration file that you obtain by using one of the following Open methods:      -   <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>      -   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>"}]}]},{"pos":[26245,26285],"content":"The configuration section path and name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The configuration section path and name.","pos":[0,40]}]},{"pos":[26343,26522],"content":"The specified <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationSection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the section does not exist.","needQuote":true,"needEscape":true,"source":"The specified <xref href=\"System.Configuration.ConfigurationSection\"></xref> object, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the section does not exist."},{"pos":[26747,26788],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[27404,27529],"content":"Opens the configuration file for the current application as a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Opens the configuration file for the current application as a <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[27542,29027],"content":"Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users. The `userLevel` parameter determines the location of the configuration file being opened by indicating whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level).       Specify which configuration to get by passing one of the following values for `userLevel`:      -   To get the <xref:System.Configuration.Configuration> object that applies to all users, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>.      -   To get the local <xref:System.Configuration.Configuration> object that applies to the current user, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>.      -   To get the roaming <xref:System.Configuration.Configuration> object that applies to the current user, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>.          > [!NOTE]     >  To get the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.","needQuote":false,"needEscape":true,"nodes":[{"content":"Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users.","pos":[0,177]},{"content":"The <ph id=\"ph1\">`userLevel`</ph> parameter determines the location of the configuration file being opened by indicating whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level).","pos":[178,492],"source":" The `userLevel` parameter determines the location of the configuration file being opened by indicating whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level)."},{"content":"Specify which configuration to get by passing one of the following values for <ph id=\"ph1\">`userLevel`</ph>:      -   To get the &lt;xref:System.Configuration.Configuration&gt; object that applies to all users, set <ph id=\"ph2\">`userLevel`</ph> to &lt;xref:System.Configuration.ConfigurationUserLevel&gt;.","pos":[499,756],"source":"       Specify which configuration to get by passing one of the following values for `userLevel`:      -   To get the <xref:System.Configuration.Configuration> object that applies to all users, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>."},{"content":"-   To get the local &lt;xref:System.Configuration.Configuration&gt; object that applies to the current user, set <ph id=\"ph1\">`userLevel`</ph> to &lt;xref:System.Configuration.ConfigurationUserLevel&gt;.","pos":[762,936],"source":"      -   To get the local <xref:System.Configuration.Configuration> object that applies to the current user, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>."},{"content":"-   To get the roaming &lt;xref:System.Configuration.Configuration&gt; object that applies to the current user, set <ph id=\"ph1\">`userLevel`</ph> to &lt;xref:System.Configuration.ConfigurationUserLevel&gt;.","pos":[942,1118],"source":"      -   To get the roaming <xref:System.Configuration.Configuration> object that applies to the current user, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  To get the &lt;xref:System.Configuration.Configuration&gt; object for a resource, your code must have read permissions on all the configuration files from which it inherits settings.","pos":[1128,1321],"source":"          > [!NOTE]     >  To get the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings."},{"content":"To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.","pos":[1322,1474]}]},{"pos":[29623,29736],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationUserLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which you are opening the configuration.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationUserLevel\"></xref> for which you are opening the configuration."},{"pos":[29815,29880],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[30115,30156],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[30664,30778],"content":"Opens the specified client configuration file as a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Opens the specified client configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[30791,31594],"content":"Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users. The `userLevel` value determines the location of the configuration file being opened. It indicates whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level type.).       Calling this method overload is equivalent to calling the <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29> overload with the `preLoad` parameter set to `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users.","pos":[0,177]},{"content":"The <ph id=\"ph1\">`userLevel`</ph> value determines the location of the configuration file being opened.","pos":[178,263],"source":" The `userLevel` value determines the location of the configuration file being opened."},{"content":"It indicates whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level type.).","pos":[264,494]},{"content":"Calling this method overload is equivalent to calling the &lt;xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29&gt; overload with the <ph id=\"ph1\">`preLoad`</ph> parameter set to <ph id=\"ph2\">`false`</ph>.","pos":[501,801],"source":"       Calling this method overload is equivalent to calling the <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29> overload with the `preLoad` parameter set to `false`."}]},{"pos":[32125,32163],"content":"The path of the executable (exe) file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of the executable (exe) file.","pos":[0,38]}]},{"pos":[32242,32307],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[32542,32583],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[33063,33192],"content":"Opens the machine configuration file on the current computer as a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Opens the machine configuration file on the current computer as a <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[34705,34770],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[35009,35050],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[35858,36024],"content":"Opens the specified client configuration file as a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that uses the specified file mapping and user level.","needQuote":true,"needEscape":true,"source":"Opens the specified client configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object that uses the specified file mapping and user level."},{"pos":[36037,36744],"content":"The <xref:System.Configuration.ConfigurationUserLevel> object determines the location of the configuration file being opened. It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by `userLevel`).      > [!NOTE] >  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Configuration.ConfigurationUserLevel&gt; object determines the location of the configuration file being opened.","pos":[0,125],"source":"The <xref:System.Configuration.ConfigurationUserLevel> object determines the location of the configuration file being opened."},{"content":"It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by <ph id=\"ph1\">`userLevel`</ph>).","pos":[126,353],"source":" It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by `userLevel`)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To obtain the &lt;xref:System.Configuration.Configuration&gt; object for a resource, your code must have read permissions on all the configuration files from which it inherits settings.","pos":[359,551],"source":"      > [!NOTE] >  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings."},{"content":"To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.","pos":[552,704]}]},{"pos":[37473,37645],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ExeConfigurationFileMap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that references configuration file to use instead of the application default configuration file.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Configuration.ExeConfigurationFileMap\"></xref> object that references configuration file to use instead of the application default configuration file."},{"pos":[37741,37861],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationUserLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for which you are opening the configuration.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationUserLevel\"></xref> object for which you are opening the configuration."},{"pos":[37940,37965],"content":"The configuration object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The configuration object.","pos":[0,25]}]},{"pos":[38206,38247],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[39109,39292],"content":"Opens the specified client configuration file as a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that uses the specified file mapping, user level, and preload option.","needQuote":true,"needEscape":true,"source":"Opens the specified client configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object that uses the specified file mapping, user level, and preload option."},{"pos":[39305,40153],"content":"The <xref:System.Configuration.ConfigurationUserLevel> object determines the location of the configuration file that is being opened. It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path that is determined by `userLevel`).      > [!NOTE] >  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.       For a code example, see the <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> overload.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Configuration.ConfigurationUserLevel&gt; object determines the location of the configuration file that is being opened.","pos":[0,133],"source":"The <xref:System.Configuration.ConfigurationUserLevel> object determines the location of the configuration file that is being opened."},{"content":"It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path that is determined by <ph id=\"ph1\">`userLevel`</ph>).","pos":[134,369],"source":" It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path that is determined by `userLevel`)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To obtain the &lt;xref:System.Configuration.Configuration&gt; object for a resource, your code must have read permissions on all the configuration files from which it inherits settings.","pos":[375,567],"source":"      > [!NOTE] >  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings."},{"content":"To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.","pos":[568,720]},{"content":"For a code example, see the &lt;xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A&gt; overload.","pos":[727,843],"source":"       For a code example, see the <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> overload."}]},{"pos":[40489,40665],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ExeConfigurationFileMap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that references the configuration file to use instead of the default application configuration file.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Configuration.ExeConfigurationFileMap\"></xref> object that references the configuration file to use instead of the default application configuration file."},{"pos":[40761,40881],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationUserLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for which you are opening the configuration.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.ConfigurationUserLevel\"></xref> object for which you are opening the configuration."},{"pos":[40946,41125],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preload all section groups and sections; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preload all section groups and sections; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41204,41229],"content":"The configuration object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The configuration object.","pos":[0,25]}]},{"pos":[41470,41511],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[42167,42309],"content":"Opens the machine configuration file as a <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that uses the specified file mapping.","needQuote":true,"needEscape":true,"source":"Opens the machine configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object that uses the specified file mapping."},{"pos":[43868,44040],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ExeConfigurationFileMap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that references configuration file to use instead of the application default configuration file.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Configuration.ExeConfigurationFileMap\"></xref> object that references configuration file to use instead of the application default configuration file."},{"pos":[44119,44184],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Configuration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Configuration.Configuration\"></xref> object."},{"pos":[44429,44470],"content":"A configuration file could not be loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A configuration file could not be loaded.","pos":[0,41]}]},{"pos":[44948,45043],"content":"Refreshes the named section so the next time that it is retrieved it will be re-read from disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Refreshes the named section so the next time that it is retrieved it will be re-read from disk.","pos":[0,95]}]},{"pos":[45055,45162],"content":"This method invalidates the cache for the specified configuration section without affecting other sections.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method invalidates the cache for the specified configuration section without affecting other sections.","pos":[0,107]}]},{"pos":[45716,45816],"content":"The configuration section name or the configuration path and section name of the section to refresh.","needQuote":true,"needEscape":true,"nodes":[{"content":"The configuration section name or the configuration path and section name of the section to refresh.","pos":[0,100]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.ConfigurationManager\n  id: ConfigurationManager\n  children:\n  - System.Configuration.ConfigurationManager.AppSettings\n  - System.Configuration.ConfigurationManager.ConnectionStrings\n  - System.Configuration.ConfigurationManager.GetSection(System.String)\n  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)\n  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)\n  - System.Configuration.ConfigurationManager.OpenMachineConfiguration\n  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)\n  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)\n  - System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)\n  - System.Configuration.ConfigurationManager.RefreshSection(System.String)\n  langs:\n  - csharp\n  name: ConfigurationManager\n  nameWithType: ConfigurationManager\n  fullName: System.Configuration.ConfigurationManager\n  type: Class\n  summary: Provides access to configuration files for client applications. This class cannot be inherited.\n  remarks: \"The ConfigurationManager class enables you to access machine, application, and user configuration information. This class replaces the <xref:System.Configuration.ConfigurationSettings> class, which is deprecated. For web applications, use the <xref:System.Web.Configuration.WebConfigurationManager> class.  \\n  \\n To use the ConfigurationManager class, your project must reference the `System.Configuration` assembly. By default, some project templates, like Console Application, do not reference this assembly so you must manually reference it.  \\n  \\n> [!NOTE]\\n>  The name and location of the application configuration file depend on the application's host. For more information, see [NIB: Application Configuration Files](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0).  \\n  \\n You can use the built-in <xref:System.Configuration> types or derive from them to handle configuration information. By using these types, you can work directly with configuration information and you can extend configuration files to include custom information.  \\n  \\n The ConfigurationManager class includes members that enable you to perform the following tasks:  \\n  \\n-   Read a section from a configuration file. To access configuration information, call the <xref:System.Configuration.ConfigurationManager.GetSection%2A> method. For some sections such as `appSettings` and `connectionStrings`, use the <xref:System.Configuration.ConfigurationManager.AppSettings%2A> and <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> classes. These members perform read-only operations, use a single cached instance of the configuration, and are multithread aware.  \\n  \\n-   Read and write configuration files as a whole. Your application can read and write configuration settings at any level, for itself or for other applications or computers, locally or remotely. Use one of the methods provided by the ConfigurationManager class to open a configuration file such as SampleApp.exe.config. These methods return a <xref:System.Configuration.Configuration> object that in turn exposes methods and properties you can use to work with the associated configuration files. The methods perform read or write operations and create the configuration data every time that a file is written.  \\n  \\n-   Support configuration tasks. The following types are used to support various configuration tasks:  \\n  \\n    -   <xref:System.Configuration.SectionInformation>  \\n  \\n    -   <xref:System.Configuration.PropertyInformation>  \\n  \\n    -   <xref:System.Configuration.PropertyInformationCollection>  \\n  \\n    -   <xref:System.Configuration.ElementInformation>  \\n  \\n    -   <xref:System.Configuration.ContextInformation>  \\n  \\n    -   <xref:System.Configuration.ConfigurationSectionGroup>  \\n  \\n    -   <xref:System.Configuration.ConfigurationSectionGroupCollection>  \\n  \\n     In addition to working with existing configuration information, you can create and work with custom configuration elements by extending the built-in configuration types such as the <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection> classes. For an example of how to extend a built-in configuration type programmatically, see <xref:System.Configuration.ConfigurationSection>. For an example of how to extend a built-in configuration type that uses the attribute-based model, see <xref:System.Configuration.ConfigurationElement>.\"\n  example:\n  - \"The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \\n  \\n```c#  \\nusing System;  \\nusing System.Configuration;  \\n  \\nnamespace ConsoleApplication1  \\n{  \\n    class Program  \\n    {  \\n        static void Main(string[] args)  \\n        {  \\n            ReadAllSettings();  \\n            ReadSetting(\\\"Setting1\\\");  \\n            ReadSetting(\\\"NotValid\\\");  \\n            AddUpdateAppSettings(\\\"NewSetting\\\", \\\"May 7, 2014\\\");  \\n            AddUpdateAppSettings(\\\"Setting1\\\", \\\"May 8, 2014\\\");  \\n            ReadAllSettings();  \\n        }  \\n  \\n        static void ReadAllSettings()  \\n        {  \\n            try  \\n            {  \\n                var appSettings = ConfigurationManager.AppSettings;  \\n  \\n                if (appSettings.Count == 0)  \\n                {  \\n                    Console.WriteLine(\\\"AppSettings is empty.\\\");  \\n                }  \\n                else  \\n                {  \\n                    foreach (var key in appSettings.AllKeys)  \\n                    {  \\n                        Console.WriteLine(\\\"Key: {0} Value: {1}\\\", key, appSettings[key]);  \\n                    }  \\n                }  \\n            }  \\n            catch (ConfigurationErrorsException)  \\n            {  \\n                Console.WriteLine(\\\"Error reading app settings\\\");  \\n            }  \\n        }  \\n  \\n        static void ReadSetting(string key)  \\n        {  \\n            try  \\n            {  \\n                var appSettings = ConfigurationManager.AppSettings;  \\n                string result = appSettings[key] ?? \\\"Not Found\\\";  \\n                Console.WriteLine(result);  \\n            }  \\n            catch (ConfigurationErrorsException)  \\n            {  \\n                Console.WriteLine(\\\"Error reading app settings\\\");  \\n            }  \\n        }  \\n  \\n        static void AddUpdateAppSettings(string key, string value)  \\n        {  \\n            try  \\n            {  \\n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \\n                var settings = configFile.AppSettings.Settings;  \\n                if (settings[key] == null)  \\n                {  \\n                    settings.Add(key, value);  \\n                }  \\n                else  \\n                {  \\n                    settings[key].Value = value;  \\n                }  \\n                configFile.Save(ConfigurationSaveMode.Modified);  \\n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \\n            }  \\n            catch (ConfigurationErrorsException)  \\n            {  \\n                Console.WriteLine(\\\"Error writing app settings\\\");  \\n            }  \\n        }  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nImports System.Configuration  \\nModule Module1  \\n  \\n    Sub Main()  \\n        ReadAllSettings()  \\n        ReadSetting(\\\"Setting1\\\")  \\n        ReadSetting(\\\"NotValid\\\")  \\n        AddUpdateAppSettings(\\\"NewSetting\\\", \\\"May 7, 2014\\\")  \\n        AddUpdateAppSettings(\\\"Setting1\\\", \\\"May 8, 2014\\\")  \\n        ReadAllSettings()  \\n    End Sub  \\n  \\n    Sub ReadAllSettings()  \\n        Try  \\n            Dim appSettings = ConfigurationManager.AppSettings  \\n  \\n            If appSettings.Count = 0 Then  \\n                Console.WriteLine(\\\"AppSettings is empty.\\\")  \\n            Else  \\n                For Each key As String In appSettings.AllKeys  \\n                    Console.WriteLine(\\\"Key: {0} Value: {1}\\\", key, appSettings(key))  \\n                Next  \\n            End If  \\n        Catch e As ConfigurationErrorsException  \\n            Console.WriteLine(\\\"Error reading app settings\\\")  \\n        End Try  \\n    End Sub  \\n  \\n    Sub ReadSetting(key As String)  \\n        Try  \\n            Dim appSettings = ConfigurationManager.AppSettings  \\n            Dim result As String = appSettings(key)  \\n            If IsNothing(result) Then  \\n                result = \\\"Not found\\\"  \\n            End If  \\n            Console.WriteLine(result)  \\n        Catch e As ConfigurationErrorsException  \\n            Console.WriteLine(\\\"Error reading app settings\\\")  \\n        End Try  \\n    End Sub  \\n  \\n    Sub AddUpdateAppSettings(key As String, value As String)  \\n        Try  \\n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \\n            Dim settings = configFile.AppSettings.Settings  \\n            If IsNothing(settings(key)) Then  \\n                settings.Add(key, value)  \\n            Else  \\n                settings(key).Value = value  \\n            End If  \\n            configFile.Save(ConfigurationSaveMode.Modified)  \\n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \\n        Catch e As ConfigurationErrorsException  \\n            Console.WriteLine(\\\"Error writing app settings\\\")  \\n        End Try  \\n    End Sub  \\n  \\nEnd Module  \\n```  \\n  \\n The previous example assumes your project has an App.config file as shown below.  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  \\n<configuration>  \\n    <startup>   \\n        <supportedRuntime version=\\\"v4.0\\\" sku=\\\".NETFramework,Version=v4.5\\\" />  \\n    </startup>  \\n  <appSettings>  \\n    <add key=\\\"Setting1\\\" value=\\\"May 5, 2014\\\"/>  \\n    <add key=\\\"Setting2\\\" value=\\\"May 6, 2014\\\"/>  \\n  </appSettings>  \\n</configuration>  \\n```  \\n  \\n The following example shows how to use a connection string to read data from a database.  \\n  \\n```c#  \\nusing System;  \\nusing System.Configuration;  \\nusing System.Data.SqlClient;  \\n  \\nnamespace ConsoleApplication1  \\n{  \\n    class Program  \\n    {  \\n        static void Main(string[] args)  \\n        {  \\n            ReadProducts();  \\n        }  \\n  \\n        static void ReadProducts()  \\n        {  \\n            var connectionString = ConfigurationManager.ConnectionStrings[\\\"WingtipToys\\\"].ConnectionString;  \\n            string queryString = \\\"SELECT Id, ProductName FROM dbo.Products;\\\";  \\n            using (var connection = new SqlConnection(connectionString))  \\n            {  \\n                var command = new SqlCommand(queryString, connection);  \\n                connection.Open();  \\n                using (var reader = command.ExecuteReader())  \\n                {  \\n                    while (reader.Read())  \\n                    {  \\n                        Console.WriteLine(String.Format(\\\"{0}, {1}\\\", reader[0], reader[1]));  \\n                    }  \\n                }  \\n            }  \\n        }  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nImports System.Configuration  \\nImports System.Data.SqlClient  \\nModule Module1  \\n  \\n    Sub Main()  \\n        ReadProducts()  \\n    End Sub  \\n  \\n    Sub ReadProducts()  \\n        Dim connectionString = ConfigurationManager.ConnectionStrings(\\\"WingtipToys\\\").ConnectionString  \\n        Dim queryString = \\\"SELECT Id, ProductName FROM dbo.Products;\\\"  \\n        Using connection As New SqlConnection(connectionString)  \\n            Dim command = New SqlCommand(queryString, connection)  \\n            connection.Open()  \\n  \\n            Using reader As SqlDataReader = command.ExecuteReader()  \\n                While reader.Read()  \\n                    Console.WriteLine(String.Format(\\\"{0}, {1}\\\", reader(0), reader(1)))  \\n                End While  \\n            End Using  \\n        End Using  \\n    End Sub  \\n  \\nEnd Module  \\n```  \\n  \\n The previous example assumes your project has an App.config as shown below.  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  \\n<configuration>  \\n    <startup>   \\n        <supportedRuntime version=\\\"v4.0\\\" sku=\\\".NETFramework,Version=v4.5\\\" />  \\n    </startup>  \\n    <connectionStrings>  \\n      <add name=\\\"WingtipToys\\\" connectionString=\\\"Data Source=(LocalDB)\\\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\\\" />  \\n    </connectionStrings>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public static class ConfigurationManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.AppSettings\n  id: AppSettings\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: AppSettings\n  nameWithType: ConfigurationManager.AppSettings\n  fullName: System.Configuration.ConfigurationManager.AppSettings\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the <xref href=\"System.Configuration.AppSettingsSection\"></xref> data for the current application's default configuration.\n  remarks: A <xref:System.Configuration.AppSettingsSection> object contains the contents of the configuration file's `appSettings` section.\n  example:\n  - \"The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \\n  \\n```c#  \\nusing System;  \\nusing System.Configuration;  \\n  \\nnamespace ConsoleApplication1  \\n{  \\n    class Program  \\n    {  \\n        static void Main(string[] args)  \\n        {  \\n            ReadAllSettings();  \\n            ReadSetting(\\\"Setting1\\\");  \\n            ReadSetting(\\\"NotValid\\\");  \\n            AddUpdateAppSettings(\\\"NewSetting\\\", \\\"May 7, 2014\\\");  \\n            AddUpdateAppSettings(\\\"Setting1\\\", \\\"May 8, 2014\\\");  \\n            ReadAllSettings();  \\n        }  \\n  \\n        static void ReadAllSettings()  \\n        {  \\n            try  \\n            {  \\n                var appSettings = ConfigurationManager.AppSettings;  \\n  \\n                if (appSettings.Count == 0)  \\n                {  \\n                    Console.WriteLine(\\\"AppSettings is empty.\\\");  \\n                }  \\n                else  \\n                {  \\n                    foreach (var key in appSettings.AllKeys)  \\n                    {  \\n                        Console.WriteLine(\\\"Key: {0} Value: {1}\\\", key, appSettings[key]);  \\n                    }  \\n                }  \\n            }  \\n            catch (ConfigurationErrorsException)  \\n            {  \\n                Console.WriteLine(\\\"Error reading app settings\\\");  \\n            }  \\n        }  \\n  \\n        static void ReadSetting(string key)  \\n        {  \\n            try  \\n            {  \\n                var appSettings = ConfigurationManager.AppSettings;  \\n                string result = appSettings[key] ?? \\\"Not Found\\\";  \\n                Console.WriteLine(result);  \\n            }  \\n            catch (ConfigurationErrorsException)  \\n            {  \\n                Console.WriteLine(\\\"Error reading app settings\\\");  \\n            }  \\n        }  \\n  \\n        static void AddUpdateAppSettings(string key, string value)  \\n        {  \\n            try  \\n            {  \\n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \\n                var settings = configFile.AppSettings.Settings;  \\n                if (settings[key] == null)  \\n                {  \\n                    settings.Add(key, value);  \\n                }  \\n                else  \\n                {  \\n                    settings[key].Value = value;  \\n                }  \\n                configFile.Save(ConfigurationSaveMode.Modified);  \\n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \\n            }  \\n            catch (ConfigurationErrorsException)  \\n            {  \\n                Console.WriteLine(\\\"Error writing app settings\\\");  \\n            }  \\n        }  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nImports System.Configuration  \\nModule Module1  \\n  \\n    Sub Main()  \\n        ReadAllSettings()  \\n        ReadSetting(\\\"Setting1\\\")  \\n        ReadSetting(\\\"NotValid\\\")  \\n        AddUpdateAppSettings(\\\"NewSetting\\\", \\\"May 7, 2014\\\")  \\n        AddUpdateAppSettings(\\\"Setting1\\\", \\\"May 8, 2014\\\")  \\n        ReadAllSettings()  \\n    End Sub  \\n  \\n    Sub ReadAllSettings()  \\n        Try  \\n            Dim appSettings = ConfigurationManager.AppSettings  \\n  \\n            If appSettings.Count = 0 Then  \\n                Console.WriteLine(\\\"AppSettings is empty.\\\")  \\n            Else  \\n                For Each key As String In appSettings.AllKeys  \\n                    Console.WriteLine(\\\"Key: {0} Value: {1}\\\", key, appSettings(key))  \\n                Next  \\n            End If  \\n        Catch e As ConfigurationErrorsException  \\n            Console.WriteLine(\\\"Error reading app settings\\\")  \\n        End Try  \\n    End Sub  \\n  \\n    Sub ReadSetting(key As String)  \\n        Try  \\n            Dim appSettings = ConfigurationManager.AppSettings  \\n            Dim result As String = appSettings(key)  \\n            If IsNothing(result) Then  \\n                result = \\\"Not found\\\"  \\n            End If  \\n            Console.WriteLine(result)  \\n        Catch e As ConfigurationErrorsException  \\n            Console.WriteLine(\\\"Error reading app settings\\\")  \\n        End Try  \\n    End Sub  \\n  \\n    Sub AddUpdateAppSettings(key As String, value As String)  \\n        Try  \\n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \\n            Dim settings = configFile.AppSettings.Settings  \\n            If IsNothing(settings(key)) Then  \\n                settings.Add(key, value)  \\n            Else  \\n                settings(key).Value = value  \\n            End If  \\n            configFile.Save(ConfigurationSaveMode.Modified)  \\n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \\n        Catch e As ConfigurationErrorsException  \\n            Console.WriteLine(\\\"Error writing app settings\\\")  \\n        End Try  \\n    End Sub  \\n  \\nEnd Module  \\n```  \\n  \\n The previous example assumes your project has an App.config file as shown below.  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  \\n<configuration>  \\n    <startup>   \\n        <supportedRuntime version=\\\"v4.0\\\" sku=\\\".NETFramework,Version=v4.5\\\" />  \\n    </startup>  \\n  <appSettings>  \\n    <add key=\\\"Setting1\\\" value=\\\"May 5, 2014\\\"/>  \\n    <add key=\\\"Setting2\\\" value=\\\"May 6, 2014\\\"/>  \\n  </appSettings>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public static System.Collections.Specialized.NameValueCollection AppSettings { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: Returns a <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object that contains the contents of the <xref href=\"System.Configuration.AppSettingsSection\"></xref> object for the current application's default configuration.\n  overload: System.Configuration.ConfigurationManager.AppSettings*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: Could not retrieve a <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object with the application settings data.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.ConnectionStrings\n  id: ConnectionStrings\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: ConnectionStrings\n  nameWithType: ConfigurationManager.ConnectionStrings\n  fullName: System.Configuration.ConfigurationManager.ConnectionStrings\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the <xref href=\"System.Configuration.ConnectionStringsSection\"></xref> data for the current application's default configuration.\n  remarks: A <xref:System.Configuration.ConnectionStringsSection> object contains the contents of the configuration file's `connectionStrings` section.\n  example:\n  - \"The following example shows how to use a connection string to read data from a database.  \\n  \\n```c#  \\nusing System;  \\nusing System.Configuration;  \\nusing System.Data.SqlClient;  \\n  \\nnamespace ConsoleApplication1  \\n{  \\n    class Program  \\n    {  \\n        static void Main(string[] args)  \\n        {  \\n            ReadProducts();  \\n        }  \\n  \\n        static void ReadProducts()  \\n        {  \\n            var connectionString = ConfigurationManager.ConnectionStrings[\\\"WingtipToys\\\"].ConnectionString;  \\n            string queryString = \\\"SELECT Id, ProductName FROM dbo.Products;\\\";  \\n            using (var connection = new SqlConnection(connectionString))  \\n            {  \\n                var command = new SqlCommand(queryString, connection);  \\n                connection.Open();  \\n                using (var reader = command.ExecuteReader())  \\n                {  \\n                    while (reader.Read())  \\n                    {  \\n                        Console.WriteLine(String.Format(\\\"{0}, {1}\\\", reader[0], reader[1]));  \\n                    }  \\n                }  \\n            }  \\n        }  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nImports System.Configuration  \\nImports System.Data.SqlClient  \\nModule Module1  \\n  \\n    Sub Main()  \\n        ReadProducts()  \\n    End Sub  \\n  \\n    Sub ReadProducts()  \\n        Dim connectionString = ConfigurationManager.ConnectionStrings(\\\"WingtipToys\\\").ConnectionString  \\n        Dim queryString = \\\"SELECT Id, ProductName FROM dbo.Products;\\\"  \\n        Using connection As New SqlConnection(connectionString)  \\n            Dim command = New SqlCommand(queryString, connection)  \\n            connection.Open()  \\n  \\n            Using reader As SqlDataReader = command.ExecuteReader()  \\n                While reader.Read()  \\n                    Console.WriteLine(String.Format(\\\"{0}, {1}\\\", reader(0), reader(1)))  \\n                End While  \\n            End Using  \\n        End Using  \\n    End Sub  \\n  \\nEnd Module  \\n```  \\n  \\n The previous example assumes your project has an App.config as shown below.  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  \\n<configuration>  \\n    <startup>   \\n        <supportedRuntime version=\\\"v4.0\\\" sku=\\\".NETFramework,Version=v4.5\\\" />  \\n    </startup>  \\n    <connectionStrings>  \\n      <add name=\\\"WingtipToys\\\" connectionString=\\\"Data Source=(LocalDB)\\\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\\\" />  \\n    </connectionStrings>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }\n    return:\n      type: System.Configuration.ConnectionStringSettingsCollection\n      description: Returns a <xref href=\"System.Configuration.ConnectionStringSettingsCollection\"></xref> object that contains the contents of the <xref href=\"System.Configuration.ConnectionStringsSection\"></xref> object for the current application's default configuration.\n  overload: System.Configuration.ConfigurationManager.ConnectionStrings*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: Could not retrieve a <xref href=\"System.Configuration.ConnectionStringSettingsCollection\"></xref> object.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.GetSection(System.String)\n  id: GetSection(System.String)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: GetSection(String)\n  nameWithType: ConfigurationManager.GetSection(String)\n  fullName: System.Configuration.ConfigurationManager.GetSection(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Retrieves a specified configuration section for the current application's default configuration.\n  remarks: \"For client applications, this method retrieves a configuration file obtained by merging the application configuration file, the local user configuration file, and the roaming configuration file.  \\n  \\n The GetSection method accesses run-time configuration information that it cannot change. To change the configuration, you use the <xref:System.Configuration.Configuration.GetSection%2A> method on the configuration file that you obtain by using one of the following Open methods:  \\n  \\n-   <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>  \\n  \\n-   <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>  \\n  \\n-   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>  \\n  \\n-   <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>\"\n  example:\n  - \"The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <xref:System.Configuration.ConfigurationManager> class.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_14_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_14_1.vb)]\"\n  syntax:\n    content: public static object GetSection (string sectionName);\n    parameters:\n    - id: sectionName\n      type: System.String\n      description: The configuration section path and name.\n    return:\n      type: System.Object\n      description: The specified <xref href=\"System.Configuration.ConfigurationSection\"></xref> object, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the section does not exist.\n  overload: System.Configuration.ConfigurationManager.GetSection*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)\n  id: OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: OpenExeConfiguration(ConfigurationUserLevel)\n  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)\n  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Opens the configuration file for the current application as a <xref href=\"System.Configuration.Configuration\"></xref> object.\n  remarks: \"Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users. The `userLevel` parameter determines the location of the configuration file being opened by indicating whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level).  \\n  \\n Specify which configuration to get by passing one of the following values for `userLevel`:  \\n  \\n-   To get the <xref:System.Configuration.Configuration> object that applies to all users, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>.  \\n  \\n-   To get the local <xref:System.Configuration.Configuration> object that applies to the current user, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>.  \\n  \\n-   To get the roaming <xref:System.Configuration.Configuration> object that applies to the current user, set `userLevel` to <xref:System.Configuration.ConfigurationUserLevel>.  \\n  \\n    > [!NOTE]\\n    >  To get the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.\"\n  example:\n  - \"The following code example shows how to use the OpenExeConfiguration method.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#5](~/add/codesnippet/csharp/3eb7bc6f-f763-4df6-a789-_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#5](~/add/codesnippet/visualbasic/3eb7bc6f-f763-4df6-a789-_1.vb)]\"\n  syntax:\n    content: public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);\n    parameters:\n    - id: userLevel\n      type: System.Configuration.ConfigurationUserLevel\n      description: The <xref href=\"System.Configuration.ConfigurationUserLevel\"></xref> for which you are opening the configuration.\n    return:\n      type: System.Configuration.Configuration\n      description: A <xref href=\"System.Configuration.Configuration\"></xref> object.\n  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)\n  id: OpenExeConfiguration(System.String)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: OpenExeConfiguration(String)\n  nameWithType: ConfigurationManager.OpenExeConfiguration(String)\n  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Opens the specified client configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object.\n  remarks: \"Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users. The `userLevel` value determines the location of the configuration file being opened. It indicates whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level type.).  \\n  \\n Calling this method overload is equivalent to calling the <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29> overload with the `preLoad` parameter set to `false`.\"\n  example:\n  - \"The following code example shows how to use the OpenExeConfiguration method.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#6](~/add/codesnippet/csharp/m-system.configuration.c_28_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#6](~/add/codesnippet/visualbasic/m-system.configuration.c_28_1.vb)]\"\n  syntax:\n    content: public static System.Configuration.Configuration OpenExeConfiguration (string exePath);\n    parameters:\n    - id: exePath\n      type: System.String\n      description: The path of the executable (exe) file.\n    return:\n      type: System.Configuration.Configuration\n      description: A <xref href=\"System.Configuration.Configuration\"></xref> object.\n  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration\n  id: OpenMachineConfiguration\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: OpenMachineConfiguration()\n  nameWithType: ConfigurationManager.OpenMachineConfiguration()\n  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Opens the machine configuration file on the current computer as a <xref href=\"System.Configuration.Configuration\"></xref> object.\n  remarks: \"Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \\n  \\n *%windir%*\\\\Microsoft.NET\\\\Framework\\\\\\\\*version*\\\\config  \\n  \\n> [!NOTE]\\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer.\"\n  example:\n  - \"The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/m-system.configuration.c_32_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/m-system.configuration.c_32_1.vb)]\"\n  syntax:\n    content: public static System.Configuration.Configuration OpenMachineConfiguration ();\n    parameters: []\n    return:\n      type: System.Configuration.Configuration\n      description: A <xref href=\"System.Configuration.Configuration\"></xref> object.\n  overload: System.Configuration.ConfigurationManager.OpenMachineConfiguration*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)\n  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)\n  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)\n  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Opens the specified client configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object that uses the specified file mapping and user level.\n  remarks: \"The <xref:System.Configuration.ConfigurationUserLevel> object determines the location of the configuration file being opened. It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by `userLevel`).  \\n  \\n> [!NOTE]\\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.\"\n  example:\n  - \"The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#9](~/add/codesnippet/csharp/3a231caa-8bb5-4e8b-a7ef-_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#9](~/add/codesnippet/visualbasic/3a231caa-8bb5-4e8b-a7ef-_1.vb)]\"\n  syntax:\n    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);\n    parameters:\n    - id: fileMap\n      type: System.Configuration.ExeConfigurationFileMap\n      description: An <xref href=\"System.Configuration.ExeConfigurationFileMap\"></xref> object that references configuration file to use instead of the application default configuration file.\n    - id: userLevel\n      type: System.Configuration.ConfigurationUserLevel\n      description: The <xref href=\"System.Configuration.ConfigurationUserLevel\"></xref> object for which you are opening the configuration.\n    return:\n      type: System.Configuration.Configuration\n      description: The configuration object.\n  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)\n  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)\n  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)\n  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Opens the specified client configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object that uses the specified file mapping, user level, and preload option.\n  remarks: \"The <xref:System.Configuration.ConfigurationUserLevel> object determines the location of the configuration file that is being opened. It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path that is determined by `userLevel`).  \\n  \\n> [!NOTE]\\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.  \\n  \\n For a code example, see the <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> overload.\"\n  syntax:\n    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);\n    parameters:\n    - id: fileMap\n      type: System.Configuration.ExeConfigurationFileMap\n      description: An <xref href=\"System.Configuration.ExeConfigurationFileMap\"></xref> object that references the configuration file to use instead of the default application configuration file.\n    - id: userLevel\n      type: System.Configuration.ConfigurationUserLevel\n      description: The <xref href=\"System.Configuration.ConfigurationUserLevel\"></xref> object for which you are opening the configuration.\n    - id: preLoad\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preload all section groups and sections; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Configuration.Configuration\n      description: The configuration object.\n  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)\n  id: OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: OpenMappedMachineConfiguration(ConfigurationFileMap)\n  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)\n  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Opens the machine configuration file as a <xref href=\"System.Configuration.Configuration\"></xref> object that uses the specified file mapping.\n  remarks: \"Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \\n  \\n *%windir%*\\\\Microsoft.NET\\\\Framework\\\\\\\\*version*\\\\config  \\n  \\n> [!NOTE]\\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer.\"\n  example:\n  - \"The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/b514431f-be81-4b1e-b58c-_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/b514431f-be81-4b1e-b58c-_1.vb)]\"\n  syntax:\n    content: public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);\n    parameters:\n    - id: fileMap\n      type: System.Configuration.ConfigurationFileMap\n      description: An <xref href=\"System.Configuration.ExeConfigurationFileMap\"></xref> object that references configuration file to use instead of the application default configuration file.\n    return:\n      type: System.Configuration.Configuration\n      description: A <xref href=\"System.Configuration.Configuration\"></xref> object.\n  overload: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: A configuration file could not be loaded.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)\n  id: RefreshSection(System.String)\n  parent: System.Configuration.ConfigurationManager\n  langs:\n  - csharp\n  name: RefreshSection(String)\n  nameWithType: ConfigurationManager.RefreshSection(String)\n  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Refreshes the named section so the next time that it is retrieved it will be re-read from disk.\n  remarks: This method invalidates the cache for the specified configuration section without affecting other sections.\n  example:\n  - \"The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  \\n  \\n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_34_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_34_1.vb)]\"\n  syntax:\n    content: public static void RefreshSection (string sectionName);\n    parameters:\n    - id: sectionName\n      type: System.String\n      description: The configuration section name or the configuration path and section name of the section to refresh.\n  overload: System.Configuration.ConfigurationManager.RefreshSection*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Configuration.ConfigurationErrorsException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationErrorsException\n  nameWithType: ConfigurationErrorsException\n  fullName: System.Configuration.ConfigurationErrorsException\n- uid: System.Configuration.ConfigurationManager.AppSettings\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: AppSettings\n  nameWithType: ConfigurationManager.AppSettings\n  fullName: System.Configuration.ConfigurationManager.AppSettings\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Configuration.ConfigurationManager.ConnectionStrings\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: ConnectionStrings\n  nameWithType: ConfigurationManager.ConnectionStrings\n  fullName: System.Configuration.ConfigurationManager.ConnectionStrings\n- uid: System.Configuration.ConnectionStringSettingsCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConnectionStringSettingsCollection\n  nameWithType: ConnectionStringSettingsCollection\n  fullName: System.Configuration.ConnectionStringSettingsCollection\n- uid: System.Configuration.ConfigurationManager.GetSection(System.String)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: GetSection(String)\n  nameWithType: ConfigurationManager.GetSection(String)\n  fullName: System.Configuration.ConfigurationManager.GetSection(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenExeConfiguration(ConfigurationUserLevel)\n  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)\n  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)\n- uid: System.Configuration.Configuration\n  parent: System.Configuration\n  isExternal: false\n  name: Configuration\n  nameWithType: Configuration\n  fullName: System.Configuration.Configuration\n- uid: System.Configuration.ConfigurationUserLevel\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationUserLevel\n  nameWithType: ConfigurationUserLevel\n  fullName: System.Configuration.ConfigurationUserLevel\n- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenExeConfiguration(String)\n  nameWithType: ConfigurationManager.OpenExeConfiguration(String)\n  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)\n- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMachineConfiguration()\n  nameWithType: ConfigurationManager.OpenMachineConfiguration()\n  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()\n- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)\n  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)\n  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)\n- uid: System.Configuration.ExeConfigurationFileMap\n  parent: System.Configuration\n  isExternal: false\n  name: ExeConfigurationFileMap\n  nameWithType: ExeConfigurationFileMap\n  fullName: System.Configuration.ExeConfigurationFileMap\n- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)\n  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)\n  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMappedMachineConfiguration(ConfigurationFileMap)\n  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)\n  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)\n- uid: System.Configuration.ConfigurationFileMap\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationFileMap\n  nameWithType: ConfigurationFileMap\n  fullName: System.Configuration.ConfigurationFileMap\n- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: RefreshSection(String)\n  nameWithType: ConfigurationManager.RefreshSection(String)\n  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)\n- uid: System.Configuration.ConfigurationManager.AppSettings*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: AppSettings\n  nameWithType: ConfigurationManager.AppSettings\n- uid: System.Configuration.ConfigurationManager.ConnectionStrings*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: ConnectionStrings\n  nameWithType: ConfigurationManager.ConnectionStrings\n- uid: System.Configuration.ConfigurationManager.GetSection*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: GetSection\n  nameWithType: ConfigurationManager.GetSection\n- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenExeConfiguration\n  nameWithType: ConfigurationManager.OpenExeConfiguration\n- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMachineConfiguration\n  nameWithType: ConfigurationManager.OpenMachineConfiguration\n- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMappedExeConfiguration\n  nameWithType: ConfigurationManager.OpenMappedExeConfiguration\n- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: OpenMappedMachineConfiguration\n  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration\n- uid: System.Configuration.ConfigurationManager.RefreshSection*\n  parent: System.Configuration.ConfigurationManager\n  isExternal: false\n  name: RefreshSection\n  nameWithType: ConfigurationManager.RefreshSection\n"}