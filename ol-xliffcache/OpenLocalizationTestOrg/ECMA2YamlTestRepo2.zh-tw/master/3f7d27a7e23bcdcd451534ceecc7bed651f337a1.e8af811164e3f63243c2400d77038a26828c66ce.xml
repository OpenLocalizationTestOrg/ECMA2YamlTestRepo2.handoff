{"nodes":[{"pos":[882,1104],"content":"Provides a <bpt id=\"p1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event.","needQuote":true,"needEscape":true,"source":"Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event."},{"pos":[1116,1273],"content":"For information about how to use this class, see “Using an Existing Weak Event Manager Class“ in<bpt id=\"p1\">[</bpt>Weak Event Patterns<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For information about how to use this class, see “Using an Existing Weak Event Manager Class“ in[Weak Event Patterns](~/add/includes/ajax-current-ext-md.md)."},{"pos":[3457,3529],"content":"Adds the specified delegate as an event handler of the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified delegate as an event handler of the specified source.","pos":[0,72]}]},{"pos":[3750,3849],"content":"The source object that the raises the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object that the raises the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event.","pos":[0,99],"source":"The source object that the raises the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event."}]},{"pos":[3937,4028],"content":"The delegate that handles the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate that handles the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event.","pos":[0,91],"source":"The delegate that handles the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event."}]},{"pos":[4221,4426],"content":"<code>source</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       --or--       <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,84],"source":"<code>source</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"--or--       <ph id=\"ph1\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[91,189],"source":"       --or--       <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[4995,5072],"content":"Removes inactive listener entries from the data list for the provided source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes inactive listener entries from the data list for the provided source.","pos":[0,77]}]},{"pos":[5249,5289],"content":"The source for events being listened to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source for events being listened to.","pos":[0,40]}]},{"pos":[5350,5468],"content":"The data to check. This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to check. This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation.","pos":[0,118],"nodes":[{"content":"The data to check.","pos":[0,18]},{"content":"This object is expected to be a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; implementation.","pos":[19,118],"source":" This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation."}]}]},{"pos":[5534,5672],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to stop listening to <ph id=\"ph1\">`source`</ph>, and completely remove all entries from <ph id=\"ph2\">`data`</ph>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to stop listening to `source`, and completely remove all entries from `data`."},{"pos":[5731,5905],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if some entries were actually removed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6683,6745],"content":"Removes the specified event handler from the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the specified event handler from the specified source.","pos":[0,62]}]},{"pos":[6969,7068],"content":"The source object that the raises the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object that the raises the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event.","pos":[0,99],"source":"The source object that the raises the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event."}]},{"pos":[7156,7247],"content":"The delegate that handles the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate that handles the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event.","pos":[0,91],"source":"The delegate that handles the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event."}]},{"pos":[7443,7648],"content":"<code>source</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       --or--       <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,84],"source":"<code>source</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"--or--       <ph id=\"ph1\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[91,189],"source":"       --or--       <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[8159,8269],"content":"Begins listening for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins listening for the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event on the specified source.","pos":[0,110],"source":"Begins listening for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the specified source."}]},{"pos":[8427,8453],"content":"The object with the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object with the event.","pos":[0,26]}]},{"pos":[9054,9163],"content":"Stops listening for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops listening for the &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event on the specified source.","pos":[0,109],"source":"Stops listening for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the specified source."}]},{"pos":[9320,9360],"content":"The source object to stop listening for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object to stop listening for.","pos":[0,40]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CanExecuteChangedEventManager\n  id: CanExecuteChangedEventManager\n  children:\n  - System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  - System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  - System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  - System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)\n  - System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)\n  langs:\n  - csharp\n  name: CanExecuteChangedEventManager\n  nameWithType: CanExecuteChangedEventManager\n  fullName: System.Windows.Input.CanExecuteChangedEventManager\n  type: Class\n  summary: Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.\n  remarks: For information about how to use this class, see “Using an Existing Weak Event Manager Class“ in[Weak Event Patterns](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: 'public class CanExecuteChangedEventManager : System.Windows.WeakEventManager'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.WeakEventManager\n  implements: []\n  inheritedMembers:\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  - System.Windows.WeakEventManager.Item(System.Object)\n  - System.Windows.WeakEventManager.NewListenerList\n  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ReadLock\n  - System.Windows.WeakEventManager.Remove(System.Object)\n  - System.Windows.WeakEventManager.ScheduleCleanup\n  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  - System.Windows.WeakEventManager.WriteLock\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  id: AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  langs:\n  - csharp\n  name: AddHandler(ICommand,EventHandler<EventArgs>)\n  nameWithType: CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Adds the specified delegate as an event handler of the specified source.\n  syntax:\n    content: public static void AddHandler (System.Windows.Input.ICommand source, EventHandler<EventArgs> handler);\n    parameters:\n    - id: source\n      type: System.Windows.Input.ICommand\n      description: The source object that the raises the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.\n    - id: handler\n      type: System.EventHandler{System.EventArgs}\n      description: The delegate that handles the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.\n  overload: System.Windows.Input.CanExecuteChangedEventManager.AddHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n --or--  \\n  \\n <code>handler</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  id: Purge(System.Object,System.Object,System.Boolean)\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  langs:\n  - csharp\n  name: Purge(Object,Object,Boolean)\n  nameWithType: CanExecuteChangedEventManager.Purge(Object,Object,Boolean)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.Purge(Object,Object,Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Removes inactive listener entries from the data list for the provided source.\n  syntax:\n    content: protected override bool Purge (object source, object data, bool purgeAll);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source for events being listened to.\n    - id: data\n      type: System.Object\n      description: The data to check. This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation.\n    - id: purgeAll\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to stop listening to `source`, and completely remove all entries from `data`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.CanExecuteChangedEventManager.Purge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  id: RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  langs:\n  - csharp\n  name: RemoveHandler(ICommand,EventHandler<EventArgs>)\n  nameWithType: CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Removes the specified event handler from the specified source.\n  syntax:\n    content: public static void RemoveHandler (System.Windows.Input.ICommand source, EventHandler<EventArgs> handler);\n    parameters:\n    - id: source\n      type: System.Windows.Input.ICommand\n      description: The source object that the raises the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.\n    - id: handler\n      type: System.EventHandler{System.EventArgs}\n      description: The delegate that handles the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event.\n  overload: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n --or--  \\n  \\n <code>handler</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)\n  id: StartListening(System.Object)\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  langs:\n  - csharp\n  name: StartListening(Object)\n  nameWithType: CanExecuteChangedEventManager.StartListening(Object)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.StartListening(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Begins listening for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the specified source.\n  syntax:\n    content: protected override void StartListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The object with the event.\n  overload: System.Windows.Input.CanExecuteChangedEventManager.StartListening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)\n  id: StopListening(System.Object)\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  langs:\n  - csharp\n  name: StopListening(Object)\n  nameWithType: CanExecuteChangedEventManager.StopListening(Object)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.StopListening(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Stops listening for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the specified source.\n  syntax:\n    content: protected override void StopListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source object to stop listening for.\n  overload: System.Windows.Input.CanExecuteChangedEventManager.StopListening*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.WeakEventManager\n  isExternal: false\n  name: System.Windows.WeakEventManager\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: AddHandler(ICommand,EventHandler<EventArgs>)\n  nameWithType: CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: true\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.EventHandler{System.EventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<EventArgs>\n  nameWithType: EventHandler<EventArgs>\n  fullName: System.EventHandler<System.EventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.EventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.EventArgs\n    name: EventArgs\n    nameWithType: EventArgs\n    fullName: EventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: Purge(Object,Object,Boolean)\n  nameWithType: CanExecuteChangedEventManager.Purge(Object,Object,Boolean)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.Purge(Object,Object,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: RemoveHandler(ICommand,EventHandler<EventArgs>)\n  nameWithType: CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)\n- uid: System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: StartListening(Object)\n  nameWithType: CanExecuteChangedEventManager.StartListening(Object)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.StartListening(Object)\n- uid: System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: StopListening(Object)\n  nameWithType: CanExecuteChangedEventManager.StopListening(Object)\n  fullName: System.Windows.Input.CanExecuteChangedEventManager.StopListening(Object)\n- uid: System.Windows.Input.CanExecuteChangedEventManager.AddHandler*\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: AddHandler\n  nameWithType: CanExecuteChangedEventManager.AddHandler\n- uid: System.Windows.Input.CanExecuteChangedEventManager.Purge*\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: Purge\n  nameWithType: CanExecuteChangedEventManager.Purge\n- uid: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler*\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: CanExecuteChangedEventManager.RemoveHandler\n- uid: System.Windows.Input.CanExecuteChangedEventManager.StartListening*\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: StartListening\n  nameWithType: CanExecuteChangedEventManager.StartListening\n- uid: System.Windows.Input.CanExecuteChangedEventManager.StopListening*\n  parent: System.Windows.Input.CanExecuteChangedEventManager\n  isExternal: false\n  name: StopListening\n  nameWithType: CanExecuteChangedEventManager.StopListening\n"}