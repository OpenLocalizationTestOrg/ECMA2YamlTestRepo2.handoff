{"nodes":[{"pos":[564,609],"content":"Provides information about security failures.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about security failures.","pos":[0,45]}]},{"pos":[622,3683],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management?displayProperty=fullName> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       The WebFailureAuditEvent class is used when a security operation fails. An example of this is a failed URL authorization for a Web request.       By default, ASP.NET is configured to raise the WebFailureAuditEvent event for the following features:      -   File authorization. ASP.NET attempts file authorization only when a Windows Identity is associated with the request. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationFailure>.      -   URL authorization. This governs unauthorized attempts to access a URL resource. Failed attempts by an anonymous user are not audited, because anonymous authentication failure is acceptable in most circumstances. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationFailure>.      -   Generic unhandled or security unhandled conditions. The following is a list of the event codes related to these conditions:          -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationFailure>          -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationFailure>          -   <xref:System.Web.Management.WebEventCodes.AuditInvalidViewStateFailure>          -   <xref:System.Web.Management.WebEventCodes.AuditUnhandledSecurityException>          -   <xref:System.Web.Management.WebEventCodes.AuditUnhandledAccessException>       When a WebFailureAuditEvent event is raised, ASP.NET health monitoring increments the related Audit Failure Events Raised performance counter and then checks the `healthMonitoring` configuration section to determine whether any providers subscribe to the event. If providers subscribe to the event, ASP.NET dispatches the event to them for processing.      > [!NOTE] >  To view the Audit Failure Events Raised performance counter in System Monitor (PerfMon), in the **Add Counters** window, select **ASP.NET** from the **Performance object** drop-down list, select the **Audit Failure Events Raised** performance counter, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882) in the IIS documentation on MSDN.      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebFailureAuditEvent class, see the Example section.","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management?displayProperty=fullName&gt; namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,319],"source":" The <xref:System.Web.Management?displayProperty=fullName> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[320,403]},{"content":"The WebFailureAuditEvent class is used when a security operation fails.","pos":[410,481]},{"content":"An example of this is a failed URL authorization for a Web request.","pos":[482,549]},{"content":"By default, ASP.NET is configured to raise the WebFailureAuditEvent event for the following features:      -   File authorization.","pos":[556,686]},{"content":"ASP.NET attempts file authorization only when a Windows Identity is associated with the request.","pos":[687,783]},{"content":"The related event audit code is &lt;xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationFailure&gt;.","pos":[784,889],"source":" The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationFailure>."},{"content":"-   URL authorization.","pos":[895,917]},{"content":"This governs unauthorized attempts to access a URL resource.","pos":[918,978]},{"content":"Failed attempts by an anonymous user are not audited, because anonymous authentication failure is acceptable in most circumstances.","pos":[979,1110]},{"content":"The related event audit code is &lt;xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationFailure&gt;.","pos":[1111,1215],"source":" The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationFailure>."},{"content":"-   Generic unhandled or security unhandled conditions.","pos":[1221,1276]},{"content":"The following is a list of the event codes related to these conditions:          -   &lt;xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationFailure&gt;          -   &lt;xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationFailure&gt;          -   &lt;xref:System.Web.Management.WebEventCodes.AuditInvalidViewStateFailure&gt;          -   &lt;xref:System.Web.Management.WebEventCodes.AuditUnhandledSecurityException&gt;          -   &lt;xref:System.Web.Management.WebEventCodes.AuditUnhandledAccessException&gt;       When a WebFailureAuditEvent event is raised, ASP.NET health monitoring increments the related Audit Failure Events Raised performance counter and then checks the <ph id=\"ph1\">`healthMonitoring`</ph> configuration section to determine whether any providers subscribe to the event.","pos":[1277,2056],"source":" The following is a list of the event codes related to these conditions:          -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationFailure>          -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationFailure>          -   <xref:System.Web.Management.WebEventCodes.AuditInvalidViewStateFailure>          -   <xref:System.Web.Management.WebEventCodes.AuditUnhandledSecurityException>          -   <xref:System.Web.Management.WebEventCodes.AuditUnhandledAccessException>       When a WebFailureAuditEvent event is raised, ASP.NET health monitoring increments the related Audit Failure Events Raised performance counter and then checks the `healthMonitoring` configuration section to determine whether any providers subscribe to the event."},{"content":"If providers subscribe to the event, ASP.NET dispatches the event to them for processing.","pos":[2057,2146]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To view the Audit Failure Events Raised performance counter in System Monitor (PerfMon), in the <bpt id=\"p1\">**</bpt>Add Counters<ept id=\"p1\">**</ept> window, select <bpt id=\"p2\">**</bpt>ASP.NET<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>Performance object<ept id=\"p3\">**</ept> drop-down list, select the <bpt id=\"p4\">**</bpt>Audit Failure Events Raised<ept id=\"p4\">**</ept> performance counter, and click the <bpt id=\"p5\">**</bpt>Add<ept id=\"p5\">**</ept> button.","pos":[2152,2446],"source":"      > [!NOTE] >  To view the Audit Failure Events Raised performance counter in System Monitor (PerfMon), in the **Add Counters** window, select **ASP.NET** from the **Performance object** drop-down list, select the **Audit Failure Events Raised** performance counter, and click the **Add** button."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using the System Monitor (PerfMon) with ASP.NET Applications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=36882)</ept> in the IIS documentation on MSDN.","pos":[2447,2615],"source":" For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882) in the IIS documentation on MSDN."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph2\">`healthMonitoring`</ph> configuration section.","pos":[2621,2843],"source":"      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[2844,2944]},{"content":"For an example of deriving from the WebFailureAuditEvent class, see the Example section.","pos":[2945,3033]}]},{"pos":[6835,6969],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebFailureAuditEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the supplied parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebFailureAuditEvent\"></xref> class using the supplied parameters."},{"pos":[6981,7258],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[0,277],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to create an instance of &lt;xref:System.Web.Management.WebFailureAuditEvent&gt;, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,277],"source":" You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class."}]}]},{"pos":[7937,7959],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[8027,8070],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[8135,8315],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[9010,9144],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebFailureAuditEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the supplied parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebFailureAuditEvent\"></xref> class using the supplied parameters."},{"pos":[9156,9433],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[0,277],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to create an instance of &lt;xref:System.Web.Management.WebFailureAuditEvent&gt;, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,277],"source":" You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class."}]}]},{"pos":[10133,10155],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[10223,10266],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[10331,10511],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[10582,10702],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the detailed identifier for the event.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event."},{"pos":[11240,11303],"content":"Increments the Audit Failure Events Raised performance counter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Increments the Audit Failure Events Raised performance counter.","pos":[0,63]}]},{"pos":[11316,12072],"content":"The Audit Failure Events Raised performance counter tracks the number of failed audit events raised since the application started. This method also calls the parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A> method, which increments the Events Raised counter. This counter tracks the total number of events raised.       To view these performance counters in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list, select the performance counter you want to view, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882) in the IIS documentation on MSDN.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Audit Failure Events Raised performance counter tracks the number of failed audit events raised since the application started.","pos":[0,130]},{"content":"This method also calls the parent &lt;xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A&gt; method, which increments the Events Raised counter.","pos":[131,283],"source":" This method also calls the parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A> method, which increments the Events Raised counter."},{"content":"This counter tracks the total number of events raised.","pos":[284,338]},{"content":"To view these performance counters in System Monitor (PerfMon), in the <bpt id=\"p1\">**</bpt>Add Counters<ept id=\"p1\">**</ept> window select <bpt id=\"p2\">**</bpt>ASP.NET<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>Performance object<ept id=\"p3\">**</ept> drop-down list, select the performance counter you want to view, and click the <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept> button.","pos":[345,585],"source":"       To view these performance counters in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list, select the performance counter you want to view, and click the **Add** button."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using the System Monitor (PerfMon) with ASP.NET Applications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=36882)</ept> in the IIS documentation on MSDN.","pos":[586,754],"source":" For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882) in the IIS documentation on MSDN."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebFailureAuditEvent\n  id: WebFailureAuditEvent\n  children:\n  - System.Web.Management.WebFailureAuditEvent.#ctor(System.String,System.Object,System.Int32)\n  - System.Web.Management.WebFailureAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  - System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters\n  langs:\n  - csharp\n  name: WebFailureAuditEvent\n  nameWithType: WebFailureAuditEvent\n  fullName: System.Web.Management.WebFailureAuditEvent\n  type: Class\n  summary: Provides information about security failures.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management?displayProperty=fullName> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n The WebFailureAuditEvent class is used when a security operation fails. An example of this is a failed URL authorization for a Web request.  \\n  \\n By default, ASP.NET is configured to raise the WebFailureAuditEvent event for the following features:  \\n  \\n-   File authorization. ASP.NET attempts file authorization only when a Windows Identity is associated with the request. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationFailure>.  \\n  \\n-   URL authorization. This governs unauthorized attempts to access a URL resource. Failed attempts by an anonymous user are not audited, because anonymous authentication failure is acceptable in most circumstances. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationFailure>.  \\n  \\n-   Generic unhandled or security unhandled conditions. The following is a list of the event codes related to these conditions:  \\n  \\n    -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationFailure>  \\n  \\n    -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationFailure>  \\n  \\n    -   <xref:System.Web.Management.WebEventCodes.AuditInvalidViewStateFailure>  \\n  \\n    -   <xref:System.Web.Management.WebEventCodes.AuditUnhandledSecurityException>  \\n  \\n    -   <xref:System.Web.Management.WebEventCodes.AuditUnhandledAccessException>  \\n  \\n When a WebFailureAuditEvent event is raised, ASP.NET health monitoring increments the related Audit Failure Events Raised performance counter and then checks the `healthMonitoring` configuration section to determine whether any providers subscribe to the event. If providers subscribe to the event, ASP.NET dispatches the event to them for processing.  \\n  \\n> [!NOTE]\\n>  To view the Audit Failure Events Raised performance counter in System Monitor (PerfMon), in the **Add Counters** window, select **ASP.NET** from the **Performance object** drop-down list, select the **Audit Failure Events Raised** performance counter, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882) in the IIS documentation on MSDN.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebFailureAuditEvent class, see the Example section.\"\n  example:\n  - \"The following code example demonstrates how to derive from the WebFailureAuditEvent class to create a custom audit event.  \\n  \\n [!code-vb[System.Web.Management.WebFailureAuditEvent#1](~/add/codesnippet/visualbasic/t-system.web.management._22_1.vb)]\\n [!code-cs[System.Web.Management.WebFailureAuditEvent#1](~/add/codesnippet/csharp/t-system.web.management._22_1.cs)]  \\n  \\n The following configuration excerpt shows how to enable ASP.NET to use the WebFailureAuditEvent event.  \\n  \\n```  \\n<healthMonitoring   \\nenabled=\\\"true\\\"  \\nheartBeatInterval=\\\"0\\\">   \\n<providers>  \\n<add name=\\\"EventLogProvider\\\"   \\ntype=\\\"System.Web.Management.EventLogWebEventProvider,  \\nSystem.Web,Version=2.0.3600.0,Culture=neutral,  \\nPublicKeyToken=b03f5f7f11d50a3a\\\"/>  \\n</providers>  \\n  \\n<eventMappings>  \\n<add  name=\\\"SampleWebFailureAuditEvent\\\"   \\ntype=\\\"SamplesAspNet.SampleWebFailureAuditEvent,  \\nwebfailureauditevent,Version=1.0.1663.31140,   \\nCulture=neutral,   \\nPublicKeyToken=0d1fa0f69d94de96,   \\nprocessorArchitecture=MSIL\\\"/>  \\n</eventMappings>  \\n  \\n<rules>  \\n<add name=\\\"Custom Failure Audit Default\\\"  \\neventName=\\\" SampleWebFailureAuditEvent \\\"  \\nprovider=\\\"EventLogProvider\\\"  \\nprofile=\\\"Default\\\"/>    \\n</rules>  \\n  \\n</healthMonitoring>  \\n```\"\n  syntax:\n    content: 'public class WebFailureAuditEvent : System.Web.Management.WebAuditEvent'\n  inheritance:\n  - System.Object\n  - System.Web.Management.WebBaseEvent\n  - System.Web.Management.WebManagementEvent\n  - System.Web.Management.WebAuditEvent\n  implements: []\n  inheritedMembers:\n  - System.Web.Management.WebAuditEvent.RequestInformation\n  - System.Web.Management.WebBaseEvent.ApplicationInformation\n  - System.Web.Management.WebBaseEvent.EventCode\n  - System.Web.Management.WebBaseEvent.EventDetailCode\n  - System.Web.Management.WebBaseEvent.EventID\n  - System.Web.Management.WebBaseEvent.EventOccurrence\n  - System.Web.Management.WebBaseEvent.EventSequence\n  - System.Web.Management.WebBaseEvent.EventSource\n  - System.Web.Management.WebBaseEvent.EventTime\n  - System.Web.Management.WebBaseEvent.EventTimeUtc\n  - System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebBaseEvent.Message\n  - System.Web.Management.WebBaseEvent.Raise\n  - System.Web.Management.WebBaseEvent.Raise(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.WebBaseEvent.ToString\n  - System.Web.Management.WebBaseEvent.ToString(System.Boolean,System.Boolean)\n  - System.Web.Management.WebManagementEvent.ProcessInformation\n  platform:\n  - net462\n- uid: System.Web.Management.WebFailureAuditEvent.#ctor(System.String,System.Object,System.Int32)\n  id: '#ctor(System.String,System.Object,System.Int32)'\n  parent: System.Web.Management.WebFailureAuditEvent\n  langs:\n  - csharp\n  name: WebFailureAuditEvent(String,Object,Int32)\n  nameWithType: WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32)\n  fullName: System.Web.Management.WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebFailureAuditEvent\"></xref> class using the supplied parameters.\n  remarks: This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class.\n  example:\n  - \"The following code example shows how to call this constructor in the `SampleWebFailureAuditEvent` class. This code example is part of a larger example provided for the <xref:System.Web.Management.WebFailureAuditEvent> class overview.  \\n  \\n [!code-vb[System.Web.Management.WebFailureAuditEvent#2](~/add/codesnippet/visualbasic/a50fb7f5-904a-42fa-8a42-_1.vb)]\\n [!code-cs[System.Web.Management.WebFailureAuditEvent#2](~/add/codesnippet/csharp/a50fb7f5-904a-42fa-8a42-_1.cs)]\"\n  syntax:\n    content: protected WebFailureAuditEvent (string message, object eventSource, int eventCode);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n  overload: System.Web.Management.WebFailureAuditEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebFailureAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Object,System.Int32,System.Int32)'\n  parent: System.Web.Management.WebFailureAuditEvent\n  langs:\n  - csharp\n  name: WebFailureAuditEvent(String,Object,Int32,Int32)\n  nameWithType: WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32,Int32)\n  fullName: System.Web.Management.WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32,Int32)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebFailureAuditEvent\"></xref> class using the supplied parameters.\n  remarks: This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of <xref:System.Web.Management.WebFailureAuditEvent>, but you can call this constructor when implementing your own event type that inherits from this class.\n  example:\n  - \"The following code example shows how to call this constructor in the `SampleWebFailureAuditEvent` class. This code example is part of a larger example provided for the <xref:System.Web.Management.WebFailureAuditEvent> class overview.  \\n  \\n [!code-vb[System.Web.Management.WebFailureAuditEvent#3](~/add/codesnippet/visualbasic/c4dd7ba1-3445-4de0-9d16-_1.vb)]\\n [!code-cs[System.Web.Management.WebFailureAuditEvent#3](~/add/codesnippet/csharp/c4dd7ba1-3445-4de0-9d16-_1.cs)]\"\n  syntax:\n    content: protected WebFailureAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: eventDetailCode\n      type: System.Int32\n      description: The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event.\n  overload: System.Web.Management.WebFailureAuditEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters\n  id: IncrementPerfCounters\n  parent: System.Web.Management.WebFailureAuditEvent\n  langs:\n  - csharp\n  name: IncrementPerfCounters()\n  nameWithType: WebFailureAuditEvent.IncrementPerfCounters()\n  fullName: System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Increments the Audit Failure Events Raised performance counter.\n  remarks: \"The Audit Failure Events Raised performance counter tracks the number of failed audit events raised since the application started. This method also calls the parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A> method, which increments the Events Raised counter. This counter tracks the total number of events raised.  \\n  \\n To view these performance counters in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list, select the performance counter you want to view, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882) in the IIS documentation on MSDN.\"\n  syntax:\n    content: protected override void IncrementPerfCounters ();\n    parameters: []\n  overload: System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Management.WebAuditEvent\n  isExternal: false\n  name: System.Web.Management.WebAuditEvent\n- uid: System.Web.Management.WebFailureAuditEvent.#ctor(System.String,System.Object,System.Int32)\n  parent: System.Web.Management.WebFailureAuditEvent\n  isExternal: false\n  name: WebFailureAuditEvent(String,Object,Int32)\n  nameWithType: WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32)\n  fullName: System.Web.Management.WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Management.WebFailureAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  parent: System.Web.Management.WebFailureAuditEvent\n  isExternal: false\n  name: WebFailureAuditEvent(String,Object,Int32,Int32)\n  nameWithType: WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32,Int32)\n  fullName: System.Web.Management.WebFailureAuditEvent.WebFailureAuditEvent(String,Object,Int32,Int32)\n- uid: System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters\n  parent: System.Web.Management.WebFailureAuditEvent\n  isExternal: false\n  name: IncrementPerfCounters()\n  nameWithType: WebFailureAuditEvent.IncrementPerfCounters()\n  fullName: System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters()\n- uid: System.Web.Management.WebFailureAuditEvent.#ctor*\n  parent: System.Web.Management.WebFailureAuditEvent\n  isExternal: false\n  name: WebFailureAuditEvent\n  nameWithType: WebFailureAuditEvent.WebFailureAuditEvent\n- uid: System.Web.Management.WebFailureAuditEvent.IncrementPerfCounters*\n  parent: System.Web.Management.WebFailureAuditEvent\n  isExternal: false\n  name: IncrementPerfCounters\n  nameWithType: WebFailureAuditEvent.IncrementPerfCounters\n"}