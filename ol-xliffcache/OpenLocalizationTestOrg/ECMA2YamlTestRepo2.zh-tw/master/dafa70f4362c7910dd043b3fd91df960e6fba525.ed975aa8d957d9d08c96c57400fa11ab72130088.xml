{"nodes":[{"pos":[2052,2117],"content":"This class can be used for issuing the symmetric key based token.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class can be used for issuing the symmetric key based token.","pos":[0,65]}]},{"pos":[3005,3161],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified encrypting credentials.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with the specified encrypting credentials."},{"pos":[3173,3292],"content":"Use this constructor if you want the STS to use the specified <xref:System.IdentityModel.Tokens.EncryptingCredentials>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if you want the STS to use the specified &lt;xref:System.IdentityModel.Tokens.EncryptingCredentials&gt;.","pos":[0,119],"source":"Use this constructor if you want the STS to use the specified <xref:System.IdentityModel.Tokens.EncryptingCredentials>."}]},{"pos":[3560,3646],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be used.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"></xref> to be used."},{"pos":[4442,4588],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key material.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with the specified key material."},{"pos":[4600,4781],"content":"Use this constructor if you want the STS to use the specified key bytes. This happens when client sends the entropy, and the STS would just use that as the key for the issued token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if you want the STS to use the specified key bytes. This happens when client sends the entropy, and the STS would just use that as the key for the issued token.","pos":[0,181],"nodes":[{"content":"Use this constructor if you want the STS to use the specified key bytes.","pos":[0,72]},{"content":"This happens when client sends the entropy, and the STS would just use that as the key for the issued token.","pos":[73,181]}]}]},{"pos":[5003,5058],"content":"The symmetric key that is used inside the issued token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symmetric key that is used inside the issued token.","pos":[0,55]}]},{"pos":[5176,5229],"content":"The key encrypting credentials for the relying party.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the relying party.","pos":[0,53]}]},{"pos":[5418,5499],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6201,6342],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an auto-generated key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with an auto-generated key."},{"pos":[6354,6502],"content":"Use this constructor if you want the STS to auto-generate the key using a random number generator and send it in the proof token as a binary secret.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if you want the STS to auto-generate the key using a random number generator and send it in the proof token as a binary secret.","pos":[0,148]}]},{"pos":[6740,6770],"content":"The size of the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the symmetric key.","pos":[0,30]}]},{"pos":[6888,6949],"content":"The key encrypting credentials for the target of the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the target of the request.","pos":[0,61]}]},{"pos":[7906,8047],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an auto-generated key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with an auto-generated key."},{"pos":[8060,8376],"content":"Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:      1.  The client sends the entropy, but the server rejects it.      2.  The client does not send the entropy, so the server's entropy is used.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:      1.  The client sends the entropy, but the server rejects it.      2.  The client does not send the entropy, so the server's entropy is used.","pos":[0,312],"nodes":[{"content":"Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key.","pos":[0,114]},{"content":"Two cases can be covered by using this constructor:      1.","pos":[115,174]},{"content":"The client sends the entropy, but the server rejects it.","pos":[176,232]},{"content":"2.","pos":[238,240]},{"content":"The client does not send the entropy, so the server's entropy is used.","pos":[242,312]}]}]},{"pos":[8695,8725],"content":"The size of the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the symmetric key.","pos":[0,30]}]},{"pos":[8843,8904],"content":"The key encrypting credentials for the target of the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the target of the request.","pos":[0,61]}]},{"pos":[9025,9074],"content":"The key encrypting credentials for the requestor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the requestor.","pos":[0,49]}]},{"pos":[9275,9332],"content":"<ph id=\"ph1\">&lt;code&gt;keySizeInBits&lt;/code&gt;</ph> is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>keySizeInBits</code> is less than or equal to zero."},{"pos":[10249,10399],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class to use for sending combined entropy.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class to use for sending combined entropy."},{"pos":[10411,10471],"content":"Use this constructor if you want to send a combined entropy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor if you want to send a combined entropy.","pos":[0,60]}]},{"pos":[10811,10841],"content":"The size of the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the symmetric key.","pos":[0,30]}]},{"pos":[10959,11020],"content":"The key encrypting credentials for the target of the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the target of the request.","pos":[0,61]}]},{"pos":[11141,11233],"content":"The encrypting credentials for the requestor used to encrypt the entropy or the proof token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encrypting credentials for the requestor used to encrypt the entropy or the proof token.","pos":[0,92]}]},{"pos":[11303,11327],"content":"The requestor's entropy.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requestor's entropy.","pos":[0,24]}]},{"pos":[11516,11625],"content":"<ph id=\"ph1\">&lt;code&gt;sourceEntropy&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty array.","needQuote":true,"needEscape":true,"source":"<code>sourceEntropy</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array."},{"pos":[11740,11779],"content":"<ph id=\"ph1\">&lt;code&gt;keySize&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>keySize</code> is less than zero."},{"pos":[12696,12941],"content":"Use this constructor to have the STS autogenerate a key and send it in the proof token as encrypted key. Two cases are covered here 1. client sends the entropy, but server rejects it 2. client did not send a entropy, so just use server's entropy","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor to have the STS autogenerate a key and send it in the proof token as encrypted key. Two cases are covered here 1. client sends the entropy, but server rejects it 2. client did not send a entropy, so just use server's entropy","pos":[0,245],"nodes":[{"content":"Use this constructor to have the STS autogenerate a key and send it in the proof token as encrypted key.","pos":[0,104]},{"content":"Two cases are covered here 1.","pos":[105,134]},{"content":"client sends the entropy, but server rejects it 2.","pos":[135,185]},{"content":"client did not send a entropy, so just use server's entropy","pos":[186,245]}]}]},{"pos":[12954,13363],"content":"If `encryptWith` is a DES algorithm, the key is guaranteed not to be a weak DES key.       Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:      1.  The client sends the entropy, but the server rejects it.      2.  The client does not send the entropy, so the server's entropy is used.","needQuote":false,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`encryptWith`</ph> is a DES algorithm, the key is guaranteed not to be a weak DES key.","pos":[0,84],"source":"If `encryptWith` is a DES algorithm, the key is guaranteed not to be a weak DES key."},{"content":"Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key.","pos":[91,205]},{"content":"Two cases can be covered by using this constructor:      1.","pos":[206,265]},{"content":"The client sends the entropy, but the server rejects it.","pos":[267,323]},{"content":"2.","pos":[329,331]},{"content":"The client does not send the entropy, so the server's entropy is used.","pos":[333,403]}]},{"pos":[13702,13732],"content":"The size of the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the symmetric key.","pos":[0,30]}]},{"pos":[13850,13903],"content":"The key encrypting credentials for the relying party.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the relying party.","pos":[0,53]}]},{"pos":[14024,14073],"content":"The key encrypting credentials for the requestor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key encrypting credentials for the requestor.","pos":[0,49]}]},{"pos":[14141,14288],"content":"The algorithm (URI) specified in the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_&amp;lt;EncryptWith&amp;gt;\" name=\"&amp;lt;EncryptWith&amp;gt;\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> element of the RST.","needQuote":true,"needEscape":true,"source":"The algorithm (URI) specified in the <xref uid=\"langword_csharp_&lt;EncryptWith&gt;\" name=\"&lt;EncryptWith&gt;\" href=\"\"></xref> element of the RST."},{"pos":[14489,14546],"content":"<ph id=\"ph1\">&lt;code&gt;keySizeInBits&lt;/code&gt;</ph> is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>keySizeInBits</code> is less than or equal to zero."},{"pos":[15512,15662],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class to use for sending combined entropy.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class to use for sending combined entropy."},{"pos":[15674,15720],"content":"Use this constructor to send combined entropy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor to send combined entropy.","pos":[0,46]}]},{"pos":[16080,16110],"content":"The size of the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the symmetric key.","pos":[0,30]}]},{"pos":[16228,16339],"content":"The encrypting credentials for the relying party used to encrypt the key in the SecurityKeyIdentifier property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encrypting credentials for the relying party used to encrypt the key in the SecurityKeyIdentifier property.","pos":[0,111]}]},{"pos":[16460,16552],"content":"The encrypting credentials for the requestor used to encrypt the entropy or the proof token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encrypting credentials for the requestor used to encrypt the entropy or the proof token.","pos":[0,92]}]},{"pos":[16622,16646],"content":"The requestor's entropy.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requestor's entropy.","pos":[0,24]}]},{"pos":[16714,16771],"content":"The URI of the algorithm to use to encrypt the proof key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URI of the algorithm to use to encrypt the proof key.","pos":[0,57]}]},{"pos":[16972,17029],"content":"<ph id=\"ph1\">&lt;code&gt;keySizeInBits&lt;/code&gt;</ph> is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>keySizeInBits</code> is less than or equal to zero."},{"pos":[17132,17241],"content":"<ph id=\"ph1\">&lt;code&gt;sourceEntropy&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty array.","needQuote":true,"needEscape":true,"source":"<code>sourceEntropy</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array."},{"pos":[17902,17977],"content":"Modifies the specified RSTR based on the settings in this proof descriptor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Modifies the specified RSTR based on the settings in this proof descriptor.","pos":[0,75]}]},{"pos":[17989,18126],"content":"Sets the appropriate artifacts, such as the requested proof token, inside the RSTR based on what is inside the proof descriptor instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the appropriate artifacts, such as the requested proof token, inside the RSTR based on what is inside the proof descriptor instance.","pos":[0,137]}]},{"pos":[18393,18441],"content":"The RSTR to which to apply the proof descriptor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RSTR to which to apply the proof descriptor.","pos":[0,48]}]},{"pos":[18632,18718],"content":"<ph id=\"ph1\">&lt;code&gt;response&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>response</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19177,19199],"content":"Gets the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key material.","pos":[0,22]}]},{"pos":[19329,19373],"content":"A byte array that contains the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that contains the key material.","pos":[0,44]}]},{"pos":[19952,19991],"content":"Gets the source entropy in plain bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the source entropy in plain bytes.","pos":[0,39]}]},{"pos":[20129,20175],"content":"A byte array that contains the source entropy.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that contains the source entropy.","pos":[0,46]}]},{"pos":[20759,20797],"content":"Gets the target entropy in plain bytes","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the target entropy in plain bytes","pos":[0,38]}]},{"pos":[20935,20981],"content":"A byte array that contains the target entropy.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that contains the target entropy.","pos":[0,46]}]},{"pos":[21546,21683],"content":"Gets the key identifier that can be used inside the issued token to define the key. It is usually the binary secret or the encrypted key;","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key identifier that can be used inside the issued token to define the key. It is usually the binary secret or the encrypted key;","pos":[0,137],"nodes":[{"content":"Gets the key identifier that can be used inside the issued token to define the key.","pos":[0,83]},{"content":"It is usually the binary secret or the encrypted key;","pos":[84,137]}]}]},{"pos":[21889,21908],"content":"The key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier.","pos":[0,19]}]},{"pos":[22555,22686],"content":"Gets the requestor's encrypting credentials, which may be used to encrypt the requested proof token or the entropy in the response.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the requestor's encrypting credentials, which may be used to encrypt the requested proof token or the entropy in the response.","pos":[0,131]}]},{"pos":[22903,22942],"content":"The requestor’s encrypting credentials.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requestor’s encrypting credentials.","pos":[0,39]}]},{"pos":[23591,23712],"content":"Gets the relying party encrypting credentials, which may be used to encrypt the requested security token in the response.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the relying party encrypting credentials, which may be used to encrypt the requested security token in the response.","pos":[0,121]}]},{"pos":[23926,23967],"content":"The relying party encrypting credentials.","needQuote":true,"needEscape":true,"nodes":[{"content":"The relying party encrypting credentials.","pos":[0,41]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  id: SymmetricProofDescriptor\n  children:\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials\n  - System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor\n  nameWithType: SymmetricProofDescriptor\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  type: Class\n  summary: This class can be used for issuing the symmetric key based token.\n  syntax:\n    content: 'public class SymmetricProofDescriptor : System.IdentityModel.Tokens.ProofDescriptor'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.ProofDescriptor\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)\n  id: '#ctor(System.IdentityModel.Tokens.EncryptingCredentials)'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with the specified encrypting credentials.\n  remarks: Use this constructor if you want the STS to use the specified <xref:System.IdentityModel.Tokens.EncryptingCredentials>.\n  syntax:\n    content: public SymmetricProofDescriptor (System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);\n    parameters:\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The <xref href=\"System.IdentityModel.Tokens.EncryptingCredentials\"></xref> to be used.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  id: '#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(Byte[],EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with the specified key material.\n  remarks: Use this constructor if you want the STS to use the specified key bytes. This happens when client sends the entropy, and the STS would just use that as the key for the issued token.\n  syntax:\n    content: public SymmetricProofDescriptor (byte[] key, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The symmetric key that is used inside the issued token.\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the relying party.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)\n  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with an auto-generated key.\n  remarks: Use this constructor if you want the STS to auto-generate the key using a random number generator and send it in the proof token as a binary secret.\n  syntax:\n    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);\n    parameters:\n    - id: keySizeInBits\n      type: System.Int32\n      description: The size of the symmetric key.\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the target of the request.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)\n  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class with an auto-generated key.\n  remarks: \"Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:  \\n  \\n1.  The client sends the entropy, but the server rejects it.  \\n  \\n2.  The client does not send the entropy, so the server's entropy is used.\"\n  syntax:\n    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials);\n    parameters:\n    - id: keySizeInBits\n      type: System.Int32\n      description: The size of the symmetric key.\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the target of the request.\n    - id: requestorWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the requestor.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>keySizeInBits</code> is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])\n  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class to use for sending combined entropy.\n  remarks: Use this constructor if you want to send a combined entropy.\n  syntax:\n    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, byte[] sourceEntropy);\n    parameters:\n    - id: keySizeInBits\n      type: System.Int32\n      description: The size of the symmetric key.\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the target of the request.\n    - id: requestorWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The encrypting credentials for the requestor used to encrypt the entropy or the proof token.\n    - id: sourceEntropy\n      type: System.Byte[]\n      description: The requestor's entropy.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>sourceEntropy</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>keySize</code> is less than zero.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)\n  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Use this constructor to have the STS autogenerate a key and send it in the proof token as encrypted key. Two cases are covered here 1. client sends the entropy, but server rejects it 2. client did not send a entropy, so just use server's entropy\n  remarks: \"If `encryptWith` is a DES algorithm, the key is guaranteed not to be a weak DES key.  \\n  \\n Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:  \\n  \\n1.  The client sends the entropy, but the server rejects it.  \\n  \\n2.  The client does not send the entropy, so the server's entropy is used.\"\n  syntax:\n    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, string encryptWith);\n    parameters:\n    - id: keySizeInBits\n      type: System.Int32\n      description: The size of the symmetric key.\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the relying party.\n    - id: requestorWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The key encrypting credentials for the requestor.\n    - id: encryptWith\n      type: System.String\n      description: The algorithm (URI) specified in the <xref uid=\"langword_csharp_&lt;EncryptWith&gt;\" name=\"&lt;EncryptWith&gt;\" href=\"\"></xref> element of the RST.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>keySizeInBits</code> is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)\n  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)'\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricProofDescriptor\"></xref> class to use for sending combined entropy.\n  remarks: Use this constructor to send combined entropy.\n  syntax:\n    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, byte[] sourceEntropy, string encryptWith);\n    parameters:\n    - id: keySizeInBits\n      type: System.Int32\n      description: The size of the symmetric key.\n    - id: targetWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The encrypting credentials for the relying party used to encrypt the key in the SecurityKeyIdentifier property.\n    - id: requestorWrappingCredentials\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The encrypting credentials for the requestor used to encrypt the entropy or the proof token.\n    - id: sourceEntropy\n      type: System.Byte[]\n      description: The requestor's entropy.\n    - id: encryptWith\n      type: System.String\n      description: The URI of the algorithm to use to encrypt the proof key.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>keySizeInBits</code> is less than or equal to zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>sourceEntropy</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)\n  id: ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: ApplyTo(RequestSecurityTokenResponse)\n  nameWithType: SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Modifies the specified RSTR based on the settings in this proof descriptor.\n  remarks: Sets the appropriate artifacts, such as the requested proof token, inside the RSTR based on what is inside the proof descriptor instance.\n  syntax:\n    content: public override void ApplyTo (System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);\n    parameters:\n    - id: response\n      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse\n      description: The RSTR to which to apply the proof descriptor.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>response</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes\n  id: GetKeyBytes\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: GetKeyBytes()\n  nameWithType: SymmetricProofDescriptor.GetKeyBytes()\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the key material.\n  syntax:\n    content: public byte[] GetKeyBytes ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array that contains the key material.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy\n  id: GetSourceEntropy\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: GetSourceEntropy()\n  nameWithType: SymmetricProofDescriptor.GetSourceEntropy()\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the source entropy in plain bytes.\n  syntax:\n    content: protected byte[] GetSourceEntropy ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array that contains the source entropy.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy\n  id: GetTargetEntropy\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: GetTargetEntropy()\n  nameWithType: SymmetricProofDescriptor.GetTargetEntropy()\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the target entropy in plain bytes\n  syntax:\n    content: protected byte[] GetTargetEntropy ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array that contains the target entropy.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier\n  id: KeyIdentifier\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: KeyIdentifier\n  nameWithType: SymmetricProofDescriptor.KeyIdentifier\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the key identifier that can be used inside the issued token to define the key. It is usually the binary secret or the encrypted key;\n  syntax:\n    content: public override System.IdentityModel.Tokens.SecurityKeyIdentifier KeyIdentifier { get; }\n    return:\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The key identifier.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials\n  id: RequestorEncryptingCredentials\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: RequestorEncryptingCredentials\n  nameWithType: SymmetricProofDescriptor.RequestorEncryptingCredentials\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the requestor's encrypting credentials, which may be used to encrypt the requested proof token or the entropy in the response.\n  syntax:\n    content: protected System.IdentityModel.Tokens.EncryptingCredentials RequestorEncryptingCredentials { get; }\n    return:\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The requestor’s encrypting credentials.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials\n  id: TargetEncryptingCredentials\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  langs:\n  - csharp\n  name: TargetEncryptingCredentials\n  nameWithType: SymmetricProofDescriptor.TargetEncryptingCredentials\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the relying party encrypting credentials, which may be used to encrypt the requested security token in the response.\n  syntax:\n    content: protected System.IdentityModel.Tokens.EncryptingCredentials TargetEncryptingCredentials { get; }\n    return:\n      type: System.IdentityModel.Tokens.EncryptingCredentials\n      description: The relying party encrypting credentials.\n  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.ProofDescriptor\n  isExternal: false\n  name: System.IdentityModel.Tokens.ProofDescriptor\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)\n- uid: System.IdentityModel.Tokens.EncryptingCredentials\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: EncryptingCredentials\n  nameWithType: EncryptingCredentials\n  fullName: System.IdentityModel.Tokens.EncryptingCredentials\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(Byte[],EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: ApplyTo(RequestSecurityTokenResponse)\n  nameWithType: SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)\n- uid: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse\n  parent: System.IdentityModel.Protocols.WSTrust\n  isExternal: false\n  name: RequestSecurityTokenResponse\n  nameWithType: RequestSecurityTokenResponse\n  fullName: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: GetKeyBytes()\n  nameWithType: SymmetricProofDescriptor.GetKeyBytes()\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes()\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: GetSourceEntropy()\n  nameWithType: SymmetricProofDescriptor.GetSourceEntropy()\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy()\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: GetTargetEntropy()\n  nameWithType: SymmetricProofDescriptor.GetTargetEntropy()\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy()\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: KeyIdentifier\n  nameWithType: SymmetricProofDescriptor.KeyIdentifier\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: RequestorEncryptingCredentials\n  nameWithType: SymmetricProofDescriptor.RequestorEncryptingCredentials\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: TargetEncryptingCredentials\n  nameWithType: SymmetricProofDescriptor.TargetEncryptingCredentials\n  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: SymmetricProofDescriptor\n  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: ApplyTo\n  nameWithType: SymmetricProofDescriptor.ApplyTo\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: GetKeyBytes\n  nameWithType: SymmetricProofDescriptor.GetKeyBytes\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: GetSourceEntropy\n  nameWithType: SymmetricProofDescriptor.GetSourceEntropy\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: GetTargetEntropy\n  nameWithType: SymmetricProofDescriptor.GetTargetEntropy\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: KeyIdentifier\n  nameWithType: SymmetricProofDescriptor.KeyIdentifier\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: RequestorEncryptingCredentials\n  nameWithType: SymmetricProofDescriptor.RequestorEncryptingCredentials\n- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials*\n  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor\n  isExternal: false\n  name: TargetEncryptingCredentials\n  nameWithType: SymmetricProofDescriptor.TargetEncryptingCredentials\n"}