{"nodes":[{"pos":[260,439],"content":"Provides an application-level service that processes multitouch input from the operating system and raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Touch.FrameReported\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides an application-level service that processes multitouch input from the operating system and raises the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event."},{"pos":[452,2274],"content":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.       The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.       Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction>, <xref:System.Windows.Input.TouchAction>, or <xref:System.Windows.Input.TouchAction> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Windows.Input.Touch.FrameReported&gt; event is included in <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> to support compatibility with Silverlight.","pos":[0,184],"source":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] to support compatibility with Silverlight."},{"content":"If you do not have to ensure compatibility with Silverlight, use the touch events, such as &lt;xref:System.Windows.UIElement.TouchDown&gt; and &lt;xref:System.Windows.UIElement.TouchMove&gt;, on &lt;xref:System.Windows.UIElement&gt;, &lt;xref:System.Windows.UIElement3D&gt;, or &lt;xref:System.Windows.ContentElement&gt;.","pos":[185,476],"source":" If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>."},{"content":"The &lt;xref:System.Windows.Input.Touch.FrameReported&gt; event does not use the same event model as other WPF input events, such as &lt;xref:System.Windows.UIElement.TouchDown&gt; and &lt;xref:System.Windows.UIElement.TouchMove&gt;.","pos":[483,698],"source":"       The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>."},{"content":"Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the &lt;xref:System.Windows.Input.Touch.FrameReported&gt; event is a single event that is handled at the application level.","pos":[699,927],"source":" Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level."},{"content":"Therefore, you cannot use the <ph id=\"ph1\">`sender`</ph> parameter of the event handler to determine what element is touched.","pos":[928,1035],"source":" Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched."},{"content":"Use the &lt;xref:System.Windows.Input.TouchFrameEventArgs&gt; to get the &lt;xref:System.Windows.Input.TouchPoint&gt; values that are relevant to the touch event.","pos":[1042,1192],"source":"       Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event."},{"content":"From the &lt;xref:System.Windows.Input.TouchPoint&gt;, you can get the &lt;xref:System.Windows.Input.TouchPoint.Position%2A&gt; of the touch and determine whether the &lt;xref:System.Windows.Input.TouchAction&gt; was a &lt;xref:System.Windows.Input.TouchAction&gt;, &lt;xref:System.Windows.Input.TouchAction&gt;, or &lt;xref:System.Windows.Input.TouchAction&gt; action.","pos":[1193,1526],"source":" From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction>, <xref:System.Windows.Input.TouchAction>, or <xref:System.Windows.Input.TouchAction> action."},{"content":"You can also use the &lt;xref:System.Windows.Input.TouchPoint&gt; to get the &lt;xref:System.Windows.Input.TouchDevice&gt;.","pos":[1527,1638],"source":" You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>."},{"content":"From the &lt;xref:System.Windows.Input.TouchDevice&gt;, you can determine the device &lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt; and get information about the element that is touched.","pos":[1639,1818],"source":" From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched."}]},{"pos":[4307,4343],"content":"Occurs when a touch message is sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a touch message is sent.","pos":[0,36]}]},{"pos":[4356,5199],"content":"A frame is one in a series of multitouch messages or touch points. You can respond to touches by handling the FrameReported event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.       The FrameReported event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the FrameReported event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.","needQuote":false,"needEscape":true,"nodes":[{"content":"A frame is one in a series of multitouch messages or touch points.","pos":[0,66]},{"content":"You can respond to touches by handling the FrameReported event and accessing the details of the &lt;xref:System.Windows.Input.TouchPoint&gt; from the &lt;xref:System.Windows.Input.TouchFrameEventArgs&gt; event data.","pos":[67,270],"source":" You can respond to touches by handling the FrameReported event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data."},{"content":"The FrameReported event does not use the same event model as other <ph id=\"ph1\">[!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)]</ph> input events, such as &lt;xref:System.Windows.UIElement.TouchDown&gt; and &lt;xref:System.Windows.UIElement.TouchMove&gt;.","pos":[277,538],"source":"       The FrameReported event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>."},{"content":"Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the FrameReported event is a single event that is handled at the application level.","pos":[539,733]},{"content":"Therefore, you cannot use the <ph id=\"ph1\">`sender`</ph> parameter of the event handler to determine what element is touched.","pos":[734,841],"source":" Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched."}]},{"pos":[6383,6395],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.Touch\n  id: Touch\n  children:\n  - System.Windows.Input.Touch.FrameReported\n  langs:\n  - csharp\n  name: Touch\n  nameWithType: Touch\n  fullName: System.Windows.Input.Touch\n  type: Class\n  summary: Provides an application-level service that processes multitouch input from the operating system and raises the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event.\n  remarks: \"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.  \\n  \\n The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.  \\n  \\n Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction>, <xref:System.Windows.Input.TouchAction>, or <xref:System.Windows.Input.TouchAction> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.\"\n  example:\n  - \"The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers across a touchscreen. Each touch is represented by a <xref:System.Windows.Input.TouchDevice>.The pattern is created by drawing a line between the touch points provided by the touches. This example requires a Windows Touch–compatible screen.  \\n  \\n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a <xref:System.Windows.Controls.Grid>.  \\n  \\n [!code-xml[TouchFrameSample#000](~/add/codesnippet/xaml/wpftouchframesample/mainwindow.xaml#000)]  \\n  \\n The following code handles the <xref:System.Windows.Input.Touch.FrameReported> event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n [!code-vb[TouchFrameSample#100](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#100)]\\n [!code-cs[TouchFrameSample#100](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#100)]\"\n  syntax:\n    content: public static class Touch\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Touch.FrameReported\n  id: FrameReported\n  parent: System.Windows.Input.Touch\n  langs:\n  - csharp\n  name: FrameReported\n  nameWithType: Touch.FrameReported\n  fullName: System.Windows.Input.Touch.FrameReported\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when a touch message is sent.\n  remarks: \"A frame is one in a series of multitouch messages or touch points. You can respond to touches by handling the FrameReported event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.  \\n  \\n The FrameReported event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the FrameReported event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.\"\n  example:\n  - \"The following example handles the FrameReported event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \\n  \\n [!code-vb[TouchFrameSample#110](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#110)]\\n [!code-cs[TouchFrameSample#110](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#110)]\"\n  syntax:\n    content: public static event System.Windows.Input.TouchFrameEventHandler FrameReported;\n    return:\n      type: System.Windows.Input.TouchFrameEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Input.Touch.FrameReported\n  parent: System.Windows.Input.Touch\n  isExternal: false\n  name: FrameReported\n  nameWithType: Touch.FrameReported\n  fullName: System.Windows.Input.Touch.FrameReported\n- uid: System.Windows.Input.TouchFrameEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchFrameEventHandler\n  nameWithType: TouchFrameEventHandler\n  fullName: System.Windows.Input.TouchFrameEventHandler\n"}