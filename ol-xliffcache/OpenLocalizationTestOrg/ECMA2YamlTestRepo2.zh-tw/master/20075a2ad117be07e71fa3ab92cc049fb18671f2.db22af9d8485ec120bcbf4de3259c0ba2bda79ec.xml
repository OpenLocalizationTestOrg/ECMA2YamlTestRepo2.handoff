{"nodes":[{"pos":[1968,2276],"content":"Provides command related utility methods that register <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.","needQuote":true,"needEscape":true,"source":"Provides command related utility methods that register <xref href=\"System.Windows.Input.CommandBinding\"></xref> and <xref href=\"System.Windows.Input.InputBinding\"></xref> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command."},{"pos":[2289,3207],"content":"The CommandManager is responsible for managing routed commands.  For more information about commanding, see [Commanding Overview](~/add/includes/ajax-current-ext-md.md).       Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> to register a <xref:System.Windows.Input.CommandBinding> to a class as opposed to an instance.       Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> to register an <xref:System.Windows.Input.InputBinding> to a class as opposed to an instance.       The <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method forces the CommandManager to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.  The <xref:System.Windows.Input.CommandManager.RequerySuggested> event informs a command source to query the command it is associated with to determine whether or not the command can execute.","needQuote":false,"needEscape":true,"nodes":[{"content":"The CommandManager is responsible for managing routed commands.","pos":[0,63]},{"content":"For more information about commanding, see <bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[65,169],"source":"  For more information about commanding, see [Commanding Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"Use &lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt; to register a &lt;xref:System.Windows.Input.CommandBinding&gt; to a class as opposed to an instance.","pos":[176,348],"source":"       Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> to register a <xref:System.Windows.Input.CommandBinding> to a class as opposed to an instance."},{"content":"Use &lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt; to register an &lt;xref:System.Windows.Input.InputBinding&gt; to a class as opposed to an instance.","pos":[355,524],"source":"       Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> to register an <xref:System.Windows.Input.InputBinding> to a class as opposed to an instance."},{"content":"The &lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt; method forces the CommandManager to raise the &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event.","pos":[531,720],"source":"       The <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method forces the CommandManager to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event."},{"content":"The &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event informs a command source to query the command it is associated with to determine whether or not the command can execute.","pos":[722,912],"source":"  The <xref:System.Windows.Input.CommandManager.RequerySuggested> event informs a command source to query the command it is associated with to determine whether or not the command can execute."}]},{"pos":[4037,4156],"content":"Attaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified element.","needQuote":true,"needEscape":true,"source":"Attaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> to the specified element."},{"pos":[6661,6696],"content":"The element to attach <ph id=\"ph1\">`handler`</ph> to.","needQuote":true,"needEscape":true,"source":"The element to attach `handler` to."},{"pos":[6796,6820],"content":"The can execute handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The can execute handler.","pos":[0,24]}]},{"pos":[7007,7116],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7794,7911],"content":"Attaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified element.","needQuote":true,"needEscape":true,"source":"Attaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> to the specified element."},{"pos":[10412,10447],"content":"The element to attach <ph id=\"ph1\">`handler`</ph> to.","needQuote":true,"needEscape":true,"source":"The element to attach `handler` to."},{"pos":[10545,10566],"content":"The executed handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The executed handler.","pos":[0,21]}]},{"pos":[10751,10860],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11593,11712],"content":"Attaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified element.","needQuote":true,"needEscape":true,"source":"Attaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> to the specified element."},{"pos":[14266,14301],"content":"The element to attach <ph id=\"ph1\">`handler`</ph> to.","needQuote":true,"needEscape":true,"source":"The element to attach `handler` to."},{"pos":[14401,14425],"content":"The can execute handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The can execute handler.","pos":[0,24]}]},{"pos":[14619,14728],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15441,15558],"content":"Attaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified element.","needQuote":true,"needEscape":true,"source":"Attaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> to the specified element."},{"pos":[18108,18143],"content":"The element to attach <ph id=\"ph1\">`handler`</ph> to.","needQuote":true,"needEscape":true,"source":"The element to attach `handler` to."},{"pos":[18241,18265],"content":"The can execute handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The can execute handler.","pos":[0,24]}]},{"pos":[18457,18566],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18966,19050],"content":"Identifies the <xref:System.Windows.Input.CommandManager.CanExecute> attached event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; attached event.","pos":[0,84],"source":"Identifies the <xref:System.Windows.Input.CommandManager.CanExecute> attached event."}]},{"pos":[19211,19223],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19630,19712],"content":"Identifies the <xref:System.Windows.Input.CommandManager.Executed> attached event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.CommandManager.Executed&gt; attached event.","pos":[0,82],"source":"Identifies the <xref:System.Windows.Input.CommandManager.Executed> attached event."}]},{"pos":[19871,19883],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20362,20523],"content":"Forces the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to raise the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.CommandManager.RequerySuggested\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Forces the <xref href=\"System.Windows.Input.CommandManager\"></xref> to raise the <xref href=\"System.Windows.Input.CommandManager.RequerySuggested\"></xref> event."},{"pos":[20535,21057],"content":"The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.  In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, InvalidateRequerySuggested can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.  In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, InvalidateRequerySuggested can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.","pos":[0,522],"nodes":[{"content":"The &lt;xref:System.Windows.Input.CommandManager&gt; only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.","pos":[0,174],"source":"The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus."},{"content":"In situations where the &lt;xref:System.Windows.Input.CommandManager&gt; does not sufficiently determine a change in conditions that cause a command to not be able to execute, InvalidateRequerySuggested can be called to force the &lt;xref:System.Windows.Input.CommandManager&gt; to raise the &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event.","pos":[176,522],"source":"  In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, InvalidateRequerySuggested can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event."}]}]},{"pos":[22354,22445],"content":"Identifies the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> attached event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt; attached event.","pos":[0,91],"source":"Identifies the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> attached event."}]},{"pos":[22613,22625],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23067,23156],"content":"Identifies the <xref:System.Windows.Input.CommandManager.PreviewExecuted> attached event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt; attached event.","pos":[0,89],"source":"Identifies the <xref:System.Windows.Input.CommandManager.PreviewExecuted> attached event."}]},{"pos":[23322,23334],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23973,24066],"content":"Registers a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified type.","needQuote":true,"needEscape":true,"source":"Registers a <xref href=\"System.Windows.Input.CommandBinding\"></xref> with the specified type."},{"pos":[24078,24209],"content":"This method enables a <xref:System.Windows.Input.CommandBinding> to be associated with a class instead than an instance of a class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method enables a &lt;xref:System.Windows.Input.CommandBinding&gt; to be associated with a class instead than an instance of a class.","pos":[0,131],"source":"This method enables a <xref:System.Windows.Input.CommandBinding> to be associated with a class instead than an instance of a class."}]},{"pos":[24419,24469],"content":"The class with which to register <ph id=\"ph1\">`commandBinding`</ph>.","needQuote":true,"needEscape":true,"source":"The class with which to register `commandBinding`."},{"pos":[24562,24594],"content":"The command binding to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command binding to register.","pos":[0,32]}]},{"pos":[24788,24901],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;commandBinding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> or <code>commandBinding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[25503,25606],"content":"Registers the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified type.","needQuote":true,"needEscape":true,"source":"Registers the specified <xref href=\"System.Windows.Input.InputBinding\"></xref> with the specified type."},{"pos":[25618,25745],"content":"This method enables an <xref:System.Windows.Input.InputBinding> to be associated with a type instead of an instance of a class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method enables an &lt;xref:System.Windows.Input.InputBinding&gt; to be associated with a type instead of an instance of a class.","pos":[0,127],"source":"This method enables an <xref:System.Windows.Input.InputBinding> to be associated with a type instead of an instance of a class."}]},{"pos":[25949,25990],"content":"The type to register <ph id=\"ph1\">`inputBinding`</ph> with.","needQuote":true,"needEscape":true,"source":"The type to register `inputBinding` with."},{"pos":[26079,26109],"content":"The input binding to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input binding to register.","pos":[0,30]}]},{"pos":[26301,26412],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inputBinding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> or <code>inputBinding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27125,27246],"content":"Detaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified element.","needQuote":true,"needEscape":true,"source":"Detaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> from the specified element."},{"pos":[28163,28200],"content":"The element to remove <ph id=\"ph1\">`handler`</ph> from.","needQuote":true,"needEscape":true,"source":"The element to remove `handler` from."},{"pos":[28300,28324],"content":"The can execute handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The can execute handler.","pos":[0,24]}]},{"pos":[28514,28623],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[29316,29435],"content":"Detaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified element.","needQuote":true,"needEscape":true,"source":"Detaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> from the specified element."},{"pos":[30348,30385],"content":"The element to remove <ph id=\"ph1\">`handler`</ph> from.","needQuote":true,"needEscape":true,"source":"The element to remove `handler` from."},{"pos":[30483,30504],"content":"The executed handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The executed handler.","pos":[0,21]}]},{"pos":[30692,30801],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[31549,31670],"content":"Detaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified element.","needQuote":true,"needEscape":true,"source":"Detaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> from the specified element."},{"pos":[32594,32631],"content":"The element to remove <ph id=\"ph1\">`handler`</ph> from.","needQuote":true,"needEscape":true,"source":"The element to remove `handler` from."},{"pos":[32731,32755],"content":"The can execute handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The can execute handler.","pos":[0,24]}]},{"pos":[32952,33061],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[33789,33908],"content":"Detaches the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified element.","needQuote":true,"needEscape":true,"source":"Detaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> from the specified element."},{"pos":[34828,34865],"content":"The element to remove <ph id=\"ph1\">`handler`</ph> from.","needQuote":true,"needEscape":true,"source":"The element to remove `handler` from."},{"pos":[34963,34984],"content":"The executed handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The executed handler.","pos":[0,21]}]},{"pos":[35179,35288],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[35693,35839],"content":"Occurs when the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> detects conditions that might change the ability of a command to execute.","needQuote":true,"needEscape":true,"source":"Occurs when the <xref href=\"System.Windows.Input.CommandManager\"></xref> detects conditions that might change the ability of a command to execute."},{"pos":[35851,36192],"content":"Since this event is static, it will only hold onto the handler as a weak reference.  Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected. This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Since this event is static, it will only hold onto the handler as a weak reference.  Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected. This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.","pos":[0,341],"nodes":[{"content":"Since this event is static, it will only hold onto the handler as a weak reference.","pos":[0,83]},{"content":"Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.","pos":[85,210]},{"content":"This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.","pos":[211,341]}]}]},{"pos":[36330,36342],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CommandManager\n  id: CommandManager\n  children:\n  - System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  - System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  - System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  - System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  - System.Windows.Input.CommandManager.CanExecuteEvent\n  - System.Windows.Input.CommandManager.ExecutedEvent\n  - System.Windows.Input.CommandManager.InvalidateRequerySuggested\n  - System.Windows.Input.CommandManager.PreviewCanExecuteEvent\n  - System.Windows.Input.CommandManager.PreviewExecutedEvent\n  - System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)\n  - System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)\n  - System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  - System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  - System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  - System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  - System.Windows.Input.CommandManager.RequerySuggested\n  langs:\n  - csharp\n  name: CommandManager\n  nameWithType: CommandManager\n  fullName: System.Windows.Input.CommandManager\n  type: Class\n  summary: Provides command related utility methods that register <xref href=\"System.Windows.Input.CommandBinding\"></xref> and <xref href=\"System.Windows.Input.InputBinding\"></xref> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.\n  remarks: \"The CommandManager is responsible for managing routed commands.  For more information about commanding, see [Commanding Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> to register a <xref:System.Windows.Input.CommandBinding> to a class as opposed to an instance.  \\n  \\n Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> to register an <xref:System.Windows.Input.InputBinding> to a class as opposed to an instance.  \\n  \\n The <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method forces the CommandManager to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.  The <xref:System.Windows.Input.CommandManager.RequerySuggested> event informs a command source to query the command it is associated with to determine whether or not the command can execute.\"\n  syntax:\n    content: public sealed class CommandManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  id: AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Attaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> to the specified element.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \\n  \\n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \\n  \\n And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the AddCanExecuteHandler and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]\"\n  syntax:\n    content: public static void AddCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to attach `handler` to.\n    - id: handler\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: The can execute handler.\n  overload: System.Windows.Input.CommandManager.AddCanExecuteHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  id: AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Attaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> to the specified element.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \\n  \\n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \\n  \\n And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and AddExecutedHandler.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]\"\n  syntax:\n    content: public static void AddExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to attach `handler` to.\n    - id: handler\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The executed handler.\n  overload: System.Windows.Input.CommandManager.AddExecutedHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  id: AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Attaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> to the specified element.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \\n  \\n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \\n  \\n Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]\"\n  syntax:\n    content: public static void AddPreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to attach `handler` to.\n    - id: handler\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: The can execute handler.\n  overload: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  id: AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Attaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> to the specified element.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \\n  \\n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \\n  \\n Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]\"\n  syntax:\n    content: public static void AddPreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to attach `handler` to.\n    - id: handler\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The can execute handler.\n  overload: System.Windows.Input.CommandManager.AddPreviewExecutedHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.CanExecuteEvent\n  id: CanExecuteEvent\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: CanExecuteEvent\n  nameWithType: CommandManager.CanExecuteEvent\n  fullName: System.Windows.Input.CommandManager.CanExecuteEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.CommandManager.CanExecute> attached event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent CanExecuteEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.ExecutedEvent\n  id: ExecutedEvent\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: ExecutedEvent\n  nameWithType: CommandManager.ExecutedEvent\n  fullName: System.Windows.Input.CommandManager.ExecutedEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.CommandManager.Executed> attached event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ExecutedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.InvalidateRequerySuggested\n  id: InvalidateRequerySuggested\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: InvalidateRequerySuggested()\n  nameWithType: CommandManager.InvalidateRequerySuggested()\n  fullName: System.Windows.Input.CommandManager.InvalidateRequerySuggested()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Forces the <xref href=\"System.Windows.Input.CommandManager\"></xref> to raise the <xref href=\"System.Windows.Input.CommandManager.RequerySuggested\"></xref> event.\n  remarks: The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.  In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, InvalidateRequerySuggested can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.\n  example:\n  - \"The following example uses a <xref:System.Windows.Threading.DispatcherTimer> to periodically call InvalidateRequerySuggested to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.  \\n  \\n [!code-vb[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\\n [!code-cs[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]\"\n  syntax:\n    content: public static void InvalidateRequerySuggested ();\n    parameters: []\n  overload: System.Windows.Input.CommandManager.InvalidateRequerySuggested*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.PreviewCanExecuteEvent\n  id: PreviewCanExecuteEvent\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: PreviewCanExecuteEvent\n  nameWithType: CommandManager.PreviewCanExecuteEvent\n  fullName: System.Windows.Input.CommandManager.PreviewCanExecuteEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> attached event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.PreviewExecutedEvent\n  id: PreviewExecutedEvent\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: PreviewExecutedEvent\n  nameWithType: CommandManager.PreviewExecutedEvent\n  fullName: System.Windows.Input.CommandManager.PreviewExecutedEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.CommandManager.PreviewExecuted> attached event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)\n  id: RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RegisterClassCommandBinding(Type,CommandBinding)\n  nameWithType: CommandManager.RegisterClassCommandBinding(Type,CommandBinding)\n  fullName: System.Windows.Input.CommandManager.RegisterClassCommandBinding(Type,CommandBinding)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Registers a <xref href=\"System.Windows.Input.CommandBinding\"></xref> with the specified type.\n  remarks: This method enables a <xref:System.Windows.Input.CommandBinding> to be associated with a class instead than an instance of a class.\n  syntax:\n    content: public static void RegisterClassCommandBinding (Type type, System.Windows.Input.CommandBinding commandBinding);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The class with which to register `commandBinding`.\n    - id: commandBinding\n      type: System.Windows.Input.CommandBinding\n      description: The command binding to register.\n  overload: System.Windows.Input.CommandManager.RegisterClassCommandBinding*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> or <code>commandBinding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)\n  id: RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RegisterClassInputBinding(Type,InputBinding)\n  nameWithType: CommandManager.RegisterClassInputBinding(Type,InputBinding)\n  fullName: System.Windows.Input.CommandManager.RegisterClassInputBinding(Type,InputBinding)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Registers the specified <xref href=\"System.Windows.Input.InputBinding\"></xref> with the specified type.\n  remarks: This method enables an <xref:System.Windows.Input.InputBinding> to be associated with a type instead of an instance of a class.\n  syntax:\n    content: public static void RegisterClassInputBinding (Type type, System.Windows.Input.InputBinding inputBinding);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to register `inputBinding` with.\n    - id: inputBinding\n      type: System.Windows.Input.InputBinding\n      description: The input binding to register.\n  overload: System.Windows.Input.CommandManager.RegisterClassInputBinding*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> or <code>inputBinding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  id: RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Detaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> from the specified element.\n  remarks: ''\n  example:\n  - \"The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]\"\n  syntax:\n    content: public static void RemoveCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to remove `handler` from.\n    - id: handler\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: The can execute handler.\n  overload: System.Windows.Input.CommandManager.RemoveCanExecuteHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  id: RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Detaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> from the specified element.\n  remarks: ''\n  example:\n  - \"The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]\"\n  syntax:\n    content: public static void RemoveExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to remove `handler` from.\n    - id: handler\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The executed handler.\n  overload: System.Windows.Input.CommandManager.RemoveExecutedHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  id: RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Detaches the specified <xref href=\"System.Windows.Input.CanExecuteRoutedEventHandler\"></xref> from the specified element.\n  remarks: ''\n  example:\n  - \"The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]\"\n  syntax:\n    content: public static void RemovePreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to remove `handler` from.\n    - id: handler\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: The can execute handler.\n  overload: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  id: RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Detaches the specified <xref href=\"System.Windows.Input.ExecutedRoutedEventHandler\"></xref> from the specified element.\n  remarks: ''\n  example:\n  - \"The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]\"\n  syntax:\n    content: public static void RemovePreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);\n    parameters:\n    - id: element\n      type: System.Windows.UIElement\n      description: The element to remove `handler` from.\n    - id: handler\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The executed handler.\n  overload: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>element</code> or <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandManager.RequerySuggested\n  id: RequerySuggested\n  parent: System.Windows.Input.CommandManager\n  langs:\n  - csharp\n  name: RequerySuggested\n  nameWithType: CommandManager.RequerySuggested\n  fullName: System.Windows.Input.CommandManager.RequerySuggested\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the <xref href=\"System.Windows.Input.CommandManager\"></xref> detects conditions that might change the ability of a command to execute.\n  remarks: Since this event is static, it will only hold onto the handler as a weak reference.  Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected. This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.\n  syntax:\n    content: public static event EventHandler RequerySuggested;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n- uid: System.Windows.UIElement\n  parent: System.Windows\n  isExternal: false\n  name: UIElement\n  nameWithType: UIElement\n  fullName: System.Windows.UIElement\n- uid: System.Windows.Input.CanExecuteRoutedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: CanExecuteRoutedEventHandler\n  nameWithType: CanExecuteRoutedEventHandler\n  fullName: System.Windows.Input.CanExecuteRoutedEventHandler\n- uid: System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n- uid: System.Windows.Input.ExecutedRoutedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: ExecutedRoutedEventHandler\n  nameWithType: ExecutedRoutedEventHandler\n  fullName: System.Windows.Input.ExecutedRoutedEventHandler\n- uid: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n- uid: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n- uid: System.Windows.Input.CommandManager.CanExecuteEvent\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: CanExecuteEvent\n  nameWithType: CommandManager.CanExecuteEvent\n  fullName: System.Windows.Input.CommandManager.CanExecuteEvent\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Windows.Input.CommandManager.ExecutedEvent\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: ExecutedEvent\n  nameWithType: CommandManager.ExecutedEvent\n  fullName: System.Windows.Input.CommandManager.ExecutedEvent\n- uid: System.Windows.Input.CommandManager.InvalidateRequerySuggested\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: InvalidateRequerySuggested()\n  nameWithType: CommandManager.InvalidateRequerySuggested()\n  fullName: System.Windows.Input.CommandManager.InvalidateRequerySuggested()\n- uid: System.Windows.Input.CommandManager.PreviewCanExecuteEvent\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: PreviewCanExecuteEvent\n  nameWithType: CommandManager.PreviewCanExecuteEvent\n  fullName: System.Windows.Input.CommandManager.PreviewCanExecuteEvent\n- uid: System.Windows.Input.CommandManager.PreviewExecutedEvent\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: PreviewExecutedEvent\n  nameWithType: CommandManager.PreviewExecutedEvent\n  fullName: System.Windows.Input.CommandManager.PreviewExecutedEvent\n- uid: System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RegisterClassCommandBinding(Type,CommandBinding)\n  nameWithType: CommandManager.RegisterClassCommandBinding(Type,CommandBinding)\n  fullName: System.Windows.Input.CommandManager.RegisterClassCommandBinding(Type,CommandBinding)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Input.CommandBinding\n  parent: System.Windows.Input\n  isExternal: false\n  name: CommandBinding\n  nameWithType: CommandBinding\n  fullName: System.Windows.Input.CommandBinding\n- uid: System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RegisterClassInputBinding(Type,InputBinding)\n  nameWithType: CommandManager.RegisterClassInputBinding(Type,InputBinding)\n  fullName: System.Windows.Input.CommandManager.RegisterClassInputBinding(Type,InputBinding)\n- uid: System.Windows.Input.InputBinding\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputBinding\n  nameWithType: InputBinding\n  fullName: System.Windows.Input.InputBinding\n- uid: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n- uid: System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n- uid: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  nameWithType: CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)\n- uid: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  nameWithType: CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)\n- uid: System.Windows.Input.CommandManager.RequerySuggested\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RequerySuggested\n  nameWithType: CommandManager.RequerySuggested\n  fullName: System.Windows.Input.CommandManager.RequerySuggested\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Input.CommandManager.AddCanExecuteHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddCanExecuteHandler\n  nameWithType: CommandManager.AddCanExecuteHandler\n- uid: System.Windows.Input.CommandManager.AddExecutedHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddExecutedHandler\n  nameWithType: CommandManager.AddExecutedHandler\n- uid: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddPreviewCanExecuteHandler\n  nameWithType: CommandManager.AddPreviewCanExecuteHandler\n- uid: System.Windows.Input.CommandManager.AddPreviewExecutedHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: AddPreviewExecutedHandler\n  nameWithType: CommandManager.AddPreviewExecutedHandler\n- uid: System.Windows.Input.CommandManager.InvalidateRequerySuggested*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: InvalidateRequerySuggested\n  nameWithType: CommandManager.InvalidateRequerySuggested\n- uid: System.Windows.Input.CommandManager.RegisterClassCommandBinding*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RegisterClassCommandBinding\n  nameWithType: CommandManager.RegisterClassCommandBinding\n- uid: System.Windows.Input.CommandManager.RegisterClassInputBinding*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RegisterClassInputBinding\n  nameWithType: CommandManager.RegisterClassInputBinding\n- uid: System.Windows.Input.CommandManager.RemoveCanExecuteHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemoveCanExecuteHandler\n  nameWithType: CommandManager.RemoveCanExecuteHandler\n- uid: System.Windows.Input.CommandManager.RemoveExecutedHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemoveExecutedHandler\n  nameWithType: CommandManager.RemoveExecutedHandler\n- uid: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemovePreviewCanExecuteHandler\n  nameWithType: CommandManager.RemovePreviewCanExecuteHandler\n- uid: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler*\n  parent: System.Windows.Input.CommandManager\n  isExternal: false\n  name: RemovePreviewExecutedHandler\n  nameWithType: CommandManager.RemovePreviewExecutedHandler\n"}