{"nodes":[{"pos":[604,707],"content":"Defines additional management capabilities for the application and extraction of personalization state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines additional management capabilities for the application and extraction of personalization state.","pos":[0,103]}]},{"pos":[720,1551],"content":"In addition to using the `Personalizable` attribute on control properties, a control can also implement IPersonalizable for additional management capabilities for the application and extraction of personalization state. For example, controls that need to manage private state information should implement this interface. Controls that access personalized data through complex mechanisms, such as custom cache solutions, data persistence to mainframes, or XML Web services, should also implement this interface.      > [!IMPORTANT] >  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.","needQuote":false,"needEscape":true,"nodes":[{"content":"In addition to using the <ph id=\"ph1\">`Personalizable`</ph> attribute on control properties, a control can also implement IPersonalizable for additional management capabilities for the application and extraction of personalization state.","pos":[0,219],"source":"In addition to using the `Personalizable` attribute on control properties, a control can also implement IPersonalizable for additional management capabilities for the application and extraction of personalization state."},{"content":"For example, controls that need to manage private state information should implement this interface.","pos":[220,320]},{"content":"Controls that access personalized data through complex mechanisms, such as custom cache solutions, data persistence to mainframes, or XML Web services, should also implement this interface.","pos":[321,510]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism.","pos":[516,672],"source":"      > [!IMPORTANT] >  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism."},{"content":"App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.","pos":[673,828]}]},{"pos":[3092,3179],"content":"Gets a value that indicates whether the custom data that a control manages has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the custom data that a control manages has changed.","pos":[0,87]}]},{"pos":[3192,4700],"content":"When data managed by a control has changed, the control is considered \"dirty.\" A control should return `true` if the custom data that it manages through the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface has changed. If a control returns `true` from this property, the control's <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> interface method implementation is called during property value extraction.      > [!NOTE] >  This property is checked automatically by the personalization infrastructure during the latter phases of processing a POST request. However, for GET requests, the value returned from the IsDirty property is not checked. Some other event has to have caused the control to be considered \"dirty\" for any control state--not just data managed by <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>--to be saved. If a control can mark itself as \"dirty\" during a GET request, or if the personalization infrastructure under some very specific boundary conditions considers a control \"dirty\" during a GET request, then <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> will always be called.       A control can reference its associated <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control and check the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> property to determine the current scope. The \"dirty\" state of a control's custom data should be appropriate for the current scope.","needQuote":false,"needEscape":true,"nodes":[{"content":"When data managed by a control has changed, the control is considered \"dirty.\"","pos":[0,78]},{"content":"A control should return <ph id=\"ph1\">`true`</ph> if the custom data that it manages through the &lt;xref:System.Web.UI.WebControls.WebParts.IPersonalizable&gt; interface has changed.","pos":[79,237],"source":" A control should return `true` if the custom data that it manages through the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface has changed."},{"content":"If a control returns <ph id=\"ph1\">`true`</ph> from this property, the control's &lt;xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A&gt; interface method implementation is called during property value extraction.","pos":[238,441],"source":" If a control returns `true` from this property, the control's <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> interface method implementation is called during property value extraction."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property is checked automatically by the personalization infrastructure during the latter phases of processing a POST request.","pos":[447,591],"source":"      > [!NOTE] >  This property is checked automatically by the personalization infrastructure during the latter phases of processing a POST request."},{"content":"However, for GET requests, the value returned from the IsDirty property is not checked.","pos":[592,679]},{"content":"Some other event has to have caused the control to be considered \"dirty\" for any control state--not just data managed by &lt;xref:System.Web.UI.WebControls.WebParts.IPersonalizable&gt;--to be saved.","pos":[680,872],"source":" Some other event has to have caused the control to be considered \"dirty\" for any control state--not just data managed by <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>--to be saved."},{"content":"If a control can mark itself as \"dirty\" during a GET request, or if the personalization infrastructure under some very specific boundary conditions considers a control \"dirty\" during a GET request, then &lt;xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A&gt; will always be called.","pos":[873,1164],"source":" If a control can mark itself as \"dirty\" during a GET request, or if the personalization infrastructure under some very specific boundary conditions considers a control \"dirty\" during a GET request, then <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> will always be called."},{"content":"A control can reference its associated &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control and check the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A&gt; property to determine the current scope.","pos":[1171,1403],"source":"       A control can reference its associated <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control and check the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> property to determine the current scope."},{"content":"The \"dirty\" state of a control's custom data should be appropriate for the current scope.","pos":[1404,1493]}]},{"pos":[5928,6194],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the custom data managed with the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.IPersonalizable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> interface has changed; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the custom data managed with the <xref href=\"System.Web.UI.WebControls.WebParts.IPersonalizable\"></xref> interface has changed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6888,6921],"content":"Loads custom data into a control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Loads custom data into a control.","pos":[0,33]}]},{"pos":[6934,8799],"content":"This method is called on a control to allow it to load custom data into itself. It can also return a value that indicates whether a control's custom state must be written back to the underlying data store, regardless of whether any other personalization data on the page has changed. A control can set its own custom properties and carry out additional internal logic based on the values contained in the personalization dictionary. This method is called by the Web Parts control set while applying personalization data to a control.       You should also be aware of the merge behavior of <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped versus <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped properties contained in the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> object. The `state` parameter contains a merged representation of custom data that was loaded from the underlying data store. In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, all the values that were previously added when the page itself was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope would be available. In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, if a value associated with <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> personalization scope had one value added when the page was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, and a different value when the page was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, then the personalization infrastructure would only include the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped value (as opposed to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope value) within the `state` parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called on a control to allow it to load custom data into itself.","pos":[0,79]},{"content":"It can also return a value that indicates whether a control's custom state must be written back to the underlying data store, regardless of whether any other personalization data on the page has changed.","pos":[80,283]},{"content":"A control can set its own custom properties and carry out additional internal logic based on the values contained in the personalization dictionary.","pos":[284,432]},{"content":"This method is called by the Web Parts control set while applying personalization data to a control.","pos":[433,533]},{"content":"You should also be aware of the merge behavior of &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt;-scoped versus &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt;-scoped properties contained in the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary&gt; object.","pos":[540,840],"source":"       You should also be aware of the merge behavior of <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped versus <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped properties contained in the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> object."},{"content":"The <ph id=\"ph1\">`state`</ph> parameter contains a merged representation of custom data that was loaded from the underlying data store.","pos":[841,958],"source":" The `state` parameter contains a merged representation of custom data that was loaded from the underlying data store."},{"content":"In &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; scope, all the values that were previously added when the page itself was in &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; scope would be available.","pos":[959,1190],"source":" In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, all the values that were previously added when the page itself was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope would be available."},{"content":"In &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; scope, if a value associated with &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; personalization scope had one value added when the page was in &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; scope, and a different value when the page was in &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; scope, then the personalization infrastructure would only include the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt;-scoped value (as opposed to the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; scope value) within the <ph id=\"ph1\">`state`</ph> parameter.","pos":[1191,1863],"source":" In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, if a value associated with <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> personalization scope had one value added when the page was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, and a different value when the page was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, then the personalization infrastructure would only include the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped value (as opposed to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope value) within the `state` parameter."}]},{"pos":[9576,9740],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains custom scoped data that was loaded from the underlying data store.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"></xref> that contains custom scoped data that was loaded from the underlying data store."},{"pos":[10431,10592],"content":"Saves custom properties and internal state information in the control's <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Saves custom properties and internal state information in the control's <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"></xref> object."},{"pos":[10605,13040],"content":"A server control can store its own custom properties and internal state information the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> specified in the `state` parameter. The information is stored as a series of name/value pairs. It is the responsibility of the control to use name/value pairs that it can recognize during subsequent calls made to the control through the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> method.       A control can reference its associated <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control and check the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> object to determine the current scope. Custom state information should be appropriate for the current scope. Note that each <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> value that is added to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> object should be associated with the appropriate scope value, because the personalization infrastructure depends on this when merging <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> and <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped custom data prior to passing it to the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> method.       When using the standard ASP.NET implementation of Web Parts, controls must ensure that objects placed in the state dictionary can be serialized by the ASP.NET <xref:System.Web.UI.ObjectStateFormatter> class. In practice, this means the following:      -   Primitive .NET Framework types, strings, and collection-oriented .NET Framework types such as arrays, array lists, hash tables, and hybrid dictionaries, are automatically serializable.      -   Custom types that supply their own <xref:System.ComponentModel.TypeConverter> classes capable of serializing to and deserializing from strings are considered serializable.      -   Custom types that can be serialized by the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> class are considered serializable.      > [!IMPORTANT] >  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.","needQuote":false,"needEscape":true,"nodes":[{"content":"A server control can store its own custom properties and internal state information the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary&gt; specified in the <ph id=\"ph1\">`state`</ph> parameter.","pos":[0,191],"source":"A server control can store its own custom properties and internal state information the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> specified in the `state` parameter."},{"content":"The information is stored as a series of name/value pairs.","pos":[192,250]},{"content":"It is the responsibility of the control to use name/value pairs that it can recognize during subsequent calls made to the control through the &lt;xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A&gt; method.","pos":[251,466],"source":" It is the responsibility of the control to use name/value pairs that it can recognize during subsequent calls made to the control through the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> method."},{"content":"A control can reference its associated &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control and check the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; object to determine the current scope.","pos":[473,692],"source":"       A control can reference its associated <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control and check the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> object to determine the current scope."},{"content":"Custom state information should be appropriate for the current scope.","pos":[693,762]},{"content":"Note that each &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry&gt; value that is added to the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary&gt; object should be associated with the appropriate scope value, because the personalization infrastructure depends on this when merging &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt; and &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationScope&gt;-scoped custom data prior to passing it to the &lt;xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A&gt; method.","pos":[763,1319],"source":" Note that each <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> value that is added to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> object should be associated with the appropriate scope value, because the personalization infrastructure depends on this when merging <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> and <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped custom data prior to passing it to the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> method."},{"content":"When using the standard ASP.NET implementation of Web Parts, controls must ensure that objects placed in the state dictionary can be serialized by the ASP.NET &lt;xref:System.Web.UI.ObjectStateFormatter&gt; class.","pos":[1326,1533],"source":"       When using the standard ASP.NET implementation of Web Parts, controls must ensure that objects placed in the state dictionary can be serialized by the ASP.NET <xref:System.Web.UI.ObjectStateFormatter> class."},{"content":"In practice, this means the following:      -   Primitive .NET Framework types, strings, and collection-oriented .NET Framework types such as arrays, array lists, hash tables, and hybrid dictionaries, are automatically serializable.","pos":[1534,1766]},{"content":"-   Custom types that supply their own &lt;xref:System.ComponentModel.TypeConverter&gt; classes capable of serializing to and deserializing from strings are considered serializable.","pos":[1772,1947],"source":"      -   Custom types that supply their own <xref:System.ComponentModel.TypeConverter> classes capable of serializing to and deserializing from strings are considered serializable."},{"content":"-   Custom types that can be serialized by the &lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt; class are considered serializable.","pos":[1953,2104],"source":"      -   Custom types that can be serialized by the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> class are considered serializable."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism.","pos":[2110,2266],"source":"      > [!IMPORTANT] >  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism."},{"content":"App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.","pos":[2267,2422]}]},{"pos":[13809,13973],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains custom scoped data that was loaded from the underlying data store.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"></xref> that contains custom scoped data that was loaded from the underlying data store."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable\n  id: IPersonalizable\n  children:\n  - System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty\n  - System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  - System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  langs:\n  - csharp\n  name: IPersonalizable\n  nameWithType: IPersonalizable\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable\n  type: Interface\n  summary: Defines additional management capabilities for the application and extraction of personalization state.\n  remarks: \"In addition to using the `Personalizable` attribute on control properties, a control can also implement IPersonalizable for additional management capabilities for the application and extraction of personalization state. For example, controls that need to manage private state information should implement this interface. Controls that access personalized data through complex mechanisms, such as custom cache solutions, data persistence to mainframes, or XML Web services, should also implement this interface.  \\n  \\n> [!IMPORTANT]\\n>  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.\"\n  example:\n  - \"The following code example demonstrates how to use the IPersonalizable interface. The example consists of an .aspx page that references a Web Part control named `UrlListWebPart`. The following code is the .aspx file for the example.  \\n  \\n [!code-vb[WebParts_IPersonalizable_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_186_1.aspx)]\\n [!code-cs[WebParts_IPersonalizable_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_186_1.aspx)]  \\n  \\n The following code is the source for the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. This file should be placed in the App_Code directory.  \\n  \\n [!code-cs[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_186_2.cs)]\\n [!code-vb[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_186_2.vb)]  \\n  \\n Load the page in a browser. Type in a name to represent a URL, then add an actual URL beginning with `http://`, and click the **Add** button to add the URL.\"\n  syntax:\n    content: public interface IPersonalizable\n  implements: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty\n  id: IsDirty\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  langs:\n  - csharp\n  name: IsDirty\n  nameWithType: IPersonalizable.IsDirty\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a value that indicates whether the custom data that a control manages has changed.\n  remarks: \"When data managed by a control has changed, the control is considered \\\"dirty.\\\" A control should return `true` if the custom data that it manages through the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface has changed. If a control returns `true` from this property, the control's <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> interface method implementation is called during property value extraction.  \\n  \\n> [!NOTE]\\n>  This property is checked automatically by the personalization infrastructure during the latter phases of processing a POST request. However, for GET requests, the value returned from the IsDirty property is not checked. Some other event has to have caused the control to be considered \\\"dirty\\\" for any control state--not just data managed by <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>--to be saved. If a control can mark itself as \\\"dirty\\\" during a GET request, or if the personalization infrastructure under some very specific boundary conditions considers a control \\\"dirty\\\" during a GET request, then <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> will always be called.  \\n  \\n A control can reference its associated <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control and check the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> property to determine the current scope. The \\\"dirty\\\" state of a control's custom data should be appropriate for the current scope.\"\n  example:\n  - \"The following code example demonstrates use of the IsDirty property. The first part of the example is the Web page that hosts a <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \\n  \\n [!code-vb[WebParts_IPersonalizable_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_455_1.aspx)]\\n [!code-cs[WebParts_IPersonalizable_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_455_1.aspx)]  \\n  \\n The second part of the example is the code for the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control called `UrlListWebPart`. This file should be placed in the App_Code directory to run the example. Note that the source code implements the IsDirty property.  \\n  \\n [!code-cs[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_455_2.cs)]\\n [!code-vb[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_455_2.vb)]  \\n  \\n Load the page in a browser. Type in a name to represent a URL, then add an actual URL beginning with `http://`, and click the **Add** button to add the URL.\"\n  syntax:\n    content: public bool IsDirty { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the custom data managed with the <xref href=\"System.Web.UI.WebControls.WebParts.IPersonalizable\"></xref> interface has changed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  id: Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  langs:\n  - csharp\n  name: Load(PersonalizationDictionary)\n  nameWithType: IPersonalizable.Load(PersonalizationDictionary)\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Loads custom data into a control.\n  remarks: \"This method is called on a control to allow it to load custom data into itself. It can also return a value that indicates whether a control's custom state must be written back to the underlying data store, regardless of whether any other personalization data on the page has changed. A control can set its own custom properties and carry out additional internal logic based on the values contained in the personalization dictionary. This method is called by the Web Parts control set while applying personalization data to a control.  \\n  \\n You should also be aware of the merge behavior of <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped versus <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped properties contained in the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> object. The `state` parameter contains a merged representation of custom data that was loaded from the underlying data store. In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, all the values that were previously added when the page itself was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope would be available. In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, if a value associated with <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> personalization scope had one value added when the page was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, and a different value when the page was in <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope, then the personalization infrastructure would only include the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped value (as opposed to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> scope value) within the `state` parameter.\"\n  example:\n  - \"The following code example demonstrates an implementation of the Load method in a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. For the full code required to run this example, see the Example section in the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> class overview.  \\n  \\n [!code-cs[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/csharp/cca5cab3-402e-4f93-9a4b-_1.cs)]\\n [!code-vb[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/visualbasic/cca5cab3-402e-4f93-9a4b-_1.vb)]\"\n  syntax:\n    content: public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);\n    parameters:\n    - id: state\n      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"></xref> that contains custom scoped data that was loaded from the underlying data store.\n  overload: System.Web.UI.WebControls.WebParts.IPersonalizable.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  id: Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  langs:\n  - csharp\n  name: Save(PersonalizationDictionary)\n  nameWithType: IPersonalizable.Save(PersonalizationDictionary)\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Saves custom properties and internal state information in the control's <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"></xref> object.\n  remarks: \"A server control can store its own custom properties and internal state information the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> specified in the `state` parameter. The information is stored as a series of name/value pairs. It is the responsibility of the control to use name/value pairs that it can recognize during subsequent calls made to the control through the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> method.  \\n  \\n A control can reference its associated <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control and check the <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> object to determine the current scope. Custom state information should be appropriate for the current scope. Note that each <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> value that is added to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> object should be associated with the appropriate scope value, because the personalization infrastructure depends on this when merging <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> and <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>-scoped custom data prior to passing it to the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> method.  \\n  \\n When using the standard ASP.NET implementation of Web Parts, controls must ensure that objects placed in the state dictionary can be serialized by the ASP.NET <xref:System.Web.UI.ObjectStateFormatter> class. In practice, this means the following:  \\n  \\n-   Primitive .NET Framework types, strings, and collection-oriented .NET Framework types such as arrays, array lists, hash tables, and hybrid dictionaries, are automatically serializable.  \\n  \\n-   Custom types that supply their own <xref:System.ComponentModel.TypeConverter> classes capable of serializing to and deserializing from strings are considered serializable.  \\n  \\n-   Custom types that can be serialized by the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> class are considered serializable.  \\n  \\n> [!IMPORTANT]\\n>  You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.\"\n  example:\n  - \"The following code example demonstrates implementing the Save method in a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. For the full code required to run this example, see the Example section in the <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> class overview.  \\n  \\n [!code-cs[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/csharp/9094b1c1-dbad-4f97-8b12-_1.cs)]\\n [!code-vb[WebParts_IPersonalizable_Overview#2](~/add/codesnippet/visualbasic/9094b1c1-dbad-4f97-8b12-_1.vb)]\"\n  syntax:\n    content: public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);\n    parameters:\n    - id: state\n      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationDictionary\"></xref> that contains custom scoped data that was loaded from the underlying data store.\n  overload: System.Web.UI.WebControls.WebParts.IPersonalizable.Save*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  isExternal: false\n  name: IsDirty\n  nameWithType: IPersonalizable.IsDirty\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  isExternal: false\n  name: Load(PersonalizationDictionary)\n  nameWithType: IPersonalizable.Load(PersonalizationDictionary)\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationDictionary\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: PersonalizationDictionary\n  nameWithType: PersonalizationDictionary\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationDictionary\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  isExternal: false\n  name: Save(PersonalizationDictionary)\n  nameWithType: IPersonalizable.Save(PersonalizationDictionary)\n  fullName: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty*\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  isExternal: false\n  name: IsDirty\n  nameWithType: IPersonalizable.IsDirty\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.Load*\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  isExternal: false\n  name: Load\n  nameWithType: IPersonalizable.Load\n- uid: System.Web.UI.WebControls.WebParts.IPersonalizable.Save*\n  parent: System.Web.UI.WebControls.WebParts.IPersonalizable\n  isExternal: false\n  name: Save\n  nameWithType: IPersonalizable.Save\n"}