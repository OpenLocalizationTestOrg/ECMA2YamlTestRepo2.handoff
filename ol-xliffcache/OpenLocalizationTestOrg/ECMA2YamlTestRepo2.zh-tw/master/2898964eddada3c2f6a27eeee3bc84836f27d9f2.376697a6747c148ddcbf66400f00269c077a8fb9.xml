{"nodes":[{"pos":[1066,1146],"content":"Performs a cryptographic transformation of data. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a cryptographic transformation of data. This class cannot be inherited.","pos":[0,80],"nodes":[{"content":"Performs a cryptographic transformation of data.","pos":[0,48]},{"content":"This class cannot be inherited.","pos":[49,80]}]}]},{"pos":[2400,2468],"content":"Gets a value indicating whether the current transform can be reused.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]},{"pos":[3260,3328],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[3922,3989],"content":"Gets a value indicating whether multiple blocks can be transformed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether multiple blocks can be transformed.","pos":[0,67]}]},{"pos":[4798,4972],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if multiple blocks can be transformed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5474,5585],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CryptoAPITransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.CryptoAPITransform\"></xref> method."},{"pos":[5598,5960],"content":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoAPITransform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is a simple call to &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;.","pos":[0,94],"source":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt; to be reallocated for other purposes.","pos":[101,244],"source":"       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoAPITransform> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[245,360],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7162,7296],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CryptoAPITransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.CryptoAPITransform\"></xref> class."},{"pos":[7309,8270],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.CryptoAPITransform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.CryptoAPITransform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.CryptoAPITransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CryptoAPITransform> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.CryptoAPITransform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CryptoAPITransform> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt;.","pos":[0,102],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.CryptoAPITransform>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt; in an unusable state.","pos":[103,211],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.CryptoAPITransform> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt; was occupying.","pos":[212,457],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.CryptoAPITransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CryptoAPITransform> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[464,638],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt;.","pos":[644,780],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.CryptoAPITransform>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.CryptoAPITransform&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[781,956],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CryptoAPITransform> object's `Finalize` method."}]},{"pos":[8861,8887],"content":"Gets the input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the input block size.","pos":[0,26]}]},{"pos":[9651,9681],"content":"The input block size in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input block size in bytes.","pos":[0,30]}]},{"pos":[10187,10207],"content":"Gets the key handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key handle.","pos":[0,20]}]},{"pos":[10321,10336],"content":"The key handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key handle.","pos":[0,15]}]},{"pos":[10867,10894],"content":"Gets the output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the output block size.","pos":[0,27]}]},{"pos":[11661,11692],"content":"The output block size in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output block size in bytes.","pos":[0,31]}]},{"pos":[12183,12353],"content":"Resets the internal state of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CryptoAPITransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> so that it can be used again to do a different encryption or decryption.","needQuote":true,"needEscape":true,"source":"Resets the internal state of <xref href=\"System.Security.Cryptography.CryptoAPITransform\"></xref> so that it can be used again to do a different encryption or decryption."},{"pos":[12365,12682],"content":"The Reset method is called automatically when you call TransformFinalBlock. The `Reset` method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and `Reset` is not called. You can choose to manually call the `Reset` method in this case.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Reset method is called automatically when you call TransformFinalBlock.","pos":[0,75]},{"content":"The <ph id=\"ph1\">`Reset`</ph> method is not called when, for example, the encrypted input data is garbage and cannot be decrypted.","pos":[76,188],"source":" The `Reset` method is not called when, for example, the encrypted input data is garbage and cannot be decrypted."},{"content":"In this case, an exception is thrown and <ph id=\"ph1\">`Reset`</ph> is not called.","pos":[189,252],"source":" In this case, an exception is thrown and `Reset` is not called."},{"content":"You can choose to manually call the <ph id=\"ph1\">`Reset`</ph> method in this case.","pos":[253,317],"source":" You can choose to manually call the `Reset` method in this case."}]},{"pos":[13501,13667],"content":"Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.","pos":[0,166]}]},{"pos":[14618,14665],"content":"The input on which to perform the operation on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input on which to perform the operation on.","pos":[0,47]}]},{"pos":[14732,14805],"content":"The offset into the input byte array from which to begin using data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the input byte array from which to begin using data from.","pos":[0,73]}]},{"pos":[14871,14930],"content":"The number of bytes in the input byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]},{"pos":[14999,15040],"content":"The output to which to write the data to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output to which to write the data to.","pos":[0,41]}]},{"pos":[15108,15184],"content":"The offset into the output byte array from which to begin writing data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the output byte array from which to begin writing data from.","pos":[0,76]}]},{"pos":[15241,15269],"content":"The number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes written.","pos":[0,28]}]},{"pos":[15463,15704],"content":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,103],"source":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">outputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[110,225],"source":"       -or-       The <code>outputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[15800,15892],"content":"The length of the input buffer is less than the sum of the input offset and the input count.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the input buffer is less than the sum of the input offset and the input count.","pos":[0,92]}]},{"pos":[16007,16095],"content":"<code>inputOffset</code> is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputOffset&lt;/code&gt;</ph> is out of range.","pos":[0,41],"source":"<code>inputOffset</code> is out of range."},{"content":"This parameter requires a non-negative number.","pos":[42,88]}]},{"pos":[16698,16779],"content":"Computes the transformation for the specified region of the specified byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the transformation for the specified region of the specified byte array.","pos":[0,81]}]},{"pos":[17623,17670],"content":"The input on which to perform the operation on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input on which to perform the operation on.","pos":[0,47]}]},{"pos":[17737,17804],"content":"The offset into the byte array from which to begin using data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data from.","pos":[0,67]}]},{"pos":[17870,17923],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[17981,18009],"content":"The computed transformation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed transformation.","pos":[0,28]}]},{"pos":[18207,18310],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18406,18655],"content":"The <code>inputOffset</code> parameter is less than zero.       -or-       The <code>inputCount</code> parameter is less than zero.       -or-       The length of the input buffer is less than the sum of the input offset and the input count.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputOffset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","pos":[0,57],"source":"The <code>inputOffset</code> parameter is less than zero."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","pos":[64,131],"source":"       -or-       The <code>inputCount</code> parameter is less than zero."},{"content":"-or-       The length of the input buffer is less than the sum of the input offset and the input count.","pos":[138,241]}]},{"pos":[18805,18890],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.PaddingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> padding is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.PaddingMode\"></xref> padding is invalid."},{"pos":[19005,19107],"content":"The <code>inputOffset</code> parameter is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputOffset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is out of range.","pos":[0,55],"source":"The <code>inputOffset</code> parameter is out of range."},{"content":"This parameter requires a non-negative number.","pos":[56,102]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.CryptoAPITransform\n  id: CryptoAPITransform\n  children:\n  - System.Security.Cryptography.CryptoAPITransform.CanReuseTransform\n  - System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.CryptoAPITransform.Clear\n  - System.Security.Cryptography.CryptoAPITransform.Dispose\n  - System.Security.Cryptography.CryptoAPITransform.InputBlockSize\n  - System.Security.Cryptography.CryptoAPITransform.KeyHandle\n  - System.Security.Cryptography.CryptoAPITransform.OutputBlockSize\n  - System.Security.Cryptography.CryptoAPITransform.Reset\n  - System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: CryptoAPITransform\n  nameWithType: CryptoAPITransform\n  fullName: System.Security.Cryptography.CryptoAPITransform\n  type: Class\n  summary: Performs a cryptographic transformation of data. This class cannot be inherited.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use members of the CryptoAPITransform class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/csharp/t-system.security.crypto_128_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_128_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/cpp/t-system.security.crypto_128_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class CryptoAPITransform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: CryptoAPITransform.CanReuseTransform\n  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/csharp/p-system.security.crypto_33_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/visualbasic/p-system.security.crypto_33_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/cpp/p-system.security.crypto_33_1.cpp)]\"\n  syntax:\n    content: public bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether multiple blocks can be transformed.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the CanTransformMultipleBlocks property to determine if multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/csharp/p-system.security.crypto_68_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_68_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/cpp/p-system.security.crypto_68_1.cpp)]\"\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: CryptoAPITransform.Clear()\n  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.CryptoAPITransform\"></xref> method.\n  remarks: \"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoAPITransform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates how to call the Clear method to release the resources used by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/csharp/m-system.security.crypto_94_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_94_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/cpp/m-system.security.crypto_94_1.cpp)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.CryptoAPITransform.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CryptoAPITransform.Dispose()\n  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.CryptoAPITransform\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.CryptoAPITransform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.CryptoAPITransform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.CryptoAPITransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CryptoAPITransform> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.CryptoAPITransform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CryptoAPITransform> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.CryptoAPITransform.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: CryptoAPITransform.InputBlockSize\n  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/csharp/p-system.security.crypto_98_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_98_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/cpp/p-system.security.crypto_98_1.cpp)]\"\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The input block size in bytes.\n  overload: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle\n  id: KeyHandle\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: KeyHandle\n  nameWithType: CryptoAPITransform.KeyHandle\n  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the key handle.\n  syntax:\n    content: public IntPtr KeyHandle { get; }\n    return:\n      type: System.IntPtr\n      description: The key handle.\n  overload: System.Security.Cryptography.CryptoAPITransform.KeyHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: CryptoAPITransform.OutputBlockSize\n  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the OutputBlockSize property to retrieve the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/csharp/p-system.security.crypto_55_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_55_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/cpp/p-system.security.crypto_55_1.cpp)]\"\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The output block size in bytes.\n  overload: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.Reset\n  id: Reset\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: CryptoAPITransform.Reset()\n  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Resets the internal state of <xref href=\"System.Security.Cryptography.CryptoAPITransform\"></xref> so that it can be used again to do a different encryption or decryption.\n  remarks: The Reset method is called automatically when you call TransformFinalBlock. The `Reset` method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and `Reset` is not called. You can choose to manually call the `Reset` method in this case.\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Security.Cryptography.CryptoAPITransform.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the TransformBlock method to transform the bytes from `currentPosition` in the `sourceBytes` array, writing the bytes to the `targetBytes` array. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/csharp/cb78acec-9bf8-4488-8243-_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/visualbasic/cb78acec-9bf8-4488-8243-_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/cpp/cb78acec-9bf8-4488-8243-_1.cpp)]\"\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input on which to perform the operation on.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data from.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to which to write the data to.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data from.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.CryptoAPITransform.TransformBlock*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>inputBuffer</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>outputBuffer</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of the input buffer is less than the sum of the input offset and the input count.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.CryptoAPITransform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the transformation for the specified region of the specified byte array.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of bytes. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/csharp/58c95bd3-abbd-4afc-91d8-_1.cs)]\\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/visualbasic/58c95bd3-abbd-4afc-91d8-_1.vb)]\\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/cpp/58c95bd3-abbd-4afc-91d8-_1.cpp)]\"\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input on which to perform the operation on.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data from.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed transformation.\n  overload: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>inputOffset</code> parameter is less than zero.  \\n  \\n -or-  \\n  \\n The <code>inputCount</code> parameter is less than zero.  \\n  \\n -or-  \\n  \\n The length of the input buffer is less than the sum of the input offset and the input count.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The <xref href=\"System.Security.Cryptography.PaddingMode\"></xref> padding is invalid.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>inputOffset</code> parameter is out of range. This parameter requires a non-negative number.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: CryptoAPITransform.CanReuseTransform\n  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.CryptoAPITransform.Clear\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: Clear()\n  nameWithType: CryptoAPITransform.Clear()\n  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()\n- uid: System.Security.Cryptography.CryptoAPITransform.Dispose\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: Dispose()\n  nameWithType: CryptoAPITransform.Dispose()\n  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()\n- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: CryptoAPITransform.InputBlockSize\n  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: KeyHandle\n  nameWithType: CryptoAPITransform.KeyHandle\n  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: CryptoAPITransform.OutputBlockSize\n  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize\n- uid: System.Security.Cryptography.CryptoAPITransform.Reset\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: Reset()\n  nameWithType: CryptoAPITransform.Reset()\n  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()\n- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: CryptoAPITransform.CanReuseTransform\n- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.CryptoAPITransform.Clear*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: Clear\n  nameWithType: CryptoAPITransform.Clear\n- uid: System.Security.Cryptography.CryptoAPITransform.Dispose*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: Dispose\n  nameWithType: CryptoAPITransform.Dispose\n- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: CryptoAPITransform.InputBlockSize\n- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: KeyHandle\n  nameWithType: CryptoAPITransform.KeyHandle\n- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: CryptoAPITransform.OutputBlockSize\n- uid: System.Security.Cryptography.CryptoAPITransform.Reset*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: Reset\n  nameWithType: CryptoAPITransform.Reset\n- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: CryptoAPITransform.TransformBlock\n- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*\n  parent: System.Security.Cryptography.CryptoAPITransform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: CryptoAPITransform.TransformFinalBlock\n"}