{"nodes":[{"pos":[710,817],"content":"Provides event-related utility methods that register routed events for class owners and add class handlers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides event-related utility methods that register routed events for class owners and add class handlers.","pos":[0,107]}]},{"pos":[830,1333],"content":"This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.       The second most common [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>. You use this method to enable class handling of a routed event on the class, or an attached event. For details, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This class is most commonly used to register a new routed event, with &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[0,128],"source":"This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"The second most common <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> usage is &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[135,290],"source":"       The second most common [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>."},{"content":"You use this method to enable class handling of a routed event on the class, or an attached event.","pos":[291,389]},{"content":"For details, see <bpt id=\"p1\">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[390,501],"source":" For details, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[2361,2445],"content":"Returns identifiers for routed events that have been registered to the event system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns identifiers for routed events that have been registered to the event system.","pos":[0,84]}]},{"pos":[2457,2945],"content":"More <xref:System.Windows.RoutedEvent> objects can be registered later. This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime. The collection returned might be quite large. Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.","needQuote":true,"needEscape":true,"nodes":[{"content":"More &lt;xref:System.Windows.RoutedEvent&gt; objects can be registered later.","pos":[0,71],"source":"More <xref:System.Windows.RoutedEvent> objects can be registered later."},{"content":"This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.","pos":[72,186]},{"content":"The collection returned might be quite large.","pos":[187,232]},{"content":"Even just counting the events that are part of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> <ph id=\"ph2\">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, the collection count is in the high hundreds.","pos":[233,488],"source":" Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds."}]},{"pos":[3123,3225],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.Windows.RoutedEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the registered objects.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.Windows.RoutedEvent\"></xref> that contains the registered objects."},{"pos":[3752,3847],"content":"Finds all routed event identifiers for events that are registered with the provided owner type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds all routed event identifiers for events that are registered with the provided owner type.","pos":[0,95]}]},{"pos":[4035,4110],"content":"The type to start the search with. Base classes are included in the search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to start the search with. Base classes are included in the search.","pos":[0,75],"nodes":[{"content":"The type to start the search with.","pos":[0,34]},{"content":"Base classes are included in the search.","pos":[35,75]}]}]},{"pos":[4183,4324],"content":"An array of matching routed event identifiers if any match is found; otherwise, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of matching routed event identifiers if any match is found; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4993,5049],"content":"Registers a class handler for a particular routed event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a class handler for a particular routed event.","pos":[0,56]}]},{"pos":[5062,6793],"content":"Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing. A class handler is like a static handler that exists for all instances of the class. Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.       Class handlers are invoked before instance handlers. You can implement a class handler that has the behavior of marking the event as handled. Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.       Many of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods. By overriding these methods in classes that inherit the base classes, you can implement class handling without calling RegisterClassHandler in static constructors. These class handling methods typically exist for input events and have names that start with \"On\" and end with the name of the event being class handled.       For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).       Using this signature, class handlers will be registered to invoke only in response to unhandled events. You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.","pos":[0,138]},{"content":"A class handler is like a static handler that exists for all instances of the class.","pos":[139,223]},{"content":"Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id=\"ph1\">`sender`</ph> parameter and/or the event data.","pos":[224,406],"source":" Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data."},{"content":"Class handlers are invoked before instance handlers.","pos":[413,465]},{"content":"You can implement a class handler that has the behavior of marking the event as handled.","pos":[466,554]},{"content":"Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.","pos":[555,696]},{"content":"Many of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.","pos":[703,850],"source":"       Many of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods."},{"content":"By overriding these methods in classes that inherit the base classes, you can implement class handling without calling RegisterClassHandler in static constructors.","pos":[851,1014]},{"content":"These class handling methods typically exist for input events and have names that start with \"On\" and end with the name of the event being class handled.","pos":[1015,1168]},{"content":"For more information about class handling, see <bpt id=\"p1\">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1175,1316],"source":"       For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md)."},{"content":"Using this signature, class handlers will be registered to invoke only in response to unhandled events.","pos":[1323,1426]},{"content":"You can also register class handlers to invoke even if the event arguments are marked handled, by using the &lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt; signature, with <ph id=\"ph1\">`handledEventsToo`</ph> set to <ph id=\"ph2\">`true`</ph>.","pos":[1427,1721],"source":" You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`."}]},{"pos":[7482,7537],"content":"The type of the class that is declaring class handling.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the class that is declaring class handling.","pos":[0,55]}]},{"pos":[7618,7669],"content":"The routed event identifier of the event to handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The routed event identifier of the event to handle.","pos":[0,51]}]},{"pos":[7735,7783],"content":"A reference to the class handler implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the class handler implementation.","pos":[0,48]}]},{"pos":[8503,8636],"content":"Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.","pos":[0,133]}]},{"pos":[8649,10312],"content":"Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing. A class handler is like a static handler that exists for all instances of the class. Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.       Class handlers are invoked before instance handlers. You can implement a class handler that has the behavior of marking the event as handled. Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.       Many of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods. By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors. These class handling methods typically exist for input events and have names that start with \"On\" and end with the name of the event being class handled.       For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).       Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`. Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.","needQuote":false,"needEscape":true,"nodes":[{"content":"Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.","pos":[0,138]},{"content":"A class handler is like a static handler that exists for all instances of the class.","pos":[139,223]},{"content":"Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id=\"ph1\">`sender`</ph> parameter and/or the event data.","pos":[224,406],"source":" Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data."},{"content":"Class handlers are invoked before instance handlers.","pos":[413,465]},{"content":"You can implement a class handler that has the behavior of marking the event as handled.","pos":[466,554]},{"content":"Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.","pos":[555,696]},{"content":"Many of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.","pos":[703,850],"source":"       Many of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods."},{"content":"By overriding these methods in classes that inherit the base classes, you can implement class handling without calling &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; in static constructors.","pos":[851,1052],"source":" By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors."},{"content":"These class handling methods typically exist for input events and have names that start with \"On\" and end with the name of the event being class handled.","pos":[1053,1206]},{"content":"For more information about class handling, see <bpt id=\"p1\">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1213,1354],"source":"       For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md)."},{"content":"Using this signature, class handlers can be registered to invoke upon handled events, by setting <ph id=\"ph1\">`handledEventsToo`</ph> set to <ph id=\"ph2\">`true`</ph>.","pos":[1361,1491],"source":"       Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`."},{"content":"Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.","pos":[1492,1653]}]},{"pos":[10555,10610],"content":"The type of the class that is declaring class handling.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the class that is declaring class handling.","pos":[0,55]}]},{"pos":[10691,10742],"content":"The routed event identifier of the event to handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The routed event identifier of the event to handle.","pos":[0,51]}]},{"pos":[10808,10856],"content":"A reference to the class handler implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the class handler implementation.","pos":[0,48]}]},{"pos":[10930,11237],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to invoke this class handler even if arguments of the routed event have been marked as handled; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to retain the default behavior of not invoking the handler on any marked-handled event.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to invoke this class handler even if arguments of the routed event have been marked as handled; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to retain the default behavior of not invoking the handler on any marked-handled event."},{"pos":[11947,12067],"content":"Registers a new routed event with the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> event system.","needQuote":true,"needEscape":true,"source":"Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] event system."},{"pos":[12080,12516],"content":"Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field. This field should be stored within the owner type.       There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class. For more information, see [Routed Events Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the return value of this method to create the static declaration for a unique &lt;xref:System.Windows.RoutedEvent&gt; identifier field.","pos":[0,133],"source":"Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field."},{"content":"This field should be stored within the owner type.","pos":[134,184]},{"content":"There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.","pos":[191,343]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[344,434],"source":" For more information, see [Routed Events Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[12775,12945],"content":"The name of the routed event. The name must be unique within the owner type and cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the routed event.","pos":[0,29]},{"content":"The name must be unique within the owner type and cannot be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty string.","pos":[30,170],"source":" The name must be unique within the owner type and cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string."}]},{"pos":[13034,13098],"content":"The routing strategy of the event as a value of the enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The routing strategy of the event as a value of the enumeration.","pos":[0,64]}]},{"pos":[13164,13299],"content":"The type of the event handler. This must be a delegate type and cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the event handler.","pos":[0,30]},{"content":"This must be a delegate type and cannot be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[31,135],"source":" This must be a delegate type and cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[13363,13481],"content":"The owner class type of the routed event. This cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The owner class type of the routed event.","pos":[0,41]},{"content":"This cannot be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[42,118],"source":" This cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[13552,13898],"content":"The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)].","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier for the newly registered routed event.","pos":[0,53]},{"content":"This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.","pos":[54,199]},{"content":"The routed event identifier is also used for other event system <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>.","pos":[200,346],"source":" The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.EventManager\n  id: EventManager\n  children:\n  - System.Windows.EventManager.GetRoutedEvents\n  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)\n  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)\n  langs:\n  - csharp\n  name: EventManager\n  nameWithType: EventManager\n  fullName: System.Windows.EventManager\n  type: Class\n  summary: Provides event-related utility methods that register routed events for class owners and add class handlers.\n  remarks: \"This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  \\n  \\n The second most common [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>. You use this method to enable class handling of a routed event on the class, or an attached event. For details, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example show how to use this class to register a new routed event as a class member, along with the routed event \\\"wrapper\\\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event.  \\n  \\n [!code-cs[DPCustom#EventManagerClass](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#eventmanagerclass)]\\n [!code-vb[DPCustom#EventManagerClass](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#eventmanagerclass)]\"\n  syntax:\n    content: public static class EventManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.EventManager.GetRoutedEvents\n  id: GetRoutedEvents\n  parent: System.Windows.EventManager\n  langs:\n  - csharp\n  name: GetRoutedEvents()\n  nameWithType: EventManager.GetRoutedEvents()\n  fullName: System.Windows.EventManager.GetRoutedEvents()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns identifiers for routed events that have been registered to the event system.\n  remarks: More <xref:System.Windows.RoutedEvent> objects can be registered later. This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime. The collection returned might be quite large. Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.\n  syntax:\n    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();\n    parameters: []\n    return:\n      type: System.Windows.RoutedEvent[]\n      description: An array of type <xref href=\"System.Windows.RoutedEvent\"></xref> that contains the registered objects.\n  overload: System.Windows.EventManager.GetRoutedEvents*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)\n  id: GetRoutedEventsForOwner(System.Type)\n  parent: System.Windows.EventManager\n  langs:\n  - csharp\n  name: GetRoutedEventsForOwner(Type)\n  nameWithType: EventManager.GetRoutedEventsForOwner(Type)\n  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Finds all routed event identifiers for events that are registered with the provided owner type.\n  syntax:\n    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);\n    parameters:\n    - id: ownerType\n      type: System.Type\n      description: The type to start the search with. Base classes are included in the search.\n    return:\n      type: System.Windows.RoutedEvent[]\n      description: An array of matching routed event identifiers if any match is found; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.EventManager.GetRoutedEventsForOwner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)\n  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.EventManager\n  langs:\n  - csharp\n  name: RegisterClassHandler(Type,RoutedEvent,Delegate)\n  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)\n  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Registers a class handler for a particular routed event.\n  remarks: \"Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing. A class handler is like a static handler that exists for all instances of the class. Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.  \\n  \\n Class handlers are invoked before instance handlers. You can implement a class handler that has the behavior of marking the event as handled. Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.  \\n  \\n Many of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods. By overriding these methods in classes that inherit the base classes, you can implement class handling without calling RegisterClassHandler in static constructors. These class handling methods typically exist for input events and have names that start with \\\"On\\\" and end with the name of the event being class handled.  \\n  \\n For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Using this signature, class handlers will be registered to invoke only in response to unhandled events. You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.\"\n  example:\n  - \"The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling RegisterClassHandler.  \\n  \\n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#staticandregisterclasshandler)]\\n [!code-cs[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]\"\n  syntax:\n    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);\n    parameters:\n    - id: classType\n      type: System.Type\n      description: The type of the class that is declaring class handling.\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: The routed event identifier of the event to handle.\n    - id: handler\n      type: System.Delegate\n      description: A reference to the class handler implementation.\n  overload: System.Windows.EventManager.RegisterClassHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.EventManager\n  langs:\n  - csharp\n  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)\n  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)\n  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.\n  remarks: \"Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing. A class handler is like a static handler that exists for all instances of the class. Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.  \\n  \\n Class handlers are invoked before instance handlers. You can implement a class handler that has the behavior of marking the event as handled. Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.  \\n  \\n Many of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods. By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors. These class handling methods typically exist for input events and have names that start with \\\"On\\\" and end with the name of the event being class handled.  \\n  \\n For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`. Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.\"\n  syntax:\n    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);\n    parameters:\n    - id: classType\n      type: System.Type\n      description: The type of the class that is declaring class handling.\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: The routed event identifier of the event to handle.\n    - id: handler\n      type: System.Delegate\n      description: A reference to the class handler implementation.\n    - id: handledEventsToo\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to invoke this class handler even if arguments of the routed event have been marked as handled; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to retain the default behavior of not invoking the handler on any marked-handled event.\n  overload: System.Windows.EventManager.RegisterClassHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)\n  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)\n  parent: System.Windows.EventManager\n  langs:\n  - csharp\n  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)\n  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)\n  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] event system.\n  remarks: \"Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field. This field should be stored within the owner type.  \\n  \\n There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class. For more information, see [Routed Events Overview](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the routed event. The name must be unique within the owner type and cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string.\n    - id: routingStrategy\n      type: System.Windows.RoutingStrategy\n      description: The routing strategy of the event as a value of the enumeration.\n    - id: handlerType\n      type: System.Type\n      description: The type of the event handler. This must be a delegate type and cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    - id: ownerType\n      type: System.Type\n      description: The owner class type of the routed event. This cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Windows.RoutedEvent\n      description: The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)].\n  overload: System.Windows.EventManager.RegisterRoutedEvent*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.EventManager.GetRoutedEvents\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: GetRoutedEvents()\n  nameWithType: EventManager.GetRoutedEvents()\n  fullName: System.Windows.EventManager.GetRoutedEvents()\n- uid: System.Windows.RoutedEvent[]\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent[]\n  spec.csharp:\n  - uid: System.Windows.RoutedEvent\n    name: RoutedEvent\n    nameWithType: RoutedEvent\n    fullName: RoutedEvent[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: GetRoutedEventsForOwner(Type)\n  nameWithType: EventManager.GetRoutedEventsForOwner(Type)\n  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: RegisterClassHandler(Type,RoutedEvent,Delegate)\n  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)\n  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)\n  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)\n  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)\n  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)\n  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.RoutingStrategy\n  parent: System.Windows\n  isExternal: false\n  name: RoutingStrategy\n  nameWithType: RoutingStrategy\n  fullName: System.Windows.RoutingStrategy\n- uid: System.Windows.EventManager.GetRoutedEvents*\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: GetRoutedEvents\n  nameWithType: EventManager.GetRoutedEvents\n- uid: System.Windows.EventManager.GetRoutedEventsForOwner*\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: GetRoutedEventsForOwner\n  nameWithType: EventManager.GetRoutedEventsForOwner\n- uid: System.Windows.EventManager.RegisterClassHandler*\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: RegisterClassHandler\n  nameWithType: EventManager.RegisterClassHandler\n- uid: System.Windows.EventManager.RegisterRoutedEvent*\n  parent: System.Windows.EventManager\n  isExternal: false\n  name: RegisterRoutedEvent\n  nameWithType: EventManager.RegisterRoutedEvent\n"}