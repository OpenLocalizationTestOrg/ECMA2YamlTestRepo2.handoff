{"nodes":[{"pos":[923,1001],"content":"Defines a lifetime lease object that is used by the remoting lifetime service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a lifetime lease object that is used by the remoting lifetime service.","pos":[0,78]}]},{"pos":[1014,2281],"content":"Distributed garbage collection controls when server applications can be deleted. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.       The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed. A lease can specify that an object has an infinite lifetime.       Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain. The lease manager periodically examines the leases for time expiration. If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.       A lease contains properties that determine its policies, and methods that renew the lease time. The lease exposes the ILease interface.       For an example showing how to use the ILease interface see [Lifetimes](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa).","needQuote":false,"needEscape":true,"nodes":[{"content":"Distributed garbage collection controls when server applications can be deleted.","pos":[0,80]},{"content":"Traditionally, distributed garbage collection uses reference counts and pinging for control.","pos":[81,173]},{"content":"This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object.","pos":[174,306]},{"content":"The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","pos":[307,453]},{"content":"The lifetime service associates a lease with each remotely activated object.","pos":[460,536]},{"content":"When the lease expires, the object is removed.","pos":[537,583]},{"content":"A lease can specify that an object has an infinite lifetime.","pos":[584,644]},{"content":"Each &lt;xref:System.AppDomain&gt; contains a lease manager that administers the leases in the domain.","pos":[651,747],"source":"       Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain."},{"content":"The lease manager periodically examines the leases for time expiration.","pos":[748,819]},{"content":"If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.","pos":[820,969]},{"content":"A lease contains properties that determine its policies, and methods that renew the lease time.","pos":[976,1071]},{"content":"The lease exposes the ILease interface.","pos":[1072,1111]},{"content":"For an example showing how to use the ILease interface see <bpt id=\"p1\">[</bpt>Lifetimes<ept id=\"p1\">](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)</ept>.","pos":[1118,1259],"source":"       For an example showing how to use the ILease interface see [Lifetimes](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)."}]},{"pos":[2828,2875],"content":"Gets the amount of time remaining on the lease.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the amount of time remaining on the lease.","pos":[0,47]}]},{"pos":[3000,3042],"content":"The amount of time remaining on the lease.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount of time remaining on the lease.","pos":[0,42]}]},{"pos":[3239,3356],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[3752,3847],"content":"Gets the current <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the lease.","needQuote":true,"needEscape":true,"source":"Gets the current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease."},{"pos":[4031,4121],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the lease.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease."},{"pos":[4314,4431],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[4847,4891],"content":"Gets or sets the initial time for the lease.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the initial time for the lease.","pos":[0,44]}]},{"pos":[4903,5095],"content":"If the InitialLeaseTime property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the InitialLeaseTime property is set to &lt;xref:System.TimeSpan?displayProperty=fullName&gt;, then the lease will never time out and the object associated with it will have an infinite lifetime.","pos":[0,192],"source":"If the InitialLeaseTime property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime."}]},{"pos":[5225,5256],"content":"The initial time for the lease.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial time for the lease.","pos":[0,31]}]},{"pos":[5453,5570],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[6060,6121],"content":"Registers a sponsor for the lease without renewing the lease.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a sponsor for the lease without renewing the lease.","pos":[0,61]}]},{"pos":[6133,6210],"content":"If a sponsor is registered with the current method, the lease is not renewed.","needQuote":true,"needEscape":true,"nodes":[{"content":"If a sponsor is registered with the current method, the lease is not renewed.","pos":[0,77]}]},{"pos":[6407,6442],"content":"The callback object of the sponsor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The callback object of the sponsor.","pos":[0,35]}]},{"pos":[6631,6748],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[7297,7386],"content":"Registers a sponsor for the lease, and renews it by the specified <xref:System.TimeSpan>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a sponsor for the lease, and renews it by the specified &lt;xref:System.TimeSpan&gt;.","pos":[0,89],"source":"Registers a sponsor for the lease, and renews it by the specified <xref:System.TimeSpan>."}]},{"pos":[7605,7640],"content":"The callback object of the sponsor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The callback object of the sponsor.","pos":[0,35]}]},{"pos":[7710,7751],"content":"The length of time to renew the lease by.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of time to renew the lease by.","pos":[0,41]}]},{"pos":[7940,8057],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[8480,8518],"content":"Renews a lease for the specified time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Renews a lease for the specified time.","pos":[0,38]}]},{"pos":[8530,8683],"content":"The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The lease time is set to the maximum of the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt; or the current time plus the renewal time.","pos":[0,153],"source":"The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time."}]},{"pos":[8838,8879],"content":"The length of time to renew the lease by.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of time to renew the lease by.","pos":[0,41]}]},{"pos":[8939,8976],"content":"The new expiration time of the lease.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new expiration time of the lease.","pos":[0,37]}]},{"pos":[9162,9279],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[9690,9835],"content":"Gets or sets the amount of time by which a call to the remote object renews the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time by which a call to the remote object renews the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*&gt;.","pos":[0,145],"source":"Gets or sets the amount of time by which a call to the remote object renews the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>."}]},{"pos":[9847,10413],"content":"When you make a call to a remote object, the lifetime service adds the RenewOnCallTime to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the RenewOnCallTime. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the RenewOnCallTime or longer.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you make a call to a remote object, the lifetime service adds the RenewOnCallTime to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the RenewOnCallTime. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the RenewOnCallTime or longer.","pos":[0,566],"nodes":[{"content":"When you make a call to a remote object, the lifetime service adds the RenewOnCallTime to the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt; only if the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt; has dropped below the RenewOnCallTime.","pos":[0,278],"source":"When you make a call to a remote object, the lifetime service adds the RenewOnCallTime to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the RenewOnCallTime."},{"content":"Sequential calls therefore do not increase the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt; without bound.","pos":[279,407],"source":" Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound."},{"content":"Instead, immediately after any call, the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt; is guaranteed to be the RenewOnCallTime or longer.","pos":[408,566],"source":" Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the RenewOnCallTime or longer."}]}]},{"pos":[10542,10674],"content":"The amount of time by which a call to the remote object renews the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount of time by which a call to the remote object renews the &lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*&gt;.","pos":[0,132],"source":"The amount of time by which a call to the remote object renews the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>."}]},{"pos":[10870,10987],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[11413,11503],"content":"Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.","pos":[0,90]}]},{"pos":[11516,11815],"content":"If the SponsorshipTimeout is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors.       If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the SponsorshipTimeout is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors.       If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.","pos":[0,297],"nodes":[{"content":"If the SponsorshipTimeout is &lt;xref:System.TimeSpan?displayProperty=fullName&gt;, then this lease will not take sponsors.","pos":[0,117],"source":"If the SponsorshipTimeout is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors."},{"content":"If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.","pos":[124,297]}]}]},{"pos":[11948,12025],"content":"The amount of time to wait for a sponsor to return with a lease renewal time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount of time to wait for a sponsor to return with a lease renewal time.","pos":[0,77]}]},{"pos":[12224,12341],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[12841,12881],"content":"Removes a sponsor from the sponsor list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes a sponsor from the sponsor list.","pos":[0,40]}]},{"pos":[13080,13112],"content":"The lease sponsor to unregister.","needQuote":true,"needEscape":true,"nodes":[{"content":"The lease sponsor to unregister.","pos":[0,32]}]},{"pos":[13303,13420],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Lifetime.ILease\n  id: ILease\n  children:\n  - System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  - System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  - System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  - System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  - System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  - System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  - System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  langs:\n  - csharp\n  name: ILease\n  nameWithType: ILease\n  fullName: System.Runtime.Remoting.Lifetime.ILease\n  type: Interface\n  summary: Defines a lifetime lease object that is used by the remoting lifetime service.\n  remarks: \"Distributed garbage collection controls when server applications can be deleted. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.  \\n  \\n The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed. A lease can specify that an object has an infinite lifetime.  \\n  \\n Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain. The lease manager periodically examines the leases for time expiration. If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.  \\n  \\n A lease contains properties that determine its policies, and methods that renew the lease time. The lease exposes the ILease interface.  \\n  \\n For an example showing how to use the ILease interface see [Lifetimes](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ILease\n  implements: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  id: CurrentLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: CurrentLeaseTime\n  nameWithType: ILease.CurrentLeaseTime\n  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets the amount of time remaining on the lease.\n  syntax:\n    content: public TimeSpan CurrentLeaseTime { get; }\n    return:\n      type: System.TimeSpan\n      description: The amount of time remaining on the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  id: CurrentState\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: CurrentState\n  nameWithType: ILease.CurrentState\n  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets the current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease.\n  syntax:\n    content: public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }\n    return:\n      type: System.Runtime.Remoting.Lifetime.LeaseState\n      description: The current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentState*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  id: InitialLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: InitialLeaseTime\n  nameWithType: ILease.InitialLeaseTime\n  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the initial time for the lease.\n  remarks: If the InitialLeaseTime property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime.\n  syntax:\n    content: public TimeSpan InitialLeaseTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The initial time for the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  id: Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Register(ISponsor)\n  nameWithType: ILease.Register(ISponsor)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Registers a sponsor for the lease without renewing the lease.\n  remarks: If a sponsor is registered with the current method, the lease is not renewed.\n  syntax:\n    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);\n    parameters:\n    - id: obj\n      type: System.Runtime.Remoting.Lifetime.ISponsor\n      description: The callback object of the sponsor.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Register*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  id: Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Register(ISponsor,TimeSpan)\n  nameWithType: ILease.Register(ISponsor,TimeSpan)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Registers a sponsor for the lease, and renews it by the specified <xref:System.TimeSpan>.\n  syntax:\n    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);\n    parameters:\n    - id: obj\n      type: System.Runtime.Remoting.Lifetime.ISponsor\n      description: The callback object of the sponsor.\n    - id: renewalTime\n      type: System.TimeSpan\n      description: The length of time to renew the lease by.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Register*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  id: Renew(System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Renew(TimeSpan)\n  nameWithType: ILease.Renew(TimeSpan)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Renews a lease for the specified time.\n  remarks: The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time.\n  syntax:\n    content: public TimeSpan Renew (TimeSpan renewalTime);\n    parameters:\n    - id: renewalTime\n      type: System.TimeSpan\n      description: The length of time to renew the lease by.\n    return:\n      type: System.TimeSpan\n      description: The new expiration time of the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Renew*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  id: RenewOnCallTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: RenewOnCallTime\n  nameWithType: ILease.RenewOnCallTime\n  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the amount of time by which a call to the remote object renews the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.\n  remarks: When you make a call to a remote object, the lifetime service adds the RenewOnCallTime to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the RenewOnCallTime. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the RenewOnCallTime or longer.\n  syntax:\n    content: public TimeSpan RenewOnCallTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The amount of time by which a call to the remote object renews the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.\n  overload: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  id: SponsorshipTimeout\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: SponsorshipTimeout\n  nameWithType: ILease.SponsorshipTimeout\n  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.\n  remarks: \"If the SponsorshipTimeout is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors.  \\n  \\n If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.\"\n  syntax:\n    content: public TimeSpan SponsorshipTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The amount of time to wait for a sponsor to return with a lease renewal time.\n  overload: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  id: Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Unregister(ISponsor)\n  nameWithType: ILease.Unregister(ISponsor)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Removes a sponsor from the sponsor list.\n  syntax:\n    content: public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);\n    parameters:\n    - id: obj\n      type: System.Runtime.Remoting.Lifetime.ISponsor\n      description: The lease sponsor to unregister.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Unregister*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentLeaseTime\n  nameWithType: ILease.CurrentLeaseTime\n  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentState\n  nameWithType: ILease.CurrentState\n  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState\n- uid: System.Runtime.Remoting.Lifetime.LeaseState\n  parent: System.Runtime.Remoting.Lifetime\n  isExternal: false\n  name: LeaseState\n  nameWithType: LeaseState\n  fullName: System.Runtime.Remoting.Lifetime.LeaseState\n- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: InitialLeaseTime\n  nameWithType: ILease.InitialLeaseTime\n  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Register(ISponsor)\n  nameWithType: ILease.Register(ISponsor)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)\n- uid: System.Runtime.Remoting.Lifetime.ISponsor\n  parent: System.Runtime.Remoting.Lifetime\n  isExternal: false\n  name: ISponsor\n  nameWithType: ISponsor\n  fullName: System.Runtime.Remoting.Lifetime.ISponsor\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Register(ISponsor,TimeSpan)\n  nameWithType: ILease.Register(ISponsor,TimeSpan)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)\n- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Renew(TimeSpan)\n  nameWithType: ILease.Renew(TimeSpan)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)\n- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: RenewOnCallTime\n  nameWithType: ILease.RenewOnCallTime\n  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: SponsorshipTimeout\n  nameWithType: ILease.SponsorshipTimeout\n  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Unregister(ISponsor)\n  nameWithType: ILease.Unregister(ISponsor)\n  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentLeaseTime\n  nameWithType: ILease.CurrentLeaseTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentState\n  nameWithType: ILease.CurrentState\n- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: InitialLeaseTime\n  nameWithType: ILease.InitialLeaseTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Register\n  nameWithType: ILease.Register\n- uid: System.Runtime.Remoting.Lifetime.ILease.Renew*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Renew\n  nameWithType: ILease.Renew\n- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: RenewOnCallTime\n  nameWithType: ILease.RenewOnCallTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: SponsorshipTimeout\n  nameWithType: ILease.SponsorshipTimeout\n- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Unregister\n  nameWithType: ILease.Unregister\n"}