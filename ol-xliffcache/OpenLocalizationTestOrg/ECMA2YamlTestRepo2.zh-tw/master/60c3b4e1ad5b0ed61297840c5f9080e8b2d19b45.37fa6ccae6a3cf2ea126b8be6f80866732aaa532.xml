{"nodes":[{"pos":[1203,1295],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event."},{"pos":[1308,2103],"content":"The ManipulationDeltaEventArgs class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.       You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ManipulationDeltaEventArgs class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.       You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.","pos":[0,793],"nodes":[{"content":"The ManipulationDeltaEventArgs class contains data about changes in the position of a manipulation.","pos":[0,99]},{"content":"The &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt; property contains the changes that occurred since the last &lt;xref:System.Windows.UIElement.ManipulationDelta&gt; event occurred.","pos":[100,304],"source":" The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred."},{"content":"The &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt; property contains the total changes that occurred for the current manipulation.","pos":[305,469],"source":" The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation."},{"content":"You use one of those properties to transform the manipulated object.","pos":[470,538]},{"content":"You can end a manipulation by calling the &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt; method or force the manipulation into inertia by calling the &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A&gt; method.","pos":[545,793],"source":"       You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method."}]}]},{"pos":[4141,4166],"content":"Cancels the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the manipulation.","pos":[0,25]}]},{"pos":[4178,4507],"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","pos":[0,329],"nodes":[{"content":"If the method succeeds, the default &lt;xref:System.Windows.Input.TouchDevice&gt; sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur.","pos":[0,198],"source":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur."},{"content":"Touch cannot be promoted to mouse events if the &lt;xref:System.Windows.UIElement.ManipulationCompleted&gt; event occurs during inertia.","pos":[199,329],"source":" Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia."}]}]},{"pos":[4631,4813],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the manipulation was successfully canceled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the manipulation was successfully canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5318,5361],"content":"Completes the manipulation without inertia.","needQuote":true,"needEscape":true,"nodes":[{"content":"Completes the manipulation without inertia.","pos":[0,43]}]},{"pos":[5373,5559],"content":"You can call the Complete method to end the manipulation. For example, when an object reaches the edge of a window, you can call Complete to prevent the object from going off the screen.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can call the Complete method to end the manipulation. For example, when an object reaches the edge of a window, you can call Complete to prevent the object from going off the screen.","pos":[0,186],"nodes":[{"content":"You can call the Complete method to end the manipulation.","pos":[0,57]},{"content":"For example, when an object reaches the edge of a window, you can call Complete to prevent the object from going off the screen.","pos":[58,186]}]}]},{"pos":[7046,7101],"content":"Gets the cumulated changes of the current manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the cumulated changes of the current manipulation.","pos":[0,55]}]},{"pos":[7113,7291],"content":"The CumulativeManipulation property contains the total changes that occurred for the current manipulation. You can use CumulativeManipulation to transform the manipulated object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CumulativeManipulation property contains the total changes that occurred for the current manipulation. You can use CumulativeManipulation to transform the manipulated object.","pos":[0,178],"nodes":[{"content":"The CumulativeManipulation property contains the total changes that occurred for the current manipulation.","pos":[0,106]},{"content":"You can use CumulativeManipulation to transform the manipulated object.","pos":[107,178]}]}]},{"pos":[7475,7525],"content":"The cumulated changes of the current manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cumulated changes of the current manipulation.","pos":[0,50]}]},{"pos":[8087,8144],"content":"Gets the most recent changes of the current manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the most recent changes of the current manipulation.","pos":[0,57]}]},{"pos":[8156,8365],"content":"The DeltaManipulation property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DeltaManipulation property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.","pos":[0,209],"nodes":[{"content":"The DeltaManipulation property contains the changes that occurred since the last &lt;xref:System.Windows.UIElement.ManipulationDelta&gt; event occurred.","pos":[0,146],"source":"The DeltaManipulation property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred."},{"content":"You can use this property to transform the manipulated object.","pos":[147,209]}]}]},{"pos":[9199,9251],"content":"The most recent changes of the current manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The most recent changes of the current manipulation.","pos":[0,52]}]},{"pos":[10116,10128],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10198,10210],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10733,10865],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event occurs during inertia.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia."},{"pos":[10877,11125],"content":"You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use this method to determine whether the &lt;xref:System.Windows.UIElement.ManipulationDelta&gt; event occurs during inertia or while the user has contact with the element that receives the &lt;xref:System.Windows.UIElement.ManipulationDelta&gt; event.","pos":[0,248],"source":"You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event."}]},{"pos":[12086,12412],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event occurs during inertia; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if the event occurs while the user has contact with the <bpt id=\"p4\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>."},{"pos":[12982,13051],"content":"Gets the container that defines the coordinates for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the container that defines the coordinates for the manipulation.","pos":[0,69]}]},{"pos":[13214,13278],"content":"The container that defines the coordinates for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The container that defines the coordinates for the manipulation.","pos":[0,64]}]},{"pos":[13844,13898],"content":"Gets the point from which the manipulation originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the point from which the manipulation originated.","pos":[0,54]}]},{"pos":[14042,14091],"content":"The point from which the manipulation originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point from which the manipulation originated.","pos":[0,49]}]},{"pos":[14624,14709],"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","pos":[0,85]}]},{"pos":[14953,15033],"content":"A collection of objects that represents the touch contacts for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of objects that represents the touch contacts for the manipulation.","pos":[0,80]}]},{"pos":[15745,15812],"content":"Specifies that the manipulation has gone beyond certain boundaries.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the manipulation has gone beyond certain boundaries.","pos":[0,67]}]},{"pos":[15824,16514],"content":"Use the ReportBoundaryFeedback method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call ReportBoundaryFeedback, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the ReportBoundaryFeedback method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call ReportBoundaryFeedback, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.","pos":[0,690],"nodes":[{"content":"Use the ReportBoundaryFeedback method to indicate that an element has moved beyond a certain boundary.","pos":[0,102]},{"content":"For example, if a user moves an element outside of the bounds of a &lt;xref:System.Windows.Window&gt;, you can call this method to report that to the window.","pos":[104,255],"source":"  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window."},{"content":"When you call ReportBoundaryFeedback, the &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; event occurs.","pos":[257,373],"source":"  When you call ReportBoundaryFeedback, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs."},{"content":"By default, the &lt;xref:System.Windows.Window&gt; subscribes to the &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; event to provide visual feedback to the user that a boundary has been reached.","pos":[375,577],"source":"  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached."},{"content":"You can subscribe to &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; to implement custom behavior.","pos":[579,690],"source":"  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior."}]}]},{"pos":[17497,17572],"content":"The portion of the manipulation that represents moving beyond the boundary.","needQuote":true,"needEscape":true,"nodes":[{"content":"The portion of the manipulation that represents moving beyond the boundary.","pos":[0,75]}]},{"pos":[17773,17869],"content":"<ph id=\"ph1\">&lt;code&gt;unusedManipulation&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>unusedManipulation</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18309,18481],"content":"Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event."},{"pos":[19069,19131],"content":"Gets the rates of the most recent changes to the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the rates of the most recent changes to the manipulation.","pos":[0,62]}]},{"pos":[19313,19370],"content":"The rates of the most recent changes to the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rates of the most recent changes to the manipulation.","pos":[0,57]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.ManipulationDeltaEventArgs\n  id: ManipulationDeltaEventArgs\n  children:\n  - System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  - System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  - System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  - System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  - System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  - System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  - System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  - System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  - System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  - System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  langs:\n  - csharp\n  name: ManipulationDeltaEventArgs\n  nameWithType: ManipulationDeltaEventArgs\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event.\n  remarks: \"The ManipulationDeltaEventArgs class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.  \\n  \\n You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.\"\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: 'public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs'\n  inheritance:\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  - System.Windows.Input.InputEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Windows.Input.InputEventArgs.Device\n  - System.Windows.Input.InputEventArgs.Timestamp\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  id: Cancel\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: ManipulationDeltaEventArgs.Cancel()\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Cancels the manipulation.\n  remarks: If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.\n  syntax:\n    content: public bool Cancel ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the manipulation was successfully canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  id: Complete\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Complete()\n  nameWithType: ManipulationDeltaEventArgs.Complete()\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Completes the manipulation without inertia.\n  remarks: You can call the Complete method to end the manipulation. For example, when an object reaches the edge of a window, you can call Complete to prevent the object from going off the screen.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public void Complete ();\n    parameters: []\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Complete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  id: CumulativeManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: CumulativeManipulation\n  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the cumulated changes of the current manipulation.\n  remarks: The CumulativeManipulation property contains the total changes that occurred for the current manipulation. You can use CumulativeManipulation to transform the manipulated object.\n  syntax:\n    content: public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }\n    return:\n      type: System.Windows.Input.ManipulationDelta\n      description: The cumulated changes of the current manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  id: DeltaManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: DeltaManipulation\n  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the most recent changes of the current manipulation.\n  remarks: The DeltaManipulation property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the DeltaManipulation property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }\n    return:\n      type: System.Windows.Input.ManipulationDelta\n      description: The most recent changes of the current manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: To be added.\n    - id: genericTarget\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  id: IsInertial\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: IsInertial\n  nameWithType: ManipulationDeltaEventArgs.IsInertial\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia.\n  remarks: You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public bool IsInertial { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  id: ManipulationContainer\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: ManipulationContainer\n  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the container that defines the coordinates for the manipulation.\n  syntax:\n    content: public System.Windows.IInputElement ManipulationContainer { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The container that defines the coordinates for the manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  id: ManipulationOrigin\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: ManipulationOrigin\n  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the point from which the manipulation originated.\n  syntax:\n    content: public System.Windows.Point ManipulationOrigin { get; }\n    return:\n      type: System.Windows.Point\n      description: The point from which the manipulation originated.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  id: Manipulators\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Manipulators\n  nameWithType: ManipulationDeltaEventArgs.Manipulators\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a collection of objects that represents the touch contacts for the manipulation.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}\n      description: A collection of objects that represents the touch contacts for the manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  id: ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: ReportBoundaryFeedback(ManipulationDelta)\n  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Specifies that the manipulation has gone beyond certain boundaries.\n  remarks: Use the ReportBoundaryFeedback method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call ReportBoundaryFeedback, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the ReportBoundaryFeedback method when the user moves the element over the edge of its container.  To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md) and replace the code in step 5 with this code.  \\n  \\n [!code-cs[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/csharp/basicmanipulation/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]\\n [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/visualbasic/basicmanipulation/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]\"\n  syntax:\n    content: public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);\n    parameters:\n    - id: unusedManipulation\n      type: System.Windows.Input.ManipulationDelta\n      description: The portion of the manipulation that represents moving beyond the boundary.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>unusedManipulation</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  id: StartInertia\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: StartInertia()\n  nameWithType: ManipulationDeltaEventArgs.StartInertia()\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event.\n  syntax:\n    content: public void StartInertia ();\n    parameters: []\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  id: Velocities\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Velocities\n  nameWithType: ManipulationDeltaEventArgs.Velocities\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the rates of the most recent changes to the manipulation.\n  syntax:\n    content: public System.Windows.Input.ManipulationVelocities Velocities { get; }\n    return:\n      type: System.Windows.Input.ManipulationVelocities\n      description: The rates of the most recent changes to the manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.InputEventArgs\n  isExternal: false\n  name: System.Windows.Input.InputEventArgs\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Cancel()\n  nameWithType: ManipulationDeltaEventArgs.Cancel()\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Complete()\n  nameWithType: ManipulationDeltaEventArgs.Complete()\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: CumulativeManipulation\n  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n- uid: System.Windows.Input.ManipulationDelta\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationDelta\n  nameWithType: ManipulationDelta\n  fullName: System.Windows.Input.ManipulationDelta\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: DeltaManipulation\n  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: IsInertial\n  nameWithType: ManipulationDeltaEventArgs.IsInertial\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationContainer\n  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationOrigin\n  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Manipulators\n  nameWithType: ManipulationDeltaEventArgs.Manipulators\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<IManipulator>\n  nameWithType: IEnumerable<IManipulator>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Windows.Input.IManipulator>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.IManipulator\n    name: IManipulator\n    nameWithType: IManipulator\n    fullName: IManipulator\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ReportBoundaryFeedback(ManipulationDelta)\n  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: StartInertia()\n  nameWithType: ManipulationDeltaEventArgs.StartInertia()\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Velocities\n  nameWithType: ManipulationDeltaEventArgs.Velocities\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n- uid: System.Windows.Input.ManipulationVelocities\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationVelocities\n  nameWithType: ManipulationVelocities\n  fullName: System.Windows.Input.ManipulationVelocities\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Cancel\n  nameWithType: ManipulationDeltaEventArgs.Cancel\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Complete\n  nameWithType: ManipulationDeltaEventArgs.Complete\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: CumulativeManipulation\n  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: DeltaManipulation\n  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: IsInertial\n  nameWithType: ManipulationDeltaEventArgs.IsInertial\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationContainer\n  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationOrigin\n  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Manipulators\n  nameWithType: ManipulationDeltaEventArgs.Manipulators\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ReportBoundaryFeedback\n  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: StartInertia\n  nameWithType: ManipulationDeltaEventArgs.StartInertia\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Velocities\n  nameWithType: ManipulationDeltaEventArgs.Velocities\n"}