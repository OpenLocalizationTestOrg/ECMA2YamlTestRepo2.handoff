{"nodes":[{"pos":[648,825],"content":"Defines a control and optional event of the control as an asynchronous postback control trigger that causes an <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.UpdatePanel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control to refresh.","needQuote":true,"needEscape":true,"source":"Defines a control and optional event of the control as an asynchronous postback control trigger that causes an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control to refresh."},{"pos":[838,3256],"content":"Use the AsyncPostBackTrigger control to enable controls to be triggers for an <xref:System.Web.UI.UpdatePanel> control. Controls that are triggers for an update panel cause a refresh of the panel's content after an asynchronous postback. Defining an asynchronous trigger control is useful in the following scenarios:      -   For controls that are outside a panel.      -   For controls that are inside a panel when the <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property is `false`.      -   For controls that are inside nested panels, in order to cause a refresh of parent panels.       The control that the AsyncPostBackTrigger control references must be in the same naming container as the update panel for which it is a trigger. Triggers that are based on controls in other naming containers are not supported.       Add AsyncPostBackTrigger controls either by using the **UpdatePanelTrigger Collection Editor** dialog box in the designer or by creating a `Triggers` element declaratively in the <xref:System.Web.UI.UpdatePanel> control. The <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A> property is required, but the <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is optional. If the <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event. For example, the default event for the <xref:System.Web.UI.WebControls.Button> control is the <xref:System.Web.UI.WebControls.Button.Click> event. The <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is case-insensitive.       You can also reference a naming container as a trigger. In that case, all child controls in the container that cause a postback are considered triggers for the <xref:System.Web.UI.UpdatePanel> control.       Programmatically adding AsyncPostBackTrigger controls is not supported. To programmatically register a postback control, use the <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> method of the <xref:System.Web.UI.ScriptManager> control. Then call the <xref:System.Web.UI.UpdatePanel.Update%2A> method of the <xref:System.Web.UI.UpdatePanel> control when the control posts back.       If you define a control using both <xref:System.Web.UI.PostBackTrigger> and AsyncPostBackTrigger, an exception is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the AsyncPostBackTrigger control to enable controls to be triggers for an &lt;xref:System.Web.UI.UpdatePanel&gt; control.","pos":[0,119],"source":"Use the AsyncPostBackTrigger control to enable controls to be triggers for an <xref:System.Web.UI.UpdatePanel> control."},{"content":"Controls that are triggers for an update panel cause a refresh of the panel's content after an asynchronous postback.","pos":[120,237]},{"content":"Defining an asynchronous trigger control is useful in the following scenarios:      -   For controls that are outside a panel.","pos":[238,364]},{"content":"-   For controls that are inside a panel when the &lt;xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[370,495],"source":"      -   For controls that are inside a panel when the <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property is `false`."},{"content":"-   For controls that are inside nested panels, in order to cause a refresh of parent panels.","pos":[501,594]},{"content":"The control that the AsyncPostBackTrigger control references must be in the same naming container as the update panel for which it is a trigger.","pos":[601,745]},{"content":"Triggers that are based on controls in other naming containers are not supported.","pos":[746,827]},{"content":"Add AsyncPostBackTrigger controls either by using the <bpt id=\"p1\">**</bpt>UpdatePanelTrigger Collection Editor<ept id=\"p1\">**</ept> dialog box in the designer or by creating a <ph id=\"ph1\">`Triggers`</ph> element declaratively in the &lt;xref:System.Web.UI.UpdatePanel&gt; control.","pos":[834,1054],"source":"       Add AsyncPostBackTrigger controls either by using the **UpdatePanelTrigger Collection Editor** dialog box in the designer or by creating a `Triggers` element declaratively in the <xref:System.Web.UI.UpdatePanel> control."},{"content":"The &lt;xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A&gt; property is required, but the &lt;xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A&gt; property is optional.","pos":[1055,1220],"source":" The <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A> property is required, but the <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is optional."},{"content":"If the &lt;xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A&gt; property is not specified, the &lt;xref:System.ComponentModel.DefaultEventAttribute&gt; attribute of the control is used to determine the default event.","pos":[1221,1429],"source":" If the <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event."},{"content":"For example, the default event for the &lt;xref:System.Web.UI.WebControls.Button&gt; control is the &lt;xref:System.Web.UI.WebControls.Button.Click&gt; event.","pos":[1430,1576],"source":" For example, the default event for the <xref:System.Web.UI.WebControls.Button> control is the <xref:System.Web.UI.WebControls.Button.Click> event."},{"content":"The &lt;xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A&gt; property is case-insensitive.","pos":[1577,1665],"source":" The <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is case-insensitive."},{"content":"You can also reference a naming container as a trigger.","pos":[1672,1727]},{"content":"In that case, all child controls in the container that cause a postback are considered triggers for the &lt;xref:System.Web.UI.UpdatePanel&gt; control.","pos":[1728,1873],"source":" In that case, all child controls in the container that cause a postback are considered triggers for the <xref:System.Web.UI.UpdatePanel> control."},{"content":"Programmatically adding AsyncPostBackTrigger controls is not supported.","pos":[1880,1951]},{"content":"To programmatically register a postback control, use the &lt;xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A&gt; method of the &lt;xref:System.Web.UI.ScriptManager&gt; control.","pos":[1952,2133],"source":" To programmatically register a postback control, use the <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> method of the <xref:System.Web.UI.ScriptManager> control."},{"content":"Then call the &lt;xref:System.Web.UI.UpdatePanel.Update%2A&gt; method of the &lt;xref:System.Web.UI.UpdatePanel&gt; control when the control posts back.","pos":[2134,2274],"source":" Then call the <xref:System.Web.UI.UpdatePanel.Update%2A> method of the <xref:System.Web.UI.UpdatePanel> control when the control posts back."},{"content":"If you define a control using both &lt;xref:System.Web.UI.PostBackTrigger&gt; and AsyncPostBackTrigger, an exception is thrown.","pos":[2281,2402],"source":"       If you define a control using both <xref:System.Web.UI.PostBackTrigger> and AsyncPostBackTrigger, an exception is thrown."}]},{"pos":[4845,4940],"content":"Initializes a new instance of an <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.AsyncPostBackTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of an <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> class."},{"pos":[4953,5295],"content":"Add <xref:System.Web.UI.AsyncPostBackTrigger> controls either by using the **UpdatePanelTrigger Collection Editor** dialog box in the designer or by creating a `Triggers` element declaratively in the <xref:System.Web.UI.UpdatePanel> control.       Adding <xref:System.Web.UI.AsyncPostBackTrigger> controls programmatically is not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"Add &lt;xref:System.Web.UI.AsyncPostBackTrigger&gt; controls either by using the <bpt id=\"p1\">**</bpt>UpdatePanelTrigger Collection Editor<ept id=\"p1\">**</ept> dialog box in the designer or by creating a <ph id=\"ph1\">`Triggers`</ph> element declaratively in the &lt;xref:System.Web.UI.UpdatePanel&gt; control.","pos":[0,241],"source":"Add <xref:System.Web.UI.AsyncPostBackTrigger> controls either by using the **UpdatePanelTrigger Collection Editor** dialog box in the designer or by creating a `Triggers` element declaratively in the <xref:System.Web.UI.UpdatePanel> control."},{"content":"Adding &lt;xref:System.Web.UI.AsyncPostBackTrigger&gt; controls programmatically is not supported.","pos":[248,340],"source":"       Adding <xref:System.Web.UI.AsyncPostBackTrigger> controls programmatically is not supported."}]},{"pos":[5815,5953],"content":"Gets or sets the name of the control that triggers an asynchronous postback for an <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.UpdatePanel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the control that triggers an asynchronous postback for an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control."},{"pos":[6072,6092],"content":"A server control ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"A server control ID.","pos":[0,20]}]},{"pos":[6541,6667],"content":"Gets or sets the postback control event that triggers an <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.UpdatePanel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control to be updated.","needQuote":true,"needEscape":true,"source":"Gets or sets the postback control event that triggers an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control to be updated."},{"pos":[6680,7518],"content":"The EventName property is optional. If it is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event. The following table lists default events for some common ASP.NET 2.0 controls.      |Control|Default event|   |-------------|-------------------|   |<xref:System.Web.UI.WebControls.Button>|<xref:System.Web.UI.WebControls.Button.Click>|   |<xref:System.Web.UI.WebControls.Calendar>|<xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|   |<xref:System.Web.UI.WebControls.CheckBox>|<xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|   |<xref:System.Web.UI.WebControls.GridView>|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|   |<xref:System.Web.UI.WebControls.TextBox>|<xref:System.Web.UI.WebControls.TextBox.TextChanged>|","needQuote":false,"needEscape":true,"nodes":[{"content":"The EventName property is optional. If it is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event. The following table lists default events for some common ASP.NET 2.0 controls.      |Control|Default event|   |-------------|-------------------|   |<xref:System.Web.UI.WebControls.Button>|<xref:System.Web.UI.WebControls.Button.Click>|   |<xref:System.Web.UI.WebControls.Calendar>|<xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|   |<xref:System.Web.UI.WebControls.CheckBox>|<xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|   |<xref:System.Web.UI.WebControls.GridView>|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|   |<xref:System.Web.UI.WebControls.TextBox>|<xref:System.Web.UI.WebControls.TextBox.TextChanged>|","pos":[0,830],"nodes":[{"content":"The EventName property is optional.","pos":[0,35]},{"content":"If it is not specified, the &lt;xref:System.ComponentModel.DefaultEventAttribute&gt; attribute of the control is used to determine the default event.","pos":[36,179],"source":" If it is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event."},{"content":"The following table lists default events for some common ASP.NET 2.0 controls.","pos":[180,258]},{"content":"|Control|Default event|   |-------------|-------------------|   |&lt;xref:System.Web.UI.WebControls.Button&gt;|&lt;xref:System.Web.UI.WebControls.Button.Click&gt;|   |&lt;xref:System.Web.UI.WebControls.Calendar&gt;|&lt;xref:System.Web.UI.WebControls.Calendar.SelectionChanged&gt;|   |&lt;xref:System.Web.UI.WebControls.CheckBox&gt;|&lt;xref:System.Web.UI.WebControls.CheckBox.CheckedChanged&gt;|   |&lt;xref:System.Web.UI.WebControls.GridView&gt;|&lt;xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged&gt;|   |&lt;xref:System.Web.UI.WebControls.TextBox&gt;|&lt;xref:System.Web.UI.WebControls.TextBox.TextChanged&gt;|","pos":[264,830],"source":"      |Control|Default event|   |-------------|-------------------|   |<xref:System.Web.UI.WebControls.Button>|<xref:System.Web.UI.WebControls.Button.Click>|   |<xref:System.Web.UI.WebControls.Calendar>|<xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|   |<xref:System.Web.UI.WebControls.CheckBox>|<xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|   |<xref:System.Web.UI.WebControls.GridView>|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|   |<xref:System.Web.UI.WebControls.TextBox>|<xref:System.Web.UI.WebControls.TextBox.TextChanged>|"}]}]},{"pos":[7638,7696],"content":"The event name. The default value is <xref:System.String>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event name. The default value is <xref:System.String>.","pos":[0,58],"nodes":[{"content":"The event name.","pos":[0,15]},{"content":"The default value is &lt;xref:System.String&gt;.","pos":[16,58],"source":" The default value is <xref:System.String>."}]}]},{"pos":[8164,8227],"content":"Returns a value that indicates whether the trigger was invoked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the trigger was invoked.","pos":[0,63]}]},{"pos":[8239,8547],"content":"Control developers can override the HasTriggered method to provide custom logic for determining whether the trigger was invoked. To see a custom trigger in the `Triggers` element of the <xref:System.Web.UI.UpdatePanel> control, you can add an  directive to the page or to the  element of the Web.config file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Control developers can override the HasTriggered method to provide custom logic for determining whether the trigger was invoked.","pos":[0,128]},{"content":"To see a custom trigger in the <ph id=\"ph1\">`Triggers`</ph> element of the &lt;xref:System.Web.UI.UpdatePanel&gt; control, you can add an  directive to the page or to the  element of the Web.config file.","pos":[129,308],"source":" To see a custom trigger in the `Triggers` element of the <xref:System.Web.UI.UpdatePanel> control, you can add an  directive to the page or to the  element of the Web.config file."}]},{"pos":[8689,8852],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the trigger was invoked; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trigger was invoked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9313,9475],"content":"Initializes the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.AsyncPostBackTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control and determines whether the event that is named in the trigger exists and is valid.","needQuote":true,"needEscape":true,"source":"Initializes the <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> control and determines whether the event that is named in the trigger exists and is valid."},{"pos":[10815,10934],"content":"Raises the event that will trigger a postback and refresh of an <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.UpdatePanel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Raises the event that will trigger a postback and refresh of an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control."},{"pos":[11086,11103],"content":"The event sender.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event sender.","pos":[0,17]}]},{"pos":[11164,11179],"content":"The event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event data.","pos":[0,15]}]},{"pos":[11625,11736],"content":"Returns a string representation of the current <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.AsyncPostBackTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Returns a string representation of the current <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> control."},{"pos":[11872,11973],"content":"A string that represents the current <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.AsyncPostBackTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"A string that represents the current <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> control."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.AsyncPostBackTrigger\n  id: AsyncPostBackTrigger\n  children:\n  - System.Web.UI.AsyncPostBackTrigger.#ctor\n  - System.Web.UI.AsyncPostBackTrigger.ControlID\n  - System.Web.UI.AsyncPostBackTrigger.EventName\n  - System.Web.UI.AsyncPostBackTrigger.HasTriggered\n  - System.Web.UI.AsyncPostBackTrigger.Initialize\n  - System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)\n  - System.Web.UI.AsyncPostBackTrigger.ToString\n  langs:\n  - csharp\n  name: AsyncPostBackTrigger\n  nameWithType: AsyncPostBackTrigger\n  fullName: System.Web.UI.AsyncPostBackTrigger\n  type: Class\n  summary: Defines a control and optional event of the control as an asynchronous postback control trigger that causes an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control to refresh.\n  remarks: \"Use the AsyncPostBackTrigger control to enable controls to be triggers for an <xref:System.Web.UI.UpdatePanel> control. Controls that are triggers for an update panel cause a refresh of the panel's content after an asynchronous postback. Defining an asynchronous trigger control is useful in the following scenarios:  \\n  \\n-   For controls that are outside a panel.  \\n  \\n-   For controls that are inside a panel when the <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property is `false`.  \\n  \\n-   For controls that are inside nested panels, in order to cause a refresh of parent panels.  \\n  \\n The control that the AsyncPostBackTrigger control references must be in the same naming container as the update panel for which it is a trigger. Triggers that are based on controls in other naming containers are not supported.  \\n  \\n Add AsyncPostBackTrigger controls either by using the **UpdatePanelTrigger Collection Editor** dialog box in the designer or by creating a `Triggers` element declaratively in the <xref:System.Web.UI.UpdatePanel> control. The <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A> property is required, but the <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is optional. If the <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event. For example, the default event for the <xref:System.Web.UI.WebControls.Button> control is the <xref:System.Web.UI.WebControls.Button.Click> event. The <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> property is case-insensitive.  \\n  \\n You can also reference a naming container as a trigger. In that case, all child controls in the container that cause a postback are considered triggers for the <xref:System.Web.UI.UpdatePanel> control.  \\n  \\n Programmatically adding AsyncPostBackTrigger controls is not supported. To programmatically register a postback control, use the <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> method of the <xref:System.Web.UI.ScriptManager> control. Then call the <xref:System.Web.UI.UpdatePanel.Update%2A> method of the <xref:System.Web.UI.UpdatePanel> control when the control posts back.  \\n  \\n If you define a control using both <xref:System.Web.UI.PostBackTrigger> and AsyncPostBackTrigger, an exception is thrown.\"\n  example:\n  - \"The following example shows how to add an AsyncPostBackTrigger control declaratively. A <xref:System.Web.UI.WebControls.Button> control that is outside an <xref:System.Web.UI.UpdatePanel> control lets users enter a search term to find in the `Products` table of the Northwind database. A <xref:System.Web.UI.WebControls.GridView> control that is inside the <xref:System.Web.UI.UpdatePanel> control shows the results. The <xref:System.Web.UI.WebControls.Button> control is specified as an asynchronous trigger for the <xref:System.Web.UI.UpdatePanel> control.  \\n  \\n [!code-vb[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/visualbasic/t-system.web.ui.asyncpos_1.aspx)]\\n [!code-cs[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/csharp/t-system.web.ui.asyncpos_1.aspx)]\"\n  syntax:\n    content: 'public class AsyncPostBackTrigger : System.Web.UI.UpdatePanelControlTrigger'\n  inheritance:\n  - System.Object\n  - System.Web.UI.UpdatePanelTrigger\n  - System.Web.UI.UpdatePanelControlTrigger\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.UpdatePanelControlTrigger.FindTargetControl(System.Boolean)\n  - System.Web.UI.UpdatePanelTrigger.Owner\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: AsyncPostBackTrigger()\n  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()\n  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Initializes a new instance of an <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> class.\n  remarks: \"Add <xref:System.Web.UI.AsyncPostBackTrigger> controls either by using the **UpdatePanelTrigger Collection Editor** dialog box in the designer or by creating a `Triggers` element declaratively in the <xref:System.Web.UI.UpdatePanel> control.  \\n  \\n Adding <xref:System.Web.UI.AsyncPostBackTrigger> controls programmatically is not supported.\"\n  syntax:\n    content: public AsyncPostBackTrigger ();\n    parameters: []\n  overload: System.Web.UI.AsyncPostBackTrigger.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.ControlID\n  id: ControlID\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: ControlID\n  nameWithType: AsyncPostBackTrigger.ControlID\n  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Gets or sets the name of the control that triggers an asynchronous postback for an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control.\n  syntax:\n    content: public string ControlID { get; set; }\n    return:\n      type: System.String\n      description: A server control ID.\n  overload: System.Web.UI.AsyncPostBackTrigger.ControlID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.EventName\n  id: EventName\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: EventName\n  nameWithType: AsyncPostBackTrigger.EventName\n  fullName: System.Web.UI.AsyncPostBackTrigger.EventName\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Gets or sets the postback control event that triggers an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control to be updated.\n  remarks: \"The EventName property is optional. If it is not specified, the <xref:System.ComponentModel.DefaultEventAttribute> attribute of the control is used to determine the default event. The following table lists default events for some common ASP.NET 2.0 controls.  \\n  \\n|Control|Default event|  \\n|-------------|-------------------|  \\n|<xref:System.Web.UI.WebControls.Button>|<xref:System.Web.UI.WebControls.Button.Click>|  \\n|<xref:System.Web.UI.WebControls.Calendar>|<xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|  \\n|<xref:System.Web.UI.WebControls.CheckBox>|<xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|  \\n|<xref:System.Web.UI.WebControls.GridView>|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|  \\n|<xref:System.Web.UI.WebControls.TextBox>|<xref:System.Web.UI.WebControls.TextBox.TextChanged>|\"\n  syntax:\n    content: public string EventName { get; set; }\n    return:\n      type: System.String\n      description: The event name. The default value is <xref:System.String>.\n  overload: System.Web.UI.AsyncPostBackTrigger.EventName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered\n  id: HasTriggered\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: HasTriggered()\n  nameWithType: AsyncPostBackTrigger.HasTriggered()\n  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Returns a value that indicates whether the trigger was invoked.\n  remarks: Control developers can override the HasTriggered method to provide custom logic for determining whether the trigger was invoked. To see a custom trigger in the `Triggers` element of the <xref:System.Web.UI.UpdatePanel> control, you can add an  directive to the page or to the  element of the Web.config file.\n  syntax:\n    content: protected override bool HasTriggered ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trigger was invoked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.AsyncPostBackTrigger.HasTriggered*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.Initialize\n  id: Initialize\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: AsyncPostBackTrigger.Initialize()\n  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Initializes the <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> control and determines whether the event that is named in the trigger exists and is valid.\n  syntax:\n    content: protected override void Initialize ();\n    parameters: []\n  overload: System.Web.UI.AsyncPostBackTrigger.Initialize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No <xref href=\\\"System.Web.UI.ScriptManager\\\"></xref> control was found on the page.  \\n  \\n \\\\- or -  \\n  \\n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property is not found for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property.  \\n  \\n \\\\- or -  \\n  \\n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property does not match a standard event handler signature.\"\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)\n  id: OnEvent(System.Object,System.EventArgs)\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: OnEvent(Object,EventArgs)\n  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)\n  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Raises the event that will trigger a postback and refresh of an <xref href=\"System.Web.UI.UpdatePanel\"></xref> control.\n  syntax:\n    content: public void OnEvent (object sender, EventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The event sender.\n    - id: e\n      type: System.EventArgs\n      description: The event data.\n  overload: System.Web.UI.AsyncPostBackTrigger.OnEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.AsyncPostBackTrigger.ToString\n  id: ToString\n  parent: System.Web.UI.AsyncPostBackTrigger\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: AsyncPostBackTrigger.ToString()\n  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI\n  summary: Returns a string representation of the current <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> control.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the current <xref href=\"System.Web.UI.AsyncPostBackTrigger\"></xref> control.\n  overload: System.Web.UI.AsyncPostBackTrigger.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.UpdatePanelControlTrigger\n  isExternal: false\n  name: System.Web.UI.UpdatePanelControlTrigger\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.UI.AsyncPostBackTrigger.#ctor\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: AsyncPostBackTrigger()\n  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()\n  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()\n- uid: System.Web.UI.AsyncPostBackTrigger.ControlID\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: ControlID\n  nameWithType: AsyncPostBackTrigger.ControlID\n  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.AsyncPostBackTrigger.EventName\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: EventName\n  nameWithType: AsyncPostBackTrigger.EventName\n  fullName: System.Web.UI.AsyncPostBackTrigger.EventName\n- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: HasTriggered()\n  nameWithType: AsyncPostBackTrigger.HasTriggered()\n  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.AsyncPostBackTrigger.Initialize\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: Initialize()\n  nameWithType: AsyncPostBackTrigger.Initialize()\n  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()\n- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: OnEvent(Object,EventArgs)\n  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)\n  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.UI.AsyncPostBackTrigger.ToString\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: ToString()\n  nameWithType: AsyncPostBackTrigger.ToString()\n  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()\n- uid: System.Web.UI.AsyncPostBackTrigger.#ctor*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: AsyncPostBackTrigger\n  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger\n- uid: System.Web.UI.AsyncPostBackTrigger.ControlID*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: ControlID\n  nameWithType: AsyncPostBackTrigger.ControlID\n- uid: System.Web.UI.AsyncPostBackTrigger.EventName*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: EventName\n  nameWithType: AsyncPostBackTrigger.EventName\n- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: HasTriggered\n  nameWithType: AsyncPostBackTrigger.HasTriggered\n- uid: System.Web.UI.AsyncPostBackTrigger.Initialize*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: Initialize\n  nameWithType: AsyncPostBackTrigger.Initialize\n- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: OnEvent\n  nameWithType: AsyncPostBackTrigger.OnEvent\n- uid: System.Web.UI.AsyncPostBackTrigger.ToString*\n  parent: System.Web.UI.AsyncPostBackTrigger\n  isExternal: false\n  name: ToString\n  nameWithType: AsyncPostBackTrigger.ToString\n"}