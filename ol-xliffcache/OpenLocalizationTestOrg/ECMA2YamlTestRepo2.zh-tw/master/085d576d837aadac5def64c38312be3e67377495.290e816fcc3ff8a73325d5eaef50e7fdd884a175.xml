{"nodes":[{"pos":[335,457],"content":"Indicates that a managed pointer represents a pointer parameter within a method signature. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that a managed pointer represents a pointer parameter within a method signature. This class cannot be inherited.","pos":[0,122],"nodes":[{"content":"Indicates that a managed pointer represents a pointer parameter within a method signature.","pos":[0,90]},{"content":"This class cannot be inherited.","pos":[91,122]}]}]},{"pos":[470,2164],"content":"In C++, managed pointers and managed references are emitted into metadata as pointers.  To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.  It emits no modifier on managed reference types.  Compilers need to know the correct calling syntax when importing a method from metadata scope.  The IsExplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.       Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).      -   Using the unmanaged reflection API.","needQuote":false,"needEscape":true,"nodes":[{"content":"In C++, managed pointers and managed references are emitted into metadata as pointers.","pos":[0,86]},{"content":"To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.","pos":[88,208]},{"content":"It emits no modifier on managed reference types.","pos":[210,258]},{"content":"Compilers need to know the correct calling syntax when importing a method from metadata scope.","pos":[260,354]},{"content":"The IsExplicitlyDereferenced class and its partner, the &lt;xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced&gt; class, disambiguate reference parameters from pointer parameters.","pos":[356,541],"source":"  The IsExplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters."},{"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.","pos":[548,711]},{"content":"When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.","pos":[713,825]},{"content":"Compilers can apply custom modifiers to methods, parameters, and return values.","pos":[827,906]},{"content":"The JIT compiler must respond to required modifiers but can ignore optional modifiers.","pos":[908,994]},{"content":"You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.","pos":[1001,1415],"source":"       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>."},{"content":"-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id=\"ph1\">`modopt`</ph> and <ph id=\"ph2\">`modreq`</ph>, and assembling the file with the <bpt id=\"p1\">[</bpt>Ilasm.exe (IL Assembler)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1421,1639],"source":"      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   Using the unmanaged reflection API.","pos":[1645,1684]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.IsExplicitlyDereferenced\n  id: IsExplicitlyDereferenced\n  children: []\n  langs:\n  - csharp\n  name: IsExplicitlyDereferenced\n  nameWithType: IsExplicitlyDereferenced\n  fullName: System.Runtime.CompilerServices.IsExplicitlyDereferenced\n  type: Class\n  summary: Indicates that a managed pointer represents a pointer parameter within a method signature. This class cannot be inherited.\n  remarks: \"In C++, managed pointers and managed references are emitted into metadata as pointers.  To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.  It emits no modifier on managed reference types.  Compilers need to know the correct calling syntax when importing a method from metadata scope.  The IsExplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.  \\n  \\n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  \\n  \\n You can emit custom modifiers into metadata using one of the following techniques:  \\n  \\n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \\n  \\n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   Using the unmanaged reflection API.\"\n  example:\n  - \"The following example demonstrates how to emit an IsExplicitlyDereferenced object into an assembly using reflection.  \\n  \\n [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/add/codesnippet/cpp/t-system.runtime.compile_5_1.cpp)]\"\n  syntax:\n    content: public static class IsExplicitlyDereferenced\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n"}