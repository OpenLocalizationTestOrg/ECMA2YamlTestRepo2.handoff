{"nodes":[{"pos":[2709,2845],"content":"Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.","pos":[0,136],"nodes":[{"content":"Supports updates of the current deployment programmatically, and handles on-demand downloading of files.","pos":[0,104]},{"content":"This class cannot be inherited.","pos":[105,136]}]}]},{"pos":[2858,7587],"content":"You can configure your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application to check for updates and install them automatically through the `subscription` element of the deployment manifest. Some applications, however, need finer control over their updates. You may want to install required updates programmatically, and prompt users to install optional updates at their convenience. By turning off subscription updates in the deployment manifest, you can take complete control of your application's update policies. Alternatively, you can use automatic subscription in conjunction with ApplicationDeployment, which enables [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] to update the application periodically, but uses ApplicationDeployment to download critical updates shortly after they are released.       You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event on successful completion. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is complete. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.       You can also use ApplicationDeployment to download large files and assemblies on demand. These files must be marked as \"optional\" within the deployment's application manifest so that they are not downloaded during installation. You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method. You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class. For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  If you update a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application while the application is running, the user will not see the updates until you call the <xref:System.Windows.Forms.Application.Restart%2A> method of the <xref:System.Windows.Forms.Application>, which will close the current running instance of the application and immediately restart it.       ApplicationDeployment has no public constructor; you obtain instances of the class within a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application through the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property. You use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to verify that the current application is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application.       ApplicationDeployment supports checking for updates and downloading updated files asynchronously by using the new [Event-based Asynchronous Pattern Overview](~/add/includes/ajax-current-ext-md.md), which exposes completion callbacks as class events. ApplicationDeployment starts and manages the threads for you, and calls your application back on the correct UI thread. Through this class, you can update without locking up the application, so that the user can continue working while the update installs. If the user must stop all work while an update takes place, consider using the synchronous methods instead.      > [!NOTE] >  Performing asynchronous updates requires that your application import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can configure your <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application to check for updates and install them automatically through the <ph id=\"ph2\">`subscription`</ph> element of the deployment manifest.","pos":[0,207],"source":"You can configure your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application to check for updates and install them automatically through the `subscription` element of the deployment manifest."},{"content":"Some applications, however, need finer control over their updates.","pos":[208,274]},{"content":"You may want to install required updates programmatically, and prompt users to install optional updates at their convenience.","pos":[275,400]},{"content":"By turning off subscription updates in the deployment manifest, you can take complete control of your application's update policies.","pos":[401,533]},{"content":"Alternatively, you can use automatic subscription in conjunction with ApplicationDeployment, which enables <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> to update the application periodically, but uses ApplicationDeployment to download critical updates shortly after they are released.","pos":[534,831],"source":" Alternatively, you can use automatic subscription in conjunction with ApplicationDeployment, which enables [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] to update the application periodically, but uses ApplicationDeployment to download critical updates shortly after they are released."},{"content":"You can test whether your deployment has an available update by using either the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt; or the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt; method; the latter method raises the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted&gt; event on successful completion.","pos":[838,1236],"source":"       You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event on successful completion."},{"content":"&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A&gt; returns important information about the update, such as its version number and whether it is a required update for current users.","pos":[1237,1451],"source":" <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users."},{"content":"If an update is available, you can install it by using &lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt; or &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;; the latter method raises the &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt; event after installation of the update is complete.","pos":[1452,1809],"source":" If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is complete."},{"content":"For large updates, you can receive progress notifications through the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged&gt; and &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged&gt; events, and use the information in &lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt; to notify the user of the download status.","pos":[1810,2185],"source":" For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status."},{"content":"You can also use ApplicationDeployment to download large files and assemblies on demand.","pos":[2192,2280]},{"content":"These files must be marked as \"optional\" within the deployment's application manifest so that they are not downloaded during installation.","pos":[2281,2419]},{"content":"You can download the files at any point during the application's duration by using the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt; or the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt; method.","pos":[2420,2686],"source":" You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method."},{"content":"You can download assemblies before they are loaded into memory by supplying an event handler for the &lt;xref:System.AppDomain.AssemblyResolve&gt; event on the &lt;xref:System.AppDomain&gt; class.","pos":[2687,2871],"source":" You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2872,3038],"source":" For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you update a <ph id=\"ph2\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application while the application is running, the user will not see the updates until you call the &lt;xref:System.Windows.Forms.Application.Restart%2A&gt; method of the &lt;xref:System.Windows.Forms.Application&gt;, which will close the current running instance of the application and immediately restart it.","pos":[3044,3428],"source":"      > [!NOTE] >  If you update a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application while the application is running, the user will not see the updates until you call the <xref:System.Windows.Forms.Application.Restart%2A> method of the <xref:System.Windows.Forms.Application>, which will close the current running instance of the application and immediately restart it."},{"content":"ApplicationDeployment has no public constructor; you obtain instances of the class within a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application through the &lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A&gt; property.","pos":[3435,3698],"source":"       ApplicationDeployment has no public constructor; you obtain instances of the class within a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application through the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property."},{"content":"You use the &lt;xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A&gt; property to verify that the current application is a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application.","pos":[3699,3914],"source":" You use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to verify that the current application is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application."},{"content":"ApplicationDeployment supports checking for updates and downloading updated files asynchronously by using the new <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>, which exposes completion callbacks as class events.","pos":[3921,4170],"source":"       ApplicationDeployment supports checking for updates and downloading updated files asynchronously by using the new [Event-based Asynchronous Pattern Overview](~/add/includes/ajax-current-ext-md.md), which exposes completion callbacks as class events."},{"content":"ApplicationDeployment starts and manages the threads for you, and calls your application back on the correct UI thread.","pos":[4171,4290]},{"content":"Through this class, you can update without locking up the application, so that the user can continue working while the update installs.","pos":[4291,4426]},{"content":"If the user must stop all work while an update takes place, consider using the synchronous methods instead.","pos":[4427,4534]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Performing asynchronous updates requires that your application import both the &lt;xref:System.Deployment.Application&gt; and &lt;xref:System.ComponentModel&gt; namespaces.","pos":[4540,4713],"source":"      > [!NOTE] >  Performing asynchronous updates requires that your application import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces."}]},{"pos":[8756,8827],"content":"Gets the URL used to launch the deployment manifest of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the URL used to launch the deployment manifest of the application.","pos":[0,71]}]},{"pos":[8839,8920],"content":"This property will work in both fully trusted and partially trusted applications.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property will work in both fully trusted and partially trusted applications.","pos":[0,81]}]},{"pos":[9585,9921],"content":"A zero-length string if the `TrustUrlParameters` property in the deployment manifest is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, or if the user has supplied a UNC to open the deployment or has opened it locally. Otherwise, the return value is the full URL used to launch the application, including any parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"A zero-length string if the <ph id=\"ph1\">`TrustUrlParameters`</ph> property in the deployment manifest is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or if the user has supplied a UNC to open the deployment or has opened it locally.","pos":[0,234],"source":"A zero-length string if the `TrustUrlParameters` property in the deployment manifest is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, or if the user has supplied a UNC to open the deployment or has opened it locally."},{"content":"Otherwise, the return value is the full URL used to launch the application, including any parameters.","pos":[235,336]}]},{"pos":[10524,10691],"content":"Performs the same operation as <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*>, but returns extended information about the available update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs the same operation as &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*&gt;, but returns extended information about the available update.","pos":[0,167],"source":"Performs the same operation as <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*>, but returns extended information about the available update."}]},{"pos":[10703,10912],"content":"The CheckForDetailedUpdate method lets synchronous callers get the same extended information that asynchronous callers get using the <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CheckForDetailedUpdate method lets synchronous callers get the same extended information that asynchronous callers get using the &lt;xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs&gt; class.","pos":[0,209],"source":"The CheckForDetailedUpdate method lets synchronous callers get the same extended information that asynchronous callers get using the <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class."}]},{"pos":[11621,11716],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.UpdateCheckInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the available update.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Deployment.Application.UpdateCheckInfo\"></xref> for the available update."},{"pos":[11929,12061],"content":"The current application is either not configured to support updates, or there is another update check operation already in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current application is either not configured to support updates, or there is another update check operation already in progress.","pos":[0,132]}]},{"pos":[12222,12481],"content":"The deployment manifest cannot be downloaded. This exception will appear in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deployment manifest cannot be downloaded.","pos":[0,45]},{"content":"This exception will appear in the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[46,259],"source":" This exception will appear in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event."}]},{"pos":[12640,12985],"content":"The deployment manifest is corrupted. Regenerate the application's manifest before you attempt to deploy this application to users. This exception will appear in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deployment manifest is corrupted.","pos":[0,37]},{"content":"Regenerate the application's manifest before you attempt to deploy this application to users.","pos":[38,131]},{"content":"This exception will appear in the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[132,345],"source":" This exception will appear in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event."}]},{"pos":[13545,13712],"content":"Performs the same operation as <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*>, but returns extended information about the available update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs the same operation as &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*&gt;, but returns extended information about the available update.","pos":[0,167],"source":"Performs the same operation as <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*>, but returns extended information about the available update."}]},{"pos":[13942,14081],"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the update will be applied silently and no dialog box will be displayed.","needQuote":true,"needEscape":true,"source":"If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the update will be applied silently and no dialog box will be displayed."},{"pos":[14171,14266],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.UpdateCheckInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the available update.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Deployment.Application.UpdateCheckInfo\"></xref> for the available update."},{"pos":[14838,14967],"content":"Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> to determine whether a new update is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*&gt; to determine whether a new update is available.","pos":[0,129],"source":"Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> to determine whether a new update is available."}]},{"pos":[14980,15943],"content":"The CheckForUpdate method compares the version of the currently installed deployment with the version specified in the deployment manifest found at <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>. If the version on the server is different from the installed version, it returns `true`.       This method will block until the check has completed. To check for an update asynchronously, use the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method instead.      > [!NOTE] >  If CheckForUpdate discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will install it without prompting.)","needQuote":false,"needEscape":true,"nodes":[{"content":"The CheckForUpdate method compares the version of the currently installed deployment with the version specified in the deployment manifest found at &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;.","pos":[0,225],"source":"The CheckForUpdate method compares the version of the currently installed deployment with the version specified in the deployment manifest found at <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>."},{"content":"If the version on the server is different from the installed version, it returns <ph id=\"ph1\">`true`</ph>.","pos":[226,314],"source":" If the version on the server is different from the installed version, it returns `true`."},{"content":"This method will block until the check has completed.","pos":[321,374]},{"content":"To check for an update asynchronously, use the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt; method instead.","pos":[375,519],"source":" To check for an update asynchronously, use the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method instead."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If CheckForUpdate discovers that an update is available, and the user chooses not to install it, <ph id=\"ph2\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> will prompt the user that an update is available the next time the application is run.","pos":[525,779],"source":"      > [!NOTE] >  If CheckForUpdate discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run."},{"content":"There is no way to disable this prompting.","pos":[780,822]},{"content":"(If the application is a required update, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> will install it without prompting.)","pos":[823,958],"source":" (If the application is a required update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will install it without prompting.)"}]},{"pos":[16462,16627],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a new update is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a new update is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16833,17002],"content":"<ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> throws this exception immediately if you call the CheckForUpdate method while an update is already in progress.","needQuote":false,"needEscape":true,"source":"[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] throws this exception immediately if you call the CheckForUpdate method while an update is already in progress."},{"pos":[17164,17209],"content":"The deployment manifest cannot be downloaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deployment manifest cannot be downloaded.","pos":[0,45]}]},{"pos":[17368,17475],"content":"The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem.","pos":[0,107],"nodes":[{"content":"The deployment manifest is corrupted.","pos":[0,37]},{"content":"You will likely need to redeploy the application to fix this problem.","pos":[38,107]}]}]},{"pos":[17995,18124],"content":"Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> to determine whether a new update is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*&gt; to determine whether a new update is available.","pos":[0,129],"source":"Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> to determine whether a new update is available."}]},{"pos":[18305,18444],"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the update will be applied silently and no dialog box will be displayed.","needQuote":true,"needEscape":true,"source":"If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the update will be applied silently and no dialog box will be displayed."},{"pos":[18503,18668],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a new update is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a new update is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19257,19401],"content":"Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> asynchronously to determine whether a new update is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*&gt; asynchronously to determine whether a new update is available.","pos":[0,144],"source":"Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> asynchronously to determine whether a new update is available."}]},{"pos":[19414,20500],"content":"CheckForUpdateAsync returns immediately and starts a separate thread for downloading the updated application. When the method completes or is canceled, it raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event. You can use <xref:System.ComponentModel.AsyncCompletedEventArgs> in this event handler to determine whether the operation was canceled, or if an exception was raised during update.       You can cancel an asynchronous update by calling <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel%2A>.      > [!NOTE] >  If <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will install it without prompting.)","needQuote":false,"needEscape":true,"nodes":[{"content":"CheckForUpdateAsync returns immediately and starts a separate thread for downloading the updated application.","pos":[0,109]},{"content":"When the method completes or is canceled, it raises the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted&gt; event.","pos":[110,255],"source":" When the method completes or is canceled, it raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event."},{"content":"You can use &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; in this event handler to determine whether the operation was canceled, or if an exception was raised during update.","pos":[256,436],"source":" You can use <xref:System.ComponentModel.AsyncCompletedEventArgs> in this event handler to determine whether the operation was canceled, or if an exception was raised during update."},{"content":"You can cancel an asynchronous update by calling &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel%2A&gt;.","pos":[443,580],"source":"       You can cancel an asynchronous update by calling <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt; discovers that an update is available, and the user chooses not to install it, <ph id=\"ph2\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> will prompt the user that an update is available the next time the application is run.","pos":[586,902],"source":"      > [!NOTE] >  If <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run."},{"content":"There is no way to disable this prompting.","pos":[903,945]},{"content":"(If the application is a required update, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> will install it without prompting.)","pos":[946,1081],"source":" (If the application is a required update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will install it without prompting.)"}]},{"pos":[21162,21336],"content":"<ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> throws this exception immediately if you call the CheckForUpdateAsync method while an update is already in progress.","needQuote":false,"needEscape":true,"source":"[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] throws this exception immediately if you call the CheckForUpdateAsync method while an update is already in progress."},{"pos":[21498,21753],"content":"The deployment manifest cannot be downloaded. This exception appears in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deployment manifest cannot be downloaded.","pos":[0,45]},{"content":"This exception appears in the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[46,255],"source":" This exception appears in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event."}]},{"pos":[21912,22229],"content":"The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem. This exception appears in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deployment manifest is corrupted.","pos":[0,37]},{"content":"You will likely need to redeploy the application to fix this problem.","pos":[38,107]},{"content":"This exception appears in the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[108,317],"source":" This exception appears in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event."}]},{"pos":[22751,22789],"content":"Cancels the asynchronous update check.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the asynchronous update check.","pos":[0,38]}]},{"pos":[22802,23221],"content":"Use this method to cancel an update check initiated with the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method.       This method will not cancel any background update that may already be in progress, such as an update started as part of a subscription. For more information about subscriptions, see [Choosing a ClickOnce Update Strategy](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this method to cancel an update check initiated with the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt; method.","pos":[0,150],"source":"Use this method to cancel an update check initiated with the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method."},{"content":"This method will not cancel any background update that may already be in progress, such as an update started as part of a subscription.","pos":[157,292]},{"content":"For more information about subscriptions, see <bpt id=\"p1\">[</bpt>Choosing a ClickOnce Update Strategy<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[293,417],"source":" For more information about subscriptions, see [Choosing a ClickOnce Update Strategy](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[23919,24025],"content":"Occurs when <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*> has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*&gt; has completed.","pos":[0,106],"source":"Occurs when <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*> has completed."}]},{"pos":[24037,24261],"content":"The <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs&gt; class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional.","pos":[0,224],"source":"The <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional."}]},{"pos":[25256,25268],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25820,25953],"content":"Occurs when a progress update is available on a <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*> call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a progress update is available on a &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*&gt; call.","pos":[0,133],"source":"Occurs when a progress update is available on a <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*> call."}]},{"pos":[25965,26177],"content":"CheckForUpdateProgressChanged reports on the download status of the application's deployment manifest. This can be important information for users who are downloading the deployment over slow network connections.","needQuote":true,"needEscape":true,"nodes":[{"content":"CheckForUpdateProgressChanged reports on the download status of the application's deployment manifest. This can be important information for users who are downloading the deployment over slow network connections.","pos":[0,212],"nodes":[{"content":"CheckForUpdateProgressChanged reports on the download status of the application's deployment manifest.","pos":[0,102]},{"content":"This can be important information for users who are downloading the deployment over slow network connections.","pos":[103,212]}]}]},{"pos":[27088,27100],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27595,27708],"content":"Returns the current <bpt id=\"p1\">&lt;xref href=\"System.Deployment.Application.ApplicationDeployment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for this deployment.","needQuote":true,"needEscape":true,"source":"Returns the current <xref href=\"System.Deployment.Application.ApplicationDeployment\"></xref> for this deployment."},{"pos":[27721,28564],"content":"You cannot create instances of <xref:System.Deployment.Application.ApplicationDeployment> directly in your application; you must retrieve a valid instance through the CurrentDeployment property.       The CurrentDeployment static property is valid only from within an application that was deployed using [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]. Attempts to call this property from non-[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] applications will throw an exception. If you are developing an application that may or may not be deployed using [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)], use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to test whether the current program is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application.","needQuote":false,"needEscape":true,"nodes":[{"content":"You cannot create instances of &lt;xref:System.Deployment.Application.ApplicationDeployment&gt; directly in your application; you must retrieve a valid instance through the CurrentDeployment property.","pos":[0,194],"source":"You cannot create instances of <xref:System.Deployment.Application.ApplicationDeployment> directly in your application; you must retrieve a valid instance through the CurrentDeployment property."},{"content":"The CurrentDeployment static property is valid only from within an application that was deployed using <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph>.","pos":[201,362],"source":"       The CurrentDeployment static property is valid only from within an application that was deployed using [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]."},{"content":"Attempts to call this property from non-<ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> applications will throw an exception.","pos":[363,498],"source":" Attempts to call this property from non-[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] applications will throw an exception."},{"content":"If you are developing an application that may or may not be deployed using <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph>, use the &lt;xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A&gt; property to test whether the current program is a <ph id=\"ph2\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application.","pos":[499,841],"source":" If you are developing an application that may or may not be deployed using [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)], use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to test whether the current program is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application."}]},{"pos":[29196,29219],"content":"The current deployment.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current deployment.","pos":[0,23]}]},{"pos":[29475,29599],"content":"You attempted to call this static property from a non-<ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application.","needQuote":true,"needEscape":true,"source":"You attempted to call this static property from a non-[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application."},{"pos":[30062,30149],"content":"Gets the version of the deployment for the current running instance of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the version of the deployment for the current running instance of the application.","pos":[0,87]}]},{"pos":[30161,30540],"content":"CurrentVersion will differ from <xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A>. If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"CurrentVersion will differ from <xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A>. If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.","pos":[0,379],"nodes":[{"content":"CurrentVersion will differ from &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A&gt; if a new update has been installed but you have not yet called &lt;xref:System.Windows.Forms.Application.Restart%2A&gt;.","pos":[0,223],"source":"CurrentVersion will differ from <xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A>."},{"content":"If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.","pos":[224,379]}]}]},{"pos":[31090,31121],"content":"The current deployment version.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current deployment version.","pos":[0,31]}]},{"pos":[31676,31770],"content":"Gets the path to the <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> data directory.","needQuote":true,"needEscape":true,"source":"Gets the path to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] data directory."},{"pos":[31888,31971],"content":"A string containing the path to the application's data directory on the local disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the path to the application's data directory on the local disk.","pos":[0,83]}]},{"pos":[32597,32641],"content":"Downloads a set of optional files on demand.","needQuote":true,"needEscape":true,"nodes":[{"content":"Downloads a set of optional files on demand.","pos":[0,44]}]},{"pos":[32654,35063],"content":"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update. You can use the DownloadFileGroup method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.       To use an assembly you have downloaded with DownloadFileGroup, you attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>. For an example, see =[Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](~/add/includes/ajax-current-ext-md.md).       All files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application cache and are therefore isolated to the current version of the application. Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing data files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md).       DownloadFileGroup works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission. However, if you attempt to load assemblies dynamically, your application will require full trust.       On-demand downloading of data files is currently not supported.       Your application will not be responsive to user input until the DownloadFileGroup method returns. If you need to download files without interrupting the user's workflow, use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method instead.       You cannot download a single file by its file name alone. To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment and download the group using this method.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update.","pos":[0,183],"source":"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update."},{"content":"You can use the DownloadFileGroup method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them.","pos":[184,395]},{"content":"For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.","pos":[396,548]},{"content":"To use an assembly you have downloaded with DownloadFileGroup, you attach an event listener to the &lt;xref:System.AppDomain.AssemblyResolve&gt; event on the &lt;xref:System.AppDomain.CurrentDomain%2A&gt;.","pos":[555,748],"source":"       To use an assembly you have downloaded with DownloadFileGroup, you attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>."},{"content":"For an example, see =<bpt id=\"p1\">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[749,910],"source":" For an example, see =[Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](~/add/includes/ajax-current-ext-md.md)."},{"content":"All files are downloaded to the <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application cache and are therefore isolated to the current version of the application.","pos":[917,1094],"source":"       All files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application cache and are therefore isolated to the current version of the application."},{"content":"Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application.","pos":[1095,1268]},{"content":"In this case, the previous version will still have the copies of the files it originally downloaded.","pos":[1269,1369]},{"content":"For more information about accessing data files, see <bpt id=\"p1\">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1370,1522],"source":" For more information about accessing data files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md)."},{"content":"DownloadFileGroup works in partially trusted applications, that is, in any <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application running with restricted permission.","pos":[1529,1709],"source":"       DownloadFileGroup works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission."},{"content":"However, if you attempt to load assemblies dynamically, your application will require full trust.","pos":[1710,1807]},{"content":"On-demand downloading of data files is currently not supported.","pos":[1814,1877]},{"content":"Your application will not be responsive to user input until the DownloadFileGroup method returns.","pos":[1884,1981]},{"content":"If you need to download files without interrupting the user's workflow, use the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt; method instead.","pos":[1982,2162],"source":" If you need to download files without interrupting the user's workflow, use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method instead."},{"content":"You cannot download a single file by its file name alone.","pos":[2169,2226]},{"content":"To download a single file, assign it a group name in your <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> deployment and download the group using this method.","pos":[2227,2395],"source":" To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment and download the group using this method."}]},{"pos":[35481,35643],"content":"The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The named group of files to download.","pos":[0,37]},{"content":"All files marked \"optional\" in a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application require a group name.","pos":[38,162],"source":" All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name."}]},{"pos":[35843,35903],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is null or zero-length.","needQuote":true,"needEscape":true,"source":"The <code>groupName</code> parameter is null or zero-length."},{"pos":[36458,36522],"content":"Downloads, on demand, a set of optional files in the background.","needQuote":true,"needEscape":true,"nodes":[{"content":"Downloads, on demand, a set of optional files in the background.","pos":[0,64]}]},{"pos":[36535,39748],"content":"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update. You can use the DownloadFileGroupAsync method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.       To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>. For an example, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API](~/add/includes/ajax-current-ext-md.md).       All assemblies are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application cache.       All static files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application. Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md).       You can download multiple file groups simultaneously using <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A>. You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event. If you need to pass more complex state, you can use <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> to pass in a `state` object.       <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.       On-demand downloading of data files is currently not supported.       You cannot download a single file by its file name alone. To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment and download the group using this method.       To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update.","pos":[0,183],"source":"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update."},{"content":"You can use the DownloadFileGroupAsync method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them.","pos":[184,400]},{"content":"This approach works not only for static files, but also for assemblies that an application may or may not require.","pos":[401,515]},{"content":"For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.","pos":[516,668]},{"content":"To download assemblies on demand, attach an event listener to the &lt;xref:System.AppDomain.AssemblyResolve&gt; event on the &lt;xref:System.AppDomain.CurrentDomain%2A&gt;.","pos":[675,835],"source":"       To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[836,977],"source":" For an example, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API](~/add/includes/ajax-current-ext-md.md)."},{"content":"All assemblies are downloaded to the <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application cache.","pos":[984,1097],"source":"       All assemblies are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application cache."},{"content":"All static files are downloaded to the <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application's data directory and are therefore isolated to the current version of the application.","pos":[1104,1299],"source":"       All static files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application."},{"content":"Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application.","pos":[1300,1473]},{"content":"In this case, the previous version will still have the copies of the files it originally downloaded.","pos":[1474,1574]},{"content":"For more information about accessing static files, see <bpt id=\"p1\">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1575,1729],"source":" For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can download multiple file groups simultaneously using &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;.","pos":[1736,1880],"source":"       You can download multiple file groups simultaneously using <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A>."},{"content":"You can distinguish among them by using the &lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A&gt; property of the &lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs&gt; class, which is passed to the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged&gt; event.","pos":[1881,2222],"source":" You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event."},{"content":"If you need to pass more complex state, you can use &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt; to pass in a <ph id=\"ph1\">`state`</ph> object.","pos":[2223,2388],"source":" If you need to pass more complex state, you can use <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> to pass in a `state` object."},{"content":"&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt; works in partially trusted applications, that is, in any <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application running with restricted permission.","pos":[2395,2637],"source":"       <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission."},{"content":"However, if you are attempting to load assemblies dynamically, your application will require full trust.","pos":[2638,2742]},{"content":"On-demand downloading of data files is currently not supported.","pos":[2749,2812]},{"content":"You cannot download a single file by its file name alone.","pos":[2819,2876]},{"content":"To download a single file, assign it a group name in your <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> deployment and download the group using this method.","pos":[2877,3045],"source":" To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment and download the group using this method."},{"content":"To cancel an asynchronous download, call the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A&gt; method.","pos":[3052,3195],"source":"       To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method."}]},{"pos":[39909,40071],"content":"The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The named group of files to download.","pos":[0,37]},{"content":"All files marked \"optional\" in a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application require a group name.","pos":[38,162],"source":" All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name."}]},{"pos":[40276,40336],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is null or zero-length.","needQuote":true,"needEscape":true,"source":"The <code>groupName</code> parameter is null or zero-length."},{"pos":[40447,40526],"content":"You cannot initiate more than one download of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupName</ph><ept id=\"p1\">&lt;/code&gt;</ept> at a time.","needQuote":true,"needEscape":true,"source":"You cannot initiate more than one download of <code>groupName</code> at a time."},{"pos":[41130,41258],"content":"Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.","needQuote":true,"needEscape":true,"nodes":[{"content":"Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.","pos":[0,128]}]},{"pos":[41271,43947],"content":"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update. You can use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it. To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>.       You can download multiple file groups simultaneously by using the DownloadFileGroupAsync method. You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event. If you need to pass a more complex state, you can use       DownloadFileGroupAsync to pass in a `state` object.       All static files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application. For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md). . Let's say that after an application downloads a file group, the user installs a new version of the application, but later  user reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded.       <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.       On-demand downloading of data files is currently not supported.       To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update.","pos":[0,183],"source":"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update."},{"content":"You can use the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt; method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them.","pos":[184,462],"source":" You can use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them."},{"content":"This approach works not only for static files, but also for assemblies that an application may or may not require.","pos":[463,577]},{"content":"For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.","pos":[578,730]},{"content":"To download assemblies on demand, attach an event listener to the &lt;xref:System.AppDomain.AssemblyResolve&gt; event on the &lt;xref:System.AppDomain.CurrentDomain%2A&gt;.","pos":[731,891],"source":" To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>."},{"content":"You can download multiple file groups simultaneously by using the DownloadFileGroupAsync method.","pos":[898,994]},{"content":"You can distinguish among them by using the &lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A&gt; property of the &lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs&gt; class, which is passed to the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged&gt; event.","pos":[995,1336],"source":" You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event."},{"content":"If you need to pass a more complex state, you can use       DownloadFileGroupAsync to pass in a <ph id=\"ph1\">`state`</ph> object.","pos":[1337,1448],"source":" If you need to pass a more complex state, you can use       DownloadFileGroupAsync to pass in a `state` object."},{"content":"All static files are downloaded to the <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application's data directory and are therefore isolated to the current version of the application.","pos":[1455,1650],"source":"       All static files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application."},{"content":"For more information about accessing static files, see <bpt id=\"p1\">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1651,1805],"source":" For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md)."},{"content":".","pos":[1806,1807]},{"content":"Let's say that after an application downloads a file group, the user installs a new version of the application, but later  user reverts to the previous version of the application.","pos":[1808,1987]},{"content":"In this case, the previous version will still have the copies of the files it originally downloaded.","pos":[1988,2088]},{"content":"&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt; works in partially trusted applications, that is, in any <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application running with restricted permission.","pos":[2095,2337],"source":"       <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission."},{"content":"However, if you are attempting to load assemblies dynamically, your application will require full trust.","pos":[2338,2442]},{"content":"On-demand downloading of data files is currently not supported.","pos":[2449,2512]},{"content":"To cancel an asynchronous download, call the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A&gt; method.","pos":[2519,2662],"source":"       To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method."}]},{"pos":[44126,44288],"content":"The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The named group of files to download.","pos":[0,37]},{"content":"All files marked \"optional\" in a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application require a group name.","pos":[38,162],"source":" All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name."}]},{"pos":[44354,44434],"content":"An arbitrary object containing state information for the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An arbitrary object containing state information for the asynchronous operation.","pos":[0,80]}]},{"pos":[44639,44699],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is null or zero-length.","needQuote":true,"needEscape":true,"source":"The <code>groupName</code> parameter is null or zero-length."},{"pos":[44810,44889],"content":"You cannot initiate more than one download of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupName</ph><ept id=\"p1\">&lt;/code&gt;</ept> at a time.","needQuote":true,"needEscape":true,"source":"You cannot initiate more than one download of <code>groupName</code> at a time."},{"pos":[45474,45512],"content":"Cancels an asynchronous file download.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels an asynchronous file download.","pos":[0,38]}]},{"pos":[45678,45840],"content":"The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The named group of files to download.","pos":[0,37]},{"content":"All files marked \"optional\" in a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application require a group name.","pos":[38,162],"source":" All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name."}]},{"pos":[46051,46145],"content":"<ph id=\"ph1\">&lt;code&gt;groupName&lt;/code&gt;</ph> cannot be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>groupName</code> cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[46665,46736],"content":"Occurs on the main application thread when a file download is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs on the main application thread when a file download is complete.","pos":[0,71]}]},{"pos":[46749,47363],"content":"The DownloadFileGroupCompleted event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.       Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback. If this property is `null`, the download was successful; if it is not `null`, the installation did not succeed, and you can find more information about the installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DownloadFileGroupCompleted event is called on the main application thread.","pos":[0,78]},{"content":"It is thread safe to call your application's Windows Forms controls directly within this callback.","pos":[79,177]},{"content":"Check the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt; property of the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; supplied to this callback.","pos":[184,351],"source":"       Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback."},{"content":"If this property is <ph id=\"ph1\">`null`</ph>, the download was successful; if it is not <ph id=\"ph2\">`null`</ph>, the installation did not succeed, and you can find more information about the installation failure through the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt; property.","pos":[352,612],"source":" If this property is `null`, the download was successful; if it is not `null`, the installation did not succeed, and you can find more information about the installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property."}]},{"pos":[48204,48216],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48783,48962],"content":"Occurs when status information is available on a file download operation initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when status information is available on a file download operation initiated by a call to &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*&gt;.","pos":[0,179],"source":"Occurs when status information is available on a file download operation initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*>."}]},{"pos":[48975,49321],"content":"The DownloadFileGroupProgressChanged event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.       Use the information supplied in <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> to communicate progress information to your users.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DownloadFileGroupProgressChanged event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.       Use the information supplied in <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> to communicate progress information to your users.","pos":[0,344],"nodes":[{"content":"The DownloadFileGroupProgressChanged event is called on the main application thread.","pos":[0,84]},{"content":"It is thread safe to call your application's Windows Forms controls directly within this callback.","pos":[85,183]},{"content":"Use the information supplied in &lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs&gt; to communicate progress information to your users.","pos":[190,344],"source":"       Use the information supplied in <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> to communicate progress information to your users."}]}]},{"pos":[50165,50177],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[50744,50831],"content":"Checks whether the named file group has already been downloaded to the client computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks whether the named file group has already been downloaded to the client computer.","pos":[0,87]}]},{"pos":[50844,51276],"content":"IsFileGroupDownloaded works in a partially trusted application without any security demands.       When you update an application, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] copies any on-demand data files from the previous version into the new version's data directory. If you download a new version of these files, you should remove any data you want to keep from the old version and move it into the new version.","needQuote":false,"needEscape":true,"nodes":[{"content":"IsFileGroupDownloaded works in a partially trusted application without any security demands.","pos":[0,92]},{"content":"When you update an application, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> copies any on-demand data files from the previous version into the new version's data directory.","pos":[99,285],"source":"       When you update an application, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] copies any on-demand data files from the previous version into the new version's data directory."},{"content":"If you download a new version of these files, you should remove any data you want to keep from the old version and move it into the new version.","pos":[286,430]}]},{"pos":[51796,51958],"content":"The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The named group of files to download.","pos":[0,37]},{"content":"All files marked \"optional\" in a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application require a group name.","pos":[38,162],"source":" All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name."}]},{"pos":[52017,52471],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file group has already been downloaded for the current version of this application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, IsFileGroupDownloaded returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the file group has already been downloaded for the current version of this application; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,226],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file group has already been downloaded for the current version of this application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, IsFileGroupDownloaded returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[227,454],"source":" If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, IsFileGroupDownloaded returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[52731,52810],"content":"<ph id=\"ph1\">&lt;code&gt;groupName&lt;/code&gt;</ph> is not a file group defined in the application manifest.","needQuote":true,"needEscape":true,"source":"<code>groupName</code> is not a file group defined in the application manifest."},{"pos":[53253,53356],"content":"Gets a value indicating whether this is the first time this application has run on the client computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether this is the first time this application has run on the client computer.","pos":[0,103]}]},{"pos":[53369,54214],"content":"Use IsFirstRun to determine whether you need to perform any one-time initialization operations the first time your application runs.       Do not assume that a IsFirstRun setting of `true` indicates that this instance of an application is the first one to show its user interface to the user. Due to the way the system schedules processes, one instance of the application may have its IsFirstRun property set to `true`, but another instance may be the first to render on the screen. The value of this property is reset whenever the user upgrades from one version to the next. If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using **Application Settings**.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use IsFirstRun to determine whether you need to perform any one-time initialization operations the first time your application runs.","pos":[0,132]},{"content":"Do not assume that a IsFirstRun setting of <ph id=\"ph1\">`true`</ph> indicates that this instance of an application is the first one to show its user interface to the user.","pos":[139,292],"source":"       Do not assume that a IsFirstRun setting of `true` indicates that this instance of an application is the first one to show its user interface to the user."},{"content":"Due to the way the system schedules processes, one instance of the application may have its IsFirstRun property set to <ph id=\"ph1\">`true`</ph>, but another instance may be the first to render on the screen.","pos":[293,482],"source":" Due to the way the system schedules processes, one instance of the application may have its IsFirstRun property set to `true`, but another instance may be the first to render on the screen."},{"content":"The value of this property is reset whenever the user upgrades from one version to the next.","pos":[483,575]},{"content":"If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using <bpt id=\"p1\">**</bpt>Application Settings<ept id=\"p1\">**</ept>.","pos":[576,843],"source":" If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using **Application Settings**."}]},{"pos":[54796,55011],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this version of the application has never run on the client computer before; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this version of the application has never run on the client computer before; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[55582,55713],"content":"Gets a value indicating whether the current application is a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the current application is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application."},{"pos":[55726,56286],"content":"If you want your application to run both inside and outside of a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment (for example, if you need to debug your application on the local computer before deploying it), test IsNetworkDeployed before accessing the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property.       IsNetworkDeployed will return `true` regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you want your application to run both inside and outside of a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> deployment (for example, if you need to debug your application on the local computer before deploying it), test IsNetworkDeployed before accessing the &lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A&gt; property.","pos":[0,363],"source":"If you want your application to run both inside and outside of a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment (for example, if you need to debug your application on the local computer before deploying it), test IsNetworkDeployed before accessing the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property."},{"content":"IsNetworkDeployed will return <ph id=\"ph1\">`true`</ph> regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM.","pos":[370,558],"source":"       IsNetworkDeployed will return `true` regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM."}]},{"pos":[56797,57016],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this is a <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[57614,57738],"content":"Gets the date and the time <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> last checked for an application update.","needQuote":true,"needEscape":true,"source":"Gets the date and the time [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] last checked for an application update."},{"pos":[57751,58794],"content":"A [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application can be configured for subscription updates. In this scenario, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] polls an application's deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available. TimeOfLastUpdateCheck returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.Update%2A>, or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method.       If no update check has been performed since the application was installed, TimeOfLastUpdateCheck returns the installation time.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application can be configured for subscription updates.","pos":[0,115],"source":"A [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application can be configured for subscription updates."},{"content":"In this scenario, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> polls an application's deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available.","pos":[116,350],"source":" In this scenario, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] polls an application's deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available."},{"content":"TimeOfLastUpdateCheck returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;, &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;, &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A&gt;, &lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;, or &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt; method.","pos":[351,907],"source":" TimeOfLastUpdateCheck returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.Update%2A>, or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method."},{"content":"If no update check has been performed since the application was installed, TimeOfLastUpdateCheck returns the installation time.","pos":[914,1041]}]},{"pos":[59376,59428],"content":"The <xref:System.DateTime> of the last update check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; of the last update check.","pos":[0,52],"source":"The <xref:System.DateTime> of the last update check."}]},{"pos":[59959,60048],"content":"Starts a synchronous download and installation of the latest version of this application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a synchronous download and installation of the latest version of this application.","pos":[0,89]}]},{"pos":[60061,62581],"content":"An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.       The Update call will block until the update has been downloaded to the client computer and installed into the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] cache; during this time, the application will not be responsive to the user. If you want to maintain application responsiveness or display a progress report during download, use the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method instead.       Update downloads all of the files that are not marked as \"optional\" in the application manifest. You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method.       [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the Update method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>.       If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>. Most of the time, redeploying your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.       An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>. The Update method will never display a prompt asking the user whether they want to grant the application permission to run.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application is considered updated when you publish a new version of the application to the location specified by &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.","pos":[0,355],"source":"An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer."},{"content":"The Update call will block until the update has been downloaded to the client computer and installed into the <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> cache; during this time, the application will not be responsive to the user.","pos":[362,606],"source":"       The Update call will block until the update has been downloaded to the client computer and installed into the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] cache; during this time, the application will not be responsive to the user."},{"content":"If you want to maintain application responsiveness or display a progress report during download, use the &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt; method instead.","pos":[607,801],"source":" If you want to maintain application responsiveness or display a progress report during download, use the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method instead."},{"content":"Update downloads all of the files that are not marked as \"optional\" in the application manifest.","pos":[808,904]},{"content":"You can download optional files on demand by using the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt; or the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt; method.","pos":[905,1139],"source":" You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method."},{"content":"<ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> may already be updating the application automatically when you call the Update method; if that happens, calls to this method will throw an &lt;xref:System.InvalidOperationException&gt;.","pos":[1146,1383],"source":"[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the Update method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>."},{"content":"If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an &lt;xref:System.Deployment.Application.InvalidDeploymentException&gt;.","pos":[1390,1586],"source":"       If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>."},{"content":"Most of the time, redeploying your <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> application solves this problem.","pos":[1587,1712],"source":" Most of the time, redeploying your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application solves this problem."},{"content":"You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.","pos":[1713,1847]},{"content":"An update may request a higher level of trust on the local computer than the previous version of the application.","pos":[1854,1967]},{"content":"If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license.","pos":[1968,2160]},{"content":"If the deployment manifest does not contain a valid trust license, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> stops the installation and throws a &lt;xref:System.Deployment.Application.TrustNotGrantedException&gt;.","pos":[2161,2384],"source":" If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>."},{"content":"The Update method will never display a prompt asking the user whether they want to grant the application permission to run.","pos":[2385,2508]}]},{"pos":[63098,63269],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if an application has been updated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an application has been updated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[63510,63604],"content":"The local computer did not grant the application the permission level it requested to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local computer did not grant the application the permission level it requested to execute.","pos":[0,94]}]},{"pos":[63763,63987],"content":"Your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment is corrupted. For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"Your <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> deployment is corrupted.","pos":[0,87],"source":"Your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment is corrupted."},{"content":"For tips on how to diagnose and correct the problem, see <bpt id=\"p1\">[</bpt>Troubleshooting ClickOnce Deployments<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[88,224],"source":" For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[64148,64224],"content":"The new deployment could not be downloaded from its location on the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new deployment could not be downloaded from its location on the network.","pos":[0,76]}]},{"pos":[64335,64378],"content":"The application is currently being updated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application is currently being updated.","pos":[0,43]}]},{"pos":[64830,64921],"content":"Starts an asynchronous download and installation of the latest version of this application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts an asynchronous download and installation of the latest version of this application.","pos":[0,91]}]},{"pos":[64934,67981],"content":"An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.       While downloading the update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> event handler on the main application thread to inform you of the status of the download. When the asynchronous update finishes or encounters an exception, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event on the main application thread. Examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this event to determine whether the update succeeded.       If UpdateAsync throws an exception, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] calls <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.AsyncCompletedEventArgs> to the exception that was thrown.       UpdateAsync will download all files in a deployment not marked as \"optional\" in the application manifest. You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method.       [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the UpdateAsync method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>.       If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>. Most of the time, rebuilding your application manifest solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.       An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>. UpdateAsync will never display a prompt asking the user if they want to grant the application permission to run.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application is considered updated when you publish a new version of the application to the location specified by &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.","pos":[0,355],"source":"An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer."},{"content":"While downloading the update, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> will raise the &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged&gt; event handler on the main application thread to inform you of the status of the download.","pos":[362,635],"source":"       While downloading the update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> event handler on the main application thread to inform you of the status of the download."},{"content":"When the asynchronous update finishes or encounters an exception, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> will raise the &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt; event on the main application thread.","pos":[636,887],"source":" When the asynchronous update finishes or encounters an exception, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event on the main application thread."},{"content":"Examine the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; supplied to this event to determine whether the update succeeded.","pos":[888,1018],"source":" Examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this event to determine whether the update succeeded."},{"content":"If UpdateAsync throws an exception, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> calls &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt; and sets the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt; property of &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; to the exception that was thrown.","pos":[1025,1373],"source":"       If UpdateAsync throws an exception, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] calls <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.AsyncCompletedEventArgs> to the exception that was thrown."},{"content":"UpdateAsync will download all files in a deployment not marked as \"optional\" in the application manifest.","pos":[1380,1485]},{"content":"You can download optional files on demand by using the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt; or the &lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt; method.","pos":[1486,1720],"source":" You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method."},{"content":"<ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> may already be updating the application automatically when you call the UpdateAsync method; if that happens, calls to this method will throw an &lt;xref:System.InvalidOperationException&gt;.","pos":[1727,1969],"source":"[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the UpdateAsync method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>."},{"content":"If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an &lt;xref:System.Deployment.Application.InvalidDeploymentException&gt;.","pos":[1976,2172],"source":"       If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>."},{"content":"Most of the time, rebuilding your application manifest solves this problem.","pos":[2173,2248]},{"content":"You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.","pos":[2249,2383]},{"content":"An update may request a higher level of trust on the local computer than the previous version of the application.","pos":[2390,2503]},{"content":"If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license.","pos":[2504,2696]},{"content":"If the deployment manifest does not contain a valid trust license, <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> stops the installation and throws a &lt;xref:System.Deployment.Application.TrustNotGrantedException&gt;.","pos":[2697,2920],"source":" If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>."},{"content":"UpdateAsync will never display a prompt asking the user if they want to grant the application permission to run.","pos":[2921,3033]}]},{"pos":[68987,69082],"content":"The local computer did not grant this application the permission level it requested to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local computer did not grant this application the permission level it requested to execute.","pos":[0,95]}]},{"pos":[69241,69465],"content":"Your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment is corrupted. For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"Your <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> deployment is corrupted.","pos":[0,87],"source":"Your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment is corrupted."},{"content":"For tips on how to diagnose and correct the problem, see <bpt id=\"p1\">[</bpt>Troubleshooting ClickOnce Deployments<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[88,224],"source":" For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[69626,69702],"content":"The new deployment could not be downloaded from its location on the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new deployment could not be downloaded from its location on the network.","pos":[0,76]}]},{"pos":[70184,70300],"content":"Cancels an asynchronous update initiated by <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels an asynchronous update initiated by &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*&gt;.","pos":[0,116],"source":"Cancels an asynchronous update initiated by <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*>."}]},{"pos":[70312,70514],"content":"UpdateAsyncCancel only cancels an update initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; it does not cancel an update started as part of a subscription.","needQuote":true,"needEscape":true,"nodes":[{"content":"UpdateAsyncCancel only cancels an update initiated by a call to &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;; it does not cancel an update started as part of a subscription.","pos":[0,202],"source":"UpdateAsyncCancel only cancels an update initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; it does not cancel an update started as part of a subscription."}]},{"pos":[71155,71363],"content":"Occurs when <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> has finished upgrading the application as the result of a call to &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*&gt;.","needQuote":true,"needEscape":true,"source":"Occurs when [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] has finished upgrading the application as the result of a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*>."},{"pos":[71376,72681],"content":"The UpdateCompleted event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.       Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback. If this property is `null`, the installation was successful; if it is not `null`, the installation did not succeed, and you can find more information about this installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. Once the update has been downloaded, you will need to call the <xref:System.Windows.Forms.Application.Restart%2A> method on the <xref:System.Windows.Forms.Application> to use the newer version of the application.       If the installation of the update was canceled by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A>, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> class will be `true`.       To use this event handler, your application must import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces.","needQuote":false,"needEscape":true,"nodes":[{"content":"The UpdateCompleted event is called on the main application thread.","pos":[0,67]},{"content":"You may call your application's Windows Forms controls directly within this callback without triggering an exception.","pos":[68,185]},{"content":"Check the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt; property of the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; supplied to this callback.","pos":[192,359],"source":"       Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback."},{"content":"If this property is <ph id=\"ph1\">`null`</ph>, the installation was successful; if it is not <ph id=\"ph2\">`null`</ph>, the installation did not succeed, and you can find more information about this installation failure through the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt; property.","pos":[360,625],"source":" If this property is `null`, the installation was successful; if it is not `null`, the installation did not succeed, and you can find more information about this installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property."},{"content":"Once the update has been downloaded, you will need to call the &lt;xref:System.Windows.Forms.Application.Restart%2A&gt; method on the &lt;xref:System.Windows.Forms.Application&gt; to use the newer version of the application.","pos":[626,838],"source":" Once the update has been downloaded, you will need to call the <xref:System.Windows.Forms.Application.Restart%2A> method on the <xref:System.Windows.Forms.Application> to use the newer version of the application."},{"content":"If the installation of the update was canceled by a call to &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A&gt;, the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt; property of the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; class will be <ph id=\"ph1\">`true`</ph>.","pos":[845,1146],"source":"       If the installation of the update was canceled by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A>, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> class will be `true`."},{"content":"To use this event handler, your application must import both the &lt;xref:System.Deployment.Application&gt; and &lt;xref:System.ComponentModel&gt; namespaces.","pos":[1153,1299],"source":"       To use this event handler, your application must import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces."}]},{"pos":[73566,73578],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[74118,74182],"content":"Gets the full name of the application after it has been updated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the full name of the application after it has been updated.","pos":[0,64]}]},{"pos":[74313,74383],"content":"A <xref:System.String> that contains the full name of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the full name of the application.","pos":[0,70],"source":"A <xref:System.String> that contains the full name of the application."}]},{"pos":[74955,75015],"content":"Gets the version of the update that was recently downloaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the version of the update that was recently downloaded.","pos":[0,60]}]},{"pos":[75028,75637],"content":"UpdatedVersion differs from <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A> on the <xref:System.Windows.Forms.Application>. If the application's deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.       If the application has not been updated, UpdatedVersion returns the same value as <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"UpdatedVersion differs from <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A> on the <xref:System.Windows.Forms.Application>. If the application's deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.       If the application has not been updated, UpdatedVersion returns the same value as <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>.","pos":[0,607],"nodes":[{"content":"UpdatedVersion differs from &lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A&gt; if a new update has been installed but you have not yet called &lt;xref:System.Windows.Forms.Application.Restart%2A&gt; on the &lt;xref:System.Windows.Forms.Application&gt;.","pos":[0,266],"source":"UpdatedVersion differs from <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A> on the <xref:System.Windows.Forms.Application>."},{"content":"If the application's deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.","pos":[267,441]},{"content":"If the application has not been updated, UpdatedVersion returns the same value as &lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A&gt;.","pos":[448,607],"source":"       If the application has not been updated, UpdatedVersion returns the same value as <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>."}]}]},{"pos":[76188,76251],"content":"The <xref:System.Version> describing the version of the update.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Version&gt; describing the version of the update.","pos":[0,63],"source":"The <xref:System.Version> describing the version of the update."}]},{"pos":[76811,76886],"content":"Gets the Web site or file share from which this application updates itself.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Web site or file share from which this application updates itself.","pos":[0,75]}]},{"pos":[76899,77145],"content":"UpdateLocation may be different from the Web site used to download the application initially if the application's deployment is configured to use update redirection.       This value can be changed only in the application's deployment manifest.","needQuote":false,"needEscape":true,"nodes":[{"content":"UpdateLocation may be different from the Web site used to download the application initially if the application's deployment is configured to use update redirection.       This value can be changed only in the application's deployment manifest.","pos":[0,244],"nodes":[{"content":"UpdateLocation may be different from the Web site used to download the application initially if the application's deployment is configured to use update redirection.","pos":[0,165]},{"content":"This value can be changed only in the application's deployment manifest.","pos":[172,244]}]}]},{"pos":[77259,77358],"content":"The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).","needQuote":true,"needEscape":true,"nodes":[{"content":"The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).","pos":[0,99]}]},{"pos":[77950,78175],"content":"Occurs when <ph id=\"ph1\">[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]</ph> has new status information for an update operation initiated by calling the &lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*&gt; method.","needQuote":true,"needEscape":true,"source":"Occurs when [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] has new status information for an update operation initiated by calling the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*> method."},{"pos":[78187,78378],"content":"The UpdateProgressChanged event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The UpdateProgressChanged event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.","pos":[0,191],"nodes":[{"content":"The UpdateProgressChanged event is called on the main application thread.","pos":[0,73]},{"content":"You may call your application's Windows Forms controls directly within this callback without triggering an exception.","pos":[74,191]}]}]},{"pos":[79063,79075],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Deployment.Application.ApplicationDeployment\n  id: ApplicationDeployment\n  children:\n  - System.Deployment.Application.ApplicationDeployment.ActivationUri\n  - System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate\n  - System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)\n  - System.Deployment.Application.ApplicationDeployment.CheckForUpdate\n  - System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)\n  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync\n  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel\n  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\n  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged\n  - System.Deployment.Application.ApplicationDeployment.CurrentDeployment\n  - System.Deployment.Application.ApplicationDeployment.CurrentVersion\n  - System.Deployment.Application.ApplicationDeployment.DataDirectory\n  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)\n  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)\n  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)\n  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)\n  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted\n  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged\n  - System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)\n  - System.Deployment.Application.ApplicationDeployment.IsFirstRun\n  - System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed\n  - System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck\n  - System.Deployment.Application.ApplicationDeployment.Update\n  - System.Deployment.Application.ApplicationDeployment.UpdateAsync\n  - System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel\n  - System.Deployment.Application.ApplicationDeployment.UpdateCompleted\n  - System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName\n  - System.Deployment.Application.ApplicationDeployment.UpdatedVersion\n  - System.Deployment.Application.ApplicationDeployment.UpdateLocation\n  - System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged\n  langs:\n  - csharp\n  name: ApplicationDeployment\n  nameWithType: ApplicationDeployment\n  fullName: System.Deployment.Application.ApplicationDeployment\n  type: Class\n  summary: Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.\n  remarks: \"You can configure your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application to check for updates and install them automatically through the `subscription` element of the deployment manifest. Some applications, however, need finer control over their updates. You may want to install required updates programmatically, and prompt users to install optional updates at their convenience. By turning off subscription updates in the deployment manifest, you can take complete control of your application's update policies. Alternatively, you can use automatic subscription in conjunction with ApplicationDeployment, which enables [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] to update the application periodically, but uses ApplicationDeployment to download critical updates shortly after they are released.  \\n  \\n You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event on successful completion. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is complete. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.  \\n  \\n You can also use ApplicationDeployment to download large files and assemblies on demand. These files must be marked as \\\"optional\\\" within the deployment's application manifest so that they are not downloaded during installation. You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method. You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class. For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  If you update a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application while the application is running, the user will not see the updates until you call the <xref:System.Windows.Forms.Application.Restart%2A> method of the <xref:System.Windows.Forms.Application>, which will close the current running instance of the application and immediately restart it.  \\n  \\n ApplicationDeployment has no public constructor; you obtain instances of the class within a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application through the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property. You use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to verify that the current application is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application.  \\n  \\n ApplicationDeployment supports checking for updates and downloading updated files asynchronously by using the new [Event-based Asynchronous Pattern Overview](~/add/includes/ajax-current-ext-md.md), which exposes completion callbacks as class events. ApplicationDeployment starts and manages the threads for you, and calls your application back on the correct UI thread. Through this class, you can update without locking up the application, so that the user can continue working while the update installs. If the user must stop all work while an update takes place, consider using the synchronous methods instead.  \\n  \\n> [!NOTE]\\n>  Performing asynchronous updates requires that your application import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces.\"\n  example:\n  - \"The following code example determines at application load time whether a new update is available; if a required update is available, the code example installs the update asynchronously. This code should be added to a form that contains a <xref:System.Windows.Forms.TextBox> named `downloadStatus`.  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/t-system.deployment.appl_4_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public sealed class ApplicationDeployment\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.ActivationUri\n  id: ActivationUri\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: ActivationUri\n  nameWithType: ApplicationDeployment.ActivationUri\n  fullName: System.Deployment.Application.ApplicationDeployment.ActivationUri\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the URL used to launch the deployment manifest of the application.\n  remarks: This property will work in both fully trusted and partially trusted applications.\n  example:\n  - \"The following code shows how to retrieve the URL parameters by using ActivationUri, and how to use the <xref:System.Web.HttpUtility> class to parse the query string safely. Multiple occurrences of the same query string variable are consolidated in one entry of the returned <xref:System.Collections.Specialized.NameValueCollection>.  \\n  \\n [!code-cs[ClickOnceQueryString#1](~/add/codesnippet/csharp/ClickOnceQueryString/Form1.cs#1)]\\n [!code-vb[ClickOnceQueryString#1](~/add/codesnippet/visualbasic/ClickOnceQueryStringVB/Form1.vb#1)]\"\n  syntax:\n    content: public Uri ActivationUri { get; }\n    return:\n      type: System.Uri\n      description: A zero-length string if the `TrustUrlParameters` property in the deployment manifest is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, or if the user has supplied a UNC to open the deployment or has opened it locally. Otherwise, the return value is the full URL used to launch the application, including any parameters.\n  overload: System.Deployment.Application.ApplicationDeployment.ActivationUri*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate\n  id: CheckForDetailedUpdate\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForDetailedUpdate()\n  nameWithType: ApplicationDeployment.CheckForDetailedUpdate()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Performs the same operation as <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*>, but returns extended information about the available update.\n  remarks: The CheckForDetailedUpdate method lets synchronous callers get the same extended information that asynchronous callers get using the <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class.\n  example:\n  - \"The following code example uses CheckForDetailedUpdate to retrieve the information about the latest update. If an update exists, it installs it automatically only if it is a required update; otherwise, it prompts the user.  \\n  \\n [!code-cs[ClickOnceAPI#7](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#7)]\\n [!code-cpp[ClickOnceAPI#7](~/add/codesnippet/cpp/m-system.deployment.appl_4_1.cpp)]\\n [!code-vb[ClickOnceAPI#7](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#7)]\"\n  syntax:\n    content: public System.Deployment.Application.UpdateCheckInfo CheckForDetailedUpdate ();\n    parameters: []\n    return:\n      type: System.Deployment.Application.UpdateCheckInfo\n      description: An <xref href=\"System.Deployment.Application.UpdateCheckInfo\"></xref> for the available update.\n  overload: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current application is either not configured to support updates, or there is another update check operation already in progress.\n  - type: System.Deployment.Application.DeploymentDownloadException\n    commentId: T:System.Deployment.Application.DeploymentDownloadException\n    description: The deployment manifest cannot be downloaded. This exception will appear in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: The deployment manifest is corrupted. Regenerate the application's manifest before you attempt to deploy this application to users. This exception will appear in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)\n  id: CheckForDetailedUpdate(System.Boolean)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForDetailedUpdate(Boolean)\n  nameWithType: ApplicationDeployment.CheckForDetailedUpdate(Boolean)\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(Boolean)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Performs the same operation as <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate*>, but returns extended information about the available update.\n  syntax:\n    content: public System.Deployment.Application.UpdateCheckInfo CheckForDetailedUpdate (bool persistUpdateCheckResult);\n    parameters:\n    - id: persistUpdateCheckResult\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the update will be applied silently and no dialog box will be displayed.\n    return:\n      type: System.Deployment.Application.UpdateCheckInfo\n      description: An <xref href=\"System.Deployment.Application.UpdateCheckInfo\"></xref> for the available update.\n  overload: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate\n  id: CheckForUpdate\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForUpdate()\n  nameWithType: ApplicationDeployment.CheckForUpdate()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdate()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> to determine whether a new update is available.\n  remarks: \"The CheckForUpdate method compares the version of the currently installed deployment with the version specified in the deployment manifest found at <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>. If the version on the server is different from the installed version, it returns `true`.  \\n  \\n This method will block until the check has completed. To check for an update asynchronously, use the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method instead.  \\n  \\n> [!NOTE]\\n>  If CheckForUpdate discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will install it without prompting.)\"\n  example:\n  - \"The following code example checks for an application update; if one is available, it installs it synchronously.  \\n  \\n [!code-cs[ClickOnceAPI#5](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#5)]\\n [!code-cpp[ClickOnceAPI#5](~/add/codesnippet/cpp/m-system.deployment.appl_5_1.cpp)]\\n [!code-vb[ClickOnceAPI#5](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#5)]\"\n  syntax:\n    content: public bool CheckForUpdate ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a new update is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] throws this exception immediately if you call the CheckForUpdate method while an update is already in progress.'\n  - type: System.Deployment.Application.DeploymentDownloadException\n    commentId: T:System.Deployment.Application.DeploymentDownloadException\n    description: The deployment manifest cannot be downloaded.\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)\n  id: CheckForUpdate(System.Boolean)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForUpdate(Boolean)\n  nameWithType: ApplicationDeployment.CheckForUpdate(Boolean)\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdate(Boolean)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> to determine whether a new update is available.\n  syntax:\n    content: public bool CheckForUpdate (bool persistUpdateCheckResult);\n    parameters:\n    - id: persistUpdateCheckResult\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the update will be applied silently and no dialog box will be displayed.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a new update is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync\n  id: CheckForUpdateAsync\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForUpdateAsync()\n  nameWithType: ApplicationDeployment.CheckForUpdateAsync()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Checks <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation*> asynchronously to determine whether a new update is available.\n  remarks: \"CheckForUpdateAsync returns immediately and starts a separate thread for downloading the updated application. When the method completes or is canceled, it raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event. You can use <xref:System.ComponentModel.AsyncCompletedEventArgs> in this event handler to determine whether the operation was canceled, or if an exception was raised during update.  \\n  \\n You can cancel an asynchronous update by calling <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel%2A>.  \\n  \\n> [!NOTE]\\n>  If <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will install it without prompting.)\"\n  example:\n  - \"The following example checks for an update asynchronously, and installs the update if one exists.  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/m-system.deployment.appl_3_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public void CheckForUpdateAsync ();\n    parameters: []\n  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] throws this exception immediately if you call the CheckForUpdateAsync method while an update is already in progress.'\n  - type: System.Deployment.Application.DeploymentDownloadException\n    commentId: T:System.Deployment.Application.DeploymentDownloadException\n    description: The deployment manifest cannot be downloaded. This exception appears in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem. This exception appears in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error*> property of the <xref href=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\"></xref> event.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel\n  id: CheckForUpdateAsyncCancel\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForUpdateAsyncCancel()\n  nameWithType: ApplicationDeployment.CheckForUpdateAsyncCancel()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Cancels the asynchronous update check.\n  remarks: \"Use this method to cancel an update check initiated with the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method.  \\n  \\n This method will not cancel any background update that may already be in progress, such as an update started as part of a subscription. For more information about subscriptions, see [Choosing a ClickOnce Update Strategy](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void CheckForUpdateAsyncCancel ();\n    parameters: []\n  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\n  id: CheckForUpdateCompleted\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForUpdateCompleted\n  nameWithType: ApplicationDeployment.CheckForUpdateCompleted\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\n  type: Event\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Occurs when <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*> has completed.\n  remarks: The <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional.\n  example:\n  - \"The following code example uses CheckForUpdateCompleted to decide whether to ask the user to install the available application update. If the update is a mandatory upgrade, the CheckForUpdateCompleted event handler does not prompt the user. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/e-system.deployment.appl_2_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public event System.Deployment.Application.CheckForUpdateCompletedEventHandler CheckForUpdateCompleted;\n    return:\n      type: System.Deployment.Application.CheckForUpdateCompletedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged\n  id: CheckForUpdateProgressChanged\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CheckForUpdateProgressChanged\n  nameWithType: ApplicationDeployment.CheckForUpdateProgressChanged\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged\n  type: Event\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Occurs when a progress update is available on a <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*> call.\n  remarks: CheckForUpdateProgressChanged reports on the download status of the application's deployment manifest. This can be important information for users who are downloading the deployment over slow network connections.\n  example:\n  - \"The following code example uses the CheckForUpdateProgressChanged event to inform the user how much of the deployment manifest is left to download. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`..  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/d621aa2f-b92e-4e9d-b698-_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public event System.Deployment.Application.DeploymentProgressChangedEventHandler CheckForUpdateProgressChanged;\n    return:\n      type: System.Deployment.Application.DeploymentProgressChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CurrentDeployment\n  id: CurrentDeployment\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CurrentDeployment\n  nameWithType: ApplicationDeployment.CurrentDeployment\n  fullName: System.Deployment.Application.ApplicationDeployment.CurrentDeployment\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Returns the current <xref href=\"System.Deployment.Application.ApplicationDeployment\"></xref> for this deployment.\n  remarks: \"You cannot create instances of <xref:System.Deployment.Application.ApplicationDeployment> directly in your application; you must retrieve a valid instance through the CurrentDeployment property.  \\n  \\n The CurrentDeployment static property is valid only from within an application that was deployed using [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]. Attempts to call this property from non-[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] applications will throw an exception. If you are developing an application that may or may not be deployed using [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)], use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to test whether the current program is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application.\"\n  example:\n  - \"The following code example retrieves CurrentDeployment and checks to determine whether the application has been updated in the past three days.  \\n  \\n [!code-cs[ClickOnceAPI#3](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#3)]\\n [!code-cpp[ClickOnceAPI#3](~/add/codesnippet/cpp/p-system.deployment.appl_12_1.cpp)]\\n [!code-vb[ClickOnceAPI#3](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#3)]\"\n  syntax:\n    content: public static System.Deployment.Application.ApplicationDeployment CurrentDeployment { get; }\n    return:\n      type: System.Deployment.Application.ApplicationDeployment\n      description: The current deployment.\n  overload: System.Deployment.Application.ApplicationDeployment.CurrentDeployment*\n  exceptions:\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: You attempted to call this static property from a non-[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.CurrentVersion\n  id: CurrentVersion\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: CurrentVersion\n  nameWithType: ApplicationDeployment.CurrentVersion\n  fullName: System.Deployment.Application.ApplicationDeployment.CurrentVersion\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the version of the deployment for the current running instance of the application.\n  remarks: CurrentVersion will differ from <xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A>. If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.\n  example:\n  - \"The following code example defines a method that determines whether [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] has updated the application.  \\n  \\n [!code-cs[ClickOnceAPI#3](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#3)]\\n [!code-cpp[ClickOnceAPI#3](~/add/codesnippet/cpp/p-system.deployment.appl_7_1.cpp)]\\n [!code-vb[ClickOnceAPI#3](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#3)]\"\n  syntax:\n    content: public Version CurrentVersion { get; }\n    return:\n      type: System.Version\n      description: The current deployment version.\n  overload: System.Deployment.Application.ApplicationDeployment.CurrentVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DataDirectory\n  id: DataDirectory\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DataDirectory\n  nameWithType: ApplicationDeployment.DataDirectory\n  fullName: System.Deployment.Application.ApplicationDeployment.DataDirectory\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the path to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] data directory.\n  syntax:\n    content: public string DataDirectory { get; }\n    return:\n      type: System.String\n      description: A string containing the path to the application's data directory on the local disk.\n  overload: System.Deployment.Application.ApplicationDeployment.DataDirectory*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)\n  id: DownloadFileGroup(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DownloadFileGroup(String)\n  nameWithType: ApplicationDeployment.DownloadFileGroup(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(String)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Downloads a set of optional files on demand.\n  remarks: \"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \\\"optional\\\" in the application manifest are not downloaded during initialization or update. You can use the DownloadFileGroup method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.  \\n  \\n To use an assembly you have downloaded with DownloadFileGroup, you attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>. For an example, see =[Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](~/add/includes/ajax-current-ext-md.md).  \\n  \\n All files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application cache and are therefore isolated to the current version of the application. Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing data files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md).  \\n  \\n DownloadFileGroup works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission. However, if you attempt to load assemblies dynamically, your application will require full trust.  \\n  \\n On-demand downloading of data files is currently not supported.  \\n  \\n Your application will not be responsive to user input until the DownloadFileGroup method returns. If you need to download files without interrupting the user's workflow, use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method instead.  \\n  \\n You cannot download a single file by its file name alone. To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment and download the group using this method.\"\n  example:\n  - \"The following code example demonstrates how to load an assembly on demand by listening for the <xref:System.AppDomain.AssemblyResolve> event.  \\n  \\n [!code-cs[ClickOnceOnDemandCmdLine#2](~/add/codesnippet/csharp/6f3e5fcc-9a7b-4ff6-a5e4-_1.cs)]\"\n  syntax:\n    content: public void DownloadFileGroup (string groupName);\n    parameters:\n    - id: groupName\n      type: System.String\n      description: The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.\n  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>groupName</code> parameter is null or zero-length.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)\n  id: DownloadFileGroupAsync(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DownloadFileGroupAsync(String)\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(String)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Downloads, on demand, a set of optional files in the background.\n  remarks: \"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \\\"optional\\\" in the application manifest are not downloaded during initialization or update. You can use the DownloadFileGroupAsync method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.  \\n  \\n To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>. For an example, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API](~/add/includes/ajax-current-ext-md.md).  \\n  \\n All assemblies are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application cache.  \\n  \\n All static files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application. Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can download multiple file groups simultaneously using <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A>. You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event. If you need to pass more complex state, you can use <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> to pass in a `state` object.  \\n  \\n <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.  \\n  \\n On-demand downloading of data files is currently not supported.  \\n  \\n You cannot download a single file by its file name alone. To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment and download the group using this method.  \\n  \\n To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method.\"\n  syntax:\n    content: public void DownloadFileGroupAsync (string groupName);\n    parameters:\n    - id: groupName\n      type: System.String\n      description: The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.\n  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>groupName</code> parameter is null or zero-length.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: You cannot initiate more than one download of <code>groupName</code> at a time.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)\n  id: DownloadFileGroupAsync(System.String,System.Object)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DownloadFileGroupAsync(String,Object)\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String,Object)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(String,Object)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.\n  remarks: \"In a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application, the files marked \\\"optional\\\" in the application manifest are not downloaded during initialization or update. You can use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it. To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>.  \\n  \\n You can download multiple file groups simultaneously by using the DownloadFileGroupAsync method. You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event. If you need to pass a more complex state, you can use  \\n  \\n DownloadFileGroupAsync to pass in a `state` object.  \\n  \\n All static files are downloaded to the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application. For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md). . Let's say that after an application downloads a file group, the user installs a new version of the application, but later  user reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded.  \\n  \\n <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.  \\n  \\n On-demand downloading of data files is currently not supported.  \\n  \\n To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method.\"\n  syntax:\n    content: public void DownloadFileGroupAsync (string groupName, object userState);\n    parameters:\n    - id: groupName\n      type: System.String\n      description: The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.\n    - id: userState\n      type: System.Object\n      description: An arbitrary object containing state information for the asynchronous operation.\n  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>groupName</code> parameter is null or zero-length.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: You cannot initiate more than one download of <code>groupName</code> at a time.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)\n  id: DownloadFileGroupAsyncCancel(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DownloadFileGroupAsyncCancel(String)\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsyncCancel(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(String)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Cancels an asynchronous file download.\n  syntax:\n    content: public void DownloadFileGroupAsyncCancel (string groupName);\n    parameters:\n    - id: groupName\n      type: System.String\n      description: The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.\n  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>groupName</code> cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted\n  id: DownloadFileGroupCompleted\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DownloadFileGroupCompleted\n  nameWithType: ApplicationDeployment.DownloadFileGroupCompleted\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted\n  type: Event\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Occurs on the main application thread when a file download is complete.\n  remarks: \"The DownloadFileGroupCompleted event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.  \\n  \\n Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback. If this property is `null`, the download was successful; if it is not `null`, the installation did not succeed, and you can find more information about the installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property.\"\n  example:\n  - \"The following code example downloads a group of Help files in the background. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`..  \\n  \\n [!code-cs[ClickOnceAPI#8](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#8)]\\n [!code-cpp[ClickOnceAPI#8](~/add/codesnippet/cpp/d8c90486-6b41-4c55-b911-_1.cpp)]\\n [!code-vb[ClickOnceAPI#8](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#8)]\"\n  syntax:\n    content: public event System.Deployment.Application.DownloadFileGroupCompletedEventHandler DownloadFileGroupCompleted;\n    return:\n      type: System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged\n  id: DownloadFileGroupProgressChanged\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: DownloadFileGroupProgressChanged\n  nameWithType: ApplicationDeployment.DownloadFileGroupProgressChanged\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged\n  type: Event\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Occurs when status information is available on a file download operation initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*>.\n  remarks: \"The DownloadFileGroupProgressChanged event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.  \\n  \\n Use the information supplied in <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> to communicate progress information to your users.\"\n  example:\n  - \"The following code example downloads a group of Help files in the background. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \\n  \\n [!code-cs[ClickOnceAPI#8](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#8)]\\n [!code-cpp[ClickOnceAPI#8](~/add/codesnippet/cpp/dd149587-df74-4c6a-9251-_1.cpp)]\\n [!code-vb[ClickOnceAPI#8](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#8)]\"\n  syntax:\n    content: public event System.Deployment.Application.DeploymentProgressChangedEventHandler DownloadFileGroupProgressChanged;\n    return:\n      type: System.Deployment.Application.DeploymentProgressChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)\n  id: IsFileGroupDownloaded(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: IsFileGroupDownloaded(String)\n  nameWithType: ApplicationDeployment.IsFileGroupDownloaded(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(String)\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Checks whether the named file group has already been downloaded to the client computer.\n  remarks: \"IsFileGroupDownloaded works in a partially trusted application without any security demands.  \\n  \\n When you update an application, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] copies any on-demand data files from the previous version into the new version's data directory. If you download a new version of these files, you should remove any data you want to keep from the old version and move it into the new version.\"\n  example:\n  - \"The following code example downloads all of the files in the `HelpFiles` group to disk.  \\n  \\n [!code-cs[ClickOnceAPI#8](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#8)]\\n [!code-cpp[ClickOnceAPI#8](~/add/codesnippet/cpp/ff7c4993-a9b0-4966-b9a0-_1.cpp)]\\n [!code-vb[ClickOnceAPI#8](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#8)]\"\n  syntax:\n    content: public bool IsFileGroupDownloaded (string groupName);\n    parameters:\n    - id: groupName\n      type: System.String\n      description: The named group of files to download. All files marked \"optional\" in a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application require a group name.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file group has already been downloaded for the current version of this application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, IsFileGroupDownloaded returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded*\n  exceptions:\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: <code>groupName</code> is not a file group defined in the application manifest.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.IsFirstRun\n  id: IsFirstRun\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: IsFirstRun\n  nameWithType: ApplicationDeployment.IsFirstRun\n  fullName: System.Deployment.Application.ApplicationDeployment.IsFirstRun\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets a value indicating whether this is the first time this application has run on the client computer.\n  remarks: \"Use IsFirstRun to determine whether you need to perform any one-time initialization operations the first time your application runs.  \\n  \\n Do not assume that a IsFirstRun setting of `true` indicates that this instance of an application is the first one to show its user interface to the user. Due to the way the system schedules processes, one instance of the application may have its IsFirstRun property set to `true`, but another instance may be the first to render on the screen. The value of this property is reset whenever the user upgrades from one version to the next. If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using **Application Settings**.\"\n  example:\n  - \"The following code example uses IsFirstRun to decide whether to check for an update to the file group `HelpFiles`. If one or more of the files have been updated, it calls <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> to obtain the new versions.  \\n  \\n [!code-cs[ClickOnceAPI#9](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#9)]\\n [!code-vb[ClickOnceAPI#9](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#9)]\"\n  syntax:\n    content: public bool IsFirstRun { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this version of the application has never run on the client computer before; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Deployment.Application.ApplicationDeployment.IsFirstRun*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed\n  id: IsNetworkDeployed\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: IsNetworkDeployed\n  nameWithType: ApplicationDeployment.IsNetworkDeployed\n  fullName: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets a value indicating whether the current application is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application.\n  remarks: \"If you want your application to run both inside and outside of a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment (for example, if you need to debug your application on the local computer before deploying it), test IsNetworkDeployed before accessing the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property.  \\n  \\n IsNetworkDeployed will return `true` regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM.\"\n  example:\n  - \"The following code example retrieves <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> by using IsNetworkDeployed first to ensure that the reference is not `null`.  \\n  \\n [!code-cs[ClickOnceAPI#2](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#2)]\\n [!code-cpp[ClickOnceAPI#2](~/add/codesnippet/cpp/p-system.deployment.appl_0_1.cpp)]\"\n  syntax:\n    content: public static bool IsNetworkDeployed { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this is a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck\n  id: TimeOfLastUpdateCheck\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: TimeOfLastUpdateCheck\n  nameWithType: ApplicationDeployment.TimeOfLastUpdateCheck\n  fullName: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the date and the time [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] last checked for an application update.\n  remarks: \"A [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application can be configured for subscription updates. In this scenario, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] polls an application's deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available. TimeOfLastUpdateCheck returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.Update%2A>, or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method.  \\n  \\n If no update check has been performed since the application was installed, TimeOfLastUpdateCheck returns the installation time.\"\n  example:\n  - \"The following code example checks whether a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application has been checked for available updates in the past three days.  \\n  \\n [!code-cs[ClickOnceAPI#3](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#3)]\\n [!code-cpp[ClickOnceAPI#3](~/add/codesnippet/cpp/p-system.deployment.appl_8_1.cpp)]\\n [!code-vb[ClickOnceAPI#3](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#3)]\"\n  syntax:\n    content: public DateTime TimeOfLastUpdateCheck { get; }\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> of the last update check.\n  overload: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.Update\n  id: Update\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: Update()\n  nameWithType: ApplicationDeployment.Update()\n  fullName: System.Deployment.Application.ApplicationDeployment.Update()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Starts a synchronous download and installation of the latest version of this application.\n  remarks: \"An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.  \\n  \\n The Update call will block until the update has been downloaded to the client computer and installed into the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] cache; during this time, the application will not be responsive to the user. If you want to maintain application responsiveness or display a progress report during download, use the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method instead.  \\n  \\n Update downloads all of the files that are not marked as \\\"optional\\\" in the application manifest. You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method.  \\n  \\n [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the Update method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>.  \\n  \\n If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>. Most of the time, redeploying your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.  \\n  \\n An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>. The Update method will never display a prompt asking the user whether they want to grant the application permission to run.\"\n  example:\n  - \"The following code example checks for an application update; if an update is available, it installs it synchronously.  \\n  \\n [!code-cs[ClickOnceAPI#6](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#6)]\\n [!code-cpp[ClickOnceAPI#6](~/add/codesnippet/cpp/m-system.deployment.appl_6_1.cpp)]\\n [!code-vb[ClickOnceAPI#6](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#6)]\"\n  syntax:\n    content: public bool Update ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an application has been updated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Deployment.Application.ApplicationDeployment.Update*\n  exceptions:\n  - type: System.Deployment.Application.TrustNotGrantedException\n    commentId: T:System.Deployment.Application.TrustNotGrantedException\n    description: The local computer did not grant the application the permission level it requested to execute.\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: Your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment is corrupted. For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](~/add/includes/ajax-current-ext-md.md).\n  - type: System.Deployment.Application.DeploymentDownloadException\n    commentId: T:System.Deployment.Application.DeploymentDownloadException\n    description: The new deployment could not be downloaded from its location on the network.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The application is currently being updated.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsync\n  id: UpdateAsync\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdateAsync()\n  nameWithType: ApplicationDeployment.UpdateAsync()\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateAsync()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Starts an asynchronous download and installation of the latest version of this application.\n  remarks: \"An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.  \\n  \\n While downloading the update, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> event handler on the main application thread to inform you of the status of the download. When the asynchronous update finishes or encounters an exception, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event on the main application thread. Examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this event to determine whether the update succeeded.  \\n  \\n If UpdateAsync throws an exception, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] calls <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.AsyncCompletedEventArgs> to the exception that was thrown.  \\n  \\n UpdateAsync will download all files in a deployment not marked as \\\"optional\\\" in the application manifest. You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method.  \\n  \\n [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the UpdateAsync method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>.  \\n  \\n If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>. Most of the time, rebuilding your application manifest solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.  \\n  \\n An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>. UpdateAsync will never display a prompt asking the user if they want to grant the application permission to run.\"\n  example:\n  - \"The following code example determines whether a new update is available at application load time; if a required update is available, it installs the update asynchronously. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/m-system.deployment.appl_2_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public void UpdateAsync ();\n    parameters: []\n  overload: System.Deployment.Application.ApplicationDeployment.UpdateAsync*\n  exceptions:\n  - type: System.Deployment.Application.TrustNotGrantedException\n    commentId: T:System.Deployment.Application.TrustNotGrantedException\n    description: The local computer did not grant this application the permission level it requested to execute.\n  - type: System.Deployment.Application.InvalidDeploymentException\n    commentId: T:System.Deployment.Application.InvalidDeploymentException\n    description: Your [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment is corrupted. For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](~/add/includes/ajax-current-ext-md.md).\n  - type: System.Deployment.Application.DeploymentDownloadException\n    commentId: T:System.Deployment.Application.DeploymentDownloadException\n    description: The new deployment could not be downloaded from its location on the network.\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel\n  id: UpdateAsyncCancel\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdateAsyncCancel()\n  nameWithType: ApplicationDeployment.UpdateAsyncCancel()\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel()\n  type: Method\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Cancels an asynchronous update initiated by <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*>.\n  remarks: UpdateAsyncCancel only cancels an update initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; it does not cancel an update started as part of a subscription.\n  syntax:\n    content: public void UpdateAsyncCancel ();\n    parameters: []\n  overload: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateCompleted\n  id: UpdateCompleted\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdateCompleted\n  nameWithType: ApplicationDeployment.UpdateCompleted\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateCompleted\n  type: Event\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Occurs when [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] has finished upgrading the application as the result of a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*>.\n  remarks: \"The UpdateCompleted event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.  \\n  \\n Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback. If this property is `null`, the installation was successful; if it is not `null`, the installation did not succeed, and you can find more information about this installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. Once the update has been downloaded, you will need to call the <xref:System.Windows.Forms.Application.Restart%2A> method on the <xref:System.Windows.Forms.Application> to use the newer version of the application.  \\n  \\n If the installation of the update was canceled by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A>, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> class will be `true`.  \\n  \\n To use this event handler, your application must import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces.\"\n  example:\n  - \"The following code example determines at application load time whether a new update is available; if a required update is available, it installs the update asynchronously. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/e-system.deployment.appl_3_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public event System.ComponentModel.AsyncCompletedEventHandler UpdateCompleted;\n    return:\n      type: System.ComponentModel.AsyncCompletedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName\n  id: UpdatedApplicationFullName\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdatedApplicationFullName\n  nameWithType: ApplicationDeployment.UpdatedApplicationFullName\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the full name of the application after it has been updated.\n  syntax:\n    content: public string UpdatedApplicationFullName { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the full name of the application.\n  overload: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdatedVersion\n  id: UpdatedVersion\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdatedVersion\n  nameWithType: ApplicationDeployment.UpdatedVersion\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdatedVersion\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the version of the update that was recently downloaded.\n  remarks: \"UpdatedVersion differs from <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A> on the <xref:System.Windows.Forms.Application>. If the application's deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.  \\n  \\n If the application has not been updated, UpdatedVersion returns the same value as <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>.\"\n  example:\n  - \"The following code example defines a method that determines whether [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] has updated the application.  \\n  \\n [!code-cs[ClickOnceAPI#4](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#4)]\\n [!code-cpp[ClickOnceAPI#4](~/add/codesnippet/cpp/p-system.deployment.appl_5_1.cpp)]\\n [!code-vb[ClickOnceAPI#4](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#4)]\"\n  syntax:\n    content: public Version UpdatedVersion { get; }\n    return:\n      type: System.Version\n      description: The <xref:System.Version> describing the version of the update.\n  overload: System.Deployment.Application.ApplicationDeployment.UpdatedVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateLocation\n  id: UpdateLocation\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdateLocation\n  nameWithType: ApplicationDeployment.UpdateLocation\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateLocation\n  type: Property\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Gets the Web site or file share from which this application updates itself.\n  remarks: \"UpdateLocation may be different from the Web site used to download the application initially if the application's deployment is configured to use update redirection.  \\n  \\n This value can be changed only in the application's deployment manifest.\"\n  syntax:\n    content: public Uri UpdateLocation { get; }\n    return:\n      type: System.Uri\n      description: The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).\n  overload: System.Deployment.Application.ApplicationDeployment.UpdateLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged\n  id: UpdateProgressChanged\n  parent: System.Deployment.Application.ApplicationDeployment\n  langs:\n  - csharp\n  name: UpdateProgressChanged\n  nameWithType: ApplicationDeployment.UpdateProgressChanged\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged\n  type: Event\n  assemblies:\n  - System.Deployment\n  namespace: System.Deployment.Application\n  summary: Occurs when [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] has new status information for an update operation initiated by calling the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync*> method.\n  remarks: The UpdateProgressChanged event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.\n  example:\n  - \"The following code example determines at application load time whether a new update is available; if a required update is available, it installs the update asynchronously.  \\n  \\n [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]\\n [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/e-system.deployment.appl_1_1.cpp)]\\n [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]\"\n  syntax:\n    content: public event System.Deployment.Application.DeploymentProgressChangedEventHandler UpdateProgressChanged;\n    return:\n      type: System.Deployment.Application.DeploymentProgressChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Deployment.Application.DeploymentDownloadException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentDownloadException\n  nameWithType: DeploymentDownloadException\n  fullName: System.Deployment.Application.DeploymentDownloadException\n- uid: System.Deployment.Application.InvalidDeploymentException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: InvalidDeploymentException\n  nameWithType: InvalidDeploymentException\n  fullName: System.Deployment.Application.InvalidDeploymentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Deployment.Application.TrustNotGrantedException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: TrustNotGrantedException\n  nameWithType: TrustNotGrantedException\n  fullName: System.Deployment.Application.TrustNotGrantedException\n- uid: System.Deployment.Application.ApplicationDeployment.ActivationUri\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: ActivationUri\n  nameWithType: ApplicationDeployment.ActivationUri\n  fullName: System.Deployment.Application.ApplicationDeployment.ActivationUri\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForDetailedUpdate()\n  nameWithType: ApplicationDeployment.CheckForDetailedUpdate()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate()\n- uid: System.Deployment.Application.UpdateCheckInfo\n  parent: System.Deployment.Application\n  isExternal: false\n  name: UpdateCheckInfo\n  nameWithType: UpdateCheckInfo\n  fullName: System.Deployment.Application.UpdateCheckInfo\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForDetailedUpdate(Boolean)\n  nameWithType: ApplicationDeployment.CheckForDetailedUpdate(Boolean)\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdate()\n  nameWithType: ApplicationDeployment.CheckForUpdate()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdate()\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdate(Boolean)\n  nameWithType: ApplicationDeployment.CheckForUpdate(Boolean)\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdate(Boolean)\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdateAsync()\n  nameWithType: ApplicationDeployment.CheckForUpdateAsync()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync()\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdateAsyncCancel()\n  nameWithType: ApplicationDeployment.CheckForUpdateAsyncCancel()\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel()\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdateCompleted\n  nameWithType: ApplicationDeployment.CheckForUpdateCompleted\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\n- uid: System.Deployment.Application.CheckForUpdateCompletedEventHandler\n  parent: System.Deployment.Application\n  isExternal: false\n  name: CheckForUpdateCompletedEventHandler\n  nameWithType: CheckForUpdateCompletedEventHandler\n  fullName: System.Deployment.Application.CheckForUpdateCompletedEventHandler\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdateProgressChanged\n  nameWithType: ApplicationDeployment.CheckForUpdateProgressChanged\n  fullName: System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged\n- uid: System.Deployment.Application.DeploymentProgressChangedEventHandler\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentProgressChangedEventHandler\n  nameWithType: DeploymentProgressChangedEventHandler\n  fullName: System.Deployment.Application.DeploymentProgressChangedEventHandler\n- uid: System.Deployment.Application.ApplicationDeployment.CurrentDeployment\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CurrentDeployment\n  nameWithType: ApplicationDeployment.CurrentDeployment\n  fullName: System.Deployment.Application.ApplicationDeployment.CurrentDeployment\n- uid: System.Deployment.Application.ApplicationDeployment\n  parent: System.Deployment.Application\n  isExternal: false\n  name: ApplicationDeployment\n  nameWithType: ApplicationDeployment\n  fullName: System.Deployment.Application.ApplicationDeployment\n- uid: System.Deployment.Application.ApplicationDeployment.CurrentVersion\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CurrentVersion\n  nameWithType: ApplicationDeployment.CurrentVersion\n  fullName: System.Deployment.Application.ApplicationDeployment.CurrentVersion\n- uid: System.Version\n  parent: System\n  isExternal: true\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.Deployment.Application.ApplicationDeployment.DataDirectory\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DataDirectory\n  nameWithType: ApplicationDeployment.DataDirectory\n  fullName: System.Deployment.Application.ApplicationDeployment.DataDirectory\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroup(String)\n  nameWithType: ApplicationDeployment.DownloadFileGroup(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(String)\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupAsync(String)\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(String)\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupAsync(String,Object)\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String,Object)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(String,Object)\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupAsyncCancel(String)\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsyncCancel(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(String)\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupCompleted\n  nameWithType: ApplicationDeployment.DownloadFileGroupCompleted\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted\n- uid: System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DownloadFileGroupCompletedEventHandler\n  nameWithType: DownloadFileGroupCompletedEventHandler\n  fullName: System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupProgressChanged\n  nameWithType: ApplicationDeployment.DownloadFileGroupProgressChanged\n  fullName: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged\n- uid: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: IsFileGroupDownloaded(String)\n  nameWithType: ApplicationDeployment.IsFileGroupDownloaded(String)\n  fullName: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(String)\n- uid: System.Deployment.Application.ApplicationDeployment.IsFirstRun\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: IsFirstRun\n  nameWithType: ApplicationDeployment.IsFirstRun\n  fullName: System.Deployment.Application.ApplicationDeployment.IsFirstRun\n- uid: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: IsNetworkDeployed\n  nameWithType: ApplicationDeployment.IsNetworkDeployed\n  fullName: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed\n- uid: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: TimeOfLastUpdateCheck\n  nameWithType: ApplicationDeployment.TimeOfLastUpdateCheck\n  fullName: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Deployment.Application.ApplicationDeployment.Update\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: Update()\n  nameWithType: ApplicationDeployment.Update()\n  fullName: System.Deployment.Application.ApplicationDeployment.Update()\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsync\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateAsync()\n  nameWithType: ApplicationDeployment.UpdateAsync()\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateAsync()\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateAsyncCancel()\n  nameWithType: ApplicationDeployment.UpdateAsyncCancel()\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel()\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateCompleted\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateCompleted\n  nameWithType: ApplicationDeployment.UpdateCompleted\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateCompleted\n- uid: System.ComponentModel.AsyncCompletedEventHandler\n  parent: System.ComponentModel\n  isExternal: true\n  name: AsyncCompletedEventHandler\n  nameWithType: AsyncCompletedEventHandler\n  fullName: System.ComponentModel.AsyncCompletedEventHandler\n- uid: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdatedApplicationFullName\n  nameWithType: ApplicationDeployment.UpdatedApplicationFullName\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName\n- uid: System.Deployment.Application.ApplicationDeployment.UpdatedVersion\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdatedVersion\n  nameWithType: ApplicationDeployment.UpdatedVersion\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdatedVersion\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateLocation\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateLocation\n  nameWithType: ApplicationDeployment.UpdateLocation\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateLocation\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateProgressChanged\n  nameWithType: ApplicationDeployment.UpdateProgressChanged\n  fullName: System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged\n- uid: System.Deployment.Application.ApplicationDeployment.ActivationUri*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: ActivationUri\n  nameWithType: ApplicationDeployment.ActivationUri\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForDetailedUpdate\n  nameWithType: ApplicationDeployment.CheckForDetailedUpdate\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdate\n  nameWithType: ApplicationDeployment.CheckForUpdate\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdateAsync\n  nameWithType: ApplicationDeployment.CheckForUpdateAsync\n- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CheckForUpdateAsyncCancel\n  nameWithType: ApplicationDeployment.CheckForUpdateAsyncCancel\n- uid: System.Deployment.Application.ApplicationDeployment.CurrentDeployment*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CurrentDeployment\n  nameWithType: ApplicationDeployment.CurrentDeployment\n- uid: System.Deployment.Application.ApplicationDeployment.CurrentVersion*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: CurrentVersion\n  nameWithType: ApplicationDeployment.CurrentVersion\n- uid: System.Deployment.Application.ApplicationDeployment.DataDirectory*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DataDirectory\n  nameWithType: ApplicationDeployment.DataDirectory\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroup\n  nameWithType: ApplicationDeployment.DownloadFileGroup\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupAsync\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsync\n- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: DownloadFileGroupAsyncCancel\n  nameWithType: ApplicationDeployment.DownloadFileGroupAsyncCancel\n- uid: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: IsFileGroupDownloaded\n  nameWithType: ApplicationDeployment.IsFileGroupDownloaded\n- uid: System.Deployment.Application.ApplicationDeployment.IsFirstRun*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: IsFirstRun\n  nameWithType: ApplicationDeployment.IsFirstRun\n- uid: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: IsNetworkDeployed\n  nameWithType: ApplicationDeployment.IsNetworkDeployed\n- uid: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: TimeOfLastUpdateCheck\n  nameWithType: ApplicationDeployment.TimeOfLastUpdateCheck\n- uid: System.Deployment.Application.ApplicationDeployment.Update*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: Update\n  nameWithType: ApplicationDeployment.Update\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsync*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateAsync\n  nameWithType: ApplicationDeployment.UpdateAsync\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateAsyncCancel\n  nameWithType: ApplicationDeployment.UpdateAsyncCancel\n- uid: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdatedApplicationFullName\n  nameWithType: ApplicationDeployment.UpdatedApplicationFullName\n- uid: System.Deployment.Application.ApplicationDeployment.UpdatedVersion*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdatedVersion\n  nameWithType: ApplicationDeployment.UpdatedVersion\n- uid: System.Deployment.Application.ApplicationDeployment.UpdateLocation*\n  parent: System.Deployment.Application.ApplicationDeployment\n  isExternal: false\n  name: UpdateLocation\n  nameWithType: ApplicationDeployment.UpdateLocation\n"}