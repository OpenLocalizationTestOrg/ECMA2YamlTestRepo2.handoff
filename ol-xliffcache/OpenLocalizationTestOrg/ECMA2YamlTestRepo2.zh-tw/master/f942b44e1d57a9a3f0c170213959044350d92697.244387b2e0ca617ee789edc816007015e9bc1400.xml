{"nodes":[{"pos":[407,489],"content":"Provides a safe handle that represents a memory-mapped file for sequential access.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a safe handle that represents a memory-mapped file for sequential access.","pos":[0,82]}]},{"pos":[502,1189],"content":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle%2A?displayProperty=fullName> property to obtain the safe handle.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle%2A?displayProperty=fullName&gt; property to obtain the safe handle.","pos":[0,150],"source":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle%2A?displayProperty=fullName> property to obtain the safe handle."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[156,235],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[236,330]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[331,442],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[443,550],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[551,684],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2264,2276],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  id: SafeMemoryMappedFileHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeMemoryMappedFileHandle\n  nameWithType: SafeMemoryMappedFileHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  type: Class\n  summary: Provides a safe handle that represents a memory-mapped file for sequential access.\n  remarks: \"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle%2A?displayProperty=fullName> property to obtain the safe handle.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]\n\n      public sealed class SafeMemoryMappedFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  implements: []\n  inheritedMembers:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeMemoryMappedFileHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeMemoryMappedFileHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeMemoryMappedFileHandle.ReleaseHandle\n"}