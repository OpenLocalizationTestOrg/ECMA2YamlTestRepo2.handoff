{"nodes":[{"pos":[4015,4027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4801,4813],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5864,5876],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5974,5986],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6631,6643],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6697,6709],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7244,7256],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7805,7817],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8793,8805],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8913,8925],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9956,9968],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10928,10940],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11048,11060],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12323,12335],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12448,12460],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12568,12580],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14147,14159],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14277,14289],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14406,14418],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14526,14538],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15078,15090],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15646,15658],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16702,16714],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16794,16806],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18164,18176],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18275,18287],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18385,18397],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19386,19398],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19460,19472],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19526,19538],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20850,20862],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20975,20987],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21041,21053],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21161,21173],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22196,22208],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22326,22338],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23957,23969],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24577,24589],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25558,25570],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25678,25690],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26271,26283],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27236,27248],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27356,27368],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27975,27987],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28636,28648],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28702,28714],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29751,29763],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30659,30671],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31717,31729],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31811,31823],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33164,33176],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33258,33270],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33383,33395],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35028,35040],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35122,35134],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35247,35259],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35371,35383],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[36095,36107],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37015,37027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.IList`1\n  id: IList`1\n  children:\n  - Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IList`1.back\n  - Microsoft.VisualC.StlClr.IList`1.back_item\n  - Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.clear\n  - Microsoft.VisualC.StlClr.IList`1.empty\n  - Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.front\n  - Microsoft.VisualC.StlClr.IList`1.front_item\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  - Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  - Microsoft.VisualC.StlClr.IList`1.pop_back\n  - Microsoft.VisualC.StlClr.IList`1.pop_front\n  - Microsoft.VisualC.StlClr.IList`1.push_back(`0)\n  - Microsoft.VisualC.StlClr.IList`1.push_front(`0)\n  - Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.remove(`0)\n  - Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)\n  - Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IList`1.reverse\n  - Microsoft.VisualC.StlClr.IList`1.size\n  - Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList`1)\n  - Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  langs:\n  - csharp\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n  type: Interface\n  syntax:\n    content: 'public interface IList<TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>, System.Collections.ICollection'\n    typeParameters:\n    - id: TValue\n      description: To be added.\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>\n  - System.Collections.ICollection\n  - System.ICloneable\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)\n  id: assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: assign(IEnumerable)\n  nameWithType: IList<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)\n  id: assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: assign(Int32,TValue)\n  nameWithType: IList<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (int _Count, TValue _Val);\n    parameters:\n    - id: _Count\n      type: System.Int32\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.back\n  id: back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: back()\n  nameWithType: IList<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back ();\n    parameters: []\n    return:\n      type: TValue@\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.back*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.back_item\n  id: back_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: back_item\n  nameWithType: IList<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back_item { get; set; }\n    return:\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.back_item*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: begin(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.begin*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.clear\n  id: clear\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: clear()\n  nameWithType: IList<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.clear()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void clear ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IList`1.clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.empty\n  id: empty\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: empty()\n  nameWithType: IList<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.empty()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public bool empty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.empty*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: end(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.end*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: To be added.\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.erase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last_iter);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: To be added.\n    - id: _First_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Last_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.erase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.front\n  id: front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: front()\n  nameWithType: IList<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front ();\n    parameters: []\n    return:\n      type: TValue@\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.front*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.front_item\n  id: front_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: front_item\n  nameWithType: IList<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front_item { get; set; }\n    return:\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.front_item*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator,IEnumerable)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where_iter, System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Where_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator,Int32,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, int _Count, TValue _Val);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Count\n      type: System.Int32\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, TValue _Val);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: To be added.\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  id: merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void merge (Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: To be added.\n    - id: _Pred\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_back\n  id: pop_back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: pop_back()\n  nameWithType: IList<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_back ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IList`1.pop_back*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_front\n  id: pop_front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: pop_front()\n  nameWithType: IList<TValue>.pop_front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_front ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IList`1.pop_front*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.push_back(`0)\n  id: push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: push_back(TValue)\n  nameWithType: IList<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_back(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_back (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.push_back*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.push_front(`0)\n  id: push_front(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: push_front(TValue)\n  nameWithType: IList<TValue>.push_front(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_front(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_front (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.push_front*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: rbegin(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.rbegin*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.remove(`0)\n  id: remove(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: remove(TValue)\n  nameWithType: IList<TValue>.remove(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.remove(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void remove (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: rend(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.rend*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)\n  id: resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: resize(Int32)\n  nameWithType: IList<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.resize*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)\n  id: resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: resize(Int32,TValue)\n  nameWithType: IList<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize, TValue _Val);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.resize*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.reverse\n  id: reverse\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: reverse()\n  nameWithType: IList<TValue>.reverse()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.reverse()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void reverse ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IList`1.reverse*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.size\n  id: size\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: size()\n  nameWithType: IList<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.size()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int size ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.size*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  id: sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: sort(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void sort (Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);\n    parameters:\n    - id: _Pred\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.sort*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: splice(ContainerBidirectionalIterator,IList<TValue>)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.splice*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: To be added.\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.splice*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: To be added.\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.splice*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList`1)\n  id: swap(Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: swap(IList<TValue>)\n  nameWithType: IList<TValue>.swap(IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.swap(IList<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.IList<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.swap*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  id: unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: unique(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void unique (Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);\n    parameters:\n    - id: _Pred\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IList`1.unique*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign(IEnumerable)\n  nameWithType: IList<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IEnumerable)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign(Int32,TValue)\n  nameWithType: IList<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(Int32,TValue)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: back()\n  nameWithType: IList<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back()\n- uid: Microsoft.VisualC.StlClr.IList`1.back_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: back_item\n  nameWithType: IList<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back_item\n- uid: Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: begin(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.clear\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: clear()\n  nameWithType: IList<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.clear()\n- uid: Microsoft.VisualC.StlClr.IList`1.empty\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: empty()\n  nameWithType: IList<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.empty()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: end(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.IList`1.front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: front()\n  nameWithType: IList<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front()\n- uid: Microsoft.VisualC.StlClr.IList`1.front_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: front_item\n  nameWithType: IList<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front_item\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator,IEnumerable)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator,Int32,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n- uid: Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n- uid: Microsoft.VisualC.StlClr.IList`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: BinaryDelegate<TValue,TValue,Boolean>\n  nameWithType: BinaryDelegate<TValue,TValue,Boolean>\n  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,System.Boolean>\n  spec.csharp:\n  - uid: Microsoft.VisualC.StlClr.BinaryDelegate`3\n    name: BinaryDelegate\n    nameWithType: BinaryDelegate\n    fullName: BinaryDelegate<TValue,TValue,System.Boolean>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: pop_back()\n  nameWithType: IList<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_back()\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: pop_front()\n  nameWithType: IList<TValue>.pop_front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_front()\n- uid: Microsoft.VisualC.StlClr.IList`1.push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: push_back(TValue)\n  nameWithType: IList<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_back(TValue)\n- uid: Microsoft.VisualC.StlClr.IList`1.push_front(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: push_front(TValue)\n  nameWithType: IList<TValue>.push_front(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_front(TValue)\n- uid: Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: rbegin(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.remove(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: remove(TValue)\n  nameWithType: IList<TValue>.remove(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.remove(TValue)\n- uid: Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: rend(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: resize(Int32)\n  nameWithType: IList<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32)\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: resize(Int32,TValue)\n  nameWithType: IList<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32,TValue)\n- uid: Microsoft.VisualC.StlClr.IList`1.reverse\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: reverse()\n  nameWithType: IList<TValue>.reverse()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.reverse()\n- uid: Microsoft.VisualC.StlClr.IList`1.size\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: size()\n  nameWithType: IList<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.size()\n- uid: Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: sort(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice(ContainerBidirectionalIterator,IList<TValue>)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: swap(IList<TValue>)\n  nameWithType: IList<TValue>.swap(IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.swap(IList<TValue>)\n- uid: Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: unique(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n- uid: Microsoft.VisualC.StlClr.IList`1.assign*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign\n  nameWithType: IList<TValue>.assign\n- uid: Microsoft.VisualC.StlClr.IList`1.back*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: back\n  nameWithType: IList<TValue>.back\n- uid: Microsoft.VisualC.StlClr.IList`1.back_item*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: back_item\n  nameWithType: IList<TValue>.back_item\n- uid: Microsoft.VisualC.StlClr.IList`1.begin*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: begin\n  nameWithType: IList<TValue>.begin\n- uid: Microsoft.VisualC.StlClr.IList`1.clear*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: clear\n  nameWithType: IList<TValue>.clear\n- uid: Microsoft.VisualC.StlClr.IList`1.empty*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: empty\n  nameWithType: IList<TValue>.empty\n- uid: Microsoft.VisualC.StlClr.IList`1.end*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: end\n  nameWithType: IList<TValue>.end\n- uid: Microsoft.VisualC.StlClr.IList`1.erase*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: erase\n  nameWithType: IList<TValue>.erase\n- uid: Microsoft.VisualC.StlClr.IList`1.front*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: front\n  nameWithType: IList<TValue>.front\n- uid: Microsoft.VisualC.StlClr.IList`1.front_item*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: front_item\n  nameWithType: IList<TValue>.front_item\n- uid: Microsoft.VisualC.StlClr.IList`1.insert*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert\n  nameWithType: IList<TValue>.insert\n- uid: Microsoft.VisualC.StlClr.IList`1.merge*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: merge\n  nameWithType: IList<TValue>.merge\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_back*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: pop_back\n  nameWithType: IList<TValue>.pop_back\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_front*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: pop_front\n  nameWithType: IList<TValue>.pop_front\n- uid: Microsoft.VisualC.StlClr.IList`1.push_back*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: push_back\n  nameWithType: IList<TValue>.push_back\n- uid: Microsoft.VisualC.StlClr.IList`1.push_front*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: push_front\n  nameWithType: IList<TValue>.push_front\n- uid: Microsoft.VisualC.StlClr.IList`1.rbegin*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: rbegin\n  nameWithType: IList<TValue>.rbegin\n- uid: Microsoft.VisualC.StlClr.IList`1.remove*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: remove\n  nameWithType: IList<TValue>.remove\n- uid: Microsoft.VisualC.StlClr.IList`1.rend*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: rend\n  nameWithType: IList<TValue>.rend\n- uid: Microsoft.VisualC.StlClr.IList`1.resize*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: resize\n  nameWithType: IList<TValue>.resize\n- uid: Microsoft.VisualC.StlClr.IList`1.reverse*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: reverse\n  nameWithType: IList<TValue>.reverse\n- uid: Microsoft.VisualC.StlClr.IList`1.size*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: size\n  nameWithType: IList<TValue>.size\n- uid: Microsoft.VisualC.StlClr.IList`1.sort*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: sort\n  nameWithType: IList<TValue>.sort\n- uid: Microsoft.VisualC.StlClr.IList`1.splice*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice\n  nameWithType: IList<TValue>.splice\n- uid: Microsoft.VisualC.StlClr.IList`1.swap*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: swap\n  nameWithType: IList<TValue>.swap\n- uid: Microsoft.VisualC.StlClr.IList`1.unique*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: unique\n  nameWithType: IList<TValue>.unique\n"}