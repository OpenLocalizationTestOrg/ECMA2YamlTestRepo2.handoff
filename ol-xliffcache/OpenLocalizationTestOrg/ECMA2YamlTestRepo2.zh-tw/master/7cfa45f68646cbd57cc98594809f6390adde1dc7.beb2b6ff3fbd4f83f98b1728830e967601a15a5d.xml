{"nodes":[{"pos":[393,488],"content":"Defines the method a class implements to process an assembly after the assembly has been built.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the method a class implements to process an assembly after the assembly has been built.","pos":[0,95]}]},{"pos":[501,1301],"content":"A class implementing this interface can access an assembly after it has been compiled. The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an IAssemblyPostProcessor interface has been registered in the Web configuration file. If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the IAssemblyPostProcessor interface to perform any action after the compilation and before loading the assembly. For example, a profiler tool could implement this interface to establish probes in the assembly.       When an IAssemblyPostProcessor interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.","needQuote":false,"needEscape":true,"nodes":[{"content":"A class implementing this interface can access an assembly after it has been compiled. The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an IAssemblyPostProcessor interface has been registered in the Web configuration file. If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the IAssemblyPostProcessor interface to perform any action after the compilation and before loading the assembly. For example, a profiler tool could implement this interface to establish probes in the assembly.       When an IAssemblyPostProcessor interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.","pos":[0,798],"nodes":[{"content":"A class implementing this interface can access an assembly after it has been compiled.","pos":[0,86]},{"content":"The &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; class compiles assemblies and then checks to see whether an IAssemblyPostProcessor interface has been registered in the Web configuration file.","pos":[87,280],"source":" The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an IAssemblyPostProcessor interface has been registered in the Web configuration file."},{"content":"If so, the &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; instance calls the &lt;xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A&gt; method for the IAssemblyPostProcessor interface to perform any action after the compilation and before loading the assembly.","pos":[281,557],"source":" If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the IAssemblyPostProcessor interface to perform any action after the compilation and before loading the assembly."},{"content":"For example, a profiler tool could implement this interface to establish probes in the assembly.","pos":[558,654]},{"content":"When an IAssemblyPostProcessor interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.","pos":[661,798]}]}]},{"pos":[3188,3280],"content":"Called before the assembly is loaded to allow the implementing class to modify the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called before the assembly is loaded to allow the implementing class to modify the assembly.","pos":[0,92]}]},{"pos":[3292,3490],"content":"The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled. Any actions to be taken before loading the assembly should be included in this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled. Any actions to be taken before loading the assembly should be included in this method.","pos":[0,198],"nodes":[{"content":"The &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; class calls this method after the assembly has been compiled.","pos":[0,111],"source":"The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled."},{"content":"Any actions to be taken before loading the assembly should be included in this method.","pos":[112,198]}]}]},{"pos":[4898,4923],"content":"The path to the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path to the assembly.","pos":[0,25]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Compilation.IAssemblyPostProcessor\n  id: IAssemblyPostProcessor\n  children:\n  - System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)\n  langs:\n  - csharp\n  name: IAssemblyPostProcessor\n  nameWithType: IAssemblyPostProcessor\n  fullName: System.Web.Compilation.IAssemblyPostProcessor\n  type: Interface\n  summary: Defines the method a class implements to process an assembly after the assembly has been built.\n  remarks: \"A class implementing this interface can access an assembly after it has been compiled. The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an IAssemblyPostProcessor interface has been registered in the Web configuration file. If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the IAssemblyPostProcessor interface to perform any action after the compilation and before loading the assembly. For example, a profiler tool could implement this interface to establish probes in the assembly.  \\n  \\n When an IAssemblyPostProcessor interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.\"\n  example:\n  - \"The following code example demonstrates how to create an implementation of the IAssemblyPostProcessor interface, and register it in the Web.config file of a Web application.  \\n  \\n The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the IAssemblyPostProcessor interface. This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.  \\n  \\n [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/add/codesnippet/visualbasic/t-system.web.compilation_8_1.vb)]\\n [!code-cs[System.Web.Compilation.IAssemblyPostProcessor#1](~/add/codesnippet/csharp/t-system.web.compilation_8_1.cs)]  \\n  \\n Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`. Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.  \\n  \\n```  \\n<compilation debug=\\\"true\\\" assemblyPostProcessorType=\\\"Samples.Process.postProcessTest\\\" />  \\n```  \\n  \\n When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\\\\compile.\"\n  syntax:\n    content: 'public interface IAssemblyPostProcessor : IDisposable'\n  implements:\n  - System.IDisposable\n  platform:\n  - net462\n- uid: System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)\n  id: PostProcessAssembly(System.String)\n  parent: System.Web.Compilation.IAssemblyPostProcessor\n  langs:\n  - csharp\n  name: PostProcessAssembly(String)\n  nameWithType: IAssemblyPostProcessor.PostProcessAssembly(String)\n  fullName: System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Called before the assembly is loaded to allow the implementing class to modify the assembly.\n  remarks: The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled. Any actions to be taken before loading the assembly should be included in this method.\n  example:\n  - \"The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.  \\n  \\n The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface. This class performs the simple action of writing a file when the PostProcessAssembly method is called.  \\n  \\n [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/add/codesnippet/visualbasic/30b129b5-63b2-48bd-ad9f-_1.vb)]\\n [!code-cs[System.Web.Compilation.IAssemblyPostProcessor#1](~/add/codesnippet/csharp/30b129b5-63b2-48bd-ad9f-_1.cs)]  \\n  \\n Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`. Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.  \\n  \\n```  \\n<compilation debug=\\\"true\\\" assemblyPostProcessorType=\\\"Samples.Process.postProcessTest\\\" />  \\n```  \\n  \\n When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\\\\compile.\"\n  syntax:\n    content: public void PostProcessAssembly (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path to the assembly.\n  overload: System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)\n  parent: System.Web.Compilation.IAssemblyPostProcessor\n  isExternal: false\n  name: PostProcessAssembly(String)\n  nameWithType: IAssemblyPostProcessor.PostProcessAssembly(String)\n  fullName: System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly*\n  parent: System.Web.Compilation.IAssemblyPostProcessor\n  isExternal: false\n  name: PostProcessAssembly\n  nameWithType: IAssemblyPostProcessor.PostProcessAssembly\n"}