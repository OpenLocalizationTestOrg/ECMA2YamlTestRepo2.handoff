{"nodes":[{"pos":[288,341],"content":"Defines the base class for all context-bound classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the base class for all context-bound classes.","pos":[0,53]}]},{"pos":[354,1127],"content":"Objects that reside in a context and are bound to the context rules are called context-bound objects. A context is a set of properties or usage rules that define an environment where a collection of objects resides. The rules are enforced when the objects are entering or leaving a context. Objects that are not context-bound are called agile objects.       Contexts are created during object activation. A new object is placed into an existing context or into a new context created using the attributes included in the metadata of the type. Context-bound classes are marked with a <xref:System.Runtime.Remoting.Contexts.ContextAttribute> that provides the usage rules. The context properties that can be added include policies regarding synchronization and transactions.","needQuote":false,"needEscape":true,"nodes":[{"content":"Objects that reside in a context and are bound to the context rules are called context-bound objects. A context is a set of properties or usage rules that define an environment where a collection of objects resides. The rules are enforced when the objects are entering or leaving a context. Objects that are not context-bound are called agile objects.       Contexts are created during object activation. A new object is placed into an existing context or into a new context created using the attributes included in the metadata of the type. Context-bound classes are marked with a <xref:System.Runtime.Remoting.Contexts.ContextAttribute> that provides the usage rules. The context properties that can be added include policies regarding synchronization and transactions.","pos":[0,771],"nodes":[{"content":"Objects that reside in a context and are bound to the context rules are called context-bound objects.","pos":[0,101]},{"content":"A context is a set of properties or usage rules that define an environment where a collection of objects resides.","pos":[102,215]},{"content":"The rules are enforced when the objects are entering or leaving a context.","pos":[216,290]},{"content":"Objects that are not context-bound are called agile objects.","pos":[291,351]},{"content":"Contexts are created during object activation.","pos":[358,404]},{"content":"A new object is placed into an existing context or into a new context created using the attributes included in the metadata of the type.","pos":[405,541]},{"content":"Context-bound classes are marked with a &lt;xref:System.Runtime.Remoting.Contexts.ContextAttribute&gt; that provides the usage rules.","pos":[542,669],"source":" Context-bound classes are marked with a <xref:System.Runtime.Remoting.Contexts.ContextAttribute> that provides the usage rules."},{"content":"The context properties that can be added include policies regarding synchronization and transactions.","pos":[670,771]}]}]},{"pos":[1957,2042],"content":"Instantiates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.ContextBoundObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Instantiates an instance of the <xref href=\"System.ContextBoundObject\"></xref> class."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ContextBoundObject\n  id: ContextBoundObject\n  children:\n  - System.ContextBoundObject.#ctor\n  langs:\n  - csharp\n  name: ContextBoundObject\n  nameWithType: ContextBoundObject\n  fullName: System.ContextBoundObject\n  type: Class\n  summary: Defines the base class for all context-bound classes.\n  remarks: \"Objects that reside in a context and are bound to the context rules are called context-bound objects. A context is a set of properties or usage rules that define an environment where a collection of objects resides. The rules are enforced when the objects are entering or leaving a context. Objects that are not context-bound are called agile objects.  \\n  \\n Contexts are created during object activation. A new object is placed into an existing context or into a new context created using the attributes included in the metadata of the type. Context-bound classes are marked with a <xref:System.Runtime.Remoting.Contexts.ContextAttribute> that provides the usage rules. The context properties that can be added include policies regarding synchronization and transactions.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class ContextBoundObject : MarshalByRefObject\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.ContextBoundObject.#ctor\n  id: '#ctor'\n  parent: System.ContextBoundObject\n  langs:\n  - csharp\n  name: ContextBoundObject()\n  nameWithType: ContextBoundObject.ContextBoundObject()\n  fullName: System.ContextBoundObject.ContextBoundObject()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Instantiates an instance of the <xref href=\"System.ContextBoundObject\"></xref> class.\n  syntax:\n    content: protected ContextBoundObject ();\n    parameters: []\n  overload: System.ContextBoundObject.#ctor*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ContextBoundObject.#ctor\n  parent: System.ContextBoundObject\n  isExternal: false\n  name: ContextBoundObject()\n  nameWithType: ContextBoundObject.ContextBoundObject()\n  fullName: System.ContextBoundObject.ContextBoundObject()\n- uid: System.ContextBoundObject.#ctor*\n  parent: System.ContextBoundObject\n  isExternal: false\n  name: ContextBoundObject\n  nameWithType: ContextBoundObject.ContextBoundObject\n"}