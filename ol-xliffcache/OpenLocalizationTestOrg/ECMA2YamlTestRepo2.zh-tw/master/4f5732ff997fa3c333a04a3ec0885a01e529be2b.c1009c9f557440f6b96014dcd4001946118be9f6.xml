{"nodes":[{"pos":[1201,1359],"content":"Conditionally runs one of two or more activities of type <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref>. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Conditionally runs one of two or more activities of type <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseBranchActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,126],"source":"Conditionally runs one of two or more activities of type <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref>."},{"content":"This class cannot be inherited.","pos":[127,158]}]},{"pos":[1372,1921],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       This activity provides semantics similar to two `If-ElseIf` statements.       IfElseActivity contains an ordered set of <xref:System.Workflow.Activities.IfElseBranchActivity> classes and runs the first branch when the condition evaluates to `true`. The final branch is not required to have a condition, in which case it always evaluates to `true`.       A IfElseActivity can complete without having run any child activity, if no conditions are satisfied.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       This activity provides semantics similar to two <ph id=\"ph4\">`If-ElseIf`</ph> statements.","pos":[0,159],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       This activity provides semantics similar to two `If-ElseIf` statements."},{"content":"IfElseActivity contains an ordered set of &lt;xref:System.Workflow.Activities.IfElseBranchActivity&gt; classes and runs the first branch when the condition evaluates to <ph id=\"ph1\">`true`</ph>.","pos":[166,336],"source":"       IfElseActivity contains an ordered set of <xref:System.Workflow.Activities.IfElseBranchActivity> classes and runs the first branch when the condition evaluates to `true`."},{"content":"The final branch is not required to have a condition, in which case it always evaluates to <ph id=\"ph1\">`true`</ph>.","pos":[337,435],"source":" The final branch is not required to have a condition, in which case it always evaluates to `true`."},{"content":"A IfElseActivity can complete without having run any child activity, if no conditions are satisfied.","pos":[442,542]}]},{"pos":[11424,11527],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> class."},{"pos":[12847,12981],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the name of the activity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> class using the name of the activity."},{"pos":[13118,13156],"content":"The user-defined name of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user-defined name of the activity.","pos":[0,38]}]},{"pos":[13870,14020],"content":"Adds a new branch to the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using a collection of new activities to add to the new branch.","needQuote":true,"needEscape":true,"source":"Adds a new branch to the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> using a collection of new activities to add to the new branch."},{"pos":[14351,14403],"content":"A collection of activities to add to the new branch.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of activities to add to the new branch.","pos":[0,52]}]},{"pos":[14495,14598],"content":"The updated <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseBranchActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the new branches.","needQuote":true,"needEscape":true,"source":"The updated <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref> with the new branches."},{"pos":[15468,15618],"content":"Adds a new branch to the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using a collection of new activities to add to the new branch.","needQuote":true,"needEscape":true,"source":"Adds a new branch to the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> using a collection of new activities to add to the new branch."},{"pos":[16015,16067],"content":"A collection of activities to add to the new branch.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of activities to add to the new branch.","pos":[0,52]}]},{"pos":[16174,16296],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.ActivityCondition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines whether the branch should be run.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Workflow.ComponentModel.ActivityCondition\"></xref> that determines whether the branch should be run."},{"pos":[16388,16491],"content":"The updated <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.IfElseBranchActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the new branches.","needQuote":true,"needEscape":true,"source":"The updated <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref> with the new branches."},{"pos":[17454,17466],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17565,17577],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18543,18555],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18654,18666],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20119,20131],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20246,20258],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.IfElseActivity\n  id: IfElseActivity\n  children:\n  - System.Workflow.Activities.IfElseActivity.#ctor\n  - System.Workflow.Activities.IfElseActivity.#ctor(System.String)\n  - System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})\n  - System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)\n  - System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  langs:\n  - csharp\n  name: IfElseActivity\n  nameWithType: IfElseActivity\n  fullName: System.Workflow.Activities.IfElseActivity\n  type: Class\n  summary: Conditionally runs one of two or more activities of type <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref>. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n This activity provides semantics similar to two `If-ElseIf` statements.  \\n  \\n IfElseActivity contains an ordered set of <xref:System.Workflow.Activities.IfElseBranchActivity> classes and runs the first branch when the condition evaluates to `true`. The final branch is not required to have a condition, in which case it always evaluates to `true`.  \\n  \\n A IfElseActivity can complete without having run any child activity, if no conditions are satisfied.\"\n  example:\n  - \"The following code example shows how to create a new instance of the IfElseActivity class and add two <xref:System.Workflow.Activities.IfElseBranchActivity> classes to it. This code example is part of the SequentialWorkflowWithParameters SDK Sample from the SequentialWorkflow.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Sequential Workflow With Parameters](http://msdn.microsoft.com/en-us/17157f2d-8fed-4848-a386-e4efa381b66b).  \\n  \\n [!code-cs[wf_samples#194](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#194)]\\n [!code-vb[wf_samples#194](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#194)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.IfElseDesigner), typeof(System.ComponentModel.Design.IDesigner))]\n\n      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.Activities.IfElseToolboxItem))]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.IfElseActivity), \"Resources.Decision.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.IfElseValidator))]\n\n      public sealed class IfElseActivity : System.Workflow.ComponentModel.CompositeActivity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  - System.Workflow.ComponentModel.CompositeActivity\n  implements:\n  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritedMembers:\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.CompositeActivity.Activities\n  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities\n  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities\n  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: IfElseActivity()\n  nameWithType: IfElseActivity.IfElseActivity()\n  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create a new instance of the <xref:System.Workflow.Activities.IfElseActivity> class and add two <xref:System.Workflow.Activities.IfElseBranchActivity> classes to it. This code example is part of the SequentialWorkflowWithParameters SDK sample from the SequentialWorkflow.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Sequential Workflow With Parameters](http://msdn.microsoft.com/en-us/17157f2d-8fed-4848-a386-e4efa381b66b).  \\n  \\n [!code-cs[wf_samples#296](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#296)]\\n [!code-vb[wf_samples#296](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#296)]\"\n  syntax:\n    content: public IfElseActivity ();\n    parameters: []\n  overload: System.Workflow.Activities.IfElseActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: IfElseActivity(String)\n  nameWithType: IfElseActivity.IfElseActivity(String)\n  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> class using the name of the activity.\n  syntax:\n    content: public IfElseActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The user-defined name of the activity.\n  overload: System.Workflow.Activities.IfElseActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})\n  id: AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: AddBranch(ICollection<Activity>)\n  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>)\n  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Adds a new branch to the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> using a collection of new activities to add to the new branch.\n  syntax:\n    content: public System.Workflow.Activities.IfElseBranchActivity AddBranch (System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity> activities);\n    parameters:\n    - id: activities\n      type: System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity}\n      description: A collection of activities to add to the new branch.\n    return:\n      type: System.Workflow.Activities.IfElseBranchActivity\n      description: The updated <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref> with the new branches.\n  overload: System.Workflow.Activities.IfElseActivity.AddBranch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)\n  id: AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: AddBranch(ICollection<Activity>,ActivityCondition)\n  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)\n  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Adds a new branch to the <xref href=\"System.Workflow.Activities.IfElseActivity\"></xref> using a collection of new activities to add to the new branch.\n  syntax:\n    content: public System.Workflow.Activities.IfElseBranchActivity AddBranch (System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity> activities, System.Workflow.ComponentModel.ActivityCondition branchCondition);\n    parameters:\n    - id: activities\n      type: System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity}\n      description: A collection of activities to add to the new branch.\n    - id: branchCondition\n      type: System.Workflow.ComponentModel.ActivityCondition\n      description: An <xref href=\"System.Workflow.ComponentModel.ActivityCondition\"></xref> that determines whether the branch should be run.\n    return:\n      type: System.Workflow.Activities.IfElseBranchActivity\n      description: The updated <xref href=\"System.Workflow.Activities.IfElseBranchActivity\"></xref> with the new branches.\n  overload: System.Workflow.Activities.IfElseActivity.AddBranch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: IfElseActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.IfElseActivity.Cancel(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.Activities.IfElseActivity.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: IfElseActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.IfElseActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.Activities.IfElseActivity.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  isEii: true\n  parent: System.Workflow.Activities.IfElseActivity\n  langs:\n  - csharp\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.Activities.IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: To be added.\n    - id: e\n      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n      description: To be added.\n  overload: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.CompositeActivity\n- uid: System.Workflow.Activities.IfElseActivity.#ctor\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: IfElseActivity()\n  nameWithType: IfElseActivity.IfElseActivity()\n  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity()\n- uid: System.Workflow.Activities.IfElseActivity.#ctor(System.String)\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: IfElseActivity(String)\n  nameWithType: IfElseActivity.IfElseActivity(String)\n  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: AddBranch(ICollection<Activity>)\n  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>)\n  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>)\n- uid: System.Workflow.Activities.IfElseBranchActivity\n  parent: System.Workflow.Activities\n  isExternal: false\n  name: IfElseBranchActivity\n  nameWithType: IfElseBranchActivity\n  fullName: System.Workflow.Activities.IfElseBranchActivity\n- uid: System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<Activity>\n  nameWithType: ICollection<Activity>\n  fullName: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.Workflow.ComponentModel.Activity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Workflow.ComponentModel.Activity\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: AddBranch(ICollection<Activity>,ActivityCondition)\n  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)\n  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)\n- uid: System.Workflow.ComponentModel.ActivityCondition\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityCondition\n  nameWithType: ActivityCondition\n  fullName: System.Workflow.ComponentModel.ActivityCondition\n- uid: System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: IfElseActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.IfElseActivity.Cancel(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: IfElseActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.IfElseActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.Activities.IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatusChangedEventArgs\n  nameWithType: ActivityExecutionStatusChangedEventArgs\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n- uid: System.Workflow.Activities.IfElseActivity.#ctor*\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: IfElseActivity\n  nameWithType: IfElseActivity.IfElseActivity\n- uid: System.Workflow.Activities.IfElseActivity.AddBranch*\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: AddBranch\n  nameWithType: IfElseActivity.AddBranch\n- uid: System.Workflow.Activities.IfElseActivity.Cancel*\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: Cancel\n  nameWithType: IfElseActivity.Cancel\n- uid: System.Workflow.Activities.IfElseActivity.Execute*\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: Execute\n  nameWithType: IfElseActivity.Execute\n- uid: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  parent: System.Workflow.Activities.IfElseActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n  nameWithType: IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n"}