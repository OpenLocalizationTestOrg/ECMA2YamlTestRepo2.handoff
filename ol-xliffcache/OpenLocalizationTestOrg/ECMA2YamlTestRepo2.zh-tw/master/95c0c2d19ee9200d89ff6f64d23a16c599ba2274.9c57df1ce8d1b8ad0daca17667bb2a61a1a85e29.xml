{"nodes":[{"pos":[1047,1120],"content":"Runs a child activity iteratively as long as a certain condition is true.","needQuote":true,"needEscape":true,"nodes":[{"content":"Runs a child activity iteratively as long as a certain condition is true.","pos":[0,73]}]},{"pos":[1133,1617],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The WhileActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the WhileActivity can contain other activities.       Before each iteration, the <xref:System.Workflow.Activities.WhileActivity.Condition%2A> property is evaluated. If the <xref:System.Workflow.Activities.WhileActivity.Condition%2A> property evaluates to `false`, the WhileActivity immediately finishes.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       The WhileActivity is a &lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt;, meaning the WhileActivity can contain other activities.","pos":[0,223],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The WhileActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the WhileActivity can contain other activities."},{"content":"Before each iteration, the &lt;xref:System.Workflow.Activities.WhileActivity.Condition%2A&gt; property is evaluated.","pos":[230,340],"source":"       Before each iteration, the <xref:System.Workflow.Activities.WhileActivity.Condition%2A> property is evaluated."},{"content":"If the &lt;xref:System.Workflow.Activities.WhileActivity.Condition%2A&gt; property evaluates to <ph id=\"ph1\">`false`</ph>, the WhileActivity immediately finishes.","pos":[341,479],"source":" If the <xref:System.Workflow.Activities.WhileActivity.Condition%2A> property evaluates to `false`, the WhileActivity immediately finishes."}]},{"pos":[11095,11197],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> class."},{"pos":[12518,12651],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the name of the activity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> class using the name of the activity."},{"pos":[12787,12825],"content":"The user-defined name of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user-defined name of the activity.","pos":[0,38]}]},{"pos":[13779,13791],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13890,13902],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14383,14519],"content":"Gets or sets a condition that determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> should run or finish.","needQuote":true,"needEscape":true,"source":"Gets or sets a condition that determines whether the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> should run or finish."},{"pos":[14532,15239],"content":"The following code example demonstrates how to create a new instance of the <xref:System.Workflow.Activities.WhileActivity> class, add the <xref:System.Workflow.Activities.ParallelActivity> class to the <xref:System.Workflow.Activities.WhileActivity> class, and set the Condition property. This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see [Using While and Parallel](http://msdn.microsoft.com/en-us/776a25cc-6aed-4754-b680-996213831b84).       [!code-cs[wf_samples#275](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#275)]  [!code-vb[wf_samples#275](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#275)]","needQuote":false,"needEscape":true,"nodes":[{"content":"The following code example demonstrates how to create a new instance of the &lt;xref:System.Workflow.Activities.WhileActivity&gt; class, add the &lt;xref:System.Workflow.Activities.ParallelActivity&gt; class to the &lt;xref:System.Workflow.Activities.WhileActivity&gt; class, and set the Condition property.","pos":[0,289],"source":"The following code example demonstrates how to create a new instance of the <xref:System.Workflow.Activities.WhileActivity> class, add the <xref:System.Workflow.Activities.ParallelActivity> class to the <xref:System.Workflow.Activities.WhileActivity> class, and set the Condition property."},{"content":"This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file.","pos":[290,402]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using While and Parallel<ept id=\"p1\">](http://msdn.microsoft.com/en-us/776a25cc-6aed-4754-b680-996213831b84)</ept>.","pos":[403,526],"source":" For more information, see [Using While and Parallel](http://msdn.microsoft.com/en-us/776a25cc-6aed-4754-b680-996213831b84)."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>wf_samples#275<ept id=\"p2\">](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#275)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>wf_samples#275<ept id=\"p4\">](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#275)</ept><ept id=\"p3\">]</ept>","pos":[533,704],"source":"[!code-cs[wf_samples#275](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#275)]  [!code-vb[wf_samples#275](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#275)]"}]},{"pos":[15436,15910],"content":"When the <xref href=\"System.Workflow.Activities.Rules.RuleCondition\"></xref> property evaluates to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> continues to run. When the <xref href=\"System.Workflow.Activities.Rules.RuleCondition\"></xref> evaluates to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> finishes.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleCondition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property evaluates to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the <bpt id=\"p3\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> continues to run.","pos":[0,244],"source":"When the <xref href=\"System.Workflow.Activities.Rules.RuleCondition\"></xref> property evaluates to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> continues to run."},{"content":"When the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleCondition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> evaluates to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the <bpt id=\"p3\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> finishes.","pos":[245,474],"source":" When the <xref href=\"System.Workflow.Activities.Rules.RuleCondition\"></xref> evaluates to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> finishes."}]},{"pos":[16431,16602],"content":"Represents the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.DependencyProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that targets the &lt;xref:System.Workflow.Activities.WhileActivity.Condition*&gt; property.","needQuote":true,"needEscape":true,"source":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref:System.Workflow.Activities.WhileActivity.Condition*> property."},{"pos":[16908,16920],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17370,17473],"content":"Gets the dynamic child activities in the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the dynamic child activities in the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref>."},{"pos":[17652,17750],"content":"The dynamic child activities in the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.WhileActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The dynamic child activities in the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref>."},{"pos":[18720,18732],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18831,18843],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20291,20303],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20418,20430],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.WhileActivity\n  id: WhileActivity\n  children:\n  - System.Workflow.Activities.WhileActivity.#ctor\n  - System.Workflow.Activities.WhileActivity.#ctor(System.String)\n  - System.Workflow.Activities.WhileActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.WhileActivity.Condition\n  - System.Workflow.Activities.WhileActivity.ConditionProperty\n  - System.Workflow.Activities.WhileActivity.DynamicActivity\n  - System.Workflow.Activities.WhileActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  langs:\n  - csharp\n  name: WhileActivity\n  nameWithType: WhileActivity\n  fullName: System.Workflow.Activities.WhileActivity\n  type: Class\n  summary: Runs a child activity iteratively as long as a certain condition is true.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n The WhileActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the WhileActivity can contain other activities.  \\n  \\n Before each iteration, the <xref:System.Workflow.Activities.WhileActivity.Condition%2A> property is evaluated. If the <xref:System.Workflow.Activities.WhileActivity.Condition%2A> property evaluates to `false`, the WhileActivity immediately finishes.\"\n  example:\n  - \"The following code example demonstrates how to create a new instance of the WhileActivity class and add the <xref:System.Workflow.Activities.ParallelActivity> class to the WhileActivity class.  This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see [Using While and Parallel](http://msdn.microsoft.com/en-us/776a25cc-6aed-4754-b680-996213831b84).  \\n  \\n [!code-cs[wf_samples#275](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#275)]\\n [!code-vb[wf_samples#275](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#275)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.WhileDesigner), typeof(System.ComponentModel.Design.IDesigner))]\n\n      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.WhileActivity), \"Resources.While.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.WhileValidator))]\n\n      public sealed class WhileActivity : System.Workflow.ComponentModel.CompositeActivity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  - System.Workflow.ComponentModel.CompositeActivity\n  implements:\n  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritedMembers:\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.CompositeActivity.Activities\n  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities\n  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities\n  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: WhileActivity()\n  nameWithType: WhileActivity.WhileActivity()\n  fullName: System.Workflow.Activities.WhileActivity.WhileActivity()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to create a new instance of the <xref:System.Workflow.Activities.WhileActivity> class and add the <xref:System.Workflow.Activities.ParallelActivity> class to the <xref:System.Workflow.Activities.WhileActivity> class.  This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see [Using While and Parallel](http://msdn.microsoft.com/en-us/776a25cc-6aed-4754-b680-996213831b84).  \\n  \\n [!code-cs[wf_samples#275](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#275)]\\n [!code-vb[wf_samples#275](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#275)]\"\n  syntax:\n    content: public WhileActivity ();\n    parameters: []\n  overload: System.Workflow.Activities.WhileActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: WhileActivity(String)\n  nameWithType: WhileActivity.WhileActivity(String)\n  fullName: System.Workflow.Activities.WhileActivity.WhileActivity(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> class using the name of the activity.\n  syntax:\n    content: public WhileActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The user-defined name of the activity.\n  overload: System.Workflow.Activities.WhileActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: WhileActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.WhileActivity.Cancel(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.Activities.WhileActivity.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.Condition\n  id: Condition\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: Condition\n  nameWithType: WhileActivity.Condition\n  fullName: System.Workflow.Activities.WhileActivity.Condition\n  type: Property\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Gets or sets a condition that determines whether the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> should run or finish.\n  remarks: \"The following code example demonstrates how to create a new instance of the <xref:System.Workflow.Activities.WhileActivity> class, add the <xref:System.Workflow.Activities.ParallelActivity> class to the <xref:System.Workflow.Activities.WhileActivity> class, and set the Condition property. This code example is part of the WhileAndParallel SDK Sample from the WhileAndParallelWorkflow.Designer.cs file. For more information, see [Using While and Parallel](http://msdn.microsoft.com/en-us/776a25cc-6aed-4754-b680-996213831b84).  \\n  \\n [!code-cs[wf_samples#275](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#275)]\\n [!code-vb[wf_samples#275](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#275)]\"\n  syntax:\n    content: public System.Workflow.ComponentModel.ActivityCondition Condition { get; set; }\n    return:\n      type: System.Workflow.ComponentModel.ActivityCondition\n      description: When the <xref href=\"System.Workflow.Activities.Rules.RuleCondition\"></xref> property evaluates to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> continues to run. When the <xref href=\"System.Workflow.Activities.Rules.RuleCondition\"></xref> evaluates to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref> finishes.\n  overload: System.Workflow.Activities.WhileActivity.Condition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.ConditionProperty\n  id: ConditionProperty\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: ConditionProperty\n  nameWithType: WhileActivity.ConditionProperty\n  fullName: System.Workflow.Activities.WhileActivity.ConditionProperty\n  type: Field\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref:System.Workflow.Activities.WhileActivity.Condition*> property.\n  remarks: '[!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]'\n  syntax:\n    content: public static readonly System.Workflow.ComponentModel.DependencyProperty ConditionProperty;\n    return:\n      type: System.Workflow.ComponentModel.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.DynamicActivity\n  id: DynamicActivity\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: DynamicActivity\n  nameWithType: WhileActivity.DynamicActivity\n  fullName: System.Workflow.Activities.WhileActivity.DynamicActivity\n  type: Property\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Gets the dynamic child activities in the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref>.\n  syntax:\n    content: public System.Workflow.ComponentModel.Activity DynamicActivity { get; }\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: The dynamic child activities in the <xref href=\"System.Workflow.Activities.WhileActivity\"></xref>.\n  overload: System.Workflow.Activities.WhileActivity.DynamicActivity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: WhileActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.WhileActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.Activities.WhileActivity.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  isEii: true\n  parent: System.Workflow.Activities.WhileActivity\n  langs:\n  - csharp\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: WhileActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.Activities.WhileActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: To be added.\n    - id: e\n      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n      description: To be added.\n  overload: System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.CompositeActivity\n- uid: System.Workflow.Activities.WhileActivity.#ctor\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: WhileActivity()\n  nameWithType: WhileActivity.WhileActivity()\n  fullName: System.Workflow.Activities.WhileActivity.WhileActivity()\n- uid: System.Workflow.Activities.WhileActivity.#ctor(System.String)\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: WhileActivity(String)\n  nameWithType: WhileActivity.WhileActivity(String)\n  fullName: System.Workflow.Activities.WhileActivity.WhileActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.WhileActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: WhileActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.WhileActivity.Cancel(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.Activities.WhileActivity.Condition\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: Condition\n  nameWithType: WhileActivity.Condition\n  fullName: System.Workflow.Activities.WhileActivity.Condition\n- uid: System.Workflow.ComponentModel.ActivityCondition\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityCondition\n  nameWithType: ActivityCondition\n  fullName: System.Workflow.ComponentModel.ActivityCondition\n- uid: System.Workflow.Activities.WhileActivity.ConditionProperty\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: ConditionProperty\n  nameWithType: WhileActivity.ConditionProperty\n  fullName: System.Workflow.Activities.WhileActivity.ConditionProperty\n- uid: System.Workflow.ComponentModel.DependencyProperty\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Workflow.ComponentModel.DependencyProperty\n- uid: System.Workflow.Activities.WhileActivity.DynamicActivity\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: DynamicActivity\n  nameWithType: WhileActivity.DynamicActivity\n  fullName: System.Workflow.Activities.WhileActivity.DynamicActivity\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Activities.WhileActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: WhileActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.WhileActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: WhileActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.Activities.WhileActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatusChangedEventArgs\n  nameWithType: ActivityExecutionStatusChangedEventArgs\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n- uid: System.Workflow.Activities.WhileActivity.#ctor*\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: WhileActivity\n  nameWithType: WhileActivity.WhileActivity\n- uid: System.Workflow.Activities.WhileActivity.Cancel*\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: Cancel\n  nameWithType: WhileActivity.Cancel\n- uid: System.Workflow.Activities.WhileActivity.Condition*\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: Condition\n  nameWithType: WhileActivity.Condition\n- uid: System.Workflow.Activities.WhileActivity.DynamicActivity*\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: DynamicActivity\n  nameWithType: WhileActivity.DynamicActivity\n- uid: System.Workflow.Activities.WhileActivity.Execute*\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: Execute\n  nameWithType: WhileActivity.Execute\n- uid: System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  parent: System.Workflow.Activities.WhileActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n  nameWithType: WhileActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n"}