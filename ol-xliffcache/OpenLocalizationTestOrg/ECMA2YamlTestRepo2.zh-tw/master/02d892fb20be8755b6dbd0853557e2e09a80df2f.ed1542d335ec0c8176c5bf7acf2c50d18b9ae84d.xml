{"nodes":[{"pos":[439,526],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Control.KeyPress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event."},{"pos":[539,2823],"content":"A KeyPressEventArgs specifies the character that is composed when the user presses a key. For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.       A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key. Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>. The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key. When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats. One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release.       With each <xref:System.Windows.Forms.Control.KeyPress> event, a KeyPressEventArgs is passed. A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event. A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key. (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)       Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event. This keeps the control from processing the key press.      > [!NOTE] >  Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>. For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called. In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead.       For information about the event model, see [Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"A KeyPressEventArgs specifies the character that is composed when the user presses a key.","pos":[0,89]},{"content":"For example, when the user presses SHIFT + K, the &lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt; property returns an uppercase K.       A &lt;xref:System.Windows.Forms.Control.KeyPress&gt; event occurs when the user presses a key.","pos":[90,324],"source":" For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.       A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key."},{"content":"Two events that are closely related to the &lt;xref:System.Windows.Forms.Control.KeyPress&gt; event are &lt;xref:System.Windows.Forms.Control.KeyUp&gt; and &lt;xref:System.Windows.Forms.Control.KeyDown&gt;.","pos":[325,513],"source":" Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>."},{"content":"The &lt;xref:System.Windows.Forms.Control.KeyDown&gt; event precedes each &lt;xref:System.Windows.Forms.Control.KeyPress&gt; event when the user presses a key, and a &lt;xref:System.Windows.Forms.Control.KeyUp&gt; event occurs when the user releases a key.","pos":[514,752],"source":" The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key."},{"content":"When the user holds down a key, duplicate &lt;xref:System.Windows.Forms.Control.KeyDown&gt; and &lt;xref:System.Windows.Forms.Control.KeyPress&gt; events occur each time the character repeats.","pos":[753,933],"source":" When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats."},{"content":"One &lt;xref:System.Windows.Forms.Control.KeyUp&gt; event is generated upon release.","pos":[934,1012],"source":" One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release."},{"content":"With each &lt;xref:System.Windows.Forms.Control.KeyPress&gt; event, a KeyPressEventArgs is passed.","pos":[1019,1111],"source":"       With each <xref:System.Windows.Forms.Control.KeyPress> event, a KeyPressEventArgs is passed."},{"content":"A &lt;xref:System.Windows.Forms.KeyEventArgs&gt; is passed with each &lt;xref:System.Windows.Forms.Control.KeyDown&gt; and &lt;xref:System.Windows.Forms.Control.KeyUp&gt; event.","pos":[1112,1271],"source":" A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event."},{"content":"A &lt;xref:System.Windows.Forms.KeyEventArgs&gt; specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key.","pos":[1272,1409],"source":" A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key."},{"content":"(This modifier information can also be obtained through the &lt;xref:System.Windows.Forms.Control.ModifierKeys%2A&gt; property of the &lt;xref:System.Windows.Forms.Control&gt; class.)       Set &lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A&gt; to <ph id=\"ph1\">`true`</ph> to cancel the <ph id=\"ph2\">`KeyPress`</ph> event.","pos":[1410,1690],"source":" (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)       Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event."},{"content":"This keeps the control from processing the key press.","pos":[1691,1744]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Some controls will process certain key strokes on &lt;xref:System.Windows.Forms.Control.KeyDown&gt;.","pos":[1750,1857],"source":"      > [!NOTE] >  Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>."},{"content":"For example, &lt;xref:System.Windows.Forms.RichTextBox&gt; processes the Enter key before &lt;xref:System.Windows.Forms.Control.KeyPress&gt; is called.","pos":[1858,1997],"source":" For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called."},{"content":"In such cases, you cannot cancel the &lt;xref:System.Windows.Forms.Control.KeyPress&gt; event, and must cancel the key stroke from &lt;xref:System.Windows.Forms.Control.KeyDown&gt; instead.","pos":[1998,2175],"source":" In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead."},{"content":"For information about the event model, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2182,2273],"source":"       For information about the event model, see [Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[4833,4933],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.KeyPressEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.KeyPressEventArgs\"></xref> class."},{"pos":[4945,5085],"content":"Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName&gt; property to get the current state of the modifier keys.","pos":[0,140],"source":"Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys."}]},{"pos":[5334,5396],"content":"The ASCII character corresponding to the key the user pressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ASCII character corresponding to the key the user pressed.","pos":[0,62]}]},{"pos":[5850,5971],"content":"Gets or sets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Control.KeyPress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event was handled.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event was handled."},{"pos":[5983,6129],"content":"If the event is not handled, it will be sent to the operating system for default processing. Set Handled to `true` to cancel the `KeyPress` event.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the event is not handled, it will be sent to the operating system for default processing.","pos":[0,92]},{"content":"Set Handled to <ph id=\"ph1\">`true`</ph> to cancel the <ph id=\"ph2\">`KeyPress`</ph> event.","pos":[93,146],"source":" Set Handled to `true` to cancel the `KeyPress` event."}]},{"pos":[6873,7033],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is handled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is handled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7489,7549],"content":"Gets or sets the character corresponding to the key pressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the character corresponding to the key pressed.","pos":[0,60]}]},{"pos":[7562,8551],"content":"Use the KeyChar property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances. For example, you can use KeyChar to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.       You can get or set the following keys:      -   a-z, A-Z.      -   CTRL.      -   Punctuation marks.      -   Number keys, both across the top of the keyboard and on the numeric keypad.      -   ENTER.       You cannot get or set the following keys:      -   The TAB key.      -   INSERT and DELETE.      -   HOME.      -   END.      -   PAGE UP and PAGE DOWN.      -   F1-F2.      -   ALT.      -   Arrow keys.      > [!NOTE] >  For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class.      -","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the KeyChar property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances.","pos":[0,120]},{"content":"For example, you can use KeyChar to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.","pos":[121,372]},{"content":"You can get or set the following keys:      -   a-z, A-Z.","pos":[379,436]},{"content":"-   CTRL.","pos":[442,451]},{"content":"-   Punctuation marks.","pos":[457,479]},{"content":"-   Number keys, both across the top of the keyboard and on the numeric keypad.","pos":[485,564]},{"content":"-   ENTER.","pos":[570,580]},{"content":"You cannot get or set the following keys:      -   The TAB key.","pos":[587,650]},{"content":"-   INSERT and DELETE.","pos":[656,678]},{"content":"-   HOME.","pos":[684,693]},{"content":"-   END.","pos":[699,707]},{"content":"-   PAGE UP and PAGE DOWN.","pos":[713,739]},{"content":"-   F1-F2.","pos":[745,755]},{"content":"-   ALT.","pos":[761,769]},{"content":"-   Arrow keys.","pos":[775,790]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For information about how to detect any of the non-character keys mentioned above, see the &lt;xref:System.Windows.Forms.KeyEventArgs&gt; class.","pos":[796,947],"source":"      > [!NOTE] >  For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class."},{"content":"-","pos":[953,954]}]},{"pos":[9290,9409],"content":"The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.","pos":[0,119],"nodes":[{"content":"The ASCII character that is composed.","pos":[0,37]},{"content":"For example, if the user presses SHIFT + K, this property returns an uppercase K.","pos":[38,119]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.KeyPressEventArgs\n  id: KeyPressEventArgs\n  children:\n  - System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  - System.Windows.Forms.KeyPressEventArgs.Handled\n  - System.Windows.Forms.KeyPressEventArgs.KeyChar\n  langs:\n  - csharp\n  name: KeyPressEventArgs\n  nameWithType: KeyPressEventArgs\n  fullName: System.Windows.Forms.KeyPressEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event.\n  remarks: \"A KeyPressEventArgs specifies the character that is composed when the user presses a key. For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.  \\n  \\n A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key. Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>. The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key. When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats. One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release.  \\n  \\n With each <xref:System.Windows.Forms.Control.KeyPress> event, a KeyPressEventArgs is passed. A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event. A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key. (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)  \\n  \\n Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event. This keeps the control from processing the key press.  \\n  \\n> [!NOTE]\\n>  Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>. For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called. In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead.  \\n  \\n For information about the event model, see [Events](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example illustrates using the KeyPressEventArgs to count keys as they are pressed and to display the results after each key press. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> is then set to true to keep the operating system from further processing the key. The example assumes a form with a <xref:System.Windows.Forms.TextBox> placed on it.  \\n  \\n [!code-cpp[Classic KeyPressEventArgs Example#1](~/add/codesnippet/cpp/t-system.windows.forms.k_0_1.cpp)]\\n [!code-cs[Classic KeyPressEventArgs Example#1](~/add/codesnippet/csharp/t-system.windows.forms.k_0_1.cs)]\\n [!code-vb[Classic KeyPressEventArgs Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.k_0_1.vb)]  \\n  \\n You must create a new instance of this class. You must also set the event handler. You can do this in the constructor for your class.  \\n  \\n [!code-cpp[Classic KeyPressEventArgs Example#2](~/add/codesnippet/cpp/t-system.windows.forms.k_0_2.cpp)]\\n [!code-cs[Classic KeyPressEventArgs Example#2](~/add/codesnippet/csharp/t-system.windows.forms.k_0_2.cs)]\\n [!code-vb[Classic KeyPressEventArgs Example#2](~/add/codesnippet/visualbasic/t-system.windows.forms.k_0_2.vb)]  \\n  \\n When the specified event is raised in the control, the attached method is called and the application can execute code in response to the event.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class KeyPressEventArgs : EventArgs\n  inheritance:\n  - System.EventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  id: '#ctor(System.Char)'\n  parent: System.Windows.Forms.KeyPressEventArgs\n  langs:\n  - csharp\n  name: KeyPressEventArgs(Char)\n  nameWithType: KeyPressEventArgs.KeyPressEventArgs(Char)\n  fullName: System.Windows.Forms.KeyPressEventArgs.KeyPressEventArgs(Char)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.KeyPressEventArgs\"></xref> class.\n  remarks: Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys.\n  example:\n  - The following example displays a message box that shows the current state of the SHIFT key.\n  syntax:\n    content: public KeyPressEventArgs (char keyChar);\n    parameters:\n    - id: keyChar\n      type: System.Char\n      description: The ASCII character corresponding to the key the user pressed.\n  overload: System.Windows.Forms.KeyPressEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.KeyPressEventArgs.Handled\n  id: Handled\n  parent: System.Windows.Forms.KeyPressEventArgs\n  langs:\n  - csharp\n  name: Handled\n  nameWithType: KeyPressEventArgs.Handled\n  fullName: System.Windows.Forms.KeyPressEventArgs.Handled\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets a value indicating whether the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event was handled.\n  remarks: If the event is not handled, it will be sent to the operating system for default processing. Set Handled to `true` to cancel the `KeyPress` event.\n  example:\n  - \"The following example creates a <xref:System.Windows.Forms.TextBox> control. The `keypressed` method uses the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to check whether the ENTER key is pressed. If the ENTER key is pressed, the Handled property is set to `true`, which indicates the event is handled.  \\n  \\n [!code-vb[KeyPressEventArgs#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_4_1.vb)]\\n [!code-cs[KeyPressEventArgs#1](~/add/codesnippet/csharp/p-system.windows.forms.k_4_1.cs)]\\n [!code-cpp[KeyPressEventArgs#1](~/add/codesnippet/cpp/p-system.windows.forms.k_4_1.cpp)]\"\n  syntax:\n    content: public bool Handled { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is handled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Forms.KeyPressEventArgs.Handled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.KeyPressEventArgs.KeyChar\n  id: KeyChar\n  parent: System.Windows.Forms.KeyPressEventArgs\n  langs:\n  - csharp\n  name: KeyChar\n  nameWithType: KeyPressEventArgs.KeyChar\n  fullName: System.Windows.Forms.KeyPressEventArgs.KeyChar\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets the character corresponding to the key pressed.\n  remarks: \"Use the KeyChar property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances. For example, you can use KeyChar to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.  \\n  \\n You can get or set the following keys:  \\n  \\n-   a-z, A-Z.  \\n  \\n-   CTRL.  \\n  \\n-   Punctuation marks.  \\n  \\n-   Number keys, both across the top of the keyboard and on the numeric keypad.  \\n  \\n-   ENTER.  \\n  \\n You cannot get or set the following keys:  \\n  \\n-   The TAB key.  \\n  \\n-   INSERT and DELETE.  \\n  \\n-   HOME.  \\n  \\n-   END.  \\n  \\n-   PAGE UP and PAGE DOWN.  \\n  \\n-   F1-F2.  \\n  \\n-   ALT.  \\n  \\n-   Arrow keys.  \\n  \\n> [!NOTE]\\n>  For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class.  \\n  \\n-\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Forms.TextBox> control. The `keypressed` method uses the KeyChar property to check whether the ENTER key pressed. If the ENTER key is pressed, the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> property is set to `true`, which indicates the event is handled.  \\n  \\n [!code-vb[KeyPressEventArgs#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_2_1.vb)]\\n [!code-cs[KeyPressEventArgs#1](~/add/codesnippet/csharp/p-system.windows.forms.k_2_1.cs)]\\n [!code-cpp[KeyPressEventArgs#1](~/add/codesnippet/cpp/p-system.windows.forms.k_2_1.cpp)]\"\n  syntax:\n    content: public char KeyChar { get; set; }\n    return:\n      type: System.Char\n      description: The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.\n  overload: System.Windows.Forms.KeyPressEventArgs.KeyChar*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EventArgs\n  isExternal: false\n  name: System.EventArgs\n- uid: System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyPressEventArgs(Char)\n  nameWithType: KeyPressEventArgs.KeyPressEventArgs(Char)\n  fullName: System.Windows.Forms.KeyPressEventArgs.KeyPressEventArgs(Char)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Windows.Forms.KeyPressEventArgs.Handled\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: KeyPressEventArgs.Handled\n  fullName: System.Windows.Forms.KeyPressEventArgs.Handled\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Forms.KeyPressEventArgs.KeyChar\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyChar\n  nameWithType: KeyPressEventArgs.KeyChar\n  fullName: System.Windows.Forms.KeyPressEventArgs.KeyChar\n- uid: System.Windows.Forms.KeyPressEventArgs.#ctor*\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyPressEventArgs\n  nameWithType: KeyPressEventArgs.KeyPressEventArgs\n- uid: System.Windows.Forms.KeyPressEventArgs.Handled*\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: KeyPressEventArgs.Handled\n- uid: System.Windows.Forms.KeyPressEventArgs.KeyChar*\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyChar\n  nameWithType: KeyPressEventArgs.KeyChar\n"}