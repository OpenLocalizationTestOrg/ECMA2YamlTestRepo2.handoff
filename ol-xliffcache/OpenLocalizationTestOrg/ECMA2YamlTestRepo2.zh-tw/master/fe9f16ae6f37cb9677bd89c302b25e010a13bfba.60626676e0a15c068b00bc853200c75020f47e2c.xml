{"nodes":[{"pos":[1658,1763],"content":"Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,105]}]},{"pos":[1775,1881],"content":"This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class serves as the abstract base class for &lt;xref:System.Security.Cryptography.ECDsaCng&gt; derivations.","pos":[0,106],"source":"This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations."}]},{"pos":[3089,3185],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> class."},{"pos":[3197,3520],"content":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. You may provide your own custom implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is called by classes that derive from the &lt;xref:System.Security.Cryptography.ECDsa&gt; class.","pos":[0,107],"source":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class."},{"content":"The &lt;xref:System.Security.Cryptography.ECDsaCng&gt; class is the only implementation currently supported by the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph>.","pos":[108,275],"source":" The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."},{"content":"You may provide your own custom implementation.","pos":[276,323]}]},{"pos":[4006,4117],"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,111]}]},{"pos":[4298,4418],"content":"A new instance of the default implementation (<bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) of this class.","needQuote":true,"needEscape":true,"source":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class."},{"pos":[4891,5004],"content":"Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,113]}]},{"pos":[5017,5418],"content":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation.       If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you develop your own implementation of an &lt;xref:System.Security.Cryptography.ECDsa&gt; object, you can use the Create method overload to create a custom <ph id=\"ph1\">`algorithm`</ph> string that specifies your implementation.","pos":[0,207],"source":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation."},{"content":"If you specify a custom value for the <ph id=\"ph1\">`algorithm`</ph> parameter, the &lt;xref:System.Security.Cryptography.CryptoConfig&gt; object will use it to determine whether an ECDSA object can be created.","pos":[214,399],"source":"       If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created."}]},{"pos":[6069,6285],"content":"A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new instance of the specified implementation of this class.","pos":[0,61]},{"content":"If the specified algorithm name does not map to an ECDSA implementation, this method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[62,216],"source":" If the specified algorithm name does not map to an ECDSA implementation, this method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[6457,6558],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>algorithm</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7123,7255],"content":"When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.","pos":[0,132]}]},{"pos":[7479,7505],"content":"The binary stream to hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The binary stream to hash.","pos":[0,26]}]},{"pos":[7608,7646],"content":"The algorithm to use to hash the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to use to hash the data.","pos":[0,38]}]},{"pos":[7704,7720],"content":"The hashed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hashed data.","pos":[0,16]}]},{"pos":[7898,7940],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[8587,8729],"content":"When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.","pos":[0,142]}]},{"pos":[8963,8985],"content":"The data to be hashed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to be hashed.","pos":[0,22]}]},{"pos":[9047,9098],"content":"The index of the first byte in <ph id=\"ph1\">`data`</ph> to be hashed.","needQuote":true,"needEscape":true,"source":"The index of the first byte in `data` to be hashed."},{"pos":[9159,9187],"content":"The number of bytes to hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]},{"pos":[9290,9328],"content":"The algorithm to use to hash the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to use to hash the data.","pos":[0,38]}]},{"pos":[9386,9402],"content":"The hashed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hashed data.","pos":[0,16]}]},{"pos":[9580,9622],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[10041,10085],"content":"Gets the name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]},{"pos":[10098,10381],"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.       The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property is inherited from the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; base class.","pos":[0,103],"source":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."},{"content":"The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns <ph id=\"ph1\">`null`</ph>.","pos":[110,281],"source":"       The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`."}]},{"pos":[10516,10584],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11079,11120],"content":"Gets the name of the signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]},{"pos":[11252,11271],"content":"The string \"ECDsa\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The string \"ECDsa\".","pos":[0,19]}]},{"pos":[11914,12036],"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","pos":[0,122]}]},{"pos":[12244,12289],"content":"The input data for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]},{"pos":[12392,12443],"content":"The hash algorithm to use to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]},{"pos":[12501,12544],"content":"The ECDSA signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ECDSA signature for the specified data.","pos":[0,43]}]},{"pos":[12718,12800],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12895,13107],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[13672,13790],"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","pos":[0,118]}]},{"pos":[14011,14058],"content":"The input stream for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input stream for which to compute the hash.","pos":[0,47]}]},{"pos":[14161,14212],"content":"The hash algorithm to use to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]},{"pos":[14270,14313],"content":"The ECDSA signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ECDSA signature for the specified data.","pos":[0,43]}]},{"pos":[14487,14569],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14664,14876],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[15523,15658],"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","pos":[0,135]}]},{"pos":[15889,15934],"content":"The input data for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]},{"pos":[15996,16051],"content":"The offset into the array at which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the array at which to begin using data.","pos":[0,55]}]},{"pos":[16112,16160],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[16263,16314],"content":"The hash algorithm to use to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]},{"pos":[16372,16415],"content":"The ECDSA signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ECDSA signature for the specified data.","pos":[0,43]}]},{"pos":[16589,16671],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16766,16978],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[17094,17330],"content":"<code>offset</code> is less than zero.       -or-       <code>count</code> is less than zero.       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","pos":[0,38],"source":"<code>offset</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","pos":[45,93],"source":"       -or-       <code>count</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","pos":[100,228],"source":"       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}]},{"pos":[17742,17801],"content":"Generates a digital signature for the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a digital signature for the specified hash value.","pos":[0,59]}]},{"pos":[17948,17996],"content":"The hash value of the data that is being signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the data that is being signed.","pos":[0,48]}]},{"pos":[18054,18143],"content":"A digital signature that consists of the given hash value encrypted with the private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A digital signature that consists of the given hash value encrypted with the private key.","pos":[0,89]}]},{"pos":[18317,18413],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>hash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19031,19204],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","pos":[0,173]}]},{"pos":[19422,19438],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[19504,19538],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[19641,19702],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[19761,19923],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20100,20303],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,187],"source":"       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[20399,20611],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[21235,21410],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","pos":[0,175]}]},{"pos":[21641,21657],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[21723,21757],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[21860,21921],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[21980,22142],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22319,22522],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,187],"source":"       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[22618,22830],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[23536,23728],"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","pos":[0,192]}]},{"pos":[23977,23993],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[24055,24103],"content":"The starting index at which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting index at which to compute the hash.","pos":[0,48]}]},{"pos":[24164,24192],"content":"The number of bytes to hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]},{"pos":[24258,24292],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[24395,24456],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[24515,24677],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24854,25057],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,187],"source":"       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[25153,25365],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[25481,25717],"content":"<code>offset</code> is less than zero.       -or-       <code>count</code> is less than zero.       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","pos":[0,38],"source":"<code>offset</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","pos":[45,93],"source":"       -or-       <code>count</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","pos":[100,228],"source":"       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}]},{"pos":[26188,26250],"content":"Verifies a digital signature against the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies a digital signature against the specified hash value.","pos":[0,62]}]},{"pos":[26262,26373],"content":"The signature is first decrypted by using the public key, and then compared to the hash value for verification.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature is first decrypted by using the public key, and then compared to the hash value for verification.","pos":[0,111]}]},{"pos":[26538,26572],"content":"The hash value of a block of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of a block of data.","pos":[0,34]}]},{"pos":[26638,26675],"content":"The digital signature to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digital signature to be verified.","pos":[0,37]}]},{"pos":[26734,26919],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the hash value equals the decrypted signature; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the hash value equals the decrypted signature; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDsa\n  id: ECDsa\n  children:\n  - System.Security.Cryptography.ECDsa.#ctor\n  - System.Security.Cryptography.ECDsa.Create\n  - System.Security.Cryptography.ECDsa.Create(System.String)\n  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n  type: Class\n  summary: Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  remarks: This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.\n  syntax:\n    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ECDsa()\n  nameWithType: ECDsa.ECDsa()\n  fullName: System.Security.Cryptography.ECDsa.ECDsa()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> class.\n  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. You may provide your own custom implementation.\n  syntax:\n    content: protected ECDsa ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDsa.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.Create\n  id: Create\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: System.Security.Cryptography.ECDsa.Create()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.\n  overload: System.Security.Cryptography.ECDsa.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: System.Security.Cryptography.ECDsa.Create(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  remarks: \"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation.  \\n  \\n If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created.\"\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: \"The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:  \\n  \\n \\\\- \\\"ECDsa\\\"  \\n  \\n \\\\- \\\"ECDsaCng\\\"  \\n  \\n \\\\- \\\"System.Security.Cryptography.ECDsaCng\\\"  \\n  \\n You can also provide the name of a custom ECDSA implementation.\"\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsa.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>algorithm</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The binary stream to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use to hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.ECDsa.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to be hashed.\n    - id: offset\n      type: System.Int32\n      description: The index of the first byte in `data` to be hashed.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use to hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.ECDsa.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  remarks: \"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \\n  \\n The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`.\"\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The string \"ECDsa\".\n  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The ECDSA signature for the specified data.\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The input stream for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The ECDSA signature for the specified data.\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array at which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The ECDSA signature for the specified data.\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignHash(Byte[])\n  nameWithType: ECDsa.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Generates a digital signature for the specified hash value.\n  syntax:\n    content: public abstract byte[] SignHash (byte[] hash);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data that is being signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature that consists of the given hash value encrypted with the private key.\n  overload: System.Security.Cryptography.ECDsa.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>signature</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Stream,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>signature</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: offset\n      type: System.Int32\n      description: The starting index at which to compute the hash.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>signature</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyHash(Byte[],Byte[])\n  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies a digital signature against the specified hash value.\n  remarks: The signature is first decrypted by using the public key, and then compared to the hash value for verification.\n  syntax:\n    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of a block of data.\n    - id: signature\n      type: System.Byte[]\n      description: The digital signature to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the hash value equals the decrypted signature; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDsa.VerifyHash*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ECDsa()\n  nameWithType: ECDsa.ECDsa()\n  fullName: System.Security.Cryptography.ECDsa.ECDsa()\n- uid: System.Security.Cryptography.ECDsa.Create\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: System.Security.Cryptography.ECDsa.Create()\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: System.Security.Cryptography.ECDsa.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignHash(Byte[])\n  nameWithType: ECDsa.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Stream,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyHash(Byte[],Byte[])\n  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDsa.#ctor*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa.ECDsa\n- uid: System.Security.Cryptography.ECDsa.Create*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create\n  nameWithType: ECDsa.Create\n- uid: System.Security.Cryptography.ECDsa.HashData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData\n  nameWithType: ECDsa.HashData\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n- uid: System.Security.Cryptography.ECDsa.SignData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData\n  nameWithType: ECDsa.SignData\n- uid: System.Security.Cryptography.ECDsa.SignHash*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignHash\n  nameWithType: ECDsa.SignHash\n- uid: System.Security.Cryptography.ECDsa.VerifyData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData\n  nameWithType: ECDsa.VerifyData\n- uid: System.Security.Cryptography.ECDsa.VerifyHash*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyHash\n  nameWithType: ECDsa.VerifyHash\n"}