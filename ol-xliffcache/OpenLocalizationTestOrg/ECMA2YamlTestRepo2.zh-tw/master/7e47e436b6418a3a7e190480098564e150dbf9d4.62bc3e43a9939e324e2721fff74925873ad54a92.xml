{"nodes":[{"pos":[883,1094],"content":"Represents an access control list (ACL) and is the base class for the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DiscretionaryAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.SystemAcl\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> classes.","needQuote":true,"needEscape":true,"source":"Represents an access control list (ACL) and is the base class for the <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> and <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> classes."},{"pos":[1107,3721],"content":"-   Certain combinations of inheritance and access mask flags are meaningless:      -   Any access control entry (ACE) with a zero-access mask is removed.      -   Inherit-only ACEs inside object ACLs are removed.      -   <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.InheritanceFlags>, and <xref:System.Security.AccessControl.InheritanceFlags> flags on all ACEs in leaf object ACLs are cleared.      -   ACEs that have an <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag are meaningless; they are removed.      -   The <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag can be removed.      -   ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> in discretionary access control lists (DACLs) are removed.      -   Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> is removed.      -   On DACLs, SystemAudit and SystemAlarm ACEs are removed.      -   On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.       Canonical order is maintained according to the following algorithm:      -   Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.      -   In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.      -   All common ACEs take precedence over noncommon ACEs.      -   Inherited ACEs maintain their relative order after canonicity.      -   Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.      -   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs.       Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.","needQuote":false,"needEscape":true,"nodes":[{"content":"Certain combinations of inheritance and access mask flags are meaningless:      -   Any access control entry (ACE) with a zero-access mask is removed.      -   Inherit-only ACEs inside object ACLs are removed.      -   <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.InheritanceFlags>, and <xref:System.Security.AccessControl.InheritanceFlags> flags on all ACEs in leaf object ACLs are cleared.      -   ACEs that have an <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag are meaningless; they are removed.      -   The <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag can be removed.      -   ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> in discretionary access control lists (DACLs) are removed.      -   Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> is removed.      -   On DACLs, SystemAudit and SystemAlarm ACEs are removed.      -   On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.       Canonical order is maintained according to the following algorithm:      -   Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.      -   In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.      -   All common ACEs take precedence over noncommon ACEs.      -   Inherited ACEs maintain their relative order after canonicity.      -   Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.      -   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs.       Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.","pos":[4,2580],"nodes":[{"content":"Certain combinations of inheritance and access mask flags are meaningless:      -   Any access control entry (ACE) with a zero-access mask is removed.","pos":[0,150]},{"content":"-   Inherit-only ACEs inside object ACLs are removed.","pos":[156,209]},{"content":"-   &lt;xref:System.Security.AccessControl.PropagationFlags&gt;, &lt;xref:System.Security.AccessControl.PropagationFlags&gt;, &lt;xref:System.Security.AccessControl.InheritanceFlags&gt;, and &lt;xref:System.Security.AccessControl.InheritanceFlags&gt; flags on all ACEs in leaf object ACLs are cleared.","pos":[215,492],"source":"      -   <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.InheritanceFlags>, and <xref:System.Security.AccessControl.InheritanceFlags> flags on all ACEs in leaf object ACLs are cleared."},{"content":"-   ACEs that have an &lt;xref:System.Security.AccessControl.PropagationFlags&gt; flag in the absence of the &lt;xref:System.Security.AccessControl.InheritanceFlags&gt; or &lt;xref:System.Security.AccessControl.InheritanceFlags&gt; flag are meaningless; they are removed.","pos":[498,751],"source":"      -   ACEs that have an <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag are meaningless; they are removed."},{"content":"-   The &lt;xref:System.Security.AccessControl.PropagationFlags&gt; flag in the absence of the &lt;xref:System.Security.AccessControl.InheritanceFlags&gt; or &lt;xref:System.Security.AccessControl.InheritanceFlags&gt; flag can be removed.","pos":[757,977],"source":"      -   The <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag can be removed."},{"content":"-   ACEs that have an &lt;xref:System.Security.AccessControl.AuditFlags&gt; value of &lt;xref:System.Security.AccessControl.AuditFlags&gt; or &lt;xref:System.Security.AccessControl.AuditFlags&gt; in discretionary access control lists (DACLs) are removed.","pos":[983,1219],"source":"      -   ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> in discretionary access control lists (DACLs) are removed."},{"content":"-   Any audit ACE that does not specify either &lt;xref:System.Security.AccessControl.AuditFlags&gt; or &lt;xref:System.Security.AccessControl.AuditFlags&gt; is removed.","pos":[1225,1382],"source":"      -   Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> is removed."},{"content":"-   On DACLs, SystemAudit and SystemAlarm ACEs are removed.","pos":[1388,1447]},{"content":"-   On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.","pos":[1453,1545]},{"content":"Canonical order is maintained according to the following algorithm:      -   Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.","pos":[1552,1722]},{"content":"-   In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access.","pos":[1728,1833]},{"content":"For directory object ACLs, the nonobject ACEs come before object ACEs.","pos":[1834,1904]},{"content":"-   All common ACEs take precedence over noncommon ACEs.","pos":[1910,1966]},{"content":"-   Inherited ACEs maintain their relative order after canonicity.","pos":[1972,2038]},{"content":"-   Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.","pos":[2044,2116]},{"content":"-   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the &lt;xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A&gt; methods of the &lt;xref:System.Security.Principal.SecurityIdentifier&gt; objects associated with the ACEs.","pos":[2122,2434],"source":"      -   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs."},{"content":"Adjacent ACEs are combined, if appropriate.","pos":[2441,2484]},{"content":"This reduces the size of the ACL without affecting the access control semantics it grants.","pos":[2486,2576]}]}]},{"pos":[4992,5309],"content":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref:System.Security.AccessControl.CommonAcl.GetBinaryForm*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length, in bytes, of the binary representation of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,139],"source":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."},{"content":"This length should be used before marshaling the access control list (ACL) into a binary array by using the &lt;xref:System.Security.AccessControl.CommonAcl.GetBinaryForm*&gt; method.","pos":[140,317],"source":" This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref:System.Security.AccessControl.CommonAcl.GetBinaryForm*> method."}]},{"pos":[5438,5572],"content":"The length, in bytes, of the binary representation of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."},{"pos":[6016,6148],"content":"Gets the number of access control entries (ACEs) in the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the number of access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."},{"pos":[6270,6372],"content":"The number of ACEs in the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The number of ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."},{"pos":[6945,7106],"content":"Marshals the contents of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object into the specified byte array beginning at the specified offset.","needQuote":true,"needEscape":true,"source":"Marshals the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object into the specified byte array beginning at the specified offset."},{"pos":[7287,7407],"content":"The byte array into which the contents of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is marshaled.","needQuote":true,"needEscape":true,"source":"The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> is marshaled."},{"pos":[7469,7509],"content":"The offset at which to start marshaling.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset at which to start marshaling.","pos":[0,40]}]},{"pos":[7984,8168],"content":"Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object are in canonical order.","needQuote":true,"needEscape":true,"source":"Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order."},{"pos":[8283,8537],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the ACEs in the current <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object are in canonical order; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9010,9110],"content":"Sets whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is a container.","needQuote":true,"needEscape":true,"source":"Sets whether the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container."},{"pos":[9225,9384],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is a container.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container."},{"pos":[9822,9963],"content":"Sets whether the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is a directory object access control list (ACL).","needQuote":true,"needEscape":true,"source":"Sets whether the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object access control list (ACL)."},{"pos":[10071,10241],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is a directory object ACL.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object ACL."},{"pos":[10721,10822],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index."},{"pos":[11016,11119],"content":"The zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to get or set.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> to get or set."},{"pos":[11204,11292],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index."},{"pos":[11878,12118],"content":"Removes all access control entries (ACEs) contained by this <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that are associated with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Removes all access control entries (ACEs) contained by this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object that are associated with the specified <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object."},{"pos":[12318,12408],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to check for.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object to check for."},{"pos":[12919,13049],"content":"Removes all inherited access control entries (ACEs) from this <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Removes all inherited access control entries (ACEs) from this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."},{"pos":[13593,13685],"content":"Gets the revision level of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>."},{"pos":[13810,13925],"content":"A byte value that specifies the revision level of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A byte value that specifies the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.CommonAcl\n  id: CommonAcl\n  children:\n  - System.Security.AccessControl.CommonAcl.BinaryLength\n  - System.Security.AccessControl.CommonAcl.Count\n  - System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonAcl.IsCanonical\n  - System.Security.AccessControl.CommonAcl.IsContainer\n  - System.Security.AccessControl.CommonAcl.IsDS\n  - System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  - System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  - System.Security.AccessControl.CommonAcl.Revision\n  langs:\n  - csharp\n  name: CommonAcl\n  nameWithType: CommonAcl\n  fullName: System.Security.AccessControl.CommonAcl\n  type: Class\n  summary: Represents an access control list (ACL) and is the base class for the <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> and <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> classes.\n  remarks: \"-   Certain combinations of inheritance and access mask flags are meaningless:  \\n  \\n-   Any access control entry (ACE) with a zero-access mask is removed.  \\n  \\n-   Inherit-only ACEs inside object ACLs are removed.  \\n  \\n-   <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.InheritanceFlags>, and <xref:System.Security.AccessControl.InheritanceFlags> flags on all ACEs in leaf object ACLs are cleared.  \\n  \\n-   ACEs that have an <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag are meaningless; they are removed.  \\n  \\n-   The <xref:System.Security.AccessControl.PropagationFlags> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags> or <xref:System.Security.AccessControl.InheritanceFlags> flag can be removed.  \\n  \\n-   ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> in discretionary access control lists (DACLs) are removed.  \\n  \\n-   Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags> or <xref:System.Security.AccessControl.AuditFlags> is removed.  \\n  \\n-   On DACLs, SystemAudit and SystemAlarm ACEs are removed.  \\n  \\n-   On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.  \\n  \\n Canonical order is maintained according to the following algorithm:  \\n  \\n-   Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.  \\n  \\n-   In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.  \\n  \\n-   All common ACEs take precedence over noncommon ACEs.  \\n  \\n-   Inherited ACEs maintain their relative order after canonicity.  \\n  \\n-   Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.  \\n  \\n-   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs.  \\n  \\n Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.\"\n  syntax:\n    content: 'public abstract class CommonAcl : System.Security.AccessControl.GenericAcl'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAcl\n  implements: []\n  inheritedMembers:\n  - System.Security.AccessControl.GenericAcl.AclRevision\n  - System.Security.AccessControl.GenericAcl.AclRevisionDS\n  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.GetEnumerator\n  - System.Security.AccessControl.GenericAcl.IsSynchronized\n  - System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  - System.Security.AccessControl.GenericAcl.SyncRoot\n  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n  fullName: System.Security.AccessControl.CommonAcl.BinaryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref:System.Security.AccessControl.CommonAcl.GetBinaryForm*> method.\n  syntax:\n    content: public override sealed int BinaryLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  overload: System.Security.AccessControl.CommonAcl.BinaryLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.Count\n  id: Count\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Count\n  nameWithType: CommonAcl.Count\n  fullName: System.Security.AccessControl.CommonAcl.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the number of access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  syntax:\n    content: public override sealed int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  overload: System.Security.AccessControl.CommonAcl.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: GetBinaryForm(Byte[],Int32)\n  nameWithType: CommonAcl.GetBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Marshals the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object into the specified byte array beginning at the specified offset.\n  syntax:\n    content: public override sealed void GetBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> is marshaled.\n    - id: offset\n      type: System.Int32\n      description: The offset at which to start marshaling.\n  overload: System.Security.AccessControl.CommonAcl.GetBinaryForm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical\n  id: IsCanonical\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n  fullName: System.Security.AccessControl.CommonAcl.IsCanonical\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order.\n  syntax:\n    content: public bool IsCanonical { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.CommonAcl.IsCanonical*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.IsContainer\n  id: IsContainer\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: IsContainer\n  nameWithType: CommonAcl.IsContainer\n  fullName: System.Security.AccessControl.CommonAcl.IsContainer\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets whether the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container.\n  syntax:\n    content: public bool IsContainer { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container.\n  overload: System.Security.AccessControl.CommonAcl.IsContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.IsDS\n  id: IsDS\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: IsDS\n  nameWithType: CommonAcl.IsDS\n  fullName: System.Security.AccessControl.CommonAcl.IsDS\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets whether the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object access control list (ACL).\n  syntax:\n    content: public bool IsDS { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object ACL.\n  overload: System.Security.AccessControl.CommonAcl.IsDS*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: CommonAcl.Item(Int32)\n  fullName: System.Security.AccessControl.CommonAcl.Item(Int32)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index.\n  syntax:\n    content: public override sealed System.Security.AccessControl.GenericAce this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> to get or set.\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: The <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index.\n  overload: System.Security.AccessControl.CommonAcl.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  id: Purge(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Purge(SecurityIdentifier)\n  nameWithType: CommonAcl.Purge(SecurityIdentifier)\n  fullName: System.Security.AccessControl.CommonAcl.Purge(SecurityIdentifier)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all access control entries (ACEs) contained by this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object that are associated with the specified <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object.\n  syntax:\n    content: public void Purge (System.Security.Principal.SecurityIdentifier sid);\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object to check for.\n  overload: System.Security.AccessControl.CommonAcl.Purge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  id: RemoveInheritedAces\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: RemoveInheritedAces()\n  nameWithType: CommonAcl.RemoveInheritedAces()\n  fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all inherited access control entries (ACEs) from this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  syntax:\n    content: public void RemoveInheritedAces ();\n    parameters: []\n  overload: System.Security.AccessControl.CommonAcl.RemoveInheritedAces*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.CommonAcl.Revision\n  id: Revision\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Revision\n  nameWithType: CommonAcl.Revision\n  fullName: System.Security.AccessControl.CommonAcl.Revision\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>.\n  syntax:\n    content: public override sealed byte Revision { get; }\n    return:\n      type: System.Byte\n      description: A byte value that specifies the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>.\n  overload: System.Security.AccessControl.CommonAcl.Revision*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: System.Security.AccessControl.GenericAcl\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n  fullName: System.Security.AccessControl.CommonAcl.BinaryLength\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.CommonAcl.Count\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Count\n  nameWithType: CommonAcl.Count\n  fullName: System.Security.AccessControl.CommonAcl.Count\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: GetBinaryForm(Byte[],Int32)\n  nameWithType: CommonAcl.GetBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm(Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n  fullName: System.Security.AccessControl.CommonAcl.IsCanonical\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.CommonAcl.IsContainer\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsContainer\n  nameWithType: CommonAcl.IsContainer\n  fullName: System.Security.AccessControl.CommonAcl.IsContainer\n- uid: System.Security.AccessControl.CommonAcl.IsDS\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsDS\n  nameWithType: CommonAcl.IsDS\n  fullName: System.Security.AccessControl.CommonAcl.IsDS\n- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: CommonAcl.Item(Int32)\n  fullName: System.Security.AccessControl.CommonAcl.Item(Int32)\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Purge(SecurityIdentifier)\n  nameWithType: CommonAcl.Purge(SecurityIdentifier)\n  fullName: System.Security.AccessControl.CommonAcl.Purge(SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: RemoveInheritedAces()\n  nameWithType: CommonAcl.RemoveInheritedAces()\n  fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces()\n- uid: System.Security.AccessControl.CommonAcl.Revision\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Revision\n  nameWithType: CommonAcl.Revision\n  fullName: System.Security.AccessControl.CommonAcl.Revision\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n- uid: System.Security.AccessControl.CommonAcl.Count*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Count\n  nameWithType: CommonAcl.Count\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: GetBinaryForm\n  nameWithType: CommonAcl.GetBinaryForm\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n- uid: System.Security.AccessControl.CommonAcl.IsContainer*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsContainer\n  nameWithType: CommonAcl.IsContainer\n- uid: System.Security.AccessControl.CommonAcl.IsDS*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsDS\n  nameWithType: CommonAcl.IsDS\n- uid: System.Security.AccessControl.CommonAcl.Item*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Item\n  nameWithType: CommonAcl.Item\n- uid: System.Security.AccessControl.CommonAcl.Purge*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Purge\n  nameWithType: CommonAcl.Purge\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: RemoveInheritedAces\n  nameWithType: CommonAcl.RemoveInheritedAces\n- uid: System.Security.AccessControl.CommonAcl.Revision*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Revision\n  nameWithType: CommonAcl.Revision\n"}