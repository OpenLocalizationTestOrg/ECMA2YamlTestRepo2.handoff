{"nodes":[{"pos":[1133,1211],"content":"Provides access to system event notifications. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to system event notifications. This class cannot be inherited.","pos":[0,78],"nodes":[{"content":"Provides access to system event notifications.","pos":[0,46]},{"content":"This class cannot be inherited.","pos":[47,78]}]}]},{"pos":[1224,2117],"content":"The SystemEvents class provides the ability to respond to specific types of system events.       When a system event is raised, any delegates attached to the event are called using the thread that monitors for system events. Therefore, you should make any calls from your event handlers thread-safe. If you need to call a system event that is not exposed as a member of this class, you can use the <xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A> method.      > [!CAUTION] >  Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning.      > [!NOTE] >  Some system events might not be raised on [!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)]. Be sure to verify that your application works as expected on [!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)].","needQuote":false,"needEscape":true,"nodes":[{"content":"The SystemEvents class provides the ability to respond to specific types of system events.","pos":[0,90]},{"content":"When a system event is raised, any delegates attached to the event are called using the thread that monitors for system events.","pos":[97,224]},{"content":"Therefore, you should make any calls from your event handlers thread-safe.","pos":[225,299]},{"content":"If you need to call a system event that is not exposed as a member of this class, you can use the &lt;xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A&gt; method.","pos":[300,465],"source":" If you need to call a system event that is not exposed as a member of this class, you can use the <xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning.","pos":[471,638],"source":"      > [!CAUTION] >  Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Some system events might not be raised on <ph id=\"ph2\">[!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[644,761],"source":"      > [!NOTE] >  Some system events might not be raised on [!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)]."},{"content":"Be sure to verify that your application works as expected on <ph id=\"ph1\">[!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[762,885],"source":" Be sure to verify that your application works as expected on [!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)]."}]},{"pos":[6339,6407],"content":"Creates a new window timer associated with the system events window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new window timer associated with the system events window.","pos":[0,68]}]},{"pos":[6559,6627],"content":"Specifies the interval between timer notifications, in milliseconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the interval between timer notifications, in milliseconds.","pos":[0,68]}]},{"pos":[6685,6709],"content":"The ID of the new timer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the new timer.","pos":[0,24]}]},{"pos":[6872,6915],"content":"The interval is less than or equal to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval is less than or equal to zero.","pos":[0,43]}]},{"pos":[7026,7181],"content":"System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.","needQuote":true,"needEscape":true,"nodes":[{"content":"System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.","pos":[0,155],"nodes":[{"content":"System event notifications are not supported under the current context.","pos":[0,71]},{"content":"Server processes, for example, might not support global system event notifications.","pos":[72,155]}]}]},{"pos":[7324,7444],"content":"The attempt to create a system events window thread did not succeed, or the attempt to create the timer did not succeed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attempt to create a system events window thread did not succeed, or the attempt to create the timer did not succeed.","pos":[0,120]}]},{"pos":[7841,7891],"content":"Occurs when the user changes the display settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the user changes the display settings.","pos":[0,50]}]},{"pos":[11113,11261],"content":"<ph id=\"ph1\">&gt; [!CAUTION]</ph> &gt;  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.","needQuote":true,"needEscape":true,"source":"> [!CAUTION] >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."},{"pos":[12681,12693],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12818,12973],"content":"System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.","needQuote":true,"needEscape":true,"nodes":[{"content":"System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.","pos":[0,155],"nodes":[{"content":"System event notifications are not supported under the current context.","pos":[0,71]},{"content":"Server processes, for example, might not support global system event notifications.","pos":[72,155]}]}]},{"pos":[13116,13184],"content":"The attempt to create a system events window thread did not succeed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attempt to create a system events window thread did not succeed.","pos":[0,68]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SystemEvents\n  id: SystemEvents\n  children:\n  - Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)\n  - Microsoft.Win32.SystemEvents.DisplaySettingsChanged\n  - Microsoft.Win32.SystemEvents.DisplaySettingsChanging\n  - Microsoft.Win32.SystemEvents.EventsThreadShutdown\n  - Microsoft.Win32.SystemEvents.InstalledFontsChanged\n  - Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)\n  - Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)\n  - Microsoft.Win32.SystemEvents.LowMemory\n  - Microsoft.Win32.SystemEvents.PaletteChanged\n  - Microsoft.Win32.SystemEvents.PowerModeChanged\n  - Microsoft.Win32.SystemEvents.SessionEnded\n  - Microsoft.Win32.SystemEvents.SessionEnding\n  - Microsoft.Win32.SystemEvents.SessionSwitch\n  - Microsoft.Win32.SystemEvents.TimeChanged\n  - Microsoft.Win32.SystemEvents.TimerElapsed\n  - Microsoft.Win32.SystemEvents.UserPreferenceChanged\n  - Microsoft.Win32.SystemEvents.UserPreferenceChanging\n  langs:\n  - csharp\n  name: SystemEvents\n  nameWithType: SystemEvents\n  fullName: Microsoft.Win32.SystemEvents\n  type: Class\n  summary: Provides access to system event notifications. This class cannot be inherited.\n  remarks: \"The SystemEvents class provides the ability to respond to specific types of system events.  \\n  \\n When a system event is raised, any delegates attached to the event are called using the thread that monitors for system events. Therefore, you should make any calls from your event handlers thread-safe. If you need to call a system event that is not exposed as a member of this class, you can use the <xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A> method.  \\n  \\n> [!CAUTION]\\n>  Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning.  \\n  \\n> [!NOTE]\\n>  Some system events might not be raised on [!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)]. Be sure to verify that your application works as expected on [!INCLUDE[windowsver](~/add/includes/ajax-current-ext-md.md)].\"\n  example:\n  - \"This section contains two examples. The first example shows how to use system events in an ordinary application, and the second example shows how to use system events in a Windows service.  \\n  \\n **Example 1**  \\n  \\n The following code example registers interest in some system events and then waits for any of those events to occur. The output shown occurs if the user changes the display resolution.  \\n  \\n [!code-cpp[SystemEvents#1](~/add/codesnippet/cpp/t-microsoft.win32.system_1.cpp)]\\n [!code-cs[SystemEvents#1](~/add/codesnippet/csharp/t-microsoft.win32.system_1.cs)]\\n [!code-vb[SystemEvents#1](~/add/codesnippet/visualbasic/t-microsoft.win32.system_1.vb)]  \\n  \\n **Example 2**  \\n  \\n The following code example demonstrates a very simple Windows service that handles the <xref:Microsoft.Win32.SystemEvents.TimeChanged> and <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged> events. The example includes a service named `SimpleService`, a form named `HiddenForm`, and an installer. The form provides the message loop that is required by system events.  \\n  \\n> [!NOTE]\\n>  Services do not have message loops, unless they are allowed to interact with the desktop. If the message loop is not provided by a hidden form, as in this example, the service must be run under the local system account, and manual intervention is required to enable interaction with the desktop. That is, the administrator must manually check the **Allow service to interact with desktop** check box on the **Log On** tab of the service properties dialog box. In that case, a message loop is automatically provided. This option is available only when the service is run under the local system account. Interaction with the desktop cannot be enabled programmatically.  \\n  \\n The service in this example starts a thread that runs an instance of `HiddenForm`. The events are hooked up and handled in the form. The events must be hooked up in the load event of the form, to make sure that the form is completely loaded first; otherwise the events will not be raised.  \\n  \\n> [!NOTE]\\n>  The example provides all the necessary code, including the form initialization code typically generated by [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] designers. If you are developing your service in [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)], you can omit the second partial class and use the **Properties** window to set the height and width of the hidden form to zero, the border style to <xref:System.Windows.Forms.FormBorderStyle?displayProperty=fullName>, and the window state to <xref:System.Windows.Forms.FormWindowState?displayProperty=fullName>.  \\n  \\n To run the example:  \\n  \\n1.  Compile the code from the command line. The name that you use for the source file is not important.  \\n  \\n2.  Install the service from the command line using the [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) utility. For example, `InstallUtil example.exe` if the source file name is `example.cs` or `example.vb`. You must be an administrator to install the service.  \\n  \\n3.  Use the Services console to start the service.  \\n  \\n4.  Change the system time, or change user preferences, such as mouse properties.  \\n  \\n5.  View the messages in the **Application** category of Event Viewer.  \\n  \\n6.  Use the Services console to stop the service.  \\n  \\n7.  Uninstall the service from the command line by using the `/u` option. For example, `InstallUtil /u example.exe`.  \\n  \\n [!code-vb[ManagedWindowsService#1](~/add/codesnippet/visualbasic/t-microsoft.win32.system_2.vb)]\\n [!code-cs[ManagedWindowsService#1](~/add/codesnippet/csharp/t-microsoft.win32.system_2.cs)]\"\n  syntax:\n    content: public sealed class SystemEvents\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)\n  id: CreateTimer(System.Int32)\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: CreateTimer(Int32)\n  nameWithType: SystemEvents.CreateTimer(Int32)\n  fullName: Microsoft.Win32.SystemEvents.CreateTimer(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Creates a new window timer associated with the system events window.\n  syntax:\n    content: public static IntPtr CreateTimer (int interval);\n    parameters:\n    - id: interval\n      type: System.Int32\n      description: Specifies the interval between timer notifications, in milliseconds.\n    return:\n      type: System.IntPtr\n      description: The ID of the new timer.\n  overload: Microsoft.Win32.SystemEvents.CreateTimer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The interval is less than or equal to zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed, or the attempt to create the timer did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanged\n  id: DisplaySettingsChanged\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: DisplaySettingsChanged\n  nameWithType: SystemEvents.DisplaySettingsChanged\n  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user changes the display settings.\n  remarks: >-\n    > [!CAUTION]\n\n    >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\n  example:\n  - \"The following code example demonstrates how to monitor the DisplaySettingsChanged event. This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n [!code-cpp[SystemEvents#2](~/add/codesnippet/cpp/e-microsoft.win32.system_1_1.cpp)]\\n [!code-cs[SystemEvents#2](~/add/codesnippet/csharp/e-microsoft.win32.system_1_1.cs)]\\n [!code-vb[SystemEvents#2](~/add/codesnippet/visualbasic/e-microsoft.win32.system_1_1.vb)]\"\n  syntax:\n    content: public static event EventHandler DisplaySettingsChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanging\n  id: DisplaySettingsChanging\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: DisplaySettingsChanging\n  nameWithType: SystemEvents.DisplaySettingsChanging\n  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanging\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the display settings are changing.\n  remarks: >-\n    > [!CAUTION]\n\n    >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\n  syntax:\n    content: public static event EventHandler DisplaySettingsChanging;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.EventsThreadShutdown\n  id: EventsThreadShutdown\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: EventsThreadShutdown\n  nameWithType: SystemEvents.EventsThreadShutdown\n  fullName: Microsoft.Win32.SystemEvents.EventsThreadShutdown\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs before the thread that listens for system events is terminated.\n  remarks: \"This event is raised as the thread that listens for system events is about to be terminated. System event delegates are invoked using the thread that listens for system events.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event EventHandler EventsThreadShutdown;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.InstalledFontsChanged\n  id: InstalledFontsChanged\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: InstalledFontsChanged\n  nameWithType: SystemEvents.InstalledFontsChanged\n  fullName: Microsoft.Win32.SystemEvents.InstalledFontsChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user adds fonts to or removes fonts from the system.\n  remarks: >-\n    > [!CAUTION]\n\n    >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\n  syntax:\n    content: public static event EventHandler InstalledFontsChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)\n  id: InvokeOnEventsThread(System.Delegate)\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: InvokeOnEventsThread(Delegate)\n  nameWithType: SystemEvents.InvokeOnEventsThread(Delegate)\n  fullName: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(Delegate)\n  type: Method\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Invokes the specified delegate using the thread that listens for system events.\n  remarks: \"You can use this method any time that you need to handle a system event that is not exposed otherwise by the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n When you call this method, the specified delegate will be invoked by the thread that your application is using to process system events.\"\n  syntax:\n    content: public static void InvokeOnEventsThread (Delegate method);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A delegate to invoke using the thread that listens for system events.\n  overload: Microsoft.Win32.SystemEvents.InvokeOnEventsThread*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)\n  id: KillTimer(System.IntPtr)\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: KillTimer(IntPtr)\n  nameWithType: SystemEvents.KillTimer(IntPtr)\n  fullName: Microsoft.Win32.SystemEvents.KillTimer(IntPtr)\n  type: Method\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Terminates the timer specified by the given id.\n  syntax:\n    content: public static void KillTimer (IntPtr timerId);\n    parameters:\n    - id: timerId\n      type: System.IntPtr\n      description: The ID of the timer to terminate.\n  overload: Microsoft.Win32.SystemEvents.KillTimer*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed, or the attempt to terminate the timer did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.LowMemory\n  id: LowMemory\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: LowMemory\n  nameWithType: SystemEvents.LowMemory\n  fullName: Microsoft.Win32.SystemEvents.LowMemory\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the system is running out of available RAM.\n  remarks: \"This event wraps the WM_COMPACTING message. This message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.  \\n  \\n> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event EventHandler LowMemory;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.PaletteChanged\n  id: PaletteChanged\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: PaletteChanged\n  nameWithType: SystemEvents.PaletteChanged\n  fullName: Microsoft.Win32.SystemEvents.PaletteChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user switches to an application that uses a different palette.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  example:\n  - \"The following code example demonstrates how to monitor the PaletteChanged event. This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n [!code-cpp[SystemEvents#2](~/add/codesnippet/cpp/e-microsoft.win32.system_2_1.cpp)]\\n [!code-cs[SystemEvents#2](~/add/codesnippet/csharp/e-microsoft.win32.system_2_1.cs)]\\n [!code-vb[SystemEvents#2](~/add/codesnippet/visualbasic/e-microsoft.win32.system_2_1.vb)]\"\n  syntax:\n    content: public static event EventHandler PaletteChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.PowerModeChanged\n  id: PowerModeChanged\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: PowerModeChanged\n  nameWithType: SystemEvents.PowerModeChanged\n  fullName: Microsoft.Win32.SystemEvents.PowerModeChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user suspends or resumes the system.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event Microsoft.Win32.PowerModeChangedEventHandler PowerModeChanged;\n    return:\n      type: Microsoft.Win32.PowerModeChangedEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.SessionEnded\n  id: SessionEnded\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: SessionEnded\n  nameWithType: SystemEvents.SessionEnded\n  fullName: Microsoft.Win32.SystemEvents.SessionEnded\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user is logging off or shutting down the system.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event Microsoft.Win32.SessionEndedEventHandler SessionEnded;\n    return:\n      type: Microsoft.Win32.SessionEndedEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.SessionEnding\n  id: SessionEnding\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: SessionEnding\n  nameWithType: SystemEvents.SessionEnding\n  fullName: Microsoft.Win32.SystemEvents.SessionEnding\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user is trying to log off or shut down the system.\n  remarks: \"This is a cancelable event. Setting the <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> property to `true` will request that the session continues to run. It provides no guarantee that the session will not end.  \\n  \\n If you are using SessionEnding in a Windows form to detect a system logoff or reboot, there is no deterministic way to decide whether the <xref:System.Windows.Forms.Form.Closing> event will fire before this event.  \\n  \\n If you want to perform some special tasks before <xref:System.Windows.Forms.Form.Closing> is fired, you need to ensure that SessionEnding fires before <xref:System.Windows.Forms.Form.Closing>. To do this, you need to trap the `WM_QUERYENDSESSION` in the form by overriding the `WndProc` function.  This example demonstrates how to do this.  \\n  \\n```vb#  \\nPrivate Shared WM_QUERYENDSESSION As Integer = &H11  \\n Private Shared systemShutdown As Boolean = False  \\n Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)  \\n     If m.Msg = WM_QUERYENDSESSION Then  \\n         MessageBox.Show(\\\"queryendsession: this is a logoff, shutdown, or reboot\\\")  \\n         systemShutdown = True  \\n     End If  \\n     ' If this is WM_QUERYENDSESSION, the closing event should be raised in the base WndProc.  \\n     MyBase.WndProc(m)  \\n End Sub 'WndProc   \\n Private Sub Form1_Closing(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing  \\n     If (systemShutdown) Then  \\n     ' Reset the variable because the user might cancel the shutdown.  \\n         systemShutdown = False  \\n         If (System.Windows.Forms.DialogResult.Yes = _  \\n                 MessageBox.Show(\\\"My application\\\", \\\"Do you want to save your work before logging off?\\\", MessageBoxButtons.YesNo)) Then  \\n                 e.Cancel = True  \\n         Else  \\n                 e.Cancel = False  \\n         End If  \\n     End If  \\n End Sub  \\n  \\n```  \\n  \\n```c#  \\nprivate static int WM_QUERYENDSESSION = 0x11;  \\nprivate static bool systemShutdown = false;  \\nprotected override void WndProc(ref System.Windows.Forms.Message m)  \\n{  \\n    if (m.Msg==WM_QUERYENDSESSION)  \\n    {  \\n        MessageBox.Show(\\\"queryendsession: this is a logoff, shutdown, or reboot\\\");  \\n        systemShutdown = true;  \\n    }  \\n  \\n    // If this is WM_QUERYENDSESSION, the closing event should be  \\n    // raised in the base WndProc.  \\n    base.WndProc(ref m);  \\n  \\n} //WndProc   \\n  \\nprivate void Form1_Closing(  \\n    System.Object sender,   \\n    System.ComponentModel.CancelEventArgs e)  \\n{  \\n    if (systemShutdown)  \\n        // Reset the variable because the user might cancel the   \\n        // shutdown.  \\n    {  \\n        systemShutdown = false;  \\n        if (DialogResult.Yes==MessageBox.Show(\\\"My application\\\",   \\n            \\\"Do you want to save your work before logging off?\\\",   \\n            MessageBoxButtons.YesNo))  \\n        {  \\n            e.Cancel = true;  \\n        }  \\n        else  \\n        {  \\n            e.Cancel = false;  \\n        }  \\n    }  \\n}  \\n```  \\n  \\n> [!IMPORTANT]\\n>  Console applications do not raise the SessionEnding event.  \\n  \\n> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event Microsoft.Win32.SessionEndingEventHandler SessionEnding;\n    return:\n      type: Microsoft.Win32.SessionEndingEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.SessionSwitch\n  id: SessionSwitch\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: SessionSwitch\n  nameWithType: SystemEvents.SessionSwitch\n  fullName: Microsoft.Win32.SystemEvents.SessionSwitch\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the currently logged-in user has changed.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event Microsoft.Win32.SessionSwitchEventHandler SessionSwitch;\n    return:\n      type: Microsoft.Win32.SessionSwitchEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.TimeChanged\n  id: TimeChanged\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: TimeChanged\n  nameWithType: SystemEvents.TimeChanged\n  fullName: Microsoft.Win32.SystemEvents.TimeChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when the user changes the time on the system clock.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event EventHandler TimeChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.TimerElapsed\n  id: TimerElapsed\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: TimerElapsed\n  nameWithType: SystemEvents.TimerElapsed\n  fullName: Microsoft.Win32.SystemEvents.TimerElapsed\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when a windows timer interval has expired.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event Microsoft.Win32.TimerElapsedEventHandler TimerElapsed;\n    return:\n      type: Microsoft.Win32.TimerElapsedEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanged\n  id: UserPreferenceChanged\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: UserPreferenceChanged\n  nameWithType: SystemEvents.UserPreferenceChanged\n  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when a user preference has changed.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  syntax:\n    content: public static event Microsoft.Win32.UserPreferenceChangedEventHandler UserPreferenceChanged;\n    return:\n      type: Microsoft.Win32.UserPreferenceChangedEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\n- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanging\n  id: UserPreferenceChanging\n  parent: Microsoft.Win32.SystemEvents\n  langs:\n  - csharp\n  name: UserPreferenceChanging\n  nameWithType: SystemEvents.UserPreferenceChanging\n  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanging\n  type: Event\n  assemblies:\n  - System\n  namespace: Microsoft.Win32\n  summary: Occurs when a user preference is changing.\n  remarks: \"> [!NOTE]\\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n> [!CAUTION]\\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.\"\n  example:\n  - \"The following code example demonstrates how to monitor the UserPreferenceChanging event. This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.  \\n  \\n [!code-cpp[SystemEvents#2](~/add/codesnippet/cpp/e-microsoft.win32.system_0_1.cpp)]\\n [!code-cs[SystemEvents#2](~/add/codesnippet/csharp/e-microsoft.win32.system_0_1.cs)]\\n [!code-vb[SystemEvents#2](~/add/codesnippet/visualbasic/e-microsoft.win32.system_0_1.vb)]\"\n  syntax:\n    content: public static event Microsoft.Win32.UserPreferenceChangingEventHandler UserPreferenceChanging;\n    return:\n      type: Microsoft.Win32.UserPreferenceChangingEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.\n  - type: System.Runtime.InteropServices.ExternalException\n    commentId: T:System.Runtime.InteropServices.ExternalException\n    description: The attempt to create a system events window thread did not succeed.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Runtime.InteropServices.ExternalException\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: ExternalException\n  nameWithType: ExternalException\n  fullName: System.Runtime.InteropServices.ExternalException\n- uid: Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: CreateTimer(Int32)\n  nameWithType: SystemEvents.CreateTimer(Int32)\n  fullName: Microsoft.Win32.SystemEvents.CreateTimer(Int32)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanged\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: DisplaySettingsChanged\n  nameWithType: SystemEvents.DisplaySettingsChanged\n  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanging\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: DisplaySettingsChanging\n  nameWithType: SystemEvents.DisplaySettingsChanging\n  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanging\n- uid: Microsoft.Win32.SystemEvents.EventsThreadShutdown\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: EventsThreadShutdown\n  nameWithType: SystemEvents.EventsThreadShutdown\n  fullName: Microsoft.Win32.SystemEvents.EventsThreadShutdown\n- uid: Microsoft.Win32.SystemEvents.InstalledFontsChanged\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: InstalledFontsChanged\n  nameWithType: SystemEvents.InstalledFontsChanged\n  fullName: Microsoft.Win32.SystemEvents.InstalledFontsChanged\n- uid: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: InvokeOnEventsThread(Delegate)\n  nameWithType: SystemEvents.InvokeOnEventsThread(Delegate)\n  fullName: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(Delegate)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: KillTimer(IntPtr)\n  nameWithType: SystemEvents.KillTimer(IntPtr)\n  fullName: Microsoft.Win32.SystemEvents.KillTimer(IntPtr)\n- uid: Microsoft.Win32.SystemEvents.LowMemory\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: LowMemory\n  nameWithType: SystemEvents.LowMemory\n  fullName: Microsoft.Win32.SystemEvents.LowMemory\n- uid: Microsoft.Win32.SystemEvents.PaletteChanged\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: PaletteChanged\n  nameWithType: SystemEvents.PaletteChanged\n  fullName: Microsoft.Win32.SystemEvents.PaletteChanged\n- uid: Microsoft.Win32.SystemEvents.PowerModeChanged\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: PowerModeChanged\n  nameWithType: SystemEvents.PowerModeChanged\n  fullName: Microsoft.Win32.SystemEvents.PowerModeChanged\n- uid: Microsoft.Win32.PowerModeChangedEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: PowerModeChangedEventHandler\n  nameWithType: PowerModeChangedEventHandler\n  fullName: Microsoft.Win32.PowerModeChangedEventHandler\n- uid: Microsoft.Win32.SystemEvents.SessionEnded\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: SessionEnded\n  nameWithType: SystemEvents.SessionEnded\n  fullName: Microsoft.Win32.SystemEvents.SessionEnded\n- uid: Microsoft.Win32.SessionEndedEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: SessionEndedEventHandler\n  nameWithType: SessionEndedEventHandler\n  fullName: Microsoft.Win32.SessionEndedEventHandler\n- uid: Microsoft.Win32.SystemEvents.SessionEnding\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: SessionEnding\n  nameWithType: SystemEvents.SessionEnding\n  fullName: Microsoft.Win32.SystemEvents.SessionEnding\n- uid: Microsoft.Win32.SessionEndingEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: SessionEndingEventHandler\n  nameWithType: SessionEndingEventHandler\n  fullName: Microsoft.Win32.SessionEndingEventHandler\n- uid: Microsoft.Win32.SystemEvents.SessionSwitch\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: SessionSwitch\n  nameWithType: SystemEvents.SessionSwitch\n  fullName: Microsoft.Win32.SystemEvents.SessionSwitch\n- uid: Microsoft.Win32.SessionSwitchEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: SessionSwitchEventHandler\n  nameWithType: SessionSwitchEventHandler\n  fullName: Microsoft.Win32.SessionSwitchEventHandler\n- uid: Microsoft.Win32.SystemEvents.TimeChanged\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: TimeChanged\n  nameWithType: SystemEvents.TimeChanged\n  fullName: Microsoft.Win32.SystemEvents.TimeChanged\n- uid: Microsoft.Win32.SystemEvents.TimerElapsed\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: TimerElapsed\n  nameWithType: SystemEvents.TimerElapsed\n  fullName: Microsoft.Win32.SystemEvents.TimerElapsed\n- uid: Microsoft.Win32.TimerElapsedEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: TimerElapsedEventHandler\n  nameWithType: TimerElapsedEventHandler\n  fullName: Microsoft.Win32.TimerElapsedEventHandler\n- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanged\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: UserPreferenceChanged\n  nameWithType: SystemEvents.UserPreferenceChanged\n  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanged\n- uid: Microsoft.Win32.UserPreferenceChangedEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: UserPreferenceChangedEventHandler\n  nameWithType: UserPreferenceChangedEventHandler\n  fullName: Microsoft.Win32.UserPreferenceChangedEventHandler\n- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanging\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: UserPreferenceChanging\n  nameWithType: SystemEvents.UserPreferenceChanging\n  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanging\n- uid: Microsoft.Win32.UserPreferenceChangingEventHandler\n  parent: Microsoft.Win32\n  isExternal: false\n  name: UserPreferenceChangingEventHandler\n  nameWithType: UserPreferenceChangingEventHandler\n  fullName: Microsoft.Win32.UserPreferenceChangingEventHandler\n- uid: Microsoft.Win32.SystemEvents.CreateTimer*\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: CreateTimer\n  nameWithType: SystemEvents.CreateTimer\n- uid: Microsoft.Win32.SystemEvents.InvokeOnEventsThread*\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: InvokeOnEventsThread\n  nameWithType: SystemEvents.InvokeOnEventsThread\n- uid: Microsoft.Win32.SystemEvents.KillTimer*\n  parent: Microsoft.Win32.SystemEvents\n  isExternal: false\n  name: KillTimer\n  nameWithType: SystemEvents.KillTimer\n"}