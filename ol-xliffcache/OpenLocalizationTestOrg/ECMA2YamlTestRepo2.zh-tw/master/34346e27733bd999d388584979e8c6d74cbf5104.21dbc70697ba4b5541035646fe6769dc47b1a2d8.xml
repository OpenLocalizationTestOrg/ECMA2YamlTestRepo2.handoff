{"nodes":[{"pos":[1090,1148],"content":"Represents the set of methods available in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the set of methods available in the collection.","pos":[0,58]}]},{"pos":[2302,2500],"content":"Adds a <xref href=\"System.Management.MethodData\"></xref> to the <xref href=\"System.Management.MethodDataCollection\"></xref>. This overload will add a new method with no parameters to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the <bpt id=\"p2\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,124],"source":"Adds a <xref href=\"System.Management.MethodData\"></xref> to the <xref href=\"System.Management.MethodDataCollection\"></xref>."},{"content":"This overload will add a new method with no parameters to the collection.","pos":[125,198]}]},{"pos":[2513,2951],"content":"Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Adding &lt;xref:System.Management.MethodData&gt; objects to the &lt;xref:System.Management.MethodDataCollection&gt; can only be done when the class has no instances.","pos":[0,153],"source":"Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances."},{"content":"Any other case will result in an exception.","pos":[154,197]},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[206,269]},{"content":"This member cannot be used by partially trusted code.","pos":[270,323]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[324,435],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[3103,3133],"content":"The name of the method to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method to add.","pos":[0,30]}]},{"pos":[3896,4112],"content":"Adds a <xref href=\"System.Management.MethodData\"></xref> to the <xref href=\"System.Management.MethodDataCollection\"></xref>. This overload will add a new method with the specified parameter objects to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the <bpt id=\"p2\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,124],"source":"Adds a <xref href=\"System.Management.MethodData\"></xref> to the <xref href=\"System.Management.MethodDataCollection\"></xref>."},{"content":"This overload will add a new method with the specified parameter objects to the collection.","pos":[125,216]}]},{"pos":[4125,4563],"content":"Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Adding &lt;xref:System.Management.MethodData&gt; objects to the &lt;xref:System.Management.MethodDataCollection&gt; can only be done when the class has no instances.","pos":[0,153],"source":"Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances."},{"content":"Any other case will result in an exception.","pos":[154,197]},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[206,269]},{"content":"This member cannot be used by partially trusted code.","pos":[270,323]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[324,435],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[4822,4852],"content":"The name of the method to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method to add.","pos":[0,30]}]},{"pos":[4946,5053],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Management.ManagementBaseObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> holding the input parameters to the method.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Management.ManagementBaseObject\"></xref> holding the input parameters to the method."},{"pos":[5148,5256],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Management.ManagementBaseObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> holding the output parameters to the method.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Management.ManagementBaseObject\"></xref> holding the output parameters to the method."},{"pos":[5791,5876],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> into an array.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Management.MethodDataCollection\"></xref> into an array."},{"pos":[5889,6122],"content":"## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">##</ph> .NET Framework Security    Full trust for the immediate caller.","pos":[0,66],"source":"## .NET Framework Security    Full trust for the immediate caller."},{"content":"This member cannot be used by partially trusted code.","pos":[67,120]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[121,232],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[6268,6310],"content":"The array to which to copy the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array to which to copy the collection.","pos":[0,42]}]},{"pos":[6371,6401],"content":"The index from which to start.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index from which to start.","pos":[0,30]}]},{"pos":[6996,7140],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a specialized <bpt id=\"p2\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> array.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Management.MethodDataCollection\"></xref> to a specialized <xref href=\"System.Management.MethodData\"></xref> array."},{"pos":[7153,7386],"content":"## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">##</ph> .NET Framework Security    Full trust for the immediate caller.","pos":[0,66],"source":"## .NET Framework Security    Full trust for the immediate caller."},{"content":"This member cannot be used by partially trusted code.","pos":[67,120]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[121,232],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7587,7688],"content":"The destination array to which to copy the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"The destination array to which to copy the <xref href=\"System.Management.MethodData\"></xref> objects."},{"pos":[7749,7813],"content":"The index in the destination array from which to start the copy.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index in the destination array from which to start the copy.","pos":[0,64]}]},{"pos":[8255,8360],"content":"Gets the number of objects in the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"Gets the number of objects in the <xref href=\"System.Management.MethodDataCollection\"></xref> collection."},{"pos":[8373,8711],"content":"## Property Value    The number of objects in the <xref:System.Management.MethodDataCollection>.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">##</ph> Property Value    The number of objects in the &lt;xref:System.Management.MethodDataCollection&gt;.","pos":[0,96],"source":"## Property Value    The number of objects in the <xref:System.Management.MethodDataCollection>."},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[105,168]},{"content":"This member cannot be used by partially trusted code.","pos":[169,222]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[223,334],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[8818,8908],"content":"Returns an <xref:System.Int32> value representing the number of objects in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Int32&gt; value representing the number of objects in the collection.","pos":[0,90],"source":"Returns an <xref:System.Int32> value representing the number of objects in the collection."}]},{"pos":[9393,9483],"content":"Returns an enumerator for the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an enumerator for the <xref href=\"System.Management.MethodDataCollection\"></xref>."},{"pos":[9496,10739],"content":"Each call to this method returns a new enumerator on the collection. Multiple enumerators can be obtained for the same method collection. However, each enumerator takes a snapshot of the collection, so changes made to the collection after the enumerator was obtained are not reflected.       You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.MethodDataCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.       Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to <xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>.       If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Each call to this method returns a new enumerator on the collection.","pos":[0,68]},{"content":"Multiple enumerators can be obtained for the same method collection.","pos":[69,137]},{"content":"However, each enumerator takes a snapshot of the collection, so changes made to the collection after the enumerator was obtained are not reflected.","pos":[138,285]},{"content":"You can only iterate (as in a Visual Basic .NET <ph id=\"ph1\">`For Each`</ph> statement or a C# <ph id=\"ph2\">`For`</ph> statement) through a forward-only enumerator one time.","pos":[292,429],"source":"       You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time."},{"content":"The memory containing the instances is released by WMI so that the enumerator cannot be rewound.","pos":[430,526]},{"content":"Therefore, the &lt;xref:System.Management.MethodDataCollection.Count%2A&gt; method cannot be used since it requires rewinding the enumerator.","pos":[527,662],"source":" Therefore, the <xref:System.Management.MethodDataCollection.Count%2A> method cannot be used since it requires rewinding the enumerator."},{"content":"Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to &lt;xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A&gt;.","pos":[669,878],"source":"       Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to <xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>."},{"content":"If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.","pos":[885,996]},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[1005,1068]},{"content":"This member cannot be used by partially trusted code.","pos":[1069,1122]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1123,1234],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[10971,11048],"content":"An <xref:System.Collections.IEnumerator> to enumerate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; to enumerate through the collection.","pos":[0,77],"source":"An <xref:System.Collections.IEnumerator> to enumerate through the collection."}]},{"pos":[11542,11605],"content":"Gets a value that indicates whether the object is synchronized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the object is synchronized.","pos":[0,63]}]},{"pos":[11618,11938],"content":"## Property Value    `true` if the object is synchronized; otherwise, `false`.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">##</ph> Property Value    <ph id=\"ph2\">`true`</ph> if the object is synchronized; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,78],"source":"## Property Value    `true` if the object is synchronized; otherwise, `false`."},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[87,150]},{"content":"This member cannot be used by partially trusted code.","pos":[151,204]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[205,316],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[12057,12141],"content":"Returns a <xref:System.Boolean> value indicating whether the object is synchronized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.Boolean&gt; value indicating whether the object is synchronized.","pos":[0,84],"source":"Returns a <xref:System.Boolean> value indicating whether the object is synchronized."}]},{"pos":[12640,12778],"content":"Gets the specified <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the <bpt id=\"p2\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the specified <xref href=\"System.Management.MethodData\"></xref> from the <xref href=\"System.Management.MethodDataCollection\"></xref>."},{"pos":[12791,13146],"content":"## Property Value    A <xref:System.Management.MethodData> containing all information about the specified method.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">##</ph> Property Value    A &lt;xref:System.Management.MethodData&gt; containing all information about the specified method.","pos":[0,113],"source":"## Property Value    A <xref:System.Management.MethodData> containing all information about the specified method."},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[122,185]},{"content":"This member cannot be used by partially trusted code.","pos":[186,239]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[240,351],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[13330,13363],"content":"The name of the method requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method requested.","pos":[0,33]}]},{"pos":[13436,13566],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the method data for a specified method from the collection.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Management.MethodData\"></xref> containing the method data for a specified method from the collection."},{"pos":[14063,14192],"content":"Removes a <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the <bpt id=\"p2\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes a <xref href=\"System.Management.MethodData\"></xref> from the <xref href=\"System.Management.MethodDataCollection\"></xref>."},{"pos":[14205,14647],"content":"Removing <xref:System.Management.MethodData> objects from the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Removing &lt;xref:System.Management.MethodData&gt; objects from the &lt;xref:System.Management.MethodDataCollection&gt; can only be done when the class has no instances.","pos":[0,157],"source":"Removing <xref:System.Management.MethodData> objects from the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances."},{"content":"Any other case will result in an exception.","pos":[158,201]},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[210,273]},{"content":"This member cannot be used by partially trusted code.","pos":[274,327]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[328,439],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[14802,14855],"content":"The name of the method to remove from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method to remove from the collection.","pos":[0,53]}]},{"pos":[15312,15359],"content":"Gets the object to be used for synchronization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the object to be used for synchronization.","pos":[0,47]}]},{"pos":[15372,15677],"content":"## Property Value    The object to be used for synchronization.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">##</ph> Property Value    The object to be used for synchronization.","pos":[0,63],"source":"## Property Value    The object to be used for synchronization."},{"content":".NET Framework Security    Full trust for the immediate caller.","pos":[72,135]},{"content":"This member cannot be used by partially trusted code.","pos":[136,189]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[190,301],"source":" For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[15791,15884],"content":"Returns an <xref:System.Object> value representing the object to be used for synchronization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Object&gt; value representing the object to be used for synchronization.","pos":[0,93],"source":"Returns an <xref:System.Object> value representing the object to be used for synchronization."}]},{"pos":[16541,16676],"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=\"System.Management.MethodDataCollection\"></xref>."},{"pos":[16689,19829],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,544],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[545,640],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[641,858],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[865,1061],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1062,1186],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1193,1420],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1421,1552],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[1553,1718],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1719,1943],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1950,2022]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[2023,2326],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[2327,2603],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[2610,2764]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[2765,2902]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2903,3084]},{"content":"This method is an O(1) operation.","pos":[3091,3124]}]},{"pos":[20008,20117],"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Management.MethodDataCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Management.MethodDataCollection\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Management.MethodDataCollection\n  id: MethodDataCollection\n  children:\n  - System.Management.MethodDataCollection.Add(System.String)\n  - System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)\n  - System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)\n  - System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)\n  - System.Management.MethodDataCollection.Count\n  - System.Management.MethodDataCollection.GetEnumerator\n  - System.Management.MethodDataCollection.IsSynchronized\n  - System.Management.MethodDataCollection.Item(System.String)\n  - System.Management.MethodDataCollection.Remove(System.String)\n  - System.Management.MethodDataCollection.SyncRoot\n  - System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: MethodDataCollection\n  nameWithType: MethodDataCollection\n  fullName: System.Management.MethodDataCollection\n  type: Class\n  summary: Represents the set of methods available in the collection.\n  remarks: ''\n  example:\n  - \"The following example lists information about the **Win32_Process.Create** method using the <xref:System.Management.MethodData> class. For more information on the **Win32_Process** class, see the Windows Management Instrumentation documentation in the MSDN Library at http://msdn.microsoft.com/library.  \\n  \\n [!code-vb[wminet_MethodDataCollection#1](~/add/codesnippet/visualbasic/t-system.management.meth_1_1.vb)]\\n [!code-cs[wminet_MethodDataCollection#1](~/add/codesnippet/csharp/t-system.management.meth_1_1.cs)]\"\n  syntax:\n    content: 'public class MethodDataCollection : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.Add(System.String)\n  id: Add(System.String)\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: Add(String)\n  nameWithType: MethodDataCollection.Add(String)\n  fullName: System.Management.MethodDataCollection.Add(String)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Adds a <xref href=\"System.Management.MethodData\"></xref> to the <xref href=\"System.Management.MethodDataCollection\"></xref>. This overload will add a new method with no parameters to the collection.\n  remarks: \"Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public virtual void Add (string methodName);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the method to add.\n  overload: System.Management.MethodDataCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)\n  id: Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: Add(String,ManagementBaseObject,ManagementBaseObject)\n  nameWithType: MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)\n  fullName: System.Management.MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Adds a <xref href=\"System.Management.MethodData\"></xref> to the <xref href=\"System.Management.MethodDataCollection\"></xref>. This overload will add a new method with the specified parameter objects to the collection.\n  remarks: \"Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public virtual void Add (string methodName, System.Management.ManagementBaseObject inParameters, System.Management.ManagementBaseObject outParameters);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the method to add.\n    - id: inParameters\n      type: System.Management.ManagementBaseObject\n      description: The <xref href=\"System.Management.ManagementBaseObject\"></xref> holding the input parameters to the method.\n    - id: outParameters\n      type: System.Management.ManagementBaseObject\n      description: The <xref href=\"System.Management.ManagementBaseObject\"></xref> holding the output parameters to the method.\n  overload: System.Management.MethodDataCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: MethodDataCollection.CopyTo(Array,Int32)\n  fullName: System.Management.MethodDataCollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Copies the <xref href=\"System.Management.MethodDataCollection\"></xref> into an array.\n  remarks: \"## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The array to which to copy the collection.\n    - id: index\n      type: System.Int32\n      description: The index from which to start.\n  overload: System.Management.MethodDataCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)\n  id: CopyTo(System.Management.MethodData[],System.Int32)\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: CopyTo(MethodData[],Int32)\n  nameWithType: MethodDataCollection.CopyTo(MethodData[],Int32)\n  fullName: System.Management.MethodDataCollection.CopyTo(MethodData[],Int32)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Copies the <xref href=\"System.Management.MethodDataCollection\"></xref> to a specialized <xref href=\"System.Management.MethodData\"></xref> array.\n  remarks: \"## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void CopyTo (System.Management.MethodData[] methodArray, int index);\n    parameters:\n    - id: methodArray\n      type: System.Management.MethodData[]\n      description: The destination array to which to copy the <xref href=\"System.Management.MethodData\"></xref> objects.\n    - id: index\n      type: System.Int32\n      description: The index in the destination array from which to start the copy.\n  overload: System.Management.MethodDataCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.Count\n  id: Count\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: MethodDataCollection.Count\n  fullName: System.Management.MethodDataCollection.Count\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets the number of objects in the <xref href=\"System.Management.MethodDataCollection\"></xref> collection.\n  remarks: \"## Property Value  \\n The number of objects in the <xref:System.Management.MethodDataCollection>.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Returns an <xref:System.Int32> value representing the number of objects in the collection.\n  overload: System.Management.MethodDataCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: MethodDataCollection.GetEnumerator()\n  fullName: System.Management.MethodDataCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Returns an enumerator for the <xref href=\"System.Management.MethodDataCollection\"></xref>.\n  remarks: \"Each call to this method returns a new enumerator on the collection. Multiple enumerators can be obtained for the same method collection. However, each enumerator takes a snapshot of the collection, so changes made to the collection after the enumerator was obtained are not reflected.  \\n  \\n You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.MethodDataCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.  \\n  \\n Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to <xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>.  \\n  \\n If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.Management.MethodDataCollection.MethodDataEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Management.MethodDataCollection.MethodDataEnumerator\n      description: An <xref:System.Collections.IEnumerator> to enumerate through the collection.\n  overload: System.Management.MethodDataCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: MethodDataCollection.IsSynchronized\n  fullName: System.Management.MethodDataCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets a value that indicates whether the object is synchronized.\n  remarks: \"## Property Value  \\n `true` if the object is synchronized; otherwise, `false`.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Returns a <xref:System.Boolean> value indicating whether the object is synchronized.\n  overload: System.Management.MethodDataCollection.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: MethodDataCollection.Item(String)\n  fullName: System.Management.MethodDataCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets the specified <xref href=\"System.Management.MethodData\"></xref> from the <xref href=\"System.Management.MethodDataCollection\"></xref>.\n  remarks: \"## Property Value  \\n A <xref:System.Management.MethodData> containing all information about the specified method.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public virtual System.Management.MethodData this[string methodName] { get; }\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the method requested.\n    return:\n      type: System.Management.MethodData\n      description: Returns a <xref href=\"System.Management.MethodData\"></xref> containing the method data for a specified method from the collection.\n  overload: System.Management.MethodDataCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: MethodDataCollection.Remove(String)\n  fullName: System.Management.MethodDataCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Removes a <xref href=\"System.Management.MethodData\"></xref> from the <xref href=\"System.Management.MethodDataCollection\"></xref>.\n  remarks: \"Removing <xref:System.Management.MethodData> objects from the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public virtual void Remove (string methodName);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the method to remove from the collection.\n  overload: System.Management.MethodDataCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: MethodDataCollection.SyncRoot\n  fullName: System.Management.MethodDataCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Gets the object to be used for synchronization.\n  remarks: \"## Property Value  \\n The object to be used for synchronization.  \\n  \\n## .NET Framework Security  \\n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Returns an <xref:System.Object> value representing the object to be used for synchronization.\n  overload: System.Management.MethodDataCollection.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Management.MethodDataCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Management.MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Management\n  namespace: System.Management\n  summary: Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=\"System.Management.MethodDataCollection\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Management.MethodDataCollection\"></xref>.\n  overload: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Management.MethodDataCollection.Add(System.String)\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Add(String)\n  nameWithType: MethodDataCollection.Add(String)\n  fullName: System.Management.MethodDataCollection.Add(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Add(String,ManagementBaseObject,ManagementBaseObject)\n  nameWithType: MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)\n  fullName: System.Management.MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)\n- uid: System.Management.ManagementBaseObject\n  parent: System.Management\n  isExternal: false\n  name: ManagementBaseObject\n  nameWithType: ManagementBaseObject\n  fullName: System.Management.ManagementBaseObject\n- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: MethodDataCollection.CopyTo(Array,Int32)\n  fullName: System.Management.MethodDataCollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: CopyTo(MethodData[],Int32)\n  nameWithType: MethodDataCollection.CopyTo(MethodData[],Int32)\n  fullName: System.Management.MethodDataCollection.CopyTo(MethodData[],Int32)\n- uid: System.Management.MethodData[]\n  parent: System.Management\n  isExternal: false\n  name: MethodData\n  nameWithType: MethodData\n  fullName: System.Management.MethodData[]\n  spec.csharp:\n  - uid: System.Management.MethodData\n    name: MethodData\n    nameWithType: MethodData\n    fullName: MethodData[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Management.MethodDataCollection.Count\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Count\n  nameWithType: MethodDataCollection.Count\n  fullName: System.Management.MethodDataCollection.Count\n- uid: System.Management.MethodDataCollection.GetEnumerator\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: MethodDataCollection.GetEnumerator()\n  fullName: System.Management.MethodDataCollection.GetEnumerator()\n- uid: System.Management.MethodDataCollection.MethodDataEnumerator\n  parent: System.Management\n  isExternal: false\n  name: MethodDataCollection+MethodDataEnumerator\n  nameWithType: MethodDataCollection+MethodDataEnumerator\n  fullName: System.Management.MethodDataCollection+MethodDataEnumerator\n- uid: System.Management.MethodDataCollection.IsSynchronized\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: MethodDataCollection.IsSynchronized\n  fullName: System.Management.MethodDataCollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Management.MethodDataCollection.Item(System.String)\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: MethodDataCollection.Item(String)\n  fullName: System.Management.MethodDataCollection.Item(String)\n- uid: System.Management.MethodData\n  parent: System.Management\n  isExternal: false\n  name: MethodData\n  nameWithType: MethodData\n  fullName: System.Management.MethodData\n- uid: System.Management.MethodDataCollection.Remove(System.String)\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: MethodDataCollection.Remove(String)\n  fullName: System.Management.MethodDataCollection.Remove(String)\n- uid: System.Management.MethodDataCollection.SyncRoot\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: MethodDataCollection.SyncRoot\n  fullName: System.Management.MethodDataCollection.SyncRoot\n- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Management.MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Management.MethodDataCollection.Add*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Add\n  nameWithType: MethodDataCollection.Add\n- uid: System.Management.MethodDataCollection.CopyTo*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: MethodDataCollection.CopyTo\n- uid: System.Management.MethodDataCollection.Count*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Count\n  nameWithType: MethodDataCollection.Count\n- uid: System.Management.MethodDataCollection.GetEnumerator*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: MethodDataCollection.GetEnumerator\n- uid: System.Management.MethodDataCollection.IsSynchronized*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: MethodDataCollection.IsSynchronized\n- uid: System.Management.MethodDataCollection.Item*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Item\n  nameWithType: MethodDataCollection.Item\n- uid: System.Management.MethodDataCollection.Remove*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: Remove\n  nameWithType: MethodDataCollection.Remove\n- uid: System.Management.MethodDataCollection.SyncRoot*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: MethodDataCollection.SyncRoot\n- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Management.MethodDataCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator\n"}