{"nodes":[{"pos":[1146,1276],"content":"Provides the base class for both <bpt id=\"p1\">&lt;xref href=\"System.IO.FileInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Provides the base class for both <xref href=\"System.IO.FileInfo\"></xref> and <xref href=\"System.IO.DirectoryInfo\"></xref> objects."},{"pos":[3847,3933],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.FileSystemInfo\"></xref> class."},{"pos":[3945,4039],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[4800,4907],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with serialized data.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.FileSystemInfo\"></xref> class with serialized data."},{"pos":[4919,5013],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[5281,5424],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the serialized object data about the exception being thrown.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."},{"pos":[5520,5646],"content":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains contextual information about the source or destination.","pos":[0,126],"source":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination."}]},{"pos":[5807,5897],"content":"The specified <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is null.","needQuote":true,"needEscape":true,"source":"The specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> is null."},{"pos":[6223,6285],"content":"Gets or sets the attributes for the current file or directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the attributes for the current file or directory.","pos":[0,62]}]},{"pos":[6298,7475],"content":"The value of the Attributes property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.       The value of this property is a combination of the archive, compressed, directory, hidden, offline, read-only, system, and temporary file attribute flags.       When you set this value, use the bitwise OR operator (`|` in C# or `Or` in Visual Basic) to apply more than one value. To retain any existing values in the Attributes property, include the value of the Attributes property in your assignment. For example:       `exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`","needQuote":false,"needEscape":true,"nodes":[{"content":"The value of the Attributes property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[0,652],"source":"The value of the Attributes property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."},{"content":"The value of this property is a combination of the archive, compressed, directory, hidden, offline, read-only, system, and temporary file attribute flags.","pos":[659,813]},{"content":"When you set this value, use the bitwise OR operator (<ph id=\"ph1\">`|`</ph> in C# or <ph id=\"ph2\">`Or`</ph> in Visual Basic) to apply more than one value.","pos":[820,938],"source":"       When you set this value, use the bitwise OR operator (`|` in C# or `Or` in Visual Basic) to apply more than one value."},{"content":"To retain any existing values in the Attributes property, include the value of the Attributes property in your assignment.","pos":[939,1061]},{"content":"For example:       <ph id=\"ph1\">`exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`</ph>","pos":[1062,1157],"source":" For example:       `exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`"}]},{"pos":[8081,8188],"content":"<bpt id=\"p1\">&lt;xref href=\"System.IO.FileAttributes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the current <bpt id=\"p2\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.IO.FileAttributes\"></xref> of the current <xref href=\"System.IO.FileSystemInfo\"></xref>."},{"pos":[8360,8394],"content":"The specified file does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified file does not exist.","pos":[0,34]}]},{"pos":[8513,8584],"content":"The specified path is invalid; for example, it is on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid; for example, it is on an unmapped drive.","pos":[0,71]}]},{"pos":[8697,8746],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[8842,8996],"content":"The caller attempts to set an invalid file attribute.       -or-       The user attempts to set an attribute value but does not have write permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid file attribute.       -or-       The user attempts to set an attribute value but does not have write permission.","pos":[0,150],"nodes":[{"content":"The caller attempts to set an invalid file attribute.","pos":[0,53]},{"content":"-or-       The user attempts to set an attribute value but does not have write permission.","pos":[60,150]}]}]},{"pos":[9086,9154],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[9490,9554],"content":"Gets or sets the creation time of the current file or directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the creation time of the current file or directory.","pos":[0,64]}]},{"pos":[9567,11051],"content":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       The value of the CreationTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.       This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.","pos":[0,155],"source":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system."},{"content":"The value of the CreationTime property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[162,816],"source":"       The value of the CreationTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."},{"content":"If the file described in the &lt;xref:System.IO.FileSystemInfo&gt; object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D.","pos":[823,969],"source":"       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D."},{"content":"(C.E.) Coordinated Universal Time (UTC), adjusted to local time.","pos":[970,1034]},{"content":"NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time.","pos":[1041,1144]},{"content":"This process is known as file tunneling.","pos":[1145,1185]},{"content":"As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.","pos":[1186,1318]},{"content":"This property value is <ph id=\"ph1\">`null`</ph> if the file system containing the &lt;xref:System.IO.FileSystemInfo&gt; object does not support this information.","pos":[1325,1462],"source":"       This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information."}]},{"pos":[11636,11731],"content":"The creation date and time of the current <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The creation date and time of the current <xref href=\"System.IO.FileSystemInfo\"></xref> object."},{"pos":[11885,11953],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[12072,12143],"content":"The specified path is invalid; for example, it is on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid; for example, it is on an unmapped drive.","pos":[0,71]}]},{"pos":[12262,12318],"content":"The current operating system is not Windows NT or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]},{"pos":[12433,12485],"content":"The caller attempts to set an invalid creation time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid creation time.","pos":[0,52]}]},{"pos":[12836,12938],"content":"Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.","pos":[0,102]}]},{"pos":[12951,14414],"content":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       The value of the CreationTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.       This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.","pos":[0,155],"source":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system."},{"content":"The value of the CreationTimeUtc property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[162,819],"source":"       The value of the CreationTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."},{"content":"If the file described in the &lt;xref:System.IO.FileSystemInfo&gt; object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D.","pos":[826,972],"source":"       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D."},{"content":"(C.E.) Coordinated Universal Time (UTC).","pos":[973,1013]},{"content":"NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time.","pos":[1020,1123]},{"content":"This process is known as file tunneling.","pos":[1124,1164]},{"content":"As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.","pos":[1165,1297]},{"content":"This property value is <ph id=\"ph1\">`null`</ph> if the file system containing the &lt;xref:System.IO.FileSystemInfo&gt; object does not support this information.","pos":[1304,1441],"source":"       This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information."}]},{"pos":[14544,14653],"content":"The creation date and time in UTC format of the current <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The creation date and time in UTC format of the current <xref href=\"System.IO.FileSystemInfo\"></xref> object."},{"pos":[14810,14878],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[14997,15068],"content":"The specified path is invalid; for example, it is on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid; for example, it is on an unmapped drive.","pos":[0,71]}]},{"pos":[15187,15243],"content":"The current operating system is not Windows NT or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]},{"pos":[15358,15408],"content":"The caller attempts to set an invalid access time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid access time.","pos":[0,50]}]},{"pos":[15718,15746],"content":"Deletes a file or directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Deletes a file or directory.","pos":[0,28]}]},{"pos":[15998,16069],"content":"The specified path is invalid; for example, it is on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid; for example, it is on an unmapped drive.","pos":[0,71]}]},{"pos":[16159,16435],"content":"There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"There is an open handle on the file or directory, and the operating system is Windows XP or earlier.","pos":[0,100]},{"content":"This open handle can result from enumerating directories and files.","pos":[101,168]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Enumerate Directories and Files<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[169,276],"source":" For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[16742,16803],"content":"Gets a value indicating whether the file or directory exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the file or directory exists.","pos":[0,61]}]},{"pos":[16815,16909],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[17028,17196],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the file or directory exists; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file or directory exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17579,17639],"content":"Gets the string representing the extension part of the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the string representing the extension part of the file.","pos":[0,60]}]},{"pos":[18805,18885],"content":"A string containing the <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> extension.","needQuote":true,"needEscape":true,"source":"A string containing the <xref href=\"System.IO.FileSystemInfo\"></xref> extension."},{"pos":[19266,19310],"content":"Gets the full path of the directory or file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the full path of the directory or file.","pos":[0,44]}]},{"pos":[20085,20119],"content":"A string containing the full path.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the full path.","pos":[0,34]}]},{"pos":[20287,20352],"content":"The fully qualified path and file name is 260 or more characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified path and file name is 260 or more characters.","pos":[0,65]}]},{"pos":[20465,20514],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[20827,20888],"content":"Represents the fully qualified path of the directory or file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the fully qualified path of the directory or file.","pos":[0,61]}]},{"pos":[20996,21008],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21129,21180],"content":"The fully qualified path is 260 or more characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified path is 260 or more characters.","pos":[0,51]}]},{"pos":[21815,21955],"content":"Sets the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with the file name and additional exception information.","needQuote":true,"needEscape":true,"source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the file name and additional exception information."},{"pos":[21967,22061],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[22338,22481],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the serialized object data about the exception being thrown.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."},{"pos":[22577,22703],"content":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains contextual information about the source or destination.","pos":[0,126],"source":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination."}]},{"pos":[23118,23188],"content":"Gets or sets the time the current file or directory was last accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the time the current file or directory was last accessed.","pos":[0,70]}]},{"pos":[23201,24293],"content":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       The value of the <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.","pos":[0,155],"source":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system."},{"content":"If the file described in the &lt;xref:System.IO.FileSystemInfo&gt; object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D.","pos":[162,308],"source":"       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D."},{"content":"(C.E.) Coordinated Universal Time (UTC), adjusted to local time.","pos":[309,373]},{"content":"The value of the &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt; property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[380,1074],"source":"       The value of the <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."}]},{"pos":[24990,25052],"content":"The time that the current file or directory was last accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time that the current file or directory was last accessed.","pos":[0,62]}]},{"pos":[25208,25276],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[25395,25451],"content":"The current operating system is not Windows NT or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]},{"pos":[25566,25615],"content":"The caller attempts to set an invalid access time","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid access time","pos":[0,49]}]},{"pos":[25976,26089],"content":"Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.","pos":[0,113]}]},{"pos":[26102,27238],"content":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       The value of the LastAccessTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.","pos":[0,155],"source":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system."},{"content":"The value of the LastAccessTimeUtc property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[162,821],"source":"       The value of the LastAccessTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."},{"content":"If the file described in the &lt;xref:System.IO.FileSystemInfo&gt; object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D.","pos":[828,974],"source":"       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D."},{"content":"(C.E.) Coordinated Universal Time (UTC).","pos":[975,1015]},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1022,1116],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[27370,27436],"content":"The UTC time that the current file or directory was last accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The UTC time that the current file or directory was last accessed.","pos":[0,66]}]},{"pos":[27595,27663],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[27782,27838],"content":"The current operating system is not Windows NT or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]},{"pos":[27953,28003],"content":"The caller attempts to set an invalid access time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid access time.","pos":[0,50]}]},{"pos":[28344,28421],"content":"Gets or sets the time when the current file or directory was last written to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the time when the current file or directory was last written to.","pos":[0,77]}]},{"pos":[28434,29599],"content":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       The value of the LastWriteTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       This property value is `null` if the file system containing the file does not support this information.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.","pos":[0,155],"source":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system."},{"content":"The value of the LastWriteTime property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[162,817],"source":"       The value of the LastWriteTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."},{"content":"If the file described in the &lt;xref:System.IO.FileSystemInfo&gt; object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D.","pos":[824,970],"source":"       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D."},{"content":"(C.E.) Coordinated Universal Time (UTC), adjusted to local time.","pos":[971,1035]},{"content":"This property value is <ph id=\"ph1\">`null`</ph> if the file system containing the file does not support this information.","pos":[1042,1145],"source":"       This property value is `null` if the file system containing the file does not support this information."}]},{"pos":[30294,30337],"content":"The time the current file was last written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time the current file was last written.","pos":[0,43]}]},{"pos":[30492,30560],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[30679,30735],"content":"The current operating system is not Windows NT or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]},{"pos":[30850,30899],"content":"The caller attempts to set an invalid write time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid write time.","pos":[0,49]}]},{"pos":[31255,31370],"content":"Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.","pos":[0,115]}]},{"pos":[31383,32527],"content":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       The value of the LastWriteTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       This property value is `null` if the file system containing the file does not support this information.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.","pos":[0,155],"source":"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system."},{"content":"The value of the LastWriteTimeUtc property is pre-cached if the current instance of the &lt;xref:System.IO.FileSystemInfo&gt; object was returned from any of the following &lt;xref:System.IO.DirectoryInfo&gt; methods:      -   &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;      -   &lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;       To get the latest value, call the &lt;xref:System.IO.FileSystemInfo.Refresh%2A&gt; method.","pos":[162,820],"source":"       The value of the LastWriteTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:      -   <xref:System.IO.DirectoryInfo.GetDirectories%2A>      -   <xref:System.IO.DirectoryInfo.GetFiles%2A>      -   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>       To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."},{"content":"If the file described in the &lt;xref:System.IO.FileSystemInfo&gt; object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D.","pos":[827,973],"source":"       If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D."},{"content":"(C.E.) Coordinated Universal Time (UTC).","pos":[974,1014]},{"content":"This property value is <ph id=\"ph1\">`null`</ph> if the file system containing the file does not support this information.","pos":[1021,1124],"source":"       This property value is `null` if the file system containing the file does not support this information."}]},{"pos":[32658,32713],"content":"The UTC time when the current file was last written to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The UTC time when the current file was last written to.","pos":[0,55]}]},{"pos":[32871,32939],"content":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.IO.FileSystemInfo.Refresh*&gt; cannot initialize the data.","pos":[0,68],"source":"<xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data."}]},{"pos":[33058,33114],"content":"The current operating system is not Windows NT or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]},{"pos":[33229,33278],"content":"The caller attempts to set an invalid write time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller attempts to set an invalid write time.","pos":[0,49]}]},{"pos":[33574,33821],"content":"For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"></xref> property gets the name of the directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"For files, gets the name of the file.","pos":[0,37]},{"content":"For directories, gets the name of the last directory in the hierarchy if a hierarchy exists.","pos":[38,130]},{"content":"Otherwise, the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property gets the name of the directory.","pos":[131,247],"source":" Otherwise, the <xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"></xref> property gets the name of the directory."}]},{"pos":[34276,34433],"content":"A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.","pos":[0,157]}]},{"pos":[34826,34898],"content":"The path originally specified by the user, whether relative or absolute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path originally specified by the user, whether relative or absolute.","pos":[0,72]}]},{"pos":[34910,35004],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[35116,35128],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35460,35494],"content":"Refreshes the state of the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Refreshes the state of the object.","pos":[0,34]}]},{"pos":[35507,35887],"content":"`FileSystemInfo.Refresh` takes a snapshot of the file from the current file system. `Refresh` cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98.       Calls must be made to `Refresh` before attempting to get the attribute information, or the information will be outdated.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FileSystemInfo.Refresh`</ph> takes a snapshot of the file from the current file system.","pos":[0,83],"source":"`FileSystemInfo.Refresh` takes a snapshot of the file from the current file system."},{"content":"<ph id=\"ph1\">`Refresh`</ph> cannot correct the underlying file system even if the file system returns incorrect or outdated information.","pos":[84,202],"source":"`Refresh` cannot correct the underlying file system even if the file system returns incorrect or outdated information."},{"content":"This can happen on platforms such as Windows 98.","pos":[203,251]},{"content":"Calls must be made to <ph id=\"ph1\">`Refresh`</ph> before attempting to get the attribute information, or the information will be outdated.","pos":[258,378],"source":"       Calls must be made to `Refresh` before attempting to get the attribute information, or the information will be outdated."}]},{"pos":[36103,36146],"content":"A device such as a disk drive is not ready.","needQuote":true,"needEscape":true,"nodes":[{"content":"A device such as a disk drive is not ready.","pos":[0,43]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.FileSystemInfo\n  id: FileSystemInfo\n  children:\n  - System.IO.FileSystemInfo.#ctor\n  - System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.IO.FileSystemInfo.Attributes\n  - System.IO.FileSystemInfo.CreationTime\n  - System.IO.FileSystemInfo.CreationTimeUtc\n  - System.IO.FileSystemInfo.Delete\n  - System.IO.FileSystemInfo.Exists\n  - System.IO.FileSystemInfo.Extension\n  - System.IO.FileSystemInfo.FullName\n  - System.IO.FileSystemInfo.FullPath\n  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.IO.FileSystemInfo.LastAccessTime\n  - System.IO.FileSystemInfo.LastAccessTimeUtc\n  - System.IO.FileSystemInfo.LastWriteTime\n  - System.IO.FileSystemInfo.LastWriteTimeUtc\n  - System.IO.FileSystemInfo.Name\n  - System.IO.FileSystemInfo.OriginalPath\n  - System.IO.FileSystemInfo.Refresh\n  langs:\n  - csharp\n  name: FileSystemInfo\n  nameWithType: FileSystemInfo\n  fullName: System.IO.FileSystemInfo\n  type: Class\n  summary: Provides the base class for both <xref href=\"System.IO.FileInfo\"></xref> and <xref href=\"System.IO.DirectoryInfo\"></xref> objects.\n  remarks: \"The FileSystemInfo class contains methods that are common to file and directory manipulation. A FileSystemInfo object can represent either a file or a directory, thus serving as the basis for <xref:System.IO.FileInfo> or <xref:System.IO.DirectoryInfo> objects. Use this base class when parsing a lot of files and directories.  \\n  \\n A derived class can inherit from FileSystemInfo only if the derived class has the AllAccess permission from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.  \\n  \\n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\\\\\\\\\\MyFile.txt\\\" in C#, or \\\"c:\\\\MyDir\\\\MyFile.txt\\\" in Visual Basic.  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\" in C#, or \\\"c:\\\\MyDir\\\" in Visual Basic.  \\n  \\n-   \\\"MyDir\\\\\\\\\\\\MySubdir\\\" in C#, or \\\"MyDir\\\\MySubDir\\\" in Visual Basic.  \\n  \\n-   \\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\MyServer\\\\\\\\\\\\MyShare\\\" in C#, or \\\"\\\\\\\\\\\\MyServer\\\\MyShare\\\" in Visual Basic.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example shows how to loop through all the files and directories, querying some information about each entry.  \\n  \\n [!code-cs[FileSystemInfo#1](~/add/codesnippet/csharp/t-system.io.filesysteminfo_1.cs)]\\n [!code-cpp[FileSystemInfo#1](~/add/codesnippet/cpp/t-system.io.filesysteminfo_1.cpp)]\\n [!code-vb[FileSystemInfo#1](~/add/codesnippet/visualbasic/t-system.io.filesysteminfo_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class FileSystemInfo : MarshalByRefObject, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.#ctor\n  id: '#ctor'\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: FileSystemInfo()\n  nameWithType: FileSystemInfo.FileSystemInfo()\n  fullName: System.IO.FileSystemInfo.FileSystemInfo()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileSystemInfo\"></xref> class.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: protected FileSystemInfo ();\n    parameters: []\n  overload: System.IO.FileSystemInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: FileSystemInfo(SerializationInfo,StreamingContext)\n  nameWithType: FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)\n  fullName: System.IO.FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileSystemInfo\"></xref> class with serialized data.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: protected FileSystemInfo (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.\n  overload: System.IO.FileSystemInfo.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> is null.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.Attributes\n  id: Attributes\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: FileSystemInfo.Attributes\n  fullName: System.IO.FileSystemInfo.Attributes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the attributes for the current file or directory.\n  remarks: \"The value of the Attributes property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \\n  \\n The value of this property is a combination of the archive, compressed, directory, hidden, offline, read-only, system, and temporary file attribute flags.  \\n  \\n When you set this value, use the bitwise OR operator (`|` in C# or `Or` in Visual Basic) to apply more than one value. To retain any existing values in the Attributes property, include the value of the Attributes property in your assignment. For example:  \\n  \\n `exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`\"\n  example:\n  - \"The following example demonstrates the Attributes property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \\n  \\n [!code-cs[FileSystemInfo#2](~/add/codesnippet/csharp/p-system.io.filesystemin_3_1.cs)]\\n [!code-cpp[FileSystemInfo#2](~/add/codesnippet/cpp/p-system.io.filesystemin_3_1.cpp)]\\n [!code-vb[FileSystemInfo#2](~/add/codesnippet/visualbasic/p-system.io.filesystemin_3_1.vb)]\"\n  syntax:\n    content: public System.IO.FileAttributes Attributes { get; set; }\n    return:\n      type: System.IO.FileAttributes\n      description: <xref href=\"System.IO.FileAttributes\"></xref> of the current <xref href=\"System.IO.FileSystemInfo\"></xref>.\n  overload: System.IO.FileSystemInfo.Attributes*\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The specified file does not exist.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid; for example, it is on an unmapped drive.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The caller attempts to set an invalid file attribute.  \\n  \\n -or-  \\n  \\n The user attempts to set an attribute value but does not have write permission.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.CreationTime\n  id: CreationTime\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: CreationTime\n  nameWithType: FileSystemInfo.CreationTime\n  fullName: System.IO.FileSystemInfo.CreationTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the creation time of the current file or directory.\n  remarks: \"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \\n  \\n The value of the CreationTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \\n  \\n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  \\n  \\n NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  \\n  \\n This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information.\"\n  example:\n  - \"The following example demonstrates the CreationTime property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \\n  \\n [!code-cs[FileSystemInfo#2](~/add/codesnippet/csharp/p-system.io.filesystemin_4_1.cs)]\\n [!code-cpp[FileSystemInfo#2](~/add/codesnippet/cpp/p-system.io.filesystemin_4_1.cpp)]\\n [!code-vb[FileSystemInfo#2](~/add/codesnippet/visualbasic/p-system.io.filesystemin_4_1.vb)]\"\n  syntax:\n    content: public DateTime CreationTime { get; set; }\n    return:\n      type: System.DateTime\n      description: The creation date and time of the current <xref href=\"System.IO.FileSystemInfo\"></xref> object.\n  overload: System.IO.FileSystemInfo.CreationTime*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid; for example, it is on an unmapped drive.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The caller attempts to set an invalid creation time.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.CreationTimeUtc\n  id: CreationTimeUtc\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: CreationTimeUtc\n  nameWithType: FileSystemInfo.CreationTimeUtc\n  fullName: System.IO.FileSystemInfo.CreationTimeUtc\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.\n  remarks: \"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \\n  \\n The value of the CreationTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \\n  \\n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  \\n  \\n NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  \\n  \\n This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information.\"\n  syntax:\n    content: public DateTime CreationTimeUtc { get; set; }\n    return:\n      type: System.DateTime\n      description: The creation date and time in UTC format of the current <xref href=\"System.IO.FileSystemInfo\"></xref> object.\n  overload: System.IO.FileSystemInfo.CreationTimeUtc*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid; for example, it is on an unmapped drive.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The caller attempts to set an invalid access time.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.Delete\n  id: Delete\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: Delete()\n  nameWithType: FileSystemInfo.Delete()\n  fullName: System.IO.FileSystemInfo.Delete()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Deletes a file or directory.\n  syntax:\n    content: public abstract void Delete ();\n    parameters: []\n  overload: System.IO.FileSystemInfo.Delete*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid; for example, it is on an unmapped drive.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: 'There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md).'\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.Exists\n  id: Exists\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: Exists\n  nameWithType: FileSystemInfo.Exists\n  fullName: System.IO.FileSystemInfo.Exists\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a value indicating whether the file or directory exists.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public abstract bool Exists { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file or directory exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.FileSystemInfo.Exists*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.Extension\n  id: Extension\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: Extension\n  nameWithType: FileSystemInfo.Extension\n  fullName: System.IO.FileSystemInfo.Extension\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the string representing the extension part of the file.\n  remarks: \"The `Extension` property returns the <xref:System.IO.FileSystemInfo> extension, including the period (.). For example, for a file c:\\\\NewFile.txt, this property returns \\\".txt\\\".  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \\n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \\n|Retrieve the fully qualified path of a file.|<xref:System.IO.Path.GetFullPath%2A>|  \\n|Retrieve only the file name a path.|<xref:System.IO.Path.GetFileNameWithoutExtension%2A>|  \\n|Retrieve only the directory name from a path.|<xref:System.IO.Path.GetDirectoryName%2A>|  \\n|Change the extension of a file.|<xref:System.IO.Path.ChangeExtension%2A>|\"\n  syntax:\n    content: public string Extension { get; }\n    return:\n      type: System.String\n      description: A string containing the <xref href=\"System.IO.FileSystemInfo\"></xref> extension.\n  overload: System.IO.FileSystemInfo.Extension*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.FullName\n  id: FullName\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: FileSystemInfo.FullName\n  fullName: System.IO.FileSystemInfo.FullName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the full path of the directory or file.\n  remarks: \"For example, for a file c:\\\\NewFile.txt, this property returns \\\"c:\\\\NewFile.txt\\\".  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates the FullName property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \\n  \\n [!code-cs[FileSystemInfo#2](~/add/codesnippet/csharp/p-system.io.filesystemin_0_1.cs)]\\n [!code-cpp[FileSystemInfo#2](~/add/codesnippet/cpp/p-system.io.filesystemin_0_1.cpp)]\\n [!code-vb[FileSystemInfo#2](~/add/codesnippet/visualbasic/p-system.io.filesystemin_0_1.vb)]\"\n  syntax:\n    content: public virtual string FullName { get; }\n    return:\n      type: System.String\n      description: A string containing the full path.\n  overload: System.IO.FileSystemInfo.FullName*\n  exceptions:\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The fully qualified path and file name is 260 or more characters.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.FullPath\n  id: FullPath\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: FullPath\n  nameWithType: FileSystemInfo.FullPath\n  fullName: System.IO.FileSystemInfo.FullPath\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Represents the fully qualified path of the directory or file.\n  syntax:\n    content: protected string FullPath;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions:\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The fully qualified path is 260 or more characters.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.IO.FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the file name and additional exception information.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.\n  overload: System.IO.FileSystemInfo.GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.LastAccessTime\n  id: LastAccessTime\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: LastAccessTime\n  nameWithType: FileSystemInfo.LastAccessTime\n  fullName: System.IO.FileSystemInfo.LastAccessTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the time the current file or directory was last accessed.\n  remarks: \"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \\n  \\n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  \\n  \\n The value of the <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.\"\n  example:\n  - \"The following code example demonstrates the updating of the LastAccessTime property through a \\\"touch\\\" operation. In this example, the file is \\\"touched\\\", updating the <xref:System.IO.FileSystemInfo.CreationTime%2A>, LastAccessTime and <xref:System.IO.FileSystemInfo.LastWriteTime%2A> properties to the current date and time.  \\n  \\n [!code-cs[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/csharp/p-system.io.filesystemin_2_1.cs)]\\n [!code-vb[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/visualbasic/p-system.io.filesystemin_2_1.vb)]\"\n  syntax:\n    content: public DateTime LastAccessTime { get; set; }\n    return:\n      type: System.DateTime\n      description: The time that the current file or directory was last accessed.\n  overload: System.IO.FileSystemInfo.LastAccessTime*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The caller attempts to set an invalid access time\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.LastAccessTimeUtc\n  id: LastAccessTimeUtc\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: LastAccessTimeUtc\n  nameWithType: FileSystemInfo.LastAccessTimeUtc\n  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.\n  remarks: \"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \\n  \\n The value of the LastAccessTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \\n  \\n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public DateTime LastAccessTimeUtc { get; set; }\n    return:\n      type: System.DateTime\n      description: The UTC time that the current file or directory was last accessed.\n  overload: System.IO.FileSystemInfo.LastAccessTimeUtc*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The caller attempts to set an invalid access time.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.LastWriteTime\n  id: LastWriteTime\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: LastWriteTime\n  nameWithType: FileSystemInfo.LastWriteTime\n  fullName: System.IO.FileSystemInfo.LastWriteTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the time when the current file or directory was last written to.\n  remarks: \"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \\n  \\n The value of the LastWriteTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \\n  \\n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  \\n  \\n This property value is `null` if the file system containing the file does not support this information.\"\n  example:\n  - \"The following code example demonstrates the updating of the LastWriteTime property through a \\\"touch\\\" operation. In this example, the file is \\\"touched\\\", updating the <xref:System.IO.FileSystemInfo.CreationTime%2A>, <xref:System.IO.FileSystemInfo.LastAccessTime%2A> and LastWriteTime properties to the current date and time.  \\n  \\n [!code-cs[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/csharp/p-system.io.filesystemin_1_1.cs)]\\n [!code-vb[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/visualbasic/p-system.io.filesystemin_1_1.vb)]\"\n  syntax:\n    content: public DateTime LastWriteTime { get; set; }\n    return:\n      type: System.DateTime\n      description: The time the current file was last written.\n  overload: System.IO.FileSystemInfo.LastWriteTime*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The caller attempts to set an invalid write time.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.LastWriteTimeUtc\n  id: LastWriteTimeUtc\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: LastWriteTimeUtc\n  nameWithType: FileSystemInfo.LastWriteTimeUtc\n  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.\n  remarks: \"**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \\n  \\n The value of the LastWriteTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \\n  \\n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \\n  \\n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \\n  \\n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  \\n  \\n This property value is `null` if the file system containing the file does not support this information.\"\n  syntax:\n    content: public DateTime LastWriteTimeUtc { get; set; }\n    return:\n      type: System.DateTime\n      description: The UTC time when the current file was last written to.\n  overload: System.IO.FileSystemInfo.LastWriteTimeUtc*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <xref:System.IO.FileSystemInfo.Refresh*> cannot initialize the data.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The caller attempts to set an invalid write time.\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.Name\n  id: Name\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: Name\n  nameWithType: FileSystemInfo.Name\n  fullName: System.IO.FileSystemInfo.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"></xref> property gets the name of the directory.\n  remarks: \"For a directory, `Name` returns only the name of the parent directory, such as Dir, not c:\\\\Dir. For a subdirectory, `Name` returns only the name of the subdirectory, such as Sub1, not c:\\\\Dir\\\\Sub1.  \\n  \\n For a file, `Name` returns only the file name and file name extension, such as MyFile.txt, not c:\\\\Dir\\\\Myfile.txt.\"\n  syntax:\n    content: public abstract string Name { get; }\n    return:\n      type: System.String\n      description: A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.\n  overload: System.IO.FileSystemInfo.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.OriginalPath\n  id: OriginalPath\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: OriginalPath\n  nameWithType: FileSystemInfo.OriginalPath\n  fullName: System.IO.FileSystemInfo.OriginalPath\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: The path originally specified by the user, whether relative or absolute.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: protected string OriginalPath;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.FileSystemInfo.Refresh\n  id: Refresh\n  parent: System.IO.FileSystemInfo\n  langs:\n  - csharp\n  name: Refresh()\n  nameWithType: FileSystemInfo.Refresh()\n  fullName: System.IO.FileSystemInfo.Refresh()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Refreshes the state of the object.\n  remarks: \"`FileSystemInfo.Refresh` takes a snapshot of the file from the current file system. `Refresh` cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98.  \\n  \\n Calls must be made to `Refresh` before attempting to get the attribute information, or the information will be outdated.\"\n  syntax:\n    content: public void Refresh ();\n    parameters: []\n  overload: System.IO.FileSystemInfo.Refresh*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: A device such as a disk drive is not ready.\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: true\n  name: System.IO.DirectoryNotFoundException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.IO.PathTooLongException\n  isExternal: true\n  name: System.IO.PathTooLongException\n- uid: System.IO.FileSystemInfo.#ctor\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FileSystemInfo()\n  nameWithType: FileSystemInfo.FileSystemInfo()\n  fullName: System.IO.FileSystemInfo.FileSystemInfo()\n- uid: System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FileSystemInfo(SerializationInfo,StreamingContext)\n  nameWithType: FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)\n  fullName: System.IO.FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.IO.FileSystemInfo.Attributes\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: FileSystemInfo.Attributes\n  fullName: System.IO.FileSystemInfo.Attributes\n- uid: System.IO.FileAttributes\n  parent: System.IO\n  isExternal: false\n  name: FileAttributes\n  nameWithType: FileAttributes\n  fullName: System.IO.FileAttributes\n- uid: System.IO.FileSystemInfo.CreationTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTime\n  nameWithType: FileSystemInfo.CreationTime\n  fullName: System.IO.FileSystemInfo.CreationTime\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.IO.FileSystemInfo.CreationTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTimeUtc\n  nameWithType: FileSystemInfo.CreationTimeUtc\n  fullName: System.IO.FileSystemInfo.CreationTimeUtc\n- uid: System.IO.FileSystemInfo.Delete\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Delete()\n  nameWithType: FileSystemInfo.Delete()\n  fullName: System.IO.FileSystemInfo.Delete()\n- uid: System.IO.FileSystemInfo.Exists\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Exists\n  nameWithType: FileSystemInfo.Exists\n  fullName: System.IO.FileSystemInfo.Exists\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.FileSystemInfo.Extension\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Extension\n  nameWithType: FileSystemInfo.Extension\n  fullName: System.IO.FileSystemInfo.Extension\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.FileSystemInfo.FullName\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullName\n  nameWithType: FileSystemInfo.FullName\n  fullName: System.IO.FileSystemInfo.FullName\n- uid: System.IO.FileSystemInfo.FullPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullPath\n  nameWithType: FileSystemInfo.FullPath\n  fullName: System.IO.FileSystemInfo.FullPath\n- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.IO.FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.IO.FileSystemInfo.LastAccessTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTime\n  nameWithType: FileSystemInfo.LastAccessTime\n  fullName: System.IO.FileSystemInfo.LastAccessTime\n- uid: System.IO.FileSystemInfo.LastAccessTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTimeUtc\n  nameWithType: FileSystemInfo.LastAccessTimeUtc\n  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc\n- uid: System.IO.FileSystemInfo.LastWriteTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTime\n  nameWithType: FileSystemInfo.LastWriteTime\n  fullName: System.IO.FileSystemInfo.LastWriteTime\n- uid: System.IO.FileSystemInfo.LastWriteTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTimeUtc\n  nameWithType: FileSystemInfo.LastWriteTimeUtc\n  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc\n- uid: System.IO.FileSystemInfo.Name\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Name\n  nameWithType: FileSystemInfo.Name\n  fullName: System.IO.FileSystemInfo.Name\n- uid: System.IO.FileSystemInfo.OriginalPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: OriginalPath\n  nameWithType: FileSystemInfo.OriginalPath\n  fullName: System.IO.FileSystemInfo.OriginalPath\n- uid: System.IO.FileSystemInfo.Refresh\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Refresh()\n  nameWithType: FileSystemInfo.Refresh()\n  fullName: System.IO.FileSystemInfo.Refresh()\n- uid: System.IO.FileSystemInfo.#ctor*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FileSystemInfo\n  nameWithType: FileSystemInfo.FileSystemInfo\n- uid: System.IO.FileSystemInfo.Attributes*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: FileSystemInfo.Attributes\n- uid: System.IO.FileSystemInfo.CreationTime*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTime\n  nameWithType: FileSystemInfo.CreationTime\n- uid: System.IO.FileSystemInfo.CreationTimeUtc*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTimeUtc\n  nameWithType: FileSystemInfo.CreationTimeUtc\n- uid: System.IO.FileSystemInfo.Delete*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Delete\n  nameWithType: FileSystemInfo.Delete\n- uid: System.IO.FileSystemInfo.Exists*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Exists\n  nameWithType: FileSystemInfo.Exists\n- uid: System.IO.FileSystemInfo.Extension*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Extension\n  nameWithType: FileSystemInfo.Extension\n- uid: System.IO.FileSystemInfo.FullName*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullName\n  nameWithType: FileSystemInfo.FullName\n- uid: System.IO.FileSystemInfo.GetObjectData*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: GetObjectData\n  nameWithType: FileSystemInfo.GetObjectData\n- uid: System.IO.FileSystemInfo.LastAccessTime*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTime\n  nameWithType: FileSystemInfo.LastAccessTime\n- uid: System.IO.FileSystemInfo.LastAccessTimeUtc*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTimeUtc\n  nameWithType: FileSystemInfo.LastAccessTimeUtc\n- uid: System.IO.FileSystemInfo.LastWriteTime*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTime\n  nameWithType: FileSystemInfo.LastWriteTime\n- uid: System.IO.FileSystemInfo.LastWriteTimeUtc*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTimeUtc\n  nameWithType: FileSystemInfo.LastWriteTimeUtc\n- uid: System.IO.FileSystemInfo.Name*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Name\n  nameWithType: FileSystemInfo.Name\n- uid: System.IO.FileSystemInfo.Refresh*\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Refresh\n  nameWithType: FileSystemInfo.Refresh\n"}