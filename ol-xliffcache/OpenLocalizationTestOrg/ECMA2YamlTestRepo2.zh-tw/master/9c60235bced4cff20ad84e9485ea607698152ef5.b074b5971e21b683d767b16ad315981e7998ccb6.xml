{"nodes":[{"pos":[436,621],"content":"Specifies what messages to output for the &lt;xref:System.Diagnostics.Debug&gt;, <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Trace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceSwitch\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> classes.","needQuote":true,"needEscape":true,"source":"Specifies what messages to output for the <xref:System.Diagnostics.Debug>, <xref href=\"System.Diagnostics.Trace\"></xref> and <xref href=\"System.Diagnostics.TraceSwitch\"></xref> classes."},{"pos":[634,3077],"content":"This enumeration is used by the <xref:System.Diagnostics.TraceSwitch> class.       You must enable tracing or debugging to use a switch. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.      -   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.      -   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.       For more information on instrumenting your application, see <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace>.      > [!NOTE] >  In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, `true` for a <xref:System.Diagnostics.BooleanSwitch> or the text representing an enumeration value such as `Error` for a <xref:System.Diagnostics.TraceSwitch>. The line `<add name=\"mySwitch\" value=\"Error\" />` is equivalent to `<add name=\"mySwitch\" value=\"1\" />`.       In the .NET Framework versions 1.0 and 1.1, trace levels in configuration files are set using the integer value corresponding to the enumeration member, rather than the enumeration member itself, as the following example demonstrates.      ```   <configuration>       <system.diagnostics>          <switches>             <add name=\"mySwitch\" value=\"4\" />          </switches>       </system.diagnostics>   </configuration>   ```       In addition to setting trace levels using the integer value of the enumeration, the .NET Framework version 2.0 trace levels can be set using the text representation of the enumeration value. For example, `Verbose` for a <xref:System.Diagnostics.TraceSwitch>. The line `<add name=\"mySwitch\" value=\"Verbose\" />` is equivalent to `<add name=\"mySwitch\" value=\"4\" />`.       The following table shows the relationship between the TraceLevel enumeration members and their corresponding configuration file entries.      |Trace Level|Configuration File Value|   |-----------------|------------------------------|   |Off|0|   |Error|1|   |Warning|2|   |Info|3|   |Verbose|4|","needQuote":false,"needEscape":true,"nodes":[{"content":"This enumeration is used by the &lt;xref:System.Diagnostics.TraceSwitch&gt; class.","pos":[0,76],"source":"This enumeration is used by the <xref:System.Diagnostics.TraceSwitch> class."},{"content":"You must enable tracing or debugging to use a switch.","pos":[83,136]},{"content":"The following syntax is compiler specific.","pos":[137,179]},{"content":"If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.","pos":[180,277]},{"content":"-   To enable debugging in C#, add the <ph id=\"ph1\">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or you can add <ph id=\"ph2\">`#define DEBUG`</ph> to the top of your file.","pos":[283,450],"source":"      -   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file."},{"content":"In Visual Basic, add the <ph id=\"ph1\">`/d:DEBUG=True`</ph> flag to the compiler command line.","pos":[451,526],"source":" In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line."},{"content":"-   To enable tracing in C#, add the <ph id=\"ph1\">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id=\"ph2\">`#define TRACE`</ph> to the top of your file.","pos":[532,689],"source":"      -   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file."},{"content":"In Visual Basic, add the <ph id=\"ph1\">`/d:TRACE=True`</ph> flag to the compiler command line.","pos":[690,765],"source":" In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line."},{"content":"For more information on instrumenting your application, see &lt;xref:System.Diagnostics.Debug&gt; and &lt;xref:System.Diagnostics.Trace&gt;.","pos":[772,900],"source":"       For more information on instrumenting your application, see <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In the .NET Framework version 2.0, you can use text to specify the value for a switch.","pos":[906,1005],"source":"      > [!NOTE] >  In the .NET Framework version 2.0, you can use text to specify the value for a switch."},{"content":"For example, <ph id=\"ph1\">`true`</ph> for a &lt;xref:System.Diagnostics.BooleanSwitch&gt; or the text representing an enumeration value such as <ph id=\"ph2\">`Error`</ph> for a &lt;xref:System.Diagnostics.TraceSwitch&gt;.","pos":[1006,1178],"source":" For example, `true` for a <xref:System.Diagnostics.BooleanSwitch> or the text representing an enumeration value such as `Error` for a <xref:System.Diagnostics.TraceSwitch>."},{"content":"The line <ph id=\"ph1\">`&lt;add name=\"mySwitch\" value=\"Error\" /&gt;`</ph> is equivalent to <ph id=\"ph2\">`&lt;add name=\"mySwitch\" value=\"1\" /&gt;`</ph>.","pos":[1179,1281],"source":" The line `<add name=\"mySwitch\" value=\"Error\" />` is equivalent to `<add name=\"mySwitch\" value=\"1\" />`."},{"content":"In the .NET Framework versions 1.0 and 1.1, trace levels in configuration files are set using the integer value corresponding to the enumeration member, rather than the enumeration member itself, as the following example demonstrates.","pos":[1288,1522]},{"content":"<ph id=\"ph1\">```   &lt;configuration&gt;       &lt;system.diagnostics&gt;          &lt;switches&gt;             &lt;add name=\"mySwitch\" value=\"4\" /&gt;          &lt;/switches&gt;       &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph>       In addition to setting trace levels using the integer value of the enumeration, the .NET Framework version 2.0 trace levels can be set using the text representation of the enumeration value.","pos":[1528,1913],"source":"```   <configuration>       <system.diagnostics>          <switches>             <add name=\"mySwitch\" value=\"4\" />          </switches>       </system.diagnostics>   </configuration>   ```       In addition to setting trace levels using the integer value of the enumeration, the .NET Framework version 2.0 trace levels can be set using the text representation of the enumeration value."},{"content":"For example, <ph id=\"ph1\">`Verbose`</ph> for a &lt;xref:System.Diagnostics.TraceSwitch&gt;.","pos":[1914,1981],"source":" For example, `Verbose` for a <xref:System.Diagnostics.TraceSwitch>."},{"content":"The line <ph id=\"ph1\">`&lt;add name=\"mySwitch\" value=\"Verbose\" /&gt;`</ph> is equivalent to <ph id=\"ph2\">`&lt;add name=\"mySwitch\" value=\"4\" /&gt;`</ph>.","pos":[1982,2086],"source":" The line `<add name=\"mySwitch\" value=\"Verbose\" />` is equivalent to `<add name=\"mySwitch\" value=\"4\" />`."},{"content":"The following table shows the relationship between the TraceLevel enumeration members and their corresponding configuration file entries.","pos":[2093,2230]},{"content":"|Trace Level|Configuration File Value|   |-----------------|------------------------------|   |Off|0|   |Error|1|   |Warning|2|   |Info|3|   |Verbose|4|","pos":[2236,2388]}]},{"pos":[3471,3502],"content":"Output error-handling messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Output error-handling messages.","pos":[0,31]}]},{"pos":[3605,3617],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3945,4014],"content":"Output informational messages, warnings, and error-handling messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Output informational messages, warnings, and error-handling messages.","pos":[0,69]}]},{"pos":[4116,4128],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4451,4492],"content":"Output no tracing and debugging messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Output no tracing and debugging messages.","pos":[0,41]}]},{"pos":[4593,4605],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4948,4990],"content":"Output all debugging and tracing messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Output all debugging and tracing messages.","pos":[0,42]}]},{"pos":[5095,5107],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5450,5494],"content":"Output warnings and error-handling messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Output warnings and error-handling messages.","pos":[0,44]}]},{"pos":[5599,5611],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.TraceLevel\n  id: TraceLevel\n  children:\n  - System.Diagnostics.TraceLevel.Error\n  - System.Diagnostics.TraceLevel.Info\n  - System.Diagnostics.TraceLevel.Off\n  - System.Diagnostics.TraceLevel.Verbose\n  - System.Diagnostics.TraceLevel.Warning\n  langs:\n  - csharp\n  name: TraceLevel\n  nameWithType: TraceLevel\n  fullName: System.Diagnostics.TraceLevel\n  type: Enum\n  summary: Specifies what messages to output for the <xref:System.Diagnostics.Debug>, <xref href=\"System.Diagnostics.Trace\"></xref> and <xref href=\"System.Diagnostics.TraceSwitch\"></xref> classes.\n  remarks: \"This enumeration is used by the <xref:System.Diagnostics.TraceSwitch> class.  \\n  \\n You must enable tracing or debugging to use a switch. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \\n  \\n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \\n  \\n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \\n  \\n For more information on instrumenting your application, see <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace>.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, `true` for a <xref:System.Diagnostics.BooleanSwitch> or the text representing an enumeration value such as `Error` for a <xref:System.Diagnostics.TraceSwitch>. The line `<add name=\\\"mySwitch\\\" value=\\\"Error\\\" />` is equivalent to `<add name=\\\"mySwitch\\\" value=\\\"1\\\" />`.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, trace levels in configuration files are set using the integer value corresponding to the enumeration member, rather than the enumeration member itself, as the following example demonstrates.  \\n  \\n```  \\n<configuration>  \\n    <system.diagnostics>  \\n       <switches>  \\n          <add name=\\\"mySwitch\\\" value=\\\"4\\\" />  \\n       </switches>  \\n    </system.diagnostics>  \\n</configuration>  \\n```  \\n  \\n In addition to setting trace levels using the integer value of the enumeration, the .NET Framework version 2.0 trace levels can be set using the text representation of the enumeration value. For example, `Verbose` for a <xref:System.Diagnostics.TraceSwitch>. The line `<add name=\\\"mySwitch\\\" value=\\\"Verbose\\\" />` is equivalent to `<add name=\\\"mySwitch\\\" value=\\\"4\\\" />`.  \\n  \\n The following table shows the relationship between the TraceLevel enumeration members and their corresponding configuration file entries.  \\n  \\n|Trace Level|Configuration File Value|  \\n|-----------------|------------------------------|  \\n|Off|0|  \\n|Error|1|  \\n|Warning|2|  \\n|Info|3|  \\n|Verbose|4|\"\n  syntax:\n    content: public enum TraceLevel\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceLevel.Error\n  id: Error\n  parent: System.Diagnostics.TraceLevel\n  langs:\n  - csharp\n  name: Error\n  nameWithType: TraceLevel.Error\n  fullName: System.Diagnostics.TraceLevel.Error\n  type: Field\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Output error-handling messages.\n  syntax:\n    content: Error\n    return:\n      type: System.Diagnostics.TraceLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceLevel.Info\n  id: Info\n  parent: System.Diagnostics.TraceLevel\n  langs:\n  - csharp\n  name: Info\n  nameWithType: TraceLevel.Info\n  fullName: System.Diagnostics.TraceLevel.Info\n  type: Field\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Output informational messages, warnings, and error-handling messages.\n  syntax:\n    content: Info\n    return:\n      type: System.Diagnostics.TraceLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceLevel.Off\n  id: Off\n  parent: System.Diagnostics.TraceLevel\n  langs:\n  - csharp\n  name: Off\n  nameWithType: TraceLevel.Off\n  fullName: System.Diagnostics.TraceLevel.Off\n  type: Field\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Output no tracing and debugging messages.\n  syntax:\n    content: Off\n    return:\n      type: System.Diagnostics.TraceLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceLevel.Verbose\n  id: Verbose\n  parent: System.Diagnostics.TraceLevel\n  langs:\n  - csharp\n  name: Verbose\n  nameWithType: TraceLevel.Verbose\n  fullName: System.Diagnostics.TraceLevel.Verbose\n  type: Field\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Output all debugging and tracing messages.\n  syntax:\n    content: Verbose\n    return:\n      type: System.Diagnostics.TraceLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceLevel.Warning\n  id: Warning\n  parent: System.Diagnostics.TraceLevel\n  langs:\n  - csharp\n  name: Warning\n  nameWithType: TraceLevel.Warning\n  fullName: System.Diagnostics.TraceLevel.Warning\n  type: Field\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Output warnings and error-handling messages.\n  syntax:\n    content: Warning\n    return:\n      type: System.Diagnostics.TraceLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Diagnostics.TraceLevel.Error\n  parent: System.Diagnostics.TraceLevel\n  isExternal: false\n  name: Error\n  nameWithType: TraceLevel.Error\n  fullName: System.Diagnostics.TraceLevel.Error\n- uid: System.Diagnostics.TraceLevel\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceLevel\n  nameWithType: TraceLevel\n  fullName: System.Diagnostics.TraceLevel\n- uid: System.Diagnostics.TraceLevel.Info\n  parent: System.Diagnostics.TraceLevel\n  isExternal: false\n  name: Info\n  nameWithType: TraceLevel.Info\n  fullName: System.Diagnostics.TraceLevel.Info\n- uid: System.Diagnostics.TraceLevel.Off\n  parent: System.Diagnostics.TraceLevel\n  isExternal: false\n  name: Off\n  nameWithType: TraceLevel.Off\n  fullName: System.Diagnostics.TraceLevel.Off\n- uid: System.Diagnostics.TraceLevel.Verbose\n  parent: System.Diagnostics.TraceLevel\n  isExternal: false\n  name: Verbose\n  nameWithType: TraceLevel.Verbose\n  fullName: System.Diagnostics.TraceLevel.Verbose\n- uid: System.Diagnostics.TraceLevel.Warning\n  parent: System.Diagnostics.TraceLevel\n  isExternal: false\n  name: Warning\n  nameWithType: TraceLevel.Warning\n  fullName: System.Diagnostics.TraceLevel.Warning\n"}