{"nodes":[{"pos":[1481,1549],"content":"Specifies the class client that proxies derive from when using SOAP.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the class client that proxies derive from when using SOAP.","pos":[0,68]}]},{"pos":[1562,2892],"content":"If you are building an XML Web service client, then a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> must be created for the XML Web service. When the XML Web service client calls using SOAP, the proxy class must derive from SoapHttpClientProtocol, which derives from <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, in turn, derives from <xref:System.Web.Services.Protocols.WebClientProtocol>.       To communicate with an XML Web service, create a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> for the XML Web service you want to call. Instead of creating the proxy class manually, use the Web Services Description Language tool (Wsdl.exe) to create a proxy class for a given XML Web service's service description. When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method, whereas asynchronous calls are made using the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method and the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you are building an XML Web service client, then a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> must be created for the XML Web service. When the XML Web service client calls using SOAP, the proxy class must derive from SoapHttpClientProtocol, which derives from <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, in turn, derives from <xref:System.Web.Services.Protocols.WebClientProtocol>.       To communicate with an XML Web service, create a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> for the XML Web service you want to call. Instead of creating the proxy class manually, use the Web Services Description Language tool (Wsdl.exe) to create a proxy class for a given XML Web service's service description. When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method, whereas asynchronous calls are made using the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method and the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> method.","pos":[0,1328],"nodes":[{"content":"If you are building an XML Web service client, then a proxy class that derives indirectly or directly from &lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt; must be created for the XML Web service.","pos":[0,202],"source":"If you are building an XML Web service client, then a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> must be created for the XML Web service."},{"content":"When the XML Web service client calls using SOAP, the proxy class must derive from SoapHttpClientProtocol, which derives from &lt;xref:System.Web.Services.Protocols.HttpWebClientProtocol&gt;.","pos":[203,388],"source":" When the XML Web service client calls using SOAP, the proxy class must derive from SoapHttpClientProtocol, which derives from <xref:System.Web.Services.Protocols.HttpWebClientProtocol>."},{"content":"&lt;xref:System.Web.Services.Protocols.HttpWebClientProtocol&gt;, in turn, derives from &lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt;.","pos":[389,526],"source":" <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, in turn, derives from <xref:System.Web.Services.Protocols.WebClientProtocol>."},{"content":"To communicate with an XML Web service, create a proxy class that derives indirectly or directly from &lt;xref:System.Web.Services.Protocols.WebClientProtocol&gt; for the XML Web service you want to call.","pos":[533,731],"source":"       To communicate with an XML Web service, create a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> for the XML Web service you want to call."},{"content":"Instead of creating the proxy class manually, use the Web Services Description Language tool (Wsdl.exe) to create a proxy class for a given XML Web service's service description.","pos":[732,910]},{"content":"When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the &lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A&gt; method, whereas asynchronous calls are made using the &lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A&gt; method and the &lt;xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A&gt; method.","pos":[911,1328],"source":" When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method, whereas asynchronous calls are made using the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method and the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> method."}]}]},{"pos":[7406,7520],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapHttpClientProtocol\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Services.Protocols.SoapHttpClientProtocol\"></xref> class."},{"pos":[8383,8457],"content":"Starts an asynchronous invocation of an XML Web service method using SOAP.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts an asynchronous invocation of an XML Web service method using SOAP.","pos":[0,74]}]},{"pos":[8470,10221],"content":"Typically, you would not call the BeginInvoke method directly, unless you were building your own proxy class for an XML Web service.       A proxy class generated by the Web Services Description Language tool (Wsdl.exe) from a Service Description exposes the XML Web service methods as names derived from the proxy class to call the XML Web service methods synchronously. To call the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added.       The proxy class calls the BeginInvoke method to start an asynchronous invocation call to the XML Web service method. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `BeginAdd`, for starting an invocation to the XML Web service method. Within the code for the `BeginAdd`, a call is made to the BeginInvoke method and the results are placed into the expected return type for `Add`.       The `methodName` is used to find the custom attributes which may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information about the derived method that is required for the SOAP protocol.       `asyncState` is passed into `callback` and is included in the <xref:System.IAsyncResult> that is returned from the BeginInvoke method. The `asyncState` parameter can be used to pass information about the context of the asynchronous call, specified in the `callback` parameter, to the delegate that handles the result.","needQuote":false,"needEscape":true,"nodes":[{"content":"Typically, you would not call the BeginInvoke method directly, unless you were building your own proxy class for an XML Web service.","pos":[0,132]},{"content":"A proxy class generated by the Web Services Description Language tool (Wsdl.exe) from a Service Description exposes the XML Web service methods as names derived from the proxy class to call the XML Web service methods synchronously.","pos":[139,371]},{"content":"To call the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the <ph id=\"ph1\">`Begin`</ph> prefix added to the name of the XML Web service method and one with the <ph id=\"ph2\">`End`</ph> prefix added.","pos":[372,621],"source":" To call the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added."},{"content":"The proxy class calls the BeginInvoke method to start an asynchronous invocation call to the XML Web service method.","pos":[628,744]},{"content":"For example, if an XML Web service exposes an XML Web service method named <ph id=\"ph1\">`Add`</ph>, the proxy class contains a method named <ph id=\"ph2\">`BeginAdd`</ph>, for starting an invocation to the XML Web service method.","pos":[745,936],"source":" For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `BeginAdd`, for starting an invocation to the XML Web service method."},{"content":"Within the code for the <ph id=\"ph1\">`BeginAdd`</ph>, a call is made to the BeginInvoke method and the results are placed into the expected return type for <ph id=\"ph2\">`Add`</ph>.","pos":[937,1081],"source":" Within the code for the `BeginAdd`, a call is made to the BeginInvoke method and the results are placed into the expected return type for `Add`."},{"content":"The <ph id=\"ph1\">`methodName`</ph> is used to find the custom attributes which may have been added to the method, such as &lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;.","pos":[1088,1257],"source":"       The `methodName` is used to find the custom attributes which may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>."},{"content":"&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt; provides additional information about the derived method that is required for the SOAP protocol.","pos":[1258,1419],"source":" <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information about the derived method that is required for the SOAP protocol."},{"content":"<ph id=\"ph1\">`asyncState`</ph> is passed into <ph id=\"ph2\">`callback`</ph> and is included in the &lt;xref:System.IAsyncResult&gt; that is returned from the BeginInvoke method.","pos":[1426,1560],"source":"`asyncState` is passed into `callback` and is included in the <xref:System.IAsyncResult> that is returned from the BeginInvoke method."},{"content":"The <ph id=\"ph1\">`asyncState`</ph> parameter can be used to pass information about the context of the asynchronous call, specified in the <ph id=\"ph2\">`callback`</ph> parameter, to the delegate that handles the result.","pos":[1561,1743],"source":" The `asyncState` parameter can be used to pass information about the context of the asynchronous call, specified in the `callback` parameter, to the delegate that handles the result."}]},{"pos":[11376,11476],"content":"The name of the XML Web service method in the derived class that is invoking the BeginInvoke method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the XML Web service method in the derived class that is invoking the BeginInvoke method.","pos":[0,100]}]},{"pos":[11545,11745],"content":"An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.","pos":[0,200],"nodes":[{"content":"An array of objects containing the parameters to pass to the XML Web service.","pos":[0,77]},{"content":"The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.","pos":[78,200]}]}]},{"pos":[11817,11986],"content":"The delegate to call when the asynchronous invoke is complete. If `callback` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate to call when the asynchronous invoke is complete.","pos":[0,62]},{"content":"If <ph id=\"ph1\">`callback`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the delegate is not called.","pos":[63,169],"source":" If `callback` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called."}]},{"pos":[12053,12094],"content":"Extra information supplied by the caller.","needQuote":true,"needEscape":true,"nodes":[{"content":"Extra information supplied by the caller.","pos":[0,41]}]},{"pos":[12158,12344],"content":"An <xref:System.IAsyncResult> that is passed to the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> method to obtain the return values from the remote method call.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that is passed to the &lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*&gt; method to obtain the return values from the remote method call.","pos":[0,186],"source":"An <xref:System.IAsyncResult> that is passed to the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> method to obtain the return values from the remote method call."}]},{"pos":[12569,12645],"content":"The request reached the server computer, but was not processed successfully.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request reached the server computer, but was not processed successfully.","pos":[0,76]}]},{"pos":[12756,12813],"content":"The request was not valid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request was not valid for the object's current state.","pos":[0,57]}]},{"pos":[12906,12952],"content":"An error occurred while accessing the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while accessing the network.","pos":[0,46]}]},{"pos":[13395,13534],"content":"Dynamically binds to an XML Web service described in the discovery document at <xref:System.Web.Services.Protocols.WebClientProtocol.Url*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamically binds to an XML Web service described in the discovery document at &lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url*&gt;.","pos":[0,139],"source":"Dynamically binds to an XML Web service described in the discovery document at <xref:System.Web.Services.Protocols.WebClientProtocol.Url*>."}]},{"pos":[13547,14979],"content":"An XML Web service client can dynamically bind to an XML Web service other than the one referenced in the proxy class using the Discover method. Typically, the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property refers to the base address of the XML Web service. However, before invoking the Discover method, set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to a URL of a discovery document. The Discover method attempts to find a match in the discovery document to the binding defined in the proxy class and then dynamically bind to it. If successful, subsequent method calls are directed to the XML Web service described in the discovery document.       If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the <xref:System.Web.Services.WebServiceBindingAttribute>. When an XML Web service implements multiple bindings, Wsdl.exe creates a proxy class for each binding. Applied to each proxy class is a <xref:System.Web.Services.WebServiceBindingAttribute> that defines the name of the binding and its namespace. The discovery document you set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"An XML Web service client can dynamically bind to an XML Web service other than the one referenced in the proxy class using the Discover method. Typically, the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property refers to the base address of the XML Web service. However, before invoking the Discover method, set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to a URL of a discovery document. The Discover method attempts to find a match in the discovery document to the binding defined in the proxy class and then dynamically bind to it. If successful, subsequent method calls are directed to the XML Web service described in the discovery document.       If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the <xref:System.Web.Services.WebServiceBindingAttribute>. When an XML Web service implements multiple bindings, Wsdl.exe creates a proxy class for each binding. Applied to each proxy class is a <xref:System.Web.Services.WebServiceBindingAttribute> that defines the name of the binding and its namespace. The discovery document you set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown.","pos":[0,1430],"nodes":[{"content":"An XML Web service client can dynamically bind to an XML Web service other than the one referenced in the proxy class using the Discover method.","pos":[0,144]},{"content":"Typically, the &lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt; property refers to the base address of the XML Web service.","pos":[145,281],"source":" Typically, the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property refers to the base address of the XML Web service."},{"content":"However, before invoking the Discover method, set the &lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt; property to a URL of a discovery document.","pos":[282,440],"source":" However, before invoking the Discover method, set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to a URL of a discovery document."},{"content":"The Discover method attempts to find a match in the discovery document to the binding defined in the proxy class and then dynamically bind to it.","pos":[441,586]},{"content":"If successful, subsequent method calls are directed to the XML Web service described in the discovery document.","pos":[587,698]},{"content":"If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the &lt;xref:System.Web.Services.WebServiceBindingAttribute&gt;.","pos":[705,948],"source":"       If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the <xref:System.Web.Services.WebServiceBindingAttribute>."},{"content":"When an XML Web service implements multiple bindings, Wsdl.exe creates a proxy class for each binding.","pos":[949,1051]},{"content":"Applied to each proxy class is a &lt;xref:System.Web.Services.WebServiceBindingAttribute&gt; that defines the name of the binding and its namespace.","pos":[1052,1194],"source":" Applied to each proxy class is a <xref:System.Web.Services.WebServiceBindingAttribute> that defines the name of the binding and its namespace."},{"content":"The discovery document you set the &lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt; property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown.","pos":[1195,1430],"source":" The discovery document you set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown."}]}]},{"pos":[16683,16731],"content":"The proxy class does not have a binding defined.","needQuote":true,"needEscape":true,"nodes":[{"content":"The proxy class does not have a binding defined.","pos":[0,48]}]},{"pos":[17257,17329],"content":"Ends an asynchronous invocation of an XML Web service method using SOAP.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous invocation of an XML Web service method using SOAP.","pos":[0,72]}]},{"pos":[17342,18436],"content":"Typically, you would not call the EndInvoke method directly, unless you were building your own proxy class for an XML Web service.       A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class for calling the XML Web service methods synchronously. For calling the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added.       The proxy class calls the EndInvoke method to complete an asynchronous invocation call to the XML Web service method. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `EndAdd`, for completing an asynchronous invocation of an XML Web service method. Within the code for the `EndAdd` a call is made to the EndInvoke method and then the results are placed into the expected return type for `Add`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Typically, you would not call the EndInvoke method directly, unless you were building your own proxy class for an XML Web service.","pos":[0,130]},{"content":"A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class for calling the XML Web service methods synchronously.","pos":[137,363]},{"content":"For calling the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the <ph id=\"ph1\">`Begin`</ph> prefix added to the name of the XML Web service method and one with the <ph id=\"ph2\">`End`</ph> prefix added.","pos":[364,617],"source":" For calling the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added."},{"content":"The proxy class calls the EndInvoke method to complete an asynchronous invocation call to the XML Web service method.","pos":[624,741]},{"content":"For example, if an XML Web service exposes an XML Web service method named <ph id=\"ph1\">`Add`</ph>, the proxy class contains a method named <ph id=\"ph2\">`EndAdd`</ph>, for completing an asynchronous invocation of an XML Web service method.","pos":[742,945],"source":" For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `EndAdd`, for completing an asynchronous invocation of an XML Web service method."},{"content":"Within the code for the <ph id=\"ph1\">`EndAdd`</ph> a call is made to the EndInvoke method and then the results are placed into the expected return type for <ph id=\"ph2\">`Add`</ph>.","pos":[946,1090],"source":" Within the code for the `EndAdd` a call is made to the EndInvoke method and then the results are placed into the expected return type for `Add`."}]},{"pos":[19479,19608],"content":"The <xref:System.IAsyncResult> returned from the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; returned from the &lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*&gt; method.","pos":[0,129],"source":"The <xref:System.IAsyncResult> returned from the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> method."}]},{"pos":[19668,19841],"content":"An array of objects that contains the return value and any by-reference or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_out\" name=\"out\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> parameters of the derived class method.","needQuote":true,"needEscape":true,"source":"An array of objects that contains the return value and any by-reference or <xref uid=\"langword_csharp_out\" name=\"out\" href=\"\"></xref> parameters of the derived class method."},{"pos":[20026,20164],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is not the return value from the <ph id=\"ph2\">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is not the return value from the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> method."},{"pos":[20297,20373],"content":"The request reached the server computer, but was not processed successfully.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request reached the server computer, but was not processed successfully.","pos":[0,76]}]},{"pos":[20484,20541],"content":"The request was not valid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request was not valid for the object's current state.","pos":[0,57]}]},{"pos":[20634,20680],"content":"An error occurred while accessing the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while accessing the network.","pos":[0,46]}]},{"pos":[21371,21583],"content":"Returns an &lt;xref:System.Xml.XmlReader&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapClientMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Xml.XmlReader> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> parameter."},{"pos":[21854,22046],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapClientMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream*&gt; to initialize the &lt;xref:System.Xml.XmlReader&gt;.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> that provides the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> to initialize the <xref:System.Xml.XmlReader>."},{"pos":[22112,22213],"content":"The initial buffer size of the <xref:System.IO.StreamReader> used by the <xref:System.Xml.XmlReader>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial buffer size of the &lt;xref:System.IO.StreamReader&gt; used by the &lt;xref:System.Xml.XmlReader&gt;.","pos":[0,101],"source":"The initial buffer size of the <xref:System.IO.StreamReader> used by the <xref:System.Xml.XmlReader>."}]},{"pos":[22278,22433],"content":"A &lt;xref:System.Xml.XmlReader&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream*&gt; property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">message</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"A <xref:System.Xml.XmlReader> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <code>message</code> parameter."},{"pos":[23037,23111],"content":"Creates a &lt;xref:System.Net.WebRequest&gt; for the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">uri</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a <xref:System.Net.WebRequest> for the specified <code>uri</code>."},{"pos":[23123,23301],"content":"This method can be overridden to customize the <xref:System.Net.WebRequest> before the XML Web service request is made. For example, you could add a custom header to the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method can be overridden to customize the <xref:System.Net.WebRequest> before the XML Web service request is made. For example, you could add a custom header to the request.","pos":[0,178],"nodes":[{"content":"This method can be overridden to customize the &lt;xref:System.Net.WebRequest&gt; before the XML Web service request is made.","pos":[0,119],"source":"This method can be overridden to customize the <xref:System.Net.WebRequest> before the XML Web service request is made."},{"content":"For example, you could add a custom header to the request.","pos":[120,178]}]}]},{"pos":[23463,23539],"content":"The <xref:System.Uri> to use when creating the <xref:System.Net.WebRequest>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Uri&gt; to use when creating the &lt;xref:System.Net.WebRequest&gt;.","pos":[0,76],"source":"The <xref:System.Uri> to use when creating the <xref:System.Net.WebRequest>."}]},{"pos":[23605,23660],"content":"The <xref:System.Net.WebRequest> for the specified URI.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.WebRequest&gt; for the specified URI.","pos":[0,55],"source":"The <xref:System.Net.WebRequest> for the specified URI."}]},{"pos":[23865,23960],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">uri</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>uri</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[24651,24862],"content":"Returns a &lt;xref:System.Xml.XmlWriter&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapClientMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Returns a <xref:System.Xml.XmlWriter> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> parameter."},{"pos":[25133,25325],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapClientMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream*&gt; to initialize the &lt;xref:System.Xml.XmlWriter&gt;.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> that provides the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> to initialize the <xref:System.Xml.XmlWriter>."},{"pos":[25391,25492],"content":"The initial buffer size of the <xref:System.IO.StreamWriter> used by the <xref:System.Xml.XmlWriter>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial buffer size of the &lt;xref:System.IO.StreamWriter&gt; used by the &lt;xref:System.Xml.XmlWriter&gt;.","pos":[0,101],"source":"The initial buffer size of the <xref:System.IO.StreamWriter> used by the <xref:System.Xml.XmlWriter>."}]},{"pos":[25557,25712],"content":"A &lt;xref:System.Xml.XmlWriter&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream*&gt; property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">message</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"A <xref:System.Xml.XmlWriter> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <code>message</code> parameter."},{"pos":[26355,26414],"content":"Invokes an XML Web service method synchronously using SOAP.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes an XML Web service method synchronously using SOAP.","pos":[0,59]}]},{"pos":[26427,27507],"content":"Typically, you do not call the Invoke method directly, unless you are building your own proxy class for an XML Web service.       A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class. The proxy class calls the Invoke method to invoke an XML Web service method call. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class also contains a method named `Add`. Within the code for the `Add` method in the proxy class, a synchronous call is made to the XML Web service method through the Invoke method and then the results are placed into the expected return type for `Add`.       The `methodName` parameter is used to find the custom attributes that may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information on the derived method which is required for the SOAP protocol.","needQuote":false,"needEscape":true,"nodes":[{"content":"Typically, you do not call the Invoke method directly, unless you are building your own proxy class for an XML Web service.","pos":[0,123]},{"content":"A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class.","pos":[130,302]},{"content":"The proxy class calls the Invoke method to invoke an XML Web service method call.","pos":[303,384]},{"content":"For example, if an XML Web service exposes an XML Web service method named <ph id=\"ph1\">`Add`</ph>, the proxy class also contains a method named <ph id=\"ph2\">`Add`</ph>.","pos":[385,518],"source":" For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class also contains a method named `Add`."},{"content":"Within the code for the <ph id=\"ph1\">`Add`</ph> method in the proxy class, a synchronous call is made to the XML Web service method through the Invoke method and then the results are placed into the expected return type for <ph id=\"ph2\">`Add`</ph>.","pos":[519,731],"source":" Within the code for the `Add` method in the proxy class, a synchronous call is made to the XML Web service method through the Invoke method and then the results are placed into the expected return type for `Add`."},{"content":"The <ph id=\"ph1\">`methodName`</ph> parameter is used to find the custom attributes that may have been added to the method, such as &lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;.","pos":[738,916],"source":"       The `methodName` parameter is used to find the custom attributes that may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>."},{"content":"&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt; provides additional information on the derived method which is required for the SOAP protocol.","pos":[917,1076],"source":" <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information on the derived method which is required for the SOAP protocol."}]},{"pos":[28509,28548],"content":"The name of the XML Web service method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the XML Web service method.","pos":[0,39]}]},{"pos":[28617,28821],"content":"An array of objects that contains the parameters to pass to the XML Web service. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of objects that contains the parameters to pass to the XML Web service. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.","pos":[0,204],"nodes":[{"content":"An array of objects that contains the parameters to pass to the XML Web service.","pos":[0,80]},{"content":"The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.","pos":[81,204]}]}]},{"pos":[28881,29112],"content":"An array of objects that contains the return value and any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_reference\" name=\"reference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_out\" name=\"out\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> parameters of the derived class method.","needQuote":true,"needEscape":true,"source":"An array of objects that contains the return value and any <xref uid=\"langword_csharp_reference\" name=\"reference\" href=\"\"></xref> or <xref uid=\"langword_csharp_out\" name=\"out\" href=\"\"></xref> parameters of the derived class method."},{"pos":[29332,29408],"content":"The request reached the server computer, but was not processed successfully.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request reached the server computer, but was not processed successfully.","pos":[0,76]}]},{"pos":[29519,29576],"content":"The request was not valid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request was not valid for the object's current state.","pos":[0,57]}]},{"pos":[29669,29715],"content":"An error occurred while accessing the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while accessing the network.","pos":[0,46]}]},{"pos":[30409,30453],"content":"Invokes the specified method asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the specified method asynchronously.","pos":[0,44]}]},{"pos":[30674,30707],"content":"The name of the method to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method to invoke.","pos":[0,33]}]},{"pos":[30776,30813],"content":"The parameters to pass to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters to pass to the method.","pos":[0,37]}]},{"pos":[30900,30961],"content":"The delegate called when the method invocation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate called when the method invocation has completed.","pos":[0,61]}]},{"pos":[31799,31843],"content":"Invokes the specified method asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the specified method asynchronously.","pos":[0,44]}]},{"pos":[32082,32115],"content":"The name of the method to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method to invoke.","pos":[0,33]}]},{"pos":[32184,32221],"content":"The parameters to pass to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters to pass to the method.","pos":[0,37]}]},{"pos":[32308,32369],"content":"The delegate called when the method invocation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate called when the method invocation has completed.","pos":[0,61]}]},{"pos":[32435,32505],"content":"An object used to pass state information into the <ph id=\"ph1\">`callback`</ph> delegate.","needQuote":true,"needEscape":true,"source":"An object used to pass state information into the `callback` delegate."},{"pos":[33054,33153],"content":"Gets or sets the version of the SOAP protocol used to make the SOAP request to the XML Web service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the version of the SOAP protocol used to make the SOAP request to the XML Web service.","pos":[0,99]}]},{"pos":[33165,33903],"content":"The SoapVersion property is set in the proxy class generated by the Web Services Description Language tool (Wsdl.exe) to <xref:System.Web.Services.Protocols.SoapProtocolVersion> by default when a WSDL document for an XML Web service supports SOAP version 1.1. However, when an XML Web service only supports SOAP 1.2, Wsdl.exe sets the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion>. To choose the version of the SOAP protocol when generating the proxy class with Wsdl.exe, use the `/protocol` switch with the `SOAP` or `SOAP12` settings to set the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion> and <xref:System.Web.Services.Protocols.SoapProtocolVersion>, respectively.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SoapVersion property is set in the proxy class generated by the Web Services Description Language tool (Wsdl.exe) to &lt;xref:System.Web.Services.Protocols.SoapProtocolVersion&gt; by default when a WSDL document for an XML Web service supports SOAP version 1.1.","pos":[0,259],"source":"The SoapVersion property is set in the proxy class generated by the Web Services Description Language tool (Wsdl.exe) to <xref:System.Web.Services.Protocols.SoapProtocolVersion> by default when a WSDL document for an XML Web service supports SOAP version 1.1."},{"content":"However, when an XML Web service only supports SOAP 1.2, Wsdl.exe sets the SoapVersion property to &lt;xref:System.Web.Services.Protocols.SoapProtocolVersion&gt;.","pos":[260,416],"source":" However, when an XML Web service only supports SOAP 1.2, Wsdl.exe sets the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion>."},{"content":"To choose the version of the SOAP protocol when generating the proxy class with Wsdl.exe, use the <ph id=\"ph1\">`/protocol`</ph> switch with the <ph id=\"ph2\">`SOAP`</ph> or <ph id=\"ph3\">`SOAP12`</ph> settings to set the SoapVersion property to &lt;xref:System.Web.Services.Protocols.SoapProtocolVersion&gt; and &lt;xref:System.Web.Services.Protocols.SoapProtocolVersion&gt;, respectively.","pos":[417,738],"source":" To choose the version of the SOAP protocol when generating the proxy class with Wsdl.exe, use the `/protocol` switch with the `SOAP` or `SOAP12` settings to set the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion> and <xref:System.Web.Services.Protocols.SoapProtocolVersion>, respectively."}]},{"pos":[34472,34648],"content":"One of the <xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"></xref> values. The default is <xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,89],"source":"One of the <xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,176],"source":" The default is <xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol\n  id: SoapHttpClientProtocol\n  children:\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.Discover\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)\n  - System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion\n  langs:\n  - csharp\n  name: SoapHttpClientProtocol\n  nameWithType: SoapHttpClientProtocol\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol\n  type: Class\n  summary: Specifies the class client that proxies derive from when using SOAP.\n  remarks: \"If you are building an XML Web service client, then a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> must be created for the XML Web service. When the XML Web service client calls using SOAP, the proxy class must derive from SoapHttpClientProtocol, which derives from <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, in turn, derives from <xref:System.Web.Services.Protocols.WebClientProtocol>.  \\n  \\n To communicate with an XML Web service, create a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> for the XML Web service you want to call. Instead of creating the proxy class manually, use the Web Services Description Language tool (Wsdl.exe) to create a proxy class for a given XML Web service's service description. When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method, whereas asynchronous calls are made using the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method and the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> method.\"\n  example:\n  - \"The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  \\n  \\n [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]\\n [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]\\n [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  \\n  \\n The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Web.Services.Protocols.WebClientProtocol\n  - System.Web.Services.Protocols.HttpWebClientProtocol\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect\n  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)\n  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates\n  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer\n  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression\n  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)\n  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)\n  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)\n  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)\n  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy\n  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing\n  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent\n  - System.Web.Services.Protocols.WebClientProtocol.Abort\n  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)\n  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName\n  - System.Web.Services.Protocols.WebClientProtocol.Credentials\n  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)\n  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate\n  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding\n  - System.Web.Services.Protocols.WebClientProtocol.Timeout\n  - System.Web.Services.Protocols.WebClientProtocol.Url\n  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor\n  id: '#ctor'\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: SoapHttpClientProtocol()\n  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()\n  type: Constructor\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Initializes a new instance of the <xref href=\"System.Web.Services.Protocols.SoapHttpClientProtocol\"></xref> class.\n  syntax:\n    content: public SoapHttpClientProtocol ();\n    parameters: []\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: BeginInvoke(String,Object[],AsyncCallback,Object)\n  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Starts an asynchronous invocation of an XML Web service method using SOAP.\n  remarks: \"Typically, you would not call the BeginInvoke method directly, unless you were building your own proxy class for an XML Web service.  \\n  \\n A proxy class generated by the Web Services Description Language tool (Wsdl.exe) from a Service Description exposes the XML Web service methods as names derived from the proxy class to call the XML Web service methods synchronously. To call the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added.  \\n  \\n The proxy class calls the BeginInvoke method to start an asynchronous invocation call to the XML Web service method. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `BeginAdd`, for starting an invocation to the XML Web service method. Within the code for the `BeginAdd`, a call is made to the BeginInvoke method and the results are placed into the expected return type for `Add`.  \\n  \\n The `methodName` is used to find the custom attributes which may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information about the derived method that is required for the SOAP protocol.  \\n  \\n `asyncState` is passed into `callback` and is included in the <xref:System.IAsyncResult> that is returned from the BeginInvoke method. The `asyncState` parameter can be used to pass information about the context of the asynchronous call, specified in the `callback` parameter, to the delegate that handles the result.\"\n  example:\n  - \"The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  \\n  \\n [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]\\n [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]\\n [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  \\n  \\n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the XML Web service method in the derived class that is invoking the BeginInvoke method.\n    - id: parameters\n      type: System.Object[]\n      description: An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.\n    - id: callback\n      type: System.AsyncCallback\n      description: The delegate to call when the asynchronous invoke is complete. If `callback` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called.\n    - id: asyncState\n      type: System.Object\n      description: Extra information supplied by the caller.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that is passed to the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> method to obtain the return values from the remote method call.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*\n  exceptions:\n  - type: System.Web.Services.Protocols.SoapException\n    commentId: T:System.Web.Services.Protocols.SoapException\n    description: The request reached the server computer, but was not processed successfully.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request was not valid for the object's current state.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: An error occurred while accessing the network.\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover\n  id: Discover\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: Discover()\n  nameWithType: SoapHttpClientProtocol.Discover()\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Dynamically binds to an XML Web service described in the discovery document at <xref:System.Web.Services.Protocols.WebClientProtocol.Url*>.\n  remarks: \"An XML Web service client can dynamically bind to an XML Web service other than the one referenced in the proxy class using the Discover method. Typically, the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property refers to the base address of the XML Web service. However, before invoking the Discover method, set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to a URL of a discovery document. The Discover method attempts to find a match in the discovery document to the binding defined in the proxy class and then dynamically bind to it. If successful, subsequent method calls are directed to the XML Web service described in the discovery document.  \\n  \\n If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the <xref:System.Web.Services.WebServiceBindingAttribute>. When an XML Web service implements multiple bindings, Wsdl.exe creates a proxy class for each binding. Applied to each proxy class is a <xref:System.Web.Services.WebServiceBindingAttribute> that defines the name of the binding and its namespace. The discovery document you set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown.\"\n  example:\n  - \"The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  \\n  \\n [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]\\n [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]\\n [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  \\n  \\n The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]\\n [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]\"\n  syntax:\n    content: public void Discover ();\n    parameters: []\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: The proxy class does not have a binding defined.\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)\n  id: EndInvoke(System.IAsyncResult)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: EndInvoke(IAsyncResult)\n  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Ends an asynchronous invocation of an XML Web service method using SOAP.\n  remarks: \"Typically, you would not call the EndInvoke method directly, unless you were building your own proxy class for an XML Web service.  \\n  \\n A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class for calling the XML Web service methods synchronously. For calling the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added.  \\n  \\n The proxy class calls the EndInvoke method to complete an asynchronous invocation call to the XML Web service method. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `EndAdd`, for completing an asynchronous invocation of an XML Web service method. Within the code for the `EndAdd` a call is made to the EndInvoke method and then the results are placed into the expected return type for `Add`.\"\n  example:\n  - \"The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  \\n  \\n [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]\\n [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]\\n [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  \\n  \\n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: protected object[] EndInvoke (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> returned from the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> method.\n    return:\n      type: System.Object[]\n      description: An array of objects that contains the return value and any by-reference or <xref uid=\"langword_csharp_out\" name=\"out\" href=\"\"></xref> parameters of the derived class method.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> is not the return value from the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> method.\n  - type: System.Web.Services.Protocols.SoapException\n    commentId: T:System.Web.Services.Protocols.SoapException\n    description: The request reached the server computer, but was not processed successfully.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request was not valid for the object's current state.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: An error occurred while accessing the network.\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  id: GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: GetReaderForMessage(SoapClientMessage,Int32)\n  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Returns an <xref:System.Xml.XmlReader> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> parameter.\n  syntax:\n    content: protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);\n    parameters:\n    - id: message\n      type: System.Web.Services.Protocols.SoapClientMessage\n      description: A <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> that provides the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> to initialize the <xref:System.Xml.XmlReader>.\n    - id: bufferSize\n      type: System.Int32\n      description: The initial buffer size of the <xref:System.IO.StreamReader> used by the <xref:System.Xml.XmlReader>.\n    return:\n      type: System.Xml.XmlReader\n      description: A <xref:System.Xml.XmlReader> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <code>message</code> parameter.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)\n  id: GetWebRequest(System.Uri)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: GetWebRequest(Uri)\n  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Creates a <xref:System.Net.WebRequest> for the specified <code>uri</code>.\n  remarks: This method can be overridden to customize the <xref:System.Net.WebRequest> before the XML Web service request is made. For example, you could add a custom header to the request.\n  syntax:\n    content: protected override System.Net.WebRequest GetWebRequest (Uri uri);\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: The <xref:System.Uri> to use when creating the <xref:System.Net.WebRequest>.\n    return:\n      type: System.Net.WebRequest\n      description: The <xref:System.Net.WebRequest> for the specified URI.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <code>uri</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  id: GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: GetWriterForMessage(SoapClientMessage,Int32)\n  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Returns a <xref:System.Xml.XmlWriter> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> parameter.\n  syntax:\n    content: protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);\n    parameters:\n    - id: message\n      type: System.Web.Services.Protocols.SoapClientMessage\n      description: A <xref href=\"System.Web.Services.Protocols.SoapClientMessage\"></xref> that provides the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> to initialize the <xref:System.Xml.XmlWriter>.\n    - id: bufferSize\n      type: System.Int32\n      description: The initial buffer size of the <xref:System.IO.StreamWriter> used by the <xref:System.Xml.XmlWriter>.\n    return:\n      type: System.Xml.XmlWriter\n      description: A <xref:System.Xml.XmlWriter> initialized with the <xref:System.Web.Services.Protocols.SoapMessage.Stream*> property of the <code>message</code> parameter.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])\n  id: Invoke(System.String,System.Object[])\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: Invoke(String,Object[])\n  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Invokes an XML Web service method synchronously using SOAP.\n  remarks: \"Typically, you do not call the Invoke method directly, unless you are building your own proxy class for an XML Web service.  \\n  \\n A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class. The proxy class calls the Invoke method to invoke an XML Web service method call. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class also contains a method named `Add`. Within the code for the `Add` method in the proxy class, a synchronous call is made to the XML Web service method through the Invoke method and then the results are placed into the expected return type for `Add`.  \\n  \\n The `methodName` parameter is used to find the custom attributes that may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information on the derived method which is required for the SOAP protocol.\"\n  example:\n  - \"The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  \\n  \\n [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]\\n [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]\\n [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  \\n  \\n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: protected object[] Invoke (string methodName, object[] parameters);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the XML Web service method.\n    - id: parameters\n      type: System.Object[]\n      description: An array of objects that contains the parameters to pass to the XML Web service. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.\n    return:\n      type: System.Object[]\n      description: An array of objects that contains the return value and any <xref uid=\"langword_csharp_reference\" name=\"reference\" href=\"\"></xref> or <xref uid=\"langword_csharp_out\" name=\"out\" href=\"\"></xref> parameters of the derived class method.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*\n  exceptions:\n  - type: System.Web.Services.Protocols.SoapException\n    commentId: T:System.Web.Services.Protocols.SoapException\n    description: The request reached the server computer, but was not processed successfully.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request was not valid for the object's current state.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: An error occurred while accessing the network.\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)\n  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: InvokeAsync(String,Object[],SendOrPostCallback)\n  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Invokes the specified method asynchronously.\n  syntax:\n    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the method to invoke.\n    - id: parameters\n      type: System.Object[]\n      description: The parameters to pass to the method.\n    - id: callback\n      type: System.Threading.SendOrPostCallback\n      description: The delegate called when the method invocation has completed.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)\n  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)\n  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Invokes the specified method asynchronously.\n  syntax:\n    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);\n    parameters:\n    - id: methodName\n      type: System.String\n      description: The name of the method to invoke.\n    - id: parameters\n      type: System.Object[]\n      description: The parameters to pass to the method.\n    - id: callback\n      type: System.Threading.SendOrPostCallback\n      description: The delegate called when the method invocation has completed.\n    - id: userState\n      type: System.Object\n      description: An object used to pass state information into the `callback` delegate.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion\n  id: SoapVersion\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  langs:\n  - csharp\n  name: SoapVersion\n  nameWithType: SoapHttpClientProtocol.SoapVersion\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets or sets the version of the SOAP protocol used to make the SOAP request to the XML Web service.\n  remarks: The SoapVersion property is set in the proxy class generated by the Web Services Description Language tool (Wsdl.exe) to <xref:System.Web.Services.Protocols.SoapProtocolVersion> by default when a WSDL document for an XML Web service supports SOAP version 1.1. However, when an XML Web service only supports SOAP 1.2, Wsdl.exe sets the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion>. To choose the version of the SOAP protocol when generating the proxy class with Wsdl.exe, use the `/protocol` switch with the `SOAP` or `SOAP12` settings to set the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion> and <xref:System.Web.Services.Protocols.SoapProtocolVersion>, respectively.\n  example:\n  - \"The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  \\n  \\n [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]\\n [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]\"\n  syntax:\n    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }\n    return:\n      type: System.Web.Services.Protocols.SoapProtocolVersion\n      description: One of the <xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"></xref> values. The default is <xref href=\"System.Web.Services.Protocols.SoapProtocolVersion\"></xref>.\n  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Services.Protocols.HttpWebClientProtocol\n  isExternal: false\n  name: System.Web.Services.Protocols.HttpWebClientProtocol\n- uid: System.Web.Services.Protocols.SoapException\n  parent: System.Web.Services.Protocols\n  isExternal: false\n  name: SoapException\n  nameWithType: SoapException\n  fullName: System.Web.Services.Protocols.SoapException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Net.WebException\n  isExternal: true\n  name: System.Net.WebException\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: SoapHttpClientProtocol()\n  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: BeginInvoke(String,Object[],AsyncCallback,Object)\n  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: Discover()\n  nameWithType: SoapHttpClientProtocol.Discover()\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: EndInvoke(IAsyncResult)\n  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: GetReaderForMessage(SoapClientMessage,Int32)\n  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Web.Services.Protocols.SoapClientMessage\n  parent: System.Web.Services.Protocols\n  isExternal: false\n  name: SoapClientMessage\n  nameWithType: SoapClientMessage\n  fullName: System.Web.Services.Protocols.SoapClientMessage\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: GetWebRequest(Uri)\n  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)\n- uid: System.Net.WebRequest\n  parent: System.Net\n  isExternal: true\n  name: WebRequest\n  nameWithType: WebRequest\n  fullName: System.Net.WebRequest\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: GetWriterForMessage(SoapClientMessage,Int32)\n  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: Invoke(String,Object[])\n  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: InvokeAsync(String,Object[],SendOrPostCallback)\n  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)\n- uid: System.Threading.SendOrPostCallback\n  parent: System.Threading\n  isExternal: true\n  name: SendOrPostCallback\n  nameWithType: SendOrPostCallback\n  fullName: System.Threading.SendOrPostCallback\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)\n  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: SoapVersion\n  nameWithType: SoapHttpClientProtocol.SoapVersion\n  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion\n- uid: System.Web.Services.Protocols.SoapProtocolVersion\n  parent: System.Web.Services.Protocols\n  isExternal: false\n  name: SoapProtocolVersion\n  nameWithType: SoapProtocolVersion\n  fullName: System.Web.Services.Protocols.SoapProtocolVersion\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: SoapHttpClientProtocol\n  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: BeginInvoke\n  nameWithType: SoapHttpClientProtocol.BeginInvoke\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: Discover\n  nameWithType: SoapHttpClientProtocol.Discover\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: EndInvoke\n  nameWithType: SoapHttpClientProtocol.EndInvoke\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: GetReaderForMessage\n  nameWithType: SoapHttpClientProtocol.GetReaderForMessage\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: GetWebRequest\n  nameWithType: SoapHttpClientProtocol.GetWebRequest\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: GetWriterForMessage\n  nameWithType: SoapHttpClientProtocol.GetWriterForMessage\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: Invoke\n  nameWithType: SoapHttpClientProtocol.Invoke\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: InvokeAsync\n  nameWithType: SoapHttpClientProtocol.InvokeAsync\n- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*\n  parent: System.Web.Services.Protocols.SoapHttpClientProtocol\n  isExternal: false\n  name: SoapVersion\n  nameWithType: SoapHttpClientProtocol.SoapVersion\n"}