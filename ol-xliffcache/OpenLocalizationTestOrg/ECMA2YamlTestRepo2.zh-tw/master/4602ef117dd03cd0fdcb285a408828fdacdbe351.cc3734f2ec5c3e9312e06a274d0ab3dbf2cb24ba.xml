{"nodes":[{"pos":[431,512],"content":"Supports methods that can be called when a COM component starts up or shuts down.","needQuote":true,"needEscape":true,"nodes":[{"content":"Supports methods that can be called when a COM component starts up or shuts down.","pos":[0,81]}]},{"pos":[525,2650],"content":"Implement the IProcessInitializer interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.       COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends. This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code. An instance of each component that implements the IProcessInitializer interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown. When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.       Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code. However, you must not access states that are specific to COM+ because instances of server components have not yet been created. In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process. If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame. Each server component that participates in initialization must support the IProcessInitializer interface. On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the IProcessInitializer interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function. Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.","needQuote":false,"needEscape":true,"nodes":[{"content":"Implement the IProcessInitializer interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.","pos":[0,200]},{"content":"COM+ provides <ph id=\"ph1\">`Startup`</ph> and <ph id=\"ph2\">`Shutdown`</ph> events when Dllhost.exe starts and ends.","pos":[207,286],"source":"       COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends."},{"content":"This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.","pos":[287,468]},{"content":"An instance of each component that implements the IProcessInitializer interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.","pos":[469,673]},{"content":"When implemented on a &lt;xref:System.EnterpriseServices.ServicedComponent&gt;, during registration of the component, the <ph id=\"ph1\">`InitializesServerApplication`</ph> parameter in the <ph id=\"ph2\">`COMAdminCatalogObject`</ph> within the Components collection is set to <ph id=\"ph3\">`true`</ph>.","pos":[674,912],"source":" When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`."},{"content":"Using the <ph id=\"ph1\">`Startup`</ph> and <ph id=\"ph2\">`Shutdown`</ph> events, you can initialize resources, create connections, initialize shared data, and run cleanup code.","pos":[919,1057],"source":"       Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code."},{"content":"However, you must not access states that are specific to COM+ because instances of server components have not yet been created.","pos":[1058,1185]},{"content":"In addition, the code in the <ph id=\"ph1\">`Startup`</ph> and <ph id=\"ph2\">`Shutdown`</ph> events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.","pos":[1186,1411],"source":" In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process."},{"content":"If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.","pos":[1412,1589]},{"content":"Each server component that participates in initialization must support the IProcessInitializer interface.","pos":[1590,1695]},{"content":"On DllHost.exe startup, COM+ creates all server components that requested this service, calls <ph id=\"ph1\">`QueryInterface`</ph> for the IProcessInitializer interface, and calls the &lt;xref:System.EnterpriseServices.IProcessInitializer.Startup%2A&gt; function.","pos":[1696,1933],"source":" On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the IProcessInitializer interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function."},{"content":"Similarly, when the DllHost.exe process is shut down, it calls the &lt;xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A&gt; function on those previously stored interface pointers.","pos":[1934,2121],"source":" Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers."}]},{"pos":[3366,3430],"content":"Performs shutdown actions. Called when Dllhost.exe is shut down.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs shutdown actions. Called when Dllhost.exe is shut down.","pos":[0,64],"nodes":[{"content":"Performs shutdown actions.","pos":[0,26]},{"content":"Called when Dllhost.exe is shut down.","pos":[27,64]}]}]},{"pos":[3442,3521],"content":"Shutdown is not called during a failfast or other catastrophic shutdown events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Shutdown is not called during a failfast or other catastrophic shutdown events.","pos":[0,79]}]},{"pos":[4137,4208],"content":"Performs initialization at startup. Called when Dllhost.exe is started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs initialization at startup. Called when Dllhost.exe is started.","pos":[0,71],"nodes":[{"content":"Performs initialization at startup.","pos":[0,35]},{"content":"Called when Dllhost.exe is started.","pos":[36,71]}]}]},{"pos":[4221,4752],"content":"The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface. <xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.       The initialization code in Startup can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.","needQuote":false,"needEscape":true,"nodes":[{"content":"The object referenced by <ph id=\"ph1\">`punkProcessControl`</ph> implements an &lt;xref:System.EnterpriseServices.IProcessInitControl&gt; interface.","pos":[0,123],"source":"The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface."},{"content":"&lt;xref:System.EnterpriseServices.IProcessInitControl&gt; supports the single method &lt;xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A&gt;.","pos":[124,284],"source":" <xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>."},{"content":"The initialization code in Startup can call the &lt;xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A&gt;, with the time-out set equal to the number of seconds remaining before the startup of the component times out.","pos":[291,529],"source":"       The initialization code in Startup can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out."}]},{"pos":[4916,5183],"content":"In Microsoft Windows XP, a pointer to the <xref uid=\"langword_csharp_IUnknown\" name=\"IUnknown\" href=\"\"></xref> interface of the COM component starting up. In Microsoft Windows 2000, this argument is always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"In Microsoft Windows XP, a pointer to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IUnknown\" name=\"IUnknown\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface of the COM component starting up.","pos":[0,154],"source":"In Microsoft Windows XP, a pointer to the <xref uid=\"langword_csharp_IUnknown\" name=\"IUnknown\" href=\"\"></xref> interface of the COM component starting up."},{"content":"In Microsoft Windows 2000, this argument is always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[155,267],"source":" In Microsoft Windows 2000, this argument is always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.EnterpriseServices.IProcessInitializer\n  id: IProcessInitializer\n  children:\n  - System.EnterpriseServices.IProcessInitializer.Shutdown\n  - System.EnterpriseServices.IProcessInitializer.Startup(System.Object)\n  langs:\n  - csharp\n  name: IProcessInitializer\n  nameWithType: IProcessInitializer\n  fullName: System.EnterpriseServices.IProcessInitializer\n  type: Interface\n  summary: Supports methods that can be called when a COM component starts up or shuts down.\n  remarks: \"Implement the IProcessInitializer interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.  \\n  \\n COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends. This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code. An instance of each component that implements the IProcessInitializer interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown. When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.  \\n  \\n Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code. However, you must not access states that are specific to COM+ because instances of server components have not yet been created. In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process. If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame. Each server component that participates in initialization must support the IProcessInitializer interface. On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the IProcessInitializer interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function. Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.Guid(\"1113f52d-dc7f-4943-aed6-88d04027e32a\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface IProcessInitializer\n  implements: []\n  platform:\n  - net462\n- uid: System.EnterpriseServices.IProcessInitializer.Shutdown\n  id: Shutdown\n  parent: System.EnterpriseServices.IProcessInitializer\n  langs:\n  - csharp\n  name: Shutdown()\n  nameWithType: IProcessInitializer.Shutdown()\n  fullName: System.EnterpriseServices.IProcessInitializer.Shutdown()\n  type: Method\n  assemblies:\n  - System.EnterpriseServices\n  namespace: System.EnterpriseServices\n  summary: Performs shutdown actions. Called when Dllhost.exe is shut down.\n  remarks: Shutdown is not called during a failfast or other catastrophic shutdown events.\n  syntax:\n    content: public void Shutdown ();\n    parameters: []\n  overload: System.EnterpriseServices.IProcessInitializer.Shutdown*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.EnterpriseServices.IProcessInitializer.Startup(System.Object)\n  id: Startup(System.Object)\n  parent: System.EnterpriseServices.IProcessInitializer\n  langs:\n  - csharp\n  name: Startup(Object)\n  nameWithType: IProcessInitializer.Startup(Object)\n  fullName: System.EnterpriseServices.IProcessInitializer.Startup(Object)\n  type: Method\n  assemblies:\n  - System.EnterpriseServices\n  namespace: System.EnterpriseServices\n  summary: Performs initialization at startup. Called when Dllhost.exe is started.\n  remarks: \"The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface. <xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  \\n  \\n The initialization code in Startup can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.\"\n  syntax:\n    content: public void Startup (object punkProcessControl);\n    parameters:\n    - id: punkProcessControl\n      type: System.Object\n      description: In Microsoft Windows XP, a pointer to the <xref uid=\"langword_csharp_IUnknown\" name=\"IUnknown\" href=\"\"></xref> interface of the COM component starting up. In Microsoft Windows 2000, this argument is always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.EnterpriseServices.IProcessInitializer.Startup*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EnterpriseServices.IProcessInitializer.Shutdown\n  parent: System.EnterpriseServices.IProcessInitializer\n  isExternal: false\n  name: Shutdown()\n  nameWithType: IProcessInitializer.Shutdown()\n  fullName: System.EnterpriseServices.IProcessInitializer.Shutdown()\n- uid: System.EnterpriseServices.IProcessInitializer.Startup(System.Object)\n  parent: System.EnterpriseServices.IProcessInitializer\n  isExternal: false\n  name: Startup(Object)\n  nameWithType: IProcessInitializer.Startup(Object)\n  fullName: System.EnterpriseServices.IProcessInitializer.Startup(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.EnterpriseServices.IProcessInitializer.Shutdown*\n  parent: System.EnterpriseServices.IProcessInitializer\n  isExternal: false\n  name: Shutdown\n  nameWithType: IProcessInitializer.Shutdown\n- uid: System.EnterpriseServices.IProcessInitializer.Startup*\n  parent: System.EnterpriseServices.IProcessInitializer\n  isExternal: false\n  name: Startup\n  nameWithType: IProcessInitializer.Startup\n"}