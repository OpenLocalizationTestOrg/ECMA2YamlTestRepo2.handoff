{"nodes":[{"pos":[316,692],"content":"Represents the method that handles the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SendMailError\" name=\"SendMailError\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event of controls such as the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.ChangePassword\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control, the <bpt id=\"p3\">&lt;xref href=\"System.Web.UI.WebControls.CreateUserWizard\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> control, and the <bpt id=\"p4\">&lt;xref href=\"System.Web.UI.WebControls.PasswordRecovery\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Represents the method that handles the <xref uid=\"langword_csharp_SendMailError\" name=\"SendMailError\" href=\"\"></xref> event of controls such as the <xref href=\"System.Web.UI.WebControls.ChangePassword\"></xref> control, the <xref href=\"System.Web.UI.WebControls.CreateUserWizard\"></xref> control, and the <xref href=\"System.Web.UI.WebControls.PasswordRecovery\"></xref> control."},{"pos":[705,2520],"content":"When you create a SendMailErrorEventHandler delegate, you identify the method that will handle the event. To associate the event with the event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate from the event. For more information about event-handler delegates, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).       Handling the `SendMailError` event allows your Web application to continue running, even if an exception occurs when trying to send an e-mail message. For example, this is useful if the exception occurs when a user is working through a multi-step wizard. It is preferable to log the error, display an informative message to the user, and allow the user to complete the wizard rather than terminate the application.       If you do not create an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event, or if you create an event handler but leave the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property set to `false`, your Web application will stop running if an error occurs when sending an e-mail message, and ASP.NET will display an error message.       The <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> method also allows derived classes to handle the event instead of the SendMailErrorEventHandler. This is the preferred technique for handling the event in a class that is derived from <xref:System.Web.UI.WebControls.ChangePassword> or <xref:System.Web.UI.WebControls.CreateUserWizard>.       For more information about handling events, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"When you create a SendMailErrorEventHandler delegate, you identify the method that will handle the event.","pos":[0,105]},{"content":"To associate the event with the event handler, add an instance of the delegate to the event.","pos":[106,198]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate from the event.","pos":[199,300]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Server Event Handling in ASP.NET Web Forms Pages<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[301,447],"source":" For more information about event-handler delegates, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md)."},{"content":"Handling the <ph id=\"ph1\">`SendMailError`</ph> event allows your Web application to continue running, even if an exception occurs when trying to send an e-mail message.","pos":[454,604],"source":"       Handling the `SendMailError` event allows your Web application to continue running, even if an exception occurs when trying to send an e-mail message."},{"content":"For example, this is useful if the exception occurs when a user is working through a multi-step wizard.","pos":[605,708]},{"content":"It is preferable to log the error, display an informative message to the user, and allow the user to complete the wizard rather than terminate the application.","pos":[709,868]},{"content":"If you do not create an event handler for the &lt;xref:System.Web.UI.WebControls.ChangePassword.SendMailError&gt; event, or if you create an event handler but leave the &lt;xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A&gt; property set to <ph id=\"ph1\">`false`</ph>, your Web application will stop running if an error occurs when sending an e-mail message, and ASP.NET will display an error message.","pos":[875,1262],"source":"       If you do not create an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event, or if you create an event handler but leave the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property set to `false`, your Web application will stop running if an error occurs when sending an e-mail message, and ASP.NET will display an error message."},{"content":"The &lt;xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A&gt; method also allows derived classes to handle the event instead of the SendMailErrorEventHandler.","pos":[1269,1436],"source":"       The <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> method also allows derived classes to handle the event instead of the SendMailErrorEventHandler."},{"content":"This is the preferred technique for handling the event in a class that is derived from &lt;xref:System.Web.UI.WebControls.ChangePassword&gt; or &lt;xref:System.Web.UI.WebControls.CreateUserWizard&gt;.","pos":[1437,1625],"source":" This is the preferred technique for handling the event in a class that is derived from <xref:System.Web.UI.WebControls.ChangePassword> or <xref:System.Web.UI.WebControls.CreateUserWizard>."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>Server Event Handling in ASP.NET Web Forms Pages<ept id=\"p1\">](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md)</ept>.","pos":[1632,1807],"source":"       For more information about handling events, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md)."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.SendMailErrorEventHandler\n  id: SendMailErrorEventHandler\n  langs:\n  - csharp\n  name: SendMailErrorEventHandler\n  nameWithType: SendMailErrorEventHandler\n  fullName: System.Web.UI.WebControls.SendMailErrorEventHandler\n  type: Delegate\n  summary: Represents the method that handles the <xref uid=\"langword_csharp_SendMailError\" name=\"SendMailError\" href=\"\"></xref> event of controls such as the <xref href=\"System.Web.UI.WebControls.ChangePassword\"></xref> control, the <xref href=\"System.Web.UI.WebControls.CreateUserWizard\"></xref> control, and the <xref href=\"System.Web.UI.WebControls.PasswordRecovery\"></xref> control.\n  remarks: \"When you create a SendMailErrorEventHandler delegate, you identify the method that will handle the event. To associate the event with the event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate from the event. For more information about event-handler delegates, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Handling the `SendMailError` event allows your Web application to continue running, even if an exception occurs when trying to send an e-mail message. For example, this is useful if the exception occurs when a user is working through a multi-step wizard. It is preferable to log the error, display an informative message to the user, and allow the user to complete the wizard rather than terminate the application.  \\n  \\n If you do not create an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event, or if you create an event handler but leave the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property set to `false`, your Web application will stop running if an error occurs when sending an e-mail message, and ASP.NET will display an error message.  \\n  \\n The <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> method also allows derived classes to handle the event instead of the SendMailErrorEventHandler. This is the preferred technique for handling the event in a class that is derived from <xref:System.Web.UI.WebControls.ChangePassword> or <xref:System.Web.UI.WebControls.CreateUserWizard>.  \\n  \\n For more information about handling events, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md).\"\n  example:\n  - \"The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event named `SendMailError`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the `SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \\n  \\n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \\n  \\n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_1.aspx)]  \\n  \\n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \\n  \\n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_2.vb)]\\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_2.cs)]\"\n  syntax:\n    content: public delegate void SendMailErrorEventHandler(object sender, SendMailErrorEventArgs e);\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}