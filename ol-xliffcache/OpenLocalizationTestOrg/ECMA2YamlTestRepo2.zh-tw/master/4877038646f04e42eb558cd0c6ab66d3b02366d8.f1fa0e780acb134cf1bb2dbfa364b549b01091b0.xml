{"nodes":[{"pos":[1122,1250],"content":"Represents a query that tests whether a message matches an EndpointAddress using a <bpt id=\"p1\">*</bpt>Longest-Prefix Match<ept id=\"p1\">*</ept> for the URI component.","needQuote":true,"needEscape":true,"source":"Represents a query that tests whether a message matches an EndpointAddress using a *Longest-Prefix Match* for the URI component."},{"pos":[1263,2514],"content":"An <xref:System.ServiceModel.EndpointAddress> object includes a URI and an optional collection of addressing headers. The addressing and message headers are canonicalized to be compared for equality. If a parameter appears more than once in an <xref:System.ServiceModel.EndpointAddress>, the corresponding header must appear in the message at least that many times.       This filter performs the same query as <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>, except that the test for whether a message matches an endpoint address is done by a *Longest-Prefix Match*. This means that the URI specified in the filter does not have to match the message's URI exactly, but must be contained in that URI as a prefix. For example, if a filter specifies the address \"www.foo.com\", and a message is addressed to \"www.foo.com/customerA\", then the URI part of the filter query condition will be met. However, the header portion of the filter query still has to be done.       Internet Information Services (IIS) and the underlying file system (NTFS or FAT) are case-insensitive. URI comparisons done by this class are also case-insensitive. So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com.","needQuote":false,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.ServiceModel.EndpointAddress&gt; object includes a URI and an optional collection of addressing headers.","pos":[0,117],"source":"An <xref:System.ServiceModel.EndpointAddress> object includes a URI and an optional collection of addressing headers."},{"content":"The addressing and message headers are canonicalized to be compared for equality.","pos":[118,199]},{"content":"If a parameter appears more than once in an &lt;xref:System.ServiceModel.EndpointAddress&gt;, the corresponding header must appear in the message at least that many times.","pos":[200,365],"source":" If a parameter appears more than once in an <xref:System.ServiceModel.EndpointAddress>, the corresponding header must appear in the message at least that many times."},{"content":"This filter performs the same query as &lt;xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter&gt;, except that the test for whether a message matches an endpoint address is done by a <bpt id=\"p1\">*</bpt>Longest-Prefix Match<ept id=\"p1\">*</ept>.","pos":[372,586],"source":"       This filter performs the same query as <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>, except that the test for whether a message matches an endpoint address is done by a *Longest-Prefix Match*."},{"content":"This means that the URI specified in the filter does not have to match the message's URI exactly, but must be contained in that URI as a prefix.","pos":[587,731]},{"content":"For example, if a filter specifies the address \"www.foo.com\", and a message is addressed to \"www.foo.com/customerA\", then the URI part of the filter query condition will be met.","pos":[732,909]},{"content":"However, the header portion of the filter query still has to be done.","pos":[910,979]},{"content":"Internet Information Services (IIS) and the underlying file system (NTFS or FAT) are case-insensitive.","pos":[986,1088]},{"content":"URI comparisons done by this class are also case-insensitive.","pos":[1089,1150]},{"content":"So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com.","pos":[1151,1243]}]},{"pos":[3450,3577],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> class."},{"pos":[3791,3872],"content":"The <xref:System.ServiceModel.EndpointAddress> against which messages are tested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.EndpointAddress&gt; against which messages are tested.","pos":[0,81],"source":"The <xref:System.ServiceModel.EndpointAddress> against which messages are tested."}]},{"pos":[4074,4159],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[4906,5033],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> class."},{"pos":[5046,5488],"content":"If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:      -   http://localhost/foo.svc      -   http://192.168.1.100/foo.svc      -   http://[my-machine-name]/foo.svc      -   http://[my-machine-name].[my-company].com/foo.svc.       If the value of the `includeHostNameInComparison` parameter is `false`, the above URIs all resolve to the same endpoint.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:      -   http://localhost/foo.svc      -   http://192.168.1.100/foo.svc      -   http://[my-machine-name]/foo.svc      -   http://[my-machine-name].[my-company].com/foo.svc.","pos":[0,305]},{"content":"If the value of the <ph id=\"ph1\">`includeHostNameInComparison`</ph> parameter is <ph id=\"ph2\">`false`</ph>, the above URIs all resolve to the same endpoint.","pos":[312,432],"source":"       If the value of the `includeHostNameInComparison` parameter is `false`, the above URIs all resolve to the same endpoint."}]},{"pos":[5737,5818],"content":"The <xref:System.ServiceModel.EndpointAddress> against which messages are tested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.EndpointAddress&gt; against which messages are tested.","pos":[0,81],"source":"The <xref:System.ServiceModel.EndpointAddress> against which messages are tested."}]},{"pos":[5903,6103],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the host name is included in the endpoint address comparison; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the host name is included in the endpoint address comparison; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6305,6390],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[6876,7021],"content":"Gets the Endpoint Address that the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> tests messages against.","needQuote":true,"needEscape":true,"source":"Gets the Endpoint Address that the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> tests messages against."},{"pos":[7184,7350],"content":"The &lt;xref:System.ServiceModel.EndpointAddress&gt; that the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> tests messages against.","needQuote":true,"needEscape":true,"source":"The <xref:System.ServiceModel.EndpointAddress> that the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> tests messages against."},{"pos":[8253,8265],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8977,9074],"content":"Gets a value that indicates whether the host name is included in the endpoint address comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the host name is included in the endpoint address comparison.","pos":[0,97]}]},{"pos":[9087,9540],"content":"If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:      -   http://localhost/foo.svc      -   http://192.168.1.100/foo.svc      -   http://[my-machine-name]/foo.svc      -   http://[my-machine-name].[my-company].com/foo.svc.       The default value of this property is `false`, so the above URIs all resolve to the same endpoint, unless you change this property.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:      -   http://localhost/foo.svc      -   http://192.168.1.100/foo.svc      -   http://[my-machine-name]/foo.svc      -   http://[my-machine-name].[my-company].com/foo.svc.","pos":[0,305]},{"content":"The default value of this property is <ph id=\"ph1\">`false`</ph>, so the above URIs all resolve to the same endpoint, unless you change this property.","pos":[312,443],"source":"       The default value of this property is `false`, so the above URIs all resolve to the same endpoint, unless you change this property."}]},{"pos":[9672,9872],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the host name is included in the endpoint address comparison; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the host name is included in the endpoint address comparison; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10573,10638],"content":"Tests whether a message satisfies the specified endpoint address.","needQuote":true,"needEscape":true,"nodes":[{"content":"Tests whether a message satisfies the specified endpoint address.","pos":[0,65]}]},{"pos":[10650,10822],"content":"The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.","needQuote":true,"needEscape":true,"nodes":[{"content":"The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.","pos":[0,172]}]},{"pos":[11023,11086],"content":"The <xref:System.ServiceModel.Channels.Message> object to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.Message&gt; object to test.","pos":[0,63],"source":"The <xref:System.ServiceModel.Channels.Message> object to test."}]},{"pos":[11145,11394],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.ServiceModel.Channels.Message&gt; object satisfies the endpoint address specified in the filter; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.Message> object satisfies the endpoint address specified in the filter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11596,11681],"content":"<ph id=\"ph1\">&lt;code&gt;message&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>message</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12288,12362],"content":"Tests whether a buffered message satisfies the specified endpoint address.","needQuote":true,"needEscape":true,"nodes":[{"content":"Tests whether a buffered message satisfies the specified endpoint address.","pos":[0,74]}]},{"pos":[12374,12546],"content":"The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.","needQuote":true,"needEscape":true,"nodes":[{"content":"The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.","pos":[0,172]}]},{"pos":[12771,12840],"content":"The <xref:System.ServiceModel.Channels.MessageBuffer> object to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.MessageBuffer&gt; object to test.","pos":[0,69],"source":"The <xref:System.ServiceModel.Channels.MessageBuffer> object to test."}]},{"pos":[12899,13130],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.ServiceModel.Channels.MessageBuffer&gt; object satisfies the endpoint address; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.MessageBuffer> object satisfies the endpoint address; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13332,13423],"content":"<ph id=\"ph1\">&lt;code&gt;messageBuffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>messageBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  id: PrefixEndpointAddressMessageFilter\n  children:\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)\n  - System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)\n  langs:\n  - csharp\n  name: PrefixEndpointAddressMessageFilter\n  nameWithType: PrefixEndpointAddressMessageFilter\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  type: Class\n  summary: Represents a query that tests whether a message matches an EndpointAddress using a *Longest-Prefix Match* for the URI component.\n  remarks: \"An <xref:System.ServiceModel.EndpointAddress> object includes a URI and an optional collection of addressing headers. The addressing and message headers are canonicalized to be compared for equality. If a parameter appears more than once in an <xref:System.ServiceModel.EndpointAddress>, the corresponding header must appear in the message at least that many times.  \\n  \\n This filter performs the same query as <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>, except that the test for whether a message matches an endpoint address is done by a *Longest-Prefix Match*. This means that the URI specified in the filter does not have to match the message's URI exactly, but must be contained in that URI as a prefix. For example, if a filter specifies the address \\\"www.foo.com\\\", and a message is addressed to \\\"www.foo.com/customerA\\\", then the URI part of the filter query condition will be met. However, the header portion of the filter query still has to be done.  \\n  \\n Internet Information Services (IIS) and the underlying file system (NTFS or FAT) are case-insensitive. URI comparisons done by this class are also case-insensitive. So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com.\"\n  syntax:\n    content: 'public class PrefixEndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter'\n  inheritance:\n  - System.Object\n  - System.ServiceModel.Dispatcher.MessageFilter\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)\n  id: '#ctor(System.ServiceModel.EndpointAddress)'\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: PrefixEndpointAddressMessageFilter(EndpointAddress)\n  nameWithType: PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> class.\n  syntax:\n    content: public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address);\n    parameters:\n    - id: address\n      type: System.ServiceModel.EndpointAddress\n      description: The <xref:System.ServiceModel.EndpointAddress> against which messages are tested.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)\n  id: '#ctor(System.ServiceModel.EndpointAddress,System.Boolean)'\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: PrefixEndpointAddressMessageFilter(EndpointAddress,Boolean)\n  nameWithType: PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress,Boolean)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress,Boolean)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> class.\n  remarks: \"If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:  \\n  \\n-   http://localhost/foo.svc  \\n  \\n-   http://192.168.1.100/foo.svc  \\n  \\n-   http://[my-machine-name]/foo.svc  \\n  \\n-   http://[my-machine-name].[my-company].com/foo.svc.  \\n  \\n If the value of the `includeHostNameInComparison` parameter is `false`, the above URIs all resolve to the same endpoint.\"\n  syntax:\n    content: public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison);\n    parameters:\n    - id: address\n      type: System.ServiceModel.EndpointAddress\n      description: The <xref:System.ServiceModel.EndpointAddress> against which messages are tested.\n    - id: includeHostNameInComparison\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the host name is included in the endpoint address comparison; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address\n  id: Address\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: Address\n  nameWithType: PrefixEndpointAddressMessageFilter.Address\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Gets the Endpoint Address that the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> tests messages against.\n  syntax:\n    content: public System.ServiceModel.EndpointAddress Address { get; }\n    return:\n      type: System.ServiceModel.EndpointAddress\n      description: The <xref:System.ServiceModel.EndpointAddress> that the <xref href=\"System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\"></xref> tests messages against.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1\n  id: CreateFilterTable``1\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: CreateFilterTable()\n  nameWithType: PrefixEndpointAddressMessageFilter.CreateFilterTable()\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: protected override System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData> ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Dispatcher.IMessageFilterTable{FilterData}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable<FilterData>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n  id: IncludeHostNameInComparison\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: IncludeHostNameInComparison\n  nameWithType: PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Gets a value that indicates whether the host name is included in the endpoint address comparison.\n  remarks: \"If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:  \\n  \\n-   http://localhost/foo.svc  \\n  \\n-   http://192.168.1.100/foo.svc  \\n  \\n-   http://[my-machine-name]/foo.svc  \\n  \\n-   http://[my-machine-name].[my-company].com/foo.svc.  \\n  \\n The default value of this property is `false`, so the above URIs all resolve to the same endpoint, unless you change this property.\"\n  syntax:\n    content: public bool IncludeHostNameInComparison { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the host name is included in the endpoint address comparison; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)\n  id: Match(System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: Match(Message)\n  nameWithType: PrefixEndpointAddressMessageFilter.Match(Message)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Tests whether a message satisfies the specified endpoint address.\n  remarks: The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.\n  syntax:\n    content: public override bool Match (System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The <xref:System.ServiceModel.Channels.Message> object to test.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.Message> object satisfies the endpoint address specified in the filter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>message</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)\n  id: Match(System.ServiceModel.Channels.MessageBuffer)\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  langs:\n  - csharp\n  name: Match(MessageBuffer)\n  nameWithType: PrefixEndpointAddressMessageFilter.Match(MessageBuffer)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(MessageBuffer)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Tests whether a buffered message satisfies the specified endpoint address.\n  remarks: The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.\n  syntax:\n    content: public override bool Match (System.ServiceModel.Channels.MessageBuffer messageBuffer);\n    parameters:\n    - id: messageBuffer\n      type: System.ServiceModel.Channels.MessageBuffer\n      description: The <xref:System.ServiceModel.Channels.MessageBuffer> object to test.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.Channels.MessageBuffer> object satisfies the endpoint address; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>messageBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Dispatcher.MessageFilter\n  isExternal: false\n  name: System.ServiceModel.Dispatcher.MessageFilter\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: PrefixEndpointAddressMessageFilter(EndpointAddress)\n  nameWithType: PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress)\n- uid: System.ServiceModel.EndpointAddress\n  parent: System.ServiceModel\n  isExternal: true\n  name: EndpointAddress\n  nameWithType: EndpointAddress\n  fullName: System.ServiceModel.EndpointAddress\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: PrefixEndpointAddressMessageFilter(EndpointAddress,Boolean)\n  nameWithType: PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress,Boolean)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter(EndpointAddress,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: Address\n  nameWithType: PrefixEndpointAddressMessageFilter.Address\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: CreateFilterTable()\n  nameWithType: PrefixEndpointAddressMessageFilter.CreateFilterTable()\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable()\n- uid: System.ServiceModel.Dispatcher.IMessageFilterTable{FilterData}\n  parent: System.ServiceModel.Dispatcher\n  isExternal: false\n  name: IMessageFilterTable<FilterData>\n  nameWithType: IMessageFilterTable<FilterData>\n  fullName: System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData>\n  spec.csharp:\n  - uid: System.ServiceModel.Dispatcher.IMessageFilterTable`1\n    name: IMessageFilterTable\n    nameWithType: IMessageFilterTable\n    fullName: IMessageFilterTable<FilterData>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: FilterData\n    name: FilterData\n    nameWithType: FilterData\n    fullName: FilterData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: IncludeHostNameInComparison\n  nameWithType: PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: Match(Message)\n  nameWithType: PrefixEndpointAddressMessageFilter.Match(Message)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(Message)\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: Match(MessageBuffer)\n  nameWithType: PrefixEndpointAddressMessageFilter.Match(MessageBuffer)\n  fullName: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(MessageBuffer)\n- uid: System.ServiceModel.Channels.MessageBuffer\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: MessageBuffer\n  nameWithType: MessageBuffer\n  fullName: System.ServiceModel.Channels.MessageBuffer\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor*\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: PrefixEndpointAddressMessageFilter\n  nameWithType: PrefixEndpointAddressMessageFilter.PrefixEndpointAddressMessageFilter\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address*\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: Address\n  nameWithType: PrefixEndpointAddressMessageFilter.Address\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable<FilterData>*\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: CreateFilterTable<FilterData>\n  nameWithType: PrefixEndpointAddressMessageFilter.CreateFilterTable<FilterData>\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison*\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: IncludeHostNameInComparison\n  nameWithType: PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison\n- uid: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match*\n  parent: System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter\n  isExternal: false\n  name: Match\n  nameWithType: PrefixEndpointAddressMessageFilter.Match\n"}