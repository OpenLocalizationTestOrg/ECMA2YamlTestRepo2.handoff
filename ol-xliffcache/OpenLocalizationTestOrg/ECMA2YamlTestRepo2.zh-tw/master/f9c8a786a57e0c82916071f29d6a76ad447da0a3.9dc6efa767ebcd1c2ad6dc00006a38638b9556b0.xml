{"nodes":[{"pos":[665,834],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and &lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt; routed events.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> and <xref:System.Windows.Input.CommandManager.PreviewCanExecute> routed events."},{"pos":[847,1677],"content":"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.       The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.","needQuote":false,"needEscape":true,"nodes":[{"content":"Typically, a command source, such a &lt;xref:System.Windows.Controls.MenuItem&gt;, will call the &lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt; method on a &lt;xref:System.Windows.Input.RoutedCommand&gt; to determine if the command can or cannot execute on the current command target.","pos":[0,281],"source":"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target."},{"content":"If &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt; is set to <ph id=\"ph1\">`false`</ph> from an event handler, the command source will disable itself.","pos":[283,434],"source":"  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself."},{"content":"For example, if a &lt;xref:System.Windows.Controls.MenuItem&gt; is acting as the command source for a command and the command cannot execute on the current command target, then the &lt;xref:System.Windows.Controls.MenuItem&gt; will gray itself out.","pos":[436,672],"source":"  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out."},{"content":"The &lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt; event notifies a command source when the ability of a command to execute may have changed.","pos":[679,828],"source":"       The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed."}]},{"pos":[3392,3561],"content":"Gets or sets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this event can be executed on the command target.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> associated with this event can be executed on the command target."},{"pos":[3573,3768],"content":"Many command sources, such as &lt;xref:System.Windows.Controls.MenuItem&gt; and &lt;xref:System.Windows.Controls.Button&gt;, are disabled when CanExecute is <ph id=\"ph1\">`false`</ph> and enabled when the CanExecute is <ph id=\"ph2\">`true`</ph>.","needQuote":true,"needEscape":true,"source":"Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when CanExecute is `false` and enabled when the CanExecute is `true`."},{"pos":[4633,4906],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event can be executed on the command target; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event can be executed on the command target; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,187],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event can be executed on the command target; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[189,273],"source":"  The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[5401,5445],"content":"Gets the command associated with this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the command associated with this event.","pos":[0,44]}]},{"pos":[5457,5562],"content":"For more information on commanding, see the <bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For more information on commanding, see the [Commanding Overview](~/add/includes/ajax-current-ext-md.md)."},{"pos":[6884,7040],"content":"The command. Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>. There is no default value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command.","pos":[0,12]},{"content":"Unless the command is a custom command, this is generally a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[13,129],"source":" Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."},{"content":"There is no default value.","pos":[130,156]}]},{"pos":[7572,7689],"content":"Determines whether the input routed event that invoked the command should continue to route through the element tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the input routed event that invoked the command should continue to route through the element tree.","pos":[0,117]}]},{"pos":[7813,8102],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the routed event should continue to route through element tree; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.   The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the routed event should continue to route through element tree; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,202],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the routed event should continue to route through element tree; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[205,289],"source":"   The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[8953,8965],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9028,9040],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9553,9584],"content":"Gets the command specific data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the command specific data.","pos":[0,31]}]},{"pos":[9597,9832],"content":"The command parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.       Parameter can be `null`. Many commands do not process or expect command parameters.","needQuote":false,"needEscape":true,"nodes":[{"content":"The command parameter is used to pass specific information to the command when it is executed.","pos":[0,94]},{"content":"The type of the data is defined by the command.","pos":[96,143]},{"content":"Parameter can be <ph id=\"ph1\">`null`</ph>.","pos":[150,174],"source":"       Parameter can be `null`."},{"content":"Many commands do not process or expect command parameters.","pos":[175,233]}]},{"pos":[11206,11307],"content":"The command data.  The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command data.","pos":[0,17]},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[19,101],"source":"  The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs\n  id: CanExecuteRoutedEventArgs\n  children:\n  - System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  - System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  - System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  - System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  - System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  langs:\n  - csharp\n  name: CanExecuteRoutedEventArgs\n  nameWithType: CanExecuteRoutedEventArgs\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> and <xref:System.Windows.Input.CommandManager.PreviewCanExecute> routed events.\n  remarks: \"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.  \\n  \\n The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.\"\n  example:\n  - \"The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.  First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.  If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcanexecute)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcanexecute)]\"\n  syntax:\n    content: 'public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs'\n  inheritance:\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  id: CanExecute\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: CanExecute\n  nameWithType: CanExecuteRoutedEventArgs.CanExecute\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets a value that indicates whether the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> associated with this event can be executed on the command target.\n  remarks: Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when CanExecute is `false` and enabled when the CanExecute is `true`.\n  example:\n  - \"The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.  First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.  If it is a <xref:System.Windows.Controls.Control>, CanExecute is set to `true`; otherwise, it is set to `false`.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcanexecute)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcanexecute)]\"\n  syntax:\n    content: public bool CanExecute { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event can be executed on the command target; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  id: Command\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: Command\n  nameWithType: CanExecuteRoutedEventArgs.Command\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the command associated with this event.\n  remarks: For more information on commanding, see the [Commanding Overview](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.  If the Command property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.  If the Command property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewmultiplecanexecute)]\"\n  syntax:\n    content: public System.Windows.Input.ICommand Command { get; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The command. Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>. There is no default value.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.Command*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  id: ContinueRouting\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: ContinueRouting\n  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Determines whether the input routed event that invoked the command should continue to route through the element tree.\n  syntax:\n    content: public bool ContinueRouting { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the routed event should continue to route through element tree; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.   The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object target);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: To be added.\n    - id: target\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  id: Parameter\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: Parameter\n  nameWithType: CanExecuteRoutedEventArgs.Parameter\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the command specific data.\n  remarks: \"The command parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.  \\n  \\n Parameter can be `null`. Many commands do not process or expect command parameters.\"\n  example:\n  - \"The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.  The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customComand`and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.  This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.  The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n [!code-xml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/add/codesnippet/xaml/InvalidateRequeryWithDispatcherTimer/Window1.xaml#invalidatesampleslidercommandparameter)]\"\n  syntax:\n    content: public object Parameter { get; }\n    return:\n      type: System.Object\n      description: The command data.  The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: System.Windows.RoutedEventArgs\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: CanExecute\n  nameWithType: CanExecuteRoutedEventArgs.CanExecute\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Command\n  nameWithType: CanExecuteRoutedEventArgs.Command\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Command\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: true\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: ContinueRouting\n  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Parameter\n  nameWithType: CanExecuteRoutedEventArgs.Parameter\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: CanExecute\n  nameWithType: CanExecuteRoutedEventArgs.CanExecute\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Command\n  nameWithType: CanExecuteRoutedEventArgs.Command\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: ContinueRouting\n  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Parameter\n  nameWithType: CanExecuteRoutedEventArgs.Parameter\n"}