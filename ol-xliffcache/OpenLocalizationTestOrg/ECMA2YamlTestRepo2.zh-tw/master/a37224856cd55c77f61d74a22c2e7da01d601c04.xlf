<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a37224856cd55c77f61d74a22c2e7da01d601c04</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\Microsoft.VisualBasic.ErrObject.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d967d8195254c0acfb8240751ff80a05b648ab6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7561f43e964dc435ab31bf0a6f20e0c0ba01667e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_ErrObject" name="ErrObject" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> module contains properties and procedures used to identify and handle run-time errors using the <bpt id="p2">&lt;xref uid="langword_csharp_Err" name="Err" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ErrObject`</ph> module supports the <ph id="ph2">`Err`</ph> object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Clears all property settings of the <bpt id="p1">&lt;xref uid="langword_csharp_Err" name="Err" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`Clear`</ph> to explicitly clear the <ph id="ph2">`Err`</ph> object after an error has been handled, such as when you use deferred error handling with <ph id="ph3">`On Error Resume Next`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Clear`</ph> method is called automatically whenever any of the following statements executes:      -   Any type of <ph id="ph2">`Resume`</ph> statement      -   <ph id="ph3">`Exit Sub`</ph>, <ph id="ph4">`Exit Function`</ph>, or <ph id="ph5">`Exit Property`</ph>      -   Any <ph id="ph6">`On Error`</ph> statement      -   Any <ph id="ph7">`Try...Catch...Finally`</ph> statement          &gt; <ph id="ph8">[!NOTE]</ph>     &gt;  The <ph id="ph9">`On Error Resume Next`</ph> construct may be preferable to <ph id="ph10">`On Error GoTo`</ph> when handling errors generated during access to other objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Checking <ph id="ph1">`Err`</ph> after each interaction with an object removes ambiguity about which object was accessed by the code: You can be sure which object placed the error code in <ph id="ph2">`Err.Number`</ph>, as well as which object originally generated the error (the object specified in <ph id="ph3">`Err.Source`</ph>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Returns or sets a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression containing a descriptive string associated with an error.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Description`</ph> property setting consists of a short description of the error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use this property to alert the user to an error that you cannot or do not want to handle.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When generating a user-defined error, assign a short description of your error to the <ph id="ph1">`Description`</ph> property.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Description`</ph> property is not filled in, and the value of the &lt;xref:Microsoft.VisualBasic.ErrObject.Number%2A&gt; property corresponds to a Visual Basic run-time error, then the string returned by the &lt;xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A&gt; function is set in the <ph id="ph2">`Description`</ph> property when the error is generated.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns or sets a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression containing a descriptive string associated with an error.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns an integer indicating the line number of the last executed statement.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If Visual Basic encounters no line numbers, it returns 0.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns an integer indicating the line number of the last executed statement.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the exception representing the error that occurred.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetException`</ph> function is available only from the <ph id="ph2">`Err`</ph> object class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It works with the <ph id="ph1">`Exception`</ph> property of the <ph id="ph2">`Err`</ph> object to display the error that has occurred.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the exception representing the error that occurred.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns or sets an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the context ID for a topic in a Help file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HelpContext`</ph> property is used to display context-sensitive Help for an application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If a Help file is specified in <ph id="ph1">`HelpFile`</ph>, the <ph id="ph2">`HelpContext`</ph> property is used to automatically display the Help file identified.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If both the <ph id="ph1">`HelpFile`</ph> and <ph id="ph2">`HelpContext`</ph> properties are empty, the value of the &lt;xref:Microsoft.VisualBasic.ErrObject.Number%2A&gt; property  is checked.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the value of the <ph id="ph1">`Number`</ph> property corresponds to a Visual Basic run-time error value, then the Visual Basic Help context ID for the error is used.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the value of the <ph id="ph1">`Number`</ph> property does not correspond to a Visual Basic error, the contents screen for the Visual Basic Help file is displayed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You should write routines in your application to handle typical errors.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When programming with an object, you can use the object's Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns or sets an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the context ID for a topic in a Help file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns or sets a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression containing the fully qualified path to a Help file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If a Help file is specified by the <ph id="ph1">`HelpFile`</ph> property, it is automatically called when the user presses the Help key (or the F1 key) in the error message dialog box.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`HelpContext`</ph> property contains a valid context ID for the specified file, that topic is automatically displayed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`HelpFile`</ph> is specified, the Visual Basic Help file is displayed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You should write routines in your application to handle typical errors.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When programming with an object, you can use the object's Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns or sets a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression containing the fully qualified path to a Help file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns a system error code produced by a call to a dynamic-link library (DLL).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The LastDllError property applies only to DLL calls made from Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When such a call is made, the called function usually returns a code indicating success or failure, and the LastDllError property is filled.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Check the documentation for the DLL's functions to determine the return values that indicate success or failure.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Whenever the failure code is returned, the Visual Basic application should immediately check the LastDllError property.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>No exception is raised when the LastDllError property is set.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The LastDllError property is protected by &lt;xref:System.Security.Permissions.SecurityAction&gt;, which helps prevent it from being accessed from untrusted code.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Security.Permissions.SecurityAction&gt; requires only the immediate caller to have &lt;xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A&gt; permission.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If your code can be called from partially trusted code, exposing the value of LastDllError without validation is a security risk.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>&gt;    &gt;  For important limitations about how to use the &lt;xref:System.Security.Permissions.SecurityAction&gt; member, see <bpt id="p1">[</bpt>Demand vs. LinkDemand<ept id="p1">](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about permissions, see &lt;xref:System.Security.Permissions.SecurityPermission&gt; and <bpt id="p1">[</bpt>Code Access Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Note   For smart devices this property always returns zero.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns a system error code produced by a call to a dynamic-link library (DLL).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns or sets a numeric value specifying an error.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>All of the <ph id="ph1">`Raise`</ph> arguments except <ph id="ph2">`Number`</ph> are optional.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you omit optional arguments, and the property settings of the <ph id="ph1">`Err`</ph> object contain values that have not been cleared, those values serve as the values for your error.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Err`</ph> object gives richer information than when you generate errors with the <ph id="ph2">`Error`</ph> statement, <ph id="ph3">`Raise`</ph> is useful for generating errors when writing class modules.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, with the <ph id="ph1">`Raise`</ph> method, the source that generated the error can be specified in the <ph id="ph2">`Source`</ph> property, online Help for the error can be referenced, and so on.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When returning a user-defined error from an object, set <ph id="ph1">`Err.Number`</ph> by adding the number you selected as an error code to the <ph id="ph2">`VbObjectError`</ph> constant.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, you use the following code to return the number 1051 as an error code:       <bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrErrorHandling#13<ept id="p2">](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns or sets a numeric value specifying an error.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is greater than 65535.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Generates a run-time error; can be used instead of the <bpt id="p1">&lt;xref uid="langword_csharp_Error" name="Error" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> statement.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>All of the <ph id="ph1">`Raise`</ph> arguments except <ph id="ph2">`Number`</ph> are optional.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you omit optional arguments, and the property settings of the <ph id="ph1">`Err`</ph> object contain values that have not been cleared, those values serve as the values for your error.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Err`</ph> object gives richer information than when you generate errors with the <ph id="ph2">`Error`</ph> statement, <ph id="ph3">`Raise`</ph> is useful for generating errors when writing class modules.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, with the <ph id="ph1">`Raise`</ph> method, the source that generated the error can be specified in the <ph id="ph2">`Source`</ph> property, online Help for the error can be referenced, and so on.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Long" name="Long" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> integer that identifies the nature of the error.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When setting the <bpt id="p1">&lt;xref uid="langword_csharp_Number" name="Number" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property to your own error code in a class module, you add your error code number to the <bpt id="p2">&lt;xref uid="langword_csharp_vbObjectError" name="vbObjectError" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> constant.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, to generate the error number 513, assign <ph id="ph1">`vbObjectError + 513`</ph> to the <bpt id="p1">&lt;xref uid="langword_csharp_Number" name="Number" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression naming the object or application that generated the error.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When setting this property for an object, use the form <ph id="ph1">`project`</ph>.<ph id="ph2">`class`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Source`</ph> is not specified, the process ID of the current Visual Basic project is used.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression describing the error.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If unspecified, the value in the <bpt id="p1">&lt;xref uid="langword_csharp_Number" name="Number" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property is examined.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the <bpt id="p1">&lt;xref uid="langword_csharp_Error" name="Error" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> function is used as the <bpt id="p2">&lt;xref uid="langword_csharp_Description" name="Description" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> property.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If there is no Visual Basic error corresponding to the <bpt id="p1">&lt;xref uid="langword_csharp_Number" name="Number" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property, the "Application-defined or object-defined error" message is used.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The fully qualified path to the Help file in which help on this error can be found.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If unspecified, Visual Basic uses the fully qualified drive, path, and file name of the Visual Basic Help file.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The context ID identifying a topic within <ph id="ph1">`HelpFile`</ph> that provides help for the error.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If omitted, the Visual Basic Help-file context ID for the error corresponding to the <bpt id="p1">&lt;xref uid="langword_csharp_Number" name="Number" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property is used, if it exists.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns or sets a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression specifying the name of the object or application that originally generated the error.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Source`</ph> property specifies a <ph id="ph2">`String`</ph> expression representing the object that generated the error; the expression is usually the object's class name or process ID.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Source`</ph> property to provide information when your code is unable to handle an error generated in an accessed object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example, if you access Microsoft Excel and it generates a <ph id="ph1">`Division by zero`</ph> error, Microsoft Excel sets <ph id="ph2">`Err.Number`</ph> to its error code for that error and sets <ph id="ph3">`Source`</ph> to "Excel.Application".</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When the application is generating an error from code, <ph id="ph1">`Source`</ph> is your application's programmatic ID.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Within a class, <ph id="ph1">`Source`</ph> should contain a name having the form <bpt id="p1">*</bpt>project<ept id="p1">*</ept>.<bpt id="p2">*</bpt>class<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When an unexpected error occurs in your code, the <ph id="ph1">`Source`</ph> property is automatically filled in.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For errors in a module, <ph id="ph1">`Source`</ph> contains the project name.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Returns or sets a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression specifying the name of the object or application that originally generated the error.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Read/write.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>