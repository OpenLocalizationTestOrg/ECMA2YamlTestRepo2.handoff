{"nodes":[{"pos":[6492,6996],"content":"The <xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"></xref> module contains the procedures that are used to perform file, directory or folder, and system operations. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than using the <xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"></xref> module. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> module contains the procedures that are used to perform file, directory or folder, and system operations.","pos":[0,182],"source":"The <xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"></xref> module contains the procedures that are used to perform file, directory or folder, and system operations."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than using the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> module.","pos":[183,416],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than using the <xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"></xref> module."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[417,504],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[7008,7123],"content":"This module supports the Visual Basic language keywords and run-time library members that access files and folders.","needQuote":true,"needEscape":true,"nodes":[{"content":"This module supports the Visual Basic language keywords and run-time library members that access files and folders.","pos":[0,115]}]},{"pos":[7984,8338],"content":"Changes the current directory or folder. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_ChDir \" name=\"ChDir \" href=\"\"></xref>function. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*> .","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the current directory or folder.","pos":[0,40]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_ChDir \" name=\"ChDir \" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>function.","pos":[41,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_ChDir \" name=\"ChDir \" href=\"\"></xref>function."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*&gt; .","pos":[262,354],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*> ."}]},{"pos":[8351,9087],"content":"The `ChDir` function changes the default directory, but not the default drive. For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:       [!code-vb[VbVbalrCatRef#39](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_1.vb)]       You can make relative directory changes is by typing two periods, as follows:       [!code-vb[VbVbalrCatRef#40](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_2.vb)]      > [!IMPORTANT] >  The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and .","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`ChDir`</ph> function changes the default directory, but not the default drive.","pos":[0,78],"source":"The `ChDir` function changes the default directory, but not the default drive."},{"content":"For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:       <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#39<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_1.vb)</ept><ept id=\"p1\">]</ept>       You can make relative directory changes is by typing two periods, as follows:       <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>VbVbalrCatRef#40<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_2.vb)</ept><ept id=\"p3\">]</ept><ph id=\"ph1\">      &gt; </ph><ph id=\"ph2\">[!IMPORTANT]</ph> &gt;  The <ph id=\"ph3\">`ChDir`</ph> function requires unmanaged code permission, which may affect its execution in partial-trust situations.","pos":[79,641],"source":" For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:       [!code-vb[VbVbalrCatRef#39](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_1.vb)]       You can make relative directory changes is by typing two periods, as follows:       [!code-vb[VbVbalrCatRef#40](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_2.vb)]      > [!IMPORTANT] >  The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations."},{"content":"For more information, see &lt;xref:System.Security.Permissions.SecurityPermission&gt; and .","pos":[642,727],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and ."}]},{"pos":[9429,9784],"content":"Required. A <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies which directory or folder becomes the new default directory or folder. `Path` may include the drive. If no drive is specified, <xref uid=\"langword_csharp_ChDir\" name=\"ChDir\" href=\"\"></xref> changes the default directory or folder on the current drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that identifies which directory or folder becomes the new default directory or folder.","pos":[10,174],"source":" A <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies which directory or folder becomes the new default directory or folder."},{"content":"<ph id=\"ph1\">`Path`</ph> may include the drive.","pos":[175,204],"source":"`Path` may include the drive."},{"content":"If no drive is specified, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ChDir\" name=\"ChDir\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> changes the default directory or folder on the current drive.","pos":[205,355],"source":" If no drive is specified, <xref uid=\"langword_csharp_ChDir\" name=\"ChDir\" href=\"\"></xref> changes the default directory or folder on the current drive."}]},{"pos":[9945,9972],"content":"<ph id=\"ph1\">&lt;code&gt;Path&lt;/code&gt;</ph> is empty.","needQuote":true,"needEscape":true,"source":"<code>Path</code> is empty."},{"pos":[10081,10133],"content":"Invalid drive is specified, or drive is unavailable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invalid drive is specified, or drive is unavailable.","pos":[0,52]}]},{"pos":[10531,10557],"content":"Changes the current drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the current drive.","pos":[0,26]}]},{"pos":[10569,10868],"content":"The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`ChDrive`</ph> function requires unmanaged-code permission, which may affect its execution in partial-trust situations.","pos":[0,118],"source":"The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations."},{"content":"For more information, see &lt;xref:System.Security.Permissions.SecurityPermission&gt; and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[119,299],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."}]},{"pos":[11259,11547],"content":"Required. String expression that specifies an existing drive. If you supply a zero-length string (\"\"), the current drive does not change. If the `Drive` argument is a multiple-character string, <xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"></xref> uses only the first letter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String expression that specifies an existing drive.","pos":[10,61]},{"content":"If you supply a zero-length string (\"\"), the current drive does not change.","pos":[62,137]},{"content":"If the <ph id=\"ph1\">`Drive`</ph> argument is a multiple-character string, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses only the first letter.","pos":[138,288],"source":" If the `Drive` argument is a multiple-character string, <xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"></xref> uses only the first letter."}]},{"pos":[11704,11756],"content":"Invalid drive is specified, or drive is unavailable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invalid drive is specified, or drive is unavailable.","pos":[0,52]}]},{"pos":[12164,12190],"content":"Changes the current drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the current drive.","pos":[0,26]}]},{"pos":[12202,12501],"content":"The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`ChDrive`</ph> function requires unmanaged-code permission, which may affect its execution in partial-trust situations.","pos":[0,118],"source":"The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations."},{"content":"For more information, see &lt;xref:System.Security.Permissions.SecurityPermission&gt; and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[119,299],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."}]},{"pos":[12896,13184],"content":"Required. String expression that specifies an existing drive. If you supply a zero-length string (\"\"), the current drive does not change. If the `Drive` argument is a multiple-character string, <xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"></xref> uses only the first letter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String expression that specifies an existing drive.","pos":[10,61]},{"content":"If you supply a zero-length string (\"\"), the current drive does not change.","pos":[62,137]},{"content":"If the <ph id=\"ph1\">`Drive`</ph> argument is a multiple-character string, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses only the first letter.","pos":[138,288],"source":" If the `Drive` argument is a multiple-character string, <xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"></xref> uses only the first letter."}]},{"pos":[13341,13393],"content":"Invalid drive is specified, or drive is unavailable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invalid drive is specified, or drive is unavailable.","pos":[0,52]}]},{"pos":[13748,14092],"content":"Returns a string representing the current path. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the current path.","pos":[0,47]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[48,252],"source":" The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref>."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*&gt;.","pos":[253,344],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*>."}]},{"pos":[14425,14464],"content":"A string representing the current path.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the current path.","pos":[0,39]}]},{"pos":[14927,15271],"content":"Returns a string representing the current path. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the current path.","pos":[0,47]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[48,252],"source":" The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref>."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*&gt;.","pos":[253,344],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*>."}]},{"pos":[15613,15903],"content":"Optional. <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression that specifies an existing drive. If no drive is specified, or if `Drive` is a zero-length string (\"\"), <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref> returns the path for the current drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies an existing drive.","pos":[10,115],"source":"<xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression that specifies an existing drive."},{"content":"If no drive is specified, or if <ph id=\"ph1\">`Drive`</ph> is a zero-length string (\"\"), <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> returns the path for the current drive.","pos":[116,290],"source":" If no drive is specified, or if `Drive` is a zero-length string (\"\"), <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref> returns the path for the current drive."}]},{"pos":[15961,16000],"content":"A string representing the current path.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the current path.","pos":[0,39]}]},{"pos":[16410,16867],"content":"Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> function. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*> for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.","pos":[0,154]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations than the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function.","pos":[155,366],"source":" The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> function."},{"content":"See &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*&gt; for more information.","pos":[367,457],"source":" See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*> for more information."}]},{"pos":[16880,18724],"content":"The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.       `VbVolume` returns the volume label for the drive instead of a specific file name.       You must supply a `PathName` the first time that you call the `Dir` function. To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.      > [!IMPORTANT] >  To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code. For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).       The `Attributes` argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |`Normal`|`vbnormal`|Default. Specifies files without attributes.|   |`ReadOnly`|`vbReadOnly`|Specifies read-only files, and also files without attributes.|   |`Hidden`|`vbHidden`|Specifies hidden files, and also files without attributes.|   |`System`|`vbSystem`|Specifies system files, and also files without attributes.|   |`Volume`|`vbVolume`|Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.|   |`Directory`|`vbDirectory`|Specifies directories or folders, and also files without attributes.|   |`Archive`|`vbArchive`|File has changed since last backup.|   |`Alias`|`vbAlias`|File has a different name.|      > [!NOTE] >  These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Dir`</ph> function supports the use of multiple-character (<ph id=\"ph2\">`*`</ph>) and single-character (<ph id=\"ph3\">`?`</ph>) wildcards to specify multiple files.","pos":[0,127],"source":"The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files."},{"content":"<ph id=\"ph1\">`VbVolume`</ph> returns the volume label for the drive instead of a specific file name.","pos":[134,216],"source":"`VbVolume` returns the volume label for the drive instead of a specific file name."},{"content":"You must supply a <ph id=\"ph1\">`PathName`</ph> the first time that you call the <ph id=\"ph2\">`Dir`</ph> function.","pos":[223,300],"source":"       You must supply a `PathName` the first time that you call the `Dir` function."},{"content":"To retrieve the next item, you can make subsequent calls to the <ph id=\"ph1\">`Dir`</ph> function without parameters.","pos":[301,399],"source":" To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  To run correctly, the <ph id=\"ph2\">`Dir`</ph> function requires the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; and &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;flags of &lt;xref:System.Security.Permissions.FileIOPermission&gt; to be granted to the executing code.","pos":[405,689],"source":"      > [!IMPORTANT] >  To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermission&gt;, &lt;xref:System.Security.SecurityException&gt;, and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[690,911],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."},{"content":"The <ph id=\"ph1\">`Attributes`</ph> argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |<ph id=\"ph2\">`Normal`</ph><ph id=\"ph3\">|</ph><ph id=\"ph4\">`vbnormal`</ph>|Default.","pos":[918,1061],"source":"       The `Attributes` argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |`Normal`|`vbnormal`|Default."},{"content":"Specifies files without attributes.|   |<ph id=\"ph1\">`ReadOnly`</ph><ph id=\"ph2\">|</ph><ph id=\"ph3\">`vbReadOnly`</ph>|Specifies read-only files, and also files without attributes.|   |<ph id=\"ph4\">`Hidden`</ph><ph id=\"ph5\">|</ph><ph id=\"ph6\">`vbHidden`</ph>|Specifies hidden files, and also files without attributes.|   |<ph id=\"ph7\">`System`</ph><ph id=\"ph8\">|</ph><ph id=\"ph9\">`vbSystem`</ph>|Specifies system files, and also files without attributes.|   |<ph id=\"ph10\">`Volume`</ph><ph id=\"ph11\">|</ph><ph id=\"ph12\">`vbVolume`</ph>|Specifies volume label; if any other attribute is specified, <ph id=\"ph13\">`vbVolume`</ph> is ignored.|   |<ph id=\"ph14\">`Directory`</ph><ph id=\"ph15\">|</ph><ph id=\"ph16\">`vbDirectory`</ph>|Specifies directories or folders, and also files without attributes.|   |<ph id=\"ph17\">`Archive`</ph><ph id=\"ph18\">|</ph><ph id=\"ph19\">`vbArchive`</ph>|File has changed since last backup.|   |<ph id=\"ph20\">`Alias`</ph><ph id=\"ph21\">|</ph><ph id=\"ph22\">`vbAlias`</ph>|File has a different name.|      &gt; <ph id=\"ph23\">[!NOTE]</ph> &gt;  These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.","pos":[1062,1820],"source":" Specifies files without attributes.|   |`ReadOnly`|`vbReadOnly`|Specifies read-only files, and also files without attributes.|   |`Hidden`|`vbHidden`|Specifies hidden files, and also files without attributes.|   |`System`|`vbSystem`|Specifies system files, and also files without attributes.|   |`Volume`|`vbVolume`|Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.|   |`Directory`|`vbDirectory`|Specifies directories or folders, and also files without attributes.|   |`Archive`|`vbArchive`|File has changed since last backup.|   |`Alias`|`vbAlias`|File has a different name.|      > [!NOTE] >  These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values."}]},{"pos":[19057,19203],"content":"A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.","pos":[0,146]}]},{"pos":[19772,20229],"content":"Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> function. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*> for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.","pos":[0,154]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations than the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function.","pos":[155,366],"source":" The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> function."},{"content":"See &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*&gt; for more information.","pos":[367,457],"source":" See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*> for more information."}]},{"pos":[20242,22136],"content":"The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.       `VbVolume` returns the volume label for the drive instead of a specific file name.       You must supply a `PathName` the first time that you call the `Dir` function. To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.      > [!IMPORTANT] >  To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code. For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).       The `Attributes` argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |`Normal`|`vbnormal`|Default. Specifies files that have no attributes.|   |`ReadOnly`|`vbReadOnly`|Specifies read-only files, in addition to files that have no attributes.|   |`Hidden`|`vbHidden`|Specifies hidden files, in addition to files that have no attributes.|   |`System`|`vbSystem`|Specifies system files, in addition to files that have no attributes.|   |`Volume`|`vbVolume`|Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.|   |`Directory`|`vbDirectory`|Specifies directories or folders, in addition to files that have no attributes.|   |`Archive`|`vbArchive`|File has changed since last backup.|   |`Alias`|`vbAlias`|File has a different name.|      > [!NOTE] >  These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Dir`</ph> function supports the use of multiple-character (<ph id=\"ph2\">`*`</ph>) and single-character (<ph id=\"ph3\">`?`</ph>) wildcards to specify multiple files.","pos":[0,127],"source":"The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files."},{"content":"<ph id=\"ph1\">`VbVolume`</ph> returns the volume label for the drive instead of a specific file name.","pos":[134,216],"source":"`VbVolume` returns the volume label for the drive instead of a specific file name."},{"content":"You must supply a <ph id=\"ph1\">`PathName`</ph> the first time that you call the <ph id=\"ph2\">`Dir`</ph> function.","pos":[223,300],"source":"       You must supply a `PathName` the first time that you call the `Dir` function."},{"content":"To retrieve the next item, you can make subsequent calls to the <ph id=\"ph1\">`Dir`</ph> function with no parameters.","pos":[301,399],"source":" To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  To run correctly, the <ph id=\"ph2\">`Dir`</ph> function requires the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; and &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;flags of &lt;xref:System.Security.Permissions.FileIOPermission&gt; to be granted to the executing code.","pos":[405,689],"source":"      > [!IMPORTANT] >  To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermission&gt;, &lt;xref:System.Security.SecurityException&gt;, and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[690,911],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."},{"content":"The <ph id=\"ph1\">`Attributes`</ph> argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |<ph id=\"ph2\">`Normal`</ph><ph id=\"ph3\">|</ph><ph id=\"ph4\">`vbnormal`</ph>|Default.","pos":[918,1061],"source":"       The `Attributes` argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |`Normal`|`vbnormal`|Default."},{"content":"Specifies files that have no attributes.|   |<ph id=\"ph1\">`ReadOnly`</ph><ph id=\"ph2\">|</ph><ph id=\"ph3\">`vbReadOnly`</ph>|Specifies read-only files, in addition to files that have no attributes.|   |<ph id=\"ph4\">`Hidden`</ph><ph id=\"ph5\">|</ph><ph id=\"ph6\">`vbHidden`</ph>|Specifies hidden files, in addition to files that have no attributes.|   |<ph id=\"ph7\">`System`</ph><ph id=\"ph8\">|</ph><ph id=\"ph9\">`vbSystem`</ph>|Specifies system files, in addition to files that have no attributes.|   |<ph id=\"ph10\">`Volume`</ph><ph id=\"ph11\">|</ph><ph id=\"ph12\">`vbVolume`</ph>|Specifies volume label; if any other attribute is specified, <ph id=\"ph13\">`vbVolume`</ph> is ignored.|   |<ph id=\"ph14\">`Directory`</ph><ph id=\"ph15\">|</ph><ph id=\"ph16\">`vbDirectory`</ph>|Specifies directories or folders, in addition to files that have no attributes.|   |<ph id=\"ph17\">`Archive`</ph><ph id=\"ph18\">|</ph><ph id=\"ph19\">`vbArchive`</ph>|File has changed since last backup.|   |<ph id=\"ph20\">`Alias`</ph><ph id=\"ph21\">|</ph><ph id=\"ph22\">`vbAlias`</ph>|File has a different name.|      &gt; <ph id=\"ph23\">[!NOTE]</ph> &gt;  These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.","pos":[1062,1870],"source":" Specifies files that have no attributes.|   |`ReadOnly`|`vbReadOnly`|Specifies read-only files, in addition to files that have no attributes.|   |`Hidden`|`vbHidden`|Specifies hidden files, in addition to files that have no attributes.|   |`System`|`vbSystem`|Specifies system files, in addition to files that have no attributes.|   |`Volume`|`vbVolume`|Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.|   |`Directory`|`vbDirectory`|Specifies directories or folders, in addition to files that have no attributes.|   |`Archive`|`vbArchive`|File has changed since last backup.|   |`Alias`|`vbAlias`|File has a different name.|      > [!NOTE] >  These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values."}]},{"pos":[22578,22880],"content":"Optional. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name, directory or folder name, or drive volume label. A zero-length string (<xref uid=\"langword_csharp_&quot;&quot;\" name=\"&quot;&quot;\" href=\"\"></xref>) is returned if `PathName` is not found.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies a file name, directory or folder name, or drive volume label.","pos":[10,162],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name, directory or folder name, or drive volume label."},{"content":"A zero-length string (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_&amp;quot;&amp;quot;\" name=\"&amp;quot;&amp;quot;\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) is returned if <ph id=\"ph1\">`PathName`</ph> is not found.","pos":[163,302],"source":" A zero-length string (<xref uid=\"langword_csharp_&quot;&quot;\" name=\"&quot;&quot;\" href=\"\"></xref>) is returned if `PathName` is not found."}]},{"pos":[22969,23182],"content":"Optional. Enumeration or numeric expression whose value specifies file attributes. If omitted, <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> returns files that match `PathName` but have no attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Enumeration or numeric expression whose value specifies file attributes.","pos":[10,82]},{"content":"If omitted, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> returns files that match <ph id=\"ph1\">`PathName`</ph> but have no attributes.","pos":[83,213],"source":" If omitted, <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> returns files that match `PathName` but have no attributes."}]},{"pos":[23240,23386],"content":"A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.","pos":[0,146]}]},{"pos":[23836,24114],"content":"Returns a Boolean value <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the end of a file opened for <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or sequential <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> has been reached.","needQuote":true,"needEscape":true,"source":"Returns a Boolean value <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> when the end of a file opened for <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> or sequential <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> has been reached."},{"pos":[24127,24806],"content":"Use `EOF` to avoid the error generated by attempting to get input past the end of a file.       The `EOF` function returns `False` until the end of the file has been reached. With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.       With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error. Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function. With files opened for `Output`, `EOF` always returns `True`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use <ph id=\"ph1\">`EOF`</ph> to avoid the error generated by attempting to get input past the end of a file.","pos":[0,89],"source":"Use `EOF` to avoid the error generated by attempting to get input past the end of a file."},{"content":"The <ph id=\"ph1\">`EOF`</ph> function returns <ph id=\"ph2\">`False`</ph> until the end of the file has been reached.","pos":[96,174],"source":"       The `EOF` function returns `False` until the end of the file has been reached."},{"content":"With files opened for <ph id=\"ph1\">`Random`</ph> or <ph id=\"ph2\">`Binary`</ph> access, <ph id=\"ph3\">`EOF`</ph> returns <ph id=\"ph4\">`False`</ph> until the last executed <ph id=\"ph5\">`FileGet`</ph> function is unable to read a whole record.","pos":[175,324],"source":" With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record."},{"content":"With files opened for <ph id=\"ph1\">`Binary`</ph> access, an attempt to read through the file using the <ph id=\"ph2\">`Input`</ph> function until <ph id=\"ph3\">`EOF`</ph> returns <ph id=\"ph4\">`True`</ph> generates an error.","pos":[331,479],"source":"       With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error."},{"content":"Use the <ph id=\"ph1\">`LOF`</ph> and <ph id=\"ph2\">`Loc`</ph> functions instead of <ph id=\"ph3\">`EOF`</ph> when reading binary files with <ph id=\"ph4\">`Input`</ph>, or use <ph id=\"ph5\">`Get`</ph> when using the <ph id=\"ph6\">`EOF`</ph> function.","pos":[480,614],"source":" Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function."},{"content":"With files opened for <ph id=\"ph1\">`Output`</ph>, <ph id=\"ph2\">`EOF`</ph> always returns <ph id=\"ph3\">`True`</ph>.","pos":[615,675],"source":" With files opened for `Output`, `EOF` always returns `True`."}]},{"pos":[25227,25343],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains any valid file number.","pos":[10,116],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains any valid file number."}]},{"pos":[25402,25680],"content":"Returns a Boolean value <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the end of a file opened for <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or sequential <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> has been reached.","needQuote":true,"needEscape":true,"source":"Returns a Boolean value <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> when the end of a file opened for <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> or sequential <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> has been reached."},{"pos":[25833,25854],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[26262,26726],"content":"Returns an enumeration representing the file mode for files opened using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_FileAttr \" name=\"FileAttr \" href=\"\"></xref>function. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*> for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumeration representing the file mode for files opened using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,155],"source":"Returns an enumeration representing the file mode for files opened using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations than the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileAttr \" name=\"FileAttr \" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>function.","pos":[156,378],"source":" The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_FileAttr \" name=\"FileAttr \" href=\"\"></xref>function."},{"content":"See &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*&gt; for more information.","pos":[379,464],"source":" See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*> for more information."}]},{"pos":[26738,26849],"content":"This function returns an enumeration representing the file mode for files opened using the <ph id=\"ph1\">`FileOpen`</ph> function.","needQuote":true,"needEscape":true,"source":"This function returns an enumeration representing the file mode for files opened using the `FileOpen` function."},{"pos":[27228,27328],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[10,77],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>."},{"content":"Any valid file number.","pos":[78,100]}]},{"pos":[27404,28191],"content":"The following enumeration values indicate the file access mode:       <table><tbody><tr><td> Value       </td><td> Mode       </td></tr><tr><td> 1       </td><td><xref uid=\"langword_csharp_OpenMode.Input\" name=\"OpenMode.Input\" href=\"\"></xref></td></tr><tr><td> 2       </td><td><xref uid=\"langword_csharp_OpenMode.Output\" name=\"OpenMode.Output\" href=\"\"></xref></td></tr><tr><td> 4       </td><td><xref uid=\"langword_csharp_OpenMode.Random\" name=\"OpenMode.Random\" href=\"\"></xref></td></tr><tr><td> 8       </td><td><xref uid=\"langword_csharp_OpenMode.Append\" name=\"OpenMode.Append\" href=\"\"></xref></td></tr><tr><td> 32       </td><td><xref uid=\"langword_csharp_OpenMode.Binary\" name=\"OpenMode.Binary\" href=\"\"></xref></td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"The following enumeration values indicate the file access mode:","pos":[0,63]},{"content":"Value","pos":[93,98]},{"content":"Mode","pos":[115,119]},{"content":"1","pos":[145,146]},{"content":"2","pos":[261,262]},{"content":"4","pos":[379,380]},{"content":"8","pos":[497,498]},{"content":"32","pos":[615,617]}]},{"pos":[28687,29035],"content":"Concludes input/output (I/O) to a file opened using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> gives you better productivity and performance in file I/O operations. See <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Concludes input/output (I/O) to a file opened using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,134],"source":"Concludes input/output (I/O) to a file opened using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations.","pos":[135,261],"source":"<xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> gives you better productivity and performance in file I/O operations."},{"content":"See <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for more information.","pos":[262,348],"source":" See <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> for more information."}]},{"pos":[29048,29969],"content":"The `FileClose` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [How to: Read Text from Files with a StreamReader](~/add/includes/ajax-current-ext-md.md),[How to: Write Text to Files with a StreamWriter](~/add/includes/ajax-current-ext-md.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/add/includes/ajax-current-ext-md.md).       If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.       When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file. All buffer space associated with the closed file is released.       When the `FileClose` function is executed, the association of a file with its file number ends.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`FileClose`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,91],"source":"The `FileClose` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[92,185],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Read Text from Files with a StreamReader<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>,<bpt id=\"p2\">[</bpt>How to: Write Text to Files with a StreamWriter<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id=\"p3\">[</bpt>Walkthrough: Manipulating Files and Directories in Visual Basic<ept id=\"p3\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[186,501],"source":" For more information, see [How to: Read Text from Files with a StreamReader](~/add/includes/ajax-current-ext-md.md),[How to: Write Text to Files with a StreamWriter](~/add/includes/ajax-current-ext-md.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"If you omit <ph id=\"ph1\">`FileNumbers`</ph>, all active files opened by the <ph id=\"ph2\">`FileOpen`</ph> function are closed.","pos":[508,597],"source":"       If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed."},{"content":"When you close files that were opened for <ph id=\"ph1\">`Output`</ph> or <ph id=\"ph2\">`Append`</ph>, the final buffer of output is written to the operating system buffer for that file.","pos":[604,751],"source":"       When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file."},{"content":"All buffer space associated with the closed file is released.","pos":[752,813]},{"content":"When the <ph id=\"ph1\">`FileClose`</ph> function is executed, the association of a file with its file number ends.","pos":[820,915],"source":"       When the `FileClose` function is executed, the association of a file with its file number ends."}]},{"pos":[30324,30385],"content":"Optional. Parameter array of 0 or more channels to be closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Parameter array of 0 or more channels to be closed.","pos":[0,61],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Parameter array of 0 or more channels to be closed.","pos":[10,61]}]}]},{"pos":[30544,30583],"content":"<ph id=\"ph1\">&lt;code&gt;FileNumber&lt;/code&gt;</ph> does not exist.","needQuote":true,"needEscape":true,"source":"<code>FileNumber</code> does not exist."},{"pos":[31045,31351],"content":"Copies a file. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileCopy\" name=\"FileCopy\" href=\"\"></xref>. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*> for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies a file.","pos":[0,14]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileCopy\" name=\"FileCopy\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[15,223],"source":" The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileCopy\" name=\"FileCopy\" href=\"\"></xref>."},{"content":"See &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*&gt; for more information.","pos":[224,306],"source":" See <xref:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*> for more information."}]},{"pos":[31364,31515],"content":"If you try to use the `FileCopy` function on a currently open file, an error occurs.       `FileCopy` requires full trust to work on the local drive.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you try to use the <ph id=\"ph1\">`FileCopy`</ph> function on a currently open file, an error occurs.","pos":[0,84],"source":"If you try to use the `FileCopy` function on a currently open file, an error occurs."},{"content":"<ph id=\"ph1\">`FileCopy`</ph> requires full trust to work on the local drive.","pos":[91,149],"source":"`FileCopy` requires full trust to work on the local drive."}]},{"pos":[31953,32165],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the name of the file to be copied. `Source` may include the directory or folder, and drive, of the source file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies the name of the file to be copied.","pos":[10,135],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the name of the file to be copied."},{"content":"<ph id=\"ph1\">`Source`</ph> may include the directory or folder, and drive, of the source file.","pos":[136,212],"source":"`Source` may include the directory or folder, and drive, of the source file."}]},{"pos":[32233,32447],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the destination file name. `Destination` may include the directory or folder, and drive, of the destination file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies the destination file name.","pos":[10,127],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the destination file name."},{"content":"<ph id=\"ph1\">`Destination`</ph> may include the directory or folder, and drive, of the destination file.","pos":[128,214],"source":"`Destination` may include the directory or folder, and drive, of the destination file."}]},{"pos":[32611,32687],"content":"<ph id=\"ph1\">&lt;code&gt;Source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;Destination&lt;/code&gt;</ph> is invalid or not specified.","needQuote":true,"needEscape":true,"source":"<code>Source</code> or <code>Destination</code> is invalid or not specified."},{"pos":[32776,32797],"content":"File is already open.","needQuote":true,"needEscape":true,"nodes":[{"content":"File is already open.","pos":[0,21]}]},{"pos":[32906,32926],"content":"File does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"File does not exist.","pos":[0,20]}]},{"pos":[33359,33798],"content":"Returns a <xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> value that indicates the date and time a file was written to. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileDateTime\" name=\"FileDateTime\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*>","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that indicates the date and time a file was written to.","pos":[0,132],"source":"Returns a <xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> value that indicates the date and time a file was written to."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileDateTime\" name=\"FileDateTime\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[133,353],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileDateTime\" name=\"FileDateTime\" href=\"\"></xref>."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*&gt;","pos":[354,439],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*>"}]},{"pos":[34292,34468],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name. `PathName` may include the directory or folder, and the drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies a file name.","pos":[10,113],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name."},{"content":"<ph id=\"ph1\">`PathName`</ph> may include the directory or folder, and the drive.","pos":[114,176],"source":"`PathName` may include the directory or folder, and the drive."}]},{"pos":[34528,34664],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that indicates the date and time a file was created or last modified.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> value that indicates the date and time a file was created or last modified."},{"pos":[34832,34887],"content":"<ph id=\"ph1\">&lt;code&gt;PathName&lt;/code&gt;</ph> is invalid or contains wildcards.","needQuote":true,"needEscape":true,"source":"<code>PathName</code> is invalid or contains wildcards."},{"pos":[34996,35023],"content":"Target file does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"Target file does not exist.","pos":[0,27]}]},{"pos":[35526,35874],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","pos":[262,348],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>"}]},{"pos":[41105,41137],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[41200,41254],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[41322,41541],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[41704,41757],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[41846,41867],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[42355,42704],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[47940,47972],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[48032,48086],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[48154,48373],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[48536,48589],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[48678,48699],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[49187,49536],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[54767,54799],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[54859,54913],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[54981,55200],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[55363,55416],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[55505,55526],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[56034,56383],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[61618,61650],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[61714,61768],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[61836,62055],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[62218,62271],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[62360,62381],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[62884,63233],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[68472,68504],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[68567,68621],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[68689,68908],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[69071,69124],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[69213,69234],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[69732,70081],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[75318,75350],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[75412,75466],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[75534,75753],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[75916,75969],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[76058,76079],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[76572,76921],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[82157,82189],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[82250,82304],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[82372,82591],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[82754,82807],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[82896,82917],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[83410,83759],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[88994,89026],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[89087,89141],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[89209,89428],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[89591,89644],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[89733,89754],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[90247,90596],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[95832,95864],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[95925,95979],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[96047,96266],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[96429,96482],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[96571,96592],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[97090,97439],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[102676,102708],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[102770,102824],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[102892,103111],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[103274,103327],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[103416,103437],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[103950,104299],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[109540,109572],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[109637,109691],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[109759,109978],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[110141,110194],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[110283,110304],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[110856,111205],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[116478,116510],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[116572,116626],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[116694,116913],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[116990,117205],"content":"Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Applies only when writing a string.","pos":[10,45]},{"content":"Specifies whether to write a two-byte descriptor for the string that describes the length.","pos":[46,136]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,215],"source":" The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[117368,117421],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[117510,117531],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[118132,118481],"content":"Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[51,261],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[262,349],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[123785,123817],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[123878,123932],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[124000,124219],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[124291,124482],"content":"Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.","pos":[0,191],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Applies only when writing an array.","pos":[10,45]},{"content":"Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.","pos":[46,191]}]}]},{"pos":[124559,124774],"content":"Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Applies only when writing a string.","pos":[10,45]},{"content":"Specifies whether to write a two-byte descriptor for the string that describes the length.","pos":[46,136]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,215],"source":" The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[124937,124990],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[125079,125100],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[125628,125990],"content":"Reads data from an open disk file into a variable.  The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGetObject\" name=\"FileGetObject\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open disk file into a variable.","pos":[0,50]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileGetObject\" name=\"FileGetObject\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[52,274],"source":"  The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGetObject\" name=\"FileGetObject\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[275,362],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[130887,130919],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[130981,131035],"content":"Required. Valid variable name into which data is read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name into which data is read.","pos":[0,54],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name into which data is read.","pos":[10,54]}]}]},{"pos":[131103,131322],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which reading starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts."}]},{"pos":[131807,132227],"content":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the length of a file in bytes. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileLen\" name=\"FileLen\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the length of a file in bytes.","pos":[0,122],"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the length of a file in bytes."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileLen\" name=\"FileLen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[123,333],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileLen\" name=\"FileLen\" href=\"\"></xref>."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*&gt;.","pos":[334,420],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*>."}]},{"pos":[132240,132477],"content":"If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.      > [!NOTE] >  To obtain the current length of an open file, use the `LOF` function.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the specified file is open when the <ph id=\"ph1\">`FileLen`</ph> function is called, the value returned represents the size of the file at the time it was opened.","pos":[0,146],"source":"If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To obtain the current length of an open file, use the <ph id=\"ph2\">`LOF`</ph> function.","pos":[152,234],"source":"      > [!NOTE] >  To obtain the current length of an open file, use the `LOF` function."}]},{"pos":[132916,133087],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file. `PathName` may include the directory or folder, and the drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies a file.","pos":[10,108],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file."},{"content":"<ph id=\"ph1\">`PathName`</ph> may include the directory or folder, and the drive.","pos":[109,171],"source":"`PathName` may include the directory or folder, and the drive."}]},{"pos":[133144,133256],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the length of a file in bytes.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the length of a file in bytes."},{"pos":[133433,133453],"content":"File does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"File does not exist.","pos":[0,20]}]},{"pos":[134236,134570],"content":"Opens a file for input or output. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a file for input or output.","pos":[0,33]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[34,246],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[247,334],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[134583,136047],"content":"The `FileOpen` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       You must open a file before any I/O operation can be performed on it. `FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.      > [!IMPORTANT] >  When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist. To do so, it needs permission for the directory in which the file is to be created. However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself. Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory. To help improve security, write data to user directories instead of to the root directory or the Program Files directory.       The channel to open can be found by using the `FreeFile()` function.      > [!IMPORTANT] >  The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`FileOpen`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,90],"source":"The `FileOpen` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[91,184],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[185,282],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"You must open a file before any I/O operation can be performed on it.","pos":[289,358]},{"content":"<ph id=\"ph1\">`FileOpen`</ph> allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.","pos":[359,466],"source":"`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.","pos":[472,614],"source":"      > [!IMPORTANT] >  When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist."},{"content":"To do so, it needs permission for the directory in which the file is to be created.","pos":[615,698]},{"content":"However, if the file specified by <ph id=\"ph1\">`FileName`</ph> does exist, the application needs <ph id=\"ph2\">`Write`</ph> permission only to the file itself.","pos":[699,821],"source":" However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself."},{"content":"Wherever possible, to help improve security, create the file during deployment and grant <ph id=\"ph1\">`Write`</ph> permission to that file only, instead of to the whole directory.","pos":[822,983],"source":" Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory."},{"content":"To help improve security, write data to user directories instead of to the root directory or the Program Files directory.","pos":[984,1105]},{"content":"The channel to open can be found by using the <ph id=\"ph1\">`FreeFile()`</ph> function.","pos":[1112,1180],"source":"       The channel to open can be found by using the `FreeFile()` function."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  The <ph id=\"ph2\">`FileOpen`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration, which may affect its execution in partial trust situations.","pos":[1186,1357],"source":"      > [!IMPORTANT] >  The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[1358,1454],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[137517,137677],"content":"Required. Any valid file number. Use the <xref uid=\"langword_csharp_FreeFile\" name=\"FreeFile\" href=\"\"></xref> function to obtain the next available file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]},{"content":"Use the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FreeFile\" name=\"FreeFile\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function to obtain the next available file number.","pos":[33,160],"source":" Use the <xref uid=\"langword_csharp_FreeFile\" name=\"FreeFile\" href=\"\"></xref> function to obtain the next available file number."}]},{"pos":[137742,137898],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name—may include directory or folder, and drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies a file name—may include directory or folder, and drive.","pos":[10,156],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name—may include directory or folder, and drive."}]},{"pos":[137977,138435],"content":"Required. Enumeration specifying the file mode: <xref uid=\"langword_csharp_Append\" name=\"Append\" href=\"\"></xref>, <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref>, <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>, <xref uid=\"langword_csharp_Output\" name=\"Output\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.OpenMode\"></xref> .","needQuote":false,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Enumeration specifying the file mode: <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Append\" name=\"Append\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_Output\" name=\"Output\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, or <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","pos":[10,378],"source":" Enumeration specifying the file mode: <xref uid=\"langword_csharp_Append\" name=\"Append\" href=\"\"></xref>, <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref>, <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>, <xref uid=\"langword_csharp_Output\" name=\"Output\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.OpenMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> .","pos":[379,458],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.OpenMode\"></xref> ."}]},{"pos":[138519,138961],"content":"Optional. Enumeration specifying the operations permitted on the open file: <xref uid=\"langword_csharp_Read\" name=\"Read\" href=\"\"></xref>, <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"></xref>. Defaults to <xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.OpenAccess\"></xref> .","needQuote":false,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Enumeration specifying the operations permitted on the open file: <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Read\" name=\"Read\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[10,276],"source":" Enumeration specifying the operations permitted on the open file: <xref uid=\"langword_csharp_Read\" name=\"Read\" href=\"\"></xref>, <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"></xref>."},{"content":"Defaults to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[277,360],"source":" Defaults to <xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.OpenAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> .","pos":[361,442],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.OpenAccess\"></xref> ."}]},{"pos":[139043,139618],"content":"Optional. Enumeration specifying the operations not permitted on the open file by other processes: <xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"></xref>, <xref uid=\"langword_csharp_Lock Read\" name=\"Lock Read\" href=\"\"></xref>, <xref uid=\"langword_csharp_Lock Write\" name=\"Lock Write\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"></xref>. Defaults to <xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.OpenShare\"></xref> .","needQuote":false,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Enumeration specifying the operations not permitted on the open file by other processes: <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock Read\" name=\"Lock Read\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Lock Write\" name=\"Lock Write\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[10,398],"source":" Enumeration specifying the operations not permitted on the open file by other processes: <xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"></xref>, <xref uid=\"langword_csharp_Lock Read\" name=\"Lock Read\" href=\"\"></xref>, <xref uid=\"langword_csharp_Lock Write\" name=\"Lock Write\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"></xref>."},{"content":"Defaults to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[399,494],"source":" Defaults to <xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.OpenShare\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> .","pos":[495,575],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.OpenShare\"></xref> ."}]},{"pos":[139687,139881],"content":"Optional. Number less than or equal to 32,767 (bytes). For files opened for random access, this value is the record length. For sequential files, this value is the number of characters buffered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number less than or equal to 32,767 (bytes). For files opened for random access, this value is the record length. For sequential files, this value is the number of characters buffered.","pos":[0,194],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number less than or equal to 32,767 (bytes).","pos":[10,54]},{"content":"For files opened for random access, this value is the record length.","pos":[55,123]},{"content":"For sequential files, this value is the number of characters buffered.","pos":[124,194]}]}]},{"pos":[140045,140093],"content":"Record length is negative (and not equal to -1).","needQuote":true,"needEscape":true,"nodes":[{"content":"Record length is negative (and not equal to -1).","pos":[0,48]}]},{"pos":[140182,140257],"content":"<ph id=\"ph1\">&lt;code&gt;FileName&lt;/code&gt;</ph> is already open, or <ph id=\"ph2\">&lt;code&gt;FileName&lt;/code&gt;</ph> is invalid.","needQuote":true,"needEscape":true,"source":"<code>FileName</code> is already open, or <code>FileName</code> is invalid."},{"pos":[140758,141100],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[141113,147072],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen`function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph>function, an exception will be thrown.","pos":[1372,1533],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen`function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1539,1711],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1712,1879],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1885,2058],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2059,2251],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2252,2437],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2443,2690],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2691,2851],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2852,3025],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3031,3180]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3181,3296]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3297,3354]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3355,3425],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3426,3573]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3574,3667]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3668,3756]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3757,3957],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3958,4056]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4067,4311],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4312,4466],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4472,4598],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4599,4735],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4745,4999],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5000,5171],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5172,5266],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5272,5357],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5358,5383]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5389,5509],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5510,5584]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5585,5918],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[147504,147536],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[147599,147664],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[147732,147951],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[148114,148167],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[148256,148277],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[148763,149105],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[149118,155078],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[155510,155542],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[155602,155667],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[155735,155954],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[156117,156170],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[156259,156280],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[156766,157108],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[157121,163081],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[163513,163545],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[163605,163670],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[163738,163957],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[164120,164173],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[164262,164283],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[164789,165131],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[165144,171104],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[171540,171572],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[171636,171701],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[171769,171988],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[172151,172204],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[172293,172314],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[172815,173157],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[173170,179130],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[179565,179597],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[179660,179725],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[179793,180012],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[180175,180228],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[180317,180338],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[180834,181176],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[181189,187149],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[187583,187615],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[187677,187742],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[187810,188029],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[188192,188245],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[188334,188355],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[188846,189188],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[189201,195160],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the<ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2690],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2691,2851],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2852,3025],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3031,3180]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3181,3296]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3297,3354]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3355,3425],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3426,3573]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3574,3667]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3668,3756]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3757,3957],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3958,4056]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4067,4311],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4312,4466],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4472,4598],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4599,4735],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4745,4999],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5000,5171],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5172,5266],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5272,5357],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5358,5383]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5389,5509],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5510,5584]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5585,5918],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[195593,195625],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[195686,195751],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[195819,196038],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[196201,196254],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[196343,196364],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[196855,197197],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[197210,203170],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[203601,203633],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[203694,203759],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[203827,204046],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[204209,204262],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[204351,204372],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[204863,205205],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[205218,211178],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[211610,211642],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[211703,211768],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[211836,212055],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[212218,212271],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[212360,212381],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[212877,213219],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[213232,219191],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen`function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph>function, an exception will be thrown.","pos":[1372,1533],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen`function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1539,1711],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1712,1879],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1885,2058],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2059,2251],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2252,2437],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2443,2690],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2691,2851],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2852,3025],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3031,3180]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3181,3296]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3297,3354]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3355,3425],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3426,3573]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3574,3667]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3668,3756]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3757,3957],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3958,4056]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4067,4311],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4312,4466],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4472,4598],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4599,4735],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4745,4999],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5000,5171],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5172,5266],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5272,5357],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5358,5383]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5389,5509],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5510,5584]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5585,5918],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[219624,219656],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[219718,219783],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[219851,220070],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[220233,220286],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[220375,220396],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[220907,221249],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[221262,227221],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the<ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1066],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1067,1196]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1197,1370]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1371,1533],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1539,1711],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1712,1879],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1885,2058],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2059,2251],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2252,2437],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2443,2690],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2691,2851],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2852,3025],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3031,3180]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3181,3296]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3297,3354]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3355,3425],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3426,3573]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3574,3667]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3668,3756]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3757,3957],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3958,4056]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4067,4311],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4312,4466],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4472,4598],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4599,4735],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4745,4999],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5000,5171],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5172,5266],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5272,5357],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5358,5383]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5389,5509],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5510,5584]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5585,5918],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[227658,227690],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[227755,227820],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[227888,228107],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[228270,228323],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[228412,228433],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[228939,229281],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[229294,235254],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[235694,235726],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[235788,235853],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[235922,236141],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[236304,236357],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[236446,236467],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[237017,237360],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>..","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>..","pos":[255,343],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.."}]},{"pos":[237373,243333],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[243801,243833],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[243895,243960],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[244028,244247],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[244324,244539],"content":"Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Applies only when writing a string.","pos":[10,45]},{"content":"Specifies whether to write a two-byte string length descriptor for the string to the file.","pos":[46,136]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,215],"source":" The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[244702,244755],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[244844,244865],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[245464,245806],"content":"Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[44,254],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[255,342],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[245819,251779],"content":"`FilePut` is valid only in `Random` and `Binary` mode.       Data written with `FilePut` is usually read from a file by using `FileGet`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.           [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.      -   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`FilePut`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[0,54],"source":"`FilePut` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePut`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGet`</ph>.","pos":[61,136],"source":"       Data written with `FilePut` is usually read from a file by using `FileGet`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[143,250]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, the next record or byte after the last <ph id=\"ph2\">`FileGet`</ph> or <ph id=\"ph3\">`FilePut`</ph> function or pointed to by the last <ph id=\"ph4\">`Seek`</ph> function is written.","pos":[251,403],"source":" If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[410,522],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePut`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[523,598],"source":"`FilePut` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePut`</ph>, you have to do the same with <ph id=\"ph5\">`FileGet`</ph>, and you have to make sure that the string is initialized to the length expected.","pos":[599,777],"source":" If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePut`</ph> writes subsequent records on record-length boundaries.","pos":[786,1067],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1068,1197]},{"content":"Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.","pos":[1198,1371]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception will be thrown.","pos":[1372,1534],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown."},{"content":"-   If the variable being written is a string, <ph id=\"ph1\">`FilePut`</ph> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.","pos":[1540,1712],"source":"      -   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable."},{"content":"Therefore, the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual length of the string.","pos":[1713,1880],"source":" Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePut`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[1886,2059],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePut`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2060,2252],"source":" For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2253,2438],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePut`</ph> writes a two byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2444,2691],"source":"      -   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2692,2852],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[2853,3026],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.","pos":[3032,3181]},{"content":"Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.","pos":[3182,3297]},{"content":"Visual Basic 2005 defaults to not writing the descriptor.","pos":[3298,3355]},{"content":"To write the descriptor, set the <ph id=\"ph1\">`ArrayIsDynamic`</ph> parameter to <ph id=\"ph2\">`True`</ph>.","pos":[3356,3426],"source":" To write the descriptor, set the `ArrayIsDynamic` parameter to `True`."},{"content":"When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.","pos":[3427,3574]},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3575,3668]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3669,3757]},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3758,3958],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"For example, the following array declaration requires 218 bytes when the array is written to disk.","pos":[3959,4057]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#43<ept id=\"p2\">](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_1.vb)</ept><ept id=\"p1\">]</ept>      -   If the variable being written is any other type of variable (not a variable-length string or an object), <ph id=\"ph1\">`FilePut`</ph> writes only the variable data.","pos":[4068,4312],"source":"[!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_1.vb)]      -   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the length of the data being written.","pos":[4313,4467],"source":" The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written."},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes elements of structures as if each were written individually, except there is no padding between elements.","pos":[4473,4599],"source":"      -   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.","pos":[4600,4736],"source":" The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  String fields that have more bytes than specified by the <ph id=\"ph2\">`VBFixedString`</ph> attribute are truncated when written to disk,      ## Binary Mode    For files opened in <ph id=\"ph3\">`Binary`</ph> mode, most of the <ph id=\"ph4\">`Random`</ph> mode rules apply, with some exceptions.","pos":[4746,5000],"source":"          > [!NOTE]     >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,      ## Binary Mode    For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions."},{"content":"The following rules for files opened in <ph id=\"ph1\">`Binary`</ph> mode differ from the rules for <ph id=\"ph2\">`Random`</ph> mode:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[5001,5172],"source":" The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePut`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[5173,5267],"source":"`FilePut` writes all variables to disk contiguously, that is, without padding between records."},{"content":"-   For any array other than an array in a structure, <ph id=\"ph1\">`FilePut`</ph> writes only the data.","pos":[5273,5358],"source":"      -   For any array other than an array in a structure, `FilePut` writes only the data."},{"content":"No descriptor is written.","pos":[5359,5384]},{"content":"-   <ph id=\"ph1\">`FilePut`</ph> writes variable-length strings that are not elements of structures without the two-byte length descriptor.","pos":[5390,5510],"source":"      -   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor."},{"content":"The number of bytes written equals the number of characters in the string.","pos":[5511,5585]},{"content":"For example, the following statements write 11 bytes to file number 1:           <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#44<ept id=\"p2\">](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_2.vb)</ept><ept id=\"p1\">]</ept>      -   Writing to a file by using the <ph id=\"ph1\">`FilePut`</ph> function requires <ph id=\"ph2\">`Write`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[5586,5919],"source":" For example, the following statements write 11 bytes to file number 1:           [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_2.vb)]      -   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[252275,252307],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[252368,252433],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[252501,252720],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[252792,252977],"content":"Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.","pos":[0,185],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Applies only when writing an array.","pos":[10,45]},{"content":"Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.","pos":[46,185]}]}]},{"pos":[253054,253269],"content":"Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Applies only when writing a string.","pos":[10,45]},{"content":"Specifies whether to write a two-byte string length descriptor for the string to the file.","pos":[46,136]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,215],"source":" The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[253432,253485],"content":"<ph id=\"ph1\">&lt;code&gt;RecordNumber&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1 and not equal to -1.","needQuote":true,"needEscape":true,"source":"<code>RecordNumber</code> &lt; 1 and not equal to -1."},{"pos":[253574,253595],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[254121,254476],"content":"Writes data from a variable to a disk file.  The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePutObject\" name=\"FilePutObject\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data from a variable to a disk file.","pos":[0,43]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FilePutObject\" name=\"FilePutObject\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[45,267],"source":"  The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePutObject\" name=\"FilePutObject\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[268,355],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[254489,258502],"content":"The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.       `FilePutObject` writes and reads descriptors that describe the object. If you intend to write out the `Variant` type, `FilePutObject` is required. When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.       `FilePutObject` is valid only in `Random` and `Binary` mode.       Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.       The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePutObject` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.      -   If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.      -   If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.      -   If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).      ## Binary Mode    For files opened in `Binary` mode, all the `Random` mode rules apply, except:      -   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePutObject` writes all variables to disk contiguously, that is, without padding between records.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`FilePutObject`</ph> function is used instead of <ph id=\"ph2\">`FilePut`</ph> to avoid ambiguities at compile time if type <ph id=\"ph3\">`Object`</ph> is passed instead of another type, such as <ph id=\"ph4\">`Integer`</ph>, <ph id=\"ph5\">`Long`</ph>, <ph id=\"ph6\">`Short`</ph>, and so forth.","pos":[0,196],"source":"The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth."},{"content":"<ph id=\"ph1\">`FilePutObject`</ph> writes and reads descriptors that describe the object.","pos":[203,273],"source":"`FilePutObject` writes and reads descriptors that describe the object."},{"content":"If you intend to write out the <ph id=\"ph1\">`Variant`</ph> type, <ph id=\"ph2\">`FilePutObject`</ph> is required.","pos":[274,349],"source":" If you intend to write out the `Variant` type, `FilePutObject` is required."},{"content":"When in doubt, if you are using an object for the second parameter, we recommend that you always use <ph id=\"ph1\">`FilePutObject`</ph> and <ph id=\"ph2\">`FileGetObject`</ph>.","pos":[350,487],"source":" When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`."},{"content":"<ph id=\"ph1\">`FilePutObject`</ph> is valid only in <ph id=\"ph2\">`Random`</ph> and <ph id=\"ph3\">`Binary`</ph> mode.","pos":[494,554],"source":"`FilePutObject` is valid only in `Random` and `Binary` mode."},{"content":"Data written with <ph id=\"ph1\">`FilePutObject`</ph> is usually read from a file by using <ph id=\"ph2\">`FileGetObject`</ph>.","pos":[561,648],"source":"       Data written with `FilePutObject` is usually read from a file by using `FileGetObject`."},{"content":"The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.","pos":[655,762]},{"content":"If you omit <ph id=\"ph1\">`RecordNumber`</ph>, <ph id=\"ph2\">`FilePutObject`</ph> writes the next record or byte after the last <ph id=\"ph3\">`FileGetObject`</ph> or <ph id=\"ph4\">`FilePutObject`</ph> function (or the record or byte pointed to by the last <ph id=\"ph5\">`Seek`</ph> function).","pos":[763,960],"source":" If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function)."},{"content":"The <ph id=\"ph1\">`StringIsFixedLength`</ph> argument controls whether the function interprets strings as variable or fixed length.","pos":[967,1079],"source":"       The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length."},{"content":"<ph id=\"ph1\">`FilePutObject`</ph> does not write the length descriptor when the argument is <ph id=\"ph2\">`True`</ph>.","pos":[1080,1161],"source":"`FilePutObject` does not write the length descriptor when the argument is `True`."},{"content":"If you use <ph id=\"ph1\">`StringIsFixedLength`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`True`</ph> with <ph id=\"ph4\">`FilePutObject`</ph>, you have to do the same with <ph id=\"ph5\">`FileGetObject`</ph>, and you must also make sure that the string is initialized to the length expected.","pos":[1162,1354],"source":" If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected."},{"content":"Random Mode    For files opened in <ph id=\"ph1\">`Random`</ph> mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the <ph id=\"ph2\">`RecordLength`</ph> clause of the <ph id=\"ph3\">`FileOpen`</ph> function, <ph id=\"ph4\">`FilePutObject`</ph> writes subsequent records on record-length boundaries.","pos":[1363,1650],"source":"      ## Random Mode    For files opened in `Random` mode, the following rules apply:      -   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries."},{"content":"The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.","pos":[1651,1780]},{"content":"Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.","pos":[1781,1945]},{"content":"If the length of the data being written is greater than the length specified in the <ph id=\"ph1\">`RecordLength`</ph> clause of the <ph id=\"ph2\">`FileOpen`</ph> function, an exception is thrown.","pos":[1946,2103],"source":" If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown."},{"content":"-   If the variable being written is an object that contains a numeric type, <ph id=\"ph1\">`FilePutObject`</ph> writes two bytes identifying the <ph id=\"ph2\">`VarType`</ph> of the object and then writes the variable.","pos":[2109,2288],"source":"      -   If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable."},{"content":"For example, when writing an object that contains an integer, <ph id=\"ph1\">`FilePutObject`</ph> writes six bytes: two bytes that identify the object as <ph id=\"ph2\">`VarType(`</ph>3<ph id=\"ph3\">`)`</ph> (<ph id=\"ph4\">`Integer`</ph>) and four bytes that contain the data.","pos":[2289,2487],"source":" For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least two bytes greater than the actual number of bytes required to store the variable.","pos":[2488,2673],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable."},{"content":"-   If the variable being written is an object that contains a string, <ph id=\"ph1\">`FilePutObject`</ph> writes a two-byte descriptor identifying the <ph id=\"ph2\">`VarType(`</ph>8<ph id=\"ph3\">`)`</ph> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.","pos":[2679,2932],"source":"      -   If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data."},{"content":"The record length specified by the <ph id=\"ph1\">`RecordLength`</ph> parameter in the <ph id=\"ph2\">`FileOpen`</ph> function must be at least four bytes greater than the actual length of the string.","pos":[2933,3093],"source":" The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string."},{"content":"If you want to put a string without the descriptor, you should pass <ph id=\"ph1\">`True`</ph> to the <ph id=\"ph2\">`StringIsFixedLength`</ph> parameter, and the string you read into should be the correct length.","pos":[3094,3267],"source":" If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length."},{"content":"-   If the variable being written is an array, then the record length specified by the <ph id=\"ph1\">`RecordLength`</ph> clause in the <ph id=\"ph2\">`FileOpen`</ph> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.","pos":[3273,3525],"source":"      -   If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor."},{"content":"The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.","pos":[3526,3619]},{"content":"Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).","pos":[3620,3708]},{"content":"Binary Mode    For files opened in <ph id=\"ph1\">`Binary`</ph> mode, all the <ph id=\"ph2\">`Random`</ph> mode rules apply, except:      -   The <ph id=\"ph3\">`RecordLength`</ph> clause in the <ph id=\"ph4\">`FileOpen`</ph> function has no effect.","pos":[3717,3886],"source":"      ## Binary Mode    For files opened in `Binary` mode, all the `Random` mode rules apply, except:      -   The `RecordLength` clause in the `FileOpen` function has no effect."},{"content":"<ph id=\"ph1\">`FilePutObject`</ph> writes all variables to disk contiguously, that is, without padding between records.","pos":[3887,3987],"source":"`FilePutObject` writes all variables to disk contiguously, that is, without padding between records."}]},{"pos":[258888,258920],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[258982,259047],"content":"Required. Valid variable name that contains data written to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Valid variable name that contains data written to disk.","pos":[0,65],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Valid variable name that contains data written to disk.","pos":[10,65]}]}]},{"pos":[259115,259334],"content":"Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Record number (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode files) or byte number (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> mode files) at which writing starts.","pos":[10,219],"source":" Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts."}]},{"pos":[259868,260005],"content":"Assigns an output line width to a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","needQuote":true,"needEscape":true,"source":"Assigns an output line width to a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"pos":[260391,260423],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[260490,260744],"content":"Required. Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started. If `RecordWidth` equals 0, there is no limit to the length of a line. The default value for `RecordWidth` is 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.","pos":[10,142]},{"content":"If <ph id=\"ph1\">`RecordWidth`</ph> equals 0, there is no limit to the length of a line.","pos":[143,212],"source":" If `RecordWidth` equals 0, there is no limit to the length of a line."},{"content":"The default value for <ph id=\"ph1\">`RecordWidth`</ph> is 0.","pos":[213,254],"source":" The default value for `RecordWidth` is 0."}]},{"pos":[260903,260924],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[261289,261513],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the next file number available for use by the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value that represents the next file number available for use by the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"pos":[261525,261595],"content":"Use <ph id=\"ph1\">`FreeFile`</ph> to supply a file number that is not already being used.","needQuote":true,"needEscape":true,"source":"Use `FreeFile` to supply a file number that is not already being used."},{"pos":[262019,262243],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the next file number available for use by the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value that represents the next file number available for use by the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"pos":[262401,262432],"content":"More than 255 files are in use.","needQuote":true,"needEscape":true,"nodes":[{"content":"More than 255 files are in use.","pos":[0,31]}]},{"pos":[262840,263309],"content":"Returns a <xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"></xref> value that represents the attributes of a file, directory, or folder. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the attributes of a file, directory, or folder.","pos":[0,158],"source":"Returns a <xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"></xref> value that represents the attributes of a file, directory, or folder."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[159,381],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[382,469],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[263322,263833],"content":"To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want. If the result is not zero, that attribute is set for the named file. For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:      ```vb#   Result = GetAttr(FName) And vbArchive   ```       A nonzero value is returned if the `Archive` attribute is set.","needQuote":false,"needEscape":true,"nodes":[{"content":"To determine which attributes are set, use the <ph id=\"ph1\">`And`</ph> operator to perform a bitwise comparison of the value returned by the <ph id=\"ph2\">`GetAttr`</ph> function and the value of the individual file attribute you want.","pos":[0,198],"source":"To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want."},{"content":"If the result is not zero, that attribute is set for the named file.","pos":[199,267]},{"content":"For example, the return value of the following <ph id=\"ph1\">`And`</ph> expression is zero if the <ph id=\"ph2\">`Archive`</ph> attribute is not set:      <ph id=\"ph3\">```vb#   Result = GetAttr(FName) And vbArchive   ```</ph>       A nonzero value is returned if the <ph id=\"ph4\">`Archive`</ph> attribute is set.","pos":[268,505],"source":" For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:      ```vb#   Result = GetAttr(FName) And vbArchive   ```       A nonzero value is returned if the `Archive` attribute is set."}]},{"pos":[264237,264435],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file, directory, or folder name. `PathName` can include the directory or folder, and the drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies a file, directory, or folder name.","pos":[10,135],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file, directory, or folder name."},{"content":"<ph id=\"ph1\">`PathName`</ph> can include the directory or folder, and the drive.","pos":[136,198],"source":"`PathName` can include the directory or folder, and the drive."}]},{"pos":[264516,266364],"content":"The value returned by <xref uid=\"langword_csharp_GetAttr\" name=\"GetAttr\" href=\"\"></xref> is the sum of the following enumeration values:       <table><tbody><tr><td> Value       </td><td> Constant        Description       </td></tr><tr><td><xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbNormal\" name=\"vbNormal\" href=\"\"></xref> Normal.       </td></tr><tr><td><xref uid=\"langword_csharp_ReadOnly\" name=\"ReadOnly\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbReadOnly\" name=\"vbReadOnly\" href=\"\"></xref> Read-only.       </td></tr><tr><td><xref uid=\"langword_csharp_Hidden\" name=\"Hidden\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbHidden\" name=\"vbHidden\" href=\"\"></xref> Hidden.       </td></tr><tr><td><xref uid=\"langword_csharp_System\" name=\"System\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbSystem\" name=\"vbSystem\" href=\"\"></xref> System file.       </td></tr><tr><td><xref uid=\"langword_csharp_Directory\" name=\"Directory\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbDirectory\" name=\"vbDirectory\" href=\"\"></xref> Directory or folder.       </td></tr><tr><td><xref uid=\"langword_csharp_Archive\" name=\"Archive\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbArchive\" name=\"vbArchive\" href=\"\"></xref> File has changed since last backup.       </td></tr><tr><td><xref uid=\"langword_csharp_Alias\" name=\"Alias\" href=\"\"></xref></td><td><xref uid=\"langword_csharp_vbAlias\" name=\"vbAlias\" href=\"\"></xref> File has a different name.       </td></tr></tbody></table><div class=\"alert NOTE\">    These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.      </div>","needQuote":false,"needEscape":true,"nodes":[{"content":"The value returned by <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_GetAttr\" name=\"GetAttr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is the sum of the following enumeration values:","pos":[0,136],"source":"The value returned by <xref uid=\"langword_csharp_GetAttr\" name=\"GetAttr\" href=\"\"></xref> is the sum of the following enumeration values:       "},{"content":"Value","pos":[166,171]},{"content":"Constant        Description","pos":[188,215]},{"content":"<xref uid=\"langword_csharp_vbNormal\" name=\"vbNormal\" href=\"\"></xref> Normal.       ","pos":[313,396],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbNormal\" name=\"vbNormal\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> Normal.","pos":[0,76],"source":"<xref uid=\"langword_csharp_vbNormal\" name=\"vbNormal\" href=\"\"></xref> Normal."}]},{"content":"<xref uid=\"langword_csharp_vbReadOnly\" name=\"vbReadOnly\" href=\"\"></xref> Read-only.       ","pos":[491,581],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbReadOnly\" name=\"vbReadOnly\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> Read-only.","pos":[0,83],"source":"<xref uid=\"langword_csharp_vbReadOnly\" name=\"vbReadOnly\" href=\"\"></xref> Read-only."}]},{"content":"<xref uid=\"langword_csharp_vbHidden\" name=\"vbHidden\" href=\"\"></xref> Hidden.       ","pos":[672,755],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbHidden\" name=\"vbHidden\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> Hidden.","pos":[0,76],"source":"<xref uid=\"langword_csharp_vbHidden\" name=\"vbHidden\" href=\"\"></xref> Hidden."}]},{"content":"<xref uid=\"langword_csharp_vbSystem\" name=\"vbSystem\" href=\"\"></xref> System file.       ","pos":[846,934],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbSystem\" name=\"vbSystem\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> System file.","pos":[0,81],"source":"<xref uid=\"langword_csharp_vbSystem\" name=\"vbSystem\" href=\"\"></xref> System file."}]},{"content":"<xref uid=\"langword_csharp_vbDirectory\" name=\"vbDirectory\" href=\"\"></xref> Directory or folder.       ","pos":[1031,1133],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbDirectory\" name=\"vbDirectory\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> Directory or folder.","pos":[0,95],"source":"<xref uid=\"langword_csharp_vbDirectory\" name=\"vbDirectory\" href=\"\"></xref> Directory or folder."}]},{"content":"<xref uid=\"langword_csharp_vbArchive\" name=\"vbArchive\" href=\"\"></xref> File has changed since last backup.       ","pos":[1226,1339],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbArchive\" name=\"vbArchive\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> File has changed since last backup.","pos":[0,106],"source":"<xref uid=\"langword_csharp_vbArchive\" name=\"vbArchive\" href=\"\"></xref> File has changed since last backup."}]},{"content":"<xref uid=\"langword_csharp_vbAlias\" name=\"vbAlias\" href=\"\"></xref> File has a different name.       ","pos":[1428,1528],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_vbAlias\" name=\"vbAlias\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> File has a different name.","pos":[0,93],"source":"<xref uid=\"langword_csharp_vbAlias\" name=\"vbAlias\" href=\"\"></xref> File has a different name."}]},{"content":"    These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.      ","pos":[1578,1725],"nodes":[{"content":"These enumerations are specified by the Visual Basic language.","pos":[4,66]},{"content":"The names can be used anywhere in your code in place of the actual values.","pos":[67,141]}]}]},{"pos":[266522,266577],"content":"<ph id=\"ph1\">&lt;code&gt;Pathname&lt;/code&gt;</ph> is invalid or contains wildcards.","needQuote":true,"needEscape":true,"source":"<code>Pathname</code> is invalid or contains wildcards."},{"pos":[266686,266713],"content":"Target file does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"Target file does not exist.","pos":[0,27]}]},{"pos":[267162,267236],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[267249,268961],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[269556,269588],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[269651,269755],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[269910,269931],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[270365,270439],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[270452,272164],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[272758,272790],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[272850,272954],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[273109,273130],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[273564,273638],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[273651,275363],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[275960,275992],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[276052,276156],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[276311,276332],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[276786,276860],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[276873,278585],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[279187,279219],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[279283,279387],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[279542,279563],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[280012,280086],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[280099,281811],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[282411,282443],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[282506,282610],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[282765,282786],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[283230,283304],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[283317,285029],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[285629,285661],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[285723,285827],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[285982,286003],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[286442,286516],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[286529,288241],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[288839,288871],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[288932,289036],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[289191,289212],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[289651,289725],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[289738,291448],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1458]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1464,1601],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1602,1686],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[292045,292077],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[292138,292242],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[292397,292418],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[292857,292931],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[292944,294656],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[295253,295285],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[295346,295450],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[295605,295626],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[296070,296144],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[296157,297869],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[298469,298501],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[298563,298667],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[298822,298843],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[299287,299361],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[299374,301086],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[301685,301717],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[301779,301883],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[302038,302059],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[302503,302577],"content":"Reads data from an open sequential file and assigns the data to variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from an open sequential file and assigns the data to variables.","pos":[0,74]}]},{"pos":[302590,304302],"content":"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.       When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.      > [!NOTE] >  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Input`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,87],"source":"The `Input` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[88,181],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,279],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`Input`</ph> is usually written to a file by using <ph id=\"ph2\">`Write`</ph>.","pos":[286,355],"source":"       Data read with `Input` is usually written to a file by using `Write`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[356,425],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of the file based on the file name extension.","pos":[431,560],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of the file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.","pos":[561,647]},{"content":"When read, standard string or numeric data is assigned to variables without modification.","pos":[654,743]},{"content":"The following table illustrates how other input data is treated.","pos":[744,808]},{"content":"|||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|<ph id=\"ph1\">`DBNull`</ph>|   |#TRUE# or #FALSE#|<ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>|   |#<ph id=\"ph4\">`yyyy-mm-dd hh:mm:ss`</ph>#|The date and/or time represented by the expression|   |#ERROR <ph id=\"ph5\">`errornumber`</ph><ph id=\"ph6\">#|</ph><ph id=\"ph7\">`errornumber`</ph> (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.","pos":[814,1242],"source":"      |||   |-|-|   |Data|Value assigned to variable|   |Delimiting comma or blank line|Empty|   |#NULL#|`DBNull`|   |#TRUE# or #FALSE#|`True` or `False`|   |#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|   |#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|       If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Input`</ph> function is not localized.","pos":[1248,1299],"source":"      > [!NOTE] >  The `Input` function is not localized."},{"content":"For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.","pos":[1300,1460]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`Input`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1466,1603],"source":"      > [!IMPORTANT] >  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;.","pos":[1604,1688],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>."}]},{"pos":[304902,304934],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[304996,305100],"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[0,104],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Variable that is assigned the values read from the file—cannot be an array or object variable.","pos":[10,104]}]}]},{"pos":[305255,305276],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[305743,306312],"content":"Returns <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> value that contains characters from a file opened in <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> or <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that contains characters from a file opened in <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> mode.","pos":[0,262],"source":"Returns <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> value that contains characters from a file opened in <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> or <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[263,481],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[482,569],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[306325,307514],"content":"The `InputString` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`. Use this function only with files opened in `Input` or `Binary` mode.       Unlike the `Input` function, the `InputString` function returns all the characters it reads. This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.       With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error. Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.      > [!NOTE] >  When reading from files, do not make security decisions about the contents of the file based on the file name extension. For example, a file named Form1.vb may not be a Visual Basic source file.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`InputString`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,93],"source":"The `InputString` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[94,187],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[188,285],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with the <ph id=\"ph1\">`InputString`</ph> function is usually written to a file by using <ph id=\"ph2\">`Print`</ph> or <ph id=\"ph3\">`FilePut`</ph>.","pos":[292,393],"source":"       Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`."},{"content":"Use this function only with files opened in <ph id=\"ph1\">`Input`</ph> or <ph id=\"ph2\">`Binary`</ph> mode.","pos":[394,463],"source":" Use this function only with files opened in `Input` or `Binary` mode."},{"content":"Unlike the <ph id=\"ph1\">`Input`</ph> function, the <ph id=\"ph2\">`InputString`</ph> function returns all the characters it reads.","pos":[470,562],"source":"       Unlike the `Input` function, the `InputString` function returns all the characters it reads."},{"content":"This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.","pos":[563,651]},{"content":"With files opened for <ph id=\"ph1\">`Binary`</ph> access, an attempt to read through the file by using the <ph id=\"ph2\">`InputString`</ph> function until <ph id=\"ph3\">`EOF`</ph> returns <ph id=\"ph4\">`True`</ph> generates an error.","pos":[658,815],"source":"       With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error."},{"content":"Use the <ph id=\"ph1\">`LOF`</ph> and <ph id=\"ph2\">`Loc`</ph> functions instead of <ph id=\"ph3\">`EOF`</ph> when you read binary files by using <ph id=\"ph4\">`InputString`</ph>, or use <ph id=\"ph5\">`FileGet`</ph> when you use the <ph id=\"ph6\">`EOF`</ph> function.","pos":[816,967],"source":" Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When reading from files, do not make security decisions about the contents of the file based on the file name extension.","pos":[973,1106],"source":"      > [!NOTE] >  When reading from files, do not make security decisions about the contents of the file based on the file name extension."},{"content":"For example, a file named Form1.vb may not be a Visual Basic source file.","pos":[1107,1180]}]},{"pos":[308020,308052],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[308117,308200],"content":"Required. Any valid numeric expression specifying the number of characters to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid numeric expression specifying the number of characters to read.","pos":[0,83],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression specifying the number of characters to read.","pos":[10,83]}]}]},{"pos":[308258,308739],"content":"Returns <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> value that contains characters from a file opened in <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> or <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that contains characters from a file opened in <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> mode.","pos":[0,262],"source":"Returns <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> value that contains characters from a file opened in <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> or <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[263,481],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"></xref>."}]},{"pos":[308900,308939],"content":"<ph id=\"ph1\">&lt;code&gt;FileNumber&lt;/code&gt;</ph> does not exist.","needQuote":true,"needEscape":true,"source":"<code>FileNumber</code> does not exist."},{"pos":[309034,309076],"content":"<ph id=\"ph1\">&lt;code&gt;CharCount&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 0 or <ph id=\"ph3\">&amp;gt;</ph> 214.","needQuote":true,"needEscape":true,"source":"<code>CharCount</code> &lt; 0 or &gt; 214."},{"pos":[309469,309789],"content":"Deletes files from a disk. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Kill\" name=\"Kill\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> .","needQuote":true,"needEscape":true,"nodes":[{"content":"Deletes files from a disk.","pos":[0,26]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Kill\" name=\"Kill\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[27,231],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Kill\" name=\"Kill\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> .","pos":[232,320],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> ."}]},{"pos":[309802,310280],"content":"`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.       **Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code. For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`Kill`</ph> supports the use of multiple-character (<ph id=\"ph2\">`*`</ph>) and single-character (<ph id=\"ph3\">`?`</ph>) wildcards to specify multiple files.","pos":[0,115],"source":"`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files."},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept> In order to execute, the <ph id=\"ph1\">`Kill`</ph> function requires <ph id=\"ph2\">`Read`</ph> and <ph id=\"ph3\">`PathDiscovery`</ph> flags of &lt;xref:System.Security.Permissions.FileIOPermission&gt; to be granted to the executing code.","pos":[122,314],"source":"**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code."},{"content":"For more information, see &lt;xref:System.Security.SecurityException&gt;<bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>","pos":[315,476],"source":" For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)"}]},{"pos":[310615,310816],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies one or more file names to be deleted. `PathName` can include the directory or folder, and the drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies one or more file names to be deleted.","pos":[10,138],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies one or more file names to be deleted."},{"content":"<ph id=\"ph1\">`PathName`</ph> can include the directory or folder, and the drive.","pos":[139,201],"source":"`PathName` can include the directory or folder, and the drive."}]},{"pos":[310970,310990],"content":"Target file(s) open.","needQuote":true,"needEscape":true,"nodes":[{"content":"Target file(s) open.","pos":[0,20]}]},{"pos":[311099,311124],"content":"Target file(s) not found.","needQuote":true,"needEscape":true,"nodes":[{"content":"Target file(s) not found.","pos":[0,25]}]},{"pos":[311237,311255],"content":"Permission denied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Permission denied.","pos":[0,18]}]},{"pos":[311668,311811],"content":"Reads a single line from an open sequential file and assigns it to a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> variable.","needQuote":true,"needEscape":true,"source":"Reads a single line from an open sequential file and assigns it to a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> variable."},{"pos":[311824,312877],"content":"The `LineInput` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       Data read with `LineInput` is usually written to a file by using `Print`.      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.       The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(`13`)`) or carriage return/line feed (`Chr(`13`)` + `Chr(`10`)`) sequence. Carriage return/line feed sequences are skipped instead of appended to the character string.      > [!IMPORTANT] >  Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`LineInput`</ph> function is provided for backward compatibility and may affect performance.","pos":[0,91],"source":"The `LineInput` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[92,185],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[186,283],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"Data read with <ph id=\"ph1\">`LineInput`</ph> is usually written to a file by using <ph id=\"ph2\">`Print`</ph>.","pos":[290,363],"source":"       Data read with `LineInput` is usually written to a file by using `Print`."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When reading from files, do not make decisions about the contents of a file based on the file name extension.","pos":[369,496],"source":"      > [!IMPORTANT] >  When reading from files, do not make decisions about the contents of a file based on the file name extension."},{"content":"For example, a file that is named Form1.vb may not be a Visual Basic source file.","pos":[497,578]},{"content":"The <ph id=\"ph1\">`LineInput`</ph> function reads from a file one character at a time until it encounters a carriage return (<ph id=\"ph2\">`Chr(`</ph>13<ph id=\"ph3\">`)`</ph>) or carriage return/line feed (<ph id=\"ph4\">`Chr(`</ph>13<ph id=\"ph5\">`)`</ph><ph id=\"ph6\"> + </ph><ph id=\"ph7\">`Chr(`</ph>10<ph id=\"ph8\">`)`</ph>) sequence.","pos":[585,770],"source":"       The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(`13`)`) or carriage return/line feed (`Chr(`13`)` + `Chr(`10`)`) sequence."},{"content":"Carriage return/line feed sequences are skipped instead of appended to the character string.","pos":[771,863]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Reading from a file by using the <ph id=\"ph2\">`LineInput`</ph> function requires <ph id=\"ph3\">`Read`</ph> access from the &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; enumeration.","pos":[869,1043],"source":"      > [!IMPORTANT] >  Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration."}]},{"pos":[313352,313384],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[313442,313585],"content":"Reads a single line from an open sequential file and assigns it to a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> variable.","needQuote":true,"needEscape":true,"source":"Reads a single line from an open sequential file and assigns it to a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> variable."},{"pos":[313762,313782],"content":"End of file reached.","needQuote":true,"needEscape":true,"nodes":[{"content":"End of file reached.","pos":[0,20]}]},{"pos":[313871,313910],"content":"<ph id=\"ph1\">&lt;code&gt;FileNumber&lt;/code&gt;</ph> does not exist.","needQuote":true,"needEscape":true,"source":"<code>FileNumber</code> does not exist."},{"pos":[314293,314433],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the current read/write position in an open file.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the current read/write position in an open file."},{"pos":[314446,315234],"content":"The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.       The `Loc` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       The following describes the return value for each file access mode:      |||   |-|-|   |Mode|Return value|   |`Random`|Number of the last record read from or written to the file.|   |`Sequential`|Current byte position in the file divided by 128. However, information returned by `Loc` for sequential files is neither used nor required.|   |`Binary`|Position of the last byte read or written.|","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Loc`</ph> function is zero-based; using it to retrieve the first byte in a file will return 0.","pos":[0,94],"source":"The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0."},{"content":"The <ph id=\"ph1\">`Loc`</ph> function is provided for backward compatibility and may affect performance.","pos":[101,186],"source":"       The `Loc` function is provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[187,280],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[281,378],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"The following describes the return value for each file access mode:      |||   |-|-|   |Mode|Return value|   |<ph id=\"ph1\">`Random`</ph>|Number of the last record read from or written to the file.|   |<ph id=\"ph2\">`Sequential`</ph>|Current byte position in the file divided by 128.","pos":[385,630],"source":"       The following describes the return value for each file access mode:      |||   |-|-|   |Mode|Return value|   |`Random`|Number of the last record read from or written to the file.|   |`Sequential`|Current byte position in the file divided by 128."},{"content":"However, information returned by <ph id=\"ph1\">`Loc`</ph> for sequential files is neither used nor required.|   |<ph id=\"ph2\">`Binary`</ph>|Position of the last byte read or written.|","pos":[631,777],"source":" However, information returned by `Loc` for sequential files is neither used nor required.|   |`Binary`|Position of the last byte read or written.|"}]},{"pos":[315685,315784],"content":"Required. Any valid <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> file number.","pos":[10,99],"source":" Any valid <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> file number."}]},{"pos":[315841,315981],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the current read/write position in an open file.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the current read/write position in an open file."},{"pos":[316134,316155],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[316543,317055],"content":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access by other processes to all or part of a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,150],"source":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[151,424],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[425,512],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[317068,317663],"content":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.       `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are used in environments where several processes might need access to the same file.","pos":[0,118],"source":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file."},{"content":"<ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are always used in pairs.","pos":[125,180],"source":"`Lock` and `Unlock` functions are always used in pairs."},{"content":"The arguments to <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> must be identical.","pos":[181,236],"source":" The arguments to `Lock` and `Unlock` must be identical."},{"content":"If <ph id=\"ph1\">`Record`</ph>, or <ph id=\"ph2\">`FromRecord`</ph> and <ph id=\"ph3\">`ToRecord`</ph> are not supplied, the lock will be for the whole file.","pos":[243,341],"source":"       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file."},{"content":"If <ph id=\"ph1\">`Record`</ph> alone is specified the single record will be locked/unlocked.","pos":[342,415],"source":" If `Record` alone is specified the single record will be locked/unlocked."},{"content":"If the file has been opened for sequential input or output, <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> affect the whole file, regardless of the range specified by <ph id=\"ph3\">`FromRecord`</ph> and<ph id=\"ph4\">`ToRecord`</ph>.","pos":[422,589],"source":"       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`."}]},{"pos":[318099,318131],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[318285,318306],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[318738,319250],"content":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access by other processes to all or part of a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,150],"source":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[151,424],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[425,512],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[319263,319858],"content":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.       `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are used in environments where several processes might need access to the same file.","pos":[0,118],"source":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file."},{"content":"<ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are always used in pairs.","pos":[125,180],"source":"`Lock` and `Unlock` functions are always used in pairs."},{"content":"The arguments to <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> must be identical.","pos":[181,236],"source":" The arguments to `Lock` and `Unlock` must be identical."},{"content":"If <ph id=\"ph1\">`Record`</ph>, or <ph id=\"ph2\">`FromRecord`</ph> and <ph id=\"ph3\">`ToRecord`</ph> are not supplied, the lock will be for the whole file.","pos":[243,341],"source":"       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file."},{"content":"If <ph id=\"ph1\">`Record`</ph> alone is specified the single record will be locked/unlocked.","pos":[342,415],"source":" If `Record` alone is specified the single record will be locked/unlocked."},{"content":"If the file has been opened for sequential input or output, <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> affect the whole file, regardless of the range specified by <ph id=\"ph3\">`FromRecord`</ph> and<ph id=\"ph4\">`ToRecord`</ph>.","pos":[422,589],"source":"       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`."}]},{"pos":[320306,320338],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[320400,320461],"content":"Optional. Number of the only record or byte to lock or unlock","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of the only record or byte to lock or unlock","pos":[0,61],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of the only record or byte to lock or unlock","pos":[10,61]}]}]},{"pos":[320615,320636],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[321112,321624],"content":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access by other processes to all or part of a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,150],"source":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[151,424],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[425,512],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[321637,322232],"content":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.       `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are used in environments where several processes might need access to the same file.","pos":[0,118],"source":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file."},{"content":"<ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are always used in pairs.","pos":[125,180],"source":"`Lock` and `Unlock` functions are always used in pairs."},{"content":"The arguments to <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> must be identical.","pos":[181,236],"source":" The arguments to `Lock` and `Unlock` must be identical."},{"content":"If <ph id=\"ph1\">`Record`</ph>, or <ph id=\"ph2\">`FromRecord`</ph> and <ph id=\"ph3\">`ToRecord`</ph> are not supplied, the lock will be for the whole file.","pos":[243,341],"source":"       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file."},{"content":"If <ph id=\"ph1\">`Record`</ph> alone is specified the single record will be locked/unlocked.","pos":[342,415],"source":" If `Record` alone is specified the single record will be locked/unlocked."},{"content":"If the file has been opened for sequential input or output, <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> affect the whole file, regardless of the range specified by <ph id=\"ph3\">`FromRecord`</ph> and<ph id=\"ph4\">`ToRecord`</ph>.","pos":[422,589],"source":"       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`."}]},{"pos":[322700,322732],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[322798,322861],"content":"Optional. Number of the first record or byte to lock or unlock.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of the first record or byte to lock or unlock.","pos":[0,63],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of the first record or byte to lock or unlock.","pos":[10,63]}]}]},{"pos":[322925,322987],"content":"Optional. Number of the last record or byte to lock or unlock.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of the last record or byte to lock or unlock.","pos":[0,62],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of the last record or byte to lock or unlock.","pos":[10,62]}]}]},{"pos":[323141,323162],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[323545,324048],"content":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> representing the size, in bytes, of a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the size, in bytes, of a file opened by using the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function.","pos":[0,212],"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> representing the size, in bytes, of a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[213,415],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[416,503],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[324060,324135],"content":"Use the <ph id=\"ph1\">`FileLen`</ph> function to obtain the length of a file that is not open.","needQuote":true,"needEscape":true,"source":"Use the `FileLen` function to obtain the length of a file that is not open."},{"pos":[324554,324668],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a valid file number.","pos":[10,114],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number."}]},{"pos":[324725,325140],"content":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> representing the size, in bytes, of a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the size, in bytes, of a file opened by using the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function.","pos":[0,212],"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> representing the size, in bytes, of a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[213,415],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"></xref>."}]},{"pos":[325293,325314],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[325712,326034],"content":"Creates a new directory. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new directory.","pos":[0,24]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[25,231],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"></xref>."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory*&gt;.","pos":[232,322],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory*>."}]},{"pos":[326046,326084],"content":"This function creates a new directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"This function creates a new directory.","pos":[0,38]}]},{"pos":[326487,326788],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies the directory to be created. The `Path` may include the drive. If no drive is specified, <xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"></xref> creates the new directory on the current drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that identifies the directory to be created.","pos":[10,130],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies the directory to be created."},{"content":"The <ph id=\"ph1\">`Path`</ph> may include the drive.","pos":[131,164],"source":" The `Path` may include the drive."},{"content":"If no drive is specified, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> creates the new directory on the current drive.","pos":[165,301],"source":" If no drive is specified, <xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"></xref> creates the new directory on the current drive."}]},{"pos":[326949,326996],"content":"<ph id=\"ph1\">&lt;code&gt;Path&lt;/code&gt;</ph> is not specified or is empty.","needQuote":true,"needEscape":true,"source":"<code>Path</code> is not specified or is empty."},{"pos":[327109,327127],"content":"Permission denied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Permission denied.","pos":[0,18]}]},{"pos":[327216,327241],"content":"Directory already exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Directory already exists.","pos":[0,25]}]},{"pos":[327693,327744],"content":"Writes display-formatted data to a sequential file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes display-formatted data to a sequential file.","pos":[0,51]}]},{"pos":[327757,329628],"content":"The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       `Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.       Data written with `Print` is usually read from a file by using `LineInput` or `Input`.       If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output. Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.       For `Boolean` data, either `True` or `False` is printed. The `True` and `False` keywords are not translated, regardless of the locale.       Date data is written to the file by using the standard short date format recognized by your system. When either the date or the time component is missing or zero, only the part provided is written to the file.       Nothing is written to the file if `Output` data is empty. However, if `Output` list data is `DBNull`, `Null` is written to the file.       For `Error` data, the output appears as `Error errorcode`. The `Error` keyword is not translated regardless of the locale.       All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator. If the user wishes to output data for use by multiple locales, `Write` should be used.       Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Print`</ph> and <ph id=\"ph2\">`PrintLine`</ph> functions are provided for backward compatibility and may affect performance.","pos":[0,105],"source":"The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[106,199],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[200,297],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"<ph id=\"ph1\">`Print`</ph> does not include a line feed at the end of a line; however, <ph id=\"ph2\">`PrintLine`</ph> does include a line feed.","pos":[304,409],"source":"`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed."},{"content":"Data written with <ph id=\"ph1\">`Print`</ph> is usually read from a file by using <ph id=\"ph2\">`LineInput`</ph> or <ph id=\"ph3\">`Input`</ph>.","pos":[416,502],"source":"       Data written with `Print` is usually read from a file by using `LineInput` or `Input`."},{"content":"If you omit <ph id=\"ph1\">`Output`</ph> for <ph id=\"ph2\">`PrintLine`</ph>, a blank line is printed to the file; for <ph id=\"ph3\">`Print`</ph>, nothing is output.","pos":[509,615],"source":"       If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output."},{"content":"Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and <ph id=\"ph1\">`TAB`</ph> may cause inconsistent results.","pos":[616,754],"source":" Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results."},{"content":"For <ph id=\"ph1\">`Boolean`</ph> data, either <ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph> is printed.","pos":[761,817],"source":"       For `Boolean` data, either `True` or `False` is printed."},{"content":"The <ph id=\"ph1\">`True`</ph> and <ph id=\"ph2\">`False`</ph> keywords are not translated, regardless of the locale.","pos":[818,895],"source":" The `True` and `False` keywords are not translated, regardless of the locale."},{"content":"Date data is written to the file by using the standard short date format recognized by your system.","pos":[902,1001]},{"content":"When either the date or the time component is missing or zero, only the part provided is written to the file.","pos":[1002,1111]},{"content":"Nothing is written to the file if <ph id=\"ph1\">`Output`</ph> data is empty.","pos":[1118,1175],"source":"       Nothing is written to the file if `Output` data is empty."},{"content":"However, if <ph id=\"ph1\">`Output`</ph> list data is <ph id=\"ph2\">`DBNull`</ph>, <ph id=\"ph3\">`Null`</ph> is written to the file.","pos":[1176,1250],"source":" However, if `Output` list data is `DBNull`, `Null` is written to the file."},{"content":"For <ph id=\"ph1\">`Error`</ph> data, the output appears as <ph id=\"ph2\">`Error errorcode`</ph>.","pos":[1257,1315],"source":"       For `Error` data, the output appears as `Error errorcode`."},{"content":"The <ph id=\"ph1\">`Error`</ph> keyword is not translated regardless of the locale.","pos":[1316,1379],"source":" The `Error` keyword is not translated regardless of the locale."},{"content":"All data written to the file by using <ph id=\"ph1\">`Print`</ph> is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.","pos":[1386,1539],"source":"       All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator."},{"content":"If the user wishes to output data for use by multiple locales, <ph id=\"ph1\">`Write`</ph> should be used.","pos":[1540,1626],"source":" If the user wishes to output data for use by multiple locales, `Write` should be used."},{"content":"Writing to a file by using the <ph id=\"ph1\">`Print`</ph> or <ph id=\"ph2\">`PrintLine`</ph> functions requires <ph id=\"ph3\">`Write`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1633,1767],"source":"       Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; .","pos":[1768,1853],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> ."}]},{"pos":[329994,330026],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[330092,330485],"content":"Optional. Zero or more comma-delimited expressions to write to a file.       The `Output` argument settings are:       <xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: File mode is invalid.       <xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: `FileNumber` does not exist.","needQuote":false,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Zero or more comma-delimited expressions to write to a file.","pos":[10,70]},{"content":"The <ph id=\"ph1\">`Output`</ph> argument settings are:       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>: File mode is invalid.","pos":[77,240],"source":"       The `Output` argument settings are:       <xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: File mode is invalid."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>: <ph id=\"ph1\">`FileNumber`</ph> does not exist.","pos":[247,375],"source":"<xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: `FileNumber` does not exist."}]},{"pos":[331027,331078],"content":"Writes display-formatted data to a sequential file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes display-formatted data to a sequential file.","pos":[0,51]}]},{"pos":[331091,332960],"content":"The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       `Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.       Data written with `Print` is usually read from a file by using `LineInput` or `Input`.       If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output. Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.       For `Boolean` data, either `True` or `False` is printed. The `True` and `False` keywords are not translated, regardless of the locale.       Date data is written to the file by using the standard short date format recognized by the system. When either the date or the time component is missing or zero, only the part provided is written to the file.       Nothing is written to the file if `Output` data is empty. However, if `Output` list data is `DBNull`, `Null` is written to the file.       For `Error` data, the output appears as `Error errorcode`. The `Error` keyword is not translated regardless of the locale.       All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator. If the user wishes to output data for use by multiple locales, `Write` should be used.       Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Print`</ph> and <ph id=\"ph2\">`PrintLine`</ph> functions are provided for backward compatibility and may affect performance.","pos":[0,105],"source":"The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[106,199],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[200,297],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"<ph id=\"ph1\">`Print`</ph> does not include a line feed at the end of a line; however,<ph id=\"ph2\">`PrintLine`</ph> does include a line feed.","pos":[304,408],"source":"`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed."},{"content":"Data written with <ph id=\"ph1\">`Print`</ph> is usually read from a file by using <ph id=\"ph2\">`LineInput`</ph> or <ph id=\"ph3\">`Input`</ph>.","pos":[415,501],"source":"       Data written with `Print` is usually read from a file by using `LineInput` or `Input`."},{"content":"If you omit <ph id=\"ph1\">`Output`</ph> for <ph id=\"ph2\">`PrintLine`</ph>, a blank line is printed to the file; for <ph id=\"ph3\">`Print`</ph>, nothing is output.","pos":[508,614],"source":"       If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output."},{"content":"Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and <ph id=\"ph1\">`TAB`</ph> may cause inconsistent results.","pos":[615,753],"source":" Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results."},{"content":"For <ph id=\"ph1\">`Boolean`</ph> data, either <ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph> is printed.","pos":[760,816],"source":"       For `Boolean` data, either `True` or `False` is printed."},{"content":"The <ph id=\"ph1\">`True`</ph> and <ph id=\"ph2\">`False`</ph> keywords are not translated, regardless of the locale.","pos":[817,894],"source":" The `True` and `False` keywords are not translated, regardless of the locale."},{"content":"Date data is written to the file by using the standard short date format recognized by the system.","pos":[901,999]},{"content":"When either the date or the time component is missing or zero, only the part provided is written to the file.","pos":[1000,1109]},{"content":"Nothing is written to the file if <ph id=\"ph1\">`Output`</ph> data is empty.","pos":[1116,1173],"source":"       Nothing is written to the file if `Output` data is empty."},{"content":"However, if <ph id=\"ph1\">`Output`</ph> list data is <ph id=\"ph2\">`DBNull`</ph>, <ph id=\"ph3\">`Null`</ph> is written to the file.","pos":[1174,1248],"source":" However, if `Output` list data is `DBNull`, `Null` is written to the file."},{"content":"For <ph id=\"ph1\">`Error`</ph> data, the output appears as <ph id=\"ph2\">`Error errorcode`</ph>.","pos":[1255,1313],"source":"       For `Error` data, the output appears as `Error errorcode`."},{"content":"The <ph id=\"ph1\">`Error`</ph> keyword is not translated regardless of the locale.","pos":[1314,1377],"source":" The `Error` keyword is not translated regardless of the locale."},{"content":"All data written to the file by using <ph id=\"ph1\">`Print`</ph> is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.","pos":[1384,1537],"source":"       All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator."},{"content":"If the user wishes to output data for use by multiple locales, <ph id=\"ph1\">`Write`</ph> should be used.","pos":[1538,1624],"source":" If the user wishes to output data for use by multiple locales, `Write` should be used."},{"content":"Writing to a file by using the <ph id=\"ph1\">`Print`</ph> or <ph id=\"ph2\">`PrintLine`</ph> functions requires <ph id=\"ph3\">`Write`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[1631,1765],"source":"       Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; .","pos":[1766,1851],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> ."}]},{"pos":[333330,333362],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[333428,333821],"content":"Optional. Zero or more comma-delimited expressions to write to a file.       The `Output` argument settings are:       <xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: File mode is invalid.       <xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: `FileNumber` does not exist.","needQuote":false,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Zero or more comma-delimited expressions to write to a file.","pos":[10,70]},{"content":"The <ph id=\"ph1\">`Output`</ph> argument settings are:       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>: File mode is invalid.","pos":[77,240],"source":"       The `Output` argument settings are:       <xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: File mode is invalid."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>: <ph id=\"ph1\">`FileNumber`</ph> does not exist.","pos":[247,375],"source":"<xref uid=\"langword_csharp_T:System.IO.IOException\" name=\"T:System.IO.IOException\" href=\"\"></xref>: `FileNumber` does not exist."}]},{"pos":[334347,334677],"content":"Renames a disk file or directory. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Rename\" name=\"Rename\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Renames a disk file or directory.","pos":[0,33]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Rename\" name=\"Rename\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[34,242],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Rename\" name=\"Rename\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[243,330],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[334690,335440],"content":"The`Rename` function renames a file and moves it to a different directory, if it is required. The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive. `Rename` cannot create a new file or directory.       Using the `Rename` function on an open file produces an error. You must close an open file before renaming it. `Rename` arguments cannot include multiple-character (*) and single-character (?) wildcards.      > [!IMPORTANT] >  When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights. Check to make sure that you are not introducing a possible security risk.","needQuote":false,"needEscape":true,"nodes":[{"content":"The<ph id=\"ph1\">`Rename`</ph> function renames a file and moves it to a different directory, if it is required.","pos":[0,93],"source":"The`Rename` function renames a file and moves it to a different directory, if it is required."},{"content":"The <ph id=\"ph1\">`Rename`</ph> function can move a file across drives, but it can only rename an existing directory when both <ph id=\"ph2\">`NewPath`</ph> and <ph id=\"ph3\">`OldPath`</ph> are located on the same drive.","pos":[94,256],"source":" The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive."},{"content":"<ph id=\"ph1\">`Rename`</ph> cannot create a new file or directory.","pos":[257,304],"source":"`Rename` cannot create a new file or directory."},{"content":"Using the <ph id=\"ph1\">`Rename`</ph> function on an open file produces an error.","pos":[311,373],"source":"       Using the `Rename` function on an open file produces an error."},{"content":"You must close an open file before renaming it.","pos":[374,421]},{"content":"<ph id=\"ph1\">`Rename`</ph> arguments cannot include multiple-character (*) and single-character (?) wildcards.","pos":[422,514],"source":"`Rename` arguments cannot include multiple-character (*) and single-character (?) wildcards."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When using <ph id=\"ph2\">`Rename`</ph> to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.","pos":[520,671],"source":"      > [!IMPORTANT] >  When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights."},{"content":"Check to make sure that you are not introducing a possible security risk.","pos":[672,745]}]},{"pos":[335872,336070],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the existing file name and location. `OldPath` may include the directory, and drive, of the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies the existing file name and location.","pos":[10,137],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the existing file name and location."},{"content":"<ph id=\"ph1\">`OldPath`</ph> may include the directory, and drive, of the file.","pos":[138,198],"source":"`OldPath` may include the directory, and drive, of the file."}]},{"pos":[336134,336396],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the new file name and location. `NewPath` may include directory and drive of the destination location. The file name specified by `NewPath` cannot already exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies the new file name and location.","pos":[10,132],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the new file name and location."},{"content":"<ph id=\"ph1\">`NewPath`</ph> may include directory and drive of the destination location.","pos":[133,203],"source":"`NewPath` may include directory and drive of the destination location."},{"content":"The file name specified by <ph id=\"ph1\">`NewPath`</ph> cannot already exist.","pos":[204,262],"source":" The file name specified by `NewPath` cannot already exist."}]},{"pos":[336558,336574],"content":"Path is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Path is invalid.","pos":[0,16]}]},{"pos":[336683,336724],"content":"<ph id=\"ph1\">&lt;code&gt;OldPath&lt;/code&gt;</ph> file does not exist.","needQuote":true,"needEscape":true,"source":"<code>OldPath</code> file does not exist."},{"pos":[336813,336847],"content":"Cannot rename to different device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cannot rename to different device.","pos":[0,34]}]},{"pos":[337197,337612],"content":"Closes all disk files opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Reset\" name=\"Reset\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes all disk files opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,120],"source":"Closes all disk files opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Reset\" name=\"Reset\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[121,327],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Reset\" name=\"Reset\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[328,415],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[337624,337769],"content":"The <ph id=\"ph1\">`Reset`</ph> function closes all active files opened by the <ph id=\"ph2\">`FileOpen`</ph> function and has the same function as <ph id=\"ph3\">`FileClose()`</ph> without any parameters.","needQuote":true,"needEscape":true,"source":"The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters."},{"pos":[338623,338951],"content":"Removes an existing directory. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes an existing directory.","pos":[0,30]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[31,237],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"></xref>."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*&gt;.","pos":[238,328],"source":" For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*>."}]},{"pos":[338963,339122],"content":"An error occurs if you try to use `RmDir` on a directory that contains files. Use the `Kill` function to delete all files before you try to remove a directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurs if you try to use <ph id=\"ph1\">`RmDir`</ph> on a directory that contains files.","pos":[0,77],"source":"An error occurs if you try to use `RmDir` on a directory that contains files."},{"content":"Use the <ph id=\"ph1\">`Kill`</ph> function to delete all files before you try to remove a directory.","pos":[78,159],"source":" Use the `Kill` function to delete all files before you try to remove a directory."}]},{"pos":[339452,339755],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies the directory or folder to be removed. `Path` can include the drive. If no drive is specified, <xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"></xref> removes the directory on the current drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that identifies the directory or folder to be removed.","pos":[10,140],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies the directory or folder to be removed."},{"content":"<ph id=\"ph1\">`Path`</ph> can include the drive.","pos":[141,170],"source":"`Path` can include the drive."},{"content":"If no drive is specified, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> removes the directory on the current drive.","pos":[171,303],"source":" If no drive is specified, <xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"></xref> removes the directory on the current drive."}]},{"pos":[339916,339963],"content":"<ph id=\"ph1\">&lt;code&gt;Path&lt;/code&gt;</ph> is not specified or is empty.","needQuote":true,"needEscape":true,"source":"<code>Path</code> is not specified or is empty."},{"pos":[340052,340084],"content":"Target directory contains files.","needQuote":true,"needEscape":true,"nodes":[{"content":"Target directory contains files.","pos":[0,32]}]},{"pos":[340193,340218],"content":"Directory does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"Directory does not exist.","pos":[0,25]}]},{"pos":[340606,341285],"content":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specifying the current read/write position in a file opened by using the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function, or sets the position for the next read/write operation in a file opened by using the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[0,386],"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[387,591],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[592,679],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[341298,341742],"content":"`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.       The following describes the return values for each file access mode:      |||   |-|-|   |Mode|Return Value|   |`Random`|Number of the next record read or written|   |`Binary`, `Input`, `Output`, `Append`|Byte position at which the next operation occurs. The first byte in a file is at position 1, the second byte is at position 2, and so on.|","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`Seek`</ph> returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.","pos":[0,87],"source":"`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive."},{"content":"The following describes the return values for each file access mode:      |||   |-|-|   |Mode|Return Value|   |<ph id=\"ph1\">`Random`</ph>|Number of the next record read or written|   |<ph id=\"ph2\">`Binary`</ph>, <ph id=\"ph3\">`Input`</ph>, <ph id=\"ph4\">`Output`</ph>, <ph id=\"ph5\">`Append`</ph>|Byte position at which the next operation occurs.","pos":[94,347],"source":"       The following describes the return values for each file access mode:      |||   |-|-|   |Mode|Return Value|   |`Random`|Number of the next record read or written|   |`Binary`, `Input`, `Output`, `Append`|Byte position at which the next operation occurs."},{"content":"The first byte in a file is at position 1, the second byte is at position 2, and so on.|","pos":[348,436]}]},{"pos":[343054,343168],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a valid file number.","pos":[10,114],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number."}]},{"pos":[343225,343611],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specifying the current read/write position in a file opened by using the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function, or sets the position for the next read/write operation in a file opened by using the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"pos":[343765,343786],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[344218,344897],"content":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specifying the current read/write position in a file opened by using the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function, or sets the position for the next read/write operation in a file opened by using the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[0,386],"source":"Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[387,591],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[592,679],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[344910,345354],"content":"`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.       The following describes the return values for each file access mode:      |||   |-|-|   |Mode|Return Value|   |`Random`|Number of the next record read or written|   |`Binary`, `Input`, `Output`, `Append`|Byte position at which the next operation occurs. The first byte in a file is at position 1, the second byte is at position 2, and so on.|","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`Seek`</ph> returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.","pos":[0,87],"source":"`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive."},{"content":"The following describes the return values for each file access mode:      |||   |-|-|   |Mode|Return Value|   |<ph id=\"ph1\">`Random`</ph>|Number of the next record read or written|   |<ph id=\"ph2\">`Binary`</ph>, <ph id=\"ph3\">`Input`</ph>, <ph id=\"ph4\">`Output`</ph>, <ph id=\"ph5\">`Append`</ph>|Byte position at which the next operation occurs.","pos":[94,347],"source":"       The following describes the return values for each file access mode:      |||   |-|-|   |Mode|Return Value|   |`Random`|Number of the next record read or written|   |`Binary`, `Input`, `Output`, `Append`|Byte position at which the next operation occurs."},{"content":"The first byte in a file is at position 1, the second byte is at position 2, and so on.|","pos":[348,436]}]},{"pos":[346677,346791],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a valid file number.","pos":[10,114],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number."}]},{"pos":[346855,346977],"content":"Required. Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.","pos":[0,122],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.","pos":[10,122]}]}]},{"pos":[347131,347152],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[347674,348011],"content":"Sets attribute information for a file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_SetAttr\" name=\"SetAttr\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets attribute information for a file.","pos":[0,38]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SetAttr\" name=\"SetAttr\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[39,249],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_SetAttr\" name=\"SetAttr\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[250,337],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[348024,348736],"content":"A run-time error occurs if you try to set the attributes of an open file.       The `Attributes` argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |`Normal`|`vbNormal`|Normal (default).|   |`ReadOnly`|`vbReadOnly`|Read-only.|   |`Hidden`|`vbHidden`|Hidden.|   |`System`|`vbSystem`|System file.|   |`Volume`|`vbVolume`|Volume label|   |`Directory`|`vbDirectory`|Directory or folder.|   |`Archive`|`vbArchive`|File has changed since last backup.|   |`Alias`|`vbAlias`|File has a different name.|      > [!NOTE] >  These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code instead of the actual values.","needQuote":false,"needEscape":true,"nodes":[{"content":"A run-time error occurs if you try to set the attributes of an open file.","pos":[0,73]},{"content":"The <ph id=\"ph1\">`Attributes`</ph> argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |<ph id=\"ph2\">`Normal`</ph><ph id=\"ph3\">|</ph><ph id=\"ph4\">`vbNormal`</ph>|Normal (default).|   |<ph id=\"ph5\">`ReadOnly`</ph><ph id=\"ph6\">|</ph><ph id=\"ph7\">`vbReadOnly`</ph>|Read-only.|   |<ph id=\"ph8\">`Hidden`</ph><ph id=\"ph9\">|</ph><ph id=\"ph10\">`vbHidden`</ph>|Hidden.|   |<ph id=\"ph11\">`System`</ph><ph id=\"ph12\">|</ph><ph id=\"ph13\">`vbSystem`</ph>|System file.|   |<ph id=\"ph14\">`Volume`</ph><ph id=\"ph15\">|</ph><ph id=\"ph16\">`vbVolume`</ph>|Volume label|   |<ph id=\"ph17\">`Directory`</ph><ph id=\"ph18\">|</ph><ph id=\"ph19\">`vbDirectory`</ph>|Directory or folder.|   |<ph id=\"ph20\">`Archive`</ph><ph id=\"ph21\">|</ph><ph id=\"ph22\">`vbArchive`</ph>|File has changed since last backup.|   |<ph id=\"ph23\">`Alias`</ph><ph id=\"ph24\">|</ph><ph id=\"ph25\">`vbAlias`</ph>|File has a different name.|      &gt; <ph id=\"ph26\">[!NOTE]</ph> &gt;  These enumerations are specified by the Visual Basic language.","pos":[80,621],"source":"       The `Attributes` argument enumeration values are as follows:      ||||   |-|-|-|   |Value|Constant|Description|   |`Normal`|`vbNormal`|Normal (default).|   |`ReadOnly`|`vbReadOnly`|Read-only.|   |`Hidden`|`vbHidden`|Hidden.|   |`System`|`vbSystem`|System file.|   |`Volume`|`vbVolume`|Volume label|   |`Directory`|`vbDirectory`|Directory or folder.|   |`Archive`|`vbArchive`|File has changed since last backup.|   |`Alias`|`vbAlias`|File has a different name.|      > [!NOTE] >  These enumerations are specified by the Visual Basic language."},{"content":"The names can be used anywhere in your code instead of the actual values.","pos":[622,695]}]},{"pos":[349121,349289],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name. `PathName` can include directory or folder, and drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that specifies a file name.","pos":[10,113],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name."},{"content":"<ph id=\"ph1\">`PathName`</ph> can include directory or folder, and drive.","pos":[114,168],"source":"`PathName` can include directory or folder, and drive."}]},{"pos":[349378,349456],"content":"Required. Constant or numeric expression, whose sum specifies file attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Constant or numeric expression, whose sum specifies file attributes.","pos":[0,78],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Constant or numeric expression, whose sum specifies file attributes.","pos":[10,78]}]}]},{"pos":[349619,349658],"content":"<ph id=\"ph1\">&lt;code&gt;Attribute&lt;/code&gt;</ph> type is invalid.","needQuote":true,"needEscape":true,"source":"<code>Attribute</code> type is invalid."},{"pos":[350041,350220],"content":"Used with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function to position output.","needQuote":true,"needEscape":true,"source":"Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> function to position output."},{"pos":[350233,351079],"content":"If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed. If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:       `currentprintposition`(+(`Count``Mod``width`))       For example, if the current print position is 24, the output line width is 80, and you specify `SPC(`90`)`, the next print will start at position 34 (current print position + the remainder of 90/80). If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).      > [!NOTE] >  Make sure your tabular columns are wide enough to allow for wide letters.","needQuote":false,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`Count`</ph> is less than the output line width, the next print position immediately follows the number of spaces printed.","pos":[0,120],"source":"If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed."},{"content":"If<ph id=\"ph1\">`Count`</ph> is greater than the output line width, <ph id=\"ph2\">`SPC`</ph> calculates the next print position using the formula:       <ph id=\"ph3\">`currentprintposition`</ph>(+(<ph id=\"ph4\">`Count``Mod``width`</ph>))       For example, if the current print position is 24, the output line width is 80, and you specify <ph id=\"ph5\">`SPC(`</ph>90<ph id=\"ph6\">`)`</ph>, the next print will start at position 34 (current print position + the remainder of 90/80).","pos":[121,488],"source":" If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:       `currentprintposition`(+(`Count``Mod``width`))       For example, if the current print position is 24, the output line width is 80, and you specify `SPC(`90`)`, the next print will start at position 34 (current print position + the remainder of 90/80)."},{"content":"If the difference between the current print position and the output line width is less than <ph id=\"ph1\">`Count`</ph> (or <ph id=\"ph2\">`Count`</ph> <ph id=\"ph3\">`Mod`</ph> <bpt id=\"p1\">*</bpt>width<ept id=\"p1\">*</ept>), the <ph id=\"ph4\">`SPC`</ph> function skips to the start of the next line and generates spaces equal to <ph id=\"ph5\">`Count`</ph> – (<bpt id=\"p2\">*</bpt>width<ept id=\"p2\">*</ept> – <bpt id=\"p3\">*</bpt>currentprintposition<ept id=\"p3\">*</ept>).","pos":[489,747],"source":" If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Make sure your tabular columns are wide enough to allow for wide letters.","pos":[753,839],"source":"      > [!NOTE] >  Make sure your tabular columns are wide enough to allow for wide letters."}]},{"pos":[351458,351559],"content":"Required. The number of spaces to insert before displaying or printing the next expression in a list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. The number of spaces to insert before displaying or printing the next expression in a list.","pos":[0,101],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"The number of spaces to insert before displaying or printing the next expression in a list.","pos":[10,101]}]}]},{"pos":[351633,351812],"content":"Used with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function to position output.","needQuote":true,"needEscape":true,"source":"Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> function to position output."},{"pos":[352219,352399],"content":"Used with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> functions to position output.","needQuote":true,"needEscape":true,"source":"Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output."},{"pos":[352412,353744],"content":"If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line. If `Column` is less than 1, `TAB` moves the print position to column 1. If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:       Column Mod width       For example, if *width* is 80 and you specify `TAB(`90`)`, the next print will start at column 10 (the remainder of 90/80). If `Column` is less than the current print position, printing starts on the next line at the calculated print position. If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.       The leftmost print position on an output line is always 1. When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.       The `TAB` function can also be used with the `WriteLine` function. It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName>.      > [!NOTE] >  Make sure your tabular columns are wide enough to contain wide letters.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the current print position on the current line is larger than <ph id=\"ph1\">`Column`</ph>, <ph id=\"ph2\">`TAB`</ph> skips to the column value equal to <ph id=\"ph3\">`Column`</ph> on the next output line.","pos":[0,149],"source":"If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line."},{"content":"If <ph id=\"ph1\">`Column`</ph> is less than 1, <ph id=\"ph2\">`TAB`</ph> moves the print position to column 1.","pos":[150,221],"source":" If `Column` is less than 1, `TAB` moves the print position to column 1."},{"content":"If <ph id=\"ph1\">`Column`</ph> is larger than the output line width, <ph id=\"ph2\">`TAB`</ph> calculates the next print position using the formula:       Column Mod width       For example, if <bpt id=\"p1\">*</bpt>width<ept id=\"p1\">*</ept> is 80 and you specify <ph id=\"ph3\">`TAB(`</ph>90<ph id=\"ph4\">`)`</ph>, the next print will start at column 10 (the remainder of 90/80).","pos":[222,484],"source":" If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:       Column Mod width       For example, if *width* is 80 and you specify `TAB(`90`)`, the next print will start at column 10 (the remainder of 90/80)."},{"content":"If <ph id=\"ph1\">`Column`</ph> is less than the current print position, printing starts on the next line at the calculated print position.","pos":[485,604],"source":" If `Column` is less than the current print position, printing starts on the next line at the calculated print position."},{"content":"If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.","pos":[605,747]},{"content":"The leftmost print position on an output line is always 1.","pos":[754,812]},{"content":"When you use the <ph id=\"ph1\">`Print`</ph> or <ph id=\"ph2\">`PrintLine`</ph> functions to print to files, the rightmost print position is the current width of the output file, which you can set using the <ph id=\"ph3\">`FileWidth`</ph> function.","pos":[813,1001],"source":" When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function."},{"content":"The <ph id=\"ph1\">`TAB`</ph> function can also be used with the <ph id=\"ph2\">`WriteLine`</ph> function.","pos":[1008,1074],"source":"       The `TAB` function can also be used with the `WriteLine` function."},{"content":"It cannot be used with &lt;xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName&gt; or &lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;.","pos":[1075,1231],"source":" It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Make sure your tabular columns are wide enough to contain wide letters.","pos":[1237,1321],"source":"      > [!NOTE] >  Make sure your tabular columns are wide enough to contain wide letters."}]},{"pos":[354128,354308],"content":"Used with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> functions to position output.","needQuote":true,"needEscape":true,"source":"Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output."},{"pos":[354758,354938],"content":"Used with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> functions to position output.","needQuote":true,"needEscape":true,"source":"Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output."},{"pos":[354951,356286],"content":"If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line. If `Column` is less than 1, `TAB` moves the print position to column 1. If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:       Column Mod width       For example, if *width* is 80 and you specify `TAB(`90`)`, the next print will start at column 10 (the remainder of 90/80). If `Column` is less than the current print position, printing starts on the next line at the calculated print position. If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.       The leftmost print position on an output line is always 1. When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.       The `TAB` function can also be used with the `WriteLine` function. It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName>.      > [!NOTE] >  Make sure your tabular columns are wide enough to contain wide letters.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the current print position on the current line is greater than <ph id=\"ph1\">`Column`</ph>, <ph id=\"ph2\">`TAB`</ph> skips to the column value equal to <ph id=\"ph3\">`Column`</ph> on the next output line.","pos":[0,150],"source":"If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line."},{"content":"If <ph id=\"ph1\">`Column`</ph> is less than 1, <ph id=\"ph2\">`TAB`</ph> moves the print position to column 1.","pos":[151,222],"source":" If `Column` is less than 1, `TAB` moves the print position to column 1."},{"content":"If <ph id=\"ph1\">`Column`</ph> is greater than the output line width, <ph id=\"ph2\">`TAB`</ph> calculates the next print position using the formula:       Column Mod width       For example, if <bpt id=\"p1\">*</bpt>width<ept id=\"p1\">*</ept> is 80 and you specify <ph id=\"ph3\">`TAB(`</ph>90<ph id=\"ph4\">`)`</ph>, the next print will start at column 10 (the remainder of 90/80).","pos":[223,486],"source":" If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:       Column Mod width       For example, if *width* is 80 and you specify `TAB(`90`)`, the next print will start at column 10 (the remainder of 90/80)."},{"content":"If <ph id=\"ph1\">`Column`</ph> is less than the current print position, printing starts on the next line at the calculated print position.","pos":[487,606],"source":" If `Column` is less than the current print position, printing starts on the next line at the calculated print position."},{"content":"If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.","pos":[607,750]},{"content":"The leftmost print position on an output line is always 1.","pos":[757,815]},{"content":"When you use the <ph id=\"ph1\">`Print`</ph> or <ph id=\"ph2\">`PrintLine`</ph> functions to print to files, the rightmost print position is the current width of the output file, which you can set using the <ph id=\"ph3\">`FileWidth`</ph> function.","pos":[816,1004],"source":" When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function."},{"content":"The <ph id=\"ph1\">`TAB`</ph> function can also be used with the <ph id=\"ph2\">`WriteLine`</ph> function.","pos":[1011,1077],"source":"       The `TAB` function can also be used with the `WriteLine` function."},{"content":"It cannot be used with &lt;xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName&gt; or &lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;.","pos":[1078,1234],"source":" It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Make sure your tabular columns are wide enough to contain wide letters.","pos":[1240,1324],"source":"      > [!NOTE] >  Make sure your tabular columns are wide enough to contain wide letters."}]},{"pos":[356667,356898],"content":"Optional. The column number moved to before displaying or printing the next expression in a list. If omitted, <xref uid=\"langword_csharp_TAB\" name=\"TAB\" href=\"\"></xref> moves the insertion point to the start of the next print zone.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"The column number moved to before displaying or printing the next expression in a list.","pos":[10,97]},{"content":"If omitted, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TAB\" name=\"TAB\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> moves the insertion point to the start of the next print zone.","pos":[98,231],"source":" If omitted, <xref uid=\"langword_csharp_TAB\" name=\"TAB\" href=\"\"></xref> moves the insertion point to the start of the next print zone."}]},{"pos":[356972,357152],"content":"Used with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> functions to position output.","needQuote":true,"needEscape":true,"source":"Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output."},{"pos":[357617,358129],"content":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access by other processes to all or part of a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,150],"source":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[151,424],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[425,512],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[358142,358737],"content":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.       `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are used in environments where several processes might need access to the same file.","pos":[0,118],"source":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file."},{"content":"<ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are always used in pairs.","pos":[125,180],"source":"`Lock` and `Unlock` functions are always used in pairs."},{"content":"The arguments to <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> must be identical.","pos":[181,236],"source":" The arguments to `Lock` and `Unlock` must be identical."},{"content":"If <ph id=\"ph1\">`Record`</ph>, or <ph id=\"ph2\">`FromRecord`</ph> and <ph id=\"ph3\">`ToRecord`</ph> are not supplied, the lock will be for the whole file.","pos":[243,341],"source":"       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file."},{"content":"If <ph id=\"ph1\">`Record`</ph> alone is specified the single record will be locked/unlocked.","pos":[342,415],"source":" If `Record` alone is specified the single record will be locked/unlocked."},{"content":"If the file has been opened for sequential input or output, <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> affect the whole file, regardless of the range specified by <ph id=\"ph3\">`FromRecord`</ph> and<ph id=\"ph4\">`ToRecord`</ph>.","pos":[422,589],"source":"       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`."}]},{"pos":[359174,359206],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[359362,359383],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[359825,360337],"content":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access by other processes to all or part of a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,150],"source":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[151,424],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[425,512],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[360350,360945],"content":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.       `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are used in environments where several processes might need access to the same file.","pos":[0,118],"source":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file."},{"content":"<ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are always used in pairs.","pos":[125,180],"source":"`Lock` and `Unlock` functions are always used in pairs."},{"content":"The arguments to <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> must be identical.","pos":[181,236],"source":" The arguments to `Lock` and `Unlock` must be identical."},{"content":"If <ph id=\"ph1\">`Record`</ph>, or <ph id=\"ph2\">`FromRecord`</ph> and <ph id=\"ph3\">`ToRecord`</ph> are not supplied, the lock will be for the whole file.","pos":[243,341],"source":"       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file."},{"content":"If <ph id=\"ph1\">`Record`</ph> alone is specified the single record will be locked/unlocked.","pos":[342,415],"source":" If `Record` alone is specified the single record will be locked/unlocked."},{"content":"If the file has been opened for sequential input or output, <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> affect the whole file, regardless of the range specified by <ph id=\"ph3\">`FromRecord`</ph> and<ph id=\"ph4\">`ToRecord`</ph>.","pos":[422,589],"source":"       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`."}]},{"pos":[361396,361428],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[361490,361551],"content":"Optional. Number of the only record or byte to lock or unlock","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of the only record or byte to lock or unlock","pos":[0,61],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of the only record or byte to lock or unlock","pos":[10,61]}]}]},{"pos":[361707,361728],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[362214,362726],"content":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access by other processes to all or part of a file opened by using the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[0,150],"source":"Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> feature gives you better productivity and performance in file I/O operations than <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[151,424],"source":" The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>."},{"content":"For more information, see <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[425,512],"source":" For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>."}]},{"pos":[362739,363334],"content":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.       `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are used in environments where several processes might need access to the same file.","pos":[0,118],"source":"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file."},{"content":"<ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> functions are always used in pairs.","pos":[125,180],"source":"`Lock` and `Unlock` functions are always used in pairs."},{"content":"The arguments to <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> must be identical.","pos":[181,236],"source":" The arguments to `Lock` and `Unlock` must be identical."},{"content":"If <ph id=\"ph1\">`Record`</ph>, or <ph id=\"ph2\">`FromRecord`</ph> and <ph id=\"ph3\">`ToRecord`</ph> are not supplied, the lock will be for the whole file.","pos":[243,341],"source":"       If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file."},{"content":"If <ph id=\"ph1\">`Record`</ph> alone is specified the single record will be locked/unlocked.","pos":[342,415],"source":" If `Record` alone is specified the single record will be locked/unlocked."},{"content":"If the file has been opened for sequential input or output, <ph id=\"ph1\">`Lock`</ph> and <ph id=\"ph2\">`Unlock`</ph> affect the whole file, regardless of the range specified by <ph id=\"ph3\">`FromRecord`</ph> and<ph id=\"ph4\">`ToRecord`</ph>.","pos":[422,589],"source":"       If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`."}]},{"pos":[363800,363832],"content":"Required. Any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid file number.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid file number.","pos":[10,32]}]}]},{"pos":[363898,363961],"content":"Optional. Number of the first record or byte to lock or unlock.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of the first record or byte to lock or unlock.","pos":[0,63],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of the first record or byte to lock or unlock.","pos":[10,63]}]}]},{"pos":[364025,364087],"content":"Optional. Number of the last record or byte to lock or unlock.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of the last record or byte to lock or unlock.","pos":[0,62],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of the last record or byte to lock or unlock.","pos":[10,62]}]}]},{"pos":[364243,364264],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[364716,364931],"content":"Writes data to a sequential file. Data written with <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref> is usually read from a file by using <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data to a sequential file.","pos":[0,33]},{"content":"Data written with <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is usually read from a file by using <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[34,215],"source":" Data written with <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref> is usually read from a file by using <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>."}]},{"pos":[364944,367217],"content":"The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       If you omit `Output`, a blank line is printed to the file. Multiple expressions can be separated with a comma.       Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file. You do not have to put explicit delimiters in the list. When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported. The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:      -   Numeric data is always written using the period as the decimal separator.      -   For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed. The `True` and `False` keywords are not translated, regardless of locale.      -   Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the part provided is written to the file.      -   Nothing is written to the file if `Output` data is empty. However, for null data, `#NULL#` is written.      -   For `Error` data, the output appears as `#ERROR errorcode#`. The `Error` keyword is not translated, regardless of locale.       `WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.       You can embed quotation marks in a string by using double quotation marks, or \"\". For example,       [!code-vb[VbVbalrCatRef#63](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._145_1.vb)]       returns a string with the value of `Double quotation marks aren't \"difficult\" to handle`.       Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Write`</ph> and <ph id=\"ph2\">`WriteLine`</ph> functions are provided for backward compatibility and may affect performance.","pos":[0,105],"source":"The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[106,199],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[200,297],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"If you omit <ph id=\"ph1\">`Output`</ph>, a blank line is printed to the file.","pos":[304,362],"source":"       If you omit `Output`, a blank line is printed to the file."},{"content":"Multiple expressions can be separated with a comma.","pos":[363,414]},{"content":"Unlike the <ph id=\"ph1\">`Print`</ph> function, the <ph id=\"ph2\">`Write`</ph> function inserts commas between items and quotation marks around strings as they are written to the file.","pos":[421,567],"source":"       Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file."},{"content":"You do not have to put explicit delimiters in the list.","pos":[568,623]},{"content":"When <ph id=\"ph1\">`Write`</ph> is used to write data to a file, only numeric, <ph id=\"ph2\">`Boolean`</ph>, date, null, and <ph id=\"ph3\">`Error`</ph> data formats are supported.","pos":[624,746],"source":" When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported."},{"content":"The following universal assumptions are followed so the data can always be read and correctly interpreted using <ph id=\"ph1\">`Input`</ph>, regardless of locale:      -   Numeric data is always written using the period as the decimal separator.","pos":[747,972],"source":" The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:      -   Numeric data is always written using the period as the decimal separator."},{"content":"-   For <ph id=\"ph1\">`Boolean`</ph> data, either <ph id=\"ph2\">`#TRUE#`</ph> or <ph id=\"ph3\">`#FALSE#`</ph> is printed.","pos":[978,1042],"source":"      -   For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed."},{"content":"The <ph id=\"ph1\">`True`</ph> and <ph id=\"ph2\">`False`</ph> keywords are not translated, regardless of locale.","pos":[1043,1116],"source":" The `True` and `False` keywords are not translated, regardless of locale."},{"content":"-   Date data is written to the file using the universal date format.","pos":[1122,1191]},{"content":"When either the date or the time component is missing or zero, only the part provided is written to the file.","pos":[1192,1301]},{"content":"-   Nothing is written to the file if <ph id=\"ph1\">`Output`</ph> data is empty.","pos":[1307,1368],"source":"      -   Nothing is written to the file if `Output` data is empty."},{"content":"However, for null data, <ph id=\"ph1\">`#NULL#`</ph> is written.","pos":[1369,1413],"source":" However, for null data, `#NULL#` is written."},{"content":"-   For <ph id=\"ph1\">`Error`</ph> data, the output appears as <ph id=\"ph2\">`#ERROR errorcode#`</ph>.","pos":[1419,1483],"source":"      -   For `Error` data, the output appears as `#ERROR errorcode#`."},{"content":"The <ph id=\"ph1\">`Error`</ph> keyword is not translated, regardless of locale.","pos":[1484,1544],"source":" The `Error` keyword is not translated, regardless of locale."},{"content":"<ph id=\"ph1\">`WriteLine`</ph> inserts a newline character (that is, a carriage return/line feed, or <ph id=\"ph2\">`Chr(13) + Chr(10)`</ph>), after it has written the final character in <ph id=\"ph3\">`Output`</ph> to the file.","pos":[1551,1720],"source":"`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file."},{"content":"You can embed quotation marks in a string by using double quotation marks, or \"\".","pos":[1727,1808]},{"content":"For example,       <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#63<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._145_1.vb)</ept><ept id=\"p1\">]</ept>       returns a string with the value of <ph id=\"ph1\">`Double quotation marks aren't \"difficult\" to handle`</ph>.","pos":[1809,2017],"source":" For example,       [!code-vb[VbVbalrCatRef#63](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._145_1.vb)]       returns a string with the value of `Double quotation marks aren't \"difficult\" to handle`."},{"content":"Writing to a file by using the <ph id=\"ph1\">`Write`</ph> or <ph id=\"ph2\">`WriteLine`</ph> functions requires <ph id=\"ph3\">`Append`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[2024,2159],"source":"       Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; .","pos":[2160,2245],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> ."}]},{"pos":[367581,367708],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression that contains any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that contains any valid file number.","pos":[10,127],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression that contains any valid file number."}]},{"pos":[367773,367842],"content":"Optional. One or more comma-delimited expressions to write to a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. One or more comma-delimited expressions to write to a file.","pos":[0,69],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"One or more comma-delimited expressions to write to a file.","pos":[10,69]}]}]},{"pos":[367997,368018],"content":"File mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"File mode is invalid.","pos":[0,21]}]},{"pos":[368490,368705],"content":"Writes data to a sequential file. Data written with <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref> is usually read from a file by using <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes data to a sequential file.","pos":[0,33]},{"content":"Data written with <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is usually read from a file by using <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[34,215],"source":" Data written with <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref> is usually read from a file by using <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>."}]},{"pos":[368718,370991],"content":"The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).       If you omit `Output`, a blank line is printed to the file. Multiple expressions can be separated with a comma.       Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file. You do not have to put explicit delimiters in the list. When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported. The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:      -   Numeric data is always written using the period as the decimal separator.      -   For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed. The `True` and `False` keywords are not translated, regardless of locale.      -   Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the part provided is written to the file.      -   Nothing is written to the file if `Output` data is empty. However, for null data, `#NULL#` is written.      -   For `Error` data, the output appears as `#ERROR errorcode#`. The `Error` keyword is not translated, regardless of locale.       `WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.       You can embed quotation marks in a string by using double quotation marks, or \"\". For example,       [!code-vb[VbVbalrCatRef#63](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._172_1.vb)]       returns a string with the value of `Double quotation marks aren't \"difficult\" to handle`.       Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Write`</ph> and <ph id=\"ph2\">`WriteLine`</ph> functions are provided for backward compatibility and may affect performance.","pos":[0,105],"source":"The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance."},{"content":"For non-legacy applications, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance.","pos":[106,199],"source":" For non-legacy applications, the `My.Computer.FileSystem` object provides better performance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>File Access with Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[200,297],"source":" For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"If you omit <ph id=\"ph1\">`Output`</ph>, a blank line is printed to the file.","pos":[304,362],"source":"       If you omit `Output`, a blank line is printed to the file."},{"content":"Multiple expressions can be separated with a comma.","pos":[363,414]},{"content":"Unlike the <ph id=\"ph1\">`Print`</ph> function, the <ph id=\"ph2\">`Write`</ph> function inserts commas between items and quotation marks around strings as they are written to the file.","pos":[421,567],"source":"       Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file."},{"content":"You do not have to put explicit delimiters in the list.","pos":[568,623]},{"content":"When <ph id=\"ph1\">`Write`</ph> is used to write data to a file, only numeric, <ph id=\"ph2\">`Boolean`</ph>, date, null, and <ph id=\"ph3\">`Error`</ph> data formats are supported.","pos":[624,746],"source":" When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported."},{"content":"The following universal assumptions are followed so the data can always be read and correctly interpreted using <ph id=\"ph1\">`Input`</ph>, regardless of locale:      -   Numeric data is always written using the period as the decimal separator.","pos":[747,972],"source":" The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:      -   Numeric data is always written using the period as the decimal separator."},{"content":"-   For <ph id=\"ph1\">`Boolean`</ph> data, either <ph id=\"ph2\">`#TRUE#`</ph> or <ph id=\"ph3\">`#FALSE#`</ph> is printed.","pos":[978,1042],"source":"      -   For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed."},{"content":"The <ph id=\"ph1\">`True`</ph> and <ph id=\"ph2\">`False`</ph> keywords are not translated, regardless of locale.","pos":[1043,1116],"source":" The `True` and `False` keywords are not translated, regardless of locale."},{"content":"-   Date data is written to the file using the universal date format.","pos":[1122,1191]},{"content":"When either the date or the time component is missing or zero, only the part provided is written to the file.","pos":[1192,1301]},{"content":"-   Nothing is written to the file if <ph id=\"ph1\">`Output`</ph> data is empty.","pos":[1307,1368],"source":"      -   Nothing is written to the file if `Output` data is empty."},{"content":"However, for null data, <ph id=\"ph1\">`#NULL#`</ph> is written.","pos":[1369,1413],"source":" However, for null data, `#NULL#` is written."},{"content":"-   For <ph id=\"ph1\">`Error`</ph> data, the output appears as <ph id=\"ph2\">`#ERROR errorcode#`</ph>.","pos":[1419,1483],"source":"      -   For `Error` data, the output appears as `#ERROR errorcode#`."},{"content":"The <ph id=\"ph1\">`Error`</ph> keyword is not translated, regardless of locale.","pos":[1484,1544],"source":" The `Error` keyword is not translated, regardless of locale."},{"content":"<ph id=\"ph1\">`WriteLine`</ph> inserts a newline character (that is, a carriage return/line feed, or <ph id=\"ph2\">`Chr(13) + Chr(10)`</ph>), after it has written the final character in <ph id=\"ph3\">`Output`</ph> to the file.","pos":[1551,1720],"source":"`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file."},{"content":"You can embed quotation marks in a string by using double quotation marks, or \"\".","pos":[1727,1808]},{"content":"For example,       <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCatRef#63<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._172_1.vb)</ept><ept id=\"p1\">]</ept>       returns a string with the value of <ph id=\"ph1\">`Double quotation marks aren't \"difficult\" to handle`</ph>.","pos":[1809,2017],"source":" For example,       [!code-vb[VbVbalrCatRef#63](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._172_1.vb)]       returns a string with the value of `Double quotation marks aren't \"difficult\" to handle`."},{"content":"Writing to a file by using the <ph id=\"ph1\">`Write`</ph> or <ph id=\"ph2\">`WriteLine`</ph> functions requires <ph id=\"ph3\">`Append`</ph> access from the <ph id=\"ph4\">`FileIOPermissionAccess`</ph> enumeration.","pos":[2024,2159],"source":"       Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration."},{"content":"For more information, see &lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt; .","pos":[2160,2245],"source":" For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> ."}]},{"pos":[371359,371486],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression that contains any valid file number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression that contains any valid file number.","pos":[10,127],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression that contains any valid file number."}]},{"pos":[371551,371620],"content":"Optional. One or more comma-delimited expressions to write to a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. One or more comma-delimited expressions to write to a file.","pos":[0,69],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"One or more comma-delimited expressions to write to a file.","pos":[10,69]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.FileSystem\n  id: FileSystem\n  children:\n  - Microsoft.VisualBasic.FileSystem.ChDir(System.String)\n  - Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)\n  - Microsoft.VisualBasic.FileSystem.ChDrive(System.String)\n  - Microsoft.VisualBasic.FileSystem.CurDir\n  - Microsoft.VisualBasic.FileSystem.CurDir(System.Char)\n  - Microsoft.VisualBasic.FileSystem.Dir\n  - Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)\n  - Microsoft.VisualBasic.FileSystem.EOF(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])\n  - Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)\n  - Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)\n  - Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)\n  - Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileLen(System.String)\n  - Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)\n  - Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)\n  - Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)\n  - Microsoft.VisualBasic.FileSystem.FreeFile\n  - Microsoft.VisualBasic.FileSystem.GetAttr(System.String)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)\n  - Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)\n  - Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)\n  - Microsoft.VisualBasic.FileSystem.Kill(System.String)\n  - Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.Loc(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.Lock(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.LOF(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.MkDir(System.String)\n  - Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])\n  - Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])\n  - Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)\n  - Microsoft.VisualBasic.FileSystem.Reset\n  - Microsoft.VisualBasic.FileSystem.RmDir(System.String)\n  - Microsoft.VisualBasic.FileSystem.Seek(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)\n  - Microsoft.VisualBasic.FileSystem.SPC(System.Int16)\n  - Microsoft.VisualBasic.FileSystem.TAB\n  - Microsoft.VisualBasic.FileSystem.TAB(System.Int16)\n  - Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)\n  - Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)\n  - Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])\n  - Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])\n  langs:\n  - csharp\n  name: FileSystem\n  nameWithType: FileSystem\n  fullName: Microsoft.VisualBasic.FileSystem\n  type: Class\n  summary: The <xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"></xref> module contains the procedures that are used to perform file, directory or folder, and system operations. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than using the <xref uid=\"langword_csharp_FileSystem\" name=\"FileSystem\" href=\"\"></xref> module. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: This module supports the Visual Basic language keywords and run-time library members that access files and folders.\n  example:\n  - \"This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.  \\n  \\n [!code-vb[VbVbalrCatRef#25](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._17_1.vb)]\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      [System.Security.SecurityCritical]\n\n      public sealed class FileSystem\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.ChDir(System.String)\n  id: ChDir(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: ChDir(String)\n  nameWithType: FileSystem.ChDir(String)\n  fullName: Microsoft.VisualBasic.FileSystem.ChDir(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Changes the current directory or folder. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_ChDir \" name=\"ChDir \" href=\"\"></xref>function. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*> .\n  remarks: \"The `ChDir` function changes the default directory, but not the default drive. For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:  \\n  \\n [!code-vb[VbVbalrCatRef#39](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_1.vb)]  \\n  \\n You can make relative directory changes is by typing two periods, as follows:  \\n  \\n [!code-vb[VbVbalrCatRef#40](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_2.vb)]  \\n  \\n> [!IMPORTANT]\\n>  The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and .\"\n  example:\n  - \"This example uses the `ChDir` function to change the current directory or folder.  \\n  \\n [!code-vb[VbVbalrCatRef#41](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._177_3.vb)]\"\n  syntax:\n    content: public static void ChDir (string Path);\n    parameters:\n    - id: Path\n      type: System.String\n      description: Required. A <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies which directory or folder becomes the new default directory or folder. `Path` may include the drive. If no drive is specified, <xref uid=\"langword_csharp_ChDir\" name=\"ChDir\" href=\"\"></xref> changes the default directory or folder on the current drive.\n  overload: Microsoft.VisualBasic.FileSystem.ChDir*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Path</code> is empty.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: Invalid drive is specified, or drive is unavailable.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)\n  id: ChDrive(System.Char)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: ChDrive(Char)\n  nameWithType: FileSystem.ChDrive(Char)\n  fullName: Microsoft.VisualBasic.FileSystem.ChDrive(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Changes the current drive.\n  remarks: The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).\n  example:\n  - \"This example uses the `ChDrive` function to change the current drive. The function throws an exception if the drive does not exist.  \\n  \\n [!code-vb[VbVbalrCatRef#32](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._181_1.vb)]\"\n  syntax:\n    content: public static void ChDrive (char Drive);\n    parameters:\n    - id: Drive\n      type: System.Char\n      description: Required. String expression that specifies an existing drive. If you supply a zero-length string (\"\"), the current drive does not change. If the `Drive` argument is a multiple-character string, <xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"></xref> uses only the first letter.\n  overload: Microsoft.VisualBasic.FileSystem.ChDrive*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Invalid drive is specified, or drive is unavailable.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.ChDrive(System.String)\n  id: ChDrive(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: ChDrive(String)\n  nameWithType: FileSystem.ChDrive(String)\n  fullName: Microsoft.VisualBasic.FileSystem.ChDrive(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Changes the current drive.\n  remarks: The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).\n  example:\n  - \"This example uses the `ChDrive` function to change the current drive. The function throws an exception if the drive does not exist.  \\n  \\n [!code-vb[VbVbalrCatRef#32](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._225_1.vb)]\"\n  syntax:\n    content: public static void ChDrive (string Drive);\n    parameters:\n    - id: Drive\n      type: System.String\n      description: Required. String expression that specifies an existing drive. If you supply a zero-length string (\"\"), the current drive does not change. If the `Drive` argument is a multiple-character string, <xref uid=\"langword_csharp_ChDrive\" name=\"ChDrive\" href=\"\"></xref> uses only the first letter.\n  overload: Microsoft.VisualBasic.FileSystem.ChDrive*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Invalid drive is specified, or drive is unavailable.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.CurDir\n  id: CurDir\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: CurDir()\n  nameWithType: FileSystem.CurDir()\n  fullName: Microsoft.VisualBasic.FileSystem.CurDir()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the current path. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*>.\n  remarks: ''\n  example:\n  - \"This example uses the `CurDir` function to return the current path.  \\n  \\n [!code-vb[VbVbalrCatRef#65](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._123_1.vb)]\"\n  syntax:\n    content: public static string CurDir ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representing the current path.\n  overload: Microsoft.VisualBasic.FileSystem.CurDir*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.CurDir(System.Char)\n  id: CurDir(System.Char)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: CurDir(Char)\n  nameWithType: FileSystem.CurDir(Char)\n  fullName: Microsoft.VisualBasic.FileSystem.CurDir(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the current path. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*>.\n  remarks: ''\n  example:\n  - \"This example uses the `CurDir` function to return the current path.  \\n  \\n [!code-vb[VbVbalrCatRef#65](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._203_1.vb)]\"\n  syntax:\n    content: public static string CurDir (char Drive);\n    parameters:\n    - id: Drive\n      type: System.Char\n      description: Optional. <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression that specifies an existing drive. If no drive is specified, or if `Drive` is a zero-length string (\"\"), <xref uid=\"langword_csharp_CurDir\" name=\"CurDir\" href=\"\"></xref> returns the path for the current drive.\n    return:\n      type: System.String\n      description: A string representing the current path.\n  overload: Microsoft.VisualBasic.FileSystem.CurDir*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Dir\n  id: Dir\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Dir()\n  nameWithType: FileSystem.Dir()\n  fullName: Microsoft.VisualBasic.FileSystem.Dir()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> function. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*> for more information.\n  remarks: \"The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.  \\n  \\n `VbVolume` returns the volume label for the drive instead of a specific file name.  \\n  \\n You must supply a `PathName` the first time that you call the `Dir` function. To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.  \\n  \\n> [!IMPORTANT]\\n>  To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code. For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  \\n  \\n The `Attributes` argument enumeration values are as follows:  \\n  \\n||||  \\n|-|-|-|  \\n|Value|Constant|Description|  \\n|`Normal`|`vbnormal`|Default. Specifies files without attributes.|  \\n|`ReadOnly`|`vbReadOnly`|Specifies read-only files, and also files without attributes.|  \\n|`Hidden`|`vbHidden`|Specifies hidden files, and also files without attributes.|  \\n|`System`|`vbSystem`|Specifies system files, and also files without attributes.|  \\n|`Volume`|`vbVolume`|Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.|  \\n|`Directory`|`vbDirectory`|Specifies directories or folders, and also files without attributes.|  \\n|`Archive`|`vbArchive`|File has changed since last backup.|  \\n|`Alias`|`vbAlias`|File has a different name.|  \\n  \\n> [!NOTE]\\n>  These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.\"\n  example:\n  - \"This example uses the `Dir` function to check if certain files and directories exist.  \\n  \\n [!code-vb[VbVbalrCatRef#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._44_1.vb)]\"\n  syntax:\n    content: public static string Dir ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.\n  overload: Microsoft.VisualBasic.FileSystem.Dir*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)\n  id: Dir(System.String,Microsoft.VisualBasic.FileAttribute)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Dir(String,FileAttribute)\n  nameWithType: FileSystem.Dir(String,FileAttribute)\n  fullName: Microsoft.VisualBasic.FileSystem.Dir(String,FileAttribute)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> function. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*> for more information.\n  remarks: \"The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.  \\n  \\n `VbVolume` returns the volume label for the drive instead of a specific file name.  \\n  \\n You must supply a `PathName` the first time that you call the `Dir` function. To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.  \\n  \\n> [!IMPORTANT]\\n>  To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code. For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  \\n  \\n The `Attributes` argument enumeration values are as follows:  \\n  \\n||||  \\n|-|-|-|  \\n|Value|Constant|Description|  \\n|`Normal`|`vbnormal`|Default. Specifies files that have no attributes.|  \\n|`ReadOnly`|`vbReadOnly`|Specifies read-only files, in addition to files that have no attributes.|  \\n|`Hidden`|`vbHidden`|Specifies hidden files, in addition to files that have no attributes.|  \\n|`System`|`vbSystem`|Specifies system files, in addition to files that have no attributes.|  \\n|`Volume`|`vbVolume`|Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.|  \\n|`Directory`|`vbDirectory`|Specifies directories or folders, in addition to files that have no attributes.|  \\n|`Archive`|`vbArchive`|File has changed since last backup.|  \\n|`Alias`|`vbAlias`|File has a different name.|  \\n  \\n> [!NOTE]\\n>  These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.\"\n  example:\n  - \"This example uses the `Dir` function to check if certain files and directories exist.  \\n  \\n [!code-vb[VbVbalrCatRef#3](~/add/codesnippet/visualbasic/0bb37160-d621-482a-af3b-_1.vb)]\"\n  syntax:\n    content: public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);\n    parameters:\n    - id: PathName\n      type: System.String\n      description: Optional. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name, directory or folder name, or drive volume label. A zero-length string (<xref uid=\"langword_csharp_&quot;&quot;\" name=\"&quot;&quot;\" href=\"\"></xref>) is returned if `PathName` is not found.\n    - id: Attributes\n      type: Microsoft.VisualBasic.FileAttribute\n      description: Optional. Enumeration or numeric expression whose value specifies file attributes. If omitted, <xref uid=\"langword_csharp_Dir\" name=\"Dir\" href=\"\"></xref> returns files that match `PathName` but have no attributes.\n    return:\n      type: System.String\n      description: A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.\n  overload: Microsoft.VisualBasic.FileSystem.Dir*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.EOF(System.Int32)\n  id: EOF(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: EOF(Int32)\n  nameWithType: FileSystem.EOF(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.EOF(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a Boolean value <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> when the end of a file opened for <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> or sequential <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> has been reached.\n  remarks: \"Use `EOF` to avoid the error generated by attempting to get input past the end of a file.  \\n  \\n The `EOF` function returns `False` until the end of the file has been reached. With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.  \\n  \\n With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error. Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function. With files opened for `Output`, `EOF` always returns `True`.\"\n  example:\n  - \"This example uses the `EOF` function to detect the end of a file. This example assumes that `Testfile` is a text file that contains several lines of text.  \\n  \\n [!code-vb[VbVbalrCatRef#62](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._184_1.vb)]\"\n  syntax:\n    content: public static bool EOF (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains any valid file number.\n    return:\n      type: System.Boolean\n      description: Returns a Boolean value <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> when the end of a file opened for <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> or sequential <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> has been reached.\n  overload: Microsoft.VisualBasic.FileSystem.EOF*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)\n  id: FileAttr(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileAttr(Int32)\n  nameWithType: FileSystem.FileAttr(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.FileAttr(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an enumeration representing the file mode for files opened using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than the <xref uid=\"langword_csharp_FileAttr \" name=\"FileAttr \" href=\"\"></xref>function. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*> for more information.\n  remarks: This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.\n  example:\n  - \"This example uses the `FileAttr` function to return the file mode of an open file.  \\n  \\n [!code-vb[VbVbalrCatRef#46](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._147_1.vb)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>. Any valid file number.\n    return:\n      type: Microsoft.VisualBasic.OpenMode\n      description: \"The following enumeration values indicate the file access mode:  \\n  \\n <table><tbody><tr><td> Value  \\n  \\n </td><td> Mode  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><xref uid=\\\"langword_csharp_OpenMode.Input\\\" name=\\\"OpenMode.Input\\\" href=\\\"\\\"></xref></td></tr><tr><td> 2  \\n  \\n </td><td><xref uid=\\\"langword_csharp_OpenMode.Output\\\" name=\\\"OpenMode.Output\\\" href=\\\"\\\"></xref></td></tr><tr><td> 4  \\n  \\n </td><td><xref uid=\\\"langword_csharp_OpenMode.Random\\\" name=\\\"OpenMode.Random\\\" href=\\\"\\\"></xref></td></tr><tr><td> 8  \\n  \\n </td><td><xref uid=\\\"langword_csharp_OpenMode.Append\\\" name=\\\"OpenMode.Append\\\" href=\\\"\\\"></xref></td></tr><tr><td> 32  \\n  \\n </td><td><xref uid=\\\"langword_csharp_OpenMode.Binary\\\" name=\\\"OpenMode.Binary\\\" href=\\\"\\\"></xref></td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.FileSystem.FileAttr*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])\n  id: FileClose(System.Int32[])\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileClose(Int32[])\n  nameWithType: FileSystem.FileClose(Int32[])\n  fullName: Microsoft.VisualBasic.FileSystem.FileClose(Int32[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Concludes input/output (I/O) to a file opened using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> gives you better productivity and performance in file I/O operations. See <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> for more information.\n  remarks: \"The `FileClose` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [How to: Read Text from Files with a StreamReader](~/add/includes/ajax-current-ext-md.md),[How to: Write Text to Files with a StreamWriter](~/add/includes/ajax-current-ext-md.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.  \\n  \\n When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file. All buffer space associated with the closed file is released.  \\n  \\n When the `FileClose` function is executed, the association of a file with its file number ends.\"\n  example:\n  - \"This example uses the `FileClose`function to close a file opened for `Input`.  \\n  \\n [!code-vb[VbVbalrCatRef#69](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._41_1.vb)]\"\n  syntax:\n    content: public static void FileClose (int[] FileNumbers);\n    parameters:\n    - id: FileNumbers\n      type: System.Int32[]\n      description: Optional. Parameter array of 0 or more channels to be closed.\n  overload: Microsoft.VisualBasic.FileSystem.FileClose*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <code>FileNumber</code> does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)\n  id: FileCopy(System.String,System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileCopy(String,String)\n  nameWithType: FileSystem.FileCopy(String,String)\n  fullName: Microsoft.VisualBasic.FileSystem.FileCopy(String,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Copies a file. The <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileCopy\" name=\"FileCopy\" href=\"\"></xref>. See <xref:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*> for more information.\n  remarks: \"If you try to use the `FileCopy` function on a currently open file, an error occurs.  \\n  \\n `FileCopy` requires full trust to work on the local drive.\"\n  example:\n  - \"This example uses the `FileCopy` function to copy one file to another. For purposes of this example, assume that `SrcFile` is a file that contains data.  \\n  \\n [!code-vb[VbVbalrCatRef#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._96_1.vb)]\"\n  syntax:\n    content: public static void FileCopy (string Source, string Destination);\n    parameters:\n    - id: Source\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the name of the file to be copied. `Source` may include the directory or folder, and drive, of the source file.\n    - id: Destination\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the destination file name. `Destination` may include the directory or folder, and drive, of the destination file.\n  overload: Microsoft.VisualBasic.FileSystem.FileCopy*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Source</code> or <code>Destination</code> is invalid or not specified.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File is already open.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: File does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)\n  id: FileDateTime(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileDateTime(String)\n  nameWithType: FileSystem.FileDateTime(String)\n  fullName: Microsoft.VisualBasic.FileSystem.FileDateTime(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> value that indicates the date and time a file was written to. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileDateTime\" name=\"FileDateTime\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*>\n  remarks: ''\n  example:\n  - \"This example uses the `FileDateTime` function to determine the date and time a file was created or last modified. The format of the date and time displayed is based on the locale settings of the system.  \\n  \\n [!code-vb[VbVbalrCatRef#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._22_1.vb)]\"\n  syntax:\n    content: public static DateTime FileDateTime (string PathName);\n    parameters:\n    - id: PathName\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name. `PathName` may include the directory or folder, and the drive.\n    return:\n      type: System.DateTime\n      description: <xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> value that indicates the date and time a file was created or last modified.\n  overload: Microsoft.VisualBasic.FileSystem.FileDateTime*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>PathName</code> is invalid or contains wildcards.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: Target file does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)\n  id: FileGet(System.Int32,System.Boolean@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Boolean,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Boolean,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Boolean,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file with `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/ad6628f8-6ae5-47af-a394-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Boolean\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)\n  id: FileGet(System.Int32,System.Byte@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Byte,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Byte,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Byte,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file with `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic`parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used. Then the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/9daa1fad-0f67-40af-bac0-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Byte\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)\n  id: FileGet(System.Int32,System.Char@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Char,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Char,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Char,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file with `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic`parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/31a532e9-297f-48c8-a186-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Char\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)\n  id: FileGet(System.Int32,System.DateTime@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,DateTime,Int64)\n  nameWithType: FileSystem.FileGet(Int32,DateTime,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,DateTime,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file with `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/d9877ddb-692f-47fe-8c26-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.DateTime\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)\n  id: FileGet(System.Int32,System.Decimal@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Decimal,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Decimal,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Decimal,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/3d9f416d-1287-4566-b3fa-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Decimal\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)\n  id: FileGet(System.Int32,System.Double@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Double,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Double,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Double,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/184fee0e-b744-4669-8fdf-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Double\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)\n  id: FileGet(System.Int32,System.Int16@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Int16,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Int16,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Int16,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic`parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/45e0fdff-455b-4fd4-a7c2-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int16\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)\n  id: FileGet(System.Int32,System.Int32@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Int32,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Int32,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/7db3ee1c-ee17-457b-bd2d-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int32\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)\n  id: FileGet(System.Int32,System.Int64@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Int64,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Int64,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/bd48d1ef-82ea-4239-8c9b-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int64\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)\n  id: FileGet(System.Int32,System.Single@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Single,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Single,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Single,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/79f9948f-e0d0-41fe-a7b5-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Single\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)\n  id: FileGet(System.Int32,System.ValueType@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,ValueType,Int64)\n  nameWithType: FileSystem.FileGet(Int32,ValueType,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,ValueType,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/f351f02c-d919-4d73-938f-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen`function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.ValueType\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)\n  id: FileGet(System.Int32,System.String@,System.Int64,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,String,Int64,Boolean)\n  nameWithType: FileSystem.FileGet(Int32,String,Int64,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,String,Int64,Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/cefffea4-17eb-455d-be3e-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.String\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n    - id: StringIsFixedLength\n      type: System.Boolean\n      description: Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)\n  id: FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGet(Int32,Array,Int64,Boolean,Boolean)\n  nameWithType: FileSystem.FileGet(Int32,Array,Int64,Boolean,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Array,Int64,Boolean,Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGet\" name=\"FileGet\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FileGet` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGet` is usually written to a file by using `FilePut`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries. The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  \\n  \\n-   By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.  \\n  \\n     The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#21](~/add/codesnippet/visualbasic/c053ec00-d593-49bf-a3cb-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows:  \\n  \\n    -   18 bytes for the descriptor: (2 + 8 * 2)  \\n  \\n    -   200 bytes for the data: (5 * 10 \\\\* 4).  \\n  \\n-   If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.  \\n  \\n-   `FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGet` reads all variables from disk contiguously; that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGet` reads only the data. No descriptor is read.  \\n  \\n-   `FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n    > [!IMPORTANT]\\n    >  Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  syntax:\n    content: public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Array\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n    - id: ArrayIsDynamic\n      type: System.Boolean\n      description: Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.\n    - id: StringIsFixedLength\n      type: System.Boolean\n      description: Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.FileSystem.FileGet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)\n  id: FileGetObject(System.Int32,System.Object@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileGetObject(Int32,Object,Int64)\n  nameWithType: FileSystem.FileGetObject(Int32,Object,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGetObject(Int32,Object,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open disk file into a variable.  The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileGetObject\" name=\"FileGetObject\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.  \\n  \\n If you intend to write out the `Variant` type, `FileGetObject` is required. When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.  \\n  \\n `FileGetObject` is valid only in `Random` and `Binary` mode.  \\n  \\n Data read with `FileGetObject` is usually written with `FilePutObject`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.  \\n  \\n-   If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: 2 + 8 * NumberOfDimensions.  \\n  \\n     For example, the following array declaration requires 218 bytes when the array is written to disk:  \\n  \\n     [!code-vb[VbVbalrCatRef#27](~/add/codesnippet/visualbasic/16450c3e-87c4-4606-9e31-_1.vb)]  \\n  \\n     The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 * 2), and 100 bytes for the data (5 \\\\* 10 \\\\* 4).  \\n  \\n-   `FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 * NumberOfDimensions. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors. The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FileGetObject`reads all variables from disk contiguously, that is, with no padding between records.  \\n  \\n-   For any array other than an array in a structure, `FileGetObject` reads only the data. No descriptor is read.  \\n  \\n `FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file named Form1.vb may not be a Visual Basic source file.\"\n  example:\n  - \"The following example reads a record into a test file and then retrieves it.  \\n  \\n [!code-vb[VbVbalrCatRef#26](~/add/codesnippet/visualbasic/16450c3e-87c4-4606-9e31-_2.vb)]\"\n  syntax:\n    content: public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Object\n      description: Required. Valid variable name into which data is read.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which reading starts.\n  overload: Microsoft.VisualBasic.FileSystem.FileGetObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileLen(System.String)\n  id: FileLen(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileLen(String)\n  nameWithType: FileSystem.FileLen(String)\n  fullName: Microsoft.VisualBasic.FileSystem.FileLen(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the length of a file in bytes. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileLen\" name=\"FileLen\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*>.\n  remarks: \"If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.  \\n  \\n> [!NOTE]\\n>  To obtain the current length of an open file, use the `LOF` function.\"\n  example:\n  - \"This example uses the `FileLen` function to return the length of a file in bytes. For purposes of this example, assume that `TestFile` is a file that contains some data.  \\n  \\n [!code-vb[VbVbalrCatRef#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._122_1.vb)]\"\n  syntax:\n    content: public static long FileLen (string PathName);\n    parameters:\n    - id: PathName\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file. `PathName` may include the directory or folder, and the drive.\n    return:\n      type: System.Int64\n      description: <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the length of a file in bytes.\n  overload: Microsoft.VisualBasic.FileSystem.FileLen*\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: File does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)\n  id: FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)\n  nameWithType: FileSystem.FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Opens a file for input or output. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `FileOpen` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You must open a file before any I/O operation can be performed on it. `FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.  \\n  \\n> [!IMPORTANT]\\n>  When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist. To do so, it needs permission for the directory in which the file is to be created. However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself. Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory. To help improve security, write data to user directories instead of to the root directory or the Program Files directory.  \\n  \\n The channel to open can be found by using the `FreeFile()` function.  \\n  \\n> [!IMPORTANT]\\n>  The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example illustrates various uses of the `FileOpen` function to enable input and output to a file.  \\n  \\n The following code opens the file `TestFile` in `Input` mode.  \\n  \\n [!code-vb[VbVbalrCatRef#5](~/add/codesnippet/visualbasic/ebe0f421-4483-4c55-8150-_1.vb)]  \\n  \\n This example opens the file in `Binary` mode for writing operations only.  \\n  \\n [!code-vb[VbVbalrCatRef#6](~/add/codesnippet/visualbasic/ebe0f421-4483-4c55-8150-_2.vb)]  \\n  \\n The following example opens the file in `Random` mode. The file contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#7](~/add/codesnippet/visualbasic/ebe0f421-4483-4c55-8150-_3.vb)]  \\n  \\n This code example opens the file in `Output` mode; any process can read or write to file.  \\n  \\n [!code-vb[VbVbalrCatRef#8](~/add/codesnippet/visualbasic/ebe0f421-4483-4c55-8150-_4.vb)]  \\n  \\n This code example opens the file in `Binary` mode for reading; other processes cannot read file.  \\n  \\n [!code-vb[VbVbalrCatRef#9](~/add/codesnippet/visualbasic/ebe0f421-4483-4c55-8150-_5.vb)]\"\n  syntax:\n    content: public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number. Use the <xref uid=\"langword_csharp_FreeFile\" name=\"FreeFile\" href=\"\"></xref> function to obtain the next available file number.\n    - id: FileName\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name—may include directory or folder, and drive.\n    - id: Mode\n      type: Microsoft.VisualBasic.OpenMode\n      description: 'Required. Enumeration specifying the file mode: <xref uid=\"langword_csharp_Append\" name=\"Append\" href=\"\"></xref>, <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref>, <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>, <xref uid=\"langword_csharp_Output\" name=\"Output\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.OpenMode\"></xref> .'\n    - id: Access\n      type: Microsoft.VisualBasic.OpenAccess\n      description: 'Optional. Enumeration specifying the operations permitted on the open file: <xref uid=\"langword_csharp_Read\" name=\"Read\" href=\"\"></xref>, <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"></xref>. Defaults to <xref uid=\"langword_csharp_ReadWrite\" name=\"ReadWrite\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.OpenAccess\"></xref> .'\n    - id: Share\n      type: Microsoft.VisualBasic.OpenShare\n      description: 'Optional. Enumeration specifying the operations not permitted on the open file by other processes: <xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"></xref>, <xref uid=\"langword_csharp_Lock Read\" name=\"Lock Read\" href=\"\"></xref>, <xref uid=\"langword_csharp_Lock Write\" name=\"Lock Write\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"></xref>. Defaults to <xref uid=\"langword_csharp_Lock Read Write\" name=\"Lock Read Write\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.OpenShare\"></xref> .'\n    - id: RecordLength\n      type: System.Int32\n      description: Optional. Number less than or equal to 32,767 (bytes). For files opened for random access, this value is the record length. For sequential files, this value is the number of characters buffered.\n  overload: Microsoft.VisualBasic.FileSystem.FileOpen*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Record length is negative (and not equal to -1).\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <code>FileName</code> is already open, or <code>FileName</code> is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)\n  id: FilePut(System.Int32,System.Boolean,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Boolean,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Boolean,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Boolean,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen`function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/b684b977-357d-4475-a2d0-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Boolean\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)\n  id: FilePut(System.Int32,System.Byte,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Byte,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Byte,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Byte,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/2a393bee-4ca7-4317-bbe9-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Byte\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)\n  id: FilePut(System.Int32,System.Char,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Char,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Char,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Char,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/f7dbd668-3841-4860-9fe2-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Char\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)\n  id: FilePut(System.Int32,System.DateTime,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,DateTime,Int64)\n  nameWithType: FileSystem.FilePut(Int32,DateTime,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,DateTime,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/30fdf8e5-a84c-499e-8f20-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.DateTime\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)\n  id: FilePut(System.Int32,System.Decimal,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Decimal,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Decimal,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Decimal,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/9cb41843-0b02-4bad-b757-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Decimal\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)\n  id: FilePut(System.Int32,System.Double,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Double,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Double,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Double,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/59c5b768-6732-40e5-a205-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Double\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)\n  id: FilePut(System.Int32,System.Int16,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Int16,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Int16,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Int16,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/835229db-b7e7-4e50-86a7-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int16\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)\n  id: FilePut(System.Int32,System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Int32,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Int32,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/6a50d289-6d85-4fc1-99f7-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int32\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)\n  id: FilePut(System.Int32,System.Int64,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Int64,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Int64,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/90087c6f-a92b-4ccb-88f5-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int64\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)\n  id: FilePut(System.Int32,System.Single,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Single,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Single,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Single,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen`function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/67fd8601-6772-45be-87ee-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Single\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)\n  id: FilePut(System.Int32,System.ValueType,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,ValueType,Int64)\n  nameWithType: FileSystem.FilePut(Int32,ValueType,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,ValueType,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/814bf35d-de00-4bf6-9dca-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.ValueType\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)\n  id: FilePut(System.Object,System.Object,System.Object)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Object,Object,Object)\n  nameWithType: FileSystem.FilePut(Object,Object,Object)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Object,Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/b8a1d844-c860-47f2-9311-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Object\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Object\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Object\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)\n  id: FilePut(System.Int32,System.String,System.Int64,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,String,Int64,Boolean)\n  nameWithType: FileSystem.FilePut(Int32,String,Int64,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,String,Int64,Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>..\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/6bdd614c-e459-4fef-9c10-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.String\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n    - id: StringIsFixedLength\n      type: System.Boolean\n      description: Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)\n  id: FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePut(Int32,Array,Int64,Boolean,Boolean)\n  nameWithType: FileSystem.FilePut(Int32,Array,Int64,Boolean,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Array,Int64,Boolean,Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`FilePut` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePut` is usually read from a file by using `FileGet`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePut` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.  \\n  \\n-   If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the `ArrayIsDynamic` parameter to `True`. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  \\n  \\n     [!code-vb[VbVbalrCatRef#43](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_1.vb)]  \\n  \\n-   If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data. The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.  \\n  \\n-   `FilePut` writes elements of structures as if each were written individually, except there is no padding between elements. The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  \\n  \\n    > [!NOTE]\\n    >  String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions. The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePut` writes all variables to disk contiguously, that is, without padding between records.  \\n  \\n-   For any array other than an array in a structure, `FilePut` writes only the data. No descriptor is written.  \\n  \\n-   `FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  \\n  \\n     [!code-vb[VbVbalrCatRef#44](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_2.vb)]  \\n  \\n-   Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `FilePut` function to write data to a file. Five records of the structure `Person` are written to the file.  \\n  \\n [!code-vb[VbVbalrCatRef#42](~/add/codesnippet/visualbasic/34008b69-543f-4e9e-add6-_3.vb)]\"\n  syntax:\n    content: public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Array\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n    - id: ArrayIsDynamic\n      type: System.Boolean\n      description: Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.\n    - id: StringIsFixedLength\n      type: System.Boolean\n      description: Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.FileSystem.FilePut*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>RecordNumber</code> &lt; 1 and not equal to -1.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)\n  id: FilePutObject(System.Int32,System.Object,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FilePutObject(Int32,Object,Int64)\n  nameWithType: FileSystem.FilePutObject(Int32,Object,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePutObject(Int32,Object,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data from a variable to a disk file.  The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FilePutObject\" name=\"FilePutObject\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.  \\n  \\n `FilePutObject` writes and reads descriptors that describe the object. If you intend to write out the `Variant` type, `FilePutObject` is required. When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.  \\n  \\n `FilePutObject` is valid only in `Random` and `Binary` mode.  \\n  \\n Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.  \\n  \\n The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).  \\n  \\n The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length. `FilePutObject` does not write the length descriptor when the argument is `True`. If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.  \\n  \\n## Random Mode  \\n For files opened in `Random` mode, the following rules apply:  \\n  \\n-   If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.  \\n  \\n-   If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable. For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(`3`)` (`Integer`) and four bytes that contain the data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.  \\n  \\n-   If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(`8`)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.  \\n  \\n-   If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).  \\n  \\n## Binary Mode  \\n For files opened in `Binary` mode, all the `Random` mode rules apply, except:  \\n  \\n-   The `RecordLength` clause in the `FileOpen` function has no effect. `FilePutObject` writes all variables to disk contiguously, that is, without padding between records.\"\n  example:\n  - \"This example uses the `FilePutObject` function to write a string to a file.  \\n  \\n [!code-vb[VbVbalrCatRef#54](~/add/codesnippet/visualbasic/69f8d8bb-169c-4dec-b805-_1.vb)]\"\n  syntax:\n    content: public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Object\n      description: Required. Valid variable name that contains data written to disk.\n    - id: RecordNumber\n      type: System.Int64\n      description: Optional. Record number (<xref uid=\"langword_csharp_Random\" name=\"Random\" href=\"\"></xref> mode files) or byte number (<xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode files) at which writing starts.\n  overload: Microsoft.VisualBasic.FileSystem.FilePutObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)\n  id: FileWidth(System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FileWidth(Int32,Int32)\n  nameWithType: FileSystem.FileWidth(Int32,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.FileWidth(Int32,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Assigns an output line width to a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function.\n  remarks: ''\n  example:\n  - \"This example uses the `FileWidth` function to set the output line width for a file.  \\n  \\n [!code-vb[VbVbalrCatRef#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._187_1.vb)]\"\n  syntax:\n    content: public static void FileWidth (int FileNumber, int RecordWidth);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: RecordWidth\n      type: System.Int32\n      description: Required. Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started. If `RecordWidth` equals 0, there is no limit to the length of a line. The default value for `RecordWidth` is 0.\n  overload: Microsoft.VisualBasic.FileSystem.FileWidth*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.FreeFile\n  id: FreeFile\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: FreeFile()\n  nameWithType: FileSystem.FreeFile()\n  fullName: Microsoft.VisualBasic.FileSystem.FreeFile()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value that represents the next file number available for use by the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function.\n  remarks: Use `FreeFile` to supply a file number that is not already being used.\n  example:\n  - \"This example uses the `FreeFile` function to return the next available file number. Five files are opened for output within the loop, and some sample data is written to each.  \\n  \\n [!code-vb[VbVbalrCatRef#55](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._104_1.vb)]\"\n  syntax:\n    content: public static int FreeFile ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value that represents the next file number available for use by the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function.\n  overload: Microsoft.VisualBasic.FileSystem.FreeFile*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: More than 255 files are in use.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.GetAttr(System.String)\n  id: GetAttr(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: GetAttr(String)\n  nameWithType: FileSystem.GetAttr(String)\n  fullName: Microsoft.VisualBasic.FileSystem.GetAttr(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"></xref> value that represents the attributes of a file, directory, or folder. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_FileAttribute\" name=\"FileAttribute\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want. If the result is not zero, that attribute is set for the named file. For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:  \\n  \\n```vb#  \\nResult = GetAttr(FName) And vbArchive  \\n```  \\n  \\n A nonzero value is returned if the `Archive` attribute is set.\"\n  example:\n  - \"This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.  \\n  \\n [!code-vb[VbVbalrCatRef#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._13_1.vb)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);\n    parameters:\n    - id: PathName\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file, directory, or folder name. `PathName` can include the directory or folder, and the drive.\n    return:\n      type: Microsoft.VisualBasic.FileAttribute\n      description: \"The value returned by <xref uid=\\\"langword_csharp_GetAttr\\\" name=\\\"GetAttr\\\" href=\\\"\\\"></xref> is the sum of the following enumeration values:  \\n  \\n <table><tbody><tr><td> Value  \\n  \\n </td><td> Constant  \\n  \\n  Description  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_Normal\\\" name=\\\"Normal\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbNormal\\\" name=\\\"vbNormal\\\" href=\\\"\\\"></xref> Normal.  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_ReadOnly\\\" name=\\\"ReadOnly\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbReadOnly\\\" name=\\\"vbReadOnly\\\" href=\\\"\\\"></xref> Read-only.  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_Hidden\\\" name=\\\"Hidden\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbHidden\\\" name=\\\"vbHidden\\\" href=\\\"\\\"></xref> Hidden.  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_System\\\" name=\\\"System\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbSystem\\\" name=\\\"vbSystem\\\" href=\\\"\\\"></xref> System file.  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_Directory\\\" name=\\\"Directory\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbDirectory\\\" name=\\\"vbDirectory\\\" href=\\\"\\\"></xref> Directory or folder.  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_Archive\\\" name=\\\"Archive\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbArchive\\\" name=\\\"vbArchive\\\" href=\\\"\\\"></xref> File has changed since last backup.  \\n  \\n </td></tr><tr><td><xref uid=\\\"langword_csharp_Alias\\\" name=\\\"Alias\\\" href=\\\"\\\"></xref></td><td><xref uid=\\\"langword_csharp_vbAlias\\\" name=\\\"vbAlias\\\" href=\\\"\\\"></xref> File has a different name.  \\n  \\n </td></tr></tbody></table><div class=\\\"alert NOTE\\\">  \\n These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  \\n  \\n</div>\"\n  overload: Microsoft.VisualBasic.FileSystem.GetAttr*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <code>Pathname</code> is invalid or contains wildcards.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: Target file does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)\n  id: Input(System.Int32,System.Boolean@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Boolean)\n  nameWithType: FileSystem.Input(Int32,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._237_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref bool Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Boolean\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)\n  id: Input(System.Int32,System.Byte@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Byte)\n  nameWithType: FileSystem.Input(Int32,Byte)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Byte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._73_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref byte Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Byte\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)\n  id: Input(System.Int32,System.Char@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Char)\n  nameWithType: FileSystem.Input(Int32,Char)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._91_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref char Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Char\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)\n  id: Input(System.Int32,System.DateTime@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,DateTime)\n  nameWithType: FileSystem.Input(Int32,DateTime)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._169_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref DateTime Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.DateTime\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)\n  id: Input(System.Int32,System.Decimal@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Decimal)\n  nameWithType: FileSystem.Input(Int32,Decimal)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Decimal)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._46_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref decimal Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Decimal\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)\n  id: Input(System.Int32,System.Double@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Double)\n  nameWithType: FileSystem.Input(Int32,Double)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._204_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref double Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Double\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)\n  id: Input(System.Int32,System.Int16@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Int16)\n  nameWithType: FileSystem.Input(Int32,Int16)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._81_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref short Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int16\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)\n  id: Input(System.Int32,System.Int32@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Int32)\n  nameWithType: FileSystem.Input(Int32,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._207_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref int Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int32\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)\n  id: Input(System.Int32,System.Int64@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Int64)\n  nameWithType: FileSystem.Input(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._31_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref long Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Int64\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)\n  id: Input(System.Int32,System.Object@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Object)\n  nameWithType: FileSystem.Input(Int32,Object)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._244_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref object Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Object\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)\n  id: Input(System.Int32,System.Single@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,Single)\n  nameWithType: FileSystem.Input(Int32,Single)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Single)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._115_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref float Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.Single\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)\n  id: Input(System.Int32,System.String@)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Input(Int32,String)\n  nameWithType: FileSystem.Input(Int32,String)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads data from an open sequential file and assigns the data to variables.\n  remarks: \"The `Input` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `Input` is usually written to a file by using `Write`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  \\n  \\n When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  \\n  \\n|||  \\n|-|-|  \\n|Data|Value assigned to variable|  \\n|Delimiting comma or blank line|Empty|  \\n|#NULL#|`DBNull`|  \\n|#TRUE# or #FALSE#|`True` or `False`|  \\n|#`yyyy-mm-dd hh:mm:ss`#|The date and/or time represented by the expression|  \\n|#ERROR `errornumber`#|`errornumber` (variable is an object tagged as an error)|  \\n  \\n If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  \\n  \\n> [!NOTE]\\n>  The `Input` function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.\"\n  example:\n  - \"This example uses the `Input` function to read data from a file into two variables. This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: (\\\"Hello\\\", 234).  \\n  \\n [!code-vb[VbVbalrCatRef#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._140_1.vb)]\"\n  syntax:\n    content: public static void Input (int FileNumber, ref string Value);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Value\n      type: System.String\n      description: Required. Variable that is assigned the values read from the file—cannot be an array or object variable.\n  overload: Microsoft.VisualBasic.FileSystem.Input*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)\n  id: InputString(System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: InputString(Int32,Int32)\n  nameWithType: FileSystem.InputString(Int32,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.InputString(Int32,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> value that contains characters from a file opened in <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> or <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `InputString` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`. Use this function only with files opened in `Input` or `Binary` mode.  \\n  \\n Unlike the `Input` function, the `InputString` function returns all the characters it reads. This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.  \\n  \\n With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error. Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.  \\n  \\n> [!NOTE]\\n>  When reading from files, do not make security decisions about the contents of the file based on the file name extension. For example, a file named Form1.vb may not be a Visual Basic source file.\"\n  example:\n  - \"This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window. This example assumes that `MyFile` is a text file that has several lines of sample data.  \\n  \\n [!code-vb[VbVbalrCatRef#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._220_1.vb)]\"\n  syntax:\n    content: public static string InputString (int FileNumber, int CharCount);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: CharCount\n      type: System.Int32\n      description: Required. Any valid numeric expression specifying the number of characters to read.\n    return:\n      type: System.String\n      description: Returns <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> value that contains characters from a file opened in <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref> or <xref uid=\"langword_csharp_Binary\" name=\"Binary\" href=\"\"></xref> mode. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_InputString\" name=\"InputString\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.FileSystem.InputString*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <code>FileNumber</code> does not exist.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>CharCount</code> &lt; 0 or &gt; 214.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Kill(System.String)\n  id: Kill(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Kill(String)\n  nameWithType: FileSystem.Kill(String)\n  fullName: Microsoft.VisualBasic.FileSystem.Kill(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Deletes files from a disk. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Kill\" name=\"Kill\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref> .\n  remarks: \"`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.  \\n  \\n **Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code. For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)\"\n  example:\n  - \"This example uses the `Kill` function to delete a file from a disk.  \\n  \\n [!code-vb[VbVbalrCatRef#60](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._250_1.vb)]\"\n  syntax:\n    content: public static void Kill (string PathName);\n    parameters:\n    - id: PathName\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies one or more file names to be deleted. `PathName` can include the directory or folder, and the drive.\n  overload: Microsoft.VisualBasic.FileSystem.Kill*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Target file(s) open.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: Target file(s) not found.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Permission denied.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)\n  id: LineInput(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: LineInput(Int32)\n  nameWithType: FileSystem.LineInput(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.LineInput(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Reads a single line from an open sequential file and assigns it to a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> variable.\n  remarks: \"The `LineInput` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Data read with `LineInput` is usually written to a file by using `Print`.  \\n  \\n> [!IMPORTANT]\\n>  When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  \\n  \\n The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(`13`)`) or carriage return/line feed (`Chr(`13`)` + `Chr(`10`)`) sequence. Carriage return/line feed sequences are skipped instead of appended to the character string.  \\n  \\n> [!IMPORTANT]\\n>  Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.\"\n  example:\n  - \"This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable. This example assumes that `TestFile` is a text file that has several lines of sample data.  \\n  \\n [!code-vb[VbVbalrCatRef#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._158_1.vb)]\"\n  syntax:\n    content: public static string LineInput (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    return:\n      type: System.String\n      description: Reads a single line from an open sequential file and assigns it to a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> variable.\n  overload: Microsoft.VisualBasic.FileSystem.LineInput*\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: End of file reached.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <code>FileNumber</code> does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Loc(System.Int32)\n  id: Loc(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Loc(Int32)\n  nameWithType: FileSystem.Loc(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Loc(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the current read/write position in an open file.\n  remarks: \"The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.  \\n  \\n The `Loc` function is provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The following describes the return value for each file access mode:  \\n  \\n|||  \\n|-|-|  \\n|Mode|Return value|  \\n|`Random`|Number of the last record read from or written to the file.|  \\n|`Sequential`|Current byte position in the file divided by 128. However, information returned by `Loc` for sequential files is neither used nor required.|  \\n|`Binary`|Position of the last byte read or written.|\"\n  example:\n  - \"This example uses the `Loc` function to return the current read/write position in an open file. This example assumes that `MyFile` is a text file that has several lines of sample data.  \\n  \\n [!code-vb[VbVbalrCatRef#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._178_1.vb)]\"\n  syntax:\n    content: public static long Loc (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> file number.\n    return:\n      type: System.Int64\n      description: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> value that specifies the current read/write position in an open file.\n  overload: Microsoft.VisualBasic.FileSystem.Loc*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Lock(System.Int32)\n  id: Lock(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Lock(Int32)\n  nameWithType: FileSystem.Lock(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Lock(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.  \\n  \\n `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.  \\n  \\n If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.  \\n  \\n If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.\"\n  example:\n  - \"This example illustrates the use of the `Lock` and `Unlock` functions. This example assumes that `People.txt` is a file that contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._243_1.vb)]\"\n  syntax:\n    content: public static void Lock (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n  overload: Microsoft.VisualBasic.FileSystem.Lock*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)\n  id: Lock(System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Lock(Int32,Int64)\n  nameWithType: FileSystem.Lock(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Lock(Int32,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.  \\n  \\n `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.  \\n  \\n If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.  \\n  \\n If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.\"\n  example:\n  - \"This example illustrates the use of the `Lock` and `Unlock` functions. This example assumes that `People.txt` is a file that contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._38_1.vb)]\"\n  syntax:\n    content: public static void Lock (int FileNumber, long Record);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Record\n      type: System.Int64\n      description: Optional. Number of the only record or byte to lock or unlock\n  overload: Microsoft.VisualBasic.FileSystem.Lock*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)\n  id: Lock(System.Int32,System.Int64,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Lock(Int32,Int64,Int64)\n  nameWithType: FileSystem.Lock(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Lock(Int32,Int64,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.  \\n  \\n `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.  \\n  \\n If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.  \\n  \\n If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.\"\n  example:\n  - \"This example illustrates the use of the `Lock` and `Unlock` functions. This example assumes that `People.txt` is a file that contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._116_1.vb)]\"\n  syntax:\n    content: public static void Lock (int FileNumber, long FromRecord, long ToRecord);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: FromRecord\n      type: System.Int64\n      description: Optional. Number of the first record or byte to lock or unlock.\n    - id: ToRecord\n      type: System.Int64\n      description: Optional. Number of the last record or byte to lock or unlock.\n  overload: Microsoft.VisualBasic.FileSystem.Lock*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.LOF(System.Int32)\n  id: LOF(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: LOF(Int32)\n  nameWithType: FileSystem.LOF(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.LOF(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> representing the size, in bytes, of a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: Use the `FileLen` function to obtain the length of a file that is not open.\n  example:\n  - \"This example uses the `LOF` function to determine the size of an open file. This example assumes that `TestFile` is a text file that contains sample data.  \\n  \\n [!code-vb[VbVbalrCatRef#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._83_1.vb)]\"\n  syntax:\n    content: public static long LOF (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number.\n    return:\n      type: System.Int64\n      description: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> representing the size, in bytes, of a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_LOF\" name=\"LOF\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.FileSystem.LOF*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.MkDir(System.String)\n  id: MkDir(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: MkDir(String)\n  nameWithType: FileSystem.MkDir(String)\n  fullName: Microsoft.VisualBasic.FileSystem.MkDir(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Creates a new directory. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory*>.\n  remarks: This function creates a new directory.\n  example:\n  - \"This example uses the `MkDir` function to create a directory. If the drive is not specified, the new directory is created on the current drive.  \\n  \\n [!code-vb[VbVbalrCatRef#38](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._246_1.vb)]\"\n  syntax:\n    content: public static void MkDir (string Path);\n    parameters:\n    - id: Path\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies the directory to be created. The `Path` may include the drive. If no drive is specified, <xref uid=\"langword_csharp_MkDir\" name=\"MkDir\" href=\"\"></xref> creates the new directory on the current drive.\n  overload: Microsoft.VisualBasic.FileSystem.MkDir*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Path</code> is not specified or is empty.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Permission denied.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Directory already exists.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])\n  id: Print(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Print(Int32,Object[])\n  nameWithType: FileSystem.Print(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.Print(Int32,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes display-formatted data to a sequential file.\n  remarks: \"The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n `Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.  \\n  \\n Data written with `Print` is usually read from a file by using `LineInput` or `Input`.  \\n  \\n If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output. Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.  \\n  \\n For `Boolean` data, either `True` or `False` is printed. The `True` and `False` keywords are not translated, regardless of the locale.  \\n  \\n Date data is written to the file by using the standard short date format recognized by your system. When either the date or the time component is missing or zero, only the part provided is written to the file.  \\n  \\n Nothing is written to the file if `Output` data is empty. However, if `Output` list data is `DBNull`, `Null` is written to the file.  \\n  \\n For `Error` data, the output appears as `Error errorcode`. The `Error` keyword is not translated regardless of the locale.  \\n  \\n All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator. If the user wishes to output data for use by multiple locales, `Write` should be used.  \\n  \\n Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .\"\n  example:\n  - \"This example uses the `Print` and `PrintLine` functions to write data to a file.  \\n  \\n [!code-vb[VbVbalrCatRef#53](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._146_1.vb)]\"\n  syntax:\n    content: public static void Print (int FileNumber, object[] Output);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Output\n      type: System.Object[]\n      description: \"Optional. Zero or more comma-delimited expressions to write to a file.  \\n  \\n The `Output` argument settings are:  \\n  \\n <xref uid=\\\"langword_csharp_T:System.IO.IOException\\\" name=\\\"T:System.IO.IOException\\\" href=\\\"\\\"></xref>: File mode is invalid.  \\n  \\n <xref uid=\\\"langword_csharp_T:System.IO.IOException\\\" name=\\\"T:System.IO.IOException\\\" href=\\\"\\\"></xref>: `FileNumber` does not exist.\"\n  overload: Microsoft.VisualBasic.FileSystem.Print*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])\n  id: PrintLine(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: PrintLine(Int32,Object[])\n  nameWithType: FileSystem.PrintLine(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.PrintLine(Int32,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes display-formatted data to a sequential file.\n  remarks: \"The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n `Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.  \\n  \\n Data written with `Print` is usually read from a file by using `LineInput` or `Input`.  \\n  \\n If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output. Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.  \\n  \\n For `Boolean` data, either `True` or `False` is printed. The `True` and `False` keywords are not translated, regardless of the locale.  \\n  \\n Date data is written to the file by using the standard short date format recognized by the system. When either the date or the time component is missing or zero, only the part provided is written to the file.  \\n  \\n Nothing is written to the file if `Output` data is empty. However, if `Output` list data is `DBNull`, `Null` is written to the file.  \\n  \\n For `Error` data, the output appears as `Error errorcode`. The `Error` keyword is not translated regardless of the locale.  \\n  \\n All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator. If the user wishes to output data for use by multiple locales, `Write` should be used.  \\n  \\n Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .\"\n  example:\n  - \"This example uses the `Print` and `PrintLine` functions to write data to a file.  \\n  \\n [!code-vb[VbVbalrCatRef#53](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._245_1.vb)]\"\n  syntax:\n    content: public static void PrintLine (int FileNumber, object[] Output);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Output\n      type: System.Object[]\n      description: \"Optional. Zero or more comma-delimited expressions to write to a file.  \\n  \\n The `Output` argument settings are:  \\n  \\n <xref uid=\\\"langword_csharp_T:System.IO.IOException\\\" name=\\\"T:System.IO.IOException\\\" href=\\\"\\\"></xref>: File mode is invalid.  \\n  \\n <xref uid=\\\"langword_csharp_T:System.IO.IOException\\\" name=\\\"T:System.IO.IOException\\\" href=\\\"\\\"></xref>: `FileNumber` does not exist.\"\n  overload: Microsoft.VisualBasic.FileSystem.PrintLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)\n  id: Rename(System.String,System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Rename(String,String)\n  nameWithType: FileSystem.Rename(String,String)\n  fullName: Microsoft.VisualBasic.FileSystem.Rename(String,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Renames a disk file or directory. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Rename\" name=\"Rename\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The`Rename` function renames a file and moves it to a different directory, if it is required. The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive. `Rename` cannot create a new file or directory.  \\n  \\n Using the `Rename` function on an open file produces an error. You must close an open file before renaming it. `Rename` arguments cannot include multiple-character (*) and single-character (?) wildcards.  \\n  \\n> [!IMPORTANT]\\n>  When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights. Check to make sure that you are not introducing a possible security risk.\"\n  example:\n  - \"This example uses the `Rename` function to rename a file. For purposes of this example, assume that the directories that are specified already exist.  \\n  \\n [!code-vb[VbVbalrCatRef#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._97_1.vb)]\"\n  syntax:\n    content: public static void Rename (string OldPath, string NewPath);\n    parameters:\n    - id: OldPath\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the existing file name and location. `OldPath` may include the directory, and drive, of the file.\n    - id: NewPath\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies the new file name and location. `NewPath` may include directory and drive of the destination location. The file name specified by `NewPath` cannot already exist.\n  overload: Microsoft.VisualBasic.FileSystem.Rename*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Path is invalid.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>OldPath</code> file does not exist.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Cannot rename to different device.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Reset\n  id: Reset\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: FileSystem.Reset()\n  fullName: Microsoft.VisualBasic.FileSystem.Reset()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Closes all disk files opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Reset\" name=\"Reset\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.\n  example:\n  - \"This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk. Note the use of the `Object` variable `FileNumber` as both a string and a number.  \\n  \\n [!code-vb[VbVbalrCatRef#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._117_1.vb)]\"\n  syntax:\n    content: public static void Reset ();\n    parameters: []\n  overload: Microsoft.VisualBasic.FileSystem.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.RmDir(System.String)\n  id: RmDir(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: RmDir(String)\n  nameWithType: FileSystem.RmDir(String)\n  fullName: Microsoft.VisualBasic.FileSystem.RmDir(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Removes an existing directory. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"></xref>. For more information, see <xref:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*>.\n  remarks: An error occurs if you try to use `RmDir` on a directory that contains files. Use the `Kill` function to delete all files before you try to remove a directory.\n  example:\n  - \"This example uses the `RmDir` function to remove an existing directory.  \\n  \\n [!code-vb[VbVbalrCatRef#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._20_1.vb)]\"\n  syntax:\n    content: public static void RmDir (string Path);\n    parameters:\n    - id: Path\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that identifies the directory or folder to be removed. `Path` can include the drive. If no drive is specified, <xref uid=\"langword_csharp_RmDir\" name=\"RmDir\" href=\"\"></xref> removes the directory on the current drive.\n  overload: Microsoft.VisualBasic.FileSystem.RmDir*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Path</code> is not specified or is empty.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Target directory contains files.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: Directory does not exist.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Seek(System.Int32)\n  id: Seek(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Seek(Int32)\n  nameWithType: FileSystem.Seek(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Seek(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.  \\n  \\n The following describes the return values for each file access mode:  \\n  \\n|||  \\n|-|-|  \\n|Mode|Return Value|  \\n|`Random`|Number of the next record read or written|  \\n|`Binary`, `Input`, `Output`, `Append`|Byte position at which the next operation occurs. The first byte in a file is at position 1, the second byte is at position 2, and so on.|\"\n  example:\n  - \"This example uses the `Seek` function to return the current file position. The example assumes `TestFile` is a file that contains records of the structure `Record`.  \\n  \\n [!code-vb[VbVbalrCatRef#47](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._100_1.vb)]  \\n  \\n For files opened in `Random` mode, `Seek` returns the number of next record.  \\n  \\n [!code-vb[VbVbalrCatRef#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._100_2.vb)]  \\n  \\n For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs. Assume `TestFile` is a file that contains several lines of text.  \\n  \\n [!code-vb[VbVbalrCatRef#49](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._100_3.vb)]  \\n  \\n This example uses the `Seek` function to set the position for the next read or write in a file.  \\n  \\n For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs. Assume `TestFile` is a file that contains several lines of text.  \\n  \\n [!code-vb[VbVbalrCatRef#52](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._100_4.vb)]\"\n  syntax:\n    content: public static long Seek (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number.\n    return:\n      type: System.Int64\n      description: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function.\n  overload: Microsoft.VisualBasic.FileSystem.Seek*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)\n  id: Seek(System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Seek(Int32,Int64)\n  nameWithType: FileSystem.Seek(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Seek(Int32,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref> specifying the current read/write position in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function, or sets the position for the next read/write operation in a file opened by using the <xref uid=\"langword_csharp_FileOpen\" name=\"FileOpen\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.  \\n  \\n The following describes the return values for each file access mode:  \\n  \\n|||  \\n|-|-|  \\n|Mode|Return Value|  \\n|`Random`|Number of the next record read or written|  \\n|`Binary`, `Input`, `Output`, `Append`|Byte position at which the next operation occurs. The first byte in a file is at position 1, the second byte is at position 2, and so on.|\"\n  example:\n  - \"This example uses the `Seek` function to return the current file position. The example assumes `TestFile` is a file that contains records of the structure `Record`.  \\n  \\n [!code-vb[VbVbalrCatRef#47](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._51_1.vb)]  \\n  \\n For files opened in `Random` mode, `Seek` returns the number of next record.  \\n  \\n [!code-vb[VbVbalrCatRef#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._51_2.vb)]  \\n  \\n For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs. Assume `TestFile` is a file that contains several lines of text.  \\n  \\n [!code-vb[VbVbalrCatRef#49](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._51_3.vb)]  \\n  \\n This example uses the `Seek` function to set the position for the next read or write in a file.  \\n  \\n For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs. Assume `TestFile` is a file that contains several lines of text.  \\n  \\n [!code-vb[VbVbalrCatRef#52](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._51_4.vb)]\"\n  syntax:\n    content: public static void Seek (int FileNumber, long Position);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> that contains a valid file number.\n    - id: Position\n      type: System.Int64\n      description: Required. Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.\n  overload: Microsoft.VisualBasic.FileSystem.Seek*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)\n  id: SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: SetAttr(String,FileAttribute)\n  nameWithType: FileSystem.SetAttr(String,FileAttribute)\n  fullName: Microsoft.VisualBasic.FileSystem.SetAttr(String,FileAttribute)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Sets attribute information for a file. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_SetAttr\" name=\"SetAttr\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"A run-time error occurs if you try to set the attributes of an open file.  \\n  \\n The `Attributes` argument enumeration values are as follows:  \\n  \\n||||  \\n|-|-|-|  \\n|Value|Constant|Description|  \\n|`Normal`|`vbNormal`|Normal (default).|  \\n|`ReadOnly`|`vbReadOnly`|Read-only.|  \\n|`Hidden`|`vbHidden`|Hidden.|  \\n|`System`|`vbSystem`|System file.|  \\n|`Volume`|`vbVolume`|Volume label|  \\n|`Directory`|`vbDirectory`|Directory or folder.|  \\n|`Archive`|`vbArchive`|File has changed since last backup.|  \\n|`Alias`|`vbAlias`|File has a different name.|  \\n  \\n> [!NOTE]\\n>  These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code instead of the actual values.\"\n  example:\n  - \"This example uses the `SetAttr` function to set attributes for a file.  \\n  \\n [!code-vb[VbVbalrCatRef#14](~/add/codesnippet/visualbasic/7c37826d-7b37-4e2d-b69a-_1.vb)]\"\n  syntax:\n    content: public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);\n    parameters:\n    - id: PathName\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression that specifies a file name. `PathName` can include directory or folder, and drive.\n    - id: Attributes\n      type: Microsoft.VisualBasic.FileAttribute\n      description: Required. Constant or numeric expression, whose sum specifies file attributes.\n  overload: Microsoft.VisualBasic.FileSystem.SetAttr*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Attribute</code> type is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.SPC(System.Int16)\n  id: SPC(System.Int16)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: SPC(Int16)\n  nameWithType: FileSystem.SPC(Int16)\n  fullName: Microsoft.VisualBasic.FileSystem.SPC(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> function to position output.\n  remarks: \"If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed. If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:  \\n  \\n `currentprintposition`(+(`Count``Mod``width`))  \\n  \\n For example, if the current print position is 24, the output line width is 80, and you specify `SPC(`90`)`, the next print will start at position 34 (current print position + the remainder of 90/80). If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).  \\n  \\n> [!NOTE]\\n>  Make sure your tabular columns are wide enough to allow for wide letters.\"\n  example:\n  - \"This example uses the `SPC` function to position output in a file and in the **Output** window.  \\n  \\n [!code-vb[VbVbalrCatRef#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._222_1.vb)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.SpcInfo SPC (short Count);\n    parameters:\n    - id: Count\n      type: System.Int16\n      description: Required. The number of spaces to insert before displaying or printing the next expression in a list.\n    return:\n      type: Microsoft.VisualBasic.SpcInfo\n      description: Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> function to position output.\n  overload: Microsoft.VisualBasic.FileSystem.SPC*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.TAB\n  id: TAB\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: TAB()\n  nameWithType: FileSystem.TAB()\n  fullName: Microsoft.VisualBasic.FileSystem.TAB()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output.\n  remarks: \"If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line. If `Column` is less than 1, `TAB` moves the print position to column 1. If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:  \\n  \\n Column Mod width  \\n  \\n For example, if *width* is 80 and you specify `TAB(`90`)`, the next print will start at column 10 (the remainder of 90/80). If `Column` is less than the current print position, printing starts on the next line at the calculated print position. If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.  \\n  \\n The leftmost print position on an output line is always 1. When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.  \\n  \\n The `TAB` function can also be used with the `WriteLine` function. It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  Make sure your tabular columns are wide enough to contain wide letters.\"\n  example:\n  - \"This example uses the `TAB` function to position output in a file and in the **Output** window.  \\n  \\n [!code-vb[VbVbalrCatRef#37](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._165_1.vb)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.TabInfo TAB ();\n    parameters: []\n    return:\n      type: Microsoft.VisualBasic.TabInfo\n      description: Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output.\n  overload: Microsoft.VisualBasic.FileSystem.TAB*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.TAB(System.Int16)\n  id: TAB(System.Int16)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: TAB(Int16)\n  nameWithType: FileSystem.TAB(Int16)\n  fullName: Microsoft.VisualBasic.FileSystem.TAB(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output.\n  remarks: \"If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line. If `Column` is less than 1, `TAB` moves the print position to column 1. If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:  \\n  \\n Column Mod width  \\n  \\n For example, if *width* is 80 and you specify `TAB(`90`)`, the next print will start at column 10 (the remainder of 90/80). If `Column` is less than the current print position, printing starts on the next line at the calculated print position. If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.  \\n  \\n The leftmost print position on an output line is always 1. When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.  \\n  \\n The `TAB` function can also be used with the `WriteLine` function. It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  Make sure your tabular columns are wide enough to contain wide letters.\"\n  example:\n  - \"This example uses the `TAB` function to position output in a file and in the **Output** window.  \\n  \\n [!code-vb[VbVbalrCatRef#37](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._125_1.vb)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.TabInfo TAB (short Column);\n    parameters:\n    - id: Column\n      type: System.Int16\n      description: Optional. The column number moved to before displaying or printing the next expression in a list. If omitted, <xref uid=\"langword_csharp_TAB\" name=\"TAB\" href=\"\"></xref> moves the insertion point to the start of the next print zone.\n    return:\n      type: Microsoft.VisualBasic.TabInfo\n      description: Used with the <xref uid=\"langword_csharp_Print\" name=\"Print\" href=\"\"></xref> or <xref uid=\"langword_csharp_PrintLine\" name=\"PrintLine\" href=\"\"></xref> functions to position output.\n  overload: Microsoft.VisualBasic.FileSystem.TAB*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)\n  id: Unlock(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Unlock(Int32)\n  nameWithType: FileSystem.Unlock(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Unlock(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.  \\n  \\n `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.  \\n  \\n If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.  \\n  \\n If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.\"\n  example:\n  - \"This example illustrates the use of the `Lock` and `Unlock` functions. This example assumes that `People.txt` is a file that contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._26_1.vb)]\"\n  syntax:\n    content: public static void Unlock (int FileNumber);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n  overload: Microsoft.VisualBasic.FileSystem.Unlock*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)\n  id: Unlock(System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Unlock(Int32,Int64)\n  nameWithType: FileSystem.Unlock(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Unlock(Int32,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.  \\n  \\n `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.  \\n  \\n If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.  \\n  \\n If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.\"\n  example:\n  - \"This example illustrates the use of the `Lock` and `Unlock` functions. This example assumes that `People.txt` is a file that contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._210_1.vb)]\"\n  syntax:\n    content: public static void Unlock (int FileNumber, long Record);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: Record\n      type: System.Int64\n      description: Optional. Number of the only record or byte to lock or unlock\n  overload: Microsoft.VisualBasic.FileSystem.Unlock*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)\n  id: Unlock(System.Int32,System.Int64,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Unlock(Int32,Int64,Int64)\n  nameWithType: FileSystem.Unlock(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Unlock(Int32,Int64,Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Controls access by other processes to all or part of a file opened by using the <xref uid=\"langword_csharp_Open\" name=\"Open\" href=\"\"></xref> function. The <xref uid=\"langword_csharp_My\" name=\"My\" href=\"\"></xref> feature gives you better productivity and performance in file I/O operations than <xref uid=\"langword_csharp_Lock\" name=\"Lock\" href=\"\"></xref> and <xref uid=\"langword_csharp_Unlock\" name=\"Unlock\" href=\"\"></xref>. For more information, see <xref href=\"Microsoft.VisualBasic.FileIO.FileSystem\"></xref>.\n  remarks: \"The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.  \\n  \\n `Lock` and `Unlock` functions are always used in pairs. The arguments to `Lock` and `Unlock` must be identical.  \\n  \\n If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file. If `Record` alone is specified the single record will be locked/unlocked.  \\n  \\n If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.\"\n  example:\n  - \"This example illustrates the use of the `Lock` and `Unlock` functions. This example assumes that `People.txt` is a file that contains records of the structure `Person`.  \\n  \\n [!code-vb[VbVbalrCatRef#13](~/add/codesnippet/visualbasic/93b8910d-5e06-4d09-8b8b-_1.vb)]\"\n  syntax:\n    content: public static void Unlock (int FileNumber, long FromRecord, long ToRecord);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. Any valid file number.\n    - id: FromRecord\n      type: System.Int64\n      description: Optional. Number of the first record or byte to lock or unlock.\n    - id: ToRecord\n      type: System.Int64\n      description: Optional. Number of the last record or byte to lock or unlock.\n  overload: Microsoft.VisualBasic.FileSystem.Unlock*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])\n  id: Write(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: Write(Int32,Object[])\n  nameWithType: FileSystem.Write(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.Write(Int32,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data to a sequential file. Data written with <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref> is usually read from a file by using <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>.\n  remarks: \"The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If you omit `Output`, a blank line is printed to the file. Multiple expressions can be separated with a comma.  \\n  \\n Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file. You do not have to put explicit delimiters in the list. When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported. The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:  \\n  \\n-   Numeric data is always written using the period as the decimal separator.  \\n  \\n-   For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed. The `True` and `False` keywords are not translated, regardless of locale.  \\n  \\n-   Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the part provided is written to the file.  \\n  \\n-   Nothing is written to the file if `Output` data is empty. However, for null data, `#NULL#` is written.  \\n  \\n-   For `Error` data, the output appears as `#ERROR errorcode#`. The `Error` keyword is not translated, regardless of locale.  \\n  \\n `WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.  \\n  \\n You can embed quotation marks in a string by using double quotation marks, or \\\"\\\". For example,  \\n  \\n [!code-vb[VbVbalrCatRef#63](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._145_1.vb)]  \\n  \\n returns a string with the value of `Double quotation marks aren't \\\"difficult\\\" to handle`.  \\n  \\n Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .\"\n  example:\n  - \"This example uses the `Write` function to write raw data to a sequential file.  \\n  \\n [!code-vb[VbVbalrCatRef#64](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._145_2.vb)]\"\n  syntax:\n    content: public static void Write (int FileNumber, object[] Output);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression that contains any valid file number.\n    - id: Output\n      type: System.Object[]\n      description: Optional. One or more comma-delimited expressions to write to a file.\n  overload: Microsoft.VisualBasic.FileSystem.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: File mode is invalid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])\n  id: WriteLine(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  langs:\n  - csharp\n  name: WriteLine(Int32,Object[])\n  nameWithType: FileSystem.WriteLine(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.WriteLine(Int32,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Writes data to a sequential file. Data written with <xref uid=\"langword_csharp_Write\" name=\"Write\" href=\"\"></xref> is usually read from a file by using <xref uid=\"langword_csharp_Input\" name=\"Input\" href=\"\"></xref>.\n  remarks: \"The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance. For non-legacy applications, the `My.Computer.FileSystem` object provides better performance. For more information, see [File Access with Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If you omit `Output`, a blank line is printed to the file. Multiple expressions can be separated with a comma.  \\n  \\n Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file. You do not have to put explicit delimiters in the list. When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported. The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:  \\n  \\n-   Numeric data is always written using the period as the decimal separator.  \\n  \\n-   For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed. The `True` and `False` keywords are not translated, regardless of locale.  \\n  \\n-   Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the part provided is written to the file.  \\n  \\n-   Nothing is written to the file if `Output` data is empty. However, for null data, `#NULL#` is written.  \\n  \\n-   For `Error` data, the output appears as `#ERROR errorcode#`. The `Error` keyword is not translated, regardless of locale.  \\n  \\n `WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.  \\n  \\n You can embed quotation marks in a string by using double quotation marks, or \\\"\\\". For example,  \\n  \\n [!code-vb[VbVbalrCatRef#63](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._172_1.vb)]  \\n  \\n returns a string with the value of `Double quotation marks aren't \\\"difficult\\\" to handle`.  \\n  \\n Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration. For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .\"\n  example:\n  - \"This example uses the `Write` function to write raw data to a sequential file.  \\n  \\n [!code-vb[VbVbalrCatRef#64](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._172_2.vb)]\"\n  syntax:\n    content: public static void WriteLine (int FileNumber, object[] Output);\n    parameters:\n    - id: FileNumber\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression that contains any valid file number.\n    - id: Output\n      type: System.Object[]\n      description: Optional. One or more comma-delimited expressions to write to a file.\n  overload: Microsoft.VisualBasic.FileSystem.WriteLine*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.IO.EndOfStreamException\n  isExternal: true\n  name: System.IO.EndOfStreamException\n- uid: Microsoft.VisualBasic.FileSystem.ChDir(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: ChDir(String)\n  nameWithType: FileSystem.ChDir(String)\n  fullName: Microsoft.VisualBasic.FileSystem.ChDir(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: ChDrive(Char)\n  nameWithType: FileSystem.ChDrive(Char)\n  fullName: Microsoft.VisualBasic.FileSystem.ChDrive(Char)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: Microsoft.VisualBasic.FileSystem.ChDrive(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: ChDrive(String)\n  nameWithType: FileSystem.ChDrive(String)\n  fullName: Microsoft.VisualBasic.FileSystem.ChDrive(String)\n- uid: Microsoft.VisualBasic.FileSystem.CurDir\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: CurDir()\n  nameWithType: FileSystem.CurDir()\n  fullName: Microsoft.VisualBasic.FileSystem.CurDir()\n- uid: Microsoft.VisualBasic.FileSystem.CurDir(System.Char)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: CurDir(Char)\n  nameWithType: FileSystem.CurDir(Char)\n  fullName: Microsoft.VisualBasic.FileSystem.CurDir(Char)\n- uid: Microsoft.VisualBasic.FileSystem.Dir\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Dir()\n  nameWithType: FileSystem.Dir()\n  fullName: Microsoft.VisualBasic.FileSystem.Dir()\n- uid: Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Dir(String,FileAttribute)\n  nameWithType: FileSystem.Dir(String,FileAttribute)\n  fullName: Microsoft.VisualBasic.FileSystem.Dir(String,FileAttribute)\n- uid: Microsoft.VisualBasic.FileAttribute\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: FileAttribute\n  nameWithType: FileAttribute\n  fullName: Microsoft.VisualBasic.FileAttribute\n- uid: Microsoft.VisualBasic.FileSystem.EOF(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: EOF(Int32)\n  nameWithType: FileSystem.EOF(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.EOF(Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileAttr(Int32)\n  nameWithType: FileSystem.FileAttr(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.FileAttr(Int32)\n- uid: Microsoft.VisualBasic.OpenMode\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: OpenMode\n  nameWithType: OpenMode\n  fullName: Microsoft.VisualBasic.OpenMode\n- uid: Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileClose(Int32[])\n  nameWithType: FileSystem.FileClose(Int32[])\n  fullName: Microsoft.VisualBasic.FileSystem.FileClose(Int32[])\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileCopy(String,String)\n  nameWithType: FileSystem.FileCopy(String,String)\n  fullName: Microsoft.VisualBasic.FileSystem.FileCopy(String,String)\n- uid: Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileDateTime(String)\n  nameWithType: FileSystem.FileDateTime(String)\n  fullName: Microsoft.VisualBasic.FileSystem.FileDateTime(String)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Boolean,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Boolean,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Boolean,Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Byte,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Byte,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Byte,Int64)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Char,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Char,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Char,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,DateTime,Int64)\n  nameWithType: FileSystem.FileGet(Int32,DateTime,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,DateTime,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Decimal,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Decimal,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Decimal,Int64)\n- uid: System.Decimal\n  parent: System\n  isExternal: true\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Double,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Double,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Double,Int64)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Int16,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Int16,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Int16,Int64)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Int32,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Int32,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Int64,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Int64,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Single,Int64)\n  nameWithType: FileSystem.FileGet(Int32,Single,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Single,Int64)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,ValueType,Int64)\n  nameWithType: FileSystem.FileGet(Int32,ValueType,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,ValueType,Int64)\n- uid: System.ValueType\n  parent: System\n  isExternal: true\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,String,Int64,Boolean)\n  nameWithType: FileSystem.FileGet(Int32,String,Int64,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,String,Int64,Boolean)\n- uid: Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet(Int32,Array,Int64,Boolean,Boolean)\n  nameWithType: FileSystem.FileGet(Int32,Array,Int64,Boolean,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGet(Int32,Array,Int64,Boolean,Boolean)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGetObject(Int32,Object,Int64)\n  nameWithType: FileSystem.FileGetObject(Int32,Object,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FileGetObject(Int32,Object,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FileLen(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileLen(String)\n  nameWithType: FileSystem.FileLen(String)\n  fullName: Microsoft.VisualBasic.FileSystem.FileLen(String)\n- uid: Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)\n  nameWithType: FileSystem.FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)\n- uid: Microsoft.VisualBasic.OpenAccess\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: OpenAccess\n  nameWithType: OpenAccess\n  fullName: Microsoft.VisualBasic.OpenAccess\n- uid: Microsoft.VisualBasic.OpenShare\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: OpenShare\n  nameWithType: OpenShare\n  fullName: Microsoft.VisualBasic.OpenShare\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Boolean,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Boolean,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Boolean,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Byte,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Byte,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Byte,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Char,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Char,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Char,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,DateTime,Int64)\n  nameWithType: FileSystem.FilePut(Int32,DateTime,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,DateTime,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Decimal,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Decimal,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Decimal,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Double,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Double,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Double,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Int16,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Int16,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Int16,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Int32,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Int32,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Int64,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Int64,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Single,Int64)\n  nameWithType: FileSystem.FilePut(Int32,Single,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Single,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,ValueType,Int64)\n  nameWithType: FileSystem.FilePut(Int32,ValueType,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,ValueType,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Object,Object,Object)\n  nameWithType: FileSystem.FilePut(Object,Object,Object)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Object,Object,Object)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,String,Int64,Boolean)\n  nameWithType: FileSystem.FilePut(Int32,String,Int64,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,String,Int64,Boolean)\n- uid: Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut(Int32,Array,Int64,Boolean,Boolean)\n  nameWithType: FileSystem.FilePut(Int32,Array,Int64,Boolean,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePut(Int32,Array,Int64,Boolean,Boolean)\n- uid: Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePutObject(Int32,Object,Int64)\n  nameWithType: FileSystem.FilePutObject(Int32,Object,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.FilePutObject(Int32,Object,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileWidth(Int32,Int32)\n  nameWithType: FileSystem.FileWidth(Int32,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.FileWidth(Int32,Int32)\n- uid: Microsoft.VisualBasic.FileSystem.FreeFile\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FreeFile()\n  nameWithType: FileSystem.FreeFile()\n  fullName: Microsoft.VisualBasic.FileSystem.FreeFile()\n- uid: Microsoft.VisualBasic.FileSystem.GetAttr(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: GetAttr(String)\n  nameWithType: FileSystem.GetAttr(String)\n  fullName: Microsoft.VisualBasic.FileSystem.GetAttr(String)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Boolean)\n  nameWithType: FileSystem.Input(Int32,Boolean)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Boolean)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Byte)\n  nameWithType: FileSystem.Input(Int32,Byte)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Byte)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Char)\n  nameWithType: FileSystem.Input(Int32,Char)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Char)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,DateTime)\n  nameWithType: FileSystem.Input(Int32,DateTime)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,DateTime)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Decimal)\n  nameWithType: FileSystem.Input(Int32,Decimal)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Decimal)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Double)\n  nameWithType: FileSystem.Input(Int32,Double)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Double)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Int16)\n  nameWithType: FileSystem.Input(Int32,Int16)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Int16)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Int32)\n  nameWithType: FileSystem.Input(Int32,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Int64)\n  nameWithType: FileSystem.Input(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Object)\n  nameWithType: FileSystem.Input(Int32,Object)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Object)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,Single)\n  nameWithType: FileSystem.Input(Int32,Single)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,Single)\n- uid: Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input(Int32,String)\n  nameWithType: FileSystem.Input(Int32,String)\n  fullName: Microsoft.VisualBasic.FileSystem.Input(Int32,String)\n- uid: Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: InputString(Int32,Int32)\n  nameWithType: FileSystem.InputString(Int32,Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.InputString(Int32,Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Kill(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Kill(String)\n  nameWithType: FileSystem.Kill(String)\n  fullName: Microsoft.VisualBasic.FileSystem.Kill(String)\n- uid: Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: LineInput(Int32)\n  nameWithType: FileSystem.LineInput(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.LineInput(Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Loc(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Loc(Int32)\n  nameWithType: FileSystem.Loc(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Loc(Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Lock(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Lock(Int32)\n  nameWithType: FileSystem.Lock(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Lock(Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Lock(Int32,Int64)\n  nameWithType: FileSystem.Lock(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Lock(Int32,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Lock(Int32,Int64,Int64)\n  nameWithType: FileSystem.Lock(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Lock(Int32,Int64,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.LOF(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: LOF(Int32)\n  nameWithType: FileSystem.LOF(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.LOF(Int32)\n- uid: Microsoft.VisualBasic.FileSystem.MkDir(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: MkDir(String)\n  nameWithType: FileSystem.MkDir(String)\n  fullName: Microsoft.VisualBasic.FileSystem.MkDir(String)\n- uid: Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Print(Int32,Object[])\n  nameWithType: FileSystem.Print(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.Print(Int32,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: PrintLine(Int32,Object[])\n  nameWithType: FileSystem.PrintLine(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.PrintLine(Int32,Object[])\n- uid: Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Rename(String,String)\n  nameWithType: FileSystem.Rename(String,String)\n  fullName: Microsoft.VisualBasic.FileSystem.Rename(String,String)\n- uid: Microsoft.VisualBasic.FileSystem.Reset\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Reset()\n  nameWithType: FileSystem.Reset()\n  fullName: Microsoft.VisualBasic.FileSystem.Reset()\n- uid: Microsoft.VisualBasic.FileSystem.RmDir(System.String)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: RmDir(String)\n  nameWithType: FileSystem.RmDir(String)\n  fullName: Microsoft.VisualBasic.FileSystem.RmDir(String)\n- uid: Microsoft.VisualBasic.FileSystem.Seek(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Seek(Int32)\n  nameWithType: FileSystem.Seek(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Seek(Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Seek(Int32,Int64)\n  nameWithType: FileSystem.Seek(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Seek(Int32,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: SetAttr(String,FileAttribute)\n  nameWithType: FileSystem.SetAttr(String,FileAttribute)\n  fullName: Microsoft.VisualBasic.FileSystem.SetAttr(String,FileAttribute)\n- uid: Microsoft.VisualBasic.FileSystem.SPC(System.Int16)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: SPC(Int16)\n  nameWithType: FileSystem.SPC(Int16)\n  fullName: Microsoft.VisualBasic.FileSystem.SPC(Int16)\n- uid: Microsoft.VisualBasic.SpcInfo\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: SpcInfo\n  nameWithType: SpcInfo\n  fullName: Microsoft.VisualBasic.SpcInfo\n- uid: Microsoft.VisualBasic.FileSystem.TAB\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: TAB()\n  nameWithType: FileSystem.TAB()\n  fullName: Microsoft.VisualBasic.FileSystem.TAB()\n- uid: Microsoft.VisualBasic.TabInfo\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: TabInfo\n  nameWithType: TabInfo\n  fullName: Microsoft.VisualBasic.TabInfo\n- uid: Microsoft.VisualBasic.FileSystem.TAB(System.Int16)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: TAB(Int16)\n  nameWithType: FileSystem.TAB(Int16)\n  fullName: Microsoft.VisualBasic.FileSystem.TAB(Int16)\n- uid: Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Unlock(Int32)\n  nameWithType: FileSystem.Unlock(Int32)\n  fullName: Microsoft.VisualBasic.FileSystem.Unlock(Int32)\n- uid: Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Unlock(Int32,Int64)\n  nameWithType: FileSystem.Unlock(Int32,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Unlock(Int32,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Unlock(Int32,Int64,Int64)\n  nameWithType: FileSystem.Unlock(Int32,Int64,Int64)\n  fullName: Microsoft.VisualBasic.FileSystem.Unlock(Int32,Int64,Int64)\n- uid: Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Write(Int32,Object[])\n  nameWithType: FileSystem.Write(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.Write(Int32,Object[])\n- uid: Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: WriteLine(Int32,Object[])\n  nameWithType: FileSystem.WriteLine(Int32,Object[])\n  fullName: Microsoft.VisualBasic.FileSystem.WriteLine(Int32,Object[])\n- uid: Microsoft.VisualBasic.FileSystem.ChDir*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: ChDir\n  nameWithType: FileSystem.ChDir\n- uid: Microsoft.VisualBasic.FileSystem.ChDrive*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: ChDrive\n  nameWithType: FileSystem.ChDrive\n- uid: Microsoft.VisualBasic.FileSystem.CurDir*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: CurDir\n  nameWithType: FileSystem.CurDir\n- uid: Microsoft.VisualBasic.FileSystem.Dir*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Dir\n  nameWithType: FileSystem.Dir\n- uid: Microsoft.VisualBasic.FileSystem.EOF*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: EOF\n  nameWithType: FileSystem.EOF\n- uid: Microsoft.VisualBasic.FileSystem.FileAttr*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileAttr\n  nameWithType: FileSystem.FileAttr\n- uid: Microsoft.VisualBasic.FileSystem.FileClose*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileClose\n  nameWithType: FileSystem.FileClose\n- uid: Microsoft.VisualBasic.FileSystem.FileCopy*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileCopy\n  nameWithType: FileSystem.FileCopy\n- uid: Microsoft.VisualBasic.FileSystem.FileDateTime*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileDateTime\n  nameWithType: FileSystem.FileDateTime\n- uid: Microsoft.VisualBasic.FileSystem.FileGet*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGet\n  nameWithType: FileSystem.FileGet\n- uid: Microsoft.VisualBasic.FileSystem.FileGetObject*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileGetObject\n  nameWithType: FileSystem.FileGetObject\n- uid: Microsoft.VisualBasic.FileSystem.FileLen*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileLen\n  nameWithType: FileSystem.FileLen\n- uid: Microsoft.VisualBasic.FileSystem.FileOpen*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileOpen\n  nameWithType: FileSystem.FileOpen\n- uid: Microsoft.VisualBasic.FileSystem.FilePut*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePut\n  nameWithType: FileSystem.FilePut\n- uid: Microsoft.VisualBasic.FileSystem.FilePutObject*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FilePutObject\n  nameWithType: FileSystem.FilePutObject\n- uid: Microsoft.VisualBasic.FileSystem.FileWidth*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FileWidth\n  nameWithType: FileSystem.FileWidth\n- uid: Microsoft.VisualBasic.FileSystem.FreeFile*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: FreeFile\n  nameWithType: FileSystem.FreeFile\n- uid: Microsoft.VisualBasic.FileSystem.GetAttr*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: GetAttr\n  nameWithType: FileSystem.GetAttr\n- uid: Microsoft.VisualBasic.FileSystem.Input*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Input\n  nameWithType: FileSystem.Input\n- uid: Microsoft.VisualBasic.FileSystem.InputString*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: InputString\n  nameWithType: FileSystem.InputString\n- uid: Microsoft.VisualBasic.FileSystem.Kill*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Kill\n  nameWithType: FileSystem.Kill\n- uid: Microsoft.VisualBasic.FileSystem.LineInput*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: LineInput\n  nameWithType: FileSystem.LineInput\n- uid: Microsoft.VisualBasic.FileSystem.Loc*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Loc\n  nameWithType: FileSystem.Loc\n- uid: Microsoft.VisualBasic.FileSystem.Lock*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Lock\n  nameWithType: FileSystem.Lock\n- uid: Microsoft.VisualBasic.FileSystem.LOF*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: LOF\n  nameWithType: FileSystem.LOF\n- uid: Microsoft.VisualBasic.FileSystem.MkDir*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: MkDir\n  nameWithType: FileSystem.MkDir\n- uid: Microsoft.VisualBasic.FileSystem.Print*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Print\n  nameWithType: FileSystem.Print\n- uid: Microsoft.VisualBasic.FileSystem.PrintLine*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: PrintLine\n  nameWithType: FileSystem.PrintLine\n- uid: Microsoft.VisualBasic.FileSystem.Rename*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Rename\n  nameWithType: FileSystem.Rename\n- uid: Microsoft.VisualBasic.FileSystem.Reset*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Reset\n  nameWithType: FileSystem.Reset\n- uid: Microsoft.VisualBasic.FileSystem.RmDir*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: RmDir\n  nameWithType: FileSystem.RmDir\n- uid: Microsoft.VisualBasic.FileSystem.Seek*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Seek\n  nameWithType: FileSystem.Seek\n- uid: Microsoft.VisualBasic.FileSystem.SetAttr*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: SetAttr\n  nameWithType: FileSystem.SetAttr\n- uid: Microsoft.VisualBasic.FileSystem.SPC*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: SPC\n  nameWithType: FileSystem.SPC\n- uid: Microsoft.VisualBasic.FileSystem.TAB*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: TAB\n  nameWithType: FileSystem.TAB\n- uid: Microsoft.VisualBasic.FileSystem.Unlock*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Unlock\n  nameWithType: FileSystem.Unlock\n- uid: Microsoft.VisualBasic.FileSystem.Write*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: Write\n  nameWithType: FileSystem.Write\n- uid: Microsoft.VisualBasic.FileSystem.WriteLine*\n  parent: Microsoft.VisualBasic.FileSystem\n  isExternal: false\n  name: WriteLine\n  nameWithType: FileSystem.WriteLine\n"}