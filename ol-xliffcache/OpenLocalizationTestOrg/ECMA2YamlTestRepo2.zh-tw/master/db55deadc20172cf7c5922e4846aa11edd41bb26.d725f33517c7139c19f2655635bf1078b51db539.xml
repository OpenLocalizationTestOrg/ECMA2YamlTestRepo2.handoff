{"nodes":[{"pos":[1015,1057],"content":"Represents evaluated design-time metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents evaluated design-time metadata.","pos":[0,42]}]},{"pos":[1070,1347],"content":"Never used to represent built-in metadata, like %(Filename). The metadata is always associated with project source code.       The metadata is contained by either by a <xref:Microsoft.Build.Evaluation.ProjectItemDefinition> or a <xref:Microsoft.Build.Evaluation.ProjectItem>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Never used to represent built-in metadata, like %(Filename). The metadata is always associated with project source code.       The metadata is contained by either by a <xref:Microsoft.Build.Evaluation.ProjectItemDefinition> or a <xref:Microsoft.Build.Evaluation.ProjectItem>.","pos":[0,275],"nodes":[{"content":"Never used to represent built-in metadata, like %(Filename).","pos":[0,60]},{"content":"The metadata is always associated with project source code.","pos":[61,120]},{"content":"The metadata is contained by either by a &lt;xref:Microsoft.Build.Evaluation.ProjectItemDefinition&gt; or a &lt;xref:Microsoft.Build.Evaluation.ProjectItem&gt;.","pos":[127,275],"source":"       The metadata is contained by either by a <xref:Microsoft.Build.Evaluation.ProjectItemDefinition> or a <xref:Microsoft.Build.Evaluation.ProjectItem>."}]}]},{"pos":[2127,2163],"content":"Location of the Condition attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"Location of the Condition attribute.","pos":[0,36]}]},{"pos":[2354,2391],"content":"Returns Condition attribute location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns Condition attribute location.","pos":[0,37]}]},{"pos":[2907,2941],"content":"Gets the evaluated metadata value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the evaluated metadata value.","pos":[0,34]}]},{"pos":[2954,3016],"content":"Cannot be set directly: only the unevaluated value can be set.","needQuote":false,"needEscape":true,"nodes":[{"content":"Cannot be set directly: only the unevaluated value can be set.","pos":[0,62]}]},{"pos":[3136,3194],"content":"Returns the evaluated metadata value, which is never null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the evaluated metadata value, which is never null.","pos":[0,58]}]},{"pos":[3687,3747],"content":"Determines if the metadata originated from an imported file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines if the metadata originated from an imported file.","pos":[0,60]}]},{"pos":[3861,3940],"content":"Returns true if the metadata originated from an imported file; false otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns true if the metadata originated from an imported file; false otherwise.","pos":[0,79]}]},{"pos":[4419,4480],"content":"Gets the item type of the containing item definition or item.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the item type of the containing item definition or item.","pos":[0,61]}]},{"pos":[4593,4657],"content":"Returns the item type of the containing item definition or item.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the item type of the containing item definition or item.","pos":[0,64]}]},{"pos":[5134,5158],"content":"Location of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Location of the element.","pos":[0,24]}]},{"pos":[5340,5369],"content":"Returns the element location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the element location.","pos":[0,29]}]},{"pos":[5826,5856],"content":"Gets the name of the metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the metadata.","pos":[0,30]}]},{"pos":[5965,5998],"content":"Returns the name of the metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the name of the metadata.","pos":[0,33]}]},{"pos":[6486,6598],"content":"Gets the last metadata (from an item definition or item) that was overridden by this metadata during evaluation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the last metadata (from an item definition or item) that was overridden by this metadata during evaluation.","pos":[0,112]}]},{"pos":[6611,7118],"content":"This method searches for all metadata with the same name that lie above in the logical project file, and which are contained by item definitions of the same item type, and whose conditions evaluate to true. If the metadata is contained by an item, this method searches for any previous metadata with the same name and item whose condition evaluated to true. Item definitions are searched before items.       If the project has not been reevaluated since the last modification, this value may be incorrect.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method searches for all metadata with the same name that lie above in the logical project file, and which are contained by item definitions of the same item type, and whose conditions evaluate to true. If the metadata is contained by an item, this method searches for any previous metadata with the same name and item whose condition evaluated to true. Item definitions are searched before items.       If the project has not been reevaluated since the last modification, this value may be incorrect.","pos":[0,505],"nodes":[{"content":"This method searches for all metadata with the same name that lie above in the logical project file, and which are contained by item definitions of the same item type, and whose conditions evaluate to true.","pos":[0,206]},{"content":"If the metadata is contained by an item, this method searches for any previous metadata with the same name and item whose condition evaluated to true.","pos":[207,357]},{"content":"Item definitions are searched before items.","pos":[358,401]},{"content":"If the project has not been reevaluated since the last modification, this value may be incorrect.","pos":[408,505]}]}]},{"pos":[7300,7476],"content":"Returns the last metadata (from an item definition or item) whose value was overridden by this metadata during evaluation. Returns null if the metadata has not been overridden.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the last metadata (from an item definition or item) whose value was overridden by this metadata during evaluation. Returns null if the metadata has not been overridden.","pos":[0,176],"nodes":[{"content":"Returns the last metadata (from an item definition or item) whose value was overridden by this metadata during evaluation.","pos":[0,122]},{"content":"Returns null if the metadata has not been overridden.","pos":[123,176]}]}]},{"pos":[7951,7996],"content":"Gets the project that contains this metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the project that contains this metadata.","pos":[0,45]}]},{"pos":[8157,8226],"content":"Returns the project that contains this metadata, which is never null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the project that contains this metadata, which is never null.","pos":[0,69]}]},{"pos":[9210,9222],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9281,9293],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9870,9914],"content":"Gets or sets the unevaluated metadata value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the unevaluated metadata value.","pos":[0,44]}]},{"pos":[9927,11171],"content":"The setter method updates both the unevaluated value and the evaluated value, but does not affect anything else in the project until reevaluation.       For example, --if a piece of metadata named \"m\" is modified on item of type \"i\", it does not affect \"j\" which is evaluated from \"@(j->'%(m)')\" until reevaluation. --if the unevaluated value of \"m\" is set to something that is modified by evaluation, such as \"$(p)\", the evaluated value will be set to \"$(p)\" until reevaluation.       Setting metadata through a <xref:Microsoft.Build.Evaluation.ProjectItem> may cause the associated <xref:Microsoft.Build.Construction.ProjectItemElement> to be split, if the item element originated from an item list, wildcard, or semicolon expression. because it implies an intention to only affect that particular item.       Setting metadata through ProjectMetadata does not cause any splitting, because it implies an intention to affect all items using the underlying <xref:Microsoft.Build.Construction.ProjectMetadataElement>.       The containing project is marked as modified. Unevaluated values are assumed to contain escaped character sequences as needed.       This method may not leave the project in a self consistent state.","needQuote":false,"needEscape":true,"nodes":[{"content":"The setter method updates both the unevaluated value and the evaluated value, but does not affect anything else in the project until reevaluation.       For example, --if a piece of metadata named \"m\" is modified on item of type \"i\", it does not affect \"j\" which is evaluated from \"@(j->'%(m)')\" until reevaluation. --if the unevaluated value of \"m\" is set to something that is modified by evaluation, such as \"$(p)\", the evaluated value will be set to \"$(p)\" until reevaluation.       Setting metadata through a <xref:Microsoft.Build.Evaluation.ProjectItem> may cause the associated <xref:Microsoft.Build.Construction.ProjectItemElement> to be split, if the item element originated from an item list, wildcard, or semicolon expression. because it implies an intention to only affect that particular item.       Setting metadata through ProjectMetadata does not cause any splitting, because it implies an intention to affect all items using the underlying <xref:Microsoft.Build.Construction.ProjectMetadataElement>.       The containing project is marked as modified. Unevaluated values are assumed to contain escaped character sequences as needed.       This method may not leave the project in a self consistent state.","pos":[0,1220],"nodes":[{"content":"The setter method updates both the unevaluated value and the evaluated value, but does not affect anything else in the project until reevaluation.","pos":[0,146]},{"content":"For example, --if a piece of metadata named \"m\" is modified on item of type \"i\", it does not affect \"j\" which is evaluated from \"@(j-&gt;'%(m)')\" until reevaluation.","pos":[153,315],"source":"       For example, --if a piece of metadata named \"m\" is modified on item of type \"i\", it does not affect \"j\" which is evaluated from \"@(j->'%(m)')\" until reevaluation."},{"content":"--if the unevaluated value of \"m\" is set to something that is modified by evaluation, such as \"$(p)\", the evaluated value will be set to \"$(p)\" until reevaluation.","pos":[316,479]},{"content":"Setting metadata through a &lt;xref:Microsoft.Build.Evaluation.ProjectItem&gt; may cause the associated &lt;xref:Microsoft.Build.Construction.ProjectItemElement&gt; to be split, if the item element originated from an item list, wildcard, or semicolon expression.","pos":[486,736],"source":"       Setting metadata through a <xref:Microsoft.Build.Evaluation.ProjectItem> may cause the associated <xref:Microsoft.Build.Construction.ProjectItemElement> to be split, if the item element originated from an item list, wildcard, or semicolon expression."},{"content":"because it implies an intention to only affect that particular item.","pos":[737,805]},{"content":"Setting metadata through ProjectMetadata does not cause any splitting, because it implies an intention to affect all items using the underlying &lt;xref:Microsoft.Build.Construction.ProjectMetadataElement&gt;.","pos":[812,1015],"source":"       Setting metadata through ProjectMetadata does not cause any splitting, because it implies an intention to affect all items using the underlying <xref:Microsoft.Build.Construction.ProjectMetadataElement>."},{"content":"The containing project is marked as modified.","pos":[1022,1067]},{"content":"Unevaluated values are assumed to contain escaped character sequences as needed.","pos":[1068,1148]},{"content":"This method may not leave the project in a self consistent state.","pos":[1155,1220]}]}]},{"pos":[11298,11337],"content":"Returns the unevaluated metadata value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the unevaluated metadata value.","pos":[0,39]}]},{"pos":[11797,11842],"content":"Gets the associated project metadata element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the associated project metadata element.","pos":[0,45]}]},{"pos":[12033,12106],"content":"Returns the associated project metadata element, which can never be null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the associated project metadata element, which can never be null.","pos":[0,73]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Evaluation.ProjectMetadata\n  id: ProjectMetadata\n  children:\n  - Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation\n  - Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue\n  - Microsoft.Build.Evaluation.ProjectMetadata.IsImported\n  - Microsoft.Build.Evaluation.ProjectMetadata.ItemType\n  - Microsoft.Build.Evaluation.ProjectMetadata.Location\n  - Microsoft.Build.Evaluation.ProjectMetadata.Name\n  - Microsoft.Build.Evaluation.ProjectMetadata.Predecessor\n  - Microsoft.Build.Evaluation.ProjectMetadata.Project\n  - Microsoft.Build.Evaluation.ProjectMetadata.System#IEquatable{Microsoft#Build#Evaluation#ProjectMetadata}#Equals(Microsoft.Build.Evaluation.ProjectMetadata)\n  - Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue\n  - Microsoft.Build.Evaluation.ProjectMetadata.Xml\n  langs:\n  - csharp\n  name: ProjectMetadata\n  nameWithType: ProjectMetadata\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata\n  type: Class\n  summary: Represents evaluated design-time metadata.\n  remarks: \"Never used to represent built-in metadata, like %(Filename). The metadata is always associated with project source code.  \\n  \\n The metadata is contained by either by a <xref:Microsoft.Build.Evaluation.ProjectItemDefinition> or a <xref:Microsoft.Build.Evaluation.ProjectItem>.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"{Name}={EvaluatedValue} [{xml.Value}]\")]\n\n      public class ProjectMetadata : IEquatable<Microsoft.Build.Evaluation.ProjectMetadata>\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable<Microsoft.Build.Evaluation.ProjectMetadata>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation\n  id: ConditionLocation\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: ConditionLocation\n  nameWithType: ProjectMetadata.ConditionLocation\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Location of the Condition attribute.\n  syntax:\n    content: public Microsoft.Build.Construction.ElementLocation ConditionLocation { get; }\n    return:\n      type: Microsoft.Build.Construction.ElementLocation\n      description: Returns Condition attribute location.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue\n  id: EvaluatedValue\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: EvaluatedValue\n  nameWithType: ProjectMetadata.EvaluatedValue\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets the evaluated metadata value.\n  remarks: 'Cannot be set directly: only the unevaluated value can be set.'\n  syntax:\n    content: public string EvaluatedValue { get; }\n    return:\n      type: System.String\n      description: Returns the evaluated metadata value, which is never null.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.IsImported\n  id: IsImported\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: IsImported\n  nameWithType: ProjectMetadata.IsImported\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.IsImported\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Determines if the metadata originated from an imported file.\n  syntax:\n    content: public bool IsImported { get; }\n    return:\n      type: System.Boolean\n      description: Returns true if the metadata originated from an imported file; false otherwise.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.IsImported*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.ItemType\n  id: ItemType\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: ItemType\n  nameWithType: ProjectMetadata.ItemType\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.ItemType\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets the item type of the containing item definition or item.\n  syntax:\n    content: public string ItemType { get; }\n    return:\n      type: System.String\n      description: Returns the item type of the containing item definition or item.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.ItemType*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Location\n  id: Location\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: Location\n  nameWithType: ProjectMetadata.Location\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Location\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Location of the element.\n  syntax:\n    content: public Microsoft.Build.Construction.ElementLocation Location { get; }\n    return:\n      type: Microsoft.Build.Construction.ElementLocation\n      description: Returns the element location.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.Location*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Name\n  id: Name\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: Name\n  nameWithType: ProjectMetadata.Name\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Name\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets the name of the metadata.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: Returns the name of the metadata.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Predecessor\n  id: Predecessor\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: Predecessor\n  nameWithType: ProjectMetadata.Predecessor\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Predecessor\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets the last metadata (from an item definition or item) that was overridden by this metadata during evaluation.\n  remarks: \"This method searches for all metadata with the same name that lie above in the logical project file, and which are contained by item definitions of the same item type, and whose conditions evaluate to true. If the metadata is contained by an item, this method searches for any previous metadata with the same name and item whose condition evaluated to true. Item definitions are searched before items.  \\n  \\n If the project has not been reevaluated since the last modification, this value may be incorrect.\"\n  syntax:\n    content: public Microsoft.Build.Evaluation.ProjectMetadata Predecessor { get; }\n    return:\n      type: Microsoft.Build.Evaluation.ProjectMetadata\n      description: Returns the last metadata (from an item definition or item) whose value was overridden by this metadata during evaluation. Returns null if the metadata has not been overridden.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.Predecessor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Project\n  id: Project\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: Project\n  nameWithType: ProjectMetadata.Project\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Project\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets the project that contains this metadata.\n  syntax:\n    content: public Microsoft.Build.Evaluation.Project Project { get; }\n    return:\n      type: Microsoft.Build.Evaluation.Project\n      description: Returns the project that contains this metadata, which is never null.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.Project*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.System#IEquatable{Microsoft#Build#Evaluation#ProjectMetadata}#Equals(Microsoft.Build.Evaluation.ProjectMetadata)\n  id: System#IEquatable{Microsoft#Build#Evaluation#ProjectMetadata}#Equals(Microsoft.Build.Evaluation.ProjectMetadata)\n  isEii: true\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: System.IEquatable(ProjectMetadata)\n  nameWithType: ProjectMetadata.System.IEquatable(ProjectMetadata)\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.System.IEquatable(ProjectMetadata)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  syntax:\n    content: bool IEquatable<ProjectMetadata>.Equals (Microsoft.Build.Evaluation.ProjectMetadata other);\n    parameters:\n    - id: other\n      type: Microsoft.Build.Evaluation.ProjectMetadata\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.System#IEquatable<Microsoft#Build#Evaluation#ProjectMetadata>#Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue\n  id: UnevaluatedValue\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: UnevaluatedValue\n  nameWithType: ProjectMetadata.UnevaluatedValue\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets or sets the unevaluated metadata value.\n  remarks: \"The setter method updates both the unevaluated value and the evaluated value, but does not affect anything else in the project until reevaluation.  \\n  \\n For example, --if a piece of metadata named \\\"m\\\" is modified on item of type \\\"i\\\", it does not affect \\\"j\\\" which is evaluated from \\\"@(j->'%(m)')\\\" until reevaluation. --if the unevaluated value of \\\"m\\\" is set to something that is modified by evaluation, such as \\\"$(p)\\\", the evaluated value will be set to \\\"$(p)\\\" until reevaluation.  \\n  \\n Setting metadata through a <xref:Microsoft.Build.Evaluation.ProjectItem> may cause the associated <xref:Microsoft.Build.Construction.ProjectItemElement> to be split, if the item element originated from an item list, wildcard, or semicolon expression. because it implies an intention to only affect that particular item.  \\n  \\n Setting metadata through ProjectMetadata does not cause any splitting, because it implies an intention to affect all items using the underlying <xref:Microsoft.Build.Construction.ProjectMetadataElement>.  \\n  \\n The containing project is marked as modified. Unevaluated values are assumed to contain escaped character sequences as needed.  \\n  \\n This method may not leave the project in a self consistent state.\"\n  syntax:\n    content: public string UnevaluatedValue { get; set; }\n    return:\n      type: System.String\n      description: Returns the unevaluated metadata value.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Xml\n  id: Xml\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  langs:\n  - csharp\n  name: Xml\n  nameWithType: ProjectMetadata.Xml\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Xml\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Evaluation\n  summary: Gets the associated project metadata element.\n  syntax:\n    content: public Microsoft.Build.Construction.ProjectMetadataElement Xml { get; }\n    return:\n      type: Microsoft.Build.Construction.ProjectMetadataElement\n      description: Returns the associated project metadata element, which can never be null.\n  overload: Microsoft.Build.Evaluation.ProjectMetadata.Xml*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: ConditionLocation\n  nameWithType: ProjectMetadata.ConditionLocation\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation\n- uid: Microsoft.Build.Construction.ElementLocation\n  parent: Microsoft.Build.Construction\n  isExternal: false\n  name: ElementLocation\n  nameWithType: ElementLocation\n  fullName: Microsoft.Build.Construction.ElementLocation\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: EvaluatedValue\n  nameWithType: ProjectMetadata.EvaluatedValue\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.IsImported\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: IsImported\n  nameWithType: ProjectMetadata.IsImported\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.IsImported\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.ItemType\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: ItemType\n  nameWithType: ProjectMetadata.ItemType\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.ItemType\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Location\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Location\n  nameWithType: ProjectMetadata.Location\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Location\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Name\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Name\n  nameWithType: ProjectMetadata.Name\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Name\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Predecessor\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Predecessor\n  nameWithType: ProjectMetadata.Predecessor\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Predecessor\n- uid: Microsoft.Build.Evaluation.ProjectMetadata\n  parent: Microsoft.Build.Evaluation\n  isExternal: false\n  name: ProjectMetadata\n  nameWithType: ProjectMetadata\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Project\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Project\n  nameWithType: ProjectMetadata.Project\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Project\n- uid: Microsoft.Build.Evaluation.Project\n  parent: Microsoft.Build.Evaluation\n  isExternal: false\n  name: Project\n  nameWithType: Project\n  fullName: Microsoft.Build.Evaluation.Project\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.System#IEquatable{Microsoft#Build#Evaluation#ProjectMetadata}#Equals(Microsoft.Build.Evaluation.ProjectMetadata)\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: System.IEquatable(ProjectMetadata)\n  nameWithType: ProjectMetadata.System.IEquatable(ProjectMetadata)\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.System.IEquatable(ProjectMetadata)\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: UnevaluatedValue\n  nameWithType: ProjectMetadata.UnevaluatedValue\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Xml\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Xml\n  nameWithType: ProjectMetadata.Xml\n  fullName: Microsoft.Build.Evaluation.ProjectMetadata.Xml\n- uid: Microsoft.Build.Construction.ProjectMetadataElement\n  parent: Microsoft.Build.Construction\n  isExternal: false\n  name: ProjectMetadataElement\n  nameWithType: ProjectMetadataElement\n  fullName: Microsoft.Build.Construction.ProjectMetadataElement\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.ConditionLocation*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: ConditionLocation\n  nameWithType: ProjectMetadata.ConditionLocation\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.EvaluatedValue*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: EvaluatedValue\n  nameWithType: ProjectMetadata.EvaluatedValue\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.IsImported*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: IsImported\n  nameWithType: ProjectMetadata.IsImported\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.ItemType*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: ItemType\n  nameWithType: ProjectMetadata.ItemType\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Location*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Location\n  nameWithType: ProjectMetadata.Location\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Name*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Name\n  nameWithType: ProjectMetadata.Name\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Predecessor*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Predecessor\n  nameWithType: ProjectMetadata.Predecessor\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Project*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Project\n  nameWithType: ProjectMetadata.Project\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.System#IEquatable<Microsoft#Build#Evaluation#ProjectMetadata>#Equals*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: System.IEquatable<Microsoft.Build.Evaluation.ProjectMetadata>.Equals\n  nameWithType: ProjectMetadata.System.IEquatable<Microsoft.Build.Evaluation.ProjectMetadata>.Equals\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.UnevaluatedValue*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: UnevaluatedValue\n  nameWithType: ProjectMetadata.UnevaluatedValue\n- uid: Microsoft.Build.Evaluation.ProjectMetadata.Xml*\n  parent: Microsoft.Build.Evaluation.ProjectMetadata\n  isExternal: false\n  name: Xml\n  nameWithType: ProjectMetadata.Xml\n"}