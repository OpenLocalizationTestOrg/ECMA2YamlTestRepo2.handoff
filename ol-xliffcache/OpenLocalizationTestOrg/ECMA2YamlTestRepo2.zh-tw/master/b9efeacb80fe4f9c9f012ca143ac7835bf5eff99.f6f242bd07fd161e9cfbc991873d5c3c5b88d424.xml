{"nodes":[{"pos":[679,753],"content":"Provides a way to specify a custom LINQ query that is defined in a method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a way to specify a custom LINQ query that is defined in a method.","pos":[0,74]}]},{"pos":[766,2462],"content":"The <xref:System.Web.UI.WebControls.QueryExtender> control supports custom LINQ queries. You can define a custom LINQ query in a method and use the MethodExpression filter option to invoke the query in the <xref:System.Web.UI.WebControls.QueryExtender> control.       The method that contains the custom LINQ query must meet the following criteria:      -   The method must be static (`Shared` in Visual Basic). The first parameter must be an <xref:System.Linq.IQueryable%601> or <xref:System.Collections.Generic.IEnumerable%601> object. The method can have more than one parameter.      -   The return value cannot change the <xref:System.Linq.IQueryable%601> or <xref:System.Collections.Generic.IEnumerable%601> type that is queried.       The MethodExpression searches for the method that contains the query in the following order:      1.  If a <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> property is specified in the <xref:System.Web.UI.WebControls.QueryExtender> control, the MethodExpression object looks for the method in the specified type.      2.  If the data source implements <xref:System.Web.DynamicData.IDynamicDataSource>, the method looks for the method on the context type (<xref:System.Data.Linq.DataContext> or <xref:System.Data.Objects.ObjectContext> object.)      3.  The method looks for the method in a template control, in the base class for the page, or in a user control.       The MethodExpression class is like the <xref:System.Web.UI.WebControls.Expressions.CustomExpression> class except that the method expression is executed in response to a method call, and the custom expression is executed in response to an event.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control supports custom LINQ queries.","pos":[0,88],"source":"The <xref:System.Web.UI.WebControls.QueryExtender> control supports custom LINQ queries."},{"content":"You can define a custom LINQ query in a method and use the MethodExpression filter option to invoke the query in the &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control.","pos":[89,261],"source":" You can define a custom LINQ query in a method and use the MethodExpression filter option to invoke the query in the <xref:System.Web.UI.WebControls.QueryExtender> control."},{"content":"The method that contains the custom LINQ query must meet the following criteria:      -   The method must be static (<ph id=\"ph1\">`Shared`</ph> in Visual Basic).","pos":[268,411],"source":"       The method that contains the custom LINQ query must meet the following criteria:      -   The method must be static (`Shared` in Visual Basic)."},{"content":"The first parameter must be an &lt;xref:System.Linq.IQueryable%601&gt; or &lt;xref:System.Collections.Generic.IEnumerable%601&gt; object.","pos":[412,537],"source":" The first parameter must be an <xref:System.Linq.IQueryable%601> or <xref:System.Collections.Generic.IEnumerable%601> object."},{"content":"The method can have more than one parameter.","pos":[538,582]},{"content":"-   The return value cannot change the &lt;xref:System.Linq.IQueryable%601&gt; or &lt;xref:System.Collections.Generic.IEnumerable%601&gt; type that is queried.","pos":[588,735],"source":"      -   The return value cannot change the <xref:System.Linq.IQueryable%601> or <xref:System.Collections.Generic.IEnumerable%601> type that is queried."},{"content":"The MethodExpression searches for the method that contains the query in the following order:      1.","pos":[742,842]},{"content":"If a &lt;xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A&gt; property is specified in the &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control, the MethodExpression object looks for the method in the specified type.","pos":[844,1079],"source":"  If a <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> property is specified in the <xref:System.Web.UI.WebControls.QueryExtender> control, the MethodExpression object looks for the method in the specified type."},{"content":"2.","pos":[1085,1087]},{"content":"If the data source implements &lt;xref:System.Web.DynamicData.IDynamicDataSource&gt;, the method looks for the method on the context type (&lt;xref:System.Data.Linq.DataContext&gt; or &lt;xref:System.Data.Objects.ObjectContext&gt; object.)      3.","pos":[1089,1318],"source":"  If the data source implements <xref:System.Web.DynamicData.IDynamicDataSource>, the method looks for the method on the context type (<xref:System.Data.Linq.DataContext> or <xref:System.Data.Objects.ObjectContext> object.)      3."},{"content":"The method looks for the method in a template control, in the base class for the page, or in a user control.","pos":[1320,1428]},{"content":"The MethodExpression class is like the &lt;xref:System.Web.UI.WebControls.Expressions.CustomExpression&gt; class except that the method expression is executed in response to a method call, and the custom expression is executed in response to an event.","pos":[1435,1680],"source":"       The MethodExpression class is like the <xref:System.Web.UI.WebControls.Expressions.CustomExpression> class except that the method expression is executed in response to a method call, and the custom expression is executed in response to an event."}]},{"pos":[6468,6584],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Expressions.MethodExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.Expressions.MethodExpression\"></xref> class."},{"pos":[7296,7380],"content":"Resolves the expression by using the specified <xref:System.Linq.IQueryable> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves the expression by using the specified &lt;xref:System.Linq.IQueryable&gt; object.","pos":[0,84],"source":"Resolves the expression by using the specified <xref:System.Linq.IQueryable> object."}]},{"pos":[7576,7607],"content":"The data source control to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data source control to use.","pos":[0,31]}]},{"pos":[7674,7770],"content":"An instance of the <xref:System.Linq.IQueryable> object that was used to resolve the expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the &lt;xref:System.Linq.IQueryable&gt; object that was used to resolve the expression.","pos":[0,96],"source":"An instance of the <xref:System.Linq.IQueryable> object that was used to resolve the expression."}]},{"pos":[7968,8056],"content":"The data source control is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The data source control is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8168,8399],"content":"The method was not found.       -or-       The method is not static.       -or-       The type of the passed <xref uid=\"langword_csharp_IQuerable&lt;T&gt;\" name=\"IQuerable&lt;T&gt;\" href=\"\"></xref> object was changed.","needQuote":false,"needEscape":true,"nodes":[{"content":"The method was not found.","pos":[0,25]},{"content":"-or-       The method is not static.","pos":[32,68]},{"content":"-or-       The type of the passed <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IQuerable&amp;lt;T&amp;gt;\" name=\"IQuerable&amp;lt;T&amp;gt;\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object was changed.","pos":[75,217],"source":"       -or-       The type of the passed <xref uid=\"langword_csharp_IQuerable&lt;T&gt;\" name=\"IQuerable&lt;T&gt;\" href=\"\"></xref> object was changed."}]},{"pos":[8889,8966],"content":"Gets or sets a value that indicates whether the expression should be ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the expression should be ignored.","pos":[0,77]}]},{"pos":[8978,9344],"content":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object searches for a method that contains the query by looking in specific locations and searching in a specific order. You can set this property to `false` to throw an exception if the <xref:System.Web.UI.WebControls.Expressions.CustomExpression> object does not find a method that contains a LINQ.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.Expressions.MethodExpression&gt; object searches for a method that contains the query by looking in specific locations and searching in a specific order.","pos":[0,186],"source":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object searches for a method that contains the query by looking in specific locations and searching in a specific order."},{"content":"You can set this property to <ph id=\"ph1\">`false`</ph> to throw an exception if the &lt;xref:System.Web.UI.WebControls.Expressions.CustomExpression&gt; object does not find a method that contains a LINQ.","pos":[187,366],"source":" You can set this property to `false` to throw an exception if the <xref:System.Web.UI.WebControls.Expressions.CustomExpression> object does not find a method that contains a LINQ."}]},{"pos":[9469,9634],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the expression is ignored; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is ignored; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10195,10265],"content":"Gets or sets the name of the method that contains a custom LINQ query.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the method that contains a custom LINQ query.","pos":[0,70]}]},{"pos":[10277,10516],"content":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object enables you to call a custom LINQ query that is defined in a method. You specify the method in the <xref:System.Web.UI.WebControls.QueryExtender> control in the page.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object enables you to call a custom LINQ query that is defined in a method. You specify the method in the <xref:System.Web.UI.WebControls.QueryExtender> control in the page.","pos":[0,239],"nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.Expressions.MethodExpression&gt; object enables you to call a custom LINQ query that is defined in a method.","pos":[0,141],"source":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object enables you to call a custom LINQ query that is defined in a method."},{"content":"You specify the method in the &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control in the page.","pos":[142,239],"source":" You specify the method in the <xref:System.Web.UI.WebControls.QueryExtender> control in the page."}]}]},{"pos":[11102,11161],"content":"The name of the method that contains the custom LINQ query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method that contains the custom LINQ query.","pos":[0,59]}]},{"pos":[11706,11768],"content":"Gets or sets the class whose method contains the custom query.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the class whose method contains the custom query.","pos":[0,62]}]},{"pos":[11780,12059],"content":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> class enables you to specify a custom expression for a data source in the <xref:System.Web.UI.WebControls.QueryExtender> control. You can use the TypeName property to specify the class to which the method belongs.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> class enables you to specify a custom expression for a data source in the <xref:System.Web.UI.WebControls.QueryExtender> control. You can use the TypeName property to specify the class to which the method belongs.","pos":[0,279],"nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.Expressions.MethodExpression&gt; class enables you to specify a custom expression for a data source in the &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control.","pos":[0,195],"source":"The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> class enables you to specify a custom expression for a data source in the <xref:System.Web.UI.WebControls.QueryExtender> control."},{"content":"You can use the TypeName property to specify the class to which the method belongs.","pos":[196,279]}]}]},{"pos":[12177,12218],"content":"The class that the method is a member of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class that the method is a member of.","pos":[0,41]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression\n  id: MethodExpression\n  children:\n  - System.Web.UI.WebControls.Expressions.MethodExpression.#ctor\n  - System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)\n  - System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound\n  - System.Web.UI.WebControls.Expressions.MethodExpression.MethodName\n  - System.Web.UI.WebControls.Expressions.MethodExpression.TypeName\n  langs:\n  - csharp\n  name: MethodExpression\n  nameWithType: MethodExpression\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression\n  type: Class\n  summary: Provides a way to specify a custom LINQ query that is defined in a method.\n  remarks: \"The <xref:System.Web.UI.WebControls.QueryExtender> control supports custom LINQ queries. You can define a custom LINQ query in a method and use the MethodExpression filter option to invoke the query in the <xref:System.Web.UI.WebControls.QueryExtender> control.  \\n  \\n The method that contains the custom LINQ query must meet the following criteria:  \\n  \\n-   The method must be static (`Shared` in Visual Basic). The first parameter must be an <xref:System.Linq.IQueryable%601> or <xref:System.Collections.Generic.IEnumerable%601> object. The method can have more than one parameter.  \\n  \\n-   The return value cannot change the <xref:System.Linq.IQueryable%601> or <xref:System.Collections.Generic.IEnumerable%601> type that is queried.  \\n  \\n The MethodExpression searches for the method that contains the query in the following order:  \\n  \\n1.  If a <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> property is specified in the <xref:System.Web.UI.WebControls.QueryExtender> control, the MethodExpression object looks for the method in the specified type.  \\n  \\n2.  If the data source implements <xref:System.Web.DynamicData.IDynamicDataSource>, the method looks for the method on the context type (<xref:System.Data.Linq.DataContext> or <xref:System.Data.Objects.ObjectContext> object.)  \\n  \\n3.  The method looks for the method in a template control, in the base class for the page, or in a user control.  \\n  \\n The MethodExpression class is like the <xref:System.Web.UI.WebControls.Expressions.CustomExpression> class except that the method expression is executed in response to a method call, and the custom expression is executed in response to an event.\"\n  example:\n  - \"The following example shows how to search the ListPrice field of the Products table in the AdventureWorks database for products that have a list price of 400 or more. This example shows how to create a custom LINQ query in a method in page code and how to invoke the method in the <xref:System.Web.UI.WebControls.QueryExtender> control.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Shared Function FilterStandardPrice(ByVal query As _  \\n        IQueryable(Of Product)) As IQueryable(Of Product)  \\n        Return From p In query _  \\n            Where p.ListPrice >= 400 _  \\n            Select p  \\n    End Function  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static IQueryable<Product>   \\n        FilterStandardPrice(IQueryable<Product> query)  \\n{  \\n        return from p in query  \\n                  where p.ListPrice >= 400  \\n                  select p;  \\n  \\n    }  \\n```  \\n  \\n The following example shows how to call the method in the page.  \\n  \\n```  \\n<html>  \\n<head runat=\\\"server\\\">  \\n  <title>Custom Filter</title>  \\n</head>  \\n<body>  \\n  <form id=\\\"form1\\\" runat=\\\"server\\\">  \\n    <asp:LinqDataSource ID=\\\"LinqDataSource1\\\" runat=\\\"server\\\"   \\n        ContextTypeName=\\\"AdventureworksDataContext\\\" EntityTypeName=\\\"\\\"   \\n        TableName=\\\"Products\\\">  \\n    </asp:LinqDataSource>  \\n  \\n    <asp:QueryExtender ID=\\\"QueryExtender1\\\" runat=\\\"server\\\"   \\n        TargetControlID=\\\"LinqDataSource1\\\">  \\n      <asp:MethodExpression MethodName=\\\"FilterStandardPrice\\\" >  \\n      </asp:MethodExpression>  \\n    </asp:QueryExtender>  \\n  \\n    <asp:GridView ID=\\\"GridView1\\\" runat=\\\"server\\\"   \\n        DataSourceID=\\\"LinqDataSource1\\\"   \\n        DataKeyNames=\\\"ProductID\\\"   \\n    </asp:GridView>  \\n  </form>  \\n</body>  \\n</html>  \\n```\"\n  syntax:\n    content: 'public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression'\n  inheritance:\n  - System.Object\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Context\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.DataSource\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.IsTrackingViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Owner\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SetDirty\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#IsTrackingViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#LoadViewState(System.Object)\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#SaveViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#TrackViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.ViewState\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.Parameters\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SaveViewState\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.TrackViewState\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  langs:\n  - csharp\n  name: MethodExpression()\n  nameWithType: MethodExpression.MethodExpression()\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodExpression()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.Expressions.MethodExpression\"></xref> class.\n  syntax:\n    content: public MethodExpression ();\n    parameters: []\n  overload: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)\n  id: GetQueryable(System.Linq.IQueryable)\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  langs:\n  - csharp\n  name: GetQueryable(IQueryable)\n  nameWithType: MethodExpression.GetQueryable(IQueryable)\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(IQueryable)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Resolves the expression by using the specified <xref:System.Linq.IQueryable> object.\n  syntax:\n    content: public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable\n      description: The data source control to use.\n    return:\n      type: System.Linq.IQueryable\n      description: An instance of the <xref:System.Linq.IQueryable> object that was used to resolve the expression.\n  overload: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The data source control is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The method was not found.  \\n  \\n -or-  \\n  \\n The method is not static.  \\n  \\n -or-  \\n  \\n The type of the passed <xref uid=\\\"langword_csharp_IQuerable&lt;T&gt;\\\" name=\\\"IQuerable&lt;T&gt;\\\" href=\\\"\\\"></xref> object was changed.\"\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound\n  id: IgnoreIfNotFound\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  langs:\n  - csharp\n  name: IgnoreIfNotFound\n  nameWithType: MethodExpression.IgnoreIfNotFound\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Gets or sets a value that indicates whether the expression should be ignored.\n  remarks: The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object searches for a method that contains the query by looking in specific locations and searching in a specific order. You can set this property to `false` to throw an exception if the <xref:System.Web.UI.WebControls.Expressions.CustomExpression> object does not find a method that contains a LINQ.\n  syntax:\n    content: public bool IgnoreIfNotFound { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is ignored; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName\n  id: MethodName\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  langs:\n  - csharp\n  name: MethodName\n  nameWithType: MethodExpression.MethodName\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Gets or sets the name of the method that contains a custom LINQ query.\n  remarks: The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> object enables you to call a custom LINQ query that is defined in a method. You specify the method in the <xref:System.Web.UI.WebControls.QueryExtender> control in the page.\n  example:\n  - \"The following example shows how to specify the `FilterStandardPrice` method in the <xref:System.Web.UI.WebControls.QueryExtender> control. The custom LINQ query is defined in a `FilterStandardPrice` method.  \\n  \\n```  \\n<asp:QueryExtender ID=\\\"QueryExtender1\\\" runat=\\\"server\\\"   \\n    TargetControlID=\\\"LinqDataSource1\\\">  \\n  <asp:MethodExpression MethodName=\\\"FilterStandardPrice\\\">  \\n  </asp:MethodExpression>  \\n  </asp:QueryExtender>  \\n```\"\n  syntax:\n    content: public string MethodName { get; set; }\n    return:\n      type: System.String\n      description: The name of the method that contains the custom LINQ query.\n  overload: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName\n  id: TypeName\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  langs:\n  - csharp\n  name: TypeName\n  nameWithType: MethodExpression.TypeName\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Gets or sets the class whose method contains the custom query.\n  remarks: The <xref:System.Web.UI.WebControls.Expressions.MethodExpression> class enables you to specify a custom expression for a data source in the <xref:System.Web.UI.WebControls.QueryExtender> control. You can use the TypeName property to specify the class to which the method belongs.\n  syntax:\n    content: public string TypeName { get; set; }\n    return:\n      type: System.String\n      description: The class that the method is a member of.\n  overload: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression\n  isExternal: false\n  name: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: MethodExpression()\n  nameWithType: MethodExpression.MethodExpression()\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodExpression()\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: GetQueryable(IQueryable)\n  nameWithType: MethodExpression.GetQueryable(IQueryable)\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(IQueryable)\n- uid: System.Linq.IQueryable\n  parent: System.Linq\n  isExternal: true\n  name: IQueryable\n  nameWithType: IQueryable\n  fullName: System.Linq.IQueryable\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: IgnoreIfNotFound\n  nameWithType: MethodExpression.IgnoreIfNotFound\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: MethodName\n  nameWithType: MethodExpression.MethodName\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: TypeName\n  nameWithType: MethodExpression.TypeName\n  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor*\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: MethodExpression\n  nameWithType: MethodExpression.MethodExpression\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable*\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: GetQueryable\n  nameWithType: MethodExpression.GetQueryable\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound*\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: IgnoreIfNotFound\n  nameWithType: MethodExpression.IgnoreIfNotFound\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName*\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: MethodName\n  nameWithType: MethodExpression.MethodName\n- uid: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName*\n  parent: System.Web.UI.WebControls.Expressions.MethodExpression\n  isExternal: false\n  name: TypeName\n  nameWithType: MethodExpression.TypeName\n"}