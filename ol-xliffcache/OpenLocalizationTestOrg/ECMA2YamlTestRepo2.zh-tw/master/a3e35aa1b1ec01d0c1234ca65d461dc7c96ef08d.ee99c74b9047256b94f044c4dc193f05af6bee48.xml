{"nodes":[{"pos":[630,721],"content":"Implements an event provider that sends ASP.NET health-monitoring events as trace messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements an event provider that sends ASP.NET health-monitoring events as trace messages.","pos":[0,91]}]},{"pos":[734,1953],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management?displayProperty=fullName> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       This provider passes events to the <xref:System.Diagnostics.Trace> object. It passes events that derive from the <xref:System.Web.Management.WebBaseErrorEvent> class as trace errors and passes all other events as trace information.      > [!NOTE] >  The TraceWebEventProvider object does not provide event buffering.      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management?displayProperty=fullName&gt; namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,319],"source":" The <xref:System.Web.Management?displayProperty=fullName> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[320,403]},{"content":"This provider passes events to the &lt;xref:System.Diagnostics.Trace&gt; object.","pos":[410,484],"source":"       This provider passes events to the <xref:System.Diagnostics.Trace> object."},{"content":"It passes events that derive from the &lt;xref:System.Web.Management.WebBaseErrorEvent&gt; class as trace errors and passes all other events as trace information.","pos":[485,641],"source":" It passes events that derive from the <xref:System.Web.Management.WebBaseErrorEvent> class as trace errors and passes all other events as trace information."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The TraceWebEventProvider object does not provide event buffering.","pos":[647,726],"source":"      > [!NOTE] >  The TraceWebEventProvider object does not provide event buffering."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph2\">`healthMonitoring`</ph> configuration section.","pos":[732,954],"source":"      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[955,1055]},{"content":"For an example of creating a custom provider, see <bpt id=\"p1\">[</bpt>How to: Implement the Health Monitoring Custom Provider Example<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1056,1211],"source":" For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[4084,4130],"content":"Removes all events from the provider's buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all events from the provider's buffer.","pos":[0,46]}]},{"pos":[4143,4372],"content":"This method is not intended to be used directly from your code. It is called by the ASP.NET health-monitoring system.      > [!NOTE] >  The <xref:System.Web.Management.WebEventProvider> object does not provide event buffering.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is not intended to be used directly from your code.","pos":[0,63]},{"content":"It is called by the ASP.NET health-monitoring system.","pos":[64,117]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Web.Management.WebEventProvider&gt; object does not provide event buffering.","pos":[123,226],"source":"      > [!NOTE] >  The <xref:System.Web.Management.WebEventProvider> object does not provide event buffering."}]},{"pos":[5144,5184],"content":"Sets the initial values for this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the initial values for this object.","pos":[0,40]}]},{"pos":[5196,5381],"content":"ASP.NET calls the Initialize method to initialize the <xref:System.Web.Management.TraceWebEventProvider> with the configuration settings and name as specified in the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"ASP.NET calls the Initialize method to initialize the &lt;xref:System.Web.Management.TraceWebEventProvider&gt; with the configuration settings and name as specified in the configuration file.","pos":[0,185],"source":"ASP.NET calls the Initialize method to initialize the <xref:System.Web.Management.TraceWebEventProvider> with the configuration settings and name as specified in the configuration file."}]},{"pos":[5587,5653],"content":"The name used in the configuration file to identify this provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name used in the configuration file to identify this provider.","pos":[0,66]}]},{"pos":[5753,5910],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the attributes assigned for this provider in the configuration file.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that specifies the attributes assigned for this provider in the configuration file."},{"pos":[6521,6564],"content":"Processes the event passed to the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Processes the event passed to the provider.","pos":[0,43]}]},{"pos":[6577,6801],"content":"This method is not intended to be used directly from your code. It is called by the ASP.NET health-monitoring system.      > [!NOTE] >  The <xref:System.Web.Management.WebEventProvider> object does not do event buffering.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is not intended to be used directly from your code.","pos":[0,63]},{"content":"It is called by the ASP.NET health-monitoring system.","pos":[64,117]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Web.Management.WebEventProvider&gt; object does not do event buffering.","pos":[123,221],"source":"      > [!NOTE] >  The <xref:System.Web.Management.WebEventProvider> object does not do event buffering."}]},{"pos":[7014,7092],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebBaseEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to process.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Management.WebBaseEvent\"></xref> object to process."},{"pos":[7577,7635],"content":"Performs tasks associated with shutting down the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs tasks associated with shutting down the provider.","pos":[0,58]}]},{"pos":[7647,7837],"content":"ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.","needQuote":true,"needEscape":true,"nodes":[{"content":"ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.","pos":[0,190],"nodes":[{"content":"ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates.","pos":[0,101]},{"content":"The method is called to perform tasks that will allow the application to end gracefully.","pos":[102,190]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.TraceWebEventProvider\n  id: TraceWebEventProvider\n  children:\n  - System.Web.Management.TraceWebEventProvider.Flush\n  - System.Web.Management.TraceWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Web.Management.TraceWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.TraceWebEventProvider.Shutdown\n  langs:\n  - csharp\n  name: TraceWebEventProvider\n  nameWithType: TraceWebEventProvider\n  fullName: System.Web.Management.TraceWebEventProvider\n  type: Class\n  summary: Implements an event provider that sends ASP.NET health-monitoring events as trace messages.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management?displayProperty=fullName> namespace contains the health event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n This provider passes events to the <xref:System.Diagnostics.Trace> object. It passes events that derive from the <xref:System.Web.Management.WebBaseErrorEvent> class as trace errors and passes all other events as trace information.  \\n  \\n> [!NOTE]\\n>  The TraceWebEventProvider object does not provide event buffering.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following configuration file excerpt shows how to specify a provider of type TraceWebEventProvider in the `healthMonitoring` section. The `add` element in the `rules` section specifies that the provider will handle request-processing events.  \\n  \\n```  \\n<healthMonitoring  \\n    enabled=\\\"true\\\"  \\n    heartBeatInterval=\\\"0\\\">  \\n    <providers>  \\n        <add name=\\\"TraceEventProvider\\\"  \\n            type=\\\"System.Web.Management.TraceWebEventProvider,   \\n              System.Web\\\"  \\n            buffer=\\\"false\\\"  \\n            bufferMode=\\\"\\\"  \\n            maxEventLength=\\\"4096\\\"  \\n            maxSize=\\\"4096\\\"  \\n            maxMessagesPerNotification=\\\"1\\\"  \\n        />  \\n    </providers>  \\n    <eventMappings>  \\n        <add name=\\\"Request Processing Events\\\"  \\n            type=\\\"System.Web.Management.WebRequestEvent, System.Web\\\"   \\n        />  \\n    </eventMappings>  \\n    <profiles>  \\n        <add name=\\\"Trace\\\"  \\n            minInstances=\\\"1\\\"  \\n            maxLimit=\\\"Infinite\\\"  \\n            minInterval=\\\"00:00:00\\\"  \\n        />  \\n    </profiles>  \\n    <rules>  \\n        <add name=\\\"Trace Request Processing\\\"  \\n            eventName=\\\"Request Processing Events\\\"  \\n            provider=\\\"TraceEventProvider\\\"  \\n            profile=\\\"Trace\\\"  \\n        />  \\n   </rules>  \\n</healthMonitoring>   \\n```\"\n  syntax:\n    content: 'public sealed class TraceWebEventProvider : System.Web.Management.WebEventProvider'\n  inheritance:\n  - System.Object\n  - System.Configuration.Provider.ProviderBase\n  - System.Web.Management.WebEventProvider\n  implements: []\n  inheritedMembers:\n  - System.Configuration.Provider.ProviderBase.Description\n  - System.Configuration.Provider.ProviderBase.Name\n  platform:\n  - net462\n- uid: System.Web.Management.TraceWebEventProvider.Flush\n  id: Flush\n  parent: System.Web.Management.TraceWebEventProvider\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: TraceWebEventProvider.Flush()\n  fullName: System.Web.Management.TraceWebEventProvider.Flush()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Removes all events from the provider's buffer.\n  remarks: \"This method is not intended to be used directly from your code. It is called by the ASP.NET health-monitoring system.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.Management.WebEventProvider> object does not provide event buffering.\"\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Web.Management.TraceWebEventProvider.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.TraceWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Web.Management.TraceWebEventProvider\n  langs:\n  - csharp\n  name: Initialize(String,NameValueCollection)\n  nameWithType: TraceWebEventProvider.Initialize(String,NameValueCollection)\n  fullName: System.Web.Management.TraceWebEventProvider.Initialize(String,NameValueCollection)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Sets the initial values for this object.\n  remarks: ASP.NET calls the Initialize method to initialize the <xref:System.Web.Management.TraceWebEventProvider> with the configuration settings and name as specified in the configuration file.\n  syntax:\n    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name used in the configuration file to identify this provider.\n    - id: config\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that specifies the attributes assigned for this provider in the configuration file.\n  overload: System.Web.Management.TraceWebEventProvider.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.TraceWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  id: ProcessEvent(System.Web.Management.WebBaseEvent)\n  parent: System.Web.Management.TraceWebEventProvider\n  langs:\n  - csharp\n  name: ProcessEvent(WebBaseEvent)\n  nameWithType: TraceWebEventProvider.ProcessEvent(WebBaseEvent)\n  fullName: System.Web.Management.TraceWebEventProvider.ProcessEvent(WebBaseEvent)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Processes the event passed to the provider.\n  remarks: \"This method is not intended to be used directly from your code. It is called by the ASP.NET health-monitoring system.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.Management.WebEventProvider> object does not do event buffering.\"\n  syntax:\n    content: public override void ProcessEvent (System.Web.Management.WebBaseEvent eventRaised);\n    parameters:\n    - id: eventRaised\n      type: System.Web.Management.WebBaseEvent\n      description: The <xref href=\"System.Web.Management.WebBaseEvent\"></xref> object to process.\n  overload: System.Web.Management.TraceWebEventProvider.ProcessEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.TraceWebEventProvider.Shutdown\n  id: Shutdown\n  parent: System.Web.Management.TraceWebEventProvider\n  langs:\n  - csharp\n  name: Shutdown()\n  nameWithType: TraceWebEventProvider.Shutdown()\n  fullName: System.Web.Management.TraceWebEventProvider.Shutdown()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Performs tasks associated with shutting down the provider.\n  remarks: ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.\n  syntax:\n    content: public override void Shutdown ();\n    parameters: []\n  overload: System.Web.Management.TraceWebEventProvider.Shutdown*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Management.WebEventProvider\n  isExternal: false\n  name: System.Web.Management.WebEventProvider\n- uid: System.Web.Management.TraceWebEventProvider.Flush\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: Flush()\n  nameWithType: TraceWebEventProvider.Flush()\n  fullName: System.Web.Management.TraceWebEventProvider.Flush()\n- uid: System.Web.Management.TraceWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: Initialize(String,NameValueCollection)\n  nameWithType: TraceWebEventProvider.Initialize(String,NameValueCollection)\n  fullName: System.Web.Management.TraceWebEventProvider.Initialize(String,NameValueCollection)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Web.Management.TraceWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: ProcessEvent(WebBaseEvent)\n  nameWithType: TraceWebEventProvider.ProcessEvent(WebBaseEvent)\n  fullName: System.Web.Management.TraceWebEventProvider.ProcessEvent(WebBaseEvent)\n- uid: System.Web.Management.WebBaseEvent\n  parent: System.Web.Management\n  isExternal: false\n  name: WebBaseEvent\n  nameWithType: WebBaseEvent\n  fullName: System.Web.Management.WebBaseEvent\n- uid: System.Web.Management.TraceWebEventProvider.Shutdown\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: Shutdown()\n  nameWithType: TraceWebEventProvider.Shutdown()\n  fullName: System.Web.Management.TraceWebEventProvider.Shutdown()\n- uid: System.Web.Management.TraceWebEventProvider.Flush*\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: Flush\n  nameWithType: TraceWebEventProvider.Flush\n- uid: System.Web.Management.TraceWebEventProvider.Initialize*\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: Initialize\n  nameWithType: TraceWebEventProvider.Initialize\n- uid: System.Web.Management.TraceWebEventProvider.ProcessEvent*\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: ProcessEvent\n  nameWithType: TraceWebEventProvider.ProcessEvent\n- uid: System.Web.Management.TraceWebEventProvider.Shutdown*\n  parent: System.Web.Management.TraceWebEventProvider\n  isExternal: false\n  name: Shutdown\n  nameWithType: TraceWebEventProvider.Shutdown\n"}