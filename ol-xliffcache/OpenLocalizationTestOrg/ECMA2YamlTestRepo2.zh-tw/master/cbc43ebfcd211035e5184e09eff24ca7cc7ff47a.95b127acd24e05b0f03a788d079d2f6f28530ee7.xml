{"nodes":[{"pos":[1085,1131],"content":"Provides information for a manifest signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information for a manifest signature.","pos":[0,46]}]},{"pos":[1143,1389],"content":"Use the <xref:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature%2A> method to obtain a <xref:System.Security.Cryptography.ManifestSignatureInformationCollection> object that can be use to examine the signature information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature%2A&gt; method to obtain a &lt;xref:System.Security.Cryptography.ManifestSignatureInformationCollection&gt; object that can be use to examine the signature information.","pos":[0,246],"source":"Use the <xref:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature%2A> method to obtain a <xref:System.Security.Cryptography.ManifestSignatureInformationCollection> object that can be use to examine the signature information."}]},{"pos":[2050,2109],"content":"Gets the Authenticode signature information for a manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Authenticode signature information for a manifest.","pos":[0,59]}]},{"pos":[2372,2638],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains Authenticode signature information for the manifest, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if there is no signature.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation\"></xref> object that contains Authenticode signature information for the manifest, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no signature."},{"pos":[3199,3227],"content":"Gets the type of a manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type of a manifest.","pos":[0,28]}]},{"pos":[3379,3448],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.ManifestKinds\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.ManifestKinds\"></xref> values."},{"pos":[4051,4111],"content":"Gets the details of the strong name signature of a manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the details of the strong name signature of a manifest.","pos":[0,60]}]},{"pos":[4334,4493],"content":"A StrongNameSignature object that contains the signature, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if there is no strong name signature.","needQuote":true,"needEscape":true,"source":"A StrongNameSignature object that contains the signature, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no strong name signature."},{"pos":[5194,5307],"content":"Gathers and verifies information about the signatures of manifests that belong to a specified activation context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gathers and verifies information about the signatures of manifests that belong to a specified activation context.","pos":[0,113]}]},{"pos":[5556,5672],"content":"The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.","pos":[0,116],"nodes":[{"content":"The activation context of the manifest.","pos":[0,39]},{"content":"Activation contexts belong to an application and contain multiple manifests.","pos":[40,116]}]}]},{"pos":[5784,5934],"content":"A collection that contains a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for each manifest that is verified.","needQuote":true,"needEscape":true,"source":"A collection that contains a <xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"></xref> object for each manifest that is verified."},{"pos":[6138,6241],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">application</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>application</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6936,7067],"content":"Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type.","pos":[0,131]}]},{"pos":[7357,7473],"content":"The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.","pos":[0,116],"nodes":[{"content":"The activation context of the manifest.","pos":[0,39]},{"content":"Activation contexts belong to an application and contain multiple manifests.","pos":[40,116]}]}]},{"pos":[7555,7663],"content":"The type of manifest. This parameter specifies which manifests in the activation context you want to verify.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of manifest. This parameter specifies which manifests in the activation context you want to verify.","pos":[0,108],"nodes":[{"content":"The type of manifest.","pos":[0,21]},{"content":"This parameter specifies which manifests in the activation context you want to verify.","pos":[22,108]}]}]},{"pos":[7775,7925],"content":"A collection that contains a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for each manifest that is verified.","needQuote":true,"needEscape":true,"source":"A collection that contains a <xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"></xref> object for each manifest that is verified."},{"pos":[8129,8232],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">application</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>application</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9301,9487],"content":"Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type, and allows certificates to be selected for revocation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type, and allows certificates to be selected for revocation.","pos":[0,186]}]},{"pos":[9939,10057],"content":"The application context of the manifests. Activation contexts belong to an application and contain multiple manifests.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application context of the manifests. Activation contexts belong to an application and contain multiple manifests.","pos":[0,118],"nodes":[{"content":"The application context of the manifests.","pos":[0,41]},{"content":"Activation contexts belong to an application and contain multiple manifests.","pos":[42,118]}]}]},{"pos":[10139,10247],"content":"The type of manifest. This parameter specifies which manifests in the activation context you want to verify.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of manifest. This parameter specifies which manifests in the activation context you want to verify.","pos":[0,108],"nodes":[{"content":"The type of manifest.","pos":[0,21]},{"content":"This parameter specifies which manifests in the activation context you want to verify.","pos":[22,108]}]}]},{"pos":[10369,10575],"content":"One of the enumeration values that specifies which certificates in the chain are checked for revocation. The default is <xref href=\"System.Security.Cryptography.X509Certificates.X509RevocationFlag\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies which certificates in the chain are checked for revocation.","pos":[0,104]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509RevocationFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[105,206],"source":" The default is <xref href=\"System.Security.Cryptography.X509Certificates.X509RevocationFlag\"></xref>."}]},{"pos":[10697,10779],"content":"Determines whether the X.509 verification should look online for revocation lists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the X.509 verification should look online for revocation lists.","pos":[0,82]}]},{"pos":[10891,11041],"content":"A collection that contains a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for each manifest that is verified.","needQuote":true,"needEscape":true,"source":"A collection that contains a <xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"></xref> object for each manifest that is verified."},{"pos":[11245,11348],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">application</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>application</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11463,11569],"content":"A value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">revocationFlag</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">revocationMode</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is invalid.","needQuote":true,"needEscape":true,"source":"A value specified for the <code>revocationFlag</code> or <code>revocationMode</code> parameter is invalid."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ManifestSignatureInformation\n  id: ManifestSignatureInformation\n  children:\n  - System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature\n  - System.Security.Cryptography.ManifestSignatureInformation.Manifest\n  - System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature\n  - System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)\n  - System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)\n  - System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)\n  langs:\n  - csharp\n  name: ManifestSignatureInformation\n  nameWithType: ManifestSignatureInformation\n  fullName: System.Security.Cryptography.ManifestSignatureInformation\n  type: Class\n  summary: Provides information for a manifest signature.\n  remarks: Use the <xref:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature%2A> method to obtain a <xref:System.Security.Cryptography.ManifestSignatureInformationCollection> object that can be use to examine the signature information.\n  syntax:\n    content: public sealed class ManifestSignatureInformation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature\n  id: AuthenticodeSignature\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  langs:\n  - csharp\n  name: AuthenticodeSignature\n  nameWithType: ManifestSignatureInformation.AuthenticodeSignature\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the Authenticode signature information for a manifest.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation AuthenticodeSignature { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation\"></xref> object that contains Authenticode signature information for the manifest, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no signature.\n  overload: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ManifestSignatureInformation.Manifest\n  id: Manifest\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  langs:\n  - csharp\n  name: Manifest\n  nameWithType: ManifestSignatureInformation.Manifest\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.Manifest\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the type of a manifest.\n  syntax:\n    content: public System.Security.ManifestKinds Manifest { get; }\n    return:\n      type: System.Security.ManifestKinds\n      description: One of the <xref href=\"System.Security.ManifestKinds\"></xref> values.\n  overload: System.Security.Cryptography.ManifestSignatureInformation.Manifest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature\n  id: StrongNameSignature\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  langs:\n  - csharp\n  name: StrongNameSignature\n  nameWithType: ManifestSignatureInformation.StrongNameSignature\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the details of the strong name signature of a manifest.\n  syntax:\n    content: public System.Security.Cryptography.StrongNameSignatureInformation StrongNameSignature { get; }\n    return:\n      type: System.Security.Cryptography.StrongNameSignatureInformation\n      description: A StrongNameSignature object that contains the signature, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no strong name signature.\n  overload: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)\n  id: VerifySignature(System.ActivationContext)\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  langs:\n  - csharp\n  name: VerifySignature(ActivationContext)\n  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext)\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gathers and verifies information about the signatures of manifests that belong to a specified activation context.\n  syntax:\n    content: public static System.Security.Cryptography.ManifestSignatureInformationCollection VerifySignature (ActivationContext application);\n    parameters:\n    - id: application\n      type: System.ActivationContext\n      description: The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.\n    return:\n      type: System.Security.Cryptography.ManifestSignatureInformationCollection\n      description: A collection that contains a <xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"></xref> object for each manifest that is verified.\n  overload: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>application</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)\n  id: VerifySignature(System.ActivationContext,System.Security.ManifestKinds)\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  langs:\n  - csharp\n  name: VerifySignature(ActivationContext,ManifestKinds)\n  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type.\n  syntax:\n    content: public static System.Security.Cryptography.ManifestSignatureInformationCollection VerifySignature (ActivationContext application, System.Security.ManifestKinds manifests);\n    parameters:\n    - id: application\n      type: System.ActivationContext\n      description: The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.\n    - id: manifests\n      type: System.Security.ManifestKinds\n      description: The type of manifest. This parameter specifies which manifests in the activation context you want to verify.\n    return:\n      type: System.Security.Cryptography.ManifestSignatureInformationCollection\n      description: A collection that contains a <xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"></xref> object for each manifest that is verified.\n  overload: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>application</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)\n  id: VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  langs:\n  - csharp\n  name: VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)\n  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type, and allows certificates to be selected for revocation.\n  syntax:\n    content: public static System.Security.Cryptography.ManifestSignatureInformationCollection VerifySignature (ActivationContext application, System.Security.ManifestKinds manifests, System.Security.Cryptography.X509Certificates.X509RevocationFlag revocationFlag, System.Security.Cryptography.X509Certificates.X509RevocationMode revocationMode);\n    parameters:\n    - id: application\n      type: System.ActivationContext\n      description: The application context of the manifests. Activation contexts belong to an application and contain multiple manifests.\n    - id: manifests\n      type: System.Security.ManifestKinds\n      description: The type of manifest. This parameter specifies which manifests in the activation context you want to verify.\n    - id: revocationFlag\n      type: System.Security.Cryptography.X509Certificates.X509RevocationFlag\n      description: One of the enumeration values that specifies which certificates in the chain are checked for revocation. The default is <xref href=\"System.Security.Cryptography.X509Certificates.X509RevocationFlag\"></xref>.\n    - id: revocationMode\n      type: System.Security.Cryptography.X509Certificates.X509RevocationMode\n      description: Determines whether the X.509 verification should look online for revocation lists.\n    return:\n      type: System.Security.Cryptography.ManifestSignatureInformationCollection\n      description: A collection that contains a <xref href=\"System.Security.Cryptography.ManifestSignatureInformation\"></xref> object for each manifest that is verified.\n  overload: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>application</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: A value specified for the <code>revocationFlag</code> or <code>revocationMode</code> parameter is invalid.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: AuthenticodeSignature\n  nameWithType: ManifestSignatureInformation.AuthenticodeSignature\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature\n- uid: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: AuthenticodeSignatureInformation\n  nameWithType: AuthenticodeSignatureInformation\n  fullName: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation\n- uid: System.Security.Cryptography.ManifestSignatureInformation.Manifest\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: Manifest\n  nameWithType: ManifestSignatureInformation.Manifest\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.Manifest\n- uid: System.Security.ManifestKinds\n  parent: System.Security\n  isExternal: false\n  name: ManifestKinds\n  nameWithType: ManifestKinds\n  fullName: System.Security.ManifestKinds\n- uid: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: StrongNameSignature\n  nameWithType: ManifestSignatureInformation.StrongNameSignature\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature\n- uid: System.Security.Cryptography.StrongNameSignatureInformation\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: StrongNameSignatureInformation\n  nameWithType: StrongNameSignatureInformation\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: VerifySignature(ActivationContext)\n  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext)\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext)\n- uid: System.Security.Cryptography.ManifestSignatureInformationCollection\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ManifestSignatureInformationCollection\n  nameWithType: ManifestSignatureInformationCollection\n  fullName: System.Security.Cryptography.ManifestSignatureInformationCollection\n- uid: System.ActivationContext\n  parent: System\n  isExternal: false\n  name: ActivationContext\n  nameWithType: ActivationContext\n  fullName: System.ActivationContext\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: VerifySignature(ActivationContext,ManifestKinds)\n  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)\n  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)\n  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)\n- uid: System.Security.Cryptography.X509Certificates.X509RevocationFlag\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509RevocationFlag\n  nameWithType: X509RevocationFlag\n  fullName: System.Security.Cryptography.X509Certificates.X509RevocationFlag\n- uid: System.Security.Cryptography.X509Certificates.X509RevocationMode\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509RevocationMode\n  nameWithType: X509RevocationMode\n  fullName: System.Security.Cryptography.X509Certificates.X509RevocationMode\n- uid: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature*\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: AuthenticodeSignature\n  nameWithType: ManifestSignatureInformation.AuthenticodeSignature\n- uid: System.Security.Cryptography.ManifestSignatureInformation.Manifest*\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: Manifest\n  nameWithType: ManifestSignatureInformation.Manifest\n- uid: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature*\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: StrongNameSignature\n  nameWithType: ManifestSignatureInformation.StrongNameSignature\n- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*\n  parent: System.Security.Cryptography.ManifestSignatureInformation\n  isExternal: false\n  name: VerifySignature\n  nameWithType: ManifestSignatureInformation.VerifySignature\n"}