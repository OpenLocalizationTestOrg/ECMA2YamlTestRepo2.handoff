{"nodes":[{"pos":[804,887],"content":"Represents the maximum length for response headers. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the maximum length for response headers. This class cannot be inherited.","pos":[0,83],"nodes":[{"content":"Represents the maximum length for response headers.","pos":[0,51]},{"content":"This class cannot be inherited.","pos":[52,83]}]}]},{"pos":[4696,4804],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Configuration.HttpWebRequestElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Configuration.HttpWebRequestElement\"></xref> class."},{"pos":[4816,5084],"content":"This constructor adds a <xref:System.Configuration.ConfigurationProperty> object that represents the <xref:System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength%2A> to the <xref:System.Configuration.ConfigurationElement.Properties%2A> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor adds a &lt;xref:System.Configuration.ConfigurationProperty&gt; object that represents the &lt;xref:System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength%2A&gt; to the &lt;xref:System.Configuration.ConfigurationElement.Properties%2A&gt; collection.","pos":[0,268],"source":"This constructor adds a <xref:System.Configuration.ConfigurationProperty> object that represents the <xref:System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength%2A> to the <xref:System.Configuration.ConfigurationElement.Properties%2A> collection."}]},{"pos":[5734,5795],"content":"Gets or sets the maximum allowed length of an error response.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum allowed length of an error response.","pos":[0,61]}]},{"pos":[5927,6054],"content":"A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the error response. The default value is 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the error response. The default value is 64.","pos":[0,127],"nodes":[{"content":"A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the error response.","pos":[0,102]},{"content":"The default value is 64.","pos":[103,127]}]}]},{"pos":[6660,6724],"content":"Gets or sets the maximum allowed length of the response headers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum allowed length of the response headers.","pos":[0,64]}]},{"pos":[6737,7052],"content":"The length is measured in kilobytes (1024 bytes) and it includes the response status line and the response headers, as well as all extra control characters received as part of the HTTP protocol.       A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests will fail.","needQuote":false,"needEscape":true,"nodes":[{"content":"The length is measured in kilobytes (1024 bytes) and it includes the response status line and the response headers, as well as all extra control characters received as part of the HTTP protocol.       A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests will fail.","pos":[0,313],"nodes":[{"content":"The length is measured in kilobytes (1024 bytes) and it includes the response status line and the response headers, as well as all extra control characters received as part of the HTTP protocol.","pos":[0,194]},{"content":"A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests will fail.","pos":[201,313]}]}]},{"pos":[7187,7316],"content":"A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the response headers. The default value is 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the response headers. The default value is 64.","pos":[0,129],"nodes":[{"content":"A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the response headers.","pos":[0,104]},{"content":"The default value is 64.","pos":[105,129]}]}]},{"pos":[7939,8026],"content":"Gets or sets the maximum length of an upload in response to an unauthorized error code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum length of an upload in response to an unauthorized error code.","pos":[0,87]}]},{"pos":[8164,8685],"content":"A 32-bit signed integer containing the maximum length (in multiple of 1,024 byte units) of an upload in response to an unauthorized error code. A value of -1 indicates that no size limit will be imposed on the upload. Setting the MaximumUnauthorizedUploadLength property to any other value will only send the request body if it is smaller than the number of bytes specified. So a value of 1 would indicate to only send the request body if it is smaller than 1,024 bytes.       The default value for this property is -1.","needQuote":false,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer containing the maximum length (in multiple of 1,024 byte units) of an upload in response to an unauthorized error code. A value of -1 indicates that no size limit will be imposed on the upload. Setting the MaximumUnauthorizedUploadLength property to any other value will only send the request body if it is smaller than the number of bytes specified. So a value of 1 would indicate to only send the request body if it is smaller than 1,024 bytes.       The default value for this property is -1.","pos":[0,519],"nodes":[{"content":"A 32-bit signed integer containing the maximum length (in multiple of 1,024 byte units) of an upload in response to an unauthorized error code.","pos":[0,143]},{"content":"A value of -1 indicates that no size limit will be imposed on the upload.","pos":[144,217]},{"content":"Setting the MaximumUnauthorizedUploadLength property to any other value will only send the request body if it is smaller than the number of bytes specified.","pos":[218,374]},{"content":"So a value of 1 would indicate to only send the request body if it is smaller than 1,024 bytes.","pos":[375,470]},{"content":"The default value for this property is -1.","pos":[477,519]}]}]},{"pos":[10015,10027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10587,10666],"content":"Setting this property ignores validation errors that occur during HTTP parsing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Setting this property ignores validation errors that occur during HTTP parsing.","pos":[0,79]}]},{"pos":[10679,11656],"content":"When this property is set to `false`, the following validations are performed during HTTP parsing:      -   In end-of-line code, use CRLF; using CR or LF alone is not allowed.      -   Headers names should not have spaces in them.      -   If multiple status lines exist, all additional status lines are treated as malformed header name/value pairs.      -   The status line must have a status description, in addition to a status code.      -   Header names cannot have non-ASCII chars in them. This validation is performed whether this property is set to `true` or `false`.       When a protocol violation occurs, a <xref:System.Net.WebException> exception is thrown with the status set to <xref:System.Net.WebExceptionStatus>. If the `UseUnsafeHeaderParsing` property is set to `true`, validation errors are ignored.       Setting this property to `true` has security implications, so it should only be done if backward compatibility with a server is required.","needQuote":false,"needEscape":true,"nodes":[{"content":"When this property is set to <ph id=\"ph1\">`false`</ph>, the following validations are performed during HTTP parsing:      -   In end-of-line code, use CRLF; using CR or LF alone is not allowed.","pos":[0,175],"source":"When this property is set to `false`, the following validations are performed during HTTP parsing:      -   In end-of-line code, use CRLF; using CR or LF alone is not allowed."},{"content":"-   Headers names should not have spaces in them.","pos":[181,230]},{"content":"-   If multiple status lines exist, all additional status lines are treated as malformed header name/value pairs.","pos":[236,349]},{"content":"-   The status line must have a status description, in addition to a status code.","pos":[355,436]},{"content":"-   Header names cannot have non-ASCII chars in them.","pos":[442,495]},{"content":"This validation is performed whether this property is set to <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>.","pos":[496,575],"source":" This validation is performed whether this property is set to `true` or `false`."},{"content":"When a protocol violation occurs, a &lt;xref:System.Net.WebException&gt; exception is thrown with the status set to &lt;xref:System.Net.WebExceptionStatus&gt;.","pos":[582,729],"source":"       When a protocol violation occurs, a <xref:System.Net.WebException> exception is thrown with the status set to <xref:System.Net.WebExceptionStatus>."},{"content":"If the <ph id=\"ph1\">`UseUnsafeHeaderParsing`</ph> property is set to <ph id=\"ph2\">`true`</ph>, validation errors are ignored.","pos":[730,819],"source":" If the `UseUnsafeHeaderParsing` property is set to `true`, validation errors are ignored."},{"content":"Setting this property to <ph id=\"ph1\">`true`</ph> has security implications, so it should only be done if backward compatibility with a server is required.","pos":[826,963],"source":"       Setting this property to `true` has security implications, so it should only be done if backward compatibility with a server is required."}]},{"pos":[11788,11846],"content":"Boolean that indicates whether this property has been set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean that indicates whether this property has been set.","pos":[0,58]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Configuration.HttpWebRequestElement\n  id: HttpWebRequestElement\n  children:\n  - System.Net.Configuration.HttpWebRequestElement.#ctor\n  - System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength\n  - System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength\n  - System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength\n  - System.Net.Configuration.HttpWebRequestElement.PostDeserialize\n  - System.Net.Configuration.HttpWebRequestElement.Properties\n  - System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing\n  langs:\n  - csharp\n  name: HttpWebRequestElement\n  nameWithType: HttpWebRequestElement\n  fullName: System.Net.Configuration.HttpWebRequestElement\n  type: Class\n  summary: Represents the maximum length for response headers. This class cannot be inherited.\n  remarks: \"This class corresponds to the `maximumResponseHeadersLength` attribute of the [\\\\&lt;httpWebRequest\\\\&gt; Element (Network Settings)](../Topic/%3ChttpWebRequest%3E%20Element%20\\\\(Network%20Settings\\\\).md) configuration element.  \\n  \\n The information in this class applies to responses to requests made with the <xref:System.Net.WebRequest> and <xref:System.Net.WebClient> classes.  \\n  \\n This class provides programmatic access to information that can be stored in configuration files.\"\n  syntax:\n    content: 'public sealed class HttpWebRequestElement : System.Configuration.ConfigurationElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.#ctor\n  id: '#ctor'\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: HttpWebRequestElement()\n  nameWithType: HttpWebRequestElement.HttpWebRequestElement()\n  fullName: System.Net.Configuration.HttpWebRequestElement.HttpWebRequestElement()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Net.Configuration.HttpWebRequestElement\"></xref> class.\n  remarks: This constructor adds a <xref:System.Configuration.ConfigurationProperty> object that represents the <xref:System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength%2A> to the <xref:System.Configuration.ConfigurationElement.Properties%2A> collection.\n  syntax:\n    content: public HttpWebRequestElement ();\n    parameters: []\n  overload: System.Net.Configuration.HttpWebRequestElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength\n  id: MaximumErrorResponseLength\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: MaximumErrorResponseLength\n  nameWithType: HttpWebRequestElement.MaximumErrorResponseLength\n  fullName: System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Gets or sets the maximum allowed length of an error response.\n  syntax:\n    content: public int MaximumErrorResponseLength { get; set; }\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the error response. The default value is 64.\n  overload: System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength\n  id: MaximumResponseHeadersLength\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: MaximumResponseHeadersLength\n  nameWithType: HttpWebRequestElement.MaximumResponseHeadersLength\n  fullName: System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Gets or sets the maximum allowed length of the response headers.\n  remarks: \"The length is measured in kilobytes (1024 bytes) and it includes the response status line and the response headers, as well as all extra control characters received as part of the HTTP protocol.  \\n  \\n A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests will fail.\"\n  syntax:\n    content: public int MaximumResponseHeadersLength { get; set; }\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the response headers. The default value is 64.\n  overload: System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength\n  id: MaximumUnauthorizedUploadLength\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: MaximumUnauthorizedUploadLength\n  nameWithType: HttpWebRequestElement.MaximumUnauthorizedUploadLength\n  fullName: System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Gets or sets the maximum length of an upload in response to an unauthorized error code.\n  syntax:\n    content: public int MaximumUnauthorizedUploadLength { get; set; }\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer containing the maximum length (in multiple of 1,024 byte units) of an upload in response to an unauthorized error code. A value of -1 indicates that no size limit will be imposed on the upload. Setting the MaximumUnauthorizedUploadLength property to any other value will only send the request body if it is smaller than the number of bytes specified. So a value of 1 would indicate to only send the request body if it is smaller than 1,024 bytes.  \\n  \\n The default value for this property is -1.\"\n  overload: System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.PostDeserialize\n  id: PostDeserialize\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: PostDeserialize()\n  nameWithType: HttpWebRequestElement.PostDeserialize()\n  fullName: System.Net.Configuration.HttpWebRequestElement.PostDeserialize()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  syntax:\n    content: protected override void PostDeserialize ();\n    parameters: []\n  overload: System.Net.Configuration.HttpWebRequestElement.PostDeserialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.Properties\n  id: Properties\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: HttpWebRequestElement.Properties\n  fullName: System.Net.Configuration.HttpWebRequestElement.Properties\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: To be added.\n  overload: System.Net.Configuration.HttpWebRequestElement.Properties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing\n  id: UseUnsafeHeaderParsing\n  parent: System.Net.Configuration.HttpWebRequestElement\n  langs:\n  - csharp\n  name: UseUnsafeHeaderParsing\n  nameWithType: HttpWebRequestElement.UseUnsafeHeaderParsing\n  fullName: System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Configuration\n  summary: Setting this property ignores validation errors that occur during HTTP parsing.\n  remarks: \"When this property is set to `false`, the following validations are performed during HTTP parsing:  \\n  \\n-   In end-of-line code, use CRLF; using CR or LF alone is not allowed.  \\n  \\n-   Headers names should not have spaces in them.  \\n  \\n-   If multiple status lines exist, all additional status lines are treated as malformed header name/value pairs.  \\n  \\n-   The status line must have a status description, in addition to a status code.  \\n  \\n-   Header names cannot have non-ASCII chars in them. This validation is performed whether this property is set to `true` or `false`.  \\n  \\n When a protocol violation occurs, a <xref:System.Net.WebException> exception is thrown with the status set to <xref:System.Net.WebExceptionStatus>. If the `UseUnsafeHeaderParsing` property is set to `true`, validation errors are ignored.  \\n  \\n Setting this property to `true` has security implications, so it should only be done if backward compatibility with a server is required.\"\n  syntax:\n    content: public bool UseUnsafeHeaderParsing { get; set; }\n    return:\n      type: System.Boolean\n      description: Boolean that indicates whether this property has been set.\n  overload: System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: System.Configuration.ConfigurationElement\n- uid: System.Net.Configuration.HttpWebRequestElement.#ctor\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: HttpWebRequestElement()\n  nameWithType: HttpWebRequestElement.HttpWebRequestElement()\n  fullName: System.Net.Configuration.HttpWebRequestElement.HttpWebRequestElement()\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: MaximumErrorResponseLength\n  nameWithType: HttpWebRequestElement.MaximumErrorResponseLength\n  fullName: System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: MaximumResponseHeadersLength\n  nameWithType: HttpWebRequestElement.MaximumResponseHeadersLength\n  fullName: System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: MaximumUnauthorizedUploadLength\n  nameWithType: HttpWebRequestElement.MaximumUnauthorizedUploadLength\n  fullName: System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength\n- uid: System.Net.Configuration.HttpWebRequestElement.PostDeserialize\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: PostDeserialize()\n  nameWithType: HttpWebRequestElement.PostDeserialize()\n  fullName: System.Net.Configuration.HttpWebRequestElement.PostDeserialize()\n- uid: System.Net.Configuration.HttpWebRequestElement.Properties\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: Properties\n  nameWithType: HttpWebRequestElement.Properties\n  fullName: System.Net.Configuration.HttpWebRequestElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: UseUnsafeHeaderParsing\n  nameWithType: HttpWebRequestElement.UseUnsafeHeaderParsing\n  fullName: System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Configuration.HttpWebRequestElement.#ctor*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: HttpWebRequestElement\n  nameWithType: HttpWebRequestElement.HttpWebRequestElement\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: MaximumErrorResponseLength\n  nameWithType: HttpWebRequestElement.MaximumErrorResponseLength\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: MaximumResponseHeadersLength\n  nameWithType: HttpWebRequestElement.MaximumResponseHeadersLength\n- uid: System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: MaximumUnauthorizedUploadLength\n  nameWithType: HttpWebRequestElement.MaximumUnauthorizedUploadLength\n- uid: System.Net.Configuration.HttpWebRequestElement.PostDeserialize*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: PostDeserialize\n  nameWithType: HttpWebRequestElement.PostDeserialize\n- uid: System.Net.Configuration.HttpWebRequestElement.Properties*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: Properties\n  nameWithType: HttpWebRequestElement.Properties\n- uid: System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing*\n  parent: System.Net.Configuration.HttpWebRequestElement\n  isExternal: false\n  name: UseUnsafeHeaderParsing\n  nameWithType: HttpWebRequestElement.UseUnsafeHeaderParsing\n"}