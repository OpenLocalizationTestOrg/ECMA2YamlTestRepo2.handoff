{"nodes":[{"pos":[2139,2345],"content":"Automatically generates single-table commands used to reconcile changes made to a <xref href=\"System.Data.DataSet\"></xref> with the associated database. This is an abstract class that can only be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Automatically generates single-table commands used to reconcile changes made to a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the associated database.","pos":[0,152],"source":"Automatically generates single-table commands used to reconcile changes made to a <xref href=\"System.Data.DataSet\"></xref> with the associated database."},{"content":"This is an abstract class that can only be inherited.","pos":[153,206]}]},{"pos":[2358,5070],"content":"The DbCommandBuilder class is provided for the convenience of provider writers creating their own command builders. By inheriting from this class, developers can implement provider specific behavior in their own code.       The <xref:System.Data.Common.DbDataAdapter> does not automatically generate the SQL statements required to reconcile changes made to a <xref:System.Data.DataSet> with the associated data source. However, you can create a DbCommandBuilder object to automatically generate SQL statements for single-table updates if you set the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property of the <xref:System.Data.Common.DbDataAdapter>. Then, any additional SQL statements that you do not set are generated by the DbCommandBuilder.       The DbCommandBuilder registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events whenever you set the <xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A> property. You can only associate one <xref:System.Data.Common.DbDataAdapter> or DbCommandBuilder object with each other at one time.       To generate INSERT, UPDATE, or DELETE statements, the DbCommandBuilder uses the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property to retrieve a required set of metadata automatically. If you change the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> after the metadata has been retrieved (for example, after the first update), you should call the <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> method to update the metadata.       The `SelectCommand` must also return at least one primary key or unique column. If none exist, an <xref:System.InvalidOperationException> exception is generated, and the commands are not generated.       The DbCommandBuilder also uses the <xref:System.Data.Common.DbCommand.Connection%2A>, <xref:System.Data.Common.DbCommand.CommandTimeout%2A>, and <xref:System.Data.Common.DbCommand.Transaction%2A> properties referenced by the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>. The user should call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if any of these properties are modified, or if the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> itself is replaced. Otherwise the <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A>, <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> properties retain their previous values.       If you call <xref:System.ComponentModel.Component.Dispose%2A>, the DbCommandBuilder is disassociated from the <xref:System.Data.Common.DbDataAdapter>, and the generated commands are no longer used.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DbCommandBuilder class is provided for the convenience of provider writers creating their own command builders.","pos":[0,115]},{"content":"By inheriting from this class, developers can implement provider specific behavior in their own code.","pos":[116,217]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter&gt; does not automatically generate the SQL statements required to reconcile changes made to a &lt;xref:System.Data.DataSet&gt; with the associated data source.","pos":[224,418],"source":"       The <xref:System.Data.Common.DbDataAdapter> does not automatically generate the SQL statements required to reconcile changes made to a <xref:System.Data.DataSet> with the associated data source."},{"content":"However, you can create a DbCommandBuilder object to automatically generate SQL statements for single-table updates if you set the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[419,663],"source":" However, you can create a DbCommandBuilder object to automatically generate SQL statements for single-table updates if you set the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property of the <xref:System.Data.Common.DbDataAdapter>."},{"content":"Then, any additional SQL statements that you do not set are generated by the DbCommandBuilder.","pos":[664,758]},{"content":"The DbCommandBuilder registers itself as a listener for &lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt; events whenever you set the &lt;xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A&gt; property.","pos":[765,970],"source":"       The DbCommandBuilder registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events whenever you set the <xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A> property."},{"content":"You can only associate one &lt;xref:System.Data.Common.DbDataAdapter&gt; or DbCommandBuilder object with each other at one time.","pos":[971,1093],"source":" You can only associate one <xref:System.Data.Common.DbDataAdapter> or DbCommandBuilder object with each other at one time."},{"content":"To generate INSERT, UPDATE, or DELETE statements, the DbCommandBuilder uses the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; property to retrieve a required set of metadata automatically.","pos":[1100,1299],"source":"       To generate INSERT, UPDATE, or DELETE statements, the DbCommandBuilder uses the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property to retrieve a required set of metadata automatically."},{"content":"If you change the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; after the metadata has been retrieved (for example, after the first update), you should call the &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; method to update the metadata.","pos":[1300,1562],"source":" If you change the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> after the metadata has been retrieved (for example, after the first update), you should call the <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> method to update the metadata."},{"content":"The <ph id=\"ph1\">`SelectCommand`</ph> must also return at least one primary key or unique column.","pos":[1569,1648],"source":"       The `SelectCommand` must also return at least one primary key or unique column."},{"content":"If none exist, an &lt;xref:System.InvalidOperationException&gt; exception is generated, and the commands are not generated.","pos":[1649,1766],"source":" If none exist, an <xref:System.InvalidOperationException> exception is generated, and the commands are not generated."},{"content":"The DbCommandBuilder also uses the &lt;xref:System.Data.Common.DbCommand.Connection%2A&gt;, &lt;xref:System.Data.Common.DbCommand.CommandTimeout%2A&gt;, and &lt;xref:System.Data.Common.DbCommand.Transaction%2A&gt; properties referenced by the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;.","pos":[1773,2055],"source":"       The DbCommandBuilder also uses the <xref:System.Data.Common.DbCommand.Connection%2A>, <xref:System.Data.Common.DbCommand.CommandTimeout%2A>, and <xref:System.Data.Common.DbCommand.Transaction%2A> properties referenced by the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>."},{"content":"The user should call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if any of these properties are modified, or if the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; itself is replaced.","pos":[2056,2264],"source":" The user should call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if any of these properties are modified, or if the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> itself is replaced."},{"content":"Otherwise the &lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;, and &lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt; properties retain their previous values.","pos":[2265,2496],"source":" Otherwise the <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A>, <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> properties retain their previous values."},{"content":"If you call &lt;xref:System.ComponentModel.Component.Dispose%2A&gt;, the DbCommandBuilder is disassociated from the &lt;xref:System.Data.Common.DbDataAdapter&gt;, and the generated commands are no longer used.","pos":[2503,2700],"source":"       If you call <xref:System.ComponentModel.Component.Dispose%2A>, the DbCommandBuilder is disassociated from the <xref:System.Data.Common.DbDataAdapter>, and the generated commands are no longer used."}]},{"pos":[6342,6466],"content":"Initializes a new instance of a class that inherits from the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a class that inherits from the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class."},{"pos":[7337,7484],"content":"Allows the provider implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class to handle additional parameter properties.","needQuote":true,"needEscape":true,"source":"Allows the provider implementation of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class to handle additional parameter properties."},{"pos":[7496,7638],"content":"This method allows an implementation of the <xref:System.Data.Common.DbCommandBuilder> class to handle provider-specific parameter properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method allows an implementation of the &lt;xref:System.Data.Common.DbCommandBuilder&gt; class to handle provider-specific parameter properties.","pos":[0,142],"source":"This method allows an implementation of the <xref:System.Data.Common.DbCommandBuilder> class to handle provider-specific parameter properties."}]},{"pos":[7931,8035],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which the additional modifications are applied.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DbParameter\"></xref> to which the additional modifications are applied."},{"pos":[8101,8235],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the schema table provided by &lt;xref:System.Data.Common.DbDataReader.GetSchemaTable*&gt;.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataRow\"></xref> from the schema table provided by <xref:System.Data.Common.DbDataReader.GetSchemaTable*>."},{"pos":[8317,8379],"content":"The type of command being generated; INSERT, UPDATE or DELETE.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of command being generated; INSERT, UPDATE or DELETE.","pos":[0,62]}]},{"pos":[8448,8680],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the parameter is part of the update or delete WHERE clause, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if it is part of the insert or update values.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the parameter is part of the update or delete WHERE clause, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it is part of the insert or update values."},{"pos":[9163,9322],"content":"Sets or gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CatalogLocation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for an instance of the <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Sets or gets the <xref href=\"System.Data.Common.CatalogLocation\"></xref> for an instance of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class."},{"pos":[9504,9569],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CatalogLocation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.CatalogLocation\"></xref> object."},{"pos":[10054,10192],"content":"Sets or gets a string used as the catalog separator for an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Sets or gets a string used as the catalog separator for an instance of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class."},{"pos":[10326,10463],"content":"A string indicating the catalog separator for use with an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"A string indicating the catalog separator for use with an instance of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class."},{"pos":[10939,11081],"content":"Specifies which <bpt id=\"p1\">&lt;xref href=\"System.Data.ConflictOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is to be used by the <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Specifies which <xref href=\"System.Data.ConflictOption\"></xref> is to be used by the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>."},{"pos":[11246,11409],"content":"Returns one of the <bpt id=\"p1\">&lt;xref href=\"System.Data.ConflictOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values describing the behavior of this <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns one of the <xref href=\"System.Data.ConflictOption\"></xref> values describing the behavior of this <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>."},{"pos":[11868,12006],"content":"Gets or sets a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for which Transact-SQL statements are automatically generated.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref href=\"System.Data.Common.DbDataAdapter\"></xref> object for which Transact-SQL statements are automatically generated."},{"pos":[12019,12471],"content":"The <xref:System.Data.Common.DbCommandBuilder> registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events that are generated by the <xref:System.Data.Common.DbDataAdapter> specified in this property.       When you create a new instance of <xref:System.Data.Common.DbCommandBuilder>, any existing <xref:System.Data.Common.DbCommandBuilder> associated with this <xref:System.Data.Common.DbDataAdapter> is released.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Data.Common.DbCommandBuilder> registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events that are generated by the <xref:System.Data.Common.DbDataAdapter> specified in this property.       When you create a new instance of <xref:System.Data.Common.DbCommandBuilder>, any existing <xref:System.Data.Common.DbCommandBuilder> associated with this <xref:System.Data.Common.DbDataAdapter> is released.","pos":[0,450],"nodes":[{"content":"The &lt;xref:System.Data.Common.DbCommandBuilder&gt; registers itself as a listener for &lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt; events that are generated by the &lt;xref:System.Data.Common.DbDataAdapter&gt; specified in this property.","pos":[0,236],"source":"The <xref:System.Data.Common.DbCommandBuilder> registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events that are generated by the <xref:System.Data.Common.DbDataAdapter> specified in this property."},{"content":"When you create a new instance of &lt;xref:System.Data.Common.DbCommandBuilder&gt;, any existing &lt;xref:System.Data.Common.DbCommandBuilder&gt; associated with this &lt;xref:System.Data.Common.DbDataAdapter&gt; is released.","pos":[243,450],"source":"       When you create a new instance of <xref:System.Data.Common.DbCommandBuilder>, any existing <xref:System.Data.Common.DbCommandBuilder> associated with this <xref:System.Data.Common.DbDataAdapter> is released."}]}]},{"pos":[12638,12701],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DbDataAdapter\"></xref> object."},{"pos":[13194,13342],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> and optionally releases the managed resources."},{"pos":[13355,13965],"content":"This method is called by the public <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> method and the `Finalize` method. <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> invokes the protected Dispose method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DbCommandBuilder> references. This method invokes the <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public &lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt; method and the <ph id=\"ph1\">`Finalize`</ph> method.","pos":[0,123],"source":"This method is called by the public <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> method and the `Finalize` method."},{"content":"&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt; invokes the protected Dispose method with the disposing parameter set to <ph id=\"ph1\">`true`</ph>.","pos":[124,258],"source":" <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> invokes the protected Dispose method with the disposing parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[259,320],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Data.Common.DbCommandBuilder&gt; references.","pos":[327,496],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DbCommandBuilder> references."},{"content":"This method invokes the &lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt; method of each referenced object.","pos":[497,608],"source":" This method invokes the <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> method of each referenced object."}]},{"pos":[14122,14331],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[14812,14951],"content":"Gets the automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform deletions at the data source.","needQuote":true,"needEscape":true,"source":"Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions at the data source."},{"pos":[14964,15825],"content":"An application can use the GetDeleteCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use GetDeleteCommand as the basis of a modified command. For example, you might call GetDeleteCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetDeleteCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetDeleteCommand.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application can use the GetDeleteCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use GetDeleteCommand as the basis of a modified command. For example, you might call GetDeleteCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetDeleteCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetDeleteCommand.","pos":[0,857],"nodes":[{"content":"An application can use the GetDeleteCommand method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.","pos":[0,178],"source":"An application can use the GetDeleteCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed."},{"content":"You can also use GetDeleteCommand as the basis of a modified command.","pos":[185,254]},{"content":"For example, you might call GetDeleteCommand and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[255,405],"source":" For example, you might call GetDeleteCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>."},{"content":"After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.","pos":[412,592],"source":"       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way."},{"content":"Otherwise, the GetDeleteCommand will still be using information from the previous statement, which might not be correct.","pos":[593,713]},{"content":"The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or GetDeleteCommand.","pos":[714,857],"source":" The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetDeleteCommand."}]}]},{"pos":[15998,16113],"content":"The automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform deletions.","needQuote":true,"needEscape":true,"source":"The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions."},{"pos":[16656,16841],"content":"Gets the automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform deletions at the data source, optionally using columns for parameter names.","needQuote":true,"needEscape":true,"source":"Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions at the data source, optionally using columns for parameter names."},{"pos":[16854,18750],"content":"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command. For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>.       The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead. This succeeds only if the following conditions are met:      -   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name.      -   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression.      -   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application can use the &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.","pos":[0,224],"source":"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed."},{"content":"You can also use &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; as the basis of a modified command.","pos":[231,346],"source":"       You can also use <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command."},{"content":"For example, you might call &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[347,543],"source":" For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>."},{"content":"After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.","pos":[550,730],"source":"       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way."},{"content":"Otherwise, the &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; will still be using information from the previous statement, which might not be correct.","pos":[731,897],"source":" Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct."},{"content":"The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;.","pos":[898,1087],"source":" The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>."},{"content":"The default behavior, when generating parameter names, is to use <ph id=\"ph1\">@p1</ph>, <ph id=\"ph2\">@p2</ph>, and so on for the various parameters.","pos":[1094,1206],"source":"       The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters."},{"content":"Passing <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`useColumnsForParameterNames`</ph> parameter allows you to force the &lt;xref:System.Data.Common.DbCommandBuilder&gt; to generate parameters based on the column names instead.","pos":[1207,1394],"source":" Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead."},{"content":"This succeeds only if the following conditions are met:      -   The &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt; has been specified and its length is equal to or greater than the generated parameter name.","pos":[1395,1626],"source":" This succeeds only if the following conditions are met:      -   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name."},{"content":"-   The generated parameter name meets the criteria specified in the &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt; regular expression.","pos":[1632,1789],"source":"      -   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression."},{"content":"-   A &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt; is specified.","pos":[1795,1884],"source":"      -   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified."}]},{"pos":[18964,19186],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, generate parameter names matching column names, if possible.","pos":[0,125],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, generate <ph id=\"ph1\">@p1</ph>, <ph id=\"ph2\">@p2</ph>, and so on.","pos":[126,222],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on."}]},{"pos":[19259,19374],"content":"The automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform deletions.","needQuote":true,"needEscape":true,"source":"The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions."},{"pos":[19864,20004],"content":"Gets the automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform insertions at the data source.","needQuote":true,"needEscape":true,"source":"Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions at the data source."},{"pos":[20017,20890],"content":"An application can use the GetInsertCommand method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use GetInsertCommand as the basis of a modified command. For example, you might call GetInsertCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetInsertCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetInsertCommand.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application can use the GetInsertCommand method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use GetInsertCommand as the basis of a modified command. For example, you might call GetInsertCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetInsertCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetInsertCommand.","pos":[0,869],"nodes":[{"content":"An application can use the GetInsertCommand method for informational or troubleshooting purposes because it returns the text of the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.","pos":[0,190],"source":"An application can use the GetInsertCommand method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed."},{"content":"You can also use GetInsertCommand as the basis of a modified command.","pos":[197,266]},{"content":"For example, you might call GetInsertCommand and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[267,417],"source":" For example, you might call GetInsertCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>."},{"content":"After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.","pos":[424,604],"source":"       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way."},{"content":"Otherwise, the GetInsertCommand will still be using information from the previous statement, which might not be correct.","pos":[605,725]},{"content":"The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or GetInsertCommand.","pos":[726,869],"source":" The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetInsertCommand."}]}]},{"pos":[21063,21179],"content":"The automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform insertions.","needQuote":true,"needEscape":true,"source":"The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions."},{"pos":[21722,21908],"content":"Gets the automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform insertions at the data source, optionally using columns for parameter names.","needQuote":true,"needEscape":true,"source":"Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions at the data source, optionally using columns for parameter names."},{"pos":[21921,23875],"content":"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> as the basis of a modified command. For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>.       The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead. Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name.      -   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression.      -   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application can use the &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; method for informational or troubleshooting purposes because it returns the text of the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.","pos":[0,236],"source":"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed."},{"content":"You can also use &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; as the basis of a modified command.","pos":[243,358],"source":"       You can also use <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> as the basis of a modified command."},{"content":"For example, you might call &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[359,555],"source":" For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>."},{"content":"After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.","pos":[562,742],"source":"       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way."},{"content":"Otherwise, the &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; will still be using information from the previous statement, which might not be correct.","pos":[743,909],"source":" Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct."},{"content":"The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;.","pos":[910,1099],"source":" The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>."},{"content":"The default behavior, when generating parameter names, is to use <ph id=\"ph1\">@p1</ph>, <ph id=\"ph2\">@p2</ph>, and so on for the various parameters.","pos":[1106,1218],"source":"       The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters."},{"content":"Passing <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`useColumnsForParameterNames`</ph> parameter allows you to force the &lt;xref:System.Data.Common.DbCommandBuilder&gt; to generate parameters based on the column names instead.","pos":[1219,1406],"source":" Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead."},{"content":"Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt; has been specified and its length is equal to or greater than the generated parameter name.","pos":[1407,1684],"source":" Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name."},{"content":"-   The generated parameter name meets the criteria specified in the &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt; regular expression.","pos":[1690,1847],"source":"      -   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression."},{"content":"-   A &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt; is specified.","pos":[1853,1942],"source":"      -   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified."}]},{"pos":[24089,24311],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, generate parameter names matching column names, if possible.","pos":[0,125],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, generate <ph id=\"ph1\">@p1</ph>, <ph id=\"ph2\">@p2</ph>, and so on.","pos":[126,222],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on."}]},{"pos":[24384,24500],"content":"The automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform insertions.","needQuote":true,"needEscape":true,"source":"The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions."},{"pos":[25033,25144],"content":"Returns the name of the specified parameter in the format of @p*#*. Use when building a custom command builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the name of the specified parameter in the format of <ph id=\"ph1\">@p</ph><bpt id=\"p1\">*</bpt><ph id=\"ph2\">#</ph><ept id=\"p1\">*</ept>.","pos":[0,67],"source":"Returns the name of the specified parameter in the format of @p*#*."},{"content":"Use when building a custom command builder.","pos":[68,111]}]},{"pos":[25322,25381],"content":"The number to be included as part of the parameter's name..","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to be included as part of the parameter's name..","pos":[0,59]}]},{"pos":[25439,25530],"content":"The name of the parameter with the specified number appended as part of the parameter name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the parameter with the specified number appended as part of the parameter name.","pos":[0,91]}]},{"pos":[26068,26134],"content":"Returns the full parameter name, given the partial parameter name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the full parameter name, given the partial parameter name.","pos":[0,66]}]},{"pos":[26310,26344],"content":"The partial name of the parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"The partial name of the parameter.","pos":[0,34]}]},{"pos":[26402,26480],"content":"The full parameter name corresponding to the partial parameter name requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The full parameter name corresponding to the partial parameter name requested.","pos":[0,78]}]},{"pos":[27048,27122],"content":"Returns the placeholder for the parameter in the associated SQL statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the placeholder for the parameter in the associated SQL statement.","pos":[0,74]}]},{"pos":[27134,27220],"content":"This method is intended for use by provider writers building a custom command builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is intended for use by provider writers building a custom command builder.","pos":[0,86]}]},{"pos":[27405,27463],"content":"The number to be included as part of the parameter's name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to be included as part of the parameter's name.","pos":[0,58]}]},{"pos":[27521,27582],"content":"The name of the parameter with the specified number appended.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the parameter with the specified number appended.","pos":[0,61]}]},{"pos":[28156,28246],"content":"Returns the schema table for the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the schema table for the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>."},{"pos":[28258,28344],"content":"This method is intended for use by provider writers building a custom command builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is intended for use by provider writers building a custom command builder.","pos":[0,86]}]},{"pos":[28569,28676],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to retrieve the corresponding schema table.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Common.DbCommand\"></xref> for which to retrieve the corresponding schema table."},{"pos":[28742,28881],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the schema for the specific <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that represents the schema for the specific <xref href=\"System.Data.Common.DbCommand\"></xref>."},{"pos":[29369,29506],"content":"Gets the automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform updates at the data source.","needQuote":true,"needEscape":true,"source":"Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates at the data source."},{"pos":[29519,30380],"content":"An application can use the GetUpdateCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use GetUpdateCommand as the basis of a modified command. For example, you might call GetUpdateCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetUpdateCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetUpdateCommand.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application can use the GetUpdateCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use GetUpdateCommand as the basis of a modified command. For example, you might call GetUpdateCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetUpdateCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetUpdateCommand.","pos":[0,857],"nodes":[{"content":"An application can use the GetUpdateCommand method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.","pos":[0,178],"source":"An application can use the GetUpdateCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed."},{"content":"You can also use GetUpdateCommand as the basis of a modified command.","pos":[185,254]},{"content":"For example, you might call GetUpdateCommand and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[255,405],"source":" For example, you might call GetUpdateCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>."},{"content":"After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.","pos":[412,592],"source":"       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way."},{"content":"Otherwise, the GetUpdateCommand will still be using information from the previous statement, which might not be correct.","pos":[593,713]},{"content":"The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or GetUpdateCommand.","pos":[714,857],"source":" The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetUpdateCommand."}]}]},{"pos":[30553,30666],"content":"The automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform updates.","needQuote":true,"needEscape":true,"source":"The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates."},{"pos":[31209,31392],"content":"Gets the automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform updates at the data source, optionally using columns for parameter names.","needQuote":true,"needEscape":true,"source":"Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates at the data source, optionally using columns for parameter names."},{"pos":[31405,33343],"content":"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.       You can also use <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command. For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> and modify command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>.       The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead. Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name.      -   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression.      -   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified.","needQuote":false,"needEscape":true,"nodes":[{"content":"An application can use the &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.","pos":[0,224],"source":"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed."},{"content":"You can also use &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; as the basis of a modified command.","pos":[231,346],"source":"       You can also use <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command."},{"content":"For example, you might call &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; and modify command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[347,539],"source":" For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> and modify command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>."},{"content":"After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.","pos":[546,726],"source":"       After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way."},{"content":"Otherwise, the &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; will still be using information from the previous statement, which might not be correct.","pos":[727,893],"source":" Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct."},{"content":"The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;.","pos":[894,1083],"source":" The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>."},{"content":"The default behavior, when generating parameter names, is to use <ph id=\"ph1\">@p1</ph>, <ph id=\"ph2\">@p2</ph>, and so on for the various parameters.","pos":[1090,1202],"source":"       The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters."},{"content":"Passing <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`useColumnsForParameterNames`</ph> parameter allows you to force the &lt;xref:System.Data.Common.DbCommandBuilder&gt; to generate parameters based on the column names instead.","pos":[1203,1390],"source":" Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead."},{"content":"Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt; has been specified and its length is equal to or greater than the generated parameter name.","pos":[1391,1668],"source":" Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name."},{"content":"-   The generated parameter name meets the criteria specified in the &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt; regular expression.","pos":[1674,1831],"source":"      -   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression."},{"content":"-   A &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt; is specified.","pos":[1837,1926],"source":"      -   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified."}]},{"pos":[33557,33779],"content":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, generate parameter names matching column names, if possible.","pos":[0,125],"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, generate <ph id=\"ph1\">@p1</ph>, <ph id=\"ph2\">@p2</ph>, and so on.","pos":[126,222],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on."}]},{"pos":[33852,33965],"content":"The automatically generated <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object required to perform updates.","needQuote":true,"needEscape":true,"source":"The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates."},{"pos":[34547,34832],"content":"Resets the &lt;xref:System.Data.Common.DbCommand.CommandTimeout<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Data.Common.DbCommand.Transaction<ept id=\"p1\">*</ept>&gt;, &lt;xref:System.Data.Common.DbCommand.CommandType*&gt;, and <bpt id=\"p2\">&lt;xref href=\"System.Data.UpdateRowSource\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> properties on the <bpt id=\"p3\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Resets the <xref:System.Data.Common.DbCommand.CommandTimeout*>, <xref:System.Data.Common.DbCommand.Transaction*>, <xref:System.Data.Common.DbCommand.CommandType*>, and <xref href=\"System.Data.UpdateRowSource\"></xref> properties on the <xref href=\"System.Data.Common.DbCommand\"></xref>."},{"pos":[34844,34930],"content":"This method is intended for use by provider writers building a custom command builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is intended for use by provider writers building a custom command builder.","pos":[0,86]}]},{"pos":[35153,35297],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be used by the command builder for the corresponding insert, update, or delete command.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Common.DbCommand\"></xref> to be used by the command builder for the corresponding insert, update, or delete command."},{"pos":[35370,35715],"content":"A <xref href=\"System.Data.Common.DbCommand\"></xref> instance to use for each insert, update, or delete operation. Passing a null value allows the InitializeCommand method to create a <xref href=\"System.Data.Common.DbCommand\"></xref> object based on the Select command associated with the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance to use for each insert, update, or delete operation.","pos":[0,113],"source":"A <xref href=\"System.Data.Common.DbCommand\"></xref> instance to use for each insert, update, or delete operation."},{"content":"Passing a null value allows the InitializeCommand method to create a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object based on the Select command associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[114,345],"source":" Passing a null value allows the InitializeCommand method to create a <xref href=\"System.Data.Common.DbCommand\"></xref> object based on the Select command associated with the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>."}]},{"pos":[36249,36425],"content":"Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.","pos":[0,176]}]},{"pos":[36606,36639],"content":"The original unquoted identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The original unquoted identifier.","pos":[0,33]}]},{"pos":[36697,36794],"content":"The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.","pos":[0,97],"nodes":[{"content":"The quoted version of the identifier.","pos":[0,37]},{"content":"Embedded quotes within the identifier are properly escaped.","pos":[38,97]}]}]},{"pos":[37254,37443],"content":"Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.","pos":[0,189]}]},{"pos":[37456,38089],"content":"Some data sources may have objects that can contain characters such as spaces, commas, and semicolons. To accommodate this capability, use the QuotePrefix and <xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A> properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.      > [!NOTE] >  Although you cannot change the QuotePrefix or <xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a <xref:System.Data.Common.DbDataAdapter>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Some data sources may have objects that can contain characters such as spaces, commas, and semicolons.","pos":[0,102]},{"content":"To accommodate this capability, use the QuotePrefix and &lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt; properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.","pos":[103,324],"source":" To accommodate this capability, use the QuotePrefix and <xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A> properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Although you cannot change the QuotePrefix or &lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt; properties after an insert, update, or delete command has been generated, you can change their settings after calling the <ph id=\"ph2\">`Update`</ph> method of a &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[330,630],"source":"      > [!NOTE] >  Although you cannot change the QuotePrefix or <xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a <xref:System.Data.Common.DbDataAdapter>."}]},{"pos":[38219,38296],"content":"The beginning character or characters to use. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The beginning character or characters to use. The default is an empty string.","pos":[0,77],"nodes":[{"content":"The beginning character or characters to use.","pos":[0,45]},{"content":"The default is an empty string.","pos":[46,77]}]}]},{"pos":[38482,38576],"content":"This property cannot be changed after an insert, update, or delete command has been generated.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property cannot be changed after an insert, update, or delete command has been generated.","pos":[0,94]}]},{"pos":[38954,39140],"content":"Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.","pos":[0,186]}]},{"pos":[39153,39786],"content":"Some data sources may have objects that can contain characters such as spaces, commas, and semicolons. To accommodate this capability, use the <xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A> and QuoteSuffix properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.      > [!NOTE] >  Although you cannot change the <xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A> or QuoteSuffix properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a <xref:System.Data.Common.DbDataAdapter>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Some data sources may have objects that can contain characters such as spaces, commas, and semicolons.","pos":[0,102]},{"content":"To accommodate this capability, use the &lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt; and QuoteSuffix properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.","pos":[103,324],"source":" To accommodate this capability, use the <xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A> and QuoteSuffix properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Although you cannot change the &lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt; or QuoteSuffix properties after an insert, update, or delete command has been generated, you can change their settings after calling the <ph id=\"ph2\">`Update`</ph> method of a &lt;xref:System.Data.Common.DbDataAdapter&gt;.","pos":[330,630],"source":"      > [!NOTE] >  Although you cannot change the <xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A> or QuoteSuffix properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a <xref:System.Data.Common.DbDataAdapter>."}]},{"pos":[39916,39990],"content":"The ending character or characters to use. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ending character or characters to use. The default is an empty string.","pos":[0,74],"nodes":[{"content":"The ending character or characters to use.","pos":[0,42]},{"content":"The default is an empty string.","pos":[43,74]}]}]},{"pos":[40460,40558],"content":"Clears the commands associated with this <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Clears the commands associated with this <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>."},{"pos":[40571,40965],"content":"Calling the RefreshSchema method effectively removes all the <xref:System.Data.Common.DbCommand> objects referred to by the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>,       <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>,       <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A>, and       <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A> properties.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling the RefreshSchema method effectively removes all the &lt;xref:System.Data.Common.DbCommand&gt; objects referred to by the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;,       &lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;,       &lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;, and       &lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt; properties.","pos":[0,388],"source":"Calling the RefreshSchema method effectively removes all the <xref:System.Data.Common.DbCommand> objects referred to by the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>,       <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>,       <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A>, and       <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A> properties."}]},{"pos":[41685,41789],"content":"Adds an event handler for the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter.RowUpdating\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Adds an event handler for the <xref href=\"System.Data.OleDb.OleDbDataAdapter.RowUpdating\"></xref> event."},{"pos":[42021,42132],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatingEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance containing information about the event.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> instance containing information about the event."},{"pos":[42615,42727],"content":"Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.","pos":[0,112]}]},{"pos":[42739,43113],"content":"Generally, database servers indicate the schema for an identifier by separating the schema name from the identifier with some character. For example, SQL Server uses a colon, creating complete identifiers such as **Person:CustomerName**, where \"Person\" is the schema name and \"CustomerName\" is the identifier. Setting this property allows developers to modify this behavior.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generally, database servers indicate the schema for an identifier by separating the schema name from the identifier with some character.","pos":[0,136]},{"content":"For example, SQL Server uses a colon, creating complete identifiers such as <bpt id=\"p1\">**</bpt>Person:CustomerName<ept id=\"p1\">**</ept>, where \"Person\" is the schema name and \"CustomerName\" is the identifier.","pos":[137,309],"source":" For example, SQL Server uses a colon, creating complete identifiers such as **Person:CustomerName**, where \"Person\" is the schema name and \"CustomerName\" is the identifier."},{"content":"Setting this property allows developers to modify this behavior.","pos":[310,374]}]},{"pos":[43246,43295],"content":"The character to be used as the schema separator.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character to be used as the schema separator.","pos":[0,49]}]},{"pos":[43760,43853],"content":"Specifies whether all column values in an update statement are included or only changed ones.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether all column values in an update statement are included or only changed ones.","pos":[0,93]}]},{"pos":[43865,44231],"content":"The UPDATE statement generated by a <xref:System.Data.Common.DbCommandBuilder> can include update information about all the columns, or it can include information only about those columns whose values have changed. Setting the SetAllValues property to `true` causes the generated UPDATE statement to include all the columns, whether their values have changed or not.","needQuote":true,"needEscape":true,"nodes":[{"content":"The UPDATE statement generated by a &lt;xref:System.Data.Common.DbCommandBuilder&gt; can include update information about all the columns, or it can include information only about those columns whose values have changed.","pos":[0,214],"source":"The UPDATE statement generated by a <xref:System.Data.Common.DbCommandBuilder> can include update information about all the columns, or it can include information only about those columns whose values have changed."},{"content":"Setting the SetAllValues property to <ph id=\"ph1\">`true`</ph> causes the generated UPDATE statement to include all the columns, whether their values have changed or not.","pos":[215,366],"source":" Setting the SetAllValues property to `true` causes the generated UPDATE statement to include all the columns, whether their values have changed or not."}]},{"pos":[44352,44632],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the UPDATE statement generated by the <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> includes all columns; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if it includes only changed columns.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the UPDATE statement generated by the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> includes all columns; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it includes only changed columns."},{"pos":[45250,45469],"content":"Registers the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommandBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to handle the <bpt id=\"p2\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter.RowUpdating\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event for a <bpt id=\"p3\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Registers the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> to handle the <xref href=\"System.Data.OleDb.OleDbDataAdapter.RowUpdating\"></xref> event for a <xref href=\"System.Data.Common.DbDataAdapter\"></xref>."},{"pos":[45481,45939],"content":"This method is intended for use by provider writers building a custom command builder. When a new <xref:System.Data.Common.DbDataAdapter> is added to the <xref:System.Data.Common.DbCommandBuilder>, it is registered for the DbDataAdapter's **RowUpdating** event. If this method is called again with the same <xref:System.Data.Common.DbDataAdapter>, the <xref:System.Data.Common.DbCommandBuilder> is unregistered for that DbDataAdapter's **RowUpdating** event.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is intended for use by provider writers building a custom command builder.","pos":[0,86]},{"content":"When a new &lt;xref:System.Data.Common.DbDataAdapter&gt; is added to the &lt;xref:System.Data.Common.DbCommandBuilder&gt;, it is registered for the DbDataAdapter's <bpt id=\"p1\">**</bpt>RowUpdating<ept id=\"p1\">**</ept> event.","pos":[87,261],"source":" When a new <xref:System.Data.Common.DbDataAdapter> is added to the <xref:System.Data.Common.DbCommandBuilder>, it is registered for the DbDataAdapter's **RowUpdating** event."},{"content":"If this method is called again with the same &lt;xref:System.Data.Common.DbDataAdapter&gt;, the &lt;xref:System.Data.Common.DbCommandBuilder&gt; is unregistered for that DbDataAdapter's <bpt id=\"p1\">**</bpt>RowUpdating<ept id=\"p1\">**</ept> event.","pos":[262,458],"source":" If this method is called again with the same <xref:System.Data.Common.DbDataAdapter>, the <xref:System.Data.Common.DbCommandBuilder> is unregistered for that DbDataAdapter's **RowUpdating** event."}]},{"pos":[46151,46235],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be used for the update.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Common.DbDataAdapter\"></xref> to be used for the update."},{"pos":[46783,46933],"content":"Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.","pos":[0,150]}]},{"pos":[47112,47170],"content":"The identifier that will have its embedded quotes removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier that will have its embedded quotes removed.","pos":[0,58]}]},{"pos":[47228,47294],"content":"The unquoted identifier, with embedded quotes properly un-escaped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unquoted identifier, with embedded quotes properly un-escaped.","pos":[0,66]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DbCommandBuilder\n  id: DbCommandBuilder\n  children:\n  - System.Data.Common.DbCommandBuilder.#ctor\n  - System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)\n  - System.Data.Common.DbCommandBuilder.CatalogLocation\n  - System.Data.Common.DbCommandBuilder.CatalogSeparator\n  - System.Data.Common.DbCommandBuilder.ConflictOption\n  - System.Data.Common.DbCommandBuilder.DataAdapter\n  - System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)\n  - System.Data.Common.DbCommandBuilder.GetDeleteCommand\n  - System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)\n  - System.Data.Common.DbCommandBuilder.GetInsertCommand\n  - System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)\n  - System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)\n  - System.Data.Common.DbCommandBuilder.GetParameterName(System.String)\n  - System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)\n  - System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)\n  - System.Data.Common.DbCommandBuilder.GetUpdateCommand\n  - System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)\n  - System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)\n  - System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)\n  - System.Data.Common.DbCommandBuilder.QuotePrefix\n  - System.Data.Common.DbCommandBuilder.QuoteSuffix\n  - System.Data.Common.DbCommandBuilder.RefreshSchema\n  - System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)\n  - System.Data.Common.DbCommandBuilder.SchemaSeparator\n  - System.Data.Common.DbCommandBuilder.SetAllValues\n  - System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)\n  - System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)\n  langs:\n  - csharp\n  name: DbCommandBuilder\n  nameWithType: DbCommandBuilder\n  fullName: System.Data.Common.DbCommandBuilder\n  type: Class\n  summary: Automatically generates single-table commands used to reconcile changes made to a <xref href=\"System.Data.DataSet\"></xref> with the associated database. This is an abstract class that can only be inherited.\n  remarks: \"The DbCommandBuilder class is provided for the convenience of provider writers creating their own command builders. By inheriting from this class, developers can implement provider specific behavior in their own code.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter> does not automatically generate the SQL statements required to reconcile changes made to a <xref:System.Data.DataSet> with the associated data source. However, you can create a DbCommandBuilder object to automatically generate SQL statements for single-table updates if you set the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property of the <xref:System.Data.Common.DbDataAdapter>. Then, any additional SQL statements that you do not set are generated by the DbCommandBuilder.  \\n  \\n The DbCommandBuilder registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events whenever you set the <xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A> property. You can only associate one <xref:System.Data.Common.DbDataAdapter> or DbCommandBuilder object with each other at one time.  \\n  \\n To generate INSERT, UPDATE, or DELETE statements, the DbCommandBuilder uses the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property to retrieve a required set of metadata automatically. If you change the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> after the metadata has been retrieved (for example, after the first update), you should call the <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> method to update the metadata.  \\n  \\n The `SelectCommand` must also return at least one primary key or unique column. If none exist, an <xref:System.InvalidOperationException> exception is generated, and the commands are not generated.  \\n  \\n The DbCommandBuilder also uses the <xref:System.Data.Common.DbCommand.Connection%2A>, <xref:System.Data.Common.DbCommand.CommandTimeout%2A>, and <xref:System.Data.Common.DbCommand.Transaction%2A> properties referenced by the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>. The user should call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if any of these properties are modified, or if the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> itself is replaced. Otherwise the <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A>, <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> properties retain their previous values.  \\n  \\n If you call <xref:System.ComponentModel.Component.Dispose%2A>, the DbCommandBuilder is disassociated from the <xref:System.Data.Common.DbDataAdapter>, and the generated commands are no longer used.\"\n  syntax:\n    content: 'public abstract class DbCommandBuilder : System.ComponentModel.Component'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: DbCommandBuilder()\n  nameWithType: DbCommandBuilder.DbCommandBuilder()\n  fullName: System.Data.Common.DbCommandBuilder.DbCommandBuilder()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of a class that inherits from the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class.\n  syntax:\n    content: protected DbCommandBuilder ();\n    parameters: []\n  overload: System.Data.Common.DbCommandBuilder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)\n  id: ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)\n  nameWithType: DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Allows the provider implementation of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class to handle additional parameter properties.\n  remarks: This method allows an implementation of the <xref:System.Data.Common.DbCommandBuilder> class to handle provider-specific parameter properties.\n  syntax:\n    content: protected abstract void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow row, System.Data.StatementType statementType, bool whereClause);\n    parameters:\n    - id: parameter\n      type: System.Data.Common.DbParameter\n      description: A <xref href=\"System.Data.Common.DbParameter\"></xref> to which the additional modifications are applied.\n    - id: row\n      type: System.Data.DataRow\n      description: The <xref href=\"System.Data.DataRow\"></xref> from the schema table provided by <xref:System.Data.Common.DbDataReader.GetSchemaTable*>.\n    - id: statementType\n      type: System.Data.StatementType\n      description: The type of command being generated; INSERT, UPDATE or DELETE.\n    - id: whereClause\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the parameter is part of the update or delete WHERE clause, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it is part of the insert or update values.\n  overload: System.Data.Common.DbCommandBuilder.ApplyParameterInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.CatalogLocation\n  id: CatalogLocation\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: CatalogLocation\n  nameWithType: DbCommandBuilder.CatalogLocation\n  fullName: System.Data.Common.DbCommandBuilder.CatalogLocation\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Sets or gets the <xref href=\"System.Data.Common.CatalogLocation\"></xref> for an instance of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class.\n  syntax:\n    content: public virtual System.Data.Common.CatalogLocation CatalogLocation { get; set; }\n    return:\n      type: System.Data.Common.CatalogLocation\n      description: A <xref href=\"System.Data.Common.CatalogLocation\"></xref> object.\n  overload: System.Data.Common.DbCommandBuilder.CatalogLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.CatalogSeparator\n  id: CatalogSeparator\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: CatalogSeparator\n  nameWithType: DbCommandBuilder.CatalogSeparator\n  fullName: System.Data.Common.DbCommandBuilder.CatalogSeparator\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Sets or gets a string used as the catalog separator for an instance of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class.\n  syntax:\n    content: public virtual string CatalogSeparator { get; set; }\n    return:\n      type: System.String\n      description: A string indicating the catalog separator for use with an instance of the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> class.\n  overload: System.Data.Common.DbCommandBuilder.CatalogSeparator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.ConflictOption\n  id: ConflictOption\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: ConflictOption\n  nameWithType: DbCommandBuilder.ConflictOption\n  fullName: System.Data.Common.DbCommandBuilder.ConflictOption\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Specifies which <xref href=\"System.Data.ConflictOption\"></xref> is to be used by the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>.\n  syntax:\n    content: public virtual System.Data.ConflictOption ConflictOption { get; set; }\n    return:\n      type: System.Data.ConflictOption\n      description: Returns one of the <xref href=\"System.Data.ConflictOption\"></xref> values describing the behavior of this <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>.\n  overload: System.Data.Common.DbCommandBuilder.ConflictOption*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.DataAdapter\n  id: DataAdapter\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: DataAdapter\n  nameWithType: DbCommandBuilder.DataAdapter\n  fullName: System.Data.Common.DbCommandBuilder.DataAdapter\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a <xref href=\"System.Data.Common.DbDataAdapter\"></xref> object for which Transact-SQL statements are automatically generated.\n  remarks: \"The <xref:System.Data.Common.DbCommandBuilder> registers itself as a listener for <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> events that are generated by the <xref:System.Data.Common.DbDataAdapter> specified in this property.  \\n  \\n When you create a new instance of <xref:System.Data.Common.DbCommandBuilder>, any existing <xref:System.Data.Common.DbCommandBuilder> associated with this <xref:System.Data.Common.DbDataAdapter> is released.\"\n  syntax:\n    content: public System.Data.Common.DbDataAdapter DataAdapter { get; set; }\n    return:\n      type: System.Data.Common.DbDataAdapter\n      description: A <xref href=\"System.Data.Common.DbDataAdapter\"></xref> object.\n  overload: System.Data.Common.DbCommandBuilder.DataAdapter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DbCommandBuilder.Dispose(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> method and the `Finalize` method. <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> invokes the protected Dispose method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DbCommandBuilder> references. This method invokes the <xref:System.Data.Common.DbCommandBuilder.Dispose%2A> method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Data.Common.DbCommandBuilder.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand\n  id: GetDeleteCommand\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetDeleteCommand()\n  nameWithType: DbCommandBuilder.GetDeleteCommand()\n  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions at the data source.\n  remarks: \"An application can use the GetDeleteCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.  \\n  \\n You can also use GetDeleteCommand as the basis of a modified command. For example, you might call GetDeleteCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetDeleteCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetDeleteCommand.\"\n  syntax:\n    content: public System.Data.Common.DbCommand GetDeleteCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions.\n  overload: System.Data.Common.DbCommandBuilder.GetDeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)\n  id: GetDeleteCommand(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetDeleteCommand(Boolean)\n  nameWithType: DbCommandBuilder.GetDeleteCommand(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions at the data source, optionally using columns for parameter names.\n  remarks: \"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.  \\n  \\n You can also use <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command. For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>.  \\n  \\n The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead. This succeeds only if the following conditions are met:  \\n  \\n-   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name.  \\n  \\n-   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression.  \\n  \\n-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified.\"\n  syntax:\n    content: public System.Data.Common.DbCommand GetDeleteCommand (bool useColumnsForParameterNames);\n    parameters:\n    - id: useColumnsForParameterNames\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on.\n    return:\n      type: System.Data.Common.DbCommand\n      description: The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform deletions.\n  overload: System.Data.Common.DbCommandBuilder.GetDeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand\n  id: GetInsertCommand\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetInsertCommand()\n  nameWithType: DbCommandBuilder.GetInsertCommand()\n  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions at the data source.\n  remarks: \"An application can use the GetInsertCommand method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed.  \\n  \\n You can also use GetInsertCommand as the basis of a modified command. For example, you might call GetInsertCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetInsertCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetInsertCommand.\"\n  syntax:\n    content: public System.Data.Common.DbCommand GetInsertCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions.\n  overload: System.Data.Common.DbCommandBuilder.GetInsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)\n  id: GetInsertCommand(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetInsertCommand(Boolean)\n  nameWithType: DbCommandBuilder.GetInsertCommand(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions at the data source, optionally using columns for parameter names.\n  remarks: \"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the text of the <xref:System.Data.Common.DbCommand> object to be executed.  \\n  \\n You can also use <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> as the basis of a modified command. For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>.  \\n  \\n The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead. Generation of the parameters based on column names succeeds only if the following conditions are met:  \\n  \\n-   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name.  \\n  \\n-   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression.  \\n  \\n-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified.\"\n  syntax:\n    content: public System.Data.Common.DbCommand GetInsertCommand (bool useColumnsForParameterNames);\n    parameters:\n    - id: useColumnsForParameterNames\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on.\n    return:\n      type: System.Data.Common.DbCommand\n      description: The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform insertions.\n  overload: System.Data.Common.DbCommandBuilder.GetInsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)\n  id: GetParameterName(System.Int32)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetParameterName(Int32)\n  nameWithType: DbCommandBuilder.GetParameterName(Int32)\n  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns the name of the specified parameter in the format of @p*#*. Use when building a custom command builder.\n  syntax:\n    content: protected abstract string GetParameterName (int parameterOrdinal);\n    parameters:\n    - id: parameterOrdinal\n      type: System.Int32\n      description: The number to be included as part of the parameter's name..\n    return:\n      type: System.String\n      description: The name of the parameter with the specified number appended as part of the parameter name.\n  overload: System.Data.Common.DbCommandBuilder.GetParameterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.String)\n  id: GetParameterName(System.String)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetParameterName(String)\n  nameWithType: DbCommandBuilder.GetParameterName(String)\n  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns the full parameter name, given the partial parameter name.\n  syntax:\n    content: protected abstract string GetParameterName (string parameterName);\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: The partial name of the parameter.\n    return:\n      type: System.String\n      description: The full parameter name corresponding to the partial parameter name requested.\n  overload: System.Data.Common.DbCommandBuilder.GetParameterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)\n  id: GetParameterPlaceholder(System.Int32)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetParameterPlaceholder(Int32)\n  nameWithType: DbCommandBuilder.GetParameterPlaceholder(Int32)\n  fullName: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns the placeholder for the parameter in the associated SQL statement.\n  remarks: This method is intended for use by provider writers building a custom command builder.\n  syntax:\n    content: protected abstract string GetParameterPlaceholder (int parameterOrdinal);\n    parameters:\n    - id: parameterOrdinal\n      type: System.Int32\n      description: The number to be included as part of the parameter's name.\n    return:\n      type: System.String\n      description: The name of the parameter with the specified number appended.\n  overload: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)\n  id: GetSchemaTable(System.Data.Common.DbCommand)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetSchemaTable(DbCommand)\n  nameWithType: DbCommandBuilder.GetSchemaTable(DbCommand)\n  fullName: System.Data.Common.DbCommandBuilder.GetSchemaTable(DbCommand)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns the schema table for the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>.\n  remarks: This method is intended for use by provider writers building a custom command builder.\n  syntax:\n    content: protected virtual System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand sourceCommand);\n    parameters:\n    - id: sourceCommand\n      type: System.Data.Common.DbCommand\n      description: The <xref href=\"System.Data.Common.DbCommand\"></xref> for which to retrieve the corresponding schema table.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that represents the schema for the specific <xref href=\"System.Data.Common.DbCommand\"></xref>.\n  overload: System.Data.Common.DbCommandBuilder.GetSchemaTable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand\n  id: GetUpdateCommand\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetUpdateCommand()\n  nameWithType: DbCommandBuilder.GetUpdateCommand()\n  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates at the data source.\n  remarks: \"An application can use the GetUpdateCommand method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.  \\n  \\n You can also use GetUpdateCommand as the basis of a modified command. For example, you might call GetUpdateCommand and modify the command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the GetUpdateCommand will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or GetUpdateCommand.\"\n  syntax:\n    content: public System.Data.Common.DbCommand GetUpdateCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates.\n  overload: System.Data.Common.DbCommandBuilder.GetUpdateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)\n  id: GetUpdateCommand(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: GetUpdateCommand(Boolean)\n  nameWithType: DbCommandBuilder.GetUpdateCommand(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates at the data source, optionally using columns for parameter names.\n  remarks: \"An application can use the <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.Common.DbCommand> object to be executed.  \\n  \\n You can also use <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command. For example, you might call <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> and modify command text, and then explicitly set that on the <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated either when the application calls <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>.  \\n  \\n The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter allows you to force the <xref:System.Data.Common.DbCommandBuilder> to generate parameters based on the column names instead. Generation of the parameters based on column names succeeds only if the following conditions are met:  \\n  \\n-   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> has been specified and its length is equal to or greater than the generated parameter name.  \\n  \\n-   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> regular expression.  \\n  \\n-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> is specified.\"\n  syntax:\n    content: public System.Data.Common.DbCommand GetUpdateCommand (bool useColumnsForParameterNames);\n    parameters:\n    - id: useColumnsForParameterNames\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, generate parameter names matching column names, if possible. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, generate @p1, @p2, and so on.\n    return:\n      type: System.Data.Common.DbCommand\n      description: The automatically generated <xref href=\"System.Data.Common.DbCommand\"></xref> object required to perform updates.\n  overload: System.Data.Common.DbCommandBuilder.GetUpdateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)\n  id: InitializeCommand(System.Data.Common.DbCommand)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: InitializeCommand(DbCommand)\n  nameWithType: DbCommandBuilder.InitializeCommand(DbCommand)\n  fullName: System.Data.Common.DbCommandBuilder.InitializeCommand(DbCommand)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Resets the <xref:System.Data.Common.DbCommand.CommandTimeout*>, <xref:System.Data.Common.DbCommand.Transaction*>, <xref:System.Data.Common.DbCommand.CommandType*>, and <xref href=\"System.Data.UpdateRowSource\"></xref> properties on the <xref href=\"System.Data.Common.DbCommand\"></xref>.\n  remarks: This method is intended for use by provider writers building a custom command builder.\n  syntax:\n    content: protected virtual System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);\n    parameters:\n    - id: command\n      type: System.Data.Common.DbCommand\n      description: The <xref href=\"System.Data.Common.DbCommand\"></xref> to be used by the command builder for the corresponding insert, update, or delete command.\n    return:\n      type: System.Data.Common.DbCommand\n      description: A <xref href=\"System.Data.Common.DbCommand\"></xref> instance to use for each insert, update, or delete operation. Passing a null value allows the InitializeCommand method to create a <xref href=\"System.Data.Common.DbCommand\"></xref> object based on the Select command associated with the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>.\n  overload: System.Data.Common.DbCommandBuilder.InitializeCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)\n  id: QuoteIdentifier(System.String)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: QuoteIdentifier(String)\n  nameWithType: DbCommandBuilder.QuoteIdentifier(String)\n  fullName: System.Data.Common.DbCommandBuilder.QuoteIdentifier(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.\n  syntax:\n    content: public virtual string QuoteIdentifier (string unquotedIdentifier);\n    parameters:\n    - id: unquotedIdentifier\n      type: System.String\n      description: The original unquoted identifier.\n    return:\n      type: System.String\n      description: The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.\n  overload: System.Data.Common.DbCommandBuilder.QuoteIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.QuotePrefix\n  id: QuotePrefix\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: QuotePrefix\n  nameWithType: DbCommandBuilder.QuotePrefix\n  fullName: System.Data.Common.DbCommandBuilder.QuotePrefix\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.\n  remarks: \"Some data sources may have objects that can contain characters such as spaces, commas, and semicolons. To accommodate this capability, use the QuotePrefix and <xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A> properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.  \\n  \\n> [!NOTE]\\n>  Although you cannot change the QuotePrefix or <xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a <xref:System.Data.Common.DbDataAdapter>.\"\n  syntax:\n    content: public virtual string QuotePrefix { get; set; }\n    return:\n      type: System.String\n      description: The beginning character or characters to use. The default is an empty string.\n  overload: System.Data.Common.DbCommandBuilder.QuotePrefix*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This property cannot be changed after an insert, update, or delete command has been generated.\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.QuoteSuffix\n  id: QuoteSuffix\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: QuoteSuffix\n  nameWithType: DbCommandBuilder.QuoteSuffix\n  fullName: System.Data.Common.DbCommandBuilder.QuoteSuffix\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.\n  remarks: \"Some data sources may have objects that can contain characters such as spaces, commas, and semicolons. To accommodate this capability, use the <xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A> and QuoteSuffix properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.  \\n  \\n> [!NOTE]\\n>  Although you cannot change the <xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A> or QuoteSuffix properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a <xref:System.Data.Common.DbDataAdapter>.\"\n  syntax:\n    content: public virtual string QuoteSuffix { get; set; }\n    return:\n      type: System.String\n      description: The ending character or characters to use. The default is an empty string.\n  overload: System.Data.Common.DbCommandBuilder.QuoteSuffix*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.RefreshSchema\n  id: RefreshSchema\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: RefreshSchema()\n  nameWithType: DbCommandBuilder.RefreshSchema()\n  fullName: System.Data.Common.DbCommandBuilder.RefreshSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Clears the commands associated with this <xref href=\"System.Data.Common.DbCommandBuilder\"></xref>.\n  remarks: \"Calling the RefreshSchema method effectively removes all the <xref:System.Data.Common.DbCommand> objects referred to by the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>,  \\n  \\n <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>,  \\n  \\n <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A>, and  \\n  \\n <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A> properties.\"\n  syntax:\n    content: public virtual void RefreshSchema ();\n    parameters: []\n  overload: System.Data.Common.DbCommandBuilder.RefreshSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)\n  id: RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: RowUpdatingHandler(RowUpdatingEventArgs)\n  nameWithType: DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)\n  fullName: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds an event handler for the <xref href=\"System.Data.OleDb.OleDbDataAdapter.RowUpdating\"></xref> event.\n  syntax:\n    content: protected void RowUpdatingHandler (System.Data.Common.RowUpdatingEventArgs rowUpdatingEvent);\n    parameters:\n    - id: rowUpdatingEvent\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: A <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> instance containing information about the event.\n  overload: System.Data.Common.DbCommandBuilder.RowUpdatingHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.SchemaSeparator\n  id: SchemaSeparator\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: SchemaSeparator\n  nameWithType: DbCommandBuilder.SchemaSeparator\n  fullName: System.Data.Common.DbCommandBuilder.SchemaSeparator\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.\n  remarks: Generally, database servers indicate the schema for an identifier by separating the schema name from the identifier with some character. For example, SQL Server uses a colon, creating complete identifiers such as **Person:CustomerName**, where \"Person\" is the schema name and \"CustomerName\" is the identifier. Setting this property allows developers to modify this behavior.\n  syntax:\n    content: public virtual string SchemaSeparator { get; set; }\n    return:\n      type: System.String\n      description: The character to be used as the schema separator.\n  overload: System.Data.Common.DbCommandBuilder.SchemaSeparator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.SetAllValues\n  id: SetAllValues\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: SetAllValues\n  nameWithType: DbCommandBuilder.SetAllValues\n  fullName: System.Data.Common.DbCommandBuilder.SetAllValues\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Specifies whether all column values in an update statement are included or only changed ones.\n  remarks: The UPDATE statement generated by a <xref:System.Data.Common.DbCommandBuilder> can include update information about all the columns, or it can include information only about those columns whose values have changed. Setting the SetAllValues property to `true` causes the generated UPDATE statement to include all the columns, whether their values have changed or not.\n  syntax:\n    content: public bool SetAllValues { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the UPDATE statement generated by the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> includes all columns; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it includes only changed columns.\n  overload: System.Data.Common.DbCommandBuilder.SetAllValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)\n  id: SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: SetRowUpdatingHandler(DbDataAdapter)\n  nameWithType: DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)\n  fullName: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Registers the <xref href=\"System.Data.Common.DbCommandBuilder\"></xref> to handle the <xref href=\"System.Data.OleDb.OleDbDataAdapter.RowUpdating\"></xref> event for a <xref href=\"System.Data.Common.DbDataAdapter\"></xref>.\n  remarks: This method is intended for use by provider writers building a custom command builder. When a new <xref:System.Data.Common.DbDataAdapter> is added to the <xref:System.Data.Common.DbCommandBuilder>, it is registered for the DbDataAdapter's **RowUpdating** event. If this method is called again with the same <xref:System.Data.Common.DbDataAdapter>, the <xref:System.Data.Common.DbCommandBuilder> is unregistered for that DbDataAdapter's **RowUpdating** event.\n  syntax:\n    content: protected abstract void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);\n    parameters:\n    - id: adapter\n      type: System.Data.Common.DbDataAdapter\n      description: The <xref href=\"System.Data.Common.DbDataAdapter\"></xref> to be used for the update.\n  overload: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)\n  id: UnquoteIdentifier(System.String)\n  parent: System.Data.Common.DbCommandBuilder\n  langs:\n  - csharp\n  name: UnquoteIdentifier(String)\n  nameWithType: DbCommandBuilder.UnquoteIdentifier(String)\n  fullName: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.\n  syntax:\n    content: public virtual string UnquoteIdentifier (string quotedIdentifier);\n    parameters:\n    - id: quotedIdentifier\n      type: System.String\n      description: The identifier that will have its embedded quotes removed.\n    return:\n      type: System.String\n      description: The unquoted identifier, with embedded quotes properly un-escaped.\n  overload: System.Data.Common.DbCommandBuilder.UnquoteIdentifier*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Data.Common.DbCommandBuilder.#ctor\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: DbCommandBuilder()\n  nameWithType: DbCommandBuilder.DbCommandBuilder()\n  fullName: System.Data.Common.DbCommandBuilder.DbCommandBuilder()\n- uid: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)\n  nameWithType: DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)\n- uid: System.Data.Common.DbParameter\n  parent: System.Data.Common\n  isExternal: false\n  name: DbParameter\n  nameWithType: DbParameter\n  fullName: System.Data.Common.DbParameter\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.StatementType\n  parent: System.Data\n  isExternal: false\n  name: StatementType\n  nameWithType: StatementType\n  fullName: System.Data.StatementType\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Common.DbCommandBuilder.CatalogLocation\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: CatalogLocation\n  nameWithType: DbCommandBuilder.CatalogLocation\n  fullName: System.Data.Common.DbCommandBuilder.CatalogLocation\n- uid: System.Data.Common.CatalogLocation\n  parent: System.Data.Common\n  isExternal: false\n  name: CatalogLocation\n  nameWithType: CatalogLocation\n  fullName: System.Data.Common.CatalogLocation\n- uid: System.Data.Common.DbCommandBuilder.CatalogSeparator\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: CatalogSeparator\n  nameWithType: DbCommandBuilder.CatalogSeparator\n  fullName: System.Data.Common.DbCommandBuilder.CatalogSeparator\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Common.DbCommandBuilder.ConflictOption\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: ConflictOption\n  nameWithType: DbCommandBuilder.ConflictOption\n  fullName: System.Data.Common.DbCommandBuilder.ConflictOption\n- uid: System.Data.ConflictOption\n  parent: System.Data\n  isExternal: false\n  name: ConflictOption\n  nameWithType: ConflictOption\n  fullName: System.Data.ConflictOption\n- uid: System.Data.Common.DbCommandBuilder.DataAdapter\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: DataAdapter\n  nameWithType: DbCommandBuilder.DataAdapter\n  fullName: System.Data.Common.DbCommandBuilder.DataAdapter\n- uid: System.Data.Common.DbDataAdapter\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataAdapter\n  nameWithType: DbDataAdapter\n  fullName: System.Data.Common.DbDataAdapter\n- uid: System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DbCommandBuilder.Dispose(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.Dispose(Boolean)\n- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetDeleteCommand()\n  nameWithType: DbCommandBuilder.GetDeleteCommand()\n  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand()\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  nameWithType: DbCommand\n  fullName: System.Data.Common.DbCommand\n- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetDeleteCommand(Boolean)\n  nameWithType: DbCommandBuilder.GetDeleteCommand(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand(Boolean)\n- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetInsertCommand()\n  nameWithType: DbCommandBuilder.GetInsertCommand()\n  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand()\n- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetInsertCommand(Boolean)\n  nameWithType: DbCommandBuilder.GetInsertCommand(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand(Boolean)\n- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetParameterName(Int32)\n  nameWithType: DbCommandBuilder.GetParameterName(Int32)\n  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.String)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetParameterName(String)\n  nameWithType: DbCommandBuilder.GetParameterName(String)\n  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(String)\n- uid: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetParameterPlaceholder(Int32)\n  nameWithType: DbCommandBuilder.GetParameterPlaceholder(Int32)\n  fullName: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(Int32)\n- uid: System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetSchemaTable(DbCommand)\n  nameWithType: DbCommandBuilder.GetSchemaTable(DbCommand)\n  fullName: System.Data.Common.DbCommandBuilder.GetSchemaTable(DbCommand)\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetUpdateCommand()\n  nameWithType: DbCommandBuilder.GetUpdateCommand()\n  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand()\n- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetUpdateCommand(Boolean)\n  nameWithType: DbCommandBuilder.GetUpdateCommand(Boolean)\n  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand(Boolean)\n- uid: System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: InitializeCommand(DbCommand)\n  nameWithType: DbCommandBuilder.InitializeCommand(DbCommand)\n  fullName: System.Data.Common.DbCommandBuilder.InitializeCommand(DbCommand)\n- uid: System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: QuoteIdentifier(String)\n  nameWithType: DbCommandBuilder.QuoteIdentifier(String)\n  fullName: System.Data.Common.DbCommandBuilder.QuoteIdentifier(String)\n- uid: System.Data.Common.DbCommandBuilder.QuotePrefix\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: QuotePrefix\n  nameWithType: DbCommandBuilder.QuotePrefix\n  fullName: System.Data.Common.DbCommandBuilder.QuotePrefix\n- uid: System.Data.Common.DbCommandBuilder.QuoteSuffix\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: QuoteSuffix\n  nameWithType: DbCommandBuilder.QuoteSuffix\n  fullName: System.Data.Common.DbCommandBuilder.QuoteSuffix\n- uid: System.Data.Common.DbCommandBuilder.RefreshSchema\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: RefreshSchema()\n  nameWithType: DbCommandBuilder.RefreshSchema()\n  fullName: System.Data.Common.DbCommandBuilder.RefreshSchema()\n- uid: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: RowUpdatingHandler(RowUpdatingEventArgs)\n  nameWithType: DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)\n  fullName: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)\n- uid: System.Data.Common.RowUpdatingEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatingEventArgs\n  nameWithType: RowUpdatingEventArgs\n  fullName: System.Data.Common.RowUpdatingEventArgs\n- uid: System.Data.Common.DbCommandBuilder.SchemaSeparator\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: SchemaSeparator\n  nameWithType: DbCommandBuilder.SchemaSeparator\n  fullName: System.Data.Common.DbCommandBuilder.SchemaSeparator\n- uid: System.Data.Common.DbCommandBuilder.SetAllValues\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: SetAllValues\n  nameWithType: DbCommandBuilder.SetAllValues\n  fullName: System.Data.Common.DbCommandBuilder.SetAllValues\n- uid: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: SetRowUpdatingHandler(DbDataAdapter)\n  nameWithType: DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)\n  fullName: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)\n- uid: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: UnquoteIdentifier(String)\n  nameWithType: DbCommandBuilder.UnquoteIdentifier(String)\n  fullName: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(String)\n- uid: System.Data.Common.DbCommandBuilder.#ctor*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: DbCommandBuilder\n  nameWithType: DbCommandBuilder.DbCommandBuilder\n- uid: System.Data.Common.DbCommandBuilder.ApplyParameterInfo*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: ApplyParameterInfo\n  nameWithType: DbCommandBuilder.ApplyParameterInfo\n- uid: System.Data.Common.DbCommandBuilder.CatalogLocation*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: CatalogLocation\n  nameWithType: DbCommandBuilder.CatalogLocation\n- uid: System.Data.Common.DbCommandBuilder.CatalogSeparator*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: CatalogSeparator\n  nameWithType: DbCommandBuilder.CatalogSeparator\n- uid: System.Data.Common.DbCommandBuilder.ConflictOption*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: ConflictOption\n  nameWithType: DbCommandBuilder.ConflictOption\n- uid: System.Data.Common.DbCommandBuilder.DataAdapter*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: DataAdapter\n  nameWithType: DbCommandBuilder.DataAdapter\n- uid: System.Data.Common.DbCommandBuilder.Dispose*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: Dispose\n  nameWithType: DbCommandBuilder.Dispose\n- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetDeleteCommand\n  nameWithType: DbCommandBuilder.GetDeleteCommand\n- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetInsertCommand\n  nameWithType: DbCommandBuilder.GetInsertCommand\n- uid: System.Data.Common.DbCommandBuilder.GetParameterName*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetParameterName\n  nameWithType: DbCommandBuilder.GetParameterName\n- uid: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetParameterPlaceholder\n  nameWithType: DbCommandBuilder.GetParameterPlaceholder\n- uid: System.Data.Common.DbCommandBuilder.GetSchemaTable*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetSchemaTable\n  nameWithType: DbCommandBuilder.GetSchemaTable\n- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: GetUpdateCommand\n  nameWithType: DbCommandBuilder.GetUpdateCommand\n- uid: System.Data.Common.DbCommandBuilder.InitializeCommand*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: InitializeCommand\n  nameWithType: DbCommandBuilder.InitializeCommand\n- uid: System.Data.Common.DbCommandBuilder.QuoteIdentifier*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: QuoteIdentifier\n  nameWithType: DbCommandBuilder.QuoteIdentifier\n- uid: System.Data.Common.DbCommandBuilder.QuotePrefix*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: QuotePrefix\n  nameWithType: DbCommandBuilder.QuotePrefix\n- uid: System.Data.Common.DbCommandBuilder.QuoteSuffix*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: QuoteSuffix\n  nameWithType: DbCommandBuilder.QuoteSuffix\n- uid: System.Data.Common.DbCommandBuilder.RefreshSchema*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: RefreshSchema\n  nameWithType: DbCommandBuilder.RefreshSchema\n- uid: System.Data.Common.DbCommandBuilder.RowUpdatingHandler*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: RowUpdatingHandler\n  nameWithType: DbCommandBuilder.RowUpdatingHandler\n- uid: System.Data.Common.DbCommandBuilder.SchemaSeparator*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: SchemaSeparator\n  nameWithType: DbCommandBuilder.SchemaSeparator\n- uid: System.Data.Common.DbCommandBuilder.SetAllValues*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: SetAllValues\n  nameWithType: DbCommandBuilder.SetAllValues\n- uid: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: SetRowUpdatingHandler\n  nameWithType: DbCommandBuilder.SetRowUpdatingHandler\n- uid: System.Data.Common.DbCommandBuilder.UnquoteIdentifier*\n  parent: System.Data.Common.DbCommandBuilder\n  isExternal: false\n  name: UnquoteIdentifier\n  nameWithType: DbCommandBuilder.UnquoteIdentifier\n"}