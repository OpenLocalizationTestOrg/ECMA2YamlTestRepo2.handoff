{"nodes":[{"pos":[1115,1286],"content":"Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides properties and methods to add a license to a component and to manage a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,139],"source":"Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>."},{"content":"This class cannot be inherited.","pos":[140,171]}]},{"pos":[1299,2666],"content":"The LicenseManager class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>. The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.       When you create a component that you want to license, you must do the following:      1.  Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.      2.  Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.      3.  Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.       For more information on licensing, see [How to: License Components and Controls](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The LicenseManager class provides the following <ph id=\"ph1\">`static`</ph> properties: &lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt; and &lt;xref:System.ComponentModel.LicenseManager.UsageMode%2A&gt;.","pos":[0,192],"source":"The LicenseManager class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>."},{"content":"The class also provides the following <ph id=\"ph1\">`static`</ph> methods: &lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;, &lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;, and &lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;.","pos":[193,431],"source":" The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>."},{"content":"When you create a component that you want to license, you must do the following:      1.","pos":[438,526]},{"content":"Specify the &lt;xref:System.ComponentModel.LicenseProvider&gt; by marking the component with a &lt;xref:System.ComponentModel.LicenseProviderAttribute&gt;.","pos":[528,671],"source":"  Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>."},{"content":"2.","pos":[677,679]},{"content":"Call &lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt; or &lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt; in the constructor of the component.","pos":[681,836],"source":"  Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component."},{"content":"&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt; throws a &lt;xref:System.ComponentModel.LicenseException&gt; when it tries to create an instance without a valid license.","pos":[837,1008],"source":" <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license."},{"content":"&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt; does not throw an exception.","pos":[1009,1092],"source":" <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception."},{"content":"3.","pos":[1098,1100]},{"content":"Call &lt;xref:System.ComponentModel.License.Dispose%2A&gt; on any license that is granted when the component is disposed or finalized.","pos":[1102,1230],"source":"  Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized."},{"content":"For more information on licensing, see <bpt id=\"p1\">[</bpt>How to: License Components and Controls<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1237,1357],"source":"       For more information on licensing, see [How to: License Components and Controls](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[3980,4082],"content":"Creates an instance of the specified type, given a context in which you can use the licensed instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of the specified type, given a context in which you can use the licensed instance.","pos":[0,102]}]},{"pos":[4094,4552],"content":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. The CreateWithContext method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing CreateWithContext to behave as an atomic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ComponentModel.LicenseContext&gt; you specify as the <ph id=\"ph1\">`creationContext`</ph> parameter is used as the &lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt; for the life of this &lt;xref:System.ComponentModel.License&gt;.","pos":[0,230],"source":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>."},{"content":"The CreateWithContext method blocks all other threads in the &lt;xref:System.AppDomain&gt; from modifying the &lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;, allowing CreateWithContext to behave as an atomic operation.","pos":[231,458],"source":" The CreateWithContext method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing CreateWithContext to behave as an atomic operation."}]},{"pos":[4756,4812],"content":"A <xref:System.Type> that represents the type to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type to create.","pos":[0,56],"source":"A <xref:System.Type> that represents the type to create."}]},{"pos":[4907,5021],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies when you can use the licensed instance.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance."},{"pos":[5079,5113],"content":"An instance of the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the specified type.","pos":[0,34]}]},{"pos":[5825,5956],"content":"Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.","pos":[0,131]}]},{"pos":[5968,6456],"content":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ComponentModel.LicenseContext&gt; you specify as the <ph id=\"ph1\">`creationContext`</ph> parameter is used as the &lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt; for the life of this &lt;xref:System.ComponentModel.License&gt;.","pos":[0,230],"source":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>."},{"content":"This method blocks all other threads in the &lt;xref:System.AppDomain&gt; from modifying the &lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;, allowing &lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt; to behave as an atomic operation.","pos":[231,488],"source":" This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation."}]},{"pos":[6675,6731],"content":"A <xref:System.Type> that represents the type to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type to create.","pos":[0,56],"source":"A <xref:System.Type> that represents the type to create."}]},{"pos":[6826,6940],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies when you can use the licensed instance.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance."},{"pos":[7003,7084],"content":"An array of type <xref:System.Object> that represents the arguments for the type.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Object&gt; that represents the arguments for the type.","pos":[0,81],"source":"An array of type <xref:System.Object> that represents the arguments for the type."}]},{"pos":[7142,7210],"content":"An instance of the specified type with the given array of arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the specified type with the given array of arguments.","pos":[0,68]}]},{"pos":[7687,7824],"content":"Gets or sets the current <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which specifies when you can use the licensed object.","needQuote":true,"needEscape":true,"source":"Gets or sets the current <xref href=\"System.ComponentModel.LicenseContext\"></xref>, which specifies when you can use the licensed object."},{"pos":[7836,8245],"content":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.","pos":[0,409],"nodes":[{"content":"When the user requests a valid &lt;xref:System.ComponentModel.License&gt;, the user must give the context in which the &lt;xref:System.ComponentModel.License&gt; is valid to the &lt;xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName&gt; method.","pos":[0,257],"source":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method."},{"content":"The &lt;xref:System.ComponentModel.LicenseContext&gt; returned by this property should be passed to all &lt;xref:System.ComponentModel.LicenseProvider&gt; classes.","pos":[258,409],"source":" The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes."}]}]},{"pos":[8429,8541],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies when you can use the licensed object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed object."},{"pos":[8731,8801],"content":"The CurrentContext property is currently locked and cannot be changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CurrentContext property is currently locked and cannot be changed.","pos":[0,70]}]},{"pos":[9215,9266],"content":"Returns whether the given type has a valid license.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns whether the given type has a valid license.","pos":[0,51]}]},{"pos":[9407,9458],"content":"The <xref:System.Type> to find a valid license for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; to find a valid license for.","pos":[0,51],"source":"The <xref:System.Type> to find a valid license for."}]},{"pos":[9517,9683],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the given type is licensed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the given type is licensed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10160,10233],"content":"Determines whether a valid license can be granted for the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a valid license can be granted for the specified type.","pos":[0,73]}]},{"pos":[10246,10594],"content":"The IsValid method returns `true` when the type is either not licensed, or is licensed and the license is valid.       This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.","needQuote":false,"needEscape":true,"nodes":[{"content":"The IsValid method returns <ph id=\"ph1\">`true`</ph> when the type is either not licensed, or is licensed and the license is valid.","pos":[0,112],"source":"The IsValid method returns `true` when the type is either not licensed, or is licensed and the license is valid."},{"content":"This method does not throw a &lt;xref:System.ComponentModel.LicenseException&gt; when it cannot grant a valid &lt;xref:System.ComponentModel.License&gt;.","pos":[119,260],"source":"       This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>."},{"content":"The &lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt; method throws exceptions.","pos":[261,346],"source":" The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions."}]},{"pos":[10733,10858],"content":"A &lt;xref:System.Type&gt; that represents the type of object that requests the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Type> that represents the type of object that requests the <xref href=\"System.ComponentModel.License\"></xref>."},{"pos":[10917,11087],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a valid license can be granted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a valid license can be granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11696,11865],"content":"Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a valid license can be granted for the specified instance of the type.","pos":[0,89]},{"content":"This method creates a valid <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,169],"source":" This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>."}]},{"pos":[11878,12568],"content":"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.       This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.       If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt; method returns <ph id=\"ph1\">`true`</ph> when the <ph id=\"ph2\">`type`</ph> parameter is not licensed, or when it is licensed and the <ph id=\"ph3\">`license`</ph> parameter is valid.","pos":[0,184],"source":"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid."},{"content":"This method does not throw a &lt;xref:System.ComponentModel.LicenseException&gt; when it cannot grant a valid &lt;xref:System.ComponentModel.License&gt;.","pos":[191,332],"source":"       This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>."},{"content":"The &lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt; method throws exceptions.","pos":[333,418],"source":" The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions."},{"content":"If the <ph id=\"ph1\">`license`</ph> parameter is not <ph id=\"ph2\">`null`</ph> after this call, the object asking for a &lt;xref:System.ComponentModel.License&gt; must dispose of the license by calling the &lt;xref:System.ComponentModel.License.Dispose%2A&gt; method when the object is disposed of or finalized.","pos":[425,686],"source":"       If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized."}]},{"pos":[12767,12849],"content":"A <xref:System.Type> that represents the type of object that requests the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type of object that requests the license.","pos":[0,82],"source":"A <xref:System.Type> that represents the type of object that requests the license."}]},{"pos":[12914,12988],"content":"An object of the specified type or a type derived from the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object of the specified type or a type derived from the specified type.","pos":[0,74]}]},{"pos":[13068,13247],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is a valid license, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if a valid license cannot be granted.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.License\"></xref> that is a valid license, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a valid license cannot be granted."},{"pos":[13306,13519],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a valid <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> can be granted; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a valid <xref href=\"System.ComponentModel.License\"></xref> can be granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14023,14144],"content":"Prevents changes being made to the current <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the given object.","needQuote":true,"needEscape":true,"source":"Prevents changes being made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object."},{"pos":[14156,14410],"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.","pos":[0,254],"nodes":[{"content":"Use the &lt;xref:System.ComponentModel.LicenseContext&gt; to get the &lt;xref:System.ComponentModel.License&gt; of an object.","pos":[0,113],"source":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object."},{"content":"This method locks the &lt;xref:System.ComponentModel.LicenseContext&gt;, preventing the &lt;xref:System.ComponentModel.License&gt; from being retrieved.","pos":[114,254],"source":" This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved."}]}]},{"pos":[14570,14620],"content":"The object whose current context you want to lock.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object whose current context you want to lock.","pos":[0,50]}]},{"pos":[14807,14837],"content":"The context is already locked.","needQuote":true,"needEscape":true,"nodes":[{"content":"The context is already locked.","pos":[0,30]}]},{"pos":[15276,15395],"content":"Allows changes to be made to the current <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the given object.","needQuote":true,"needEscape":true,"source":"Allows changes to be made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object."},{"pos":[15407,15656],"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.","pos":[0,249],"nodes":[{"content":"Use the &lt;xref:System.ComponentModel.LicenseContext&gt; to get the &lt;xref:System.ComponentModel.License&gt; of an object.","pos":[0,113],"source":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object."},{"content":"This method unlocks the &lt;xref:System.ComponentModel.LicenseContext&gt;, allowing the &lt;xref:System.ComponentModel.License&gt; to be retrieved.","pos":[114,249],"source":" This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved."}]}]},{"pos":[15818,15870],"content":"The object whose current context you want to unlock.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object whose current context you want to unlock.","pos":[0,52]}]},{"pos":[16043,16198],"content":"<ph id=\"ph1\">&lt;code&gt;contextUser&lt;/code&gt;</ph> represents a different user than the one specified in a previous call to <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseManager.LockContext*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>contextUser</code> represents a different user than the one specified in a previous call to <xref:System.ComponentModel.LicenseManager.LockContext*>."},{"pos":[16565,16755],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> which specifies when you can use the licensed object for the &lt;xref:System.ComponentModel.LicenseManager.CurrentContext*&gt;.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> which specifies when you can use the licensed object for the <xref:System.ComponentModel.LicenseManager.CurrentContext*>."},{"pos":[16767,16924],"content":"If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode>.","needQuote":true,"needEscape":true,"nodes":[{"content":"If this property cannot find a &lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt; value, it returns &lt;xref:System.ComponentModel.LicenseUsageMode&gt;.","pos":[0,157],"source":"If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode>."}]},{"pos":[17102,17270],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, as specified in the &lt;xref:System.ComponentModel.LicenseManager.CurrentContext*&gt; property.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values, as specified in the <xref:System.ComponentModel.LicenseManager.CurrentContext*> property."},{"pos":[17751,17818],"content":"Determines whether a license can be granted for the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a license can be granted for the specified type.","pos":[0,67]}]},{"pos":[17830,18060],"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","pos":[0,230],"nodes":[{"content":"This method throws a &lt;xref:System.ComponentModel.LicenseException&gt; when a valid &lt;xref:System.ComponentModel.License&gt; cannot be granted.","pos":[0,135],"source":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted."},{"content":"The &lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt; method does not throw an exception.","pos":[136,230],"source":" The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception."}]}]},{"pos":[18199,18281],"content":"A <xref:System.Type> that represents the type of object that requests the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type of object that requests the license.","pos":[0,82],"source":"A <xref:System.Type> that represents the type of object that requests the license."}]},{"pos":[18477,18548],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be granted.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.License\"></xref> cannot be granted."},{"pos":[19001,19084],"content":"Determines whether a license can be granted for the instance of the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a license can be granted for the instance of the specified type.","pos":[0,83]}]},{"pos":[19097,19540],"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.       All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.       All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.","pos":[0,441],"nodes":[{"content":"This method throws a &lt;xref:System.ComponentModel.LicenseException&gt; when a valid &lt;xref:System.ComponentModel.License&gt; cannot be granted.","pos":[0,135],"source":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted."},{"content":"The &lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt; method does not throw an exception.","pos":[136,230],"source":" The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception."},{"content":"All objects asking for a &lt;xref:System.ComponentModel.License&gt; must dispose of the license by calling the &lt;xref:System.ComponentModel.License.Dispose%2A&gt; method when the object is disposed of or finalized.","pos":[237,441],"source":"       All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized."}]}]},{"pos":[19722,19804],"content":"A <xref:System.Type> that represents the type of object that requests the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type of object that requests the license.","pos":[0,82],"source":"A <xref:System.Type> that represents the type of object that requests the license."}]},{"pos":[19869,19957],"content":"An <xref:System.Object> of the specified type or a type derived from the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; of the specified type or a type derived from the specified type.","pos":[0,88],"source":"An <xref:System.Object> of the specified type or a type derived from the specified type."}]},{"pos":[20031,20090],"content":"A valid <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A valid <xref href=\"System.ComponentModel.License\"></xref>."},{"pos":[20286,20383],"content":"The type is licensed, but a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.License\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be granted.","needQuote":true,"needEscape":true,"source":"The type is licensed, but a <xref href=\"System.ComponentModel.License\"></xref> cannot be granted."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicenseManager\n  id: LicenseManager\n  children:\n  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  - System.ComponentModel.LicenseManager.CurrentContext\n  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  - System.ComponentModel.LicenseManager.IsValid(System.Type)\n  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  - System.ComponentModel.LicenseManager.LockContext(System.Object)\n  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  - System.ComponentModel.LicenseManager.UsageMode\n  - System.ComponentModel.LicenseManager.Validate(System.Type)\n  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  langs:\n  - csharp\n  name: LicenseManager\n  nameWithType: LicenseManager\n  fullName: System.ComponentModel.LicenseManager\n  type: Class\n  summary: Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. This class cannot be inherited.\n  remarks: \"The LicenseManager class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>. The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.  \\n  \\n When you create a component that you want to license, you must do the following:  \\n  \\n1.  Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.  \\n  \\n2.  Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.  \\n  \\n3.  Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.  \\n  \\n For more information on licensing, see [How to: License Components and Controls](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \\n  \\n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]\"\n  syntax:\n    content: public sealed class LicenseManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: CreateWithContext(Type,LicenseContext)\n  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)\n  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Creates an instance of the specified type, given a context in which you can use the licensed instance.\n  remarks: The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. The CreateWithContext method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing CreateWithContext to behave as an atomic operation.\n  syntax:\n    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type to create.\n    - id: creationContext\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance.\n    return:\n      type: System.Object\n      description: An instance of the specified type.\n  overload: System.ComponentModel.LicenseManager.CreateWithContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: CreateWithContext(Type,LicenseContext,Object[])\n  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])\n  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.\n  remarks: The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.\n  syntax:\n    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type to create.\n    - id: creationContext\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance.\n    - id: args\n      type: System.Object[]\n      description: An array of type <xref:System.Object> that represents the arguments for the type.\n    return:\n      type: System.Object\n      description: An instance of the specified type with the given array of arguments.\n  overload: System.ComponentModel.LicenseManager.CreateWithContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.CurrentContext\n  id: CurrentContext\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: CurrentContext\n  nameWithType: LicenseManager.CurrentContext\n  fullName: System.ComponentModel.LicenseManager.CurrentContext\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets or sets the current <xref href=\"System.ComponentModel.LicenseContext\"></xref>, which specifies when you can use the licensed object.\n  remarks: When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.\n  syntax:\n    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }\n    return:\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed object.\n  overload: System.ComponentModel.LicenseManager.CurrentContext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The CurrentContext property is currently locked and cannot be changed.\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  id: IsLicensed(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: IsLicensed(Type)\n  nameWithType: LicenseManager.IsLicensed(Type)\n  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns whether the given type has a valid license.\n  syntax:\n    content: public static bool IsLicensed (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref:System.Type> to find a valid license for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the given type is licensed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.LicenseManager.IsLicensed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)\n  id: IsValid(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: IsValid(Type)\n  nameWithType: LicenseManager.IsValid(Type)\n  fullName: System.ComponentModel.LicenseManager.IsValid(Type)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether a valid license can be granted for the specified type.\n  remarks: \"The IsValid method returns `true` when the type is either not licensed, or is licensed and the license is valid.  \\n  \\n This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.\"\n  syntax:\n    content: public static bool IsValid (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type of object that requests the <xref href=\"System.ComponentModel.License\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a valid license can be granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.LicenseManager.IsValid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: IsValid(Type,Object,License)\n  nameWithType: LicenseManager.IsValid(Type,Object,License)\n  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>.\n  remarks: \"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.  \\n  \\n This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.  \\n  \\n If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.\"\n  syntax:\n    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type of object that requests the license.\n    - id: instance\n      type: System.Object\n      description: An object of the specified type or a type derived from the specified type.\n    - id: license\n      type: System.ComponentModel.License\n      description: A <xref href=\"System.ComponentModel.License\"></xref> that is a valid license, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a valid license cannot be granted.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a valid <xref href=\"System.ComponentModel.License\"></xref> can be granted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.LicenseManager.IsValid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)\n  id: LockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: LockContext(Object)\n  nameWithType: LicenseManager.LockContext(Object)\n  fullName: System.ComponentModel.LicenseManager.LockContext(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Prevents changes being made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object.\n  remarks: Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.\n  syntax:\n    content: public static void LockContext (object contextUser);\n    parameters:\n    - id: contextUser\n      type: System.Object\n      description: The object whose current context you want to lock.\n  overload: System.ComponentModel.LicenseManager.LockContext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The context is already locked.\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  id: UnlockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: UnlockContext(Object)\n  nameWithType: LicenseManager.UnlockContext(Object)\n  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Allows changes to be made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object.\n  remarks: Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.\n  syntax:\n    content: public static void UnlockContext (object contextUser);\n    parameters:\n    - id: contextUser\n      type: System.Object\n      description: The object whose current context you want to unlock.\n  overload: System.ComponentModel.LicenseManager.UnlockContext*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>contextUser</code> represents a different user than the one specified in a previous call to <xref:System.ComponentModel.LicenseManager.LockContext*>.\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.UsageMode\n  id: UsageMode\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: UsageMode\n  nameWithType: LicenseManager.UsageMode\n  fullName: System.ComponentModel.LicenseManager.UsageMode\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> which specifies when you can use the licensed object for the <xref:System.ComponentModel.LicenseManager.CurrentContext*>.\n  remarks: If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode>.\n  syntax:\n    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }\n    return:\n      type: System.ComponentModel.LicenseUsageMode\n      description: One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values, as specified in the <xref:System.ComponentModel.LicenseManager.CurrentContext*> property.\n  overload: System.ComponentModel.LicenseManager.UsageMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type)\n  id: Validate(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: Validate(Type)\n  nameWithType: LicenseManager.Validate(Type)\n  fullName: System.ComponentModel.LicenseManager.Validate(Type)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether a license can be granted for the specified type.\n  remarks: This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.\n  syntax:\n    content: public static void Validate (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type of object that requests the license.\n  overload: System.ComponentModel.LicenseManager.Validate*\n  exceptions:\n  - type: System.ComponentModel.LicenseException\n    commentId: T:System.ComponentModel.LicenseException\n    description: A <xref href=\"System.ComponentModel.License\"></xref> cannot be granted.\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  id: Validate(System.Type,System.Object)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: Validate(Type,Object)\n  nameWithType: LicenseManager.Validate(Type,Object)\n  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether a license can be granted for the instance of the specified type.\n  remarks: \"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.  \\n  \\n All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.\"\n  syntax:\n    content: public static System.ComponentModel.License Validate (Type type, object instance);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type of object that requests the license.\n    - id: instance\n      type: System.Object\n      description: An <xref:System.Object> of the specified type or a type derived from the specified type.\n    return:\n      type: System.ComponentModel.License\n      description: A valid <xref href=\"System.ComponentModel.License\"></xref>.\n  overload: System.ComponentModel.LicenseManager.Validate*\n  exceptions:\n  - type: System.ComponentModel.LicenseException\n    commentId: T:System.ComponentModel.LicenseException\n    description: The type is licensed, but a <xref href=\"System.ComponentModel.License\"></xref> cannot be granted.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ComponentModel.LicenseException\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseException\n  nameWithType: LicenseException\n  fullName: System.ComponentModel.LicenseException\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CreateWithContext(Type,LicenseContext)\n  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)\n  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.LicenseContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CreateWithContext(Type,LicenseContext,Object[])\n  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])\n  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.LicenseManager.CurrentContext\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CurrentContext\n  nameWithType: LicenseManager.CurrentContext\n  fullName: System.ComponentModel.LicenseManager.CurrentContext\n- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsLicensed(Type)\n  nameWithType: LicenseManager.IsLicensed(Type)\n  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsValid(Type)\n  nameWithType: LicenseManager.IsValid(Type)\n  fullName: System.ComponentModel.LicenseManager.IsValid(Type)\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsValid(Type,Object,License)\n  nameWithType: LicenseManager.IsValid(Type,Object,License)\n  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)\n- uid: System.ComponentModel.License\n  parent: System.ComponentModel\n  isExternal: false\n  name: License\n  nameWithType: License\n  fullName: System.ComponentModel.License\n- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: LockContext(Object)\n  nameWithType: LicenseManager.LockContext(Object)\n  fullName: System.ComponentModel.LicenseManager.LockContext(Object)\n- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UnlockContext(Object)\n  nameWithType: LicenseManager.UnlockContext(Object)\n  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)\n- uid: System.ComponentModel.LicenseManager.UsageMode\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseManager.UsageMode\n  fullName: System.ComponentModel.LicenseManager.UsageMode\n- uid: System.ComponentModel.LicenseUsageMode\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseUsageMode\n  nameWithType: LicenseUsageMode\n  fullName: System.ComponentModel.LicenseUsageMode\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: Validate(Type)\n  nameWithType: LicenseManager.Validate(Type)\n  fullName: System.ComponentModel.LicenseManager.Validate(Type)\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: Validate(Type,Object)\n  nameWithType: LicenseManager.Validate(Type,Object)\n  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)\n- uid: System.ComponentModel.LicenseManager.CreateWithContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CreateWithContext\n  nameWithType: LicenseManager.CreateWithContext\n- uid: System.ComponentModel.LicenseManager.CurrentContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CurrentContext\n  nameWithType: LicenseManager.CurrentContext\n- uid: System.ComponentModel.LicenseManager.IsLicensed*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsLicensed\n  nameWithType: LicenseManager.IsLicensed\n- uid: System.ComponentModel.LicenseManager.IsValid*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsValid\n  nameWithType: LicenseManager.IsValid\n- uid: System.ComponentModel.LicenseManager.LockContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: LockContext\n  nameWithType: LicenseManager.LockContext\n- uid: System.ComponentModel.LicenseManager.UnlockContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UnlockContext\n  nameWithType: LicenseManager.UnlockContext\n- uid: System.ComponentModel.LicenseManager.UsageMode*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseManager.UsageMode\n- uid: System.ComponentModel.LicenseManager.Validate*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: Validate\n  nameWithType: LicenseManager.Validate\n"}