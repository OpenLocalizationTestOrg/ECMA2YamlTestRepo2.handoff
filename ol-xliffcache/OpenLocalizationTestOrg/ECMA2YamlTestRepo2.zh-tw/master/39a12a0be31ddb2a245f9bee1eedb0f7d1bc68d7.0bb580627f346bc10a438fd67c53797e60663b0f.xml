{"nodes":[{"pos":[2504,2567],"content":"Provides a simple listener that directs logging output to file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a simple listener that directs logging output to file.","pos":[0,63]}]},{"pos":[2580,10740],"content":"The FileLogTraceListener class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis. This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.       An instance of FileLogTraceListener can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file. Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] applications. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md)`.`       The main features of this class are:      1.  *Archival functionality*. The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log. New log files are created on an as-needed basis.           The explicit form of the file name is `baseName`[-`dateStamp`][-`version`].log, where:          -   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.          -   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.          -   If more than one log file is needed with the same `baseName` and `dateStamp`, the `version` part, a positive `Integer`, is added to the file name.      2.  *Multiple class instances*. If an instance of the FileLogTraceListener class writes to a file that is in use:          -   The class shares the file if it is being used by another instance of the FileLogTraceListener class in the same process.          -   The class creates a new log file using the next available name if the file is being used by another process.      3.  *Thread safety*. The FileLogTraceListener class is thread safe. This allows you to safely write messages to the log from multiple threads without using locks.       **Log-File Location**      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to.      -   To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location.       **Log-File Name**      -   The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.      -   The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property. It is derived from several other properties and the current state of the logs in the file system.       **Log Maintenance**      -   The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.      -   The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property. If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available. This helps ensure that the FileLogTraceListener class will not consume all available disk space. Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free.       **Log-File Output Settings**      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file.      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message.      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file.       **Log-File Output**      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file. These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created.      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file.      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes.       **Enabling Output**       You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], refer to the documentation for your compiler.      -   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line.      -   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line.       To set the level of your listener, edit the configuration file for your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.       For this example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).      ```   <configuration>       <system.diagnostics>           <sharedListeners>               <add name=\"FileLog\"                   type=\"Microsoft.VisualBasic.Logging.FileLogTraceListener,                          Microsoft.VisualBasic, Version=8.0.0.0,                          Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,                          processorArchitecture=MSIL\"                    initializeData=\"FileLogWriter\"/>           </sharedListeners>       </system.diagnostics>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The FileLogTraceListener class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis.","pos":[0,143]},{"content":"This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.","pos":[144,261]},{"content":"An instance of FileLogTraceListener can be added to the &lt;xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName&gt; or &lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName&gt; collections to redirect output from logging to a text file.","pos":[268,526],"source":"       An instance of FileLogTraceListener can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file."},{"content":"Instances of this class can also be added to <ph id=\"ph1\">`My.Application.Log`</ph> or <ph id=\"ph2\">`My.Log`</ph> (for Web applications) in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]</ph> applications.","pos":[527,692],"source":" Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] applications."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Changing Where My.Application.Log Writes Information<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept><ph id=\"ph1\">`.`</ph>       The main features of this class are:      1.","pos":[693,879],"source":" For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md)`.`       The main features of this class are:      1."},{"content":"<bpt id=\"p1\">*</bpt>Archival functionality<ept id=\"p1\">*</ept>.","pos":[881,906],"source":"*Archival functionality*."},{"content":"The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log.","pos":[907,1080]},{"content":"New log files are created on an as-needed basis.","pos":[1081,1129]},{"content":"The explicit form of the file name is <ph id=\"ph1\">`baseName`</ph>[-<ph id=\"ph2\">`dateStamp`</ph>][-<ph id=\"ph3\">`version`</ph>].log, where:          -   The <ph id=\"ph4\">`baseName`</ph> part is the fundamental log name, specified by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt; property.","pos":[1140,1389],"source":"           The explicit form of the file name is `baseName`[-`dateStamp`][-`version`].log, where:          -   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property."},{"content":"-   The <ph id=\"ph1\">`dateStamp`</ph> part has the format \"YYYY-MM-DD\", and it is shown when &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt; is &lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt; or &lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt;.","pos":[1399,1699],"source":"          -   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>."},{"content":"-   If more than one log file is needed with the same <ph id=\"ph1\">`baseName`</ph> and <ph id=\"ph2\">`dateStamp`</ph>, the <ph id=\"ph3\">`version`</ph> part, a positive <ph id=\"ph4\">`Integer`</ph>, is added to the file name.","pos":[1709,1859],"source":"          -   If more than one log file is needed with the same `baseName` and `dateStamp`, the `version` part, a positive `Integer`, is added to the file name."},{"content":"2.","pos":[1865,1867]},{"content":"<bpt id=\"p1\">*</bpt>Multiple class instances<ept id=\"p1\">*</ept>.","pos":[1869,1896],"source":"*Multiple class instances*."},{"content":"If an instance of the FileLogTraceListener class writes to a file that is in use:          -   The class shares the file if it is being used by another instance of the FileLogTraceListener class in the same process.","pos":[1897,2112]},{"content":"-   The class creates a new log file using the next available name if the file is being used by another process.","pos":[2122,2234]},{"content":"3.","pos":[2240,2242]},{"content":"<bpt id=\"p1\">*</bpt>Thread safety<ept id=\"p1\">*</ept>.","pos":[2244,2260],"source":"*Thread safety*."},{"content":"The FileLogTraceListener class is thread safe.","pos":[2261,2307]},{"content":"This allows you to safely write messages to the log from multiple threads without using locks.","pos":[2308,2402]},{"content":"<bpt id=\"p1\">**</bpt>Log-File Location<ept id=\"p1\">**</ept>      -   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt; property takes a &lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation&gt; enumeration to specify one of the typical directories to write the log file to.","pos":[2409,2663],"source":"**Log-File Location**      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to."},{"content":"-   To write the log to another location, set the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt; property to that location.","pos":[2669,2821],"source":"      -   To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location."},{"content":"<bpt id=\"p1\">**</bpt>Log-File Name<ept id=\"p1\">**</ept>      -   The base name for the log file is specified by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt; property.","pos":[2828,2989],"source":"**Log-File Name**      -   The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property."},{"content":"-   The current log file name can be read from the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt; property.","pos":[2995,3132],"source":"      -   The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property."},{"content":"It is derived from several other properties and the current state of the logs in the file system.","pos":[3133,3230]},{"content":"<bpt id=\"p1\">**</bpt>Log Maintenance<ept id=\"p1\">**</ept>      -   The minimum frequency for creating new log files is determined by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt; property.","pos":[3237,3430],"source":"**Log Maintenance**      -   The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property."},{"content":"When the value is &lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt; or &lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt;, a new log file is created at least once every day or week, and a date stamp is incorporated into the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt; name.","pos":[3431,3770],"source":" When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name."},{"content":"-   The maximum size (in bytes) of the log file is determined by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A&gt; property.","pos":[3776,3927],"source":"      -   The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property."},{"content":"If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt; property, an exception is thrown.","pos":[3928,4164],"source":" If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown."},{"content":"-   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A&gt; property determines how much free space (in bytes) must be available.","pos":[4170,4325],"source":"      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available."},{"content":"This helps ensure that the FileLogTraceListener class will not consume all available disk space.","pos":[4326,4422]},{"content":"Use the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt; property to specify the behavior of log writes when there are less than &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A&gt; bytes free.","pos":[4423,4680],"source":" Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free."},{"content":"<bpt id=\"p1\">**</bpt>Log-File Output Settings<ept id=\"p1\">**</ept>      -   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A&gt; property specifies whether the underlying stream should be flushed automatically after each write to the log file.","pos":[4687,4914],"source":"**Log-File Output Settings**      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file."},{"content":"-   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A&gt; property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.","pos":[4920,5111],"source":"      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file."},{"content":"-   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt; property specifies the string to use for delimiting the fields within a log message.","pos":[5117,5280],"source":"      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message."},{"content":"-   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A&gt; property specifies the encoding to use when creating a new log file.","pos":[5286,5432],"source":"      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file."},{"content":"<bpt id=\"p1\">**</bpt>Log-File Output<ept id=\"p1\">**</ept>      -   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt; and &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A&gt; methods write messages to the log file.","pos":[5439,5658],"source":"**Log-File Output**      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file."},{"content":"These methods check the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt; property, along with any existing logs with the same base name to determine if a new log should be created.","pos":[5659,5875],"source":" These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created."},{"content":"-   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A&gt; method flushes any messages currently in the output buffer to the log file.","pos":[5881,6031],"source":"      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file."},{"content":"-   The &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A&gt; method closes the log file so that it can be used by other processes.","pos":[6037,6181],"source":"      -   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes."},{"content":"<bpt id=\"p1\">**</bpt>Enabling Output<ept id=\"p1\">**</ept>       You must enable tracing or debugging to use a trace listener.","pos":[6188,6275],"source":"**Enabling Output**       You must enable tracing or debugging to use a trace listener."},{"content":"The following syntax is compiler specific.","pos":[6276,6318]},{"content":"If you use compilers other than C# or <ph id=\"ph1\">[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]</ph>, refer to the documentation for your compiler.","pos":[6319,6451],"source":" If you use compilers other than C# or [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], refer to the documentation for your compiler."},{"content":"-   To enable debugging in C#, add the <ph id=\"ph1\">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or you can add <ph id=\"ph2\">`#define DEBUG`</ph> to the top of your file.","pos":[6457,6624],"source":"      -   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]</ph>, add the <ph id=\"ph2\">`/d:DEBUG=True`</ph> flag to the compiler command line.","pos":[6625,6735],"source":" In [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line."},{"content":"-   To enable tracing in C#, add the <ph id=\"ph1\">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id=\"ph2\">`#define TRACE`</ph> to the top of your file.","pos":[6741,6898],"source":"      -   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]</ph>, add the <ph id=\"ph2\">`/d:TRACE=True`</ph> flag to the compiler command line.","pos":[6899,7009],"source":" In [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line."},{"content":"To set the level of your listener, edit the configuration file for your application.","pos":[7016,7100]},{"content":"Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application.","pos":[7101,7260]},{"content":"The configuration file should be formatted like the following example.","pos":[7261,7331]},{"content":"For this example to run, you must provide the fully qualified assembly name.","pos":[7338,7414]},{"content":"For information about how to obtain the fully qualified assembly name, see <bpt id=\"p1\">[</bpt>Assembly Names<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[7415,7546],"source":" For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[13042,13176],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the default name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the default name."},{"pos":[13189,13430],"content":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener.       You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener.       You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property.","pos":[0,239],"nodes":[{"content":"This method sets the instance name of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; class to FileLogTraceListener.","pos":[0,130],"source":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener."},{"content":"You can access the instance name through the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property.","pos":[137,239],"source":"       You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property."}]}]},{"pos":[14114,14249],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the supplied name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the supplied name."},{"pos":[14262,14489],"content":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to `name`.       You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method sets the instance name of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; class to <ph id=\"ph1\">`name`</ph>.","pos":[0,116],"source":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to `name`."},{"content":"You can access the instance name thought the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property.","pos":[123,225],"source":"       You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property."}]},{"pos":[14633,14731],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The name of the instance object.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,65],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"content":"The name of the instance object.","pos":[66,98]}]},{"pos":[15241,15327],"content":"Determines whether to append the output to the current file or write it to a new file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether to append the output to the current file or write it to a new file.","pos":[0,86]}]},{"pos":[15340,16448],"content":"When the Append property is `False`, the output is written to a new file. When the property is `True`, the output is appended to the current file, unless:      -   The output file is locked by another process. In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.      -   The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows. In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.      -   The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the Append property is <ph id=\"ph1\">`False`</ph>, the output is written to a new file.","pos":[0,73],"source":"When the Append property is `False`, the output is written to a new file."},{"content":"When the property is <ph id=\"ph1\">`True`</ph>, the output is appended to the current file, unless:      -   The output file is locked by another process.","pos":[74,209],"source":" When the property is `True`, the output is appended to the current file, unless:      -   The output file is locked by another process."},{"content":"In this situation, a new log file is created with a version number that is incorporated into the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt; name.","pos":[210,389],"source":" In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name."},{"content":"-   The current file size is greater than what the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A&gt; property allows.","pos":[395,535],"source":"      -   The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows."},{"content":"In this situation, additional messages are discarded and, depending on the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt; property, an exception is thrown.","pos":[536,732],"source":" In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown."},{"content":"-   The existing file name is out of date according to the log-creation schedule specified by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt; property.","pos":[738,930],"source":"      -   The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property."},{"content":"In this situation, a new log file is created and the date stamp is incorporated into the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt; name.","pos":[931,1102],"source":" In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name."}]},{"pos":[16564,16976],"content":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>, with <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> indicating that the output is appended to the current file, and <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> indicating that output is written to a new file. The default setting for this property is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, with <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> indicating that the output is appended to the current file, and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> indicating that output is written to a new file.","pos":[0,309],"source":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>, with <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> indicating that the output is appended to the current file, and <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> indicating that output is written to a new file."},{"content":"The default setting for this property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[310,412],"source":" The default setting for this property is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>."}]},{"pos":[17502,17581],"content":"Indicates whether or not the writing to the log file stream flushes the buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether or not the writing to the log file stream flushes the buffer.","pos":[0,79]}]},{"pos":[17593,18093],"content":"The `False` setting for the AutoFlush property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time. You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer. You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`False`</ph> setting for the AutoFlush property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time.","pos":[0,184],"source":"The `False` setting for the AutoFlush property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time."},{"content":"You can use the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A&gt; method to flush any messages currently in the log file's output buffer.","pos":[185,339],"source":" You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer."},{"content":"You can also use the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A&gt; method, which implicitly flushes the stream before closing the log file.","pos":[340,500],"source":" You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file."}]},{"pos":[18211,18575],"content":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>, with <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently. The default setting for this property is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, with <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently.","pos":[0,259],"source":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>, with <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently."},{"content":"The default setting for this property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[260,364],"source":" The default setting for this property is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[19119,19212],"content":"Gets or sets the base name for the log files, which is used to create the full log-file name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the base name for the log files, which is used to create the full log-file name.","pos":[0,93]}]},{"pos":[20821,20966],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The base name for the log files. The default is the application's product name.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,65],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"content":"The base name for the log files.","pos":[66,98]},{"content":"The default is the application's product name.","pos":[99,145]}]},{"pos":[21482,21598],"content":"Closes the underlying stream for the current log file and releases any resources associated with the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the underlying stream for the current log file and releases any resources associated with the current stream.","pos":[0,116]}]},{"pos":[21610,21768],"content":"You do not need to call the Close method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam.","needQuote":true,"needEscape":true,"nodes":[{"content":"You do not need to call the Close method explicitly, because the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; class manages the underlying steam.","pos":[0,158],"source":"You do not need to call the Close method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam."}]},{"pos":[22391,22590],"content":"Gets or sets the log file directory when the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*&gt; property is set to <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the log file directory when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*> property is set to <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>."},{"pos":[22603,22893],"content":"When the CustomLocation property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>.       The CustomLocation property will throw an exception if the directory cannot be resolved.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the CustomLocation property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>.       The CustomLocation property will throw an exception if the directory cannot be resolved.","pos":[0,288],"nodes":[{"content":"When the CustomLocation property is set, it also sets the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt; property to &lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation&gt;.","pos":[0,193],"source":"When the CustomLocation property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>."},{"content":"The CustomLocation property will throw an exception if the directory cannot be resolved.","pos":[200,288]}]}]},{"pos":[23018,23212],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the name of the log-file directory. The default setting for this property is the user's directory for application data.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is the name of the log-file directory.","pos":[0,110],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the name of the log-file directory."},{"content":"The default setting for this property is the user's directory for application data.","pos":[111,194]}]},{"pos":[23746,23817],"content":"Gets or sets the delimiter used to delimit fields within a log message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the delimiter used to delimit fields within a log message.","pos":[0,71]}]},{"pos":[23829,23895],"content":"The Delimiter property allows you to change the default delimiter.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Delimiter property allows you to change the default delimiter.","pos":[0,66]}]},{"pos":[24014,24200],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the delimiter used for fields within a log message. The default setting for this property is the TAB character.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is the delimiter used for fields within a log message.","pos":[0,126],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the delimiter used for fields within a log message."},{"content":"The default setting for this property is the TAB character.","pos":[127,186]}]},{"pos":[24814,25016],"content":"Determines what to do when writing to the log file and there is less free disk space available than specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines what to do when writing to the log file and there is less free disk space available than specified by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*&gt; property.","pos":[0,202],"source":"Determines what to do when writing to the log file and there is less free disk space available than specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*> property."}]},{"pos":[25029,25552],"content":"When the DiskSpaceExhaustedBehavior property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, the log messages are silently discarded if there is not enough reserved disk space. This is the default behavior, and it prevents simple applications from failing if the disk gets too full.       More robust applications can set the DiskSpaceExhaustedBehavior property to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, and add `Try...Catch` blocks around all code that writes to the log.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the DiskSpaceExhaustedBehavior property is set to &lt;xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&gt;, the log messages are silently discarded if there is not enough reserved disk space.","pos":[0,201],"source":"When the DiskSpaceExhaustedBehavior property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, the log messages are silently discarded if there is not enough reserved disk space."},{"content":"This is the default behavior, and it prevents simple applications from failing if the disk gets too full.","pos":[202,307]},{"content":"More robust applications can set the DiskSpaceExhaustedBehavior property to &lt;xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&gt;, and add <ph id=\"ph1\">`Try...Catch`</ph> blocks around all code that writes to the log.","pos":[314,521],"source":"       More robust applications can set the DiskSpaceExhaustedBehavior property to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, and add `Try...Catch` blocks around all code that writes to the log."}]},{"pos":[25778,26304],"content":"<xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>. Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*> property, or if the log file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*> property allows. The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,76],"source":"<xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>."},{"content":"Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace<bpt id=\"p1\">*</bpt>&gt; property, or if the log file size is greater than what the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize<ept id=\"p1\">*</ept>&gt; property allows.","pos":[77,428],"source":" Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*> property, or if the log file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*> property allows."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[429,526],"source":" The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>."}]},{"pos":[26897,26972],"content":"Closes the underlying stream and optionally releases the managed resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the underlying stream and optionally releases the managed resources.","pos":[0,75]}]},{"pos":[26984,27236],"content":"When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references. This method invokes the `Dispose` method of each referenced object.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`True`</ph>, this method releases all resources held by any managed objects that this &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; references.","pos":[0,184],"source":"When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[185,252],"source":" This method invokes the `Dispose` method of each referenced object."}]},{"pos":[27392,27597],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> releases both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> releases only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> releases both managed and unmanaged resources; <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> releases only unmanaged resources."},{"pos":[28119,28181],"content":"Gets or sets the encoding to use when creating a new log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the encoding to use when creating a new log file.","pos":[0,62]}]},{"pos":[28193,28332],"content":"When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the Encoding property.","needQuote":true,"needEscape":true,"nodes":[{"content":"When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the Encoding property.","pos":[0,139]}]},{"pos":[28471,28629],"content":"<xref:System.Text.Encoding>, which is the encoding to use when creating a new log file. The default value of this property is <xref:System.Text.UTF8Encoding>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<xref:System.Text.Encoding>, which is the encoding to use when creating a new log file. The default value of this property is <xref:System.Text.UTF8Encoding>.","pos":[0,158],"nodes":[{"content":"&lt;xref:System.Text.Encoding&gt;, which is the encoding to use when creating a new log file.","pos":[0,87],"source":"<xref:System.Text.Encoding>, which is the encoding to use when creating a new log file."},{"content":"The default value of this property is &lt;xref:System.Text.UTF8Encoding&gt;.","pos":[88,158],"source":" The default value of this property is <xref:System.Text.UTF8Encoding>."}]}]},{"pos":[29141,29207],"content":"Flushes the underlying stream that writes to the current log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes the underlying stream that writes to the current log file.","pos":[0,66]}]},{"pos":[29219,29291],"content":"Use the Flush method to write all buffered data to the current log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the Flush method to write all buffered data to the current log file.","pos":[0,72]}]},{"pos":[29919,29955],"content":"Gets the current full log-file name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current full log-file name.","pos":[0,36]}]},{"pos":[31391,31497],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is the current full log-file name.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the current full log-file name."},{"pos":[32101,32178],"content":"Gets the custom XML configuration attributes supported by the trace listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the custom XML configuration attributes supported by the trace listener.","pos":[0,77]}]},{"pos":[32190,32495],"content":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.","pos":[0,305],"nodes":[{"content":"The custom attributes for the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; can be used in the XML configuration file for controlling the behavior of an instance of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; class.","pos":[0,245],"source":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class."},{"content":"Using any other attribute causes a configuration exception.","pos":[246,305]}]}]},{"pos":[32652,32795],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing the XML configuration attributes recognized by this listener.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array containing the XML configuration attributes recognized by this listener."},{"pos":[33367,33462],"content":"Indicates whether or not the host name of the logging machine should be included in the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether or not the host name of the logging machine should be included in the output.","pos":[0,95]}]},{"pos":[33474,33679],"content":"Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the property to configure the behavior of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt; and &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A&gt; methods.","pos":[0,205],"source":"Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods."}]},{"pos":[33803,34141],"content":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>. Use <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the host identifier should be included; otherwise use <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,67],"source":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>."},{"content":"Use <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the host identifier should be included; otherwise use <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[68,253],"source":" Use <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the host identifier should be included; otherwise use <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[254,338],"source":" The default value is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[34671,34711],"content":"Gets or sets location for the log files.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets location for the log files.","pos":[0,40]}]},{"pos":[36503,36699],"content":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is the location for the log file.","pos":[0,107],"source":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[108,196],"source":" The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>."}]},{"pos":[37297,37360],"content":"Determines which date to include in the names of the log files.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines which date to include in the names of the log files.","pos":[0,63]}]},{"pos":[37373,38333],"content":"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the LogFileCreationSchedule property to specify which date to include in the names of the log files.       The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.      |**LogFileCreationSchedule value**|**Date in the log file name**|   |---------------------------------------|-----------------------------------|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the current date in the log file name.|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Do not include the date in the log file name.|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the first day of the current week in the log file name.<br /><br /> The week starts on Saturday.|","needQuote":false,"needEscape":true,"nodes":[{"content":"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the LogFileCreationSchedule property to specify which date to include in the names of the log files.       The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.      |**LogFileCreationSchedule value**|**Date in the log file name**|   |---------------------------------------|-----------------------------------|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the current date in the log file name.|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Do not include the date in the log file name.|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the first day of the current week in the log file name.","pos":[0,910],"nodes":[{"content":"Assign one of the &lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt; enumeration values to the LogFileCreationSchedule property to specify which date to include in the names of the log files.","pos":[0,207],"source":"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the LogFileCreationSchedule property to specify which date to include in the names of the log files."},{"content":"The format of the date is YYYY-MM-DD.","pos":[214,251]},{"content":"For more information on the format of the log file name, see &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;.","pos":[252,390],"source":" For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."},{"content":"|<bpt id=\"p1\">**</bpt>LogFileCreationSchedule value<ept id=\"p1\">**</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">**</bpt>Date in the log file name<ept id=\"p2\">**</ept>|   |---------------------------------------|-----------------------------------|   |&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt;|Include the current date in the log file name.|   |&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt;|Do not include the date in the log file name.|   |&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt;|Include the first day of the current week in the log file name.","pos":[396,910],"source":"      |**LogFileCreationSchedule value**|**Date in the log file name**|   |---------------------------------------|-----------------------------------|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the current date in the log file name.|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Do not include the date in the log file name.|   |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the first day of the current week in the log file name."}]},{"content":"The week starts on Saturday.|","pos":[923,952]}]},{"pos":[38566,38810],"content":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>. This indicates which date to include in the log-file names. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>."},{"content":"This indicates which date to include in the log-file names.","pos":[82,141]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[142,244],"source":" The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>."}]},{"pos":[39363,39427],"content":"Gets or sets the maximum allowed size of the log file, in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum allowed size of the log file, in bytes.","pos":[0,64]}]},{"pos":[39440,40108],"content":"Use this property to make sure that the log files do not grow too large.       If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this property to make sure that the log files do not grow too large.       If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.","pos":[0,666],"nodes":[{"content":"Use this property to make sure that the log files do not grow too large.","pos":[0,72]},{"content":"If the log file size (in bytes) is greater than the value of this property, then when the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt; property.","pos":[79,484],"source":"       If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property."},{"content":"Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A&gt;.","pos":[485,666],"source":" Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>."}]}]},{"pos":[40227,40371],"content":"<xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>. This is the maximum allowed log-file size, in bytes. The default value is 5000000.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,61],"source":"<xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>."},{"content":"This is the maximum allowed log-file size, in bytes.","pos":[62,114]},{"content":"The default value is 5000000.","pos":[115,144]}]},{"pos":[40556,40608],"content":"When this property is set to a value less than 1000.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this property is set to a value less than 1000.","pos":[0,52]}]},{"pos":[41081,41192],"content":"Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.","pos":[0,111]}]},{"pos":[41205,41878],"content":"Use this property to make sure that the log files do not completely fill the disk.       If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this property to make sure that the log files do not completely fill the disk.       If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.","pos":[0,671],"nodes":[{"content":"Use this property to make sure that the log files do not completely fill the disk.","pos":[0,82]},{"content":"If the amount of free disk space (in bytes) is less than the value of this property, then when the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt; class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt; property.","pos":[89,503],"source":"       If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property."},{"content":"Otherwise, the message is written to the log, if the log file size (in bytes) is greater than &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A&gt;.","pos":[504,671],"source":" Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>."}]}]},{"pos":[42002,42143],"content":"<xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>. This is the amount of free disk space necessary. The default value is 10000000.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,61],"source":"<xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>."},{"content":"This is the amount of free disk space necessary.","pos":[62,110]},{"content":"The default value is 10000000.","pos":[111,141]}]},{"pos":[42333,42382],"content":"When this property is set to a value less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this property is set to a value less than 0.","pos":[0,49]}]},{"pos":[43196,43288],"content":"Writes trace information, a data object, and event information to the output file or stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a data object, and event information to the output file or stream.","pos":[0,92]}]},{"pos":[43301,46067],"content":"This method:      1.  Formats the data and context information for output.      2.  Creates a new log file, if necessary.      3.  Writes the information to the log file.       For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.       The following table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always|The value of `name`.|   |`severity`|Always|The enumeration-value name of `eventType`.|   |`id`|Always|The string representation of `id`.|   |`message`|Always|The string representation of `data`.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","needQuote":false,"needEscape":true,"nodes":[{"content":"This method:      1.","pos":[0,20]},{"content":"Formats the data and context information for output.","pos":[22,74]},{"content":"2.","pos":[80,82]},{"content":"Creates a new log file, if necessary.","pos":[84,121]},{"content":"3.","pos":[127,129]},{"content":"Writes the information to the log file.","pos":[131,170]},{"content":"For more information on creating new log files, see &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;.","pos":[177,306],"source":"       For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."},{"content":"The following table lists the output fields in the order they appear.","pos":[313,382]},{"content":"The fields are delimited by the string that the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt; property specifies, and are followed by a line terminator.","pos":[383,560],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator."},{"content":"|<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">**</bpt>Output condition<ept id=\"p2\">**</ept><ph id=\"ph2\">|</ph><bpt id=\"p3\">**</bpt>Description<ept id=\"p3\">**</ept>|   |---------------|--------------------------|---------------------|   |<ph id=\"ph3\">`source`</ph>|Always|The value of <ph id=\"ph4\">`name`</ph>.|   |<ph id=\"ph5\">`severity`</ph>|Always|The enumeration-value name of <ph id=\"ph6\">`eventType`</ph>.|   |<ph id=\"ph7\">`id`</ph>|Always|The string representation of <ph id=\"ph8\">`id`</ph>.|   |<ph id=\"ph9\">`message`</ph>|Always|The string representation of <ph id=\"ph10\">`data`</ph>.|   |<ph id=\"ph11\">`callStack`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt; property of <ph id=\"ph12\">`eventCache`</ph>.|   |<ph id=\"ph13\">`CorrelationID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph14\">`eventCache`</ph>.|   |<ph id=\"ph15\">`DateTime`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt; property of <ph id=\"ph16\">`eventCache`</ph>.","pos":[566,1647],"source":"      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always|The value of `name`.|   |`severity`|Always|The enumeration-value name of `eventType`.|   |`id`|Always|The string representation of `id`.|   |`message`|Always|The string representation of `data`.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ProcessID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[1648,1973],"source":" The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ThreadID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.|   |<ph id=\"ph3\">`Timestamp`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt; property of <ph id=\"ph4\">`eventCache`</ph>.","pos":[1974,2537],"source":" The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`HostName`</ph>|When the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt; property is <ph id=\"ph2\">`True`</ph>.|The name of the computer.|","pos":[2538,2742],"source":" The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|"}]},{"pos":[46356,46498],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[46561,46613],"content":"A name of the trace source that invoked this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name of the trace source that invoked this method.","pos":[0,52]}]},{"pos":[46699,46784],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[46842,46877],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[46938,46961],"content":"The trace data to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace data to emit.","pos":[0,23]}]},{"pos":[47876,47979],"content":"Writes trace information, an array of data objects, and event information to the output file or stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, an array of data objects, and event information to the output file or stream.","pos":[0,103]}]},{"pos":[47992,50880],"content":"This method:      1.  Formats the data and context information for output,      2.  Creates a new log file, if necessary,      3.  Writes the information to the log file.       For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.       This table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always|The value of `name`.|   |`severity`|Always|The enumeration-value name of `eventType`.|   |`id`|Always|The string representation of `id`.|   |`message`|Always|The string consisting of the string representation of each element in `data`, each separated by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","needQuote":false,"needEscape":true,"nodes":[{"content":"This method:      1.","pos":[0,20]},{"content":"Formats the data and context information for output,      2.","pos":[22,82]},{"content":"Creates a new log file, if necessary,      3.","pos":[84,129]},{"content":"Writes the information to the log file.","pos":[131,170]},{"content":"For more information on creating new log files, see &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;.","pos":[177,306],"source":"       For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."},{"content":"This table lists the output fields in the order they appear.","pos":[313,373]},{"content":"The fields are delimited by the string that the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt; property specifies, and are followed by a line terminator.","pos":[374,551],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator."},{"content":"|<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">**</bpt>Output condition<ept id=\"p2\">**</ept><ph id=\"ph2\">|</ph><bpt id=\"p3\">**</bpt>Description<ept id=\"p3\">**</ept>|   |---------------|--------------------------|---------------------|   |<ph id=\"ph3\">`source`</ph>|Always|The value of <ph id=\"ph4\">`name`</ph>.|   |<ph id=\"ph5\">`severity`</ph>|Always|The enumeration-value name of <ph id=\"ph6\">`eventType`</ph>.|   |<ph id=\"ph7\">`id`</ph>|Always|The string representation of <ph id=\"ph8\">`id`</ph>.|   |<ph id=\"ph9\">`message`</ph>|Always|The string consisting of the string representation of each element in <ph id=\"ph10\">`data`</ph>, each separated by &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;.|   |<ph id=\"ph11\">`callStack`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt; property of <ph id=\"ph12\">`eventCache`</ph>.|   |<ph id=\"ph13\">`CorrelationID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph14\">`eventCache`</ph>.|   |<ph id=\"ph15\">`DateTime`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt; property of <ph id=\"ph16\">`eventCache`</ph>.","pos":[557,1769],"source":"      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always|The value of `name`.|   |`severity`|Always|The enumeration-value name of `eventType`.|   |`id`|Always|The string representation of `id`.|   |`message`|Always|The string consisting of the string representation of each element in `data`, each separated by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ProcessID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[1770,2095],"source":" The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ThreadID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.|   |<ph id=\"ph3\">`Timestamp`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt; property of <ph id=\"ph4\">`eventCache`</ph>.","pos":[2096,2659],"source":" The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`HostName`</ph>|When the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt; property is <ph id=\"ph2\">`True`</ph>.|The name of the computer.|","pos":[2660,2864],"source":" The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|"}]},{"pos":[51171,51313],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[51376,51430],"content":"The name of the trace source that invoked this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the trace source that invoked this method.","pos":[0,54]}]},{"pos":[51516,51601],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[51659,51694],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[51757,51793],"content":"An array of objects to emit as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of objects to emit as data.","pos":[0,36]}]},{"pos":[52703,52790],"content":"Writes trace information, a message and event information to the output file or stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a message and event information to the output file or stream.","pos":[0,87]}]},{"pos":[52803,55560],"content":"This method:      1.  Formats the data and context information for output.      2.  Creates a new log file, if necessary.      3.  Writes the information to the log file.       For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.       This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always.|The value of `name`.|   |`severity`|Always.|The enumeration-value name of `eventType`.|   |`id`|Always.|The string representation of `id`.|   |`message`|Always.|The value of `message`.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","needQuote":false,"needEscape":true,"nodes":[{"content":"This method:      1.","pos":[0,20]},{"content":"Formats the data and context information for output.","pos":[22,74]},{"content":"2.","pos":[80,82]},{"content":"Creates a new log file, if necessary.","pos":[84,121]},{"content":"3.","pos":[127,129]},{"content":"Writes the information to the log file.","pos":[131,170]},{"content":"For more information on creating new log files, see &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;.","pos":[177,306],"source":"       For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."},{"content":"This table lists the output fields in the order in which they appear.","pos":[313,382]},{"content":"The fields are delimited by the string that the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt; property specifies, and are followed by a line terminator.","pos":[383,560],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator."},{"content":"|<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">**</bpt>Output condition<ept id=\"p2\">**</ept><ph id=\"ph2\">|</ph><bpt id=\"p3\">**</bpt>Description<ept id=\"p3\">**</ept>|   |---------------|--------------------------|---------------------|   |<ph id=\"ph3\">`source`</ph>|Always.|The value of <ph id=\"ph4\">`name`</ph>.|   |<ph id=\"ph5\">`severity`</ph>|Always.|The enumeration-value name of <ph id=\"ph6\">`eventType`</ph>.|   |<ph id=\"ph7\">`id`</ph>|Always.|The string representation of <ph id=\"ph8\">`id`</ph>.|   |<ph id=\"ph9\">`message`</ph>|Always.|The value of <ph id=\"ph10\">`message`</ph>.|   |<ph id=\"ph11\">`callStack`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt; property of <ph id=\"ph12\">`eventCache`</ph>.|   |<ph id=\"ph13\">`CorrelationID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph14\">`eventCache`</ph>.|   |<ph id=\"ph15\">`DateTime`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt; property of <ph id=\"ph16\">`eventCache`</ph>.","pos":[566,1638],"source":"      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always.|The value of `name`.|   |`severity`|Always.|The enumeration-value name of `eventType`.|   |`id`|Always.|The string representation of `id`.|   |`message`|Always.|The value of `message`.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ProcessID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[1639,1964],"source":" The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ThreadID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.|   |<ph id=\"ph3\">`Timestamp`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt; property of <ph id=\"ph4\">`eventCache`</ph>.","pos":[1965,2528],"source":" The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`HostName`</ph>|When the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt; property is <ph id=\"ph2\">`True`</ph>.|The name of the computer.|","pos":[2529,2733],"source":" The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|"}]},{"pos":[55853,55995],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[56058,56110],"content":"A name of the trace source that invoked this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name of the trace source that invoked this method.","pos":[0,52]}]},{"pos":[56196,56281],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[56339,56374],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[56438,56457],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[57427,57534],"content":"Writes trace information, a formatted array of objects, and event information to the output file or stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a formatted array of objects, and event information to the output file or stream.","pos":[0,107]}]},{"pos":[57547,60387],"content":"This method:      1.  Formats the data and context information for output.      2.  Creates a new a new log file, if necessary.      3.  Writes the information to the log file.       For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.       This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator.      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always|The value of `name`.|   |`severity`|Always|The enumeration-value name of `eventType`.|   |`id`|Always|The string representation of `id`.|   |`message`|Always|The data in `args` formatted with the `format` string and using the invariant culture for string conversions.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","needQuote":false,"needEscape":true,"nodes":[{"content":"This method:      1.","pos":[0,20]},{"content":"Formats the data and context information for output.","pos":[22,74]},{"content":"2.","pos":[80,82]},{"content":"Creates a new a new log file, if necessary.","pos":[84,127]},{"content":"3.","pos":[133,135]},{"content":"Writes the information to the log file.","pos":[137,176]},{"content":"For more information on creating new log file, see &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;.","pos":[183,311],"source":"       For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."},{"content":"This table lists the output fields in the order in which they appear.","pos":[318,387]},{"content":"The fields are delimited by the string that the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt; property specifies, and followed by a line terminator.","pos":[388,561],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator."},{"content":"|<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">**</bpt>Output condition<ept id=\"p2\">**</ept><ph id=\"ph2\">|</ph><bpt id=\"p3\">**</bpt>Description<ept id=\"p3\">**</ept>|   |---------------|--------------------------|---------------------|   |<ph id=\"ph3\">`source`</ph>|Always|The value of <ph id=\"ph4\">`name`</ph>.|   |<ph id=\"ph5\">`severity`</ph>|Always|The enumeration-value name of <ph id=\"ph6\">`eventType`</ph>.|   |<ph id=\"ph7\">`id`</ph>|Always|The string representation of <ph id=\"ph8\">`id`</ph>.|   |<ph id=\"ph9\">`message`</ph>|Always|The data in <ph id=\"ph10\">`args`</ph> formatted with the <ph id=\"ph11\">`format`</ph> string and using the invariant culture for string conversions.|   |<ph id=\"ph12\">`callStack`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt; property of <ph id=\"ph13\">`eventCache`</ph>.|   |<ph id=\"ph14\">`CorrelationID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph15\">`eventCache`</ph>.|   |<ph id=\"ph16\">`DateTime`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt; property of <ph id=\"ph17\">`eventCache`</ph>.","pos":[567,1721],"source":"      |**Field**|**Output condition**|**Description**|   |---------------|--------------------------|---------------------|   |`source`|Always|The value of `name`.|   |`severity`|Always|The enumeration-value name of `eventType`.|   |`id`|Always|The string representation of `id`.|   |`message`|Always|The data in `args` formatted with the `format` string and using the invariant culture for string conversions.|   |`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|   |`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ProcessID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[1722,2047],"source":" The invariant culture is used for the string conversion.|   |`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`ThreadID`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The &lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt; property of <ph id=\"ph2\">`eventCache`</ph>.|   |<ph id=\"ph3\">`Timestamp`</ph>|When the &lt;xref:System.Diagnostics.TraceOptions&gt; flag is set in the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.|The string representation of the &lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt; property of <ph id=\"ph4\">`eventCache`</ph>.","pos":[2048,2611],"source":" The invariant culture is used for the string conversion.|   |`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|   |`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.|   |<ph id=\"ph1\">`HostName`</ph>|When the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt; property is <ph id=\"ph2\">`True`</ph>.|The name of the computer.|","pos":[2612,2816],"source":" The invariant culture is used for the string conversion.|   |`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|"}]},{"pos":[60694,60836],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[60899,60951],"content":"A name of the trace source that invoked this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name of the trace source that invoked this method.","pos":[0,52]}]},{"pos":[61037,61122],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."},{"pos":[61180,61215],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[61278,61383],"content":"A format string that contains zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items, which correspond to objects in the `args` array."},{"pos":[61446,61562],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[62124,62202],"content":"Writes a verbatim message to disk, without any additional context information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a verbatim message to disk, without any additional context information.","pos":[0,78]}]},{"pos":[62215,62478],"content":"The Write method writes a specific message to the log file, without any additional context information.       Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Write method writes a specific message to the log file, without any additional context information.       Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","pos":[0,261],"nodes":[{"content":"The Write method writes a specific message to the log file, without any additional context information.","pos":[0,103]},{"content":"Use the one of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt; methods to include the context information in the log output.","pos":[110,261],"source":"       Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output."}]}]},{"pos":[62627,62721],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The custom message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,65],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"content":"The custom message to write.","pos":[66,94]}]},{"pos":[63298,63417],"content":"Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.","pos":[0,119]}]},{"pos":[63430,63697],"content":"The WriteLine method writes a specific message to the log file, without any additional context information.       Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","needQuote":false,"needEscape":true,"nodes":[{"content":"The WriteLine method writes a specific message to the log file, without any additional context information.       Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","pos":[0,265],"nodes":[{"content":"The WriteLine method writes a specific message to the log file, without any additional context information.","pos":[0,107]},{"content":"Use the one of the &lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt; methods to include the context information in the log output.","pos":[114,265],"source":"       Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output."}]}]},{"pos":[63850,63944],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The custom message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,65],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"content":"The custom message to write.","pos":[66,94]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  id: FileLogTraceListener\n  children:\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  langs:\n  - csharp\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  type: Class\n  summary: Provides a simple listener that directs logging output to file.\n  remarks: \"The FileLogTraceListener class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis. This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.  \\n  \\n An instance of FileLogTraceListener can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file. Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] applications. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md)`.`  \\n  \\n The main features of this class are:  \\n  \\n1.  *Archival functionality*. The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log. New log files are created on an as-needed basis.  \\n  \\n     The explicit form of the file name is `baseName`[-`dateStamp`][-`version`].log, where:  \\n  \\n    -   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n    -   The `dateStamp` part has the format \\\"YYYY-MM-DD\\\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \\n  \\n    -   If more than one log file is needed with the same `baseName` and `dateStamp`, the `version` part, a positive `Integer`, is added to the file name.  \\n  \\n2.  *Multiple class instances*. If an instance of the FileLogTraceListener class writes to a file that is in use:  \\n  \\n    -   The class shares the file if it is being used by another instance of the FileLogTraceListener class in the same process.  \\n  \\n    -   The class creates a new log file using the next available name if the file is being used by another process.  \\n  \\n3.  *Thread safety*. The FileLogTraceListener class is thread safe. This allows you to safely write messages to the log from multiple threads without using locks.  \\n  \\n **Log-File Location**  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to.  \\n  \\n-   To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location.  \\n  \\n **Log-File Name**  \\n  \\n-   The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n-   The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property. It is derived from several other properties and the current state of the logs in the file system.  \\n  \\n **Log Maintenance**  \\n  \\n-   The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.  \\n  \\n-   The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property. If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available. This helps ensure that the FileLogTraceListener class will not consume all available disk space. Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free.  \\n  \\n **Log-File Output Settings**  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file.  \\n  \\n **Log-File Output**  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file. These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes.  \\n  \\n **Enabling Output**  \\n  \\n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], refer to the documentation for your compiler.  \\n  \\n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line.  \\n  \\n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line.  \\n  \\n To set the level of your listener, edit the configuration file for your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.  \\n  \\n For this example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \\n  \\n```  \\n<configuration>  \\n    <system.diagnostics>  \\n        <sharedListeners>  \\n            <add name=\\\"FileLog\\\"  \\n                type=\\\"Microsoft.VisualBasic.Logging.FileLogTraceListener,   \\n                      Microsoft.VisualBasic, Version=8.0.0.0,   \\n                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   \\n                      processorArchitecture=MSIL\\\"   \\n                initializeData=\\\"FileLogWriter\\\"/>  \\n        </sharedListeners>  \\n    </system.diagnostics>  \\n</configuration>  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class FileLogTraceListener : System.Diagnostics.TraceListener\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Diagnostics.TraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: FileLogTraceListener()\n  nameWithType: FileLogTraceListener.FileLogTraceListener()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the default name.\n  remarks: \"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener.  \\n  \\n You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property.\"\n  syntax:\n    content: public FileLogTraceListener ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: FileLogTraceListener(String)\n  nameWithType: FileLogTraceListener.FileLogTraceListener(String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the supplied name.\n  remarks: \"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to `name`.  \\n  \\n You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property.\"\n  syntax:\n    content: public FileLogTraceListener (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The name of the instance object.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  id: Append\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Append\n  nameWithType: FileLogTraceListener.Append\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Determines whether to append the output to the current file or write it to a new file.\n  remarks: \"When the Append property is `False`, the output is written to a new file. When the property is `True`, the output is appended to the current file, unless:  \\n  \\n-   The output file is locked by another process. In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.  \\n  \\n-   The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows. In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.  \\n  \\n-   The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.\"\n  syntax:\n    content: public bool Append { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>, with <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> indicating that the output is appended to the current file, and <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> indicating that output is written to a new file. The default setting for this property is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  id: AutoFlush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: AutoFlush\n  nameWithType: FileLogTraceListener.AutoFlush\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Indicates whether or not the writing to the log file stream flushes the buffer.\n  remarks: The `False` setting for the AutoFlush property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time. You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer. You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file.\n  syntax:\n    content: public bool AutoFlush { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>, with <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently. The default setting for this property is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  id: BaseFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: BaseFileName\n  nameWithType: FileLogTraceListener.BaseFileName\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the base name for the log files, which is used to create the full log-file name.\n  remarks: \"The BaseFileName property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.  \\n  \\n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \\n  \\n The explicit form of the full log file name is `path`\\\\\\\\`baseName`[-`dateStamp`][-`iteration`].log, where  \\n  \\n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \\n  \\n-   The `baseName` part is the fundamental log name, specified by the BaseFileName property.  \\n  \\n-   The `dateStamp` part has the format \\\"YYYY-MM-DD\\\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \\n  \\n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name.\"\n  syntax:\n    content: public string BaseFileName { get; set; }\n    return:\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The base name for the log files. The default is the application's product name.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  id: Close\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: FileLogTraceListener.Close()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Closes the underlying stream for the current log file and releases any resources associated with the current stream.\n  remarks: You do not need to call the Close method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  id: CustomLocation\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: CustomLocation\n  nameWithType: FileLogTraceListener.CustomLocation\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the log file directory when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*> property is set to <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>.\n  remarks: \"When the CustomLocation property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>.  \\n  \\n The CustomLocation property will throw an exception if the directory cannot be resolved.\"\n  syntax:\n    content: public string CustomLocation { get; set; }\n    return:\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the name of the log-file directory. The default setting for this property is the user's directory for application data.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  id: Delimiter\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Delimiter\n  nameWithType: FileLogTraceListener.Delimiter\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the delimiter used to delimit fields within a log message.\n  remarks: The Delimiter property allows you to change the default delimiter.\n  syntax:\n    content: public string Delimiter { get; set; }\n    return:\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the delimiter used for fields within a log message. The default setting for this property is the TAB character.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  id: DiskSpaceExhaustedBehavior\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: DiskSpaceExhaustedBehavior\n  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Determines what to do when writing to the log file and there is less free disk space available than specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*> property.\n  remarks: \"When the DiskSpaceExhaustedBehavior property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, the log messages are silently discarded if there is not enough reserved disk space. This is the default behavior, and it prevents simple applications from failing if the disk gets too full.  \\n  \\n More robust applications can set the DiskSpaceExhaustedBehavior property to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, and add `Try...Catch` blocks around all code that writes to the log.\"\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }\n    return:\n      type: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\n      description: <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>. Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*> property, or if the log file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*> property allows. The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: FileLogTraceListener.Dispose(Boolean)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Closes the underlying stream and optionally releases the managed resources.\n  remarks: When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references. This method invokes the `Dispose` method of each referenced object.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> releases both managed and unmanaged resources; <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> releases only unmanaged resources.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  id: Encoding\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Encoding\n  nameWithType: FileLogTraceListener.Encoding\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the encoding to use when creating a new log file.\n  remarks: When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the Encoding property.\n  syntax:\n    content: public System.Text.Encoding Encoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: <xref:System.Text.Encoding>, which is the encoding to use when creating a new log file. The default value of this property is <xref:System.Text.UTF8Encoding>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  id: Flush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: FileLogTraceListener.Flush()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Flushes the underlying stream that writes to the current log file.\n  remarks: Use the Flush method to write all buffered data to the current log file.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  id: FullLogFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: FullLogFileName\n  nameWithType: FileLogTraceListener.FullLogFileName\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets the current full log-file name.\n  remarks: \"The FullLogFileName property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \\n  \\n The explicit form of the full log-file name is `path`\\\\\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:  \\n  \\n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \\n  \\n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n-   The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \\n  \\n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name.\"\n  syntax:\n    content: public string FullLogFileName { get; }\n    return:\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, which is the current full log-file name.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  id: GetSupportedAttributes\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: GetSupportedAttributes()\n  nameWithType: FileLogTraceListener.GetSupportedAttributes()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets the custom XML configuration attributes supported by the trace listener.\n  remarks: The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.\n  syntax:\n    content: protected override string[] GetSupportedAttributes ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array containing the XML configuration attributes recognized by this listener.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  id: IncludeHostName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: IncludeHostName\n  nameWithType: FileLogTraceListener.IncludeHostName\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Indicates whether or not the host name of the logging machine should be included in the output.\n  remarks: Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods.\n  syntax:\n    content: public bool IncludeHostName { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref>. Use <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the host identifier should be included; otherwise use <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  id: Location\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Location\n  nameWithType: FileLogTraceListener.Location\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets location for the log files.\n  remarks: \"Use the Location property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.  \\n  \\n|**Location value**|**Path**|  \\n|------------------------|--------------|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\\\\\`CompanyName`\\\\\\\\`ProductName`\\\\\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\\\Documents and Settings\\\\All Users\\\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the executable file that started the application.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\\\\\`CompanyName`\\\\\\\\`ProductName`\\\\\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\\\Documents and Settings\\\\\\\\`username`\\\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path of the current system's temporary folder.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.|\"\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }\n    return:\n      type: Microsoft.VisualBasic.Logging.LogFileLocation\n      description: <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  id: LogFileCreationSchedule\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: LogFileCreationSchedule\n  nameWithType: FileLogTraceListener.LogFileCreationSchedule\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Determines which date to include in the names of the log files.\n  remarks: \"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the LogFileCreationSchedule property to specify which date to include in the names of the log files.  \\n  \\n The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n|**LogFileCreationSchedule value**|**Date in the log file name**|  \\n|---------------------------------------|-----------------------------------|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the current date in the log file name.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Do not include the date in the log file name.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|Include the first day of the current week in the log file name.<br /><br /> The week starts on Saturday.|\"\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }\n    return:\n      type: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\n      description: <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>. This indicates which date to include in the log-file names. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  id: MaxFileSize\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: MaxFileSize\n  nameWithType: FileLogTraceListener.MaxFileSize\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the maximum allowed size of the log file, in bytes.\n  remarks: \"Use this property to make sure that the log files do not grow too large.  \\n  \\n If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.\"\n  syntax:\n    content: public long MaxFileSize { get; set; }\n    return:\n      type: System.Int64\n      description: <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>. This is the maximum allowed log-file size, in bytes. The default value is 5000000.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: When this property is set to a value less than 1000.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  id: ReserveDiskSpace\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: ReserveDiskSpace\n  nameWithType: FileLogTraceListener.ReserveDiskSpace\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.\n  remarks: \"Use this property to make sure that the log files do not completely fill the disk.  \\n  \\n If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.\"\n  syntax:\n    content: public long ReserveDiskSpace { get; set; }\n    return:\n      type: System.Int64\n      description: <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>. This is the amount of free disk space necessary. The default value is 10000000.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: When this property is set to a value less than 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, a data object, and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output.  \\n  \\n2.  Creates a new log file, if necessary.  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n The following table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always|The value of `name`.|  \\n|`severity`|Always|The enumeration-value name of `eventType`.|  \\n|`id`|Always|The string representation of `id`.|  \\n|`message`|Always|The string representation of `data`.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object\n      description: The trace data to emit.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, an array of data objects, and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output,  \\n  \\n2.  Creates a new log file, if necessary,  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n This table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always|The value of `name`.|  \\n|`severity`|Always|The enumeration-value name of `eventType`.|  \\n|`id`|Always|The string representation of `id`.|  \\n|`message`|Always|The string consisting of the string representation of each element in `data`, each separated by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object[]\n      description: An array of objects to emit as data.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, a message and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output.  \\n  \\n2.  Creates a new log file, if necessary.  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always.|The value of `name`.|  \\n|`severity`|Always.|The enumeration-value name of `eventType`.|  \\n|`id`|Always.|The string representation of `id`.|  \\n|`message`|Always.|The value of `message`.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, a formatted array of objects, and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output.  \\n  \\n2.  Creates a new a new log file, if necessary.  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always|The value of `name`.|  \\n|`severity`|Always|The enumeration-value name of `eventType`.|  \\n|`id`|Always|The string representation of `id`.|  \\n|`message`|Always|The data in `args` formatted with the `format` string and using the invariant culture for string conversions.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: FileLogTraceListener.Write(String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a verbatim message to disk, without any additional context information.\n  remarks: \"The Write method writes a specific message to the log file, without any additional context information.  \\n  \\n Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.\"\n  syntax:\n    content: public override void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The custom message to write.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: FileLogTraceListener.WriteLine(String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.\n  remarks: \"The WriteLine method writes a specific message to the log file, without any additional context information.  \\n  \\n Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.\"\n  syntax:\n    content: public override void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. The custom message to write.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.TraceListener\n  isExternal: false\n  name: System.Diagnostics.TraceListener\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FileLogTraceListener()\n  nameWithType: FileLogTraceListener.FileLogTraceListener()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FileLogTraceListener(String)\n  nameWithType: FileLogTraceListener.FileLogTraceListener(String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Append\n  nameWithType: FileLogTraceListener.Append\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: AutoFlush\n  nameWithType: FileLogTraceListener.AutoFlush\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: BaseFileName\n  nameWithType: FileLogTraceListener.BaseFileName\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: FileLogTraceListener.Close()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: CustomLocation\n  nameWithType: FileLogTraceListener.CustomLocation\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Delimiter\n  nameWithType: FileLogTraceListener.Delimiter\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: DiskSpaceExhaustedBehavior\n  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n- uid: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: DiskSpaceExhaustedOption\n  nameWithType: DiskSpaceExhaustedOption\n  fullName: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: FileLogTraceListener.Dispose(Boolean)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Encoding\n  nameWithType: FileLogTraceListener.Encoding\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: true\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Flush()\n  nameWithType: FileLogTraceListener.Flush()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FullLogFileName\n  nameWithType: FileLogTraceListener.FullLogFileName\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: FileLogTraceListener.GetSupportedAttributes()\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: IncludeHostName\n  nameWithType: FileLogTraceListener.IncludeHostName\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Location\n  nameWithType: FileLogTraceListener.Location\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n- uid: Microsoft.VisualBasic.Logging.LogFileLocation\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: LogFileLocation\n  nameWithType: LogFileLocation\n  fullName: Microsoft.VisualBasic.Logging.LogFileLocation\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: LogFileCreationSchedule\n  nameWithType: FileLogTraceListener.LogFileCreationSchedule\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n- uid: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: LogFileCreationScheduleOption\n  nameWithType: LogFileCreationScheduleOption\n  fullName: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: MaxFileSize\n  nameWithType: FileLogTraceListener.MaxFileSize\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: ReserveDiskSpace\n  nameWithType: FileLogTraceListener.ReserveDiskSpace\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: FileLogTraceListener.Write(String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: FileLogTraceListener.WriteLine(String)\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener.FileLogTraceListener\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Append\n  nameWithType: FileLogTraceListener.Append\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: AutoFlush\n  nameWithType: FileLogTraceListener.AutoFlush\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: BaseFileName\n  nameWithType: FileLogTraceListener.BaseFileName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Close\n  nameWithType: FileLogTraceListener.Close\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: CustomLocation\n  nameWithType: FileLogTraceListener.CustomLocation\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Delimiter\n  nameWithType: FileLogTraceListener.Delimiter\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: DiskSpaceExhaustedBehavior\n  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Dispose\n  nameWithType: FileLogTraceListener.Dispose\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Encoding\n  nameWithType: FileLogTraceListener.Encoding\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Flush\n  nameWithType: FileLogTraceListener.Flush\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FullLogFileName\n  nameWithType: FileLogTraceListener.FullLogFileName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: GetSupportedAttributes\n  nameWithType: FileLogTraceListener.GetSupportedAttributes\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: IncludeHostName\n  nameWithType: FileLogTraceListener.IncludeHostName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Location\n  nameWithType: FileLogTraceListener.Location\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: LogFileCreationSchedule\n  nameWithType: FileLogTraceListener.LogFileCreationSchedule\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: MaxFileSize\n  nameWithType: FileLogTraceListener.MaxFileSize\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: ReserveDiskSpace\n  nameWithType: FileLogTraceListener.ReserveDiskSpace\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceData\n  nameWithType: FileLogTraceListener.TraceData\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceEvent\n  nameWithType: FileLogTraceListener.TraceEvent\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Write\n  nameWithType: FileLogTraceListener.Write\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: FileLogTraceListener.WriteLine\n"}