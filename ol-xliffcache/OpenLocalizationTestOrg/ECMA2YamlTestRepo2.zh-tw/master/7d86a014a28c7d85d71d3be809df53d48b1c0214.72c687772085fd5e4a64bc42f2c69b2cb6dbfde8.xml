{"nodes":[{"pos":[929,1008],"content":"Represents a simple last-in-first-out (LIFO) non-generic collection of objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a simple last-in-first-out (LIFO) non-generic collection of objects.","pos":[0,79]}]},{"pos":[1021,1810],"content":"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>.       The capacity of a Stack is the number of elements the Stack can hold. As elements are added to a Stack, the capacity is automatically increased as required through reallocation.       If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>. <xref:System.Collections.Stack.Pop%2A> is an O(1) operation.       Stack accepts `null` as a valid value and allows duplicate elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"For the generic version of this collection, see &lt;xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;.","pos":[0,117],"source":"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>."},{"content":"The capacity of a Stack is the number of elements the Stack can hold.","pos":[124,193]},{"content":"As elements are added to a Stack, the capacity is automatically increased as required through reallocation.","pos":[194,301]},{"content":"If &lt;xref:System.Collections.Stack.Count%2A&gt; is less than the capacity of the stack, &lt;xref:System.Collections.Stack.Push%2A&gt; is an O(1) operation.","pos":[308,453],"source":"       If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, &lt;xref:System.Collections.Stack.Push%2A&gt; becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[454,647],"source":" If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."},{"content":"&lt;xref:System.Collections.Stack.Pop%2A&gt; is an O(1) operation.","pos":[648,708],"source":" <xref:System.Collections.Stack.Pop%2A> is an O(1) operation."},{"content":"Stack accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[715,783],"source":"       Stack accepts `null` as a valid value and allows duplicate elements."}]},{"pos":[2975,3112],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that is empty and has the default initial capacity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the default initial capacity."},{"pos":[3125,3659],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.       This constructor is an O(1) operation.","pos":[0,530],"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.","pos":[0,126],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.","pos":[127,274],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.","pos":[281,485],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>."},{"content":"This constructor is an O(1) operation.","pos":[492,530]}]}]},{"pos":[4189,4402],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied."},{"pos":[4415,5193],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.       The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.       This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.","pos":[0,126],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.","pos":[127,274],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.","pos":[281,485],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>."},{"content":"The elements are copied onto the &lt;xref:System.Collections.Stack&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.","pos":[492,679],"source":"       The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`col`</ph>.","pos":[686,772],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in `col`."}]},{"pos":[5361,5425],"content":"The <xref:System.Collections.ICollection> to copy elements from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.ICollection&gt; to copy elements from.","pos":[0,64],"source":"The <xref:System.Collections.ICollection> to copy elements from."}]},{"pos":[5586,5667],"content":"<ph id=\"ph1\">&lt;code&gt;col&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>col</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6022,6215],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater."},{"pos":[6228,6796],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.       This constructor is an O(`n`) operation, where `n` is `initialCapacity`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.","pos":[0,126],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.","pos":[127,274],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.","pos":[281,485],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`initialCapacity`</ph>.","pos":[492,564],"source":"       This constructor is an O(`n`) operation, where `n` is `initialCapacity`."}]},{"pos":[6943,7041],"content":"The initial number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"The initial number of elements that the <xref href=\"System.Collections.Stack\"></xref> can contain."},{"pos":[7214,7261],"content":"<ph id=\"ph1\">&lt;code&gt;initialCapacity&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>initialCapacity</code> is less than zero."},{"pos":[7566,7641],"content":"Removes all objects from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all objects from the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[7654,7892],"content":"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Stack.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,139],"source":"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[146,236],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}]},{"pos":[8756,8832],"content":"Creates a shallow copy of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a shallow copy of the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[8845,9385],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.       In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.","pos":[0,186]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[187,306]},{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[313,439]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[446,536],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}]},{"pos":[9518,9586],"content":"A shallow copy of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A shallow copy of the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[10015,10101],"content":"Determines whether an element is in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether an element is in the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[10114,10764],"content":"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.       Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection. In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method determines equality by calling the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method.","pos":[0,110],"source":"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method."},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[117,256],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method tests for equality by passing the <ph id=\"ph1\">`obj`</ph> argument to the &lt;xref:System.Object.Equals%2A&gt; method of individual objects in the collection.","pos":[263,447],"source":"       Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the &lt;xref:System.Object.Equals%2A&gt; method of the <ph id=\"ph1\">`obj`</ph> argument.","pos":[448,646],"source":" In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument."}]},{"pos":[10907,11060],"content":"The object to locate in the <xref href=\"System.Collections.Stack\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,74],"source":"The object to locate in the <xref href=\"System.Collections.Stack\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[75,153],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[11119,11338],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found in the <bpt id=\"p3\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if <code>obj</code> is found in the <xref href=\"System.Collections.Stack\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11799,11946],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to an existing one-dimensional &lt;xref:System.Array&gt;, starting at the specified array index.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Collections.Stack\"></xref> to an existing one-dimensional <xref:System.Array>, starting at the specified array index."},{"pos":[11959,12245],"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to &lt;xref:System.Collections.Stack.Pop%2A&gt;.","pos":[0,187],"source":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[194,284],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}]},{"pos":[12839,13032],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,138],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[139,193],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[13093,13149],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[13311,13394],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13509,13546],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[13642,13897],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.Stack\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,249],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.Stack\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[13999,14147],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.Stack\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[14448,14539],"content":"Gets the number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[14552,15052],"content":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. Count is the number of elements that are actually in the <xref:System.Collections.Stack>.       The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. Count is the number of elements that are actually in the <xref:System.Collections.Stack>.       The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.       Retrieving the value of this property is an O(1) operation.","pos":[0,496],"nodes":[{"content":"The capacity is the number of elements that the &lt;xref:System.Collections.Stack&gt; can store.","pos":[0,90],"source":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store."},{"content":"Count is the number of elements that are actually in the &lt;xref:System.Collections.Stack&gt;.","pos":[91,180],"source":" Count is the number of elements that are actually in the <xref:System.Collections.Stack>."},{"content":"The capacity is always greater than or equal to Count.","pos":[187,241]},{"content":"If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[242,430]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[437,496]}]}]},{"pos":[15167,15253],"content":"The number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[15659,15762],"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[15775,18385],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,544],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[546,626],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[627,844],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[851,1047],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1048,1172],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1179,1406],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1407,1538],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1539,1689],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1690,1914],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1921,1993]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[1994,2156]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2163,2317]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2319,2424]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2426,2554]},{"content":"This method is an O(1) operation.","pos":[2561,2594]}]},{"pos":[18567,18662],"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[19077,19199],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe)."},{"pos":[19212,20373],"content":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.       [!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)]  [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)]  [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)]       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"To guarantee the thread safety of the &lt;xref:System.Collections.Stack&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Stack.Synchronized%2A&gt; method.","pos":[0,190],"source":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[197,275]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[276,413]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[414,595]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.Stack.SyncRoot%2A&gt; during the entire enumeration.","pos":[602,746],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p2\">](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p4\">](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)</ept><ept id=\"p5\">]</ept>       Retrieving the value of this property is an O(1) operation.","pos":[753,1151],"source":"[!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)]  [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)]  [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)]       Retrieving the value of this property is an O(1) operation."}]},{"pos":[21062,21371],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if access to the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,230],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[231,309],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[21741,21844],"content":"Returns the object at the top of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> without removing it.","needQuote":true,"needEscape":true,"source":"Returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref> without removing it."},{"pos":[21857,22379],"content":"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but Peek does not modify the <xref:System.Collections.Stack>.       `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is similar to the &lt;xref:System.Collections.Stack.Pop%2A&gt; method, but Peek does not modify the &lt;xref:System.Collections.Stack&gt;.","pos":[0,138],"source":"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but Peek does not modify the <xref:System.Collections.Stack>."},{"content":"<ph id=\"ph1\">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.","pos":[145,235],"source":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed."},{"content":"To distinguish between a null value and the end of the stack, check the &lt;xref:System.Collections.Stack.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Stack&gt; is empty.","pos":[236,478],"source":" To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty."},{"content":"This method is an O(1) operation.","pos":[485,518]}]},{"pos":[23058,23147],"content":"The &lt;xref:System.Object&gt; at the top of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> at the top of the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[23315,23374],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Stack\"></xref> is empty."},{"pos":[23669,23764],"content":"Removes and returns the object at the top of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes and returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[23777,24335],"content":"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.       `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is similar to the &lt;xref:System.Collections.Stack.Peek%2A&gt; method, but &lt;xref:System.Collections.Stack.Peek%2A&gt; does not modify the &lt;xref:System.Collections.Stack&gt;.","pos":[0,174],"source":"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>."},{"content":"<ph id=\"ph1\">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.","pos":[181,271],"source":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed."},{"content":"To distinguish between a null value and the end of the stack, check the &lt;xref:System.Collections.Stack.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Stack&gt; is empty.","pos":[272,514],"source":" To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty."},{"content":"This method is an O(1) operation.","pos":[521,554]}]},{"pos":[25013,25112],"content":"The &lt;xref:System.Object&gt; removed from the top of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> removed from the top of the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[25279,25338],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Stack\"></xref> is empty."},{"pos":[25686,25768],"content":"Inserts an object at the top of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Inserts an object at the top of the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[25781,26496],"content":"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.       `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.       If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, Push is an O(1) operation. If the capacity needs to be increased to accommodate the new element, Push becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Collections.Stack.Count%2A&gt; already equals the capacity, the capacity of the &lt;xref:System.Collections.Stack&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,274],"source":"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."},{"content":"<ph id=\"ph1\">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.","pos":[281,371],"source":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed."},{"content":"It occupies a slot in the stack and is treated like any object.","pos":[372,435]},{"content":"If &lt;xref:System.Collections.Stack.Count%2A&gt; is less than the capacity of the stack, Push is an O(1) operation.","pos":[442,552],"source":"       If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, Push is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, Push becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[553,711],"source":" If the capacity needs to be increased to accommodate the new element, Push becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}]},{"pos":[27182,27349],"content":"The <xref:System.Object> to push onto the <xref href=\"System.Collections.Stack\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to push onto the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,88],"source":"The <xref:System.Object> to push onto the <xref href=\"System.Collections.Stack\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,167],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[27816,27915],"content":"Returns a synchronized (thread safe) wrapper for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a synchronized (thread safe) wrapper for the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[27928,28993],"content":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.       [!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)]  [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)]  [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)]       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"To guarantee the thread safety of the &lt;xref:System.Collections.Stack&gt;, all operations must be done through this wrapper.","pos":[0,120],"source":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[127,205]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[206,343]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[344,525]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.Stack.SyncRoot%2A&gt; during the entire enumeration.","pos":[532,676],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p2\">](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)</ept><ept id=\"p5\">]</ept>       This method is an O(1) operation.","pos":[683,1055],"source":"[!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)]  [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)]  [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)]       This method is an O(1) operation."}]},{"pos":[29754,29819],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to synchronize.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Stack\"></xref> to synchronize."},{"pos":[29888,29968],"content":"A synchronized wrapper around the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A synchronized wrapper around the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[30136,30219],"content":"<ph id=\"ph1\">&lt;code&gt;stack&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>stack</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[30535,30642],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[30655,32253],"content":"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.       [!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)]  [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)]  [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)]       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"To create a synchronized version of the &lt;xref:System.Collections.Stack&gt;, use the &lt;xref:System.Collections.Stack.Synchronized%2A&gt; method.","pos":[0,136],"source":"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method."},{"content":"However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Stack&gt; using the SyncRoot property.","pos":[137,272],"source":" However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the SyncRoot property."},{"content":"The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Stack&gt;, not directly on the &lt;xref:System.Collections.Stack&gt;.","pos":[273,428],"source":" The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[429,510]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Stack&gt; object.","pos":[511,662],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[669,747]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[748,885]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[886,1067]},{"content":"The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.","pos":[1074,1183]},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p2\">](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p4\">](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)</ept><ept id=\"p5\">]</ept>       Retrieving the value of this property is an O(1) operation.","pos":[1190,1588],"source":"[!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)]  [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)]  [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)]       Retrieving the value of this property is an O(1) operation."}]},{"pos":[32375,32491],"content":"An &lt;xref:System.Object&gt; that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Object> that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>."},{"pos":[32870,32942],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a new array.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Collections.Stack\"></xref> to a new array."},{"pos":[32955,33241],"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to &lt;xref:System.Collections.Stack.Pop%2A&gt;.","pos":[0,187],"source":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.","pos":[194,284],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}]},{"pos":[33820,33919],"content":"A new array containing copies of the elements of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new array containing copies of the elements of the <xref href=\"System.Collections.Stack\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Stack\n  id: Stack\n  children:\n  - System.Collections.Stack.#ctor\n  - System.Collections.Stack.#ctor(System.Collections.ICollection)\n  - System.Collections.Stack.#ctor(System.Int32)\n  - System.Collections.Stack.Clear\n  - System.Collections.Stack.Clone\n  - System.Collections.Stack.Contains(System.Object)\n  - System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  - System.Collections.Stack.Count\n  - System.Collections.Stack.GetEnumerator\n  - System.Collections.Stack.IsSynchronized\n  - System.Collections.Stack.Peek\n  - System.Collections.Stack.Pop\n  - System.Collections.Stack.Push(System.Object)\n  - System.Collections.Stack.Synchronized(System.Collections.Stack)\n  - System.Collections.Stack.SyncRoot\n  - System.Collections.Stack.ToArray\n  langs:\n  - csharp\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n  type: Class\n  summary: Represents a simple last-in-first-out (LIFO) non-generic collection of objects.\n  remarks: \"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>.  \\n  \\n The capacity of a Stack is the number of elements the Stack can hold. As elements are added to a Stack, the capacity is automatically increased as required through reallocation.  \\n  \\n If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>. <xref:System.Collections.Stack.Pop%2A> is an O(1) operation.  \\n  \\n Stack accepts `null` as a valid value and allows duplicate elements.\"\n  example:\n  - \"The following example shows how to create and add values to a Stack and how to display its values.  \\n  \\n [!code-cs[Classic Stack Example#1](~/add/codesnippet/csharp/t-system.collections.stack_1.cs)]\\n [!code-vb[Classic Stack Example#1](~/add/codesnippet/visualbasic/t-system.collections.stack_1.vb)]\\n [!code-cpp[Classic Stack Example#1](~/add/codesnippet/cpp/t-system.collections.stack_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Stack/StackDebugView))]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class Stack : ICloneable, System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.ICloneable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.#ctor\n  id: '#ctor'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack()\n  nameWithType: Stack.Stack()\n  fullName: System.Collections.Stack.Stack()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the default initial capacity.\n  remarks: \"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: public Stack ();\n    parameters: []\n  overload: System.Collections.Stack.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack(ICollection)\n  nameWithType: Stack.Stack(ICollection)\n  fullName: System.Collections.Stack.Stack(ICollection)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.\n  remarks: \"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \\n  \\n The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.\"\n  syntax:\n    content: public Stack (System.Collections.ICollection col);\n    parameters:\n    - id: col\n      type: System.Collections.ICollection\n      description: The <xref:System.Collections.ICollection> to copy elements from.\n  overload: System.Collections.Stack.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>col</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack(Int32)\n  nameWithType: Stack.Stack(Int32)\n  fullName: System.Collections.Stack.Stack(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.\n  remarks: \"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `initialCapacity`.\"\n  syntax:\n    content: public Stack (int initialCapacity);\n    parameters:\n    - id: initialCapacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Stack\"></xref> can contain.\n  overload: System.Collections.Stack.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>initialCapacity</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Collections.Stack.Clear\n  id: Clear\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Stack.Clear()\n  fullName: System.Collections.Stack.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes all objects from the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to clear the values of the <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sta_5_1.cpp)]\\n [!code-vb[Classic Stack.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_5_1.vb)]\\n [!code-cs[Classic Stack.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sta_5_1.cs)]\"\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Collections.Stack.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.Clone\n  id: Clone\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Stack.Clone()\n  fullName: System.Collections.Stack.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Creates a shallow copy of the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: Stack.Contains(Object)\n  fullName: System.Collections.Stack.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Determines whether an element is in the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection. In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument.\"\n  syntax:\n    content: public virtual bool Contains (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to locate in the <xref href=\"System.Collections.Stack\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if <code>obj</code> is found in the <xref href=\"System.Collections.Stack\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Stack.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: Stack.CopyTo(Array,Int32)\n  fullName: System.Collections.Stack.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Stack\"></xref> to an existing one-dimensional <xref:System.Array>, starting at the specified array index.\n  remarks: \"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.  \\n  \\n [!code-cpp[Classic Stack.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sta_6_1.cpp)]\\n [!code-vb[Classic Stack.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_6_1.vb)]\\n [!code-cs[Classic Stack.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sta_6_1.cs)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.Stack.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Stack\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Stack\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.Stack.Count\n  id: Count\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Stack.Count\n  fullName: System.Collections.Stack.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. Count is the number of elements that are actually in the <xref:System.Collections.Stack>.  \\n  \\n The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Stack.GetEnumerator()\n  fullName: System.Collections.Stack.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns an <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: System.Collections.Stack.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)]\\n [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)]\\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.  \\n  \\n [!code-vb[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sta_0_2.vb)]\\n [!code-cpp[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sta_0_2.cpp)]\\n [!code-cs[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sta_0_2.cs)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Stack.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.Peek\n  id: Peek\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: Stack.Peek()\n  fullName: System.Collections.Stack.Peek()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref> without removing it.\n  remarks: \"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but Peek does not modify the <xref:System.Collections.Stack>.  \\n  \\n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \\n  \\n [!code-vb[Classic Stack.Peek Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_4_1.vb)]\\n [!code-cs[Classic Stack.Peek Example#1](~/add/codesnippet/csharp/m-system.collections.sta_4_1.cs)]\\n [!code-cpp[Classic Stack.Peek Example#1](~/add/codesnippet/cpp/m-system.collections.sta_4_1.cpp)]\"\n  syntax:\n    content: public virtual object Peek ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The <xref:System.Object> at the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Peek*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Stack\"></xref> is empty.\n  platform:\n  - net462\n- uid: System.Collections.Stack.Pop\n  id: Pop\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Pop()\n  nameWithType: Stack.Pop()\n  fullName: System.Collections.Stack.Pop()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes and returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.  \\n  \\n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \\n  \\n [!code-vb[Classic Stack.Peek Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_2_1.vb)]\\n [!code-cs[Classic Stack.Peek Example#1](~/add/codesnippet/csharp/m-system.collections.sta_2_1.cs)]\\n [!code-cpp[Classic Stack.Peek Example#1](~/add/codesnippet/cpp/m-system.collections.sta_2_1.cpp)]\"\n  syntax:\n    content: public virtual object Pop ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The <xref:System.Object> removed from the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Pop*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Stack\"></xref> is empty.\n  platform:\n  - net462\n- uid: System.Collections.Stack.Push(System.Object)\n  id: Push(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Push(Object)\n  nameWithType: Stack.Push(Object)\n  fullName: System.Collections.Stack.Push(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Inserts an object at the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.  \\n  \\n If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, Push is an O(1) operation. If the capacity needs to be increased to accommodate the new element, Push becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \\n  \\n [!code-vb[Classic Stack.Peek Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_1_1.vb)]\\n [!code-cs[Classic Stack.Peek Example#1](~/add/codesnippet/csharp/m-system.collections.sta_1_1.cs)]\\n [!code-cpp[Classic Stack.Peek Example#1](~/add/codesnippet/cpp/m-system.collections.sta_1_1.cpp)]\"\n  syntax:\n    content: public virtual void Push (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref:System.Object> to push onto the <xref href=\"System.Collections.Stack\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Stack.Push*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  id: Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Synchronized(Stack)\n  nameWithType: Stack.Synchronized(Stack)\n  fullName: System.Collections.Stack.Synchronized(Stack)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns a synchronized (thread safe) wrapper for the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)]\\n [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)]\\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)]  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.  \\n  \\n [!code-vb[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_3_2.vb)]\\n [!code-cpp[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sta_3_2.cpp)]\\n [!code-cs[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sta_3_2.cs)]\"\n  syntax:\n    content: public static System.Collections.Stack Synchronized (System.Collections.Stack stack);\n    parameters:\n    - id: stack\n      type: System.Collections.Stack\n      description: The <xref href=\"System.Collections.Stack\"></xref> to synchronize.\n    return:\n      type: System.Collections.Stack\n      description: A synchronized wrapper around the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>stack</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Stack.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: System.Collections.Stack.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)]\\n [!code-cs[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)]\\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Stack.ToArray\n  id: ToArray\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: Stack.ToArray()\n  fullName: System.Collections.Stack.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Stack\"></xref> to a new array.\n  remarks: \"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.  \\n  \\n [!code-cpp[Classic Stack.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sta_0_1.cpp)]\\n [!code-vb[Classic Stack.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_0_1.vb)]\\n [!code-cs[Classic Stack.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sta_0_1.cs)]\"\n  syntax:\n    content: public virtual object[] ToArray ();\n    parameters: []\n    return:\n      type: System.Object[]\n      description: A new array containing copies of the elements of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.ToArray*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Collections.Stack.#ctor\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack()\n  nameWithType: Stack.Stack()\n  fullName: System.Collections.Stack.Stack()\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack(ICollection)\n  nameWithType: Stack.Stack(ICollection)\n  fullName: System.Collections.Stack.Stack(ICollection)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack(Int32)\n  nameWithType: Stack.Stack(Int32)\n  fullName: System.Collections.Stack.Stack(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Stack.Clear\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clear()\n  nameWithType: Stack.Clear()\n  fullName: System.Collections.Stack.Clear()\n- uid: System.Collections.Stack.Clone\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clone()\n  nameWithType: Stack.Clone()\n  fullName: System.Collections.Stack.Clone()\n- uid: System.Collections.Stack.Contains(System.Object)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: Stack.Contains(Object)\n  fullName: System.Collections.Stack.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: Stack.CopyTo(Array,Int32)\n  fullName: System.Collections.Stack.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Stack.Count\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Count\n  nameWithType: Stack.Count\n  fullName: System.Collections.Stack.Count\n- uid: System.Collections.Stack.GetEnumerator\n  parent: System.Collections.Stack\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Stack.GetEnumerator()\n  fullName: System.Collections.Stack.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Stack.IsSynchronized\n  parent: System.Collections.Stack\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: System.Collections.Stack.IsSynchronized\n- uid: System.Collections.Stack.Peek\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Peek()\n  nameWithType: Stack.Peek()\n  fullName: System.Collections.Stack.Peek()\n- uid: System.Collections.Stack.Pop\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Pop()\n  nameWithType: Stack.Pop()\n  fullName: System.Collections.Stack.Pop()\n- uid: System.Collections.Stack.Push(System.Object)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Push(Object)\n  nameWithType: Stack.Push(Object)\n  fullName: System.Collections.Stack.Push(Object)\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Synchronized(Stack)\n  nameWithType: Stack.Synchronized(Stack)\n  fullName: System.Collections.Stack.Synchronized(Stack)\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n- uid: System.Collections.Stack.SyncRoot\n  parent: System.Collections.Stack\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: System.Collections.Stack.SyncRoot\n- uid: System.Collections.Stack.ToArray\n  parent: System.Collections.Stack\n  isExternal: false\n  name: ToArray()\n  nameWithType: Stack.ToArray()\n  fullName: System.Collections.Stack.ToArray()\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Stack.#ctor*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack\n  nameWithType: Stack.Stack\n- uid: System.Collections.Stack.Clear*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clear\n  nameWithType: Stack.Clear\n- uid: System.Collections.Stack.Clone*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clone\n  nameWithType: Stack.Clone\n- uid: System.Collections.Stack.Contains*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Contains\n  nameWithType: Stack.Contains\n- uid: System.Collections.Stack.CopyTo*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: CopyTo\n  nameWithType: Stack.CopyTo\n- uid: System.Collections.Stack.Count*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Count\n  nameWithType: Stack.Count\n- uid: System.Collections.Stack.GetEnumerator*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Stack.GetEnumerator\n- uid: System.Collections.Stack.IsSynchronized*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n- uid: System.Collections.Stack.Peek*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Peek\n  nameWithType: Stack.Peek\n- uid: System.Collections.Stack.Pop*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Pop\n  nameWithType: Stack.Pop\n- uid: System.Collections.Stack.Push*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Push\n  nameWithType: Stack.Push\n- uid: System.Collections.Stack.Synchronized*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Synchronized\n  nameWithType: Stack.Synchronized\n- uid: System.Collections.Stack.SyncRoot*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n- uid: System.Collections.Stack.ToArray*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: ToArray\n  nameWithType: Stack.ToArray\n"}