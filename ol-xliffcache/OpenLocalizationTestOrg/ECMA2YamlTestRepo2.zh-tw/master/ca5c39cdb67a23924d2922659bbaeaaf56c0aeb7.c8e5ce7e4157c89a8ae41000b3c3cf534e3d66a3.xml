{"nodes":[{"pos":[514,784],"content":"Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interface provides extra functionality that is needed by an IActiveScript host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interface provides extra functionality that is needed by an IActiveScript host.","pos":[0,270],"nodes":[{"content":"Defines methods that evaluate expressions and parse strings.","pos":[0,60]},{"content":"This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger.","pos":[61,185]},{"content":"This interface provides extra functionality that is needed by an IActiveScript host.","pos":[186,270]}]}]},{"pos":[1413,1820],"content":"When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement.","pos":[0,407],"nodes":[{"content":"When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value.","pos":[0,126]},{"content":"It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example).","pos":[127,234]},{"content":"For expressions, the value is the result of the expression.","pos":[235,294]},{"content":"For blocks and statements, the resulting expression is the last expression calculated by the block or statement.","pos":[295,407]}]}]},{"pos":[1832,2132],"content":"Note that the Evaluate method is functionally identical to the <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> method. Only the marshaling attributes differ. This version of the interface allows an unmanaged debugger to obtain the return value as an `IUnknown` pointer rather than a `VARIANT`.","needQuote":true,"needEscape":true,"nodes":[{"content":"Note that the Evaluate method is functionally identical to the &lt;xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A&gt; method.","pos":[0,125],"source":"Note that the Evaluate method is functionally identical to the <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> method."},{"content":"Only the marshaling attributes differ.","pos":[126,164]},{"content":"This version of the interface allows an unmanaged debugger to obtain the return value as an <ph id=\"ph1\">`IUnknown`</ph> pointer rather than a <ph id=\"ph2\">`VARIANT`</ph>.","pos":[165,300],"source":" This version of the interface allows an unmanaged debugger to obtain the return value as an `IUnknown` pointer rather than a `VARIANT`."}]},{"pos":[2259,2345],"content":"Returns a value that represents the evaluation of the statement, expression, or block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that represents the evaluation of the statement, expression, or block.","pos":[0,86]}]},{"pos":[3182,3725],"content":"When implemented in a class, parses strings and returns the parsed-out information. This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref>. The debugger might have a breakpoint typed in by the user in the form *functionname-arguments-ILoffset*. A named breakpoint string can have a complex format, for example, `F.B(C.D[], int, arg : double ) : C.Abc + 123.` The parameter list is optional, as is the IL offset.","needQuote":false,"needEscape":true,"nodes":[{"content":"When implemented in a class, parses strings and returns the parsed-out information.","pos":[0,83]},{"content":"This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[84,271],"source":" This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref>."},{"content":"The debugger might have a breakpoint typed in by the user in the form <bpt id=\"p1\">*</bpt>functionname-arguments-ILoffset<ept id=\"p1\">*</ept>.","pos":[272,376],"source":" The debugger might have a breakpoint typed in by the user in the form *functionname-arguments-ILoffset*."},{"content":"A named breakpoint string can have a complex format, for example, <ph id=\"ph1\">`F.B(C.D[], int, arg : double ) : C.Abc + 123.`</ph> The parameter list is optional, as is the IL offset.","pos":[377,543],"source":" A named breakpoint string can have a complex format, for example, `F.B(C.D[], int, arg : double ) : C.Abc + 123.` The parameter list is optional, as is the IL offset."}]},{"pos":[3979,4083],"content":"A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.","pos":[0,104]}]},{"pos":[4152,4292],"content":"Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.","pos":[0,140]}]},{"pos":[4353,4511],"content":"Out parameter returning the number of arguments in the optional argument list. Returns zero if there is no arguments list or if the string is not well formed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Out parameter returning the number of arguments in the optional argument list. Returns zero if there is no arguments list or if the string is not well formed.","pos":[0,158],"nodes":[{"content":"Out parameter returning the number of arguments in the optional argument list.","pos":[0,78]},{"content":"Returns zero if there is no arguments list or if the string is not well formed.","pos":[79,158]}]}]},{"pos":[4577,4787],"content":"Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.","pos":[0,210]}]},{"pos":[4854,5041],"content":"Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.","pos":[0,187]}]},{"pos":[5104,5238],"content":"Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.","pos":[0,134]}]},{"pos":[5297,5487],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the named breakpoint is successfully parsed, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> otherwise.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named breakpoint is successfully parsed, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem\n  id: IDebugVsaScriptCodeItem\n  children:\n  - Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate\n  - Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)\n  langs:\n  - csharp\n  name: IDebugVsaScriptCodeItem\n  nameWithType: IDebugVsaScriptCodeItem\n  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem\n  type: Interface\n  summary: Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interface provides extra functionality that is needed by an IActiveScript host.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53\")]\n\n      public interface IDebugVsaScriptCodeItem\n  implements: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate\n  id: Evaluate\n  parent: Microsoft.JScript.IDebugVsaScriptCodeItem\n  langs:\n  - csharp\n  name: Evaluate()\n  nameWithType: IDebugVsaScriptCodeItem.Evaluate()\n  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement.\n  remarks: Note that the Evaluate method is functionally identical to the <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> method. Only the marshaling attributes differ. This version of the interface allows an unmanaged debugger to obtain the return value as an `IUnknown` pointer rather than a `VARIANT`.\n  syntax:\n    content: public object Evaluate ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Returns a value that represents the evaluation of the statement, expression, or block.\n  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)\n  id: ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)\n  parent: Microsoft.JScript.IDebugVsaScriptCodeItem\n  langs:\n  - csharp\n  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)\n  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)\n  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: 'When implemented in a class, parses strings and returns the parsed-out information. This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref>. The debugger might have a breakpoint typed in by the user in the form *functionname-arguments-ILoffset*. A named breakpoint string can have a complex format, for example, `F.B(C.D[], int, arg : double ) : C.Abc + 123.` The parameter list is optional, as is the IL offset.'\n  syntax:\n    content: public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);\n    parameters:\n    - id: input\n      type: System.String\n      description: A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.\n    - id: functionName\n      type: System.String\n      description: Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.\n    - id: nargs\n      type: System.Int32\n      description: Out parameter returning the number of arguments in the optional argument list. Returns zero if there is no arguments list or if the string is not well formed.\n    - id: arguments\n      type: System.String\n      description: Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.\n    - id: returnType\n      type: System.String\n      description: Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.\n    - id: offset\n      type: System.UInt64\n      description: Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named breakpoint is successfully parsed, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.\n  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate\n  parent: Microsoft.JScript.IDebugVsaScriptCodeItem\n  isExternal: false\n  name: Evaluate()\n  nameWithType: IDebugVsaScriptCodeItem.Evaluate()\n  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)\n  parent: Microsoft.JScript.IDebugVsaScriptCodeItem\n  isExternal: false\n  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)\n  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)\n  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.UInt64\n  parent: System\n  isExternal: true\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*\n  parent: Microsoft.JScript.IDebugVsaScriptCodeItem\n  isExternal: false\n  name: Evaluate\n  nameWithType: IDebugVsaScriptCodeItem.Evaluate\n- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*\n  parent: Microsoft.JScript.IDebugVsaScriptCodeItem\n  isExternal: false\n  name: ParseNamedBreakPoint\n  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint\n"}