{"nodes":[{"pos":[730,846],"content":"Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited","pos":[0,116],"nodes":[{"content":"Specifies whether the property this attribute is bound to is read-only or read/write.","pos":[0,85]},{"content":"This class cannot be inherited","pos":[86,116]}]}]},{"pos":[859,2001],"content":"Members that are marked with the ReadOnlyAttribute set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the ReadOnlyAttribute set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.      > [!IMPORTANT] >  The <xref:System.ComponentModel.PropertyDescriptor> class enforces the ReadOnlyAttribute in the design environment and at run time. When you mark a property with the ReadOnlyAttribute set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the ReadOnlyAttribute set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.       For more information, see [Attributes](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Members that are marked with the ReadOnlyAttribute set to <ph id=\"ph1\">`true`</ph> or that do not have a <ph id=\"ph2\">`Set`</ph> method cannot be changed.","pos":[0,118],"source":"Members that are marked with the ReadOnlyAttribute set to `true` or that do not have a `Set` method cannot be changed."},{"content":"Members that do not have this attribute or that are marked with the ReadOnlyAttribute set to <ph id=\"ph1\">`false`</ph> are read/write, and they can be changed.","pos":[119,260],"source":" Members that do not have this attribute or that are marked with the ReadOnlyAttribute set to `false` are read/write, and they can be changed."},{"content":"The default is &lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;.","pos":[261,326],"source":" The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.ComponentModel.PropertyDescriptor&gt; class enforces the ReadOnlyAttribute in the design environment and at run time.","pos":[332,481],"source":"      > [!IMPORTANT] >  The <xref:System.ComponentModel.PropertyDescriptor> class enforces the ReadOnlyAttribute in the design environment and at run time."},{"content":"When you mark a property with the ReadOnlyAttribute set to <ph id=\"ph1\">`true`</ph>, the value of this attribute is set to the constant member &lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;.","pos":[482,658],"source":" When you mark a property with the ReadOnlyAttribute set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>."},{"content":"For a property marked with the ReadOnlyAttribute set to <ph id=\"ph1\">`false`</ph>, the value is &lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;.","pos":[659,787],"source":" For a property marked with the ReadOnlyAttribute set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as &lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName&gt; or &lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName&gt;.","pos":[788,1052],"source":" Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1059,1137],"source":"       For more information, see [Attributes](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[4644,4745],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref> class."},{"pos":[4758,5792],"content":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.      > [!NOTE] >  When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Members that are marked with the &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt; set to <ph id=\"ph1\">`true`</ph> or that do not have a <ph id=\"ph2\">`Set`</ph> method cannot be changed.","pos":[0,147],"source":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed."},{"content":"Members that do not have this attribute or that are marked with the &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt; set to <ph id=\"ph1\">`false`</ph> are read/write, and they can be changed.","pos":[148,318],"source":" Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed."},{"content":"The default is &lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;.","pos":[319,384],"source":" The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When you mark a property with the &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt; set to <ph id=\"ph2\">`true`</ph>, the value of this attribute is set to the constant member &lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;.","pos":[390,608],"source":"      > [!NOTE] >  When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>."},{"content":"For a property marked with the &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt; set to <ph id=\"ph1\">`false`</ph>, the value is &lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;.","pos":[609,766],"source":" For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as &lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName&gt; or &lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName&gt;.","pos":[767,1031],"source":" Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."}]},{"pos":[6607,6838],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to show that the property this attribute is bound to is read-only; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to show that the property is read/write.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to show that the property this attribute is bound to is read-only; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to show that the property is read/write."},{"pos":[7280,7606],"content":"Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write). This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the default value for the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> (that is, the property this attribute is bound to is read/write).","pos":[0,236],"source":"Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write)."},{"content":"This <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field is read-only.","pos":[237,326],"source":" This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only."}]},{"pos":[7618,7950],"content":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>.","pos":[0,332],"nodes":[{"content":"When you mark a property with this value, this attribute is set to the constant member &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;.","pos":[0,134],"source":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute>."},{"content":"Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as &lt;xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName&gt;.","pos":[135,332],"source":" Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>."}]}]},{"pos":[8129,8141],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8574,8639],"content":"Indicates whether this instance and a specified object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether this instance and a specified object are equal.","pos":[0,65]}]},{"pos":[8784,8813],"content":"Another object to compare to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Another object to compare to.","pos":[0,29]}]},{"pos":[8872,9056],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to this instance; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is equal to this instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9526,9566],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[9701,9790],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>."},{"pos":[10300,10344],"content":"Determines if this attribute is the default.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines if this attribute is the default.","pos":[0,44]}]},{"pos":[10489,10688],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the attribute is the default value for this attribute class; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the attribute is the default value for this attribute class; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11161,11246],"content":"Gets a value indicating whether the property this attribute is bound to is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the property this attribute is bound to is read-only.","pos":[0,85]}]},{"pos":[12433,12644],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property this attribute is bound to is read-only; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the property is read/write.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property this attribute is bound to is read-only; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the property is read/write."},{"pos":[13066,13245],"content":"Specifies that the property this attribute is bound to is read/write and can be modified. This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the property this attribute is bound to is read/write and can be modified.","pos":[0,89]},{"content":"This <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field is read-only.","pos":[90,179],"source":" This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only."}]},{"pos":[13258,13607],"content":"This field is the default setting for this attribute.       When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member No. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as No.","needQuote":false,"needEscape":true,"nodes":[{"content":"This field is the default setting for this attribute.","pos":[0,53]},{"content":"When you mark a property with the &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt; set to <ph id=\"ph1\">`false`</ph>, the value of this attribute is set to the constant member No.","pos":[60,218],"source":"       When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member No."},{"content":"Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as No.","pos":[219,347]}]},{"pos":[13782,13794],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14157,14361],"content":"Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer.","pos":[0,114]},{"content":"This <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field is read-only.","pos":[115,204],"source":" This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only."}]},{"pos":[14373,14661],"content":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member Yes. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as Yes.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you mark a property with the &lt;xref:System.ComponentModel.ReadOnlyAttribute&gt; set to <ph id=\"ph1\">`true`</ph>, the value of this attribute is set to the constant member Yes.","pos":[0,158],"source":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member Yes."},{"content":"Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as Yes.","pos":[159,288]}]},{"pos":[14836,14848],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ReadOnlyAttribute\n  id: ReadOnlyAttribute\n  children:\n  - System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  - System.ComponentModel.ReadOnlyAttribute.Default\n  - System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  - System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  - System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  - System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  - System.ComponentModel.ReadOnlyAttribute.No\n  - System.ComponentModel.ReadOnlyAttribute.Yes\n  langs:\n  - csharp\n  name: ReadOnlyAttribute\n  nameWithType: ReadOnlyAttribute\n  fullName: System.ComponentModel.ReadOnlyAttribute\n  type: Class\n  summary: Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited\n  remarks: \"Members that are marked with the ReadOnlyAttribute set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the ReadOnlyAttribute set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.ComponentModel.PropertyDescriptor> class enforces the ReadOnlyAttribute in the design environment and at run time. When you mark a property with the ReadOnlyAttribute set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the ReadOnlyAttribute set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.  \\n  \\n For more information, see [Attributes](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example marks a property as read-only.  \\n  \\n [!code-cs[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/t-system.componentmodel._82_1.cs)]\\n [!code-vb[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._82_1.vb)]\\n [!code-cpp[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/t-system.componentmodel._82_1.cpp)]  \\n  \\n The next code example shows how to check the value of the ReadOnlyAttribute for `MyProperty`. First, the code gets a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object. Next, it indexes into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`. Then it returns the attributes for this property and saves them in the attributes variable.  \\n  \\n The example presents two different ways of checking the value of the ReadOnlyAttribute. In the second code fragment, the example calls the <xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A> method. In the last code fragment, the example uses the <xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A> property to check the value.  \\n  \\n [!code-cs[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/csharp/t-system.componentmodel._82_2.cs)]\\n [!code-vb[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._82_2.vb)]\\n [!code-cpp[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/cpp/t-system.componentmodel._82_2.cpp)]  \\n  \\n If you marked a class with the ReadOnlyAttribute, use the following code example to check the value.  \\n  \\n [!code-cs[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/csharp/t-system.componentmodel._82_3.cs)]\\n [!code-vb[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/visualbasic/t-system.componentmodel._82_3.vb)]\\n [!code-cpp[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/cpp/t-system.componentmodel._82_3.cpp)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.All)]\n\n      public sealed class ReadOnlyAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: ReadOnlyAttribute(Boolean)\n  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref> class.\n  remarks: \"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.  \\n  \\n> [!NOTE]\\n>  When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.\"\n  example:\n  - \"The following code example marks a property as read-only. This code creates a new <xref:System.ComponentModel.ReadOnlyAttribute>, sets its value to <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>, and binds it to the property.  \\n  \\n [!code-cpp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/m-system.componentmodel._35_1.cpp)]\\n [!code-vb[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._35_1.vb)]\\n [!code-cs[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/m-system.componentmodel._35_1.cs)]\"\n  syntax:\n    content: public ReadOnlyAttribute (bool isReadOnly);\n    parameters:\n    - id: isReadOnly\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to show that the property this attribute is bound to is read-only; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to show that the property is read/write.\n  overload: System.ComponentModel.ReadOnlyAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.Default\n  id: Default\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: Default\n  nameWithType: ReadOnlyAttribute.Default\n  fullName: System.ComponentModel.ReadOnlyAttribute.Default\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write). This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.\n  remarks: When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>.\n  syntax:\n    content: public static readonly System.ComponentModel.ReadOnlyAttribute Default;\n    return:\n      type: System.ComponentModel.ReadOnlyAttribute\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ReadOnlyAttribute.Equals(Object)\n  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Indicates whether this instance and a specified object are equal.\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Another object to compare to.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is equal to this instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.ReadOnlyAttribute.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  id: GetHashCode\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ReadOnlyAttribute.GetHashCode()\n  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>.\n  overload: System.ComponentModel.ReadOnlyAttribute.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  id: IsDefaultAttribute\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: IsDefaultAttribute()\n  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()\n  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines if this attribute is the default.\n  syntax:\n    content: public override bool IsDefaultAttribute ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the attribute is the default value for this attribute class; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  id: IsReadOnly\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ReadOnlyAttribute.IsReadOnly\n  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the property this attribute is bound to is read-only.\n  remarks: ''\n  example:\n  - \"The following code example checks to see whether `MyProperty` is read-only. First, the code gets the attributes for `MyProperty` by doing the following:  \\n  \\n-   Retrieving a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object.  \\n  \\n-   Indexing into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`.  \\n  \\n-   Saving the attributes for this property in the attributes variable.  \\n  \\n Then the code sets `myAttribute` to the value of the <xref:System.ComponentModel.ReadOnlyAttribute> in the <xref:System.ComponentModel.AttributeCollection> and checks whether the property is read-only.  \\n  \\n [!code-cs[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.componentmodel._25_1.cs)]\\n [!code-cpp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.componentmodel._25_1.cpp)]\\n [!code-vb[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._25_1.vb)]\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property this attribute is bound to is read-only; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the property is read/write.\n  overload: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.No\n  id: No\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: No\n  nameWithType: ReadOnlyAttribute.No\n  fullName: System.ComponentModel.ReadOnlyAttribute.No\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Specifies that the property this attribute is bound to is read/write and can be modified. This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.\n  remarks: \"This field is the default setting for this attribute.  \\n  \\n When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member No. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as No.\"\n  syntax:\n    content: public static readonly System.ComponentModel.ReadOnlyAttribute No;\n    return:\n      type: System.ComponentModel.ReadOnlyAttribute\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ReadOnlyAttribute.Yes\n  id: Yes\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: Yes\n  nameWithType: ReadOnlyAttribute.Yes\n  fullName: System.ComponentModel.ReadOnlyAttribute.Yes\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.\n  remarks: When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member Yes. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as Yes.\n  syntax:\n    content: public static readonly System.ComponentModel.ReadOnlyAttribute Yes;\n    return:\n      type: System.ComponentModel.ReadOnlyAttribute\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: ReadOnlyAttribute(Boolean)\n  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.ReadOnlyAttribute.Default\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Default\n  nameWithType: ReadOnlyAttribute.Default\n  fullName: System.ComponentModel.ReadOnlyAttribute.Default\n- uid: System.ComponentModel.ReadOnlyAttribute\n  parent: System.ComponentModel\n  isExternal: false\n  name: ReadOnlyAttribute\n  nameWithType: ReadOnlyAttribute\n  fullName: System.ComponentModel.ReadOnlyAttribute\n- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ReadOnlyAttribute.Equals(Object)\n  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ReadOnlyAttribute.GetHashCode()\n  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()\n  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()\n- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReadOnlyAttribute.IsReadOnly\n  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n- uid: System.ComponentModel.ReadOnlyAttribute.No\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: No\n  nameWithType: ReadOnlyAttribute.No\n  fullName: System.ComponentModel.ReadOnlyAttribute.No\n- uid: System.ComponentModel.ReadOnlyAttribute.Yes\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Yes\n  nameWithType: ReadOnlyAttribute.Yes\n  fullName: System.ComponentModel.ReadOnlyAttribute.Yes\n- uid: System.ComponentModel.ReadOnlyAttribute.#ctor*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: ReadOnlyAttribute\n  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute\n- uid: System.ComponentModel.ReadOnlyAttribute.Equals*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Equals\n  nameWithType: ReadOnlyAttribute.Equals\n- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ReadOnlyAttribute.GetHashCode\n- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsDefaultAttribute\n  nameWithType: ReadOnlyAttribute.IsDefaultAttribute\n- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReadOnlyAttribute.IsReadOnly\n"}