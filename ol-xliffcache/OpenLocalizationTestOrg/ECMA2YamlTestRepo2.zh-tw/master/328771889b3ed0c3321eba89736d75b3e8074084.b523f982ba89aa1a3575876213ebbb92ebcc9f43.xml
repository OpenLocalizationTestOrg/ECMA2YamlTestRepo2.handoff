{"nodes":[{"pos":[1282,1386],"content":"Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.","pos":[0,104],"nodes":[{"content":"Represents a set of access rights allowed or denied for a user or group.","pos":[0,72]},{"content":"This class cannot be inherited.","pos":[73,104]}]}]},{"pos":[1399,4157],"content":"The RegistryAccessRule class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.      > [!NOTE] >  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.       To get a list of the rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of RegistryAccessRule objects.       RegistryAccessRule objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL). When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.      > [!NOTE] >  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.       Use RegistryAccessRule objects to specify access rights to allow or deny to a user or group. A RegistryAccessRule object always represents either allowed access or denied access, never both.       To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.      > [!IMPORTANT] >  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.       RegistryAccessRule objects are immutable. Security for a registry key is modified using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.","needQuote":false,"needEscape":true,"nodes":[{"content":"The RegistryAccessRule class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys.","pos":[0,151]},{"content":"For an overview of these classes, and their relationship to the underlying Windows access control structures, see &lt;xref:System.Security.AccessControl.RegistrySecurity&gt;.","pos":[152,320],"source":" For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Windows access control security can only be applied to registry keys.","pos":[326,408],"source":"      > [!NOTE] >  Windows access control security can only be applied to registry keys."},{"content":"It cannot be applied to individual key/value pairs stored in a key.","pos":[409,476]},{"content":"To get a list of the rules currently applied to a registry key, use the &lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Security.AccessControl.RegistrySecurity&gt; object, and then use its &lt;xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A&gt; method to obtain a collection of RegistryAccessRule objects.","pos":[483,866],"source":"       To get a list of the rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of RegistryAccessRule objects."},{"content":"RegistryAccessRule objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL).","pos":[873,1009]},{"content":"When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.","pos":[1010,1177]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The underlying access control entries change as you apply and remove rules.","pos":[1183,1271],"source":"      > [!NOTE] >  The underlying access control entries change as you apply and remove rules."},{"content":"The information in rules is merged if possible, to maintain the smallest number of access control entries.","pos":[1272,1378]},{"content":"Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.","pos":[1379,1498]},{"content":"Use RegistryAccessRule objects to specify access rights to allow or deny to a user or group.","pos":[1505,1597]},{"content":"A RegistryAccessRule object always represents either allowed access or denied access, never both.","pos":[1598,1695]},{"content":"To apply a rule to a registry key, use the &lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName&gt; method to get the &lt;xref:System.Security.AccessControl.RegistrySecurity&gt; object.","pos":[1702,1904],"source":"       To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object."},{"content":"Modify the &lt;xref:System.Security.AccessControl.RegistrySecurity&gt; object by using its methods to add the rule, and then use the &lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt; method to reattach the security object.","pos":[1905,2151],"source":" Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Changes you make to a &lt;xref:System.Security.AccessControl.RegistrySecurity&gt; object do not affect the access levels of the registry key until you call the &lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt; method to assign the altered security object to the registry key.","pos":[2157,2474],"source":"      > [!IMPORTANT] >  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key."},{"content":"RegistryAccessRule objects are immutable.","pos":[2481,2522]},{"content":"Security for a registry key is modified using the methods of the &lt;xref:System.Security.AccessControl.RegistrySecurity&gt; class to add or remove rules; as you do this, the underlying access control entries are modified.","pos":[2523,2739],"source":" Security for a registry key is modified using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified."}]},{"pos":[6748,6990],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied."},{"pos":[7002,7237],"content":"This constructor specifies default propagation and inheritance. That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor specifies default propagation and inheritance. That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.","pos":[0,235],"nodes":[{"content":"This constructor specifies default propagation and inheritance.","pos":[0,63]},{"content":"That is, &lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt; and &lt;xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName&gt;.","pos":[64,235],"source":" That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>."}]}]},{"pos":[7568,7860],"content":"The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user or group the rule applies to.","pos":[0,38]},{"content":"Must be of type <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or a type such as <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that can be converted to type <bpt id=\"p3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[39,292],"source":" Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}]},{"pos":[7962,8100],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating the rights allowed or denied.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied."},{"pos":[8195,8334],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating whether the rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values indicating whether the rights are allowed or denied."},{"pos":[8532,8654],"content":"<code>registryRights</code> specifies an invalid value.       -or-       <code>type</code> specifies an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> specifies an invalid value.","pos":[0,55],"source":"<code>registryRights</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","pos":[62,118],"source":"       -or-       <code>type</code> specifies an invalid value."}]},{"pos":[8759,8906],"content":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>eventRights</code> is zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,86],"source":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> is zero.","pos":[93,137],"source":"       -or-       <code>eventRights</code> is zero."}]},{"pos":[9002,9284],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is neither of type <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> nor of a type such as <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that can be converted to type <bpt id=\"p3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."},{"pos":[10064,10318],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied."},{"pos":[10331,11118],"content":"This constructor specifies default propagation and inheritance. That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.       This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor specifies default propagation and inheritance.","pos":[0,63]},{"content":"That is, &lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt; and &lt;xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName&gt;.","pos":[64,235],"source":" That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>."},{"content":"This constructor is equivalent to creating an &lt;xref:System.Security.Principal.NTAccount&gt; object, by passing <ph id=\"ph1\">`identity`</ph> to the &lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName&gt; constructor, and passing the newly created &lt;xref:System.Security.Principal.NTAccount&gt; object to the &lt;xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29&gt; constructor.","pos":[242,785],"source":"       This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor."}]},{"pos":[11929,11979],"content":"The name of the user or group the rule applies to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the user or group the rule applies to.","pos":[0,50]}]},{"pos":[12081,12219],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating the rights allowed or denied.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied."},{"pos":[12314,12453],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating whether the rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values indicating whether the rights are allowed or denied."},{"pos":[12651,12773],"content":"<code>registryRights</code> specifies an invalid value.       -or-       <code>type</code> specifies an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> specifies an invalid value.","pos":[0,55],"source":"<code>registryRights</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","pos":[62,118],"source":"       -or-       <code>type</code> specifies an invalid value."}]},{"pos":[12877,12913],"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> is zero.","needQuote":true,"needEscape":true,"source":"<code>registryRights</code> is zero."},{"pos":[13009,13243],"content":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>identity</code> is a zero-length string.       -or-       <code>identity</code> is longer than 512 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,86],"source":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is a zero-length string.","pos":[93,150],"source":"       -or-       <code>identity</code> is a zero-length string."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is longer than 512 characters.","pos":[157,220],"source":"       -or-       <code>identity</code> is longer than 512 characters."}]},{"pos":[14407,14695],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied."},{"pos":[17315,17607],"content":"The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user or group the rule applies to.","pos":[0,38]},{"content":"Must be of type <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or a type such as <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that can be converted to type <bpt id=\"p3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[39,292],"source":" Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}]},{"pos":[17709,17847],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the rights allowed or denied.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the rights allowed or denied."},{"pos":[17953,18114],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> flags specifying how access rights are inherited from other objects.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags specifying how access rights are inherited from other objects."},{"pos":[18220,18380],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.PropagationFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> flags specifying how access rights are propagated to other objects.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags specifying how access rights are propagated to other objects."},{"pos":[18475,18614],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying whether the rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied."},{"pos":[18812,19092],"content":"<code>registryRights</code> specifies an invalid value.       -or-       <code>type</code> specifies an invalid value.       -or-       <code>inheritanceFlags</code> specifies an invalid value.       -or-       <code>propagationFlags</code> specifies an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> specifies an invalid value.","pos":[0,55],"source":"<code>registryRights</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","pos":[62,118],"source":"       -or-       <code>type</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph> specifies an invalid value.","pos":[125,193],"source":"       -or-       <code>inheritanceFlags</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph> specifies an invalid value.","pos":[200,268],"source":"       -or-       <code>propagationFlags</code> specifies an invalid value."}]},{"pos":[19197,19347],"content":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>registryRights</code> is zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,86],"source":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> is zero.","pos":[93,140],"source":"       -or-       <code>registryRights</code> is zero."}]},{"pos":[19443,19726],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is neither of type <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, nor of a type such as <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that can be converted to type <bpt id=\"p3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."},{"pos":[20796,21096],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied."},{"pos":[25393,25443],"content":"The name of the user or group the rule applies to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the user or group the rule applies to.","pos":[0,50]}]},{"pos":[25545,25683],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating the rights allowed or denied.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied."},{"pos":[25789,25950],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> flags specifying how access rights are inherited from other objects.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags specifying how access rights are inherited from other objects."},{"pos":[26056,26216],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.PropagationFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> flags specifying how access rights are propagated to other objects.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags specifying how access rights are propagated to other objects."},{"pos":[26311,26450],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying whether the rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied."},{"pos":[26648,26928],"content":"<code>registryRights</code> specifies an invalid value.       -or-       <code>type</code> specifies an invalid value.       -or-       <code>inheritanceFlags</code> specifies an invalid value.       -or-       <code>propagationFlags</code> specifies an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> specifies an invalid value.","pos":[0,55],"source":"<code>registryRights</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","pos":[62,118],"source":"       -or-       <code>type</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph> specifies an invalid value.","pos":[125,193],"source":"       -or-       <code>inheritanceFlags</code> specifies an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph> specifies an invalid value.","pos":[200,268],"source":"       -or-       <code>propagationFlags</code> specifies an invalid value."}]},{"pos":[27032,27065],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> is zero.","needQuote":true,"needEscape":true,"source":"<code>eventRights</code> is zero."},{"pos":[27161,27395],"content":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>identity</code> is a zero-length string.       -or-       <code>identity</code> is longer than 512 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,86],"source":"<code>identity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is a zero-length string.","pos":[93,150],"source":"       -or-       <code>identity</code> is a zero-length string."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is longer than 512 characters.","pos":[157,220],"source":"       -or-       <code>identity</code> is longer than 512 characters."}]},{"pos":[27838,27891],"content":"Gets the rights allowed or denied by the access rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the rights allowed or denied by the access rule.","pos":[0,53]}]},{"pos":[27903,28181],"content":"<xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"<xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.","pos":[0,278],"nodes":[{"content":"&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt; objects are immutable.","pos":[0,78],"source":"<xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable."},{"content":"You can create a new access rule representing a different user, different rights, or a different &lt;xref:System.Security.AccessControl.AccessControlType&gt;, but you cannot modify an existing access rule.","pos":[79,278],"source":" You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule."}]}]},{"pos":[28369,28526],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating the rights allowed or denied by the access rule.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied by the access rule."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.RegistryAccessRule\n  id: RegistryAccessRule\n  children:\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  langs:\n  - csharp\n  name: RegistryAccessRule\n  nameWithType: RegistryAccessRule\n  fullName: System.Security.AccessControl.RegistryAccessRule\n  type: Class\n  summary: Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.\n  remarks: \"The RegistryAccessRule class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.  \\n  \\n> [!NOTE]\\n>  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.  \\n  \\n To get a list of the rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of RegistryAccessRule objects.  \\n  \\n RegistryAccessRule objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL). When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.  \\n  \\n> [!NOTE]\\n>  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.  \\n  \\n Use RegistryAccessRule objects to specify access rights to allow or deny to a user or group. A RegistryAccessRule object always represents either allowed access or denied access, never both.  \\n  \\n To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.  \\n  \\n> [!IMPORTANT]\\n>  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.  \\n  \\n RegistryAccessRule objects are immutable. Security for a registry key is modified using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.\"\n  example:\n  - \"The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \\n  \\n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.  \\n  \\n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_11_1.vb)]\\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_11_1.cs)]\"\n  syntax:\n    content: 'public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AccessRule\n  implements: []\n  inheritedMembers:\n  - System.Security.AccessControl.AccessRule.AccessControlType\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  platform:\n  - net462\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.\n  remarks: This constructor specifies default propagation and inheritance. That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.\n  syntax:\n    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values indicating whether the rights are allowed or denied.\n  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>registryRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>type</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identity</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>eventRights</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  name: RegistryAccessRule(String,RegistryRights,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.\n  remarks: \"This constructor specifies default propagation and inheritance. That is, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> and <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.  \\n  \\n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.\"\n  example:\n  - \"The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \\n  \\n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/cf7d2ba9-37b1-4239-a52a-_1.cs)]\\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/cf7d2ba9-37b1-4239-a52a-_1.vb)]\"\n  syntax:\n    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.String\n      description: The name of the user or group the rule applies to.\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values indicating whether the rights are allowed or denied.\n  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>registryRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>type</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>registryRights</code> is zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>identity</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>identity</code> is a zero-length string.  \\n  \\n -or-  \\n  \\n <code>identity</code> is longer than 512 characters.\"\n  platform:\n  - net462\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.\n  remarks: \"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\\\CS\\\\GS.  \\n  \\n|Propagation flags|S|CS|GS|  \\n|-----------------------|-------|--------|--------|  \\n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \\n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \\n  \\n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \\n  \\n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \\n  \\n> [!NOTE]\\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.\"\n  syntax:\n    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the rights allowed or denied.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags specifying how access rights are inherited from other objects.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags specifying how access rights are propagated to other objects.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.\n  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>registryRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>type</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>inheritanceFlags</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>propagationFlags</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identity</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>registryRights</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.\n  remarks: \"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\\\CS\\\\GS.  \\n  \\n|Propagation flags|S|CS|GS|  \\n|-----------------------|-------|--------|--------|  \\n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \\n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \\n  \\n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \\n  \\n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \\n  \\n> [!NOTE]\\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.  \\n  \\n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor.\"\n  example:\n  - \"The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \\n  \\n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.  \\n  \\n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/43217ff3-f8bd-4a0e-bd95-_1.vb)]\\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/43217ff3-f8bd-4a0e-bd95-_1.cs)]\"\n  syntax:\n    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.String\n      description: The name of the user or group the rule applies to.\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags specifying how access rights are inherited from other objects.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags specifying how access rights are propagated to other objects.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.\n  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>registryRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>type</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>inheritanceFlags</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>propagationFlags</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventRights</code> is zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>identity</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>identity</code> is a zero-length string.  \\n  \\n -or-  \\n  \\n <code>identity</code> is longer than 512 characters.\"\n  platform:\n  - net462\n- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  id: RegistryRights\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  name: RegistryRights\n  nameWithType: RegistryAccessRule.RegistryRights\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the rights allowed or denied by the access rule.\n  remarks: <xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.\n  syntax:\n    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }\n    return:\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values indicating the rights allowed or denied by the access rule.\n  overload: System.Security.AccessControl.RegistryAccessRule.RegistryRights*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.AccessControl.AccessRule\n  isExternal: false\n  name: System.Security.AccessControl.AccessRule\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: System.Security.AccessControl.RegistryRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RegistryRights\n  nameWithType: RegistryRights\n  fullName: System.Security.AccessControl.RegistryRights\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryAccessRule(String,RegistryRights,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)\n- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryRights\n  nameWithType: RegistryAccessRule.RegistryRights\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor*\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryAccessRule\n  nameWithType: RegistryAccessRule.RegistryAccessRule\n- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights*\n  parent: System.Security.AccessControl.RegistryAccessRule\n  isExternal: false\n  name: RegistryRights\n  nameWithType: RegistryAccessRule.RegistryRights\n"}