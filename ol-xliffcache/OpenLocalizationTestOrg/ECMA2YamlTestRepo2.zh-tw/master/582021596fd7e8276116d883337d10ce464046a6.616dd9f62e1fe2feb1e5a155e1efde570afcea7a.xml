{"nodes":[{"pos":[5231,5320],"content":"Encapsulates the account and contact data common to principals that can be authenticated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encapsulates the account and contact data common to principals that can be authenticated.","pos":[0,89]}]},{"pos":[9507,9804],"content":"Initializes a new instance of the <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> class by using the specified context. This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified context.","pos":[0,158],"source":"Initializes a new instance of the <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> class by using the specified context."},{"content":"This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.","pos":[159,297]}]},{"pos":[9816,10098],"content":"Custom extension classes that derive from this class can call this constructor from the derived class constructor to initialize the base class. For more information, see the [Principal Extensions](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00) overview topic.","needQuote":true,"needEscape":true,"nodes":[{"content":"Custom extension classes that derive from this class can call this constructor from the derived class constructor to initialize the base class.","pos":[0,143]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Principal Extensions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00)</ept> overview topic.","pos":[144,282],"source":" For more information, see the [Principal Extensions](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00) overview topic."}]},{"pos":[10351,10511],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed."},{"pos":[11496,11840],"content":"Initializes a new instance of the <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> class by using the specified context, SAM account name, password, and enabled value. This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified context, SAM account name, password, and enabled value.","pos":[0,205],"source":"Initializes a new instance of the <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> class by using the specified context, SAM account name, password, and enabled value."},{"content":"This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.","pos":[206,344]}]},{"pos":[11852,12134],"content":"Custom extension classes that derive from this class can call this constructor from the derived class constructor to initialize the base class. For more information, see the [Principal Extensions](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00) overview topic.","needQuote":true,"needEscape":true,"nodes":[{"content":"Custom extension classes that derive from this class can call this constructor from the derived class constructor to initialize the base class.","pos":[0,143]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Principal Extensions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00)</ept> overview topic.","pos":[144,282],"source":" For more information, see the [Principal Extensions](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00) overview topic."}]},{"pos":[12441,12601],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed."},{"pos":[12672,12712],"content":"The SAM account name for this principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SAM account name for this principal.","pos":[0,40]}]},{"pos":[12777,12807],"content":"The password for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"The password for this account.","pos":[0,30]}]},{"pos":[12872,12934],"content":"A Boolean value that specifies whether the account is enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that specifies whether the account is enabled.","pos":[0,62]}]},{"pos":[13615,13720],"content":"Gets or sets a Nullable <xref:System.DateTime> that specifies the date and time that the account expires.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Nullable &lt;xref:System.DateTime&gt; that specifies the date and time that the account expires.","pos":[0,105],"source":"Gets or sets a Nullable <xref:System.DateTime> that specifies the date and time that the account expires."}]},{"pos":[13733,14212],"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.       When you set the AccountExpirationDate, the time will default to UTC.  If you want to write in local time, then specify the <xref:System.DateTime.Kind%2A> property of your <xref:System.DateTime> object as <xref:DateTimeKind.Local>.","needQuote":false,"needEscape":true,"nodes":[{"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.       When you set the AccountExpirationDate, the time will default to UTC.  If you want to write in local time, then specify the <xref:System.DateTime.Kind%2A> property of your <xref:System.DateTime> object as <xref:DateTimeKind.Local>.","pos":[0,477],"nodes":[{"content":"As with all &lt;xref:System.DateTime&gt; properties in &lt;xref:System.DirectoryServices.AccountManagement&gt;, the time returned is in UTC form.","pos":[0,133],"source":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form."},{"content":"To convert it to local time, call the &lt;xref:System.DateTime.ToLocalTime%2A&gt; method on the return object.","pos":[135,239],"source":"  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object."},{"content":"When you set the AccountExpirationDate, the time will default to UTC.","pos":[246,315]},{"content":"If you want to write in local time, then specify the &lt;xref:System.DateTime.Kind%2A&gt; property of your &lt;xref:System.DateTime&gt; object as &lt;xref:DateTimeKind.Local&gt;.","pos":[317,477],"source":"  If you want to write in local time, then specify the <xref:System.DateTime.Kind%2A> property of your <xref:System.DateTime> object as <xref:DateTimeKind.Local>."}]}]},{"pos":[14375,14496],"content":"A <xref:System.DateTime> that specifies the date and time that the account expires, or null if the account never expires.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; that specifies the date and time that the account expires, or null if the account never expires.","pos":[0,121],"source":"A <xref:System.DateTime> that specifies the date and time that the account expires, or null if the account never expires."}]},{"pos":[14722,14774],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[15338,15444],"content":"Gets the Nullable <xref:System.DateTime> that specifies the date and time that the account was locked out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Nullable &lt;xref:System.DateTime&gt; that specifies the date and time that the account was locked out.","pos":[0,106],"source":"Gets the Nullable <xref:System.DateTime> that specifies the date and time that the account was locked out."}]},{"pos":[15457,16297],"content":"The account lockout time is system dependent, and cannot be set by the Account Management API. To unlock the account, use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount%2A> method.       It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value. Applications should use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut%2A> method to determine whether the account is locked out.       As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","needQuote":false,"needEscape":true,"nodes":[{"content":"The account lockout time is system dependent, and cannot be set by the Account Management API. To unlock the account, use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount%2A> method.       It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value. Applications should use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut%2A> method to determine whether the account is locked out.       As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","pos":[0,836],"nodes":[{"content":"The account lockout time is system dependent, and cannot be set by the Account Management API.","pos":[0,94]},{"content":"To unlock the account, use the &lt;xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount%2A&gt; method.","pos":[95,223],"source":" To unlock the account, use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount%2A> method."},{"content":"It is possible that an account may not be locked out when the &lt;xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A&gt; returns a non-null value.","pos":[230,412],"source":"       It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value."},{"content":"Applications should use the &lt;xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut%2A&gt; method to determine whether the account is locked out.","pos":[413,590],"source":" Applications should use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut%2A> method to determine whether the account is locked out."},{"content":"As with all &lt;xref:System.DateTime&gt; properties in &lt;xref:System.DirectoryServices.AccountManagement&gt;, the time returned is in UTC form.","pos":[597,730],"source":"       As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form."},{"content":"To convert it to local time, call the &lt;xref:System.DateTime.ToLocalTime%2A&gt; method on the return object.","pos":[732,836],"source":"  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object."}]}]},{"pos":[16452,16592],"content":"A <xref:System.DateTime> that specifies the date and time that the account was locked out, or null if no lockout time is set on the account.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; that specifies the date and time that the account was locked out, or null if no lockout time is set on the account.","pos":[0,140],"source":"A <xref:System.DateTime> that specifies the date and time that the account was locked out, or null if no lockout time is set on the account."}]},{"pos":[16815,16867],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[17441,17776],"content":"Returns an &lt;xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter&gt; object, for use with <bpt id=\"p1\">[</bpt>Query By Example<ept id=\"p1\">](http://msdn.microsoft.com/en-us/84ac40bb-04c4-4d0b-adaf-0ddb9253599e)</ept> to set read-only properties before passing the object to the <bpt id=\"p2\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalSearcher\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter> object, for use with [Query By Example](http://msdn.microsoft.com/en-us/84ac40bb-04c4-4d0b-adaf-0ddb9253599e) to set read-only properties before passing the object to the <xref href=\"System.DirectoryServices.AccountManagement.PrincipalSearcher\"></xref>."},{"pos":[17788,17912],"content":"See the <bpt id=\"p1\">[</bpt>Query By Example<ept id=\"p1\">](http://msdn.microsoft.com/en-us/84ac40bb-04c4-4d0b-adaf-0ddb9253599e)</ept> documentation for examples.","needQuote":true,"needEscape":true,"source":"See the [Query By Example](http://msdn.microsoft.com/en-us/84ac40bb-04c4-4d0b-adaf-0ddb9253599e) documentation for examples."},{"pos":[18142,18223],"content":"An <xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter&gt; object.","pos":[0,81],"source":"An <xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter> object."}]},{"pos":[18979,19090],"content":"Gets or sets a Boolean value that specifies whether reversible password encryption is enabled for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that specifies whether reversible password encryption is enabled for this account.","pos":[0,111]}]},{"pos":[19232,19429],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if reversible password encryption is enabled for this account; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if reversible password encryption is enabled for this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19667,19719],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[20258,20337],"content":"Gets the number of logon attempts using incorrect credentials for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of logon attempts using incorrect credentials for this account.","pos":[0,79]}]},{"pos":[20451,20525],"content":"The number of logon attempts using incorrect credentials for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of logon attempts using incorrect credentials for this account.","pos":[0,74]}]},{"pos":[20743,20795],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[21329,21483],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the X509 certificates for this account.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> that contains the X509 certificates for this account."},{"pos":[21725,21874],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the X509 certificates for this account.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> that contains the X509 certificates for this account."},{"pos":[22091,22143],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[22788,22965],"content":"Changes the account password from the old password to the new password. Do not use this with a <xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the account password from the old password to the new password.","pos":[0,71]},{"content":"Do not use this with a <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,177],"source":" Do not use this with a <xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"></xref>."}]},{"pos":[22977,23180],"content":"This method is not intended for computer principals. Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not intended for computer principals. Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown.","pos":[0,203],"nodes":[{"content":"This method is not intended for computer principals.","pos":[0,52]},{"content":"Calling this with a &lt;xref:System.DirectoryServices.AccountManagement.ComputerPrincipal&gt; will cause a &lt;xref:System.NotSupportedException&gt; to be thrown.","pos":[53,203],"source":" Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown."}]}]},{"pos":[23356,23385],"content":"The password that is changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The password that is changed.","pos":[0,29]}]},{"pos":[23453,23470],"content":"The new password.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new password.","pos":[0,17]}]},{"pos":[23689,23726],"content":"The principal has not been persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The principal has not been persisted.","pos":[0,37]}]},{"pos":[23893,23952],"content":"The new password does not meet the complexity requirements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new password does not meet the complexity requirements.","pos":[0,59]}]},{"pos":[24055,24083],"content":"The principal is not a user.","needQuote":true,"needEscape":true,"nodes":[{"content":"The principal is not a user.","pos":[0,28]}]},{"pos":[24652,24742],"content":"Gets or sets a Nullable Boolean value that specifies whether the account may be delegated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Nullable Boolean value that specifies whether the account may be delegated.","pos":[0,90]}]},{"pos":[24870,25037],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the account may be delegated; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the account may be delegated; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25261,25313],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[25822,25926],"content":"Gets or sets a Nullable Boolean value that specifies whether this account is enabled for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Nullable Boolean value that specifies whether this account is enabled for authentication.","pos":[0,104]}]},{"pos":[25938,26335],"content":"If the principal has not been persisted in the store, this property returns null. After the principal is persisted, the default enabled setting depends on the store. The AD DS and AD LDS stores disable new principals when they are persisted, whereas SAM enables new principals when they are persisted. The application can only set this property to a value after it has been persisted in the store.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the principal has not been persisted in the store, this property returns null. After the principal is persisted, the default enabled setting depends on the store. The AD DS and AD LDS stores disable new principals when they are persisted, whereas SAM enables new principals when they are persisted. The application can only set this property to a value after it has been persisted in the store.","pos":[0,397],"nodes":[{"content":"If the principal has not been persisted in the store, this property returns null.","pos":[0,81]},{"content":"After the principal is persisted, the default enabled setting depends on the store.","pos":[82,165]},{"content":"The AD DS and AD LDS stores disable new principals when they are persisted, whereas SAM enables new principals when they are persisted.","pos":[166,301]},{"content":"The application can only set this property to a value after it has been persisted in the store.","pos":[302,397]}]}]},{"pos":[26478,26688],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the principal is enabled, or null if the account has not been persisted; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the principal is enabled, or null if the account has not been persisted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26900,26952],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[27055,27115],"content":"The application tried to set a null value for this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application tried to set a null value for this property.","pos":[0,60]}]},{"pos":[27678,27787],"content":"Expires the password for this account. This will force the user to change his/her password at the next logon.","needQuote":true,"needEscape":true,"nodes":[{"content":"Expires the password for this account. This will force the user to change his/her password at the next logon.","pos":[0,109],"nodes":[{"content":"Expires the password for this account.","pos":[0,38]},{"content":"This will force the user to change his/her password at the next logon.","pos":[39,109]}]}]},{"pos":[27799,27875],"content":"Call this method to force the user to change the password at the next logon.","needQuote":true,"needEscape":true,"nodes":[{"content":"Call this method to force the user to change the password at the next logon.","pos":[0,76]}]},{"pos":[28249,28308],"content":"An exception occurred when saving the changes to the store.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception occurred when saving the changes to the store.","pos":[0,59]}]},{"pos":[29271,29410],"content":"Returns a collection of authentication principal objects that have an incorrect password try recorded in the specified date and time range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of authentication principal objects that have an incorrect password try recorded in the specified date and time range.","pos":[0,139]}]},{"pos":[29422,29607],"content":"The time will default to UTC.  If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:DateTimeKind.Local>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time will default to UTC.","pos":[0,29]},{"content":"If you want to specify the time in local time, then specify the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> object as &lt;xref:DateTimeKind.Local&gt;.","pos":[31,185],"source":"  If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:DateTimeKind.Local>."}]},{"pos":[30072,30239],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> object that specifies the server or domain against which operations are performed."},{"pos":[30302,30544],"content":"A <xref:System.DateTime> object that identifies the date and time of the incorrect password try. This parameter is used with the type parameter to determine the range of time in which the returned objects have an incorrect logon try recorded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.DateTime> object that identifies the date and time of the incorrect password try. This parameter is used with the type parameter to determine the range of time in which the returned objects have an incorrect logon try recorded.","pos":[0,242],"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object that identifies the date and time of the incorrect password try.","pos":[0,96],"source":"A <xref:System.DateTime> object that identifies the date and time of the incorrect password try."},{"content":"This parameter is used with the type parameter to determine the range of time in which the returned objects have an incorrect logon try recorded.","pos":[97,242]}]}]},{"pos":[30644,30811],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.MatchType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that specifies the type of match that is applied to the <ph id=\"ph1\">`time`</ph> parameter.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter."},{"pos":[30987,31240],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%271<ph id=\"ph2\">&amp;gt;</ph> that contains one or more <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects, or an empty collection if no results are found.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%271&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects, or an empty collection if no results are found."},{"pos":[32733,32745],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32808,32820],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32920,32932],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33043,33055],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[34122,34262],"content":"Returns a collection of authentication principal objects that have an account expiration time recorded in the specified date and time range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of authentication principal objects that have an account expiration time recorded in the specified date and time range.","pos":[0,140]}]},{"pos":[34274,34484],"content":"The time will default to UTC. If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time will default to UTC.","pos":[0,29]},{"content":"If you want to specify the time in local time, then specify the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> object as &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[30,210],"source":" If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>."}]},{"pos":[34945,35105],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed."},{"pos":[35168,35405],"content":"A <xref:System.DateTime> object that identifies the date and time of the account expiration. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account expiration recorded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.DateTime> object that identifies the date and time of the account expiration. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account expiration recorded.","pos":[0,237],"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object that identifies the date and time of the account expiration.","pos":[0,92],"source":"A <xref:System.DateTime> object that identifies the date and time of the account expiration."},{"content":"This parameter is used with the type parameter to determine the range of time in which the returned objects have an account expiration recorded.","pos":[93,237]}]}]},{"pos":[35505,35672],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.MatchType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that specifies the type of match that is applied to the <ph id=\"ph1\">`time`</ph> parameter.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter."},{"pos":[35848,36053],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601<ph id=\"ph2\">&amp;gt;</ph> that contains one or more <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects."},{"pos":[37518,37530],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37593,37605],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37705,37717],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37828,37840],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38888,39025],"content":"Returns a collection of authentication principal objects that have an account lockout time recorded in the specified date and time range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of authentication principal objects that have an account lockout time recorded in the specified date and time range.","pos":[0,137]}]},{"pos":[39037,39248],"content":"The time will default to UTC.  If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time will default to UTC.","pos":[0,29]},{"content":"If you want to specify the time in local time, then specify the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> object as &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[31,211],"source":"  If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>."}]},{"pos":[39706,39866],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed."},{"pos":[39929,40160],"content":"A <xref:System.DateTime> object that identifies the date and time of the account lockout. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account lockout recorded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.DateTime> object that identifies the date and time of the account lockout. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account lockout recorded.","pos":[0,231],"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object that identifies the date and time of the account lockout.","pos":[0,89],"source":"A <xref:System.DateTime> object that identifies the date and time of the account lockout."},{"content":"This parameter is used with the type parameter to determine the range of time in which the returned objects have an account lockout recorded.","pos":[90,231]}]}]},{"pos":[40260,40427],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.MatchType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that specifies the type of match that is applied to the <ph id=\"ph1\">`time`</ph> parameter.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter."},{"pos":[40603,40808],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601<ph id=\"ph2\">&amp;gt;</ph> that contains one or more <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects."},{"pos":[42252,42264],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[42327,42339],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[42439,42451],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[42562,42574],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[43609,43739],"content":"Returns a collection of authentication principal objects that have an account logon recorded in the specified date and time range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of authentication principal objects that have an account logon recorded in the specified date and time range.","pos":[0,130]}]},{"pos":[43751,43961],"content":"The time will default to UTC. If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time will default to UTC.","pos":[0,29]},{"content":"If you want to specify the time in local time, then specify the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> object as &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[30,210],"source":" If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>."}]},{"pos":[45719,45879],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed."},{"pos":[45942,46168],"content":"A <xref:System.DateTime> object that identifies the date and time of the logon record. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account logon recorded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.DateTime> object that identifies the date and time of the logon record. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account logon recorded.","pos":[0,226],"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object that identifies the date and time of the logon record.","pos":[0,86],"source":"A <xref:System.DateTime> object that identifies the date and time of the logon record."},{"content":"This parameter is used with the type parameter to determine the range of time in which the returned objects have an account logon recorded.","pos":[87,226]}]}]},{"pos":[46268,46435],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.MatchType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that specifies the type of match that is applied to the <ph id=\"ph1\">`time`</ph> parameter.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter."},{"pos":[46611,46816],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601<ph id=\"ph2\">&amp;gt;</ph> that contains one or more <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects."},{"pos":[48246,48258],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48321,48333],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48433,48445],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48556,48568],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[49631,49768],"content":"Returns a collection of authentication principal objects that have an account password set recorded in the specified date and time range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of authentication principal objects that have an account password set recorded in the specified date and time range.","pos":[0,137]}]},{"pos":[49780,49990],"content":"The time will default to UTC. If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time will default to UTC.","pos":[0,29]},{"content":"If you want to specify the time in local time, then specify the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> object as &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[30,210],"source":" If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>."}]},{"pos":[50452,50612],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the server or domain against which operations are performed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed."},{"pos":[50675,50899],"content":"A <xref:System.DateTime> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.DateTime> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.","pos":[0,224],"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object that identifies the date and time of the password set.","pos":[0,86],"source":"A <xref:System.DateTime> object that identifies the date and time of the password set."},{"content":"This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.","pos":[87,224]}]}]},{"pos":[50999,51166],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.MatchType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that specifies the type of match that is applied to the <ph id=\"ph1\">`time`</ph> parameter.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter."},{"pos":[51342,51547],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601<ph id=\"ph2\">&amp;gt;</ph> that contains one or more <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects."},{"pos":[53019,53031],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[53094,53106],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[53206,53218],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[53329,53341],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54001,54050],"content":"Gets or sets the home directory for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the home directory for this account.","pos":[0,49]}]},{"pos":[54173,54246],"content":"The home directory for this account, or null if no home directory exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The home directory for this account, or null if no home directory exists.","pos":[0,73]}]},{"pos":[54464,54516],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[55035,55080],"content":"Gets or sets the home drive for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the home drive for this account.","pos":[0,45]}]},{"pos":[55199,55263],"content":"The home drive for the account, or null if no home drive exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The home drive for the account, or null if no home drive exists.","pos":[0,64]}]},{"pos":[55477,55529],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[56097,56180],"content":"Returns a Boolean value that specifies whether the account is currently locked out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a Boolean value that specifies whether the account is currently locked out.","pos":[0,83]}]},{"pos":[56192,56484],"content":"It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value. This method computes the correct store-specific lockout value to determine whether the account is locked out.","needQuote":true,"needEscape":true,"nodes":[{"content":"It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value. This method computes the correct store-specific lockout value to determine whether the account is locked out.","pos":[0,292],"nodes":[{"content":"It is possible that an account may not be locked out when the &lt;xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A&gt; returns a non-null value.","pos":[0,182],"source":"It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value."},{"content":"This method computes the correct store-specific lockout value to determine whether the account is locked out.","pos":[183,292]}]}]},{"pos":[56620,56784],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the account is locked out; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the account is locked out; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[57483,57612],"content":"Gets the Nullable <xref:System.DateTime> that specifies the date and time of the last incorrect password attempt on this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Nullable &lt;xref:System.DateTime&gt; that specifies the date and time of the last incorrect password attempt on this account.","pos":[0,129],"source":"Gets the Nullable <xref:System.DateTime> that specifies the date and time of the last incorrect password attempt on this account."}]},{"pos":[57624,57863],"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","needQuote":true,"needEscape":true,"nodes":[{"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","pos":[0,239],"nodes":[{"content":"As with all &lt;xref:System.DateTime&gt; properties in &lt;xref:System.DirectoryServices.AccountManagement&gt;, the time returned is in UTC form.","pos":[0,133],"source":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form."},{"content":"To convert it to local time, call the &lt;xref:System.DateTime.ToLocalTime%2A&gt; method on the return object.","pos":[135,239],"source":"  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object."}]}]},{"pos":[58021,58196],"content":"A Nullable <xref:System.DateTime> that specifies the date and time of the last incorrect password attempt on this account, or null if no incorrect password tries are recorded.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Nullable &lt;xref:System.DateTime&gt; that specifies the date and time of the last incorrect password attempt on this account, or null if no incorrect password tries are recorded.","pos":[0,175],"source":"A Nullable <xref:System.DateTime> that specifies the date and time of the last incorrect password attempt on this account, or null if no incorrect password tries are recorded."}]},{"pos":[58423,58475],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[58994,59103],"content":"Gets the Nullable <xref:System.DateTime> that specifies the date and time of the last logon for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Nullable &lt;xref:System.DateTime&gt; that specifies the date and time of the last logon for this account.","pos":[0,109],"source":"Gets the Nullable <xref:System.DateTime> that specifies the date and time of the last logon for this account."}]},{"pos":[59115,59354],"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","needQuote":true,"needEscape":true,"nodes":[{"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","pos":[0,239],"nodes":[{"content":"As with all &lt;xref:System.DateTime&gt; properties in &lt;xref:System.DirectoryServices.AccountManagement&gt;, the time returned is in UTC form.","pos":[0,133],"source":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form."},{"content":"To convert it to local time, call the &lt;xref:System.DateTime.ToLocalTime%2A&gt; method on the return object.","pos":[135,239],"source":"  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object."}]}]},{"pos":[59499,59601],"content":"A Nullable <xref:System.DateTime> that specifies the date and time of the last logon for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Nullable &lt;xref:System.DateTime&gt; that specifies the date and time of the last logon for this account.","pos":[0,102],"source":"A Nullable <xref:System.DateTime> that specifies the date and time of the last logon for this account."}]},{"pos":[59815,59867],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[60416,60538],"content":"Gets the Nullable <xref:System.DateTime> that specifies the last date and time that the password was set for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Nullable &lt;xref:System.DateTime&gt; that specifies the last date and time that the password was set for this account.","pos":[0,122],"source":"Gets the Nullable <xref:System.DateTime> that specifies the last date and time that the password was set for this account."}]},{"pos":[60550,60789],"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","needQuote":true,"needEscape":true,"nodes":[{"content":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.","pos":[0,239],"nodes":[{"content":"As with all &lt;xref:System.DateTime&gt; properties in &lt;xref:System.DirectoryServices.AccountManagement&gt;, the time returned is in UTC form.","pos":[0,133],"source":"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form."},{"content":"To convert it to local time, call the &lt;xref:System.DateTime.ToLocalTime%2A&gt; method on the return object.","pos":[135,239],"source":"  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object."}]}]},{"pos":[60940,61055],"content":"A Nullable <xref:System.DateTime> that specifies the last date and time that the password was set for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Nullable &lt;xref:System.DateTime&gt; that specifies the last date and time that the password was set for this account.","pos":[0,115],"source":"A Nullable <xref:System.DateTime> that specifies the last date and time that the password was set for this account."}]},{"pos":[61275,61327],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[61901,61991],"content":"Gets or sets a Boolean value that specifies whether the password expires for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that specifies whether the password expires for this account.","pos":[0,90]}]},{"pos":[62120,62296],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the password expires for this account; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the password expires for this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[62521,62573],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[63142,63234],"content":"Gets or sets a Boolean value that specifies whether a password is required for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that specifies whether a password is required for this account.","pos":[0,92]}]},{"pos":[63362,63540],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a password is required for this account; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a password is required for this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[63764,63816],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[64385,64437],"content":"Gets or sets the times when the principal can logon.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the times when the principal can logon.","pos":[0,52]}]},{"pos":[64566,64609],"content":"The permitted logon times for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"The permitted logon times for this account.","pos":[0,43]}]},{"pos":[64833,64885],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[65464,65539],"content":"Gets the list of workstations that this principal is permitted to log into.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the list of workstations that this principal is permitted to log into.","pos":[0,75]}]},{"pos":[65803,65881],"content":"The mutable list of workstations that this principal is permitted to log into.","needQuote":true,"needEscape":true,"nodes":[{"content":"The mutable list of workstations that this principal is permitted to log into.","pos":[0,78]}]},{"pos":[66107,66159],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[66747,66777],"content":"Refreshes an expired password.","needQuote":true,"needEscape":true,"nodes":[{"content":"Refreshes an expired password.","pos":[0,30]}]},{"pos":[67161,67220],"content":"An exception occurred when saving the changes to the store.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception occurred when saving the changes to the store.","pos":[0,59]}]},{"pos":[67744,67790],"content":"Gets or sets the script path for this account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the script path for this account.","pos":[0,46]}]},{"pos":[67910,67984],"content":"A path of the script for this account, or null if there is no script path.","needQuote":true,"needEscape":true,"nodes":[{"content":"A path of the script for this account, or null if there is no script path.","pos":[0,74]}]},{"pos":[68199,68251],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[68832,68881],"content":"Sets the account password to the specified value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the account password to the specified value.","pos":[0,49]}]},{"pos":[69034,69051],"content":"The new password.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new password.","pos":[0,17]}]},{"pos":[69323,69534],"content":"Throws an exception if the caller does not have appropriate rights, the new password does not meet password complexity requirements, or for any other reason that the underlying stores reject the password change.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an exception if the caller does not have appropriate rights, the new password does not meet password complexity requirements, or for any other reason that the underlying stores reject the password change.","pos":[0,211]}]},{"pos":[70118,70219],"content":"Gets or sets a Boolean value that specifies whether a smartcard is required to log on to the account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that specifies whether a smartcard is required to log on to the account.","pos":[0,101]}]},{"pos":[70350,70538],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a smartcard is required to log on to this account; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a smartcard is required to log on to this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[70765,70817],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[71360,71410],"content":"Unlocks the account if it is currently locked out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unlocks the account if it is currently locked out.","pos":[0,50]}]},{"pos":[73018,73077],"content":"An exception occurred when saving the changes to the store.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception occurred when saving the changes to the store.","pos":[0,59]}]},{"pos":[73671,73879],"content":"Gets or sets a Boolean value that specifies whether the user can change the password for this account. Do not use this with a <xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that specifies whether the user can change the password for this account.","pos":[0,102]},{"content":"Do not use this with a <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[103,208],"source":" Do not use this with a <xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"></xref>."}]},{"pos":[73891,74094],"content":"This method is not intended for computer principals. Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not intended for computer principals. Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown.","pos":[0,203],"nodes":[{"content":"This method is not intended for computer principals.","pos":[0,52]},{"content":"Calling this with a &lt;xref:System.DirectoryServices.AccountManagement.ComputerPrincipal&gt; will cause a &lt;xref:System.NotSupportedException&gt; to be thrown.","pos":[53,203],"source":" Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown."}]}]},{"pos":[74227,74414],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the user is not permitted to change the password; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user is not permitted to change the password; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[74643,74695],"content":"The underlying store does not support this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying store does not support this property.","pos":[0,52]}]},{"pos":[74798,74834],"content":"This principal object is not a user.","needQuote":true,"needEscape":true,"nodes":[{"content":"This principal object is not a user.","pos":[0,36]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  id: AuthenticablePrincipal\n  children:\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword(System.String,System.String)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword(System.String)\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount\n  - System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword\n  langs:\n  - csharp\n  name: AuthenticablePrincipal\n  nameWithType: AuthenticablePrincipal\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  type: Class\n  summary: Encapsulates the account and contact data common to principals that can be authenticated.\n  syntax:\n    content: >-\n      [System.DirectoryServices.AccountManagement.DirectoryRdnPrefix(\"CN\")]\n\n      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]\n\n      public class AuthenticablePrincipal : System.DirectoryServices.AccountManagement.Principal\n  inheritance:\n  - System.Object\n  - System.DirectoryServices.AccountManagement.Principal\n  implements: []\n  inheritedMembers:\n  - System.DirectoryServices.AccountManagement.Principal.CheckDisposedOrDeleted\n  - System.DirectoryServices.AccountManagement.Principal.Context\n  - System.DirectoryServices.AccountManagement.Principal.ContextRaw\n  - System.DirectoryServices.AccountManagement.Principal.ContextType\n  - System.DirectoryServices.AccountManagement.Principal.Delete\n  - System.DirectoryServices.AccountManagement.Principal.Description\n  - System.DirectoryServices.AccountManagement.Principal.DisplayName\n  - System.DirectoryServices.AccountManagement.Principal.Dispose\n  - System.DirectoryServices.AccountManagement.Principal.DistinguishedName\n  - System.DirectoryServices.AccountManagement.Principal.Equals(System.Object)\n  - System.DirectoryServices.AccountManagement.Principal.ExtensionGet(System.String)\n  - System.DirectoryServices.AccountManagement.Principal.ExtensionSet(System.String,System.Object)\n  - System.DirectoryServices.AccountManagement.Principal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)\n  - System.DirectoryServices.AccountManagement.Principal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)\n  - System.DirectoryServices.AccountManagement.Principal.FindByIdentityWithType(System.DirectoryServices.AccountManagement.PrincipalContext,System.Type,System.DirectoryServices.AccountManagement.IdentityType,System.String)\n  - System.DirectoryServices.AccountManagement.Principal.FindByIdentityWithType(System.DirectoryServices.AccountManagement.PrincipalContext,System.Type,System.String)\n  - System.DirectoryServices.AccountManagement.Principal.GetGroups\n  - System.DirectoryServices.AccountManagement.Principal.GetGroups(System.DirectoryServices.AccountManagement.PrincipalContext)\n  - System.DirectoryServices.AccountManagement.Principal.GetHashCode\n  - System.DirectoryServices.AccountManagement.Principal.GetUnderlyingObject\n  - System.DirectoryServices.AccountManagement.Principal.GetUnderlyingObjectType\n  - System.DirectoryServices.AccountManagement.Principal.Guid\n  - System.DirectoryServices.AccountManagement.Principal.IsMemberOf(System.DirectoryServices.AccountManagement.GroupPrincipal)\n  - System.DirectoryServices.AccountManagement.Principal.IsMemberOf(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)\n  - System.DirectoryServices.AccountManagement.Principal.Name\n  - System.DirectoryServices.AccountManagement.Principal.SamAccountName\n  - System.DirectoryServices.AccountManagement.Principal.Save\n  - System.DirectoryServices.AccountManagement.Principal.Save(System.DirectoryServices.AccountManagement.PrincipalContext)\n  - System.DirectoryServices.AccountManagement.Principal.Sid\n  - System.DirectoryServices.AccountManagement.Principal.StructuralObjectClass\n  - System.DirectoryServices.AccountManagement.Principal.ToString\n  - System.DirectoryServices.AccountManagement.Principal.UserPrincipalName\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)\n  id: '#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)'\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: AuthenticablePrincipal(PrincipalContext)\n  nameWithType: AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext)\n  type: Constructor\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Initializes a new instance of the <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> class by using the specified context. This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.\n  remarks: Custom extension classes that derive from this class can call this constructor from the derived class constructor to initialize the base class. For more information, see the [Principal Extensions](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00) overview topic.\n  syntax:\n    content: protected AuthenticablePrincipal (System.DirectoryServices.AccountManagement.PrincipalContext context);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)\n  id: '#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)'\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: AuthenticablePrincipal(PrincipalContext,String,String,Boolean)\n  nameWithType: AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext,String,String,Boolean)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext,String,String,Boolean)\n  type: Constructor\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Initializes a new instance of the <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> class by using the specified context, SAM account name, password, and enabled value. This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.\n  remarks: Custom extension classes that derive from this class can call this constructor from the derived class constructor to initialize the base class. For more information, see the [Principal Extensions](http://msdn.microsoft.com/en-us/49d1b257-d652-4224-bdae-2edabced8f00) overview topic.\n  syntax:\n    content: protected AuthenticablePrincipal (System.DirectoryServices.AccountManagement.PrincipalContext context, string samAccountName, string password, bool enabled);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed.\n    - id: samAccountName\n      type: System.String\n      description: The SAM account name for this principal.\n    - id: password\n      type: System.String\n      description: The password for this account.\n    - id: enabled\n      type: System.Boolean\n      description: A Boolean value that specifies whether the account is enabled.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate\n  id: AccountExpirationDate\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: AccountExpirationDate\n  nameWithType: AuthenticablePrincipal.AccountExpirationDate\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Nullable <xref:System.DateTime> that specifies the date and time that the account expires.\n  remarks: \"As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.  \\n  \\n When you set the AccountExpirationDate, the time will default to UTC.  If you want to write in local time, then specify the <xref:System.DateTime.Kind%2A> property of your <xref:System.DateTime> object as <xref:DateTimeKind.Local>.\"\n  syntax:\n    content: public Nullable<DateTime> AccountExpirationDate { get; set; }\n    return:\n      type: System.Nullable{System.DateTime}\n      description: A <xref:System.DateTime> that specifies the date and time that the account expires, or null if the account never expires.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime\n  id: AccountLockoutTime\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: AccountLockoutTime\n  nameWithType: AuthenticablePrincipal.AccountLockoutTime\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets the Nullable <xref:System.DateTime> that specifies the date and time that the account was locked out.\n  remarks: \"The account lockout time is system dependent, and cannot be set by the Account Management API. To unlock the account, use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount%2A> method.  \\n  \\n It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value. Applications should use the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut%2A> method to determine whether the account is locked out.  \\n  \\n As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.\"\n  syntax:\n    content: public Nullable<DateTime> AccountLockoutTime { get; }\n    return:\n      type: System.Nullable{System.DateTime}\n      description: A <xref:System.DateTime> that specifies the date and time that the account was locked out, or null if no lockout time is set on the account.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter\n  id: AdvancedSearchFilter\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: AdvancedSearchFilter\n  nameWithType: AuthenticablePrincipal.AdvancedSearchFilter\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns an <xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter> object, for use with [Query By Example](http://msdn.microsoft.com/en-us/84ac40bb-04c4-4d0b-adaf-0ddb9253599e) to set read-only properties before passing the object to the <xref href=\"System.DirectoryServices.AccountManagement.PrincipalSearcher\"></xref>.\n  remarks: See the [Query By Example](http://msdn.microsoft.com/en-us/84ac40bb-04c4-4d0b-adaf-0ddb9253599e) documentation for examples.\n  syntax:\n    content: public virtual System.DirectoryServices.AccountManagement.AdvancedFilters AdvancedSearchFilter { get; }\n    return:\n      type: System.DirectoryServices.AccountManagement.AdvancedFilters\n      description: An <xref:System.DirectoryServices.AccountManagement.AdvancedSearchFilter> object.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption\n  id: AllowReversiblePasswordEncryption\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: AllowReversiblePasswordEncryption\n  nameWithType: AuthenticablePrincipal.AllowReversiblePasswordEncryption\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Boolean value that specifies whether reversible password encryption is enabled for this account.\n  syntax:\n    content: public bool AllowReversiblePasswordEncryption { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if reversible password encryption is enabled for this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount\n  id: BadLogonCount\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: BadLogonCount\n  nameWithType: AuthenticablePrincipal.BadLogonCount\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets the number of logon attempts using incorrect credentials for this account.\n  syntax:\n    content: public int BadLogonCount { get; }\n    return:\n      type: System.Int32\n      description: The number of logon attempts using incorrect credentials for this account.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates\n  id: Certificates\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: Certificates\n  nameWithType: AuthenticablePrincipal.Certificates\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> that contains the X509 certificates for this account.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n      description: A <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> that contains the X509 certificates for this account.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword(System.String,System.String)\n  id: ChangePassword(System.String,System.String)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: ChangePassword(String,String)\n  nameWithType: AuthenticablePrincipal.ChangePassword(String,String)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword(String,String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Changes the account password from the old password to the new password. Do not use this with a <xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"></xref>.\n  remarks: This method is not intended for computer principals. Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown.\n  syntax:\n    content: public void ChangePassword (string oldPassword, string newPassword);\n    parameters:\n    - id: oldPassword\n      type: System.String\n      description: The password that is changed.\n    - id: newPassword\n      type: System.String\n      description: The new password.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The principal has not been persisted.\n  - type: System.DirectoryServices.AccountManagement.PasswordException\n    commentId: T:System.DirectoryServices.AccountManagement.PasswordException\n    description: The new password does not meet the complexity requirements.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The principal is not a user.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted\n  id: DelegationPermitted\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: DelegationPermitted\n  nameWithType: AuthenticablePrincipal.DelegationPermitted\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Nullable Boolean value that specifies whether the account may be delegated.\n  syntax:\n    content: public bool DelegationPermitted { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the account may be delegated; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled\n  id: Enabled\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: AuthenticablePrincipal.Enabled\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Nullable Boolean value that specifies whether this account is enabled for authentication.\n  remarks: If the principal has not been persisted in the store, this property returns null. After the principal is persisted, the default enabled setting depends on the store. The AD DS and AD LDS stores disable new principals when they are persisted, whereas SAM enables new principals when they are persisted. The application can only set this property to a value after it has been persisted in the store.\n  syntax:\n    content: public Nullable<bool> Enabled { get; set; }\n    return:\n      type: System.Nullable{System.Boolean}\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the principal is enabled, or null if the account has not been persisted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The application tried to set a null value for this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow\n  id: ExpirePasswordNow\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: ExpirePasswordNow()\n  nameWithType: AuthenticablePrincipal.ExpirePasswordNow()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow()\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Expires the password for this account. This will force the user to change his/her password at the next logon.\n  remarks: Call this method to force the user to change the password at the next logon.\n  syntax:\n    content: public void ExpirePasswordNow ();\n    parameters: []\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow*\n  exceptions:\n  - type: System.DirectoryServices.AccountManagement.PrincipalOperationException\n    commentId: T:System.DirectoryServices.AccountManagement.PrincipalOperationException\n    description: An exception occurred when saving the changes to the store.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  id: FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns a collection of authentication principal objects that have an incorrect password try recorded in the specified date and time range.\n  remarks: The time will default to UTC.  If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:DateTimeKind.Local>.\n  syntax:\n    content: public static System.DirectoryServices.AccountManagement.PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal> FindByBadPasswordAttempt (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> object that specifies the server or domain against which operations are performed.\n    - id: time\n      type: System.DateTime\n      description: A <xref:System.DateTime> object that identifies the date and time of the incorrect password try. This parameter is used with the type parameter to determine the range of time in which the returned objects have an incorrect logon try recorded.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult{System.DirectoryServices.AccountManagement.AuthenticablePrincipal}\n      description: A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%271&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects, or an empty collection if no results are found.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  id: FindByBadPasswordAttempt``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  syntax:\n    content: protected static System.DirectoryServices.AccountManagement.PrincipalSearchResult<T> FindByBadPasswordAttempt<T> (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: To be added.\n    - id: time\n      type: System.DateTime\n      description: To be added.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: To be added.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n      description: To be added.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  id: FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns a collection of authentication principal objects that have an account expiration time recorded in the specified date and time range.\n  remarks: The time will default to UTC. If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.\n  syntax:\n    content: public static System.DirectoryServices.AccountManagement.PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal> FindByExpirationTime (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed.\n    - id: time\n      type: System.DateTime\n      description: A <xref:System.DateTime> object that identifies the date and time of the account expiration. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account expiration recorded.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult{System.DirectoryServices.AccountManagement.AuthenticablePrincipal}\n      description: A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  id: FindByExpirationTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  syntax:\n    content: protected static System.DirectoryServices.AccountManagement.PrincipalSearchResult<T> FindByExpirationTime<T> (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: To be added.\n    - id: time\n      type: System.DateTime\n      description: To be added.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: To be added.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n      description: To be added.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  id: FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns a collection of authentication principal objects that have an account lockout time recorded in the specified date and time range.\n  remarks: The time will default to UTC.  If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.\n  syntax:\n    content: public static System.DirectoryServices.AccountManagement.PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal> FindByLockoutTime (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed.\n    - id: time\n      type: System.DateTime\n      description: A <xref:System.DateTime> object that identifies the date and time of the account lockout. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account lockout recorded.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult{System.DirectoryServices.AccountManagement.AuthenticablePrincipal}\n      description: A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  id: FindByLockoutTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  syntax:\n    content: protected static System.DirectoryServices.AccountManagement.PrincipalSearchResult<T> FindByLockoutTime<T> (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: To be added.\n    - id: time\n      type: System.DateTime\n      description: To be added.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: To be added.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n      description: To be added.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  id: FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns a collection of authentication principal objects that have an account logon recorded in the specified date and time range.\n  remarks: The time will default to UTC. If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.\n  example:\n  - \"The following code connects to the ADAM instance hosted by the server \\\"adamHost1.fabrikam.com\\\" on port number \\\"5000.\\\" The username (adamAdmin), and password (SecretPwd123) are specified in the <xref:System.DirectoryServices.AccountManagement.PrincipalContext> constructor.  \\n  \\n A search is performed for all authenticable principals under the container \\\"DC=adamApp1,DC=fabrikam,DC=com\\\" that have not logged on to this ADAM instance for the last 45 days. The principals returned by the search are then deleted.  \\n  \\n```  \\nPrincipalContext ctx = new PrincipalContext(  \\n                                      ContextType.ApplicationDirectory,   \\n                                      \\\"adamHost1.fabrikam.com:5000\\\",   \\n                                      \\\"DC=adamApp1,DC=fabrikam,DC=com\\\",   \\n                                      \\\"adamAdmin\\\", \\\"SecretPwd123\\\");  \\n  \\nPrincipalSearchResult<AuthenticablePrincipal> oldPrincipals =   \\n                     AuthenticablePrincipal.FindByLogonTime(ctx,   \\n                            (DateTime.Now - new TimeSpan(45, 0, 0, 0)),   \\n                            MatchType.LessThan);  \\n  \\nforeach (Principal p in oldPrincipals)  \\n{  \\n    p.Delete();  \\n}  \\n  \\noldPrincipals.Dispose();  \\nctx.Dispose();  \\n  \\n```\"\n  syntax:\n    content: public static System.DirectoryServices.AccountManagement.PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal> FindByLogonTime (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed.\n    - id: time\n      type: System.DateTime\n      description: A <xref:System.DateTime> object that identifies the date and time of the logon record. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account logon recorded.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult{System.DirectoryServices.AccountManagement.AuthenticablePrincipal}\n      description: A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  id: FindByLogonTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  syntax:\n    content: protected static System.DirectoryServices.AccountManagement.PrincipalSearchResult<T> FindByLogonTime<T> (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: To be added.\n    - id: time\n      type: System.DateTime\n      description: To be added.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: To be added.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n      description: To be added.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  id: FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns a collection of authentication principal objects that have an account password set recorded in the specified date and time range.\n  remarks: The time will default to UTC. If you want to specify the time in local time, then specify the <xref:System.DateTime.Kind%2A> property of the `time` object as <xref:System.DateTimeKind?displayProperty=fullName>.\n  syntax:\n    content: public static System.DirectoryServices.AccountManagement.PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal> FindByPasswordSetTime (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: The <xref href=\"System.DirectoryServices.AccountManagement.PrincipalContext\"></xref> that specifies the server or domain against which operations are performed.\n    - id: time\n      type: System.DateTime\n      description: A <xref:System.DateTime> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: A <xref href=\"System.DirectoryServices.AccountManagement.MatchType\"></xref> enumeration value that specifies the type of match that is applied to the `time` parameter.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult{System.DirectoryServices.AccountManagement.AuthenticablePrincipal}\n      description: A &lt;xref:System.DirectoryServices.AccountManagement.PrincipalSearchResult%601&gt; that contains one or more <xref href=\"System.DirectoryServices.AccountManagement.AuthenticablePrincipal\"></xref> objects.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  id: FindByPasswordSetTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  syntax:\n    content: protected static System.DirectoryServices.AccountManagement.PrincipalSearchResult<T> FindByPasswordSetTime<T> (System.DirectoryServices.AccountManagement.PrincipalContext context, DateTime time, System.DirectoryServices.AccountManagement.MatchType type);\n    parameters:\n    - id: context\n      type: System.DirectoryServices.AccountManagement.PrincipalContext\n      description: To be added.\n    - id: time\n      type: System.DateTime\n      description: To be added.\n    - id: type\n      type: System.DirectoryServices.AccountManagement.MatchType\n      description: To be added.\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n      description: To be added.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory\n  id: HomeDirectory\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: HomeDirectory\n  nameWithType: AuthenticablePrincipal.HomeDirectory\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets the home directory for this account.\n  syntax:\n    content: public string HomeDirectory { get; set; }\n    return:\n      type: System.String\n      description: The home directory for this account, or null if no home directory exists.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive\n  id: HomeDrive\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: HomeDrive\n  nameWithType: AuthenticablePrincipal.HomeDrive\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets the home drive for this account.\n  syntax:\n    content: public string HomeDrive { get; set; }\n    return:\n      type: System.String\n      description: The home drive for the account, or null if no home drive exists.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut\n  id: IsAccountLockedOut\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: IsAccountLockedOut()\n  nameWithType: AuthenticablePrincipal.IsAccountLockedOut()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut()\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Returns a Boolean value that specifies whether the account is currently locked out.\n  remarks: It is possible that an account may not be locked out when the <xref:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime%2A> returns a non-null value. This method computes the correct store-specific lockout value to determine whether the account is locked out.\n  syntax:\n    content: public bool IsAccountLockedOut ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the account is locked out; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt\n  id: LastBadPasswordAttempt\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: LastBadPasswordAttempt\n  nameWithType: AuthenticablePrincipal.LastBadPasswordAttempt\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets the Nullable <xref:System.DateTime> that specifies the date and time of the last incorrect password attempt on this account.\n  remarks: As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.\n  syntax:\n    content: public Nullable<DateTime> LastBadPasswordAttempt { get; }\n    return:\n      type: System.Nullable{System.DateTime}\n      description: A Nullable <xref:System.DateTime> that specifies the date and time of the last incorrect password attempt on this account, or null if no incorrect password tries are recorded.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon\n  id: LastLogon\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: LastLogon\n  nameWithType: AuthenticablePrincipal.LastLogon\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets the Nullable <xref:System.DateTime> that specifies the date and time of the last logon for this account.\n  remarks: As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.\n  syntax:\n    content: public Nullable<DateTime> LastLogon { get; }\n    return:\n      type: System.Nullable{System.DateTime}\n      description: A Nullable <xref:System.DateTime> that specifies the date and time of the last logon for this account.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet\n  id: LastPasswordSet\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: LastPasswordSet\n  nameWithType: AuthenticablePrincipal.LastPasswordSet\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets the Nullable <xref:System.DateTime> that specifies the last date and time that the password was set for this account.\n  remarks: As with all <xref:System.DateTime> properties in <xref:System.DirectoryServices.AccountManagement>, the time returned is in UTC form.  To convert it to local time, call the <xref:System.DateTime.ToLocalTime%2A> method on the return object.\n  syntax:\n    content: public Nullable<DateTime> LastPasswordSet { get; }\n    return:\n      type: System.Nullable{System.DateTime}\n      description: A Nullable <xref:System.DateTime> that specifies the last date and time that the password was set for this account.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires\n  id: PasswordNeverExpires\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: PasswordNeverExpires\n  nameWithType: AuthenticablePrincipal.PasswordNeverExpires\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Boolean value that specifies whether the password expires for this account.\n  syntax:\n    content: public bool PasswordNeverExpires { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the password expires for this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired\n  id: PasswordNotRequired\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: PasswordNotRequired\n  nameWithType: AuthenticablePrincipal.PasswordNotRequired\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Boolean value that specifies whether a password is required for this account.\n  syntax:\n    content: public bool PasswordNotRequired { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a password is required for this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes\n  id: PermittedLogonTimes\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: PermittedLogonTimes\n  nameWithType: AuthenticablePrincipal.PermittedLogonTimes\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets the times when the principal can logon.\n  syntax:\n    content: public byte[] PermittedLogonTimes { get; set; }\n    return:\n      type: System.Byte[]\n      description: The permitted logon times for this account.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations\n  id: PermittedWorkstations\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: PermittedWorkstations\n  nameWithType: AuthenticablePrincipal.PermittedWorkstations\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets the list of workstations that this principal is permitted to log into.\n  syntax:\n    content: public System.DirectoryServices.AccountManagement.PrincipalValueCollection<string> PermittedWorkstations { get; }\n    return:\n      type: System.DirectoryServices.AccountManagement.PrincipalValueCollection{System.String}\n      description: The mutable list of workstations that this principal is permitted to log into.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword\n  id: RefreshExpiredPassword\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: RefreshExpiredPassword()\n  nameWithType: AuthenticablePrincipal.RefreshExpiredPassword()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword()\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Refreshes an expired password.\n  syntax:\n    content: public void RefreshExpiredPassword ();\n    parameters: []\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword*\n  exceptions:\n  - type: System.DirectoryServices.AccountManagement.PrincipalOperationException\n    commentId: T:System.DirectoryServices.AccountManagement.PrincipalOperationException\n    description: An exception occurred when saving the changes to the store.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath\n  id: ScriptPath\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: ScriptPath\n  nameWithType: AuthenticablePrincipal.ScriptPath\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets the script path for this account.\n  syntax:\n    content: public string ScriptPath { get; set; }\n    return:\n      type: System.String\n      description: A path of the script for this account, or null if there is no script path.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword(System.String)\n  id: SetPassword(System.String)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: SetPassword(String)\n  nameWithType: AuthenticablePrincipal.SetPassword(String)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Sets the account password to the specified value.\n  syntax:\n    content: public void SetPassword (string newPassword);\n    parameters:\n    - id: newPassword\n      type: System.String\n      description: The new password.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword*\n  exceptions:\n  - type: System.DirectoryServices.AccountManagement.PasswordException\n    commentId: T:System.DirectoryServices.AccountManagement.PasswordException\n    description: Throws an exception if the caller does not have appropriate rights, the new password does not meet password complexity requirements, or for any other reason that the underlying stores reject the password change.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired\n  id: SmartcardLogonRequired\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: SmartcardLogonRequired\n  nameWithType: AuthenticablePrincipal.SmartcardLogonRequired\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Boolean value that specifies whether a smartcard is required to log on to the account.\n  syntax:\n    content: public bool SmartcardLogonRequired { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a smartcard is required to log on to this account; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount\n  id: UnlockAccount\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: UnlockAccount()\n  nameWithType: AuthenticablePrincipal.UnlockAccount()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount()\n  type: Method\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Unlocks the account if it is currently locked out.\n  remarks: ''\n  example:\n  - \"The following example code connects to the LDAP domain \\\"fabrikam.com\\\" with the username (administrator) and password (SecretPwd123) initialized in the <xref:System.DirectoryServices.AccountManagement.PrincipalContext> constructor.  \\n  \\n A search is performed to find the user with name \\\"John Smith\\\" under the container specified in the <xref:System.DirectoryServices.AccountManagement.PrincipalContext> constructor: \\\"CN=Users,DC=fabrikam,DC=com.\\\"  If the user is found, a check is performed to determine whether this user's account has been locked out. If the account has been locked out, the code example unlocks the account.  \\n  \\n```  \\nPrincipalContext ctx = new PrincipalContext(ContextType.Domain,   \\n                                         \\\"fabrikam.com\\\",   \\n                                         \\\"CN=Users,DC=fabrikam,DC=com\\\",   \\n                                         \\\"administrator\\\",   \\n                                         \\\"SecretPwd123\\\");  \\n  \\nUserPrincipal usr = UserPrincipal.FindByIdentity(ctx, \\\"John Smith\\\");  \\nif (usr != null)  \\n{  \\n    if (usr.IsAccountLockedOut())  \\n        usr.UnlockAccount();  \\n  \\n    usr.Dispose();  \\n}  \\nctx.Dispose();   \\n```\"\n  syntax:\n    content: public void UnlockAccount ();\n    parameters: []\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount*\n  exceptions:\n  - type: System.DirectoryServices.AccountManagement.PrincipalOperationException\n    commentId: T:System.DirectoryServices.AccountManagement.PrincipalOperationException\n    description: An exception occurred when saving the changes to the store.\n  platform:\n  - net462\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword\n  id: UserCannotChangePassword\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  langs:\n  - csharp\n  name: UserCannotChangePassword\n  nameWithType: AuthenticablePrincipal.UserCannotChangePassword\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword\n  type: Property\n  assemblies:\n  - System.DirectoryServices.AccountManagement\n  namespace: System.DirectoryServices.AccountManagement\n  summary: Gets or sets a Boolean value that specifies whether the user can change the password for this account. Do not use this with a <xref href=\"System.DirectoryServices.AccountManagement.ComputerPrincipal\"></xref>.\n  remarks: This method is not intended for computer principals. Calling this with a <xref:System.DirectoryServices.AccountManagement.ComputerPrincipal> will cause a <xref:System.NotSupportedException> to be thrown.\n  syntax:\n    content: public bool UserCannotChangePassword { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user is not permitted to change the password; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying store does not support this property.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This principal object is not a user.\n  platform:\n  - net462\nreferences:\n- uid: System.DirectoryServices.AccountManagement.Principal\n  isExternal: false\n  name: System.DirectoryServices.AccountManagement.Principal\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.DirectoryServices.AccountManagement.PasswordException\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: PasswordException\n  nameWithType: PasswordException\n  fullName: System.DirectoryServices.AccountManagement.PasswordException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.DirectoryServices.AccountManagement.PrincipalOperationException\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: PrincipalOperationException\n  nameWithType: PrincipalOperationException\n  fullName: System.DirectoryServices.AccountManagement.PrincipalOperationException\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AuthenticablePrincipal(PrincipalContext)\n  nameWithType: AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext)\n- uid: System.DirectoryServices.AccountManagement.PrincipalContext\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: PrincipalContext\n  nameWithType: PrincipalContext\n  fullName: System.DirectoryServices.AccountManagement.PrincipalContext\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AuthenticablePrincipal(PrincipalContext,String,String,Boolean)\n  nameWithType: AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext,String,String,Boolean)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AuthenticablePrincipal(PrincipalContext,String,String,Boolean)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AccountExpirationDate\n  nameWithType: AuthenticablePrincipal.AccountExpirationDate\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate\n- uid: System.Nullable{System.DateTime}\n  parent: System\n  isExternal: true\n  name: Nullable<DateTime>\n  nameWithType: Nullable<DateTime>\n  fullName: System.Nullable<System.DateTime>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.DateTime>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.DateTime\n    name: DateTime\n    nameWithType: DateTime\n    fullName: DateTime\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AccountLockoutTime\n  nameWithType: AuthenticablePrincipal.AccountLockoutTime\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AdvancedSearchFilter\n  nameWithType: AuthenticablePrincipal.AdvancedSearchFilter\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter\n- uid: System.DirectoryServices.AccountManagement.AdvancedFilters\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: AdvancedFilters\n  nameWithType: AdvancedFilters\n  fullName: System.DirectoryServices.AccountManagement.AdvancedFilters\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AllowReversiblePasswordEncryption\n  nameWithType: AuthenticablePrincipal.AllowReversiblePasswordEncryption\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: BadLogonCount\n  nameWithType: AuthenticablePrincipal.BadLogonCount\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: Certificates\n  nameWithType: AuthenticablePrincipal.Certificates\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2Collection\n  nameWithType: X509Certificate2Collection\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword(System.String,System.String)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: ChangePassword(String,String)\n  nameWithType: AuthenticablePrincipal.ChangePassword(String,String)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword(String,String)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: DelegationPermitted\n  nameWithType: AuthenticablePrincipal.DelegationPermitted\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: Enabled\n  nameWithType: AuthenticablePrincipal.Enabled\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled\n- uid: System.Nullable{System.Boolean}\n  parent: System\n  isExternal: true\n  name: Nullable<Boolean>\n  nameWithType: Nullable<Boolean>\n  fullName: System.Nullable<System.Boolean>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.Boolean>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: ExpirePasswordNow()\n  nameWithType: AuthenticablePrincipal.ExpirePasswordNow()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow()\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.PrincipalSearchResult{System.DirectoryServices.AccountManagement.AuthenticablePrincipal}\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: PrincipalSearchResult<AuthenticablePrincipal>\n  nameWithType: PrincipalSearchResult<AuthenticablePrincipal>\n  fullName: System.DirectoryServices.AccountManagement.PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal>\n  spec.csharp:\n  - uid: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n    name: PrincipalSearchResult\n    nameWithType: PrincipalSearchResult\n    fullName: PrincipalSearchResult<System.DirectoryServices.AccountManagement.AuthenticablePrincipal>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n    name: AuthenticablePrincipal\n    nameWithType: AuthenticablePrincipal\n    fullName: AuthenticablePrincipal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.DirectoryServices.AccountManagement.MatchType\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: MatchType\n  nameWithType: MatchType\n  fullName: System.DirectoryServices.AccountManagement.MatchType\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.PrincipalSearchResult`1\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: PrincipalSearchResult<T>\n  nameWithType: PrincipalSearchResult<T>\n  fullName: System.DirectoryServices.AccountManagement.PrincipalSearchResult<T>\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.Date``0ime,System.DirectoryServices.AccountManagement.Match``0ype)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  nameWithType: AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(PrincipalContext,DateTime,MatchType)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: HomeDirectory\n  nameWithType: AuthenticablePrincipal.HomeDirectory\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: HomeDrive\n  nameWithType: AuthenticablePrincipal.HomeDrive\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: IsAccountLockedOut()\n  nameWithType: AuthenticablePrincipal.IsAccountLockedOut()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut()\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: LastBadPasswordAttempt\n  nameWithType: AuthenticablePrincipal.LastBadPasswordAttempt\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: LastLogon\n  nameWithType: AuthenticablePrincipal.LastLogon\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: LastPasswordSet\n  nameWithType: AuthenticablePrincipal.LastPasswordSet\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PasswordNeverExpires\n  nameWithType: AuthenticablePrincipal.PasswordNeverExpires\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PasswordNotRequired\n  nameWithType: AuthenticablePrincipal.PasswordNotRequired\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PermittedLogonTimes\n  nameWithType: AuthenticablePrincipal.PermittedLogonTimes\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PermittedWorkstations\n  nameWithType: AuthenticablePrincipal.PermittedWorkstations\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations\n- uid: System.DirectoryServices.AccountManagement.PrincipalValueCollection{System.String}\n  parent: System.DirectoryServices.AccountManagement\n  isExternal: false\n  name: PrincipalValueCollection<String>\n  nameWithType: PrincipalValueCollection<String>\n  fullName: System.DirectoryServices.AccountManagement.PrincipalValueCollection<System.String>\n  spec.csharp:\n  - uid: System.DirectoryServices.AccountManagement.PrincipalValueCollection`1\n    name: PrincipalValueCollection\n    nameWithType: PrincipalValueCollection\n    fullName: PrincipalValueCollection<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: RefreshExpiredPassword()\n  nameWithType: AuthenticablePrincipal.RefreshExpiredPassword()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword()\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: ScriptPath\n  nameWithType: AuthenticablePrincipal.ScriptPath\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword(System.String)\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: SetPassword(String)\n  nameWithType: AuthenticablePrincipal.SetPassword(String)\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword(String)\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: SmartcardLogonRequired\n  nameWithType: AuthenticablePrincipal.SmartcardLogonRequired\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: UnlockAccount()\n  nameWithType: AuthenticablePrincipal.UnlockAccount()\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount()\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: UserCannotChangePassword\n  nameWithType: AuthenticablePrincipal.UserCannotChangePassword\n  fullName: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AuthenticablePrincipal\n  nameWithType: AuthenticablePrincipal.AuthenticablePrincipal\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AccountExpirationDate\n  nameWithType: AuthenticablePrincipal.AccountExpirationDate\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AccountLockoutTime\n  nameWithType: AuthenticablePrincipal.AccountLockoutTime\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AdvancedSearchFilter\n  nameWithType: AuthenticablePrincipal.AdvancedSearchFilter\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: AllowReversiblePasswordEncryption\n  nameWithType: AuthenticablePrincipal.AllowReversiblePasswordEncryption\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: BadLogonCount\n  nameWithType: AuthenticablePrincipal.BadLogonCount\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: Certificates\n  nameWithType: AuthenticablePrincipal.Certificates\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: ChangePassword\n  nameWithType: AuthenticablePrincipal.ChangePassword\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: DelegationPermitted\n  nameWithType: AuthenticablePrincipal.DelegationPermitted\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: Enabled\n  nameWithType: AuthenticablePrincipal.Enabled\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: ExpirePasswordNow\n  nameWithType: AuthenticablePrincipal.ExpirePasswordNow\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByBadPasswordAttempt\n  nameWithType: AuthenticablePrincipal.FindByBadPasswordAttempt\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt<T>*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByBadPasswordAttempt<T>\n  nameWithType: AuthenticablePrincipal.FindByBadPasswordAttempt<T>\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByExpirationTime\n  nameWithType: AuthenticablePrincipal.FindByExpirationTime\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime<T>*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByExpirationTime<T>\n  nameWithType: AuthenticablePrincipal.FindByExpirationTime<T>\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLockoutTime\n  nameWithType: AuthenticablePrincipal.FindByLockoutTime\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime<T>*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLockoutTime<T>\n  nameWithType: AuthenticablePrincipal.FindByLockoutTime<T>\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLogonTime\n  nameWithType: AuthenticablePrincipal.FindByLogonTime\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime<T>*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByLogonTime<T>\n  nameWithType: AuthenticablePrincipal.FindByLogonTime<T>\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByPasswordSetTime\n  nameWithType: AuthenticablePrincipal.FindByPasswordSetTime\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime<T>*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: FindByPasswordSetTime<T>\n  nameWithType: AuthenticablePrincipal.FindByPasswordSetTime<T>\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: HomeDirectory\n  nameWithType: AuthenticablePrincipal.HomeDirectory\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: HomeDrive\n  nameWithType: AuthenticablePrincipal.HomeDrive\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: IsAccountLockedOut\n  nameWithType: AuthenticablePrincipal.IsAccountLockedOut\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: LastBadPasswordAttempt\n  nameWithType: AuthenticablePrincipal.LastBadPasswordAttempt\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: LastLogon\n  nameWithType: AuthenticablePrincipal.LastLogon\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: LastPasswordSet\n  nameWithType: AuthenticablePrincipal.LastPasswordSet\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PasswordNeverExpires\n  nameWithType: AuthenticablePrincipal.PasswordNeverExpires\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PasswordNotRequired\n  nameWithType: AuthenticablePrincipal.PasswordNotRequired\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PermittedLogonTimes\n  nameWithType: AuthenticablePrincipal.PermittedLogonTimes\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: PermittedWorkstations\n  nameWithType: AuthenticablePrincipal.PermittedWorkstations\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: RefreshExpiredPassword\n  nameWithType: AuthenticablePrincipal.RefreshExpiredPassword\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: ScriptPath\n  nameWithType: AuthenticablePrincipal.ScriptPath\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: SetPassword\n  nameWithType: AuthenticablePrincipal.SetPassword\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: SmartcardLogonRequired\n  nameWithType: AuthenticablePrincipal.SmartcardLogonRequired\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: UnlockAccount\n  nameWithType: AuthenticablePrincipal.UnlockAccount\n- uid: System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword*\n  parent: System.DirectoryServices.AccountManagement.AuthenticablePrincipal\n  isExternal: false\n  name: UserCannotChangePassword\n  nameWithType: AuthenticablePrincipal.UserCannotChangePassword\n"}