{"nodes":[{"pos":[776,836],"content":"Provides an abstract base class for a custom type converter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an abstract base class for a custom type converter.","pos":[0,60]}]},{"pos":[849,2705],"content":"The JavaScriptConverter class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class. You can also use JavaScriptConverter when you need more control over the serialization and deserialization process.       The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property indicates the types for which a custom converter provides converter services.       To indicate that a custom converter must be used by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, you must register the converter with the instance. If you are using the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class directly, you should use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method to register the converter. Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a `converters` element in the configuration file. For more information, see [How to: Configure ASP.NET Services in Microsoft Ajax](~/add/includes/ajax-current-ext-md.md).       When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is serializing a type for which it has a custom converter registered, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method. Similarly, when the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The JavaScriptConverter class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; class.","pos":[0,222],"source":"The JavaScriptConverter class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class."},{"content":"You can also use JavaScriptConverter when you need more control over the serialization and deserialization process.","pos":[223,338]},{"content":"The &lt;xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A&gt; property indicates the types for which a custom converter provides converter services.","pos":[345,512],"source":"       The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property indicates the types for which a custom converter provides converter services."},{"content":"To indicate that a custom converter must be used by the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance, you must register the converter with the instance.","pos":[519,695],"source":"       To indicate that a custom converter must be used by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, you must register the converter with the instance."},{"content":"If you are using the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; class directly, you should use the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A&gt; method to register the converter.","pos":[696,927],"source":" If you are using the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class directly, you should use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method to register the converter."},{"content":"Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a <ph id=\"ph1\">`converters`</ph> element in the configuration file.","pos":[928,1121],"source":" Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a `converters` element in the configuration file."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Configure ASP.NET Services in Microsoft Ajax<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1122,1242],"source":" For more information, see [How to: Configure ASP.NET Services in Microsoft Ajax](~/add/includes/ajax-current-ext-md.md)."},{"content":"When the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance is serializing a type for which it has a custom converter registered, the serializer calls the &lt;xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A&gt; method.","pos":[1249,1501],"source":"       When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is serializing a type for which it has a custom converter registered, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method."},{"content":"Similarly, when the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the &lt;xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A&gt; method.","pos":[1502,1850],"source":" Similarly, when the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> method."}]},{"pos":[3687,3800],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Script.Serialization.JavaScriptConverter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Script.Serialization.JavaScriptConverter\"></xref> class."},{"pos":[4844,4950],"content":"When overridden in a derived class, converts the provided dictionary into an object of the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, converts the provided dictionary into an object of the specified type.","pos":[0,106]}]},{"pos":[5289,5401],"content":"An &lt;xref:System.Collections.Generic.IDictionary%602&gt; instance of property data stored as name/value pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> instance of property data stored as name/value pairs.","pos":[0,112],"source":"An &lt;xref:System.Collections.Generic.IDictionary%602&gt; instance of property data stored as name/value pairs."}]},{"pos":[5460,5493],"content":"The type of the resulting object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the resulting object.","pos":[0,33]}]},{"pos":[5599,5686],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Script.Serialization.JavaScriptSerializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Script.Serialization.JavaScriptSerializer\"></xref> instance."},{"pos":[5744,5768],"content":"The deserialized object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deserialized object.","pos":[0,24]}]},{"pos":[6525,6601],"content":"When overridden in a derived class, builds a dictionary of name/value pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, builds a dictionary of name/value pairs.","pos":[0,76]}]},{"pos":[6613,6785],"content":"When you serialize a type for which a custom converter is registered, the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance invokes the Serialize method.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you serialize a type for which a custom converter is registered, the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance invokes the Serialize method.","pos":[0,172],"source":"When you serialize a type for which a custom converter is registered, the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance invokes the Serialize method."}]},{"pos":[7043,7067],"content":"The object to serialize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to serialize.","pos":[0,24]}]},{"pos":[7173,7226],"content":"The object that is responsible for the serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is responsible for the serialization.","pos":[0,53]}]},{"pos":[7338,7411],"content":"An object that contains key/value pairs that represent the object’s data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains key/value pairs that represent the object’s data.","pos":[0,73]}]},{"pos":[7970,8047],"content":"When overridden in a derived class, gets a collection of the supported types.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a collection of the supported types.","pos":[0,77]}]},{"pos":[8059,8326],"content":"The SupportedTypes property lists the types that are supported by the converter. At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SupportedTypes property lists the types that are supported by the converter. At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters.","pos":[0,267],"nodes":[{"content":"The SupportedTypes property lists the types that are supported by the converter.","pos":[0,80]},{"content":"At run time, a &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance uses this property to determine the mapping of managed types to their corresponding custom converters.","pos":[81,267],"source":" At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters."}]}]},{"pos":[9094,9229],"content":"An object that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents the types supported by the converter.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that implements <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IEnumerable%601<ph id=\"ph2\">&amp;gt;</ph> that represents the types supported by the converter.","pos":[0,135],"source":"An object that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents the types supported by the converter."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Script.Serialization.JavaScriptConverter\n  id: JavaScriptConverter\n  children:\n  - System.Web.Script.Serialization.JavaScriptConverter.#ctor\n  - System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)\n  - System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)\n  - System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes\n  langs:\n  - csharp\n  name: JavaScriptConverter\n  nameWithType: JavaScriptConverter\n  fullName: System.Web.Script.Serialization.JavaScriptConverter\n  type: Class\n  summary: Provides an abstract base class for a custom type converter.\n  remarks: \"The JavaScriptConverter class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class. You can also use JavaScriptConverter when you need more control over the serialization and deserialization process.  \\n  \\n The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property indicates the types for which a custom converter provides converter services.  \\n  \\n To indicate that a custom converter must be used by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, you must register the converter with the instance. If you are using the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class directly, you should use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method to register the converter. Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a `converters` element in the configuration file. For more information, see [How to: Configure ASP.NET Services in Microsoft Ajax](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is serializing a type for which it has a custom converter registered, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method. Similarly, when the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> method.\"\n  example:\n  - \"The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.  \\n  \\n [!code-cs[System.Web.Script.Serialization#2](~/add/codesnippet/csharp/t-system.web.script.seri_2_1.cs)]\\n [!code-vb[System.Web.Script.Serialization#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_2_1.vb)]\"\n  syntax:\n    content: public abstract class JavaScriptConverter\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor\n  id: '#ctor'\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  langs:\n  - csharp\n  name: JavaScriptConverter()\n  nameWithType: JavaScriptConverter.JavaScriptConverter()\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.Web.Script.Serialization.JavaScriptConverter\"></xref> class.\n  syntax:\n    content: protected JavaScriptConverter ();\n    parameters: []\n  overload: System.Web.Script.Serialization.JavaScriptConverter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)\n  id: Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  langs:\n  - csharp\n  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)\n  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: When overridden in a derived class, converts the provided dictionary into an object of the specified type.\n  syntax:\n    content: public abstract object Deserialize (System.Collections.Generic.IDictionary<string,object> dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);\n    parameters:\n    - id: dictionary\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: An &lt;xref:System.Collections.Generic.IDictionary%602&gt; instance of property data stored as name/value pairs.\n    - id: type\n      type: System.Type\n      description: The type of the resulting object.\n    - id: serializer\n      type: System.Web.Script.Serialization.JavaScriptSerializer\n      description: The <xref href=\"System.Web.Script.Serialization.JavaScriptSerializer\"></xref> instance.\n    return:\n      type: System.Object\n      description: The deserialized object.\n  overload: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)\n  id: Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  langs:\n  - csharp\n  name: Serialize(Object,JavaScriptSerializer)\n  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: When overridden in a derived class, builds a dictionary of name/value pairs.\n  remarks: When you serialize a type for which a custom converter is registered, the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance invokes the Serialize method.\n  syntax:\n    content: public abstract System.Collections.Generic.IDictionary<string,object> Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to serialize.\n    - id: serializer\n      type: System.Web.Script.Serialization.JavaScriptSerializer\n      description: The object that is responsible for the serialization.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: An object that contains key/value pairs that represent the object’s data.\n  overload: System.Web.Script.Serialization.JavaScriptConverter.Serialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes\n  id: SupportedTypes\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  langs:\n  - csharp\n  name: SupportedTypes\n  nameWithType: JavaScriptConverter.SupportedTypes\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: When overridden in a derived class, gets a collection of the supported types.\n  remarks: The SupportedTypes property lists the types that are supported by the converter. At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters.\n  example:\n  - \"The following example shows how to override the SupportedTypes property in a derived class. In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \\n  \\n [!code-cs[System.Web.Script.Serialization#3](~/add/codesnippet/csharp/p-system.web.script.seri_1.cs)]\\n [!code-vb[System.Web.Script.Serialization#3](~/add/codesnippet/visualbasic/p-system.web.script.seri_1.vb)]\"\n  syntax:\n    content: public abstract System.Collections.Generic.IEnumerable<Type> SupportedTypes { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Type}\n      description: An object that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents the types supported by the converter.\n  overload: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: JavaScriptConverter()\n  nameWithType: JavaScriptConverter.JavaScriptConverter()\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()\n- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)\n  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,Object>\n  nameWithType: IDictionary<String,Object>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Web.Script.Serialization.JavaScriptSerializer\n  parent: System.Web.Script.Serialization\n  isExternal: false\n  name: JavaScriptSerializer\n  nameWithType: JavaScriptSerializer\n  fullName: System.Web.Script.Serialization.JavaScriptSerializer\n- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: Serialize(Object,JavaScriptSerializer)\n  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)\n- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: SupportedTypes\n  nameWithType: JavaScriptConverter.SupportedTypes\n  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes\n- uid: System.Collections.Generic.IEnumerable{System.Type}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Type>\n  nameWithType: IEnumerable<Type>\n  fullName: System.Collections.Generic.IEnumerable<System.Type>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Type>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: Type\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor*\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: JavaScriptConverter\n  nameWithType: JavaScriptConverter.JavaScriptConverter\n- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: Deserialize\n  nameWithType: JavaScriptConverter.Deserialize\n- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize*\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: Serialize\n  nameWithType: JavaScriptConverter.Serialize\n- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*\n  parent: System.Web.Script.Serialization.JavaScriptConverter\n  isExternal: false\n  name: SupportedTypes\n  nameWithType: JavaScriptConverter.SupportedTypes\n"}