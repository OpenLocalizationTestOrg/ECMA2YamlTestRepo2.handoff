{"nodes":[{"pos":[579,644],"content":"Provides information about the worker process that hosts ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about the worker process that hosts ASP.NET.","pos":[0,65]}]},{"pos":[657,2240],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data, and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       Instances of the WebProcessInformation class contain information that is obtained using any of the types derived from the <xref:System.Web.Management.WebManagementEvent> type.       Your application needs the appropriate permissions to access protected information provided by this type.       The following example is an excerpt of the configuration file you could use to enable ASP.NET to log error events that contain process information.      ```   <healthMonitoring      enabled=\"true\" heartBeatInterval=\"0\">          <rules>        <add           name=\"All Errors Default\"          eventName=\"All Errors\"          provider=\"EventLogProvider\"          profile=\"Default\"          minInterval=\"00:01:00\" />       </rules>      </healthMonitoring>   ```      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom event class, see the Example section.","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management&gt; namespace contains the health-event types responsible for packaging application health-status data, and the provider types responsible for processing this data.","pos":[102,295],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data, and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[296,379]},{"content":"Instances of the WebProcessInformation class contain information that is obtained using any of the types derived from the &lt;xref:System.Web.Management.WebManagementEvent&gt; type.","pos":[386,561],"source":"       Instances of the WebProcessInformation class contain information that is obtained using any of the types derived from the <xref:System.Web.Management.WebManagementEvent> type."},{"content":"Your application needs the appropriate permissions to access protected information provided by this type.","pos":[568,673]},{"content":"The following example is an excerpt of the configuration file you could use to enable ASP.NET to log error events that contain process information.","pos":[680,827]},{"content":"<ph id=\"ph1\">```   &lt;healthMonitoring      enabled=\"true\" heartBeatInterval=\"0\"&gt;          &lt;rules&gt;        &lt;add           name=\"All Errors Default\"          eventName=\"All Errors\"          provider=\"EventLogProvider\"          profile=\"Default\"          minInterval=\"00:01:00\" /&gt;       &lt;/rules&gt;      &lt;/healthMonitoring&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph4\">`healthMonitoring`</ph> configuration section.","pos":[833,1369],"source":"```   <healthMonitoring      enabled=\"true\" heartBeatInterval=\"0\">          <rules>        <add           name=\"All Errors Default\"          eventName=\"All Errors\"          provider=\"EventLogProvider\"          profile=\"Default\"          minInterval=\"00:01:00\" />       </rules>      </healthMonitoring>   ```      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[1370,1470]},{"content":"For an example of creating a custom event class, see the Example section.","pos":[1471,1544]}]},{"pos":[4182,4227],"content":"Gets the account name for the worker process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the account name for the worker process.","pos":[0,45]}]},{"pos":[4239,4342],"content":"Your application needs the appropriate permissions to access the information provided by this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Your application needs the appropriate permissions to access the information provided by this property.","pos":[0,103]}]},{"pos":[4792,4824],"content":"The worker process account name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The worker process account name.","pos":[0,32]}]},{"pos":[5471,5507],"content":"Formats the application information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Formats the application information.","pos":[0,36]}]},{"pos":[5519,5807],"content":"The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. The method is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. The method is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods.","pos":[0,288],"nodes":[{"content":"The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user.","pos":[0,156]},{"content":"The method is called internally when the provider invokes one of the &lt;xref:System.Web.Management.WebBaseEvent.ToString%2A&gt; methods.","pos":[157,288],"source":" The method is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods."}]}]},{"pos":[6340,6500],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the tab and indentation settings used to format the Web health event information.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Management.WebEventFormatter\"></xref> that contains the tab and indentation settings used to format the Web health event information."},{"pos":[6988,7016],"content":"Gets the process identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the process identifier.","pos":[0,28]}]},{"pos":[7028,7092],"content":"This is the identifier of the worker process that hosts ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is the identifier of the worker process that hosts ASP.NET.","pos":[0,64]}]},{"pos":[7534,7557],"content":"The process identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process identifier.","pos":[0,23]}]},{"pos":[8050,8079],"content":"Gets the name of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the process.","pos":[0,29]}]},{"pos":[8091,8149],"content":"This is the name of the worker process that hosts ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is the name of the worker process that hosts ASP.NET.","pos":[0,58]}]},{"pos":[8589,8613],"content":"The name of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the process.","pos":[0,24]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebProcessInformation\n  id: WebProcessInformation\n  children:\n  - System.Web.Management.WebProcessInformation.AccountName\n  - System.Web.Management.WebProcessInformation.FormatToString(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebProcessInformation.ProcessID\n  - System.Web.Management.WebProcessInformation.ProcessName\n  langs:\n  - csharp\n  name: WebProcessInformation\n  nameWithType: WebProcessInformation\n  fullName: System.Web.Management.WebProcessInformation\n  type: Class\n  summary: Provides information about the worker process that hosts ASP.NET.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data, and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n Instances of the WebProcessInformation class contain information that is obtained using any of the types derived from the <xref:System.Web.Management.WebManagementEvent> type.  \\n  \\n Your application needs the appropriate permissions to access protected information provided by this type.  \\n  \\n The following example is an excerpt of the configuration file you could use to enable ASP.NET to log error events that contain process information.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\" heartBeatInterval=\\\"0\\\">  \\n  \\n    <rules>  \\n     <add   \\n       name=\\\"All Errors Default\\\"  \\n       eventName=\\\"All Errors\\\"  \\n       provider=\\\"EventLogProvider\\\"  \\n       profile=\\\"Default\\\"  \\n       minInterval=\\\"00:01:00\\\" />  \\n    </rules>  \\n  \\n</healthMonitoring>  \\n```  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom event class, see the Example section.\"\n  example:\n  - \"The following example has two parts. The first is an excerpt of a configuration file that enables ASP.NET to use a custom event that uses the WebProcessInformation type.  \\n  \\n The second shows how to implement the custom event.  \\n  \\n Ensure that your custom event is raised at the proper time, that is, when the equivalent system health event it replaces would be raised.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\" heartBeatInterval=\\\"0\\\">  \\n  \\n    <eventMappings>  \\n      <add    \\n        name=\\\"SampleProcessInformation\\\"   \\n        type=\\\"SamplesAspNet.SampleWebProcessInformation, webprocessinformation, Version=1.0.1585.27289, Culture=neutral, PublicKeyToken=3648e5c763a8239f, processorArchitecture=MSIL\\\"/>  \\n    </eventMappings>  \\n  \\n    <rules>  \\n      <add   \\n        name=\\\"Custom Process Information\\\"  \\n        eventName=\\\"SampleProcessInformation\\\"   \\n        provider=\\\"EventLogProvider\\\"  \\n        profile=\\\"Default\\\"/>  \\n    </rules>  \\n  \\n</healthMonitoring>  \\n  \\n```  \\n  \\n The following example shows how to implement a custom event that uses the WebProcessInformation type.  \\n  \\n [!code-cs[System.Web.Management.WebProcessInformation#1](~/add/codesnippet/csharp/t-system.web.management._13_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessInformation#1](~/add/codesnippet/visualbasic/t-system.web.management._13_1.vb)]\"\n  syntax:\n    content: public sealed class WebProcessInformation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessInformation.AccountName\n  id: AccountName\n  parent: System.Web.Management.WebProcessInformation\n  langs:\n  - csharp\n  name: AccountName\n  nameWithType: WebProcessInformation.AccountName\n  fullName: System.Web.Management.WebProcessInformation.AccountName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the account name for the worker process.\n  remarks: Your application needs the appropriate permissions to access the information provided by this property.\n  example:\n  - \"The following example shows how to obtain the process account name.  \\n  \\n [!code-cs[System.Web.Management.WebProcessInformation#4](~/add/codesnippet/csharp/p-system.web.management._38_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessInformation#4](~/add/codesnippet/visualbasic/p-system.web.management._38_1.vb)]\"\n  syntax:\n    content: public string AccountName { get; }\n    return:\n      type: System.String\n      description: The worker process account name.\n  overload: System.Web.Management.WebProcessInformation.AccountName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessInformation.FormatToString(System.Web.Management.WebEventFormatter)\n  id: FormatToString(System.Web.Management.WebEventFormatter)\n  parent: System.Web.Management.WebProcessInformation\n  langs:\n  - csharp\n  name: FormatToString(WebEventFormatter)\n  nameWithType: WebProcessInformation.FormatToString(WebEventFormatter)\n  fullName: System.Web.Management.WebProcessInformation.FormatToString(WebEventFormatter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Formats the application information.\n  remarks: The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. The method is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods.\n  example:\n  - \"The following example shows how to format custom information.  \\n  \\n [!code-cs[System.Web.Management.WebProcessInformation#7](~/add/codesnippet/csharp/f15874b7-315f-41fa-b773-_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessInformation#7](~/add/codesnippet/visualbasic/f15874b7-315f-41fa-b773-_1.vb)]\"\n  syntax:\n    content: public void FormatToString (System.Web.Management.WebEventFormatter formatter);\n    parameters:\n    - id: formatter\n      type: System.Web.Management.WebEventFormatter\n      description: The <xref href=\"System.Web.Management.WebEventFormatter\"></xref> that contains the tab and indentation settings used to format the Web health event information.\n  overload: System.Web.Management.WebProcessInformation.FormatToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessInformation.ProcessID\n  id: ProcessID\n  parent: System.Web.Management.WebProcessInformation\n  langs:\n  - csharp\n  name: ProcessID\n  nameWithType: WebProcessInformation.ProcessID\n  fullName: System.Web.Management.WebProcessInformation.ProcessID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the process identifier.\n  remarks: This is the identifier of the worker process that hosts ASP.NET.\n  example:\n  - \"The following example shows how to obtain the process identifier.  \\n  \\n [!code-cs[System.Web.Management.WebProcessInformation#5](~/add/codesnippet/csharp/p-system.web.management._19_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessInformation#5](~/add/codesnippet/visualbasic/p-system.web.management._19_1.vb)]\"\n  syntax:\n    content: public int ProcessID { get; }\n    return:\n      type: System.Int32\n      description: The process identifier.\n  overload: System.Web.Management.WebProcessInformation.ProcessID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessInformation.ProcessName\n  id: ProcessName\n  parent: System.Web.Management.WebProcessInformation\n  langs:\n  - csharp\n  name: ProcessName\n  nameWithType: WebProcessInformation.ProcessName\n  fullName: System.Web.Management.WebProcessInformation.ProcessName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the name of the process.\n  remarks: This is the name of the worker process that hosts ASP.NET.\n  example:\n  - \"The following example shows how to obtain the process name.  \\n  \\n [!code-cs[System.Web.Management.WebProcessInformation#6](~/add/codesnippet/csharp/p-system.web.management._6_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessInformation#6](~/add/codesnippet/visualbasic/p-system.web.management._6_1.vb)]\"\n  syntax:\n    content: public string ProcessName { get; }\n    return:\n      type: System.String\n      description: The name of the process.\n  overload: System.Web.Management.WebProcessInformation.ProcessName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.Management.WebProcessInformation.AccountName\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: AccountName\n  nameWithType: WebProcessInformation.AccountName\n  fullName: System.Web.Management.WebProcessInformation.AccountName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Management.WebProcessInformation.FormatToString(System.Web.Management.WebEventFormatter)\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: FormatToString(WebEventFormatter)\n  nameWithType: WebProcessInformation.FormatToString(WebEventFormatter)\n  fullName: System.Web.Management.WebProcessInformation.FormatToString(WebEventFormatter)\n- uid: System.Web.Management.WebEventFormatter\n  parent: System.Web.Management\n  isExternal: false\n  name: WebEventFormatter\n  nameWithType: WebEventFormatter\n  fullName: System.Web.Management.WebEventFormatter\n- uid: System.Web.Management.WebProcessInformation.ProcessID\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: ProcessID\n  nameWithType: WebProcessInformation.ProcessID\n  fullName: System.Web.Management.WebProcessInformation.ProcessID\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Management.WebProcessInformation.ProcessName\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: ProcessName\n  nameWithType: WebProcessInformation.ProcessName\n  fullName: System.Web.Management.WebProcessInformation.ProcessName\n- uid: System.Web.Management.WebProcessInformation.AccountName*\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: AccountName\n  nameWithType: WebProcessInformation.AccountName\n- uid: System.Web.Management.WebProcessInformation.FormatToString*\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: FormatToString\n  nameWithType: WebProcessInformation.FormatToString\n- uid: System.Web.Management.WebProcessInformation.ProcessID*\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: ProcessID\n  nameWithType: WebProcessInformation.ProcessID\n- uid: System.Web.Management.WebProcessInformation.ProcessName*\n  parent: System.Web.Management.WebProcessInformation\n  isExternal: false\n  name: ProcessName\n  nameWithType: WebProcessInformation.ProcessName\n"}