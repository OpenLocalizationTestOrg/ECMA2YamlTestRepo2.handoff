{"nodes":[{"pos":[3307,3376],"content":"Provides a means for invoking a workflow as if it were a method call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a means for invoking a workflow as if it were a method call.","pos":[0,69]}]},{"pos":[3389,4151],"content":"WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.       WorkflowInvoker does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.       To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.       WorkflowInvoker does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.       To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.","pos":[0,758],"nodes":[{"content":"WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","pos":[0,155]},{"content":"WorkflowInvoker does not allow instance control such as persisting, unloading, or resuming bookmarks.","pos":[162,263]},{"content":"If instance control is desired, use &lt;xref:System.Activities.WorkflowApplication&gt; instead.","pos":[264,353],"source":" If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead."},{"content":"To execute workflows synchronously with no instance control, call the &lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt; method.","pos":[360,488],"source":"       To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method."},{"content":"To execute a workflow asynchronously with no instance control, use the &lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt; and &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; method pairs, or the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; method.","pos":[489,758],"source":" To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method."}]}]},{"pos":[5031,5126],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class."},{"pos":[5138,5318],"content":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Activities.WorkflowInvoker&gt; contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","pos":[0,180],"source":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously."}]},{"pos":[5742,5881],"content":"The workflow definition of the workflow to be invoked by this instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The workflow definition of the workflow to be invoked by this instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class."},{"pos":[6463,6569],"content":"Invokes a workflow asynchronously using the specified <xref:System.AsyncCallback> and user-provided state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified &lt;xref:System.AsyncCallback&gt; and user-provided state.","pos":[0,106],"source":"Invokes a workflow asynchronously using the specified <xref:System.AsyncCallback> and user-provided state."}]},{"pos":[6582,7354],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; from the <ph id=\"ph1\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[322,508],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>."},{"content":"This method invokes a workflow asynchronously using the &lt;xref:System.IAsyncResult&gt; asynchronous design pattern.","pos":[515,626],"source":"       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[627,770],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]},{"pos":[8222,8278],"content":"The method to be called when the workflow has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]},{"pos":[8340,8439],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[8503,8552],"content":"A reference to the asynchronous invoke operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]},{"pos":[9357,9541],"content":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, <xref:System.AsyncCallback>, and user-provided state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters, &lt;xref:System.AsyncCallback&gt;, and user-provided state.","pos":[0,184],"source":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, <xref:System.AsyncCallback>, and user-provided state."}]},{"pos":[9554,10327],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; from the <ph id=\"ph1\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[323,509],"source":"  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>."},{"content":"This method invokes a workflow asynchronously using the &lt;xref:System.IAsyncResult&gt; asynchronous design pattern.","pos":[516,627],"source":"       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[628,771],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]},{"pos":[11302,11377],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[11449,11505],"content":"The method to be called when the workflow has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]},{"pos":[11567,11666],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[11730,11779],"content":"A reference to the asynchronous invoke operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]},{"pos":[12426,12552],"content":"Invokes a workflow asynchronously using the specified time-out interval, <xref:System.AsyncCallback>, and user-provided state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified time-out interval, &lt;xref:System.AsyncCallback&gt;, and user-provided state.","pos":[0,126],"source":"Invokes a workflow asynchronously using the specified time-out interval, <xref:System.AsyncCallback>, and user-provided state."}]},{"pos":[12565,13666],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; from the <ph id=\"ph1\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown when the &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; method is called.","pos":[322,546],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[552,695],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[696,834]},{"content":"This method invokes a workflow asynchronously using the &lt;xref:System.IAsyncResult&gt; asynchronous design pattern.","pos":[841,952],"source":"       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[953,1096],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]},{"pos":[14546,14663],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[14735,14791],"content":"The method to be called when the workflow has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]},{"pos":[14853,14952],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[15016,15065],"content":"A reference to the asynchronous invoke operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]},{"pos":[15929,16132],"content":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, time-out interval, <xref:System.AsyncCallback>, and user-provided state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters, time-out interval, &lt;xref:System.AsyncCallback&gt;, and user-provided state.","pos":[0,203],"source":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, time-out interval, <xref:System.AsyncCallback>, and user-provided state."}]},{"pos":[16145,17235],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; from the <ph id=\"ph1\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown when &lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt; is called.","pos":[322,535],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[541,684],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[685,823]},{"content":"This method invokes a workflow asynchronously using the &lt;xref:System.IAsyncResult&gt; asynchronous design pattern.","pos":[830,941],"source":"       This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[942,1085],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]},{"pos":[18228,18303],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[18369,18486],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[18558,18614],"content":"The method to be called when the workflow has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]},{"pos":[18676,18775],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[18839,18888],"content":"A reference to the asynchronous invoke operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]},{"pos":[19392,19483],"content":"Attempts to cancel the workflow that was invoked with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">userState</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Attempts to cancel the workflow that was invoked with the specified <code>userState</code>."},{"pos":[19496,19931],"content":"Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.       If the cancellation succeeds, the <xref:System.ComponentModel.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Only a workflow invoked by one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; overloads that takes a <ph id=\"ph1\">`userState`</ph> parameter can be canceled.","pos":[0,155],"source":"Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled."},{"content":"If the cancellation succeeds, the &lt;xref:System.ComponentModel.Cancelled%2A&gt; property of the &lt;xref:System.Activities.InvokeCompletedEventArgs&gt; passed to the &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt; handler is set to <ph id=\"ph1\">`true`</ph>; otherwise, it is set to <ph id=\"ph2\">`false`</ph>.","pos":[162,433],"source":"       If the cancellation succeeds, the <xref:System.ComponentModel.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`."}]},{"pos":[20591,20628],"content":"The token for the workflow to cancel.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token for the workflow to cancel.","pos":[0,37]}]},{"pos":[21152,21284],"content":"Returns the results of a workflow that was invoked using one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke*> overloads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the results of a workflow that was invoked using one of the &lt;xref:System.Activities.WorkflowInvoker.BeginInvoke*&gt; overloads.","pos":[0,132],"source":"Returns the results of a workflow that was invoked using one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke*> overloads."}]},{"pos":[21297,21885],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call EndInvoke from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. If EndInvoke is called before the workflow completes, it blocks until the workflow completes.       This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call EndInvoke from the <ph id=\"ph1\">`callback`</ph> method specified by &lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;.","pos":[0,208],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call EndInvoke from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>."},{"content":"If EndInvoke is called before the workflow completes, it blocks until the workflow completes.","pos":[209,302]},{"content":"This method returns the result of a workflow invoked asynchronously using the &lt;xref:System.IAsyncResult&gt; asynchronous design pattern.","pos":[309,442],"source":"       This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[443,586],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]},{"pos":[22690,22831],"content":"The <xref:System.IAsyncResult> that references the <xref:System.Activities.WorkflowInvoker.BeginInvoke*> operation that started the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that references the &lt;xref:System.Activities.WorkflowInvoker.BeginInvoke*&gt; operation that started the workflow.","pos":[0,141],"source":"The <xref:System.IAsyncResult> that references the <xref:System.Activities.WorkflowInvoker.BeginInvoke*> operation that started the workflow."}]},{"pos":[22943,23160],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[23605,23796],"content":"Gets the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.Collection%601<ph id=\"ph2\">&amp;gt;</ph> of extensions that are available to workflows invoked by a <bpt id=\"p1\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the &lt;xref:System.Collections.ObjectModel.Collection%601&gt; of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance."},{"pos":[23808,23983],"content":"This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is used by workflow host authors to add extensions to the &lt;xref:System.Activities.WorkflowInvoker&gt; instance so they will be available to workflows invoked by it.","pos":[0,175],"source":"This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it."}]},{"pos":[24601,24787],"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.Collection%601<ph id=\"ph2\">&amp;gt;</ph> of extensions that are available to workflows invoked by a <bpt id=\"p1\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The &lt;xref:System.Collections.ObjectModel.Collection%601&gt; of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance."},{"pos":[25217,25364],"content":"Invokes a workflow synchronously using the workflow definition passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow synchronously using the workflow definition passed to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Activities.WorkflowInvoker.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> constructor.","pos":[0,147],"source":"Invokes a workflow synchronously using the workflow definition passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor."}]},{"pos":[25376,25703],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[26974,27191],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[27697,27770],"content":"Invokes a workflow synchronously using the specified workflow definition.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow synchronously using the specified workflow definition.","pos":[0,73]}]},{"pos":[27782,28109],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[29274,29324],"content":"The workflow definition of the workflow to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]},{"pos":[29436,29653],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[30295,30509],"content":"Invokes the activity passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the activity passed to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Activities.WorkflowInvoker.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> constructor synchronously with the specified <ph id=\"ph3\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph4\">&amp;gt;</ph> of input parameters.","pos":[0,214],"source":"Invokes the activity passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters."}]},{"pos":[30521,30848],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[32740,32815],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[32927,33144],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[33628,33698],"content":"Invokes a workflow synchronously with the specified time-out interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow synchronously with the specified time-out interval.","pos":[0,70]}]},{"pos":[33711,34292],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[296,439],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[440,578]}]},{"pos":[35570,35687],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[35799,36016],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[36739,36892],"content":"Invokes a workflow synchronously using the specified workflow definition and &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow synchronously using the specified workflow definition and <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters.","pos":[0,153],"source":"Invokes a workflow synchronously using the specified workflow definition and &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters."}]},{"pos":[36904,37231],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[39103,39153],"content":"The workflow definition of the workflow to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]},{"pos":[39270,39345],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[39457,39674],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[40239,40334],"content":"Invokes a workflow synchronously using the specified workflow definition and time-out interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow synchronously using the specified workflow definition and time-out interval.","pos":[0,95]}]},{"pos":[40347,40928],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[296,439],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[440,578]}]},{"pos":[42036,42086],"content":"The workflow definition of the workflow to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]},{"pos":[42152,42269],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[42381,42598],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[43299,43549],"content":"Invokes the activity passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and the specified time-out interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the activity passed to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Activities.WorkflowInvoker.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> constructor synchronously with the specified <ph id=\"ph3\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph4\">&amp;gt;</ph> of input parameters and the specified time-out interval.","pos":[0,250],"source":"Invokes the activity passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and the specified time-out interval."}]},{"pos":[43562,44143],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[296,439],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[440,578]}]},{"pos":[45411,45486],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[45552,45669],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[45781,45998],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[46780,46953],"content":"Invokes a workflow synchronously using the specified workflow definition, &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, and time-out interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow synchronously using the specified workflow definition, <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters, and time-out interval.","pos":[0,173],"source":"Invokes a workflow synchronously using the specified workflow definition, &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, and time-out interval."}]},{"pos":[46966,47547],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[296,439],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[440,578]}]},{"pos":[48727,48777],"content":"The workflow definition of the workflow to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]},{"pos":[48894,48969],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[49035,49152],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[49264,49481],"content":"A dictionary of the root activity’s <bpt id=\"p1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values keyed by argument name that represent the outputs of the workflow.","needQuote":true,"needEscape":true,"source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."},{"pos":[50217,50229],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[50281,50293],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[51317,51329],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[51446,51458],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[51510,51522],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[52623,52635],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[52752,52764],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[52830,52842],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[52894,52906],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54303,54315],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54432,54444],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54572,54584],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54650,54662],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54714,54726],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[55186,55220],"content":"Invokes a workflow asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously.","pos":[0,34]}]},{"pos":[55233,55787],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[111,297],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[304,400]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[401,552],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[57091,57221],"content":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters.","pos":[0,130],"source":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters."}]},{"pos":[57234,57788],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[111,297],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[304,400]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[401,552],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[58588,58663],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[59167,59239],"content":"Invokes a workflow asynchronously using the specified unique identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified unique identifier.","pos":[0,72]}]},{"pos":[59252,60263],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If the <ph id=\"ph1\">`userState`</ph> parameter is not unique, an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[163,252],"source":" If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;, and to cancel the workflow using &lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;.","pos":[253,448],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."},{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[455,565],"source":"       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[566,752],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[759,855]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[856,1007],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[60974,61113],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]},{"pos":[61627,61698],"content":"Invokes a workflow asynchronously with the specified time-out interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously with the specified time-out interval.","pos":[0,71]}]},{"pos":[61711,62514],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[111,255],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[261,404],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[405,543]},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[550,646]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[647,798],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[63225,63342],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[64063,64217],"content":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and a unique identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters and a unique identifier.","pos":[0,154],"source":"Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and a unique identifier."}]},{"pos":[64230,65227],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If <ph id=\"ph1\">`userState`</ph> is not unique, an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[163,238],"source":" If `userState` is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;, and to cancel the workflow using &lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;.","pos":[239,434],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."},{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[441,551],"source":"       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; overloads that take a &lt;xref:System.TimeSpan&gt;.","pos":[552,738],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[745,841]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[842,993],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[66045,66120],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[66186,66325],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]},{"pos":[67056,67221],"content":"Invokes a workflow asynchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and the specified time-out interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously with the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters and the specified time-out interval.","pos":[0,165],"source":"Invokes a workflow asynchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and the specified time-out interval."}]},{"pos":[67234,68037],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[111,255],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[261,404],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[405,543]},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[550,646]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[647,798],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[68855,68930],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[68996,69113],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[69676,69771],"content":"Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.","pos":[0,95]}]},{"pos":[69784,71030],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If <ph id=\"ph1\">`userState`</ph> is not unique, an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[163,238],"source":" If `userState` is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;, and to cancel the workflow using &lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;.","pos":[239,434],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."},{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[441,551],"source":"       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[552,696],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[702,845],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[846,984]},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[991,1087]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[1088,1239],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[71757,71874],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[71940,72079],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]},{"pos":[72859,73046],"content":"Invokes a workflow asynchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, the specified time-out interval, and a unique identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes a workflow asynchronously with the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IDictionary%602<ph id=\"ph2\">&amp;gt;</ph> of input parameters, the specified time-out interval, and a unique identifier.","pos":[0,187],"source":"Invokes a workflow asynchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, the specified time-out interval, and a unique identifier."}]},{"pos":[73059,74305],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.       This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If <ph id=\"ph1\">`userState`</ph> is not unique, an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[163,238],"source":" If `userState` is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;, and to cancel the workflow using &lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;.","pos":[239,434],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."},{"content":"To be notified when the workflow is complete, handle &lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;.","pos":[441,551],"source":"       To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[552,696],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.TimeoutException&gt; is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[702,845],"source":"      > [!NOTE] >  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[846,984]},{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[991,1087]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[1088,1239],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]},{"pos":[75141,75216],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]},{"pos":[75282,75399],"content":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the workflow must complete before it is aborted and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,117],"source":"The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown."}]},{"pos":[75465,75604],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]},{"pos":[76073,76209],"content":"Occurs when the workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync*> overloads is completed or canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the workflow invoked by one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync*&gt; overloads is completed or canceled.","pos":[0,136],"source":"Occurs when the workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync*> overloads is completed or canceled."}]},{"pos":[76221,76441],"content":"Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle this to determine whether a workflow invoked with one of the &lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt; overloads completed successfully and to retrieve the output arguments of the completed workflow.","pos":[0,220],"source":"Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow."}]},{"pos":[77173,77185],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.WorkflowInvoker\n  id: WorkflowInvoker\n  children:\n  - System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  - System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  - System.Activities.WorkflowInvoker.Extensions\n  - System.Activities.WorkflowInvoker.Invoke\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  - System.Activities.WorkflowInvoker.InvokeAsync\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  - System.Activities.WorkflowInvoker.InvokeCompleted\n  langs:\n  - csharp\n  name: WorkflowInvoker\n  nameWithType: WorkflowInvoker\n  fullName: System.Activities.WorkflowInvoker\n  type: Class\n  summary: Provides a means for invoking a workflow as if it were a method call.\n  remarks: \"WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.  \\n  \\n WorkflowInvoker does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.  \\n  \\n To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.\"\n  example:\n  - \"The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using WorkflowInvoker.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/t-system.activities.work_6_1.cs)]\"\n  syntax:\n    content: public sealed class WorkflowInvoker\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  id: '#ctor(System.Activities.Activity)'\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: WorkflowInvoker(Activity)\n  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)\n  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class.\n  remarks: <xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.\n  example:\n  - \"The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_18_1.cs)]\"\n  syntax:\n    content: public WorkflowInvoker (System.Activities.Activity workflow);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to be invoked by this instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class.\n  overload: System.Activities.WorkflowInvoker.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified <xref:System.AsyncCallback> and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, <xref:System.AsyncCallback>, and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, AsyncCallback callback, object state);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified time-out interval, <xref:System.AsyncCallback>, and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, time-out interval, <xref:System.AsyncCallback>, and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  id: CancelAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: CancelAsync(Object)\n  nameWithType: WorkflowInvoker.CancelAsync(Object)\n  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Attempts to cancel the workflow that was invoked with the specified <code>userState</code>.\n  remarks: \"Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.  \\n  \\n If the cancellation succeeds, the <xref:System.ComponentModel.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. Once the workflow is invoked, the host attempts to cancel the workflow.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_1_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#34](~/add/codesnippet/csharp/m-system.activities.work_1_2.cs)]\"\n  syntax:\n    content: public void CancelAsync (object userState);\n    parameters:\n    - id: userState\n      type: System.Object\n      description: The token for the workflow to cancel.\n  overload: System.Activities.WorkflowInvoker.CancelAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  id: EndInvoke(System.IAsyncResult)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: EndInvoke(IAsyncResult)\n  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)\n  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns the results of a workflow that was invoked using one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke*> overloads.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call EndInvoke from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. If EndInvoke is called before the workflow completes, it blocks until the workflow completes.  \\n  \\n This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling EndInvoke. When the call to EndInvoke returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_22_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/m-system.activities.work_22_2.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> EndInvoke (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that references the <xref:System.Activities.WorkflowInvoker.BeginInvoke*> operation that started the workflow.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.EndInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Extensions\n  id: Extensions\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Extensions\n  nameWithType: WorkflowInvoker.Extensions\n  fullName: System.Activities.WorkflowInvoker.Extensions\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets the &lt;xref:System.Collections.ObjectModel.Collection%601&gt; of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance.\n  remarks: This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.\n  example:\n  - \"The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the Extensions collection of a <xref:System.Activities.WorkflowInvoker> instance. This code example is part of the [Custom Tracking](~/add/includes/ajax-current-ext-md.md) sample.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#40](~/add/codesnippet/csharp/p-system.activities.work_13_1.cs)]\"\n  syntax:\n    content: public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }\n    return:\n      type: System.Activities.Hosting.WorkflowInstanceExtensionManager\n      description: The &lt;xref:System.Collections.ObjectModel.Collection%601&gt; of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance.\n  overload: System.Activities.WorkflowInvoker.Extensions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke\n  id: Invoke\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke()\n  nameWithType: WorkflowInvoker.Invoke()\n  fullName: System.Activities.WorkflowInvoker.Invoke()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the workflow definition passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name. The workflow is invoked twice, using the workflow definition passed into to the `WorkflowInvoker` constructor.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_6_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#31](~/add/codesnippet/csharp/m-system.activities.work_6_2.cs)]  \\n  \\n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_6_3.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  id: Invoke(System.Activities.Activity)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity)\n  nameWithType: WorkflowInvoker.Invoke(Activity)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_4_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#30](~/add/codesnippet/csharp/m-system.activities.work_4_2.cs)]  \\n  \\n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/m-system.activities.work_4_3.cs)]\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes the activity passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#22](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_2.cs)]  \\n  \\n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_3.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#23](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_4.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  id: Invoke(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously with the specified time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \\n  \\n```Output  \\nThe operation did not complete within the allotted timeout of 00:00:30.   \\nThe time allotted to this operation may have been a portion of a longer timeout.  \\n```  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/m-system.activities.work_12_1.cs)]  \\n  \\n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity,IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition and &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#20](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_2.cs)]  \\n  \\n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_3.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#21](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_4.cs)]\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  id: Invoke(System.Activities.Activity,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition and time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/c629ab8d-d5ad-4778-bfb5-_1.cs)]  \\n  \\n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes the activity passed to the &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and the specified time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \\n  \\n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \\n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/b4c6bab6-3619-4dba-a32f-_1.cs)]  \\n  \\n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition, &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, and time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/99f81696-783c-40fe-9cab-_1.cs)]  \\n  \\n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)\n  id: Invoke``1(System.Activities.Activity`1)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity<TResult>)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: To be added.\n    return:\n      type: TResult\n      description: To be added.\n  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity<TResult>,IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: To be added.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: To be added.\n    return:\n      type: TResult\n      description: To be added.\n  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: To be added.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: To be added.\n    - id: timeout\n      type: System.TimeSpan\n      description: To be added.\n    return:\n      type: TResult\n      description: To be added.\n  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, out System.Collections.Generic.IDictionary<string,object> additionalOutputs, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: To be added.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: To be added.\n    - id: additionalOutputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: To be added.\n    - id: timeout\n      type: System.TimeSpan\n      description: To be added.\n    return:\n      type: TResult\n      description: To be added.\n  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync\n  id: InvokeAsync\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync()\n  nameWithType: WorkflowInvoker.InvokeAsync()\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_16_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_16_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync ();\n    parameters: []\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  id: InvokeAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_25_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_25_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (object userState);\n    parameters:\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  id: InvokeAsync(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified time-out interval.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_10_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_10_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>,Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and a unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, object userState);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters and the specified time-out interval.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  id: InvokeAsync(System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(TimeSpan,Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_2_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_2_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (TimeSpan timeout, object userState);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified &lt;xref:System.Collections.Generic.IDictionary%602&gt; of input parameters, the specified time-out interval, and a unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_2.cs)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, object userState);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref:System.TimeoutException> is thrown.\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInvoker.InvokeCompleted\n  id: InvokeCompleted\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeCompleted\n  nameWithType: WorkflowInvoker.InvokeCompleted\n  fullName: System.Activities.WorkflowInvoker.InvokeCompleted\n  type: Event\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Occurs when the workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync*> overloads is completed or canceled.\n  remarks: Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the InvokeCompleted handler.  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/e-system.activities.work_1.cs)]  \\n  \\n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/e-system.activities.work_2.cs)]\"\n  syntax:\n    content: public event EventHandler<System.Activities.InvokeCompletedEventArgs> InvokeCompleted;\n    return:\n      type: System.EventHandler{System.Activities.InvokeCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: WorkflowInvoker(Activity)\n  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)\n  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,Object>\n  nameWithType: IDictionary<String,Object>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)\n- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: CancelAsync(Object)\n  nameWithType: WorkflowInvoker.CancelAsync(Object)\n  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)\n- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: EndInvoke(IAsyncResult)\n  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)\n  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)\n- uid: System.Activities.WorkflowInvoker.Extensions\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Extensions\n  nameWithType: WorkflowInvoker.Extensions\n  fullName: System.Activities.WorkflowInvoker.Extensions\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstanceExtensionManager\n  nameWithType: WorkflowInstanceExtensionManager\n  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager\n- uid: System.Activities.WorkflowInvoker.Invoke\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke()\n  nameWithType: WorkflowInvoker.Invoke()\n  fullName: System.Activities.WorkflowInvoker.Invoke()\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity)\n  nameWithType: WorkflowInvoker.Invoke(Activity)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity,IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity<TResult>)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)\n- uid: TResult\n  isExternal: true\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Activities.Activity`1\n  parent: System.Activities\n  isExternal: false\n  name: Activity<TResult>\n  nameWithType: Activity<TResult>\n  fullName: System.Activities.Activity<TResult>\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity<TResult>,IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync()\n  nameWithType: WorkflowInvoker.InvokeAsync()\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync()\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>,Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(TimeSpan,Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)\n  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)\n- uid: System.Activities.WorkflowInvoker.InvokeCompleted\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeCompleted\n  nameWithType: WorkflowInvoker.InvokeCompleted\n  fullName: System.Activities.WorkflowInvoker.InvokeCompleted\n- uid: System.EventHandler{System.Activities.InvokeCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<InvokeCompletedEventArgs>\n  nameWithType: EventHandler<InvokeCompletedEventArgs>\n  fullName: System.EventHandler<System.Activities.InvokeCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Activities.InvokeCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.InvokeCompletedEventArgs\n    name: InvokeCompletedEventArgs\n    nameWithType: InvokeCompletedEventArgs\n    fullName: InvokeCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.WorkflowInvoker.#ctor*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: WorkflowInvoker\n  nameWithType: WorkflowInvoker.WorkflowInvoker\n- uid: System.Activities.WorkflowInvoker.BeginInvoke*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke\n  nameWithType: WorkflowInvoker.BeginInvoke\n- uid: System.Activities.WorkflowInvoker.CancelAsync*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: CancelAsync\n  nameWithType: WorkflowInvoker.CancelAsync\n- uid: System.Activities.WorkflowInvoker.EndInvoke*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: EndInvoke\n  nameWithType: WorkflowInvoker.EndInvoke\n- uid: System.Activities.WorkflowInvoker.Extensions*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Extensions\n  nameWithType: WorkflowInvoker.Extensions\n- uid: System.Activities.WorkflowInvoker.Invoke*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke\n  nameWithType: WorkflowInvoker.Invoke\n- uid: System.Activities.WorkflowInvoker.Invoke<TResult>*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke<TResult>\n  nameWithType: WorkflowInvoker.Invoke<TResult>\n- uid: System.Activities.WorkflowInvoker.InvokeAsync*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync\n  nameWithType: WorkflowInvoker.InvokeAsync\n"}