{"nodes":[{"pos":[992,1095],"content":"Represents the base class from which custom expression writers must derive to write custom expressions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the base class from which custom expression writers must derive to write custom expressions.","pos":[0,103]}]},{"pos":[7935,8044],"content":"When overridden in a derived class, reports on how the object uses fields and properties in the context type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, reports on how the object uses fields and properties in the context type.","pos":[0,109]}]},{"pos":[8354,8504],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleAnalysis\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method to store fields and properties read by a condition or read by an action.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.Activities.Rules.RuleAnalysis\"></xref> method to store fields and properties read by a condition or read by an action."},{"pos":[8568,8771],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the expression is being read from; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the expression is not being read from.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is being read from; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the expression is not being read from."},{"pos":[8838,9043],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the expression is being written to; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the expression is not being written to.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is being written to; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the expression is not being written to."},{"pos":[9146,9178],"content":"The path of a field or property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of a field or property.","pos":[0,32]}]},{"pos":[9689,9811],"content":"When overridden in a derived class, creates a deep copy of the current <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, creates a deep copy of the current <xref href=\"System.CodeDom.CodeExpression\"></xref>."},{"pos":[9974,10052],"content":"A deep copy of the current <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A deep copy of the current <xref href=\"System.CodeDom.CodeExpression\"></xref>."},{"pos":[10774,10860],"content":"When overridden in a derived class, decompiles the custom expression into string form.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, decompiles the custom expression into string form.","pos":[0,86]}]},{"pos":[11094,11213],"content":"A mutable string for the decompiled expression. This method should append the decompiled syntax for this subexpression.","needQuote":true,"needEscape":true,"nodes":[{"content":"A mutable string for the decompiled expression. This method should append the decompiled syntax for this subexpression.","pos":[0,119],"nodes":[{"content":"A mutable string for the decompiled expression.","pos":[0,47]},{"content":"This method should append the decompiled syntax for this subexpression.","pos":[48,119]}]}]},{"pos":[11302,11438],"content":"The parent code expression. This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parent code expression. This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.","pos":[0,136],"nodes":[{"content":"The parent code expression.","pos":[0,27]},{"content":"This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.","pos":[28,136]}]}]},{"pos":[12096,12164],"content":"When overridden in a derived class, evaluates the custom expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, evaluates the custom expression.","pos":[0,68]}]},{"pos":[12432,12530],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleExecution\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to execute the expression.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.Activities.Rules.RuleExecution\"></xref> to execute the expression."},{"pos":[12628,12755],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleExpressionResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the result of the rule execution.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.Activities.Rules.RuleExpressionResult\"></xref> that indicates the result of the rule execution."},{"pos":[13366,13456],"content":"Compares the current expression to another expression to determine whether they are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares the current expression to another expression to determine whether they are equal.","pos":[0,90]}]},{"pos":[13640,13692],"content":"The expression to compare the current expression to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression to compare the current expression to.","pos":[0,52]}]},{"pos":[13751,13926],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to show that the expressions are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to show that the expressions are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14639,14746],"content":"When overridden in a derived class, verifies that the expression is configured correctly and has no errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, verifies that the expression is configured correctly and has no errors.","pos":[0,107]}]},{"pos":[15032,15138],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleValidation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to manage the validation process.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.Activities.Rules.RuleValidation\"></xref> to manage the validation process."},{"pos":[15205,15410],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the expression is being written to; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the expression is not being written to.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is being written to; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the expression is not being written to."},{"pos":[15506,15602],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.Rules.RuleExpressionInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the expression.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Workflow.Activities.Rules.RuleExpressionInfo\"></xref> for the expression."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.Rules.IRuleExpression\n  id: IRuleExpression\n  children:\n  - System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)\n  - System.Workflow.Activities.Rules.IRuleExpression.Clone\n  - System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)\n  - System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)\n  - System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)\n  - System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)\n  langs:\n  - csharp\n  name: IRuleExpression\n  nameWithType: IRuleExpression\n  fullName: System.Workflow.Activities.Rules.IRuleExpression\n  type: Interface\n  summary: Represents the base class from which custom expression writers must derive to write custom expressions.\n  remarks: ''\n  example:\n  - \"The following code creates an expression that can be used in declarative conditions and rule sets. The expression is named `TwoOfThree`, and takes 3 parameters, all of which must evaluate to Booleans. This expression returns `true` if 2 of the 3 expressions return `true`.  \\n  \\n To use this code, add it to a Class Library project and reference the library from your workflow project.  \\n  \\n```c#  \\nusing System.CodeDom;  \\nusing System.Text;  \\nusing System.Workflow.Activities.Rules;  \\nusing System.Workflow.ComponentModel.Compiler;  \\n  \\nnamespace TwoOfThreeRuleExpression  \\n{  \\n    public class TwoOfThree : CodeExpression, IRuleExpression  \\n    {  \\n        CodeExpression expression1, expression2, expression3;  \\n  \\n        public CodeExpression First  \\n        {  \\n            get { return expression1; }  \\n            set { expression1 = value; }  \\n        }  \\n  \\n        public CodeExpression Second  \\n        {  \\n            get { return expression2; }  \\n            set { expression2 = value; }  \\n        }  \\n  \\n        public CodeExpression Third  \\n        {  \\n            get { return expression3; }  \\n            set { expression3 = value; }  \\n        }  \\n  \\n        public TwoOfThree()  \\n        {  \\n            // constructor required for deserialization  \\n        }  \\n  \\n        public TwoOfThree(CodeExpression first, CodeExpression second, CodeExpression third)  \\n        {  \\n            // constructor required by parser  \\n            expression1 = first;  \\n            expression2 = second;  \\n            expression3 = third;  \\n        }  \\n  \\n        public void AnalyzeUsage(RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier)  \\n        {  \\n            // check what the 3 expressions use  \\n            RuleExpressionWalker.AnalyzeUsage(analysis, expression1, true, false, null);  \\n            RuleExpressionWalker.AnalyzeUsage(analysis, expression2, true, false, null);  \\n            RuleExpressionWalker.AnalyzeUsage(analysis, expression3, true, false, null);  \\n        }  \\n  \\n        public CodeExpression Clone()  \\n        {  \\n            TwoOfThree result = new TwoOfThree();  \\n            result.expression1 = RuleExpressionWalker.Clone(expression1);  \\n            result.expression2 = RuleExpressionWalker.Clone(expression2);  \\n            result.expression3 = RuleExpressionWalker.Clone(expression3);  \\n            return result;  \\n        }  \\n  \\n        public void Decompile(StringBuilder stringBuilder, CodeExpression parentExpression)  \\n        {  \\n            // what should be displayed by the parser  \\n            stringBuilder.Append(\\\"TwoOfThree(\\\");  \\n            RuleExpressionWalker.Decompile(stringBuilder, expression1, this);  \\n            stringBuilder.Append(\\\", \\\");  \\n            RuleExpressionWalker.Decompile(stringBuilder, expression2, this);  \\n            stringBuilder.Append(\\\", \\\");  \\n            RuleExpressionWalker.Decompile(stringBuilder, expression3, this);  \\n            stringBuilder.Append(\\\")\\\");  \\n        }  \\n  \\n        static RuleLiteralResult resultTrue = new RuleLiteralResult(true);  \\n        static RuleLiteralResult resultFalse = new RuleLiteralResult(false);  \\n  \\n        public RuleExpressionResult Evaluate(RuleExecution execution)  \\n        {  \\n            // start by doing the first 2 expressions  \\n            RuleExpressionResult r1 = RuleExpressionWalker.Evaluate(execution, expression1);  \\n            RuleExpressionResult r2 = RuleExpressionWalker.Evaluate(execution, expression2);  \\n            bool b1 = (bool)r1.Value;  \\n            bool b2 = (bool)r2.Value;  \\n            if (b1 && b2)  \\n            {  \\n                // both are true, so result is true  \\n                return resultTrue;  \\n            }  \\n            else if (b1 || b2)  \\n            {  \\n                // only one of the first 2 is true, evaluate the third to determine result  \\n                return RuleExpressionWalker.Evaluate(execution, expression3);  \\n            }  \\n            else  \\n                // both e1 and e2 are false, so skip e3 and return false;  \\n                return resultFalse;  \\n        }  \\n  \\n        public bool Match(CodeExpression expression)  \\n        {  \\n            TwoOfThree other = expression as TwoOfThree;  \\n            return (other != null) &&  \\n                RuleExpressionWalker.Match(expression1, other.expression1) &&  \\n                RuleExpressionWalker.Match(expression2, other.expression2) &&  \\n                RuleExpressionWalker.Match(expression3, other.expression3);  \\n        }  \\n  \\n        public RuleExpressionInfo Validate(RuleValidation validation, bool isWritten)  \\n        {  \\n            ValidateExpression(validation, expression1, \\\"First\\\");  \\n            ValidateExpression(validation, expression2, \\\"Second\\\");  \\n            ValidateExpression(validation, expression3, \\\"Third\\\");  \\n            return new RuleExpressionInfo(typeof(bool));  \\n        }  \\n  \\n        private void ValidateExpression(RuleValidation validation, CodeExpression expression, string propertyName)  \\n        {  \\n            ValidationError error;  \\n            if (expression == null)  \\n            {  \\n                error = new ValidationError(propertyName + \\\" cannot be null\\\", 123);  \\n                validation.Errors.Add(error);  \\n            }  \\n            else  \\n            {  \\n                RuleExpressionInfo result = RuleExpressionWalker.Validate(validation, expression, false);  \\n                if ((result == null) || (result.ExpressionType != typeof(bool)))  \\n                {  \\n                    error = new ValidationError(propertyName + \\\" must return boolean result\\\", 123);  \\n                    validation.Errors.Add(error);  \\n                }  \\n            }  \\n        }  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: public interface IRuleExpression\n  implements: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)\n  id: AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  langs:\n  - csharp\n  name: AnalyzeUsage(RuleAnalysis,Boolean,Boolean,RulePathQualifier)\n  nameWithType: IRuleExpression.AnalyzeUsage(RuleAnalysis,Boolean,Boolean,RulePathQualifier)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(RuleAnalysis,Boolean,Boolean,RulePathQualifier)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities.Rules\n  summary: When overridden in a derived class, reports on how the object uses fields and properties in the context type.\n  syntax:\n    content: public void AnalyzeUsage (System.Workflow.Activities.Rules.RuleAnalysis analysis, bool isRead, bool isWritten, System.Workflow.Activities.Rules.RulePathQualifier qualifier);\n    parameters:\n    - id: analysis\n      type: System.Workflow.Activities.Rules.RuleAnalysis\n      description: The <xref href=\"System.Workflow.Activities.Rules.RuleAnalysis\"></xref> method to store fields and properties read by a condition or read by an action.\n    - id: isRead\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is being read from; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the expression is not being read from.\n    - id: isWritten\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is being written to; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the expression is not being written to.\n    - id: qualifier\n      type: System.Workflow.Activities.Rules.RulePathQualifier\n      description: The path of a field or property.\n  overload: System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Clone\n  id: Clone\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: IRuleExpression.Clone()\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Clone()\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities.Rules\n  summary: When overridden in a derived class, creates a deep copy of the current <xref href=\"System.CodeDom.CodeExpression\"></xref>.\n  syntax:\n    content: public System.CodeDom.CodeExpression Clone ();\n    parameters: []\n    return:\n      type: System.CodeDom.CodeExpression\n      description: A deep copy of the current <xref href=\"System.CodeDom.CodeExpression\"></xref>.\n  overload: System.Workflow.Activities.Rules.IRuleExpression.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)\n  id: Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  langs:\n  - csharp\n  name: Decompile(StringBuilder,CodeExpression)\n  nameWithType: IRuleExpression.Decompile(StringBuilder,CodeExpression)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Decompile(StringBuilder,CodeExpression)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities.Rules\n  summary: When overridden in a derived class, decompiles the custom expression into string form.\n  syntax:\n    content: public void Decompile (System.Text.StringBuilder stringBuilder, System.CodeDom.CodeExpression parentExpression);\n    parameters:\n    - id: stringBuilder\n      type: System.Text.StringBuilder\n      description: A mutable string for the decompiled expression. This method should append the decompiled syntax for this subexpression.\n    - id: parentExpression\n      type: System.CodeDom.CodeExpression\n      description: The parent code expression. This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.\n  overload: System.Workflow.Activities.Rules.IRuleExpression.Decompile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)\n  id: Evaluate(System.Workflow.Activities.Rules.RuleExecution)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  langs:\n  - csharp\n  name: Evaluate(RuleExecution)\n  nameWithType: IRuleExpression.Evaluate(RuleExecution)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Evaluate(RuleExecution)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities.Rules\n  summary: When overridden in a derived class, evaluates the custom expression.\n  syntax:\n    content: public System.Workflow.Activities.Rules.RuleExpressionResult Evaluate (System.Workflow.Activities.Rules.RuleExecution execution);\n    parameters:\n    - id: execution\n      type: System.Workflow.Activities.Rules.RuleExecution\n      description: The <xref href=\"System.Workflow.Activities.Rules.RuleExecution\"></xref> to execute the expression.\n    return:\n      type: System.Workflow.Activities.Rules.RuleExpressionResult\n      description: The <xref href=\"System.Workflow.Activities.Rules.RuleExpressionResult\"></xref> that indicates the result of the rule execution.\n  overload: System.Workflow.Activities.Rules.IRuleExpression.Evaluate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)\n  id: Match(System.CodeDom.CodeExpression)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  langs:\n  - csharp\n  name: Match(CodeExpression)\n  nameWithType: IRuleExpression.Match(CodeExpression)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Match(CodeExpression)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities.Rules\n  summary: Compares the current expression to another expression to determine whether they are equal.\n  syntax:\n    content: public bool Match (System.CodeDom.CodeExpression expression);\n    parameters:\n    - id: expression\n      type: System.CodeDom.CodeExpression\n      description: The expression to compare the current expression to.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to show that the expressions are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.Activities.Rules.IRuleExpression.Match*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)\n  id: Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  langs:\n  - csharp\n  name: Validate(RuleValidation,Boolean)\n  nameWithType: IRuleExpression.Validate(RuleValidation,Boolean)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Validate(RuleValidation,Boolean)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities.Rules\n  summary: When overridden in a derived class, verifies that the expression is configured correctly and has no errors.\n  syntax:\n    content: public System.Workflow.Activities.Rules.RuleExpressionInfo Validate (System.Workflow.Activities.Rules.RuleValidation validation, bool isWritten);\n    parameters:\n    - id: validation\n      type: System.Workflow.Activities.Rules.RuleValidation\n      description: The <xref href=\"System.Workflow.Activities.Rules.RuleValidation\"></xref> to manage the validation process.\n    - id: isWritten\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the expression is being written to; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the expression is not being written to.\n    return:\n      type: System.Workflow.Activities.Rules.RuleExpressionInfo\n      description: The <xref href=\"System.Workflow.Activities.Rules.RuleExpressionInfo\"></xref> for the expression.\n  overload: System.Workflow.Activities.Rules.IRuleExpression.Validate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: AnalyzeUsage(RuleAnalysis,Boolean,Boolean,RulePathQualifier)\n  nameWithType: IRuleExpression.AnalyzeUsage(RuleAnalysis,Boolean,Boolean,RulePathQualifier)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(RuleAnalysis,Boolean,Boolean,RulePathQualifier)\n- uid: System.Workflow.Activities.Rules.RuleAnalysis\n  parent: System.Workflow.Activities.Rules\n  isExternal: false\n  name: RuleAnalysis\n  nameWithType: RuleAnalysis\n  fullName: System.Workflow.Activities.Rules.RuleAnalysis\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.Activities.Rules.RulePathQualifier\n  parent: System.Workflow.Activities.Rules\n  isExternal: false\n  name: RulePathQualifier\n  nameWithType: RulePathQualifier\n  fullName: System.Workflow.Activities.Rules.RulePathQualifier\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Clone\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Clone()\n  nameWithType: IRuleExpression.Clone()\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Clone()\n- uid: System.CodeDom.CodeExpression\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeExpression\n  nameWithType: CodeExpression\n  fullName: System.CodeDom.CodeExpression\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Decompile(StringBuilder,CodeExpression)\n  nameWithType: IRuleExpression.Decompile(StringBuilder,CodeExpression)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Decompile(StringBuilder,CodeExpression)\n- uid: System.Text.StringBuilder\n  parent: System.Text\n  isExternal: true\n  name: StringBuilder\n  nameWithType: StringBuilder\n  fullName: System.Text.StringBuilder\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Evaluate(RuleExecution)\n  nameWithType: IRuleExpression.Evaluate(RuleExecution)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Evaluate(RuleExecution)\n- uid: System.Workflow.Activities.Rules.RuleExpressionResult\n  parent: System.Workflow.Activities.Rules\n  isExternal: false\n  name: RuleExpressionResult\n  nameWithType: RuleExpressionResult\n  fullName: System.Workflow.Activities.Rules.RuleExpressionResult\n- uid: System.Workflow.Activities.Rules.RuleExecution\n  parent: System.Workflow.Activities.Rules\n  isExternal: false\n  name: RuleExecution\n  nameWithType: RuleExecution\n  fullName: System.Workflow.Activities.Rules.RuleExecution\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Match(CodeExpression)\n  nameWithType: IRuleExpression.Match(CodeExpression)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Match(CodeExpression)\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Validate(RuleValidation,Boolean)\n  nameWithType: IRuleExpression.Validate(RuleValidation,Boolean)\n  fullName: System.Workflow.Activities.Rules.IRuleExpression.Validate(RuleValidation,Boolean)\n- uid: System.Workflow.Activities.Rules.RuleExpressionInfo\n  parent: System.Workflow.Activities.Rules\n  isExternal: false\n  name: RuleExpressionInfo\n  nameWithType: RuleExpressionInfo\n  fullName: System.Workflow.Activities.Rules.RuleExpressionInfo\n- uid: System.Workflow.Activities.Rules.RuleValidation\n  parent: System.Workflow.Activities.Rules\n  isExternal: false\n  name: RuleValidation\n  nameWithType: RuleValidation\n  fullName: System.Workflow.Activities.Rules.RuleValidation\n- uid: System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage*\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: AnalyzeUsage\n  nameWithType: IRuleExpression.AnalyzeUsage\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Clone*\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Clone\n  nameWithType: IRuleExpression.Clone\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Decompile*\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Decompile\n  nameWithType: IRuleExpression.Decompile\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Evaluate*\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Evaluate\n  nameWithType: IRuleExpression.Evaluate\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Match*\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Match\n  nameWithType: IRuleExpression.Match\n- uid: System.Workflow.Activities.Rules.IRuleExpression.Validate*\n  parent: System.Workflow.Activities.Rules.IRuleExpression\n  isExternal: false\n  name: Validate\n  nameWithType: IRuleExpression.Validate\n"}