{"nodes":[{"pos":[551,776],"content":"Represents an easing function that creates an animation that accelerates and/or decelerates using the formula <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) = <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>p<ept id=\"p4\">&lt;/sup&gt;</ept> where p is equal to the &lt;xref:System.Windows.Media.Animation.PowerEase.Power*&gt; property.","needQuote":true,"needEscape":true,"source":"Represents an easing function that creates an animation that accelerates and/or decelerates using the formula *f*(*t*) = *t*<sup>p</sup> where p is equal to the <xref:System.Windows.Media.Animation.PowerEase.Power*> property."},{"pos":[789,2812],"content":"You can control whether the animation accelerates, decelerates, or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, where *f*(*t*) represents the animation progress and *t* represents time.       ![CubicEase EasingMode graphs.](~/add/media/cubicease-graph.png \"CubicEase EasingMode graphs.\")       By using the PowerEase function, you can specify how quickly acceleration/deceleration takes place by specifying the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property:       *f*(*t*) = *t*<sup>p</sup> where `p` is equal to the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property.       Because of this, the PowerEase function can be substituted for <xref:System.Windows.Media.Animation.QuadraticEase> (*f*(*t*) = *t*<sup>2</sup>), <xref:System.Windows.Media.Animation.CubicEase> (*f*(*t*) = *t*<sup>3</sup>), <xref:System.Windows.Media.Animation.QuarticEase> (*f*(*t*) = *t*<sup>4</sup>), and <xref:System.Windows.Media.Animation.QuinticEase> (*f*(*t*) = *t*<sup>5</sup>). For example, if you wanted to use a PowerEase function to create the same behavior as a <xref:System.Windows.Media.Animation.QuadraticEase> function (*f*(*t*) = *t*<sup>2</sup>), you would specify a <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property value of 2.       There are several other easing functions besides PowerEase which you can explore using the following Silverlight sample.       [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)       In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.      <a name=\"xamlObjectElementUsage_PowerEase\"></a>    ## XAML Object Element Usage      ```   <PowerEase .../>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"You can control whether the animation accelerates, decelerates, or both by specifying the &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;.","pos":[0,161],"source":"You can control whether the animation accelerates, decelerates, or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>."},{"content":"The following graph demonstrates the different values of &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;, where <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) represents the animation progress and <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept> represents time.","pos":[162,364],"source":" The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, where *f*(*t*) represents the animation progress and *t* represents time."},{"content":"<bpt id=\"p1\">![</bpt>CubicEase EasingMode graphs.<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/cubicease-graph.png \"</bpt>CubicEase EasingMode graphs.<ept id=\"p2\">\")</ept>","pos":[371,466],"source":"![CubicEase EasingMode graphs.](~/add/media/cubicease-graph.png \"CubicEase EasingMode graphs.\")"},{"content":"By using the PowerEase function, you can specify how quickly acceleration/deceleration takes place by specifying the &lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt; property:       <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) = <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>p<ept id=\"p4\">&lt;/sup&gt;</ept> where <ph id=\"ph1\">`p`</ph> is equal to the &lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt; property.","pos":[473,782],"source":"       By using the PowerEase function, you can specify how quickly acceleration/deceleration takes place by specifying the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property:       *f*(*t*) = *t*<sup>p</sup> where `p` is equal to the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property."},{"content":"Because of this, the PowerEase function can be substituted for &lt;xref:System.Windows.Media.Animation.QuadraticEase&gt; (<bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) = <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>2<ept id=\"p4\">&lt;/sup&gt;</ept>), &lt;xref:System.Windows.Media.Animation.CubicEase&gt; (<bpt id=\"p5\">*</bpt>f<ept id=\"p5\">*</ept>(<bpt id=\"p6\">*</bpt>t<ept id=\"p6\">*</ept>) = <bpt id=\"p7\">*</bpt>t<ept id=\"p7\">*</ept><bpt id=\"p8\">&lt;sup&gt;</bpt>3<ept id=\"p8\">&lt;/sup&gt;</ept>), &lt;xref:System.Windows.Media.Animation.QuarticEase&gt; (<bpt id=\"p9\">*</bpt>f<ept id=\"p9\">*</ept>(<bpt id=\"p10\">*</bpt>t<ept id=\"p10\">*</ept>) = <bpt id=\"p11\">*</bpt>t<ept id=\"p11\">*</ept><bpt id=\"p12\">&lt;sup&gt;</bpt>4<ept id=\"p12\">&lt;/sup&gt;</ept>), and &lt;xref:System.Windows.Media.Animation.QuinticEase&gt; (<bpt id=\"p13\">*</bpt>f<ept id=\"p13\">*</ept>(<bpt id=\"p14\">*</bpt>t<ept id=\"p14\">*</ept>) = <bpt id=\"p15\">*</bpt>t<ept id=\"p15\">*</ept><bpt id=\"p16\">&lt;sup&gt;</bpt>5<ept id=\"p16\">&lt;/sup&gt;</ept>).","pos":[789,1175],"source":"       Because of this, the PowerEase function can be substituted for <xref:System.Windows.Media.Animation.QuadraticEase> (*f*(*t*) = *t*<sup>2</sup>), <xref:System.Windows.Media.Animation.CubicEase> (*f*(*t*) = *t*<sup>3</sup>), <xref:System.Windows.Media.Animation.QuarticEase> (*f*(*t*) = *t*<sup>4</sup>), and <xref:System.Windows.Media.Animation.QuinticEase> (*f*(*t*) = *t*<sup>5</sup>)."},{"content":"For example, if you wanted to use a PowerEase function to create the same behavior as a &lt;xref:System.Windows.Media.Animation.QuadraticEase&gt; function (<bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) = <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>2<ept id=\"p4\">&lt;/sup&gt;</ept>), you would specify a &lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt; property value of 2.","pos":[1176,1452],"source":" For example, if you wanted to use a PowerEase function to create the same behavior as a <xref:System.Windows.Media.Animation.QuadraticEase> function (*f*(*t*) = *t*<sup>2</sup>), you would specify a <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property value of 2."},{"content":"There are several other easing functions besides PowerEase which you can explore using the following Silverlight sample.","pos":[1459,1579]},{"content":"<bpt id=\"p1\">[</bpt>Run this sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=easing_functions_gallery)</ept>       In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from &lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt;.","pos":[1586,1879],"source":"[Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)       In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlObjectElementUsage_PowerEase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Object Element Usage      <ph id=\"ph1\">```   &lt;PowerEase .../&gt;   ```</ph>","pos":[1885,1998],"source":"<a name=\"xamlObjectElementUsage_PowerEase\"></a>    ## XAML Object Element Usage      ```   <PowerEase .../>   ```"}]},{"pos":[7035,7137],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Animation.PowerEase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Media.Animation.PowerEase\"></xref> class."},{"pos":[7719,7871],"content":"Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class. When creating a derived class, you must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> derived class.","pos":[0,90],"source":"Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class."},{"content":"When creating a derived class, you must override this method.","pos":[91,152]}]},{"pos":[7883,8115],"content":"Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.","pos":[0,232],"nodes":[{"content":"Animation classes inherit indirectly from &lt;xref:System.Windows.Freezable&gt;.","pos":[0,74],"source":"Animation classes inherit indirectly from <xref:System.Windows.Freezable>."},{"content":"Because of this, you need to override the &lt;xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A&gt; method to construct a custom animation object.","pos":[75,232],"source":" Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object."}]}]},{"pos":[8759,8776],"content":"The new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new instance.","pos":[0,17]}]},{"pos":[9316,9501],"content":"Provides the logic portion of the easing function that you can override to produce the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Animation.EasingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode of the custom easing function.","needQuote":true,"needEscape":true,"source":"Provides the logic portion of the easing function that you can override to produce the <xref href=\"System.Windows.Media.Animation.EasingMode\"></xref> mode of the custom easing function."},{"pos":[9514,10092],"content":"This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.       You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method transforms normalized time to control the pace of an animation for the &lt;xref:System.Windows.Media.Animation.EasingMode&gt; case of &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;.","pos":[0,211],"source":"This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>."},{"content":"You only have to specify your easing function for the &lt;xref:System.Windows.Media.Animation.EasingMode&gt; case because the implementation of the &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A&gt; method transforms <ph id=\"ph1\">`normalizedTime`</ph> for the &lt;xref:System.Windows.Media.Animation.EasingMode&gt; and &lt;xref:System.Windows.Media.Animation.EasingMode&gt; cases.","pos":[218,576],"source":"       You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases."}]},{"pos":[10265,10309],"content":"Normalized time (progress) of the animation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Normalized time (progress) of the animation.","pos":[0,44]}]},{"pos":[10367,10417],"content":"A double that represents the transformed progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A double that represents the transformed progress.","pos":[0,50]}]},{"pos":[10872,11062],"content":"Gets or sets the exponential power of the animation interpolation. For example, a value of 7 will create an animation interpolation curve that follows the formula *f*(*t*) = *t*<sup>7</sup>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the exponential power of the animation interpolation.","pos":[0,66]},{"content":"For example, a value of 7 will create an animation interpolation curve that follows the formula <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) = <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>7<ept id=\"p4\">&lt;/sup&gt;</ept>.","pos":[67,190],"source":" For example, a value of 7 will create an animation interpolation curve that follows the formula *f*(*t*) = *t*<sup>7</sup>."}]},{"pos":[11075,11335],"content":"<ph id=\"ph1\">[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)]</ph> &lt;xref:System.Windows.Media.Animation.PowerEase.PowerProperty&gt;      <bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Power\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph2\">```   &lt;object Power=\"double\" .../&gt;   ```</ph>","needQuote":false,"needEscape":true,"source":"[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.PowerEase.PowerProperty>      <a name=\"xamlAttributeUsage_Power\"></a>    ## XAML Attribute Usage      ```   <object Power=\"double\" .../>   ```"},{"pos":[11988,12101],"content":"The exponential power of the animation interpolation. This value must be greater or equal to 0. The default is 2.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exponential power of the animation interpolation. This value must be greater or equal to 0. The default is 2.","pos":[0,113],"nodes":[{"content":"The exponential power of the animation interpolation.","pos":[0,53]},{"content":"This value must be greater or equal to 0.","pos":[54,95]},{"content":"The default is 2.","pos":[96,113]}]}]},{"pos":[12588,12678],"content":"Identifies the <xref:System.Windows.Media.Animation.PowerEase.Power*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Media.Animation.PowerEase.Power*&gt; dependency property.","pos":[0,90],"source":"Identifies the <xref:System.Windows.Media.Animation.PowerEase.Power*> dependency property."}]},{"pos":[12851,12863],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.Animation.PowerEase\n  id: PowerEase\n  children:\n  - System.Windows.Media.Animation.PowerEase.#ctor\n  - System.Windows.Media.Animation.PowerEase.CreateInstanceCore\n  - System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)\n  - System.Windows.Media.Animation.PowerEase.Power\n  - System.Windows.Media.Animation.PowerEase.PowerProperty\n  langs:\n  - csharp\n  name: PowerEase\n  nameWithType: PowerEase\n  fullName: System.Windows.Media.Animation.PowerEase\n  type: Class\n  summary: Represents an easing function that creates an animation that accelerates and/or decelerates using the formula *f*(*t*) = *t*<sup>p</sup> where p is equal to the <xref:System.Windows.Media.Animation.PowerEase.Power*> property.\n  remarks: \"You can control whether the animation accelerates, decelerates, or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, where *f*(*t*) represents the animation progress and *t* represents time.  \\n  \\n ![CubicEase EasingMode graphs.](~/add/media/cubicease-graph.png \\\"CubicEase EasingMode graphs.\\\")  \\n  \\n By using the PowerEase function, you can specify how quickly acceleration/deceleration takes place by specifying the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property:  \\n  \\n *f*(*t*) = *t*<sup>p</sup> where `p` is equal to the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property.  \\n  \\n Because of this, the PowerEase function can be substituted for <xref:System.Windows.Media.Animation.QuadraticEase> (*f*(*t*) = *t*<sup>2</sup>), <xref:System.Windows.Media.Animation.CubicEase> (*f*(*t*) = *t*<sup>3</sup>), <xref:System.Windows.Media.Animation.QuarticEase> (*f*(*t*) = *t*<sup>4</sup>), and <xref:System.Windows.Media.Animation.QuinticEase> (*f*(*t*) = *t*<sup>5</sup>). For example, if you wanted to use a PowerEase function to create the same behavior as a <xref:System.Windows.Media.Animation.QuadraticEase> function (*f*(*t*) = *t*<sup>2</sup>), you would specify a <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property value of 2.  \\n  \\n There are several other easing functions besides PowerEase which you can explore using the following Silverlight sample.  \\n  \\n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  \\n  \\n In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.  \\n  \\n<a name=\\\"xamlObjectElementUsage_PowerEase\\\"></a>   \\n## XAML Object Element Usage  \\n  \\n```  \\n<PowerEase .../>  \\n```\"\n  example:\n  - \"The following example applies a PowerEase easing function with a <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property value of `20` to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation. Because the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> value is so high, the deceleration is sudden compared to if you used a lower value.  \\n  \\n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/t-system.windows.media.a_27_1.xaml)]\\n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/powerease/window1.xaml#powerease)]\"\n  syntax:\n    content: 'public class PowerEase : System.Windows.Media.Animation.EasingFunctionBase'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Media.Animation.EasingFunctionBase\n  implements: []\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.Clone\n  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)\n  - System.Windows.Freezable.CloneCurrentValue\n  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.FreezeCore(System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Media.Animation.EasingFunctionBase.Ease(System.Double)\n  - System.Windows.Media.Animation.EasingFunctionBase.EasingMode\n  - System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.PowerEase.#ctor\n  id: '#ctor'\n  parent: System.Windows.Media.Animation.PowerEase\n  langs:\n  - csharp\n  name: PowerEase()\n  nameWithType: PowerEase.PowerEase()\n  fullName: System.Windows.Media.Animation.PowerEase.PowerEase()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Media.Animation.PowerEase\"></xref> class.\n  syntax:\n    content: public PowerEase ();\n    parameters: []\n  overload: System.Windows.Media.Animation.PowerEase.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.PowerEase.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Media.Animation.PowerEase\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: PowerEase.CreateInstanceCore()\n  fullName: System.Windows.Media.Animation.PowerEase.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class. When creating a derived class, you must override this method.\n  remarks: Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.\n  example:\n  - \"The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  \\n  \\n [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/visualbasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]\\n [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/csharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]\"\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new instance.\n  overload: System.Windows.Media.Animation.PowerEase.CreateInstanceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)\n  id: EaseInCore(System.Double)\n  parent: System.Windows.Media.Animation.PowerEase\n  langs:\n  - csharp\n  name: EaseInCore(Double)\n  nameWithType: PowerEase.EaseInCore(Double)\n  fullName: System.Windows.Media.Animation.PowerEase.EaseInCore(Double)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Provides the logic portion of the easing function that you can override to produce the <xref href=\"System.Windows.Media.Animation.EasingMode\"></xref> mode of the custom easing function.\n  remarks: \"This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  \\n  \\n You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases.\"\n  syntax:\n    content: protected override double EaseInCore (double normalizedTime);\n    parameters:\n    - id: normalizedTime\n      type: System.Double\n      description: Normalized time (progress) of the animation.\n    return:\n      type: System.Double\n      description: A double that represents the transformed progress.\n  overload: System.Windows.Media.Animation.PowerEase.EaseInCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.PowerEase.Power\n  id: Power\n  parent: System.Windows.Media.Animation.PowerEase\n  langs:\n  - csharp\n  name: Power\n  nameWithType: PowerEase.Power\n  fullName: System.Windows.Media.Animation.PowerEase.Power\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Gets or sets the exponential power of the animation interpolation. For example, a value of 7 will create an animation interpolation curve that follows the formula *f*(*t*) = *t*<sup>7</sup>.\n  remarks: \"[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.PowerEase.PowerProperty>  \\n  \\n<a name=\\\"xamlAttributeUsage_Power\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Power=\\\"double\\\" .../>  \\n```\"\n  example:\n  - \"The following example applies a <xref:System.Windows.Media.Animation.PowerEase> easing function with a Power property value of `20` to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation. Because the Power value is so high, the deceleration is sudden compared to if you used a lower value.  \\n  \\n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/p-system.windows.media.a_3_1.xaml)]\\n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/powerease/window1.xaml#powerease)]\"\n  syntax:\n    content: public double Power { get; set; }\n    return:\n      type: System.Double\n      description: The exponential power of the animation interpolation. This value must be greater or equal to 0. The default is 2.\n  overload: System.Windows.Media.Animation.PowerEase.Power*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.PowerEase.PowerProperty\n  id: PowerProperty\n  parent: System.Windows.Media.Animation.PowerEase\n  langs:\n  - csharp\n  name: PowerProperty\n  nameWithType: PowerEase.PowerProperty\n  fullName: System.Windows.Media.Animation.PowerEase.PowerProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Identifies the <xref:System.Windows.Media.Animation.PowerEase.Power*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty PowerProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Media.Animation.EasingFunctionBase\n  isExternal: false\n  name: System.Windows.Media.Animation.EasingFunctionBase\n- uid: System.Windows.Media.Animation.PowerEase.#ctor\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: PowerEase()\n  nameWithType: PowerEase.PowerEase()\n  fullName: System.Windows.Media.Animation.PowerEase.PowerEase()\n- uid: System.Windows.Media.Animation.PowerEase.CreateInstanceCore\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: PowerEase.CreateInstanceCore()\n  fullName: System.Windows.Media.Animation.PowerEase.CreateInstanceCore()\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: EaseInCore(Double)\n  nameWithType: PowerEase.EaseInCore(Double)\n  fullName: System.Windows.Media.Animation.PowerEase.EaseInCore(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Media.Animation.PowerEase.Power\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: Power\n  nameWithType: PowerEase.Power\n  fullName: System.Windows.Media.Animation.PowerEase.Power\n- uid: System.Windows.Media.Animation.PowerEase.PowerProperty\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: PowerProperty\n  nameWithType: PowerEase.PowerProperty\n  fullName: System.Windows.Media.Animation.PowerEase.PowerProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Media.Animation.PowerEase.#ctor*\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: PowerEase\n  nameWithType: PowerEase.PowerEase\n- uid: System.Windows.Media.Animation.PowerEase.CreateInstanceCore*\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: PowerEase.CreateInstanceCore\n- uid: System.Windows.Media.Animation.PowerEase.EaseInCore*\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: EaseInCore\n  nameWithType: PowerEase.EaseInCore\n- uid: System.Windows.Media.Animation.PowerEase.Power*\n  parent: System.Windows.Media.Animation.PowerEase\n  isExternal: false\n  name: Power\n  nameWithType: PowerEase.Power\n"}