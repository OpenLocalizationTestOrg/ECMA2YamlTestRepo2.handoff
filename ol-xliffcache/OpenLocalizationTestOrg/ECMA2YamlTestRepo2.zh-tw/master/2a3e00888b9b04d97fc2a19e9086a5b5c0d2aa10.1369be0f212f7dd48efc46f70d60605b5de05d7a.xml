{"nodes":[{"pos":[2847,2949],"content":"Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.","pos":[0,102]}]},{"pos":[2961,3218],"content":"This class wraps NCrypt keys, not BCrypt keys. NCrypt is a subset of CNG that provides key storage functionality. BCrypt is a subset that provides base cryptographic services such as random number generation, hash functions, signatures, and encryption keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class wraps NCrypt keys, not BCrypt keys. NCrypt is a subset of CNG that provides key storage functionality. BCrypt is a subset that provides base cryptographic services such as random number generation, hash functions, signatures, and encryption keys.","pos":[0,257],"nodes":[{"content":"This class wraps NCrypt keys, not BCrypt keys.","pos":[0,46]},{"content":"NCrypt is a subset of CNG that provides key storage functionality.","pos":[47,113]},{"content":"BCrypt is a subset that provides base cryptographic services such as random number generation, hash functions, signatures, and encryption keys.","pos":[114,257]}]}]},{"pos":[3745,3788],"content":"Gets the algorithm that is used by the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the algorithm that is used by the key.","pos":[0,43]}]},{"pos":[3965,4026],"content":"An object that specifies the name of an encryption algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the name of an encryption algorithm.","pos":[0,61]}]},{"pos":[4495,4544],"content":"Gets the algorithm group that is used by the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the algorithm group that is used by the key.","pos":[0,49]}]},{"pos":[4736,4803],"content":"An object that specifies the name of an encryption algorithm group.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the name of an encryption algorithm group.","pos":[0,67]}]},{"pos":[5363,5483],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that can be used with the specified algorithm.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that can be used with the specified algorithm."},{"pos":[5495,5823],"content":"This overload creates a key without a name, which means that the key is ephemeral (that is, it will not be persisted). It also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"This overload creates a key without a name, which means that the key is ephemeral (that is, it will not be persisted). It also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key.","pos":[0,328],"nodes":[{"content":"This overload creates a key without a name, which means that the key is ephemeral (that is, it will not be persisted).","pos":[0,118]},{"content":"It also creates a default &lt;xref:System.Security.Cryptography.CngKeyCreationParameters&gt; object that specifies a default &lt;xref:System.Security.Cryptography.CngProvider&gt; and other advanced parameters for the key.","pos":[119,328],"source":" It also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key."}]}]},{"pos":[6068,6113],"content":"The algorithm that the key will be used with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm that the key will be used with.","pos":[0,45]}]},{"pos":[6193,6210],"content":"An ephemeral key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An ephemeral key.","pos":[0,17]}]},{"pos":[6383,6470],"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>algorithm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6589,6656],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[6805,6822],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[7350,7468],"content":"Creates a named <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides the specified algorithm.","needQuote":true,"needEscape":true,"source":"Creates a named <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that provides the specified algorithm."},{"pos":[7480,7822],"content":"If `keyName` is provided, this overload creates a persisted key. If `keyName` is not provided, the key will be ephemeral. This overload also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`keyName`</ph> is provided, this overload creates a persisted key.","pos":[0,64],"source":"If `keyName` is provided, this overload creates a persisted key."},{"content":"If <ph id=\"ph1\">`keyName`</ph> is not provided, the key will be ephemeral.","pos":[65,121],"source":" If `keyName` is not provided, the key will be ephemeral."},{"content":"This overload also creates a default &lt;xref:System.Security.Cryptography.CngKeyCreationParameters&gt; object that specifies a default &lt;xref:System.Security.Cryptography.CngProvider&gt; and other advanced parameters for the key.","pos":[122,342],"source":" This overload also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key."}]},{"pos":[8083,8128],"content":"The algorithm that the key will be used with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm that the key will be used with.","pos":[0,45]}]},{"pos":[8192,8263],"content":"The key name. If a name is not provided, the key will not be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key name. If a name is not provided, the key will not be persisted.","pos":[0,71],"nodes":[{"content":"The key name.","pos":[0,13]},{"content":"If a name is not provided, the key will not be persisted.","pos":[14,71]}]}]},{"pos":[8343,8410],"content":"A persisted or ephemeral key that provides the specified algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A persisted or ephemeral key that provides the specified algorithm.","pos":[0,67]}]},{"pos":[8583,8670],"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>algorithm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8789,8856],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[9005,9022],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[9733,9895],"content":"Creates a named <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides the specified algorithm, using the supplied key creation parameters.","needQuote":true,"needEscape":true,"source":"Creates a named <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that provides the specified algorithm, using the supplied key creation parameters."},{"pos":[9907,10028],"content":"If `keyName` is provided, this overload creates a persisted key. If `keyName` is not provided, the key will be ephemeral.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`keyName`</ph> is provided, this overload creates a persisted key.","pos":[0,64],"source":"If `keyName` is provided, this overload creates a persisted key."},{"content":"If <ph id=\"ph1\">`keyName`</ph> is not provided, the key will be ephemeral.","pos":[65,121],"source":" If `keyName` is not provided, the key will be ephemeral."}]},{"pos":[10363,10408],"content":"The algorithm that the key will be used with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm that the key will be used with.","pos":[0,45]}]},{"pos":[10472,10543],"content":"The key name. If a name is not provided, the key will not be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key name. If a name is not provided, the key will not be persisted.","pos":[0,71],"nodes":[{"content":"The key name.","pos":[0,13]},{"content":"If a name is not provided, the key will not be persisted.","pos":[14,71]}]}]},{"pos":[10658,10795],"content":"An object that specifies advanced parameters for the method, including the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that specifies advanced parameters for the method, including the <xref href=\"System.Security.Cryptography.CngProvider\"></xref>."},{"pos":[10875,10942],"content":"A persisted or ephemeral key that provides the specified algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A persisted or ephemeral key that provides the specified algorithm.","pos":[0,67]}]},{"pos":[11115,11202],"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>algorithm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11321,11388],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[11537,11554],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[11911,11962],"content":"Removes the key that is associated with the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the key that is associated with the object.","pos":[0,51]}]},{"pos":[11975,12228],"content":"-   When you call the Delete method on an ephemeral key, it closes the handle to the key.       When you call the Delete method on a named key, the <xref:System.Security.Cryptography.CngKey> object can no longer be used after the named key is deleted.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you call the Delete method on an ephemeral key, it closes the handle to the key.       When you call the Delete method on a named key, the <xref:System.Security.Cryptography.CngKey> object can no longer be used after the named key is deleted.","pos":[4,251],"nodes":[{"content":"When you call the Delete method on an ephemeral key, it closes the handle to the key.","pos":[0,85]},{"content":"When you call the Delete method on a named key, the &lt;xref:System.Security.Cryptography.CngKey&gt; object can no longer be used after the named key is deleted.","pos":[92,247],"source":"       When you call the Delete method on a named key, the <xref:System.Security.Cryptography.CngKey> object can no longer be used after the named key is deleted."}]}]},{"pos":[12471,12515],"content":"An attempt was made to access a deleted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to access a deleted key.","pos":[0,44]}]},{"pos":[12664,12681],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[13043,13165],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.CngKey\"></xref> class."},{"pos":[13178,14051],"content":"Call Dispose when you are finished using the <xref:System.Security.Cryptography.CngKey>. The Dispose method leaves the <xref:System.Security.Cryptography.CngKey> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Security.Cryptography.CngKey> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CngKey> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Security.Cryptography.CngKey>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CngKey> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call Dispose when you are finished using the &lt;xref:System.Security.Cryptography.CngKey&gt;.","pos":[0,88],"source":"Call Dispose when you are finished using the <xref:System.Security.Cryptography.CngKey>."},{"content":"The Dispose method leaves the &lt;xref:System.Security.Cryptography.CngKey&gt; in an unusable state.","pos":[89,183],"source":" The Dispose method leaves the <xref:System.Security.Cryptography.CngKey> in an unusable state."},{"content":"After calling Dispose, you must release all references to the &lt;xref:System.Security.Cryptography.CngKey&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.CngKey&gt; was occupying.","pos":[184,403],"source":" After calling Dispose, you must release all references to the <xref:System.Security.Cryptography.CngKey> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CngKey> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[404,578],"source":" For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Security.Cryptography.CngKey&gt;.","pos":[584,706],"source":"      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Security.Cryptography.CngKey>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.CngKey&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[707,870],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CngKey> object's `Finalize` method."}]},{"pos":[14597,14680],"content":"Checks to see whether a named key exists in the default key storage provider (KSP).","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks to see whether a named key exists in the default key storage provider (KSP).","pos":[0,83]}]},{"pos":[14692,14798],"content":"The default KSP is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default KSP is &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt;.","pos":[0,106],"source":"The default KSP is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>."}]},{"pos":[14945,14958],"content":"The key name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key name.","pos":[0,13]}]},{"pos":[15017,15196],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the named key exists in the default KSP; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named key exists in the default KSP; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15369,15454],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15573,15640],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[15789,15806],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[16329,16414],"content":"Checks to see whether a named key exists in the specified key storage provider (KSP).","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks to see whether a named key exists in the specified key storage provider (KSP).","pos":[0,85]}]},{"pos":[16426,16613],"content":"Use this overload to check for the existence of a key in a KSP other than the default KSP, which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this overload to check for the existence of a key in a KSP other than the default KSP, which is &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt;.","pos":[0,187],"source":"Use this overload to check for the existence of a key in a KSP other than the default KSP, which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>."}]},{"pos":[16811,16824],"content":"The key name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key name.","pos":[0,13]}]},{"pos":[16916,16945],"content":"The KSP to check for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KSP to check for the key.","pos":[0,29]}]},{"pos":[17004,17190],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the named key exists in the specified provider; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named key exists in the specified provider; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17363,17473],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;provider&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17592,17659],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[17808,17825],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[18496,18617],"content":"Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.","pos":[0,121]}]},{"pos":[18629,18835],"content":"Use this overload to check for the existence of a key in a KSP other than the default <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>, and to specify key open options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this overload to check for the existence of a key in a KSP other than the default &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt;, and to specify key open options.","pos":[0,206],"source":"Use this overload to check for the existence of a key in a KSP other than the default <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>, and to specify key open options."}]},{"pos":[19089,19102],"content":"The key name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key name.","pos":[0,13]}]},{"pos":[19194,19224],"content":"The KSP to search for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KSP to search for the key.","pos":[0,30]}]},{"pos":[19321,19408],"content":"A bitwise combination of the enumeration values that specify options for opening a key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that specify options for opening a key.","pos":[0,87]}]},{"pos":[19467,19653],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the named key exists in the specified provider; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named key exists in the specified provider; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19826,19936],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;provider&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20055,20122],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[20271,20288],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[20787,20849],"content":"Exports the key material into a BLOB, in the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exports the key material into a BLOB, in the specified format.","pos":[0,62]}]},{"pos":[20861,21508],"content":"Cryptography Next Generation (CNG) allows export in any format that the underlying key storage provider (KSP) supports. For example, on Windows Vista,the default KSP (which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) only allows export of private keys in the <xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>, <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>, and <xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> formats. This restriction is controlled by the underlying KSP. If you use a different KSP, other formats may apply.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) allows export in any format that the underlying key storage provider (KSP) supports. For example, on Windows Vista,the default KSP (which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) only allows export of private keys in the <xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>, <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>, and <xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> formats. This restriction is controlled by the underlying KSP. If you use a different KSP, other formats may apply.","pos":[0,647],"nodes":[{"content":"Cryptography Next Generation (CNG) allows export in any format that the underlying key storage provider (KSP) supports.","pos":[0,119]},{"content":"For example, on Windows Vista,the default KSP (which is &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt;) only allows export of private keys in the &lt;xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A&gt;, &lt;xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A&gt;, and &lt;xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A&gt; formats.","pos":[120,540],"source":" For example, on Windows Vista,the default KSP (which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) only allows export of private keys in the <xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>, <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>, and <xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> formats."},{"content":"This restriction is controlled by the underlying KSP.","pos":[541,594]},{"content":"If you use a different KSP, other formats may apply.","pos":[595,647]}]}]},{"pos":[21719,21771],"content":"An object that specifies the format of the key BLOB.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the format of the key BLOB.","pos":[0,52]}]},{"pos":[21829,21891],"content":"A BLOB that contains the key material in the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"A BLOB that contains the key material in the specified format.","pos":[0,62]}]},{"pos":[22064,22148],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22297,22425],"content":"All other errors. Typically, the <xref:System.Security.Cryptography.CngKey.ExportPolicy*> does not allow the key to be exported.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors. Typically, the <xref:System.Security.Cryptography.CngKey.ExportPolicy*> does not allow the key to be exported.","pos":[0,128],"nodes":[{"content":"All other errors.","pos":[0,17]},{"content":"Typically, the &lt;xref:System.Security.Cryptography.CngKey.ExportPolicy*&gt; does not allow the key to be exported.","pos":[18,128],"source":" Typically, the <xref:System.Security.Cryptography.CngKey.ExportPolicy*> does not allow the key to be exported."}]}]},{"pos":[22808,22855],"content":"Gets the export policy that is used by the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the export policy that is used by the key.","pos":[0,47]}]},{"pos":[22867,22938],"content":"The export policy controls the export frequency and format for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The export policy controls the export frequency and format for the key.","pos":[0,71]}]},{"pos":[23128,23183],"content":"An object that specifies the export policy for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the export policy for the key.","pos":[0,55]}]},{"pos":[23845,23905],"content":"Gets a property, given a name and a set of property options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a property, given a name and a set of property options.","pos":[0,60]}]},{"pos":[23918,25180],"content":"The purpose of this method is to return the value of an arbitrary property of the key. The typical way to retrieve properties is by using the property accessors provided by the <xref:System.Security.Cryptography.CngKey> class. <xref:System.Security.Cryptography.CngKey> provides wrappers for several, but not all, properties. The GetProperty method is primarily used to access the value of a property that is not wrapped.       This method is useful in the following cases:      -   A new version of the operating system supports a new Cryptography Next Generation (CNG) key property that does not have a wrapper.      -   You add a custom property to the key.       The `options` parameter is specifically used to indicate the following:      -   Whether the property is built-in, or custom.      -   Whether the property should be persisted with the key.       These options must match the value that the property was set with, or the property will not be found.       <xref:System.Security.Cryptography.CryptographicException> is thrown if the property cannot be found. You should call the <xref:System.Security.Cryptography.CngKey.HasProperty%2A> method first to avoid the exception instead of wrapping the method call in a `try/catch` block.","needQuote":false,"needEscape":true,"nodes":[{"content":"The purpose of this method is to return the value of an arbitrary property of the key.","pos":[0,86]},{"content":"The typical way to retrieve properties is by using the property accessors provided by the &lt;xref:System.Security.Cryptography.CngKey&gt; class.","pos":[87,226],"source":" The typical way to retrieve properties is by using the property accessors provided by the <xref:System.Security.Cryptography.CngKey> class."},{"content":"&lt;xref:System.Security.Cryptography.CngKey&gt; provides wrappers for several, but not all, properties.","pos":[227,325],"source":" <xref:System.Security.Cryptography.CngKey> provides wrappers for several, but not all, properties."},{"content":"The GetProperty method is primarily used to access the value of a property that is not wrapped.","pos":[326,421]},{"content":"This method is useful in the following cases:      -   A new version of the operating system supports a new Cryptography Next Generation (CNG) key property that does not have a wrapper.","pos":[428,613]},{"content":"-   You add a custom property to the key.","pos":[619,660]},{"content":"The <ph id=\"ph1\">`options`</ph> parameter is specifically used to indicate the following:      -   Whether the property is built-in, or custom.","pos":[667,792],"source":"       The `options` parameter is specifically used to indicate the following:      -   Whether the property is built-in, or custom."},{"content":"-   Whether the property should be persisted with the key.","pos":[798,856]},{"content":"These options must match the value that the property was set with, or the property will not be found.","pos":[863,964]},{"content":"&lt;xref:System.Security.Cryptography.CryptographicException&gt; is thrown if the property cannot be found.","pos":[971,1072],"source":"       <xref:System.Security.Cryptography.CryptographicException> is thrown if the property cannot be found."},{"content":"You should call the &lt;xref:System.Security.Cryptography.CngKey.HasProperty%2A&gt; method first to avoid the exception instead of wrapping the method call in a <ph id=\"ph1\">`try/catch`</ph> block.","pos":[1073,1246],"source":" You should call the <xref:System.Security.Cryptography.CngKey.HasProperty%2A> method first to avoid the exception instead of wrapping the method call in a `try/catch` block."}]},{"pos":[25413,25446],"content":"The name of the desired property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the desired property.","pos":[0,33]}]},{"pos":[25544,25636],"content":"A bitwise combination of the enumeration values that specify options for the named property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that specify options for the named property.","pos":[0,92]}]},{"pos":[25721,25785],"content":"An object that contains the raw value of the specified property.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the raw value of the specified property.","pos":[0,64]}]},{"pos":[25963,26045],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[26194,26211],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[26564,26632],"content":"Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE).","pos":[0,68]}]},{"pos":[26645,26987],"content":"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object. It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately.       You can release the current object and the handle in any order without any adverse effects.","needQuote":false,"needEscape":true,"nodes":[{"content":"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object. It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately.       You can release the current object and the handle in any order without any adverse effects.","pos":[0,340],"nodes":[{"content":"The returned handle is a duplicate of the handle in the current &lt;xref:System.Security.Cryptography.CngKey&gt; object.","pos":[0,114],"source":"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object."},{"content":"It will persist even if the current &lt;xref:System.Security.Cryptography.CngKey&gt; is disposed, and must be disposed of separately.","pos":[115,242],"source":" It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately."},{"content":"You can release the current object and the handle in any order without any adverse effects.","pos":[249,340]}]}]},{"pos":[27174,27212],"content":"A safe handle that represents the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A safe handle that represents the key.","pos":[0,38]}]},{"pos":[27868,27931],"content":"Checks to see whether the specified property exists on the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks to see whether the specified property exists on the key.","pos":[0,63]}]},{"pos":[27944,28334],"content":"The `options` parameter is specifically used to indicate the following:      -   Whether the property is built-in, or custom.      -   Whether the property should be persisted with the key.       These options must match the value that the property was set with, or the property will not be found.       This method operates correctly even if the property is set to `false` or zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`options`</ph> parameter is specifically used to indicate the following:      -   Whether the property is built-in, or custom.","pos":[0,125],"source":"The `options` parameter is specifically used to indicate the following:      -   Whether the property is built-in, or custom."},{"content":"-   Whether the property should be persisted with the key.","pos":[131,189]},{"content":"These options must match the value that the property was set with, or the property will not be found.","pos":[196,297]},{"content":"This method operates correctly even if the property is set to <ph id=\"ph1\">`false`</ph> or zero.","pos":[304,382],"source":"       This method operates correctly even if the property is set to `false` or zero."}]},{"pos":[28531,28558],"content":"The property name to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property name to check.","pos":[0,27]}]},{"pos":[28656,28748],"content":"A bitwise combination of the enumeration values that specify options for the named property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that specify options for the named property.","pos":[0,92]}]},{"pos":[28807,28978],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified property is found; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified property is found; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[29156,29238],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[29786,29919],"content":"Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.","pos":[0,133]}]},{"pos":[29932,30205],"content":"The default KSP is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.      > [!IMPORTANT] >  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default KSP is &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt;.","pos":[0,106],"source":"The default KSP is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.","pos":[112,270],"source":"      > [!IMPORTANT] >  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported."}]},{"pos":[30438,30481],"content":"An array that contains the key information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the key information.","pos":[0,43]}]},{"pos":[30576,30635],"content":"An object that specifies the format of the <ph id=\"ph1\">`keyBlob`</ph> array.","needQuote":true,"needEscape":true,"source":"An object that specifies the format of the `keyBlob` array."},{"pos":[30715,30725],"content":"A new key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new key.","pos":[0,10]}]},{"pos":[30898,31006],"content":"<ph id=\"ph1\">&lt;code&gt;keyBlob&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyBlob</code> or <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[31125,31192],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[31341,31358],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[32024,32156],"content":"Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.","pos":[0,132]}]},{"pos":[32621,32664],"content":"An array that contains the key information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the key information.","pos":[0,43]}]},{"pos":[32759,32818],"content":"An object that specifies the format of the <ph id=\"ph1\">`keyBlob`</ph> array.","needQuote":true,"needEscape":true,"source":"An object that specifies the format of the `keyBlob` array."},{"pos":[32910,32918],"content":"The KSP.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KSP.","pos":[0,8]}]},{"pos":[32998,33008],"content":"A new key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new key.","pos":[0,10]}]},{"pos":[33181,33313],"content":"<ph id=\"ph1\">&lt;code&gt;keyBlob&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;format&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;provider&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyBlob</code>, <code>format</code>, or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[33432,33499],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[33648,33665],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[34043,34081],"content":"Gets the persistence state of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the persistence state of the key.","pos":[0,38]}]},{"pos":[34094,35196],"content":"This property determines whether the key is ephemeral (that is, the key exists only for the lifetime of the handle), or persisted (that is, the key exists independently of the handle).       The return value depends on the method that is used to obtain the key:      -   If the key was not opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the common language runtime (CLR) is managing the key and can determine whether it is ephemeral.      -   If the key was opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the CLR cannot determine whether it is ephemeral. Therefore, the key is assumed to be persisted. However, if this method is used to open a handle to a key that is created by the CLR, the CLR will be able to determine whether it is ephemeral.       This property does not have a public setter; it is read-only.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property determines whether the key is ephemeral (that is, the key exists only for the lifetime of the handle), or persisted (that is, the key exists independently of the handle).       The return value depends on the method that is used to obtain the key:      -   If the key was not opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the common language runtime (CLR) is managing the key and can determine whether it is ephemeral.      -   If the key was opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the CLR cannot determine whether it is ephemeral. Therefore, the key is assumed to be persisted. However, if this method is used to open a handle to a key that is created by the CLR, the CLR will be able to determine whether it is ephemeral.       This property does not have a public setter; it is read-only.","pos":[0,1094],"nodes":[{"content":"This property determines whether the key is ephemeral (that is, the key exists only for the lifetime of the handle), or persisted (that is, the key exists independently of the handle).","pos":[0,184]},{"content":"The return value depends on the method that is used to obtain the key:      -   If the key was not opened by the &lt;xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29&gt; method overload, the common language runtime (CLR) is managing the key and can determine whether it is ephemeral.","pos":[191,573],"source":"       The return value depends on the method that is used to obtain the key:      -   If the key was not opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the common language runtime (CLR) is managing the key and can determine whether it is ephemeral."},{"content":"-   If the key was opened by the &lt;xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29&gt; method overload, the CLR cannot determine whether it is ephemeral.","pos":[579,834],"source":"      -   If the key was opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the CLR cannot determine whether it is ephemeral."},{"content":"Therefore, the key is assumed to be persisted.","pos":[835,881]},{"content":"However, if this method is used to open a handle to a key that is created by the CLR, the CLR will be able to determine whether it is ephemeral.","pos":[882,1026]},{"content":"This property does not have a public setter; it is read-only.","pos":[1033,1094]}]}]},{"pos":[35312,35472],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key is ephemeral; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key is ephemeral; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[35933,35977],"content":"Gets the scope (machine or user) of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the scope (machine or user) of the key.","pos":[0,44]}]},{"pos":[36093,36306],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key is available on a machine-wide basis; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the key is only for the current user.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key is available on a machine-wide basis; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the key is only for the current user."},{"pos":[36743,36768],"content":"Gets the name of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the key.","pos":[0,25]}]},{"pos":[36880,37000],"content":"The name of the key. If the key is ephemeral, the value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key.","pos":[0,20]},{"content":"If the key is ephemeral, the value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,120],"source":" If the key is ephemeral, the value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[37432,37458],"content":"Gets the key size in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key size in bits.","pos":[0,26]}]},{"pos":[37566,37587],"content":"The key size in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key size in bits.","pos":[0,21]}]},{"pos":[38024,38079],"content":"Gets the cryptographic operations specified by the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the cryptographic operations specified by the key.","pos":[0,55]}]},{"pos":[38255,38347],"content":"A bitwise combination of the enumeration values that specify the usages allowed for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that specify the usages allowed for the key.","pos":[0,92]}]},{"pos":[38817,38945],"content":"Creates an instance of an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents an existing named key.","needQuote":true,"needEscape":true,"source":"Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that represents an existing named key."},{"pos":[38958,39399],"content":"This overload uses the following defaults:      -   Key storage provider (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>. Use the <xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29> overload if you want to specify another KSP.      -   Key open options: <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This overload uses the following defaults:      -   Key storage provider (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>. Use the <xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29> overload if you want to specify another KSP.      -   Key open options: <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>.","pos":[0,437],"nodes":[{"content":"This overload uses the following defaults:      -   Key storage provider (KSP): &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt;.","pos":[0,167],"source":"This overload uses the following defaults:      -   Key storage provider (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>."},{"content":"Use the &lt;xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29&gt; overload if you want to specify another KSP.","pos":[168,330],"source":" Use the <xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29> overload if you want to specify another KSP."},{"content":"-   Key open options: &lt;xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName&gt;.","pos":[336,437],"source":"      -   Key open options: <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>."}]}]},{"pos":[39576,39596],"content":"The name of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key.","pos":[0,20]}]},{"pos":[39676,39692],"content":"An existing key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An existing key.","pos":[0,16]}]},{"pos":[39863,39948],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[40067,40134],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[40283,40300],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[40980,41107],"content":"Creates an instance of an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object by using a handle to an existing key.","needQuote":true,"needEscape":true,"source":"Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object by using a handle to an existing key."},{"pos":[41120,41811],"content":"This overload enables advanced users to use the CNG classes even if they rely on platform invoke or the managed interop capability of C++. For example, if you have a native library that returns the key as an NCRYPT_KEY_HANDLE, this overload lets you create a managed wrapper around the key and use the CNG classes to manipulate it.       When you open a key by using its handle, you cannot determine the key's ephemeral state and must specify it yourself. Several properties of the <xref:System.Security.Cryptography.CngKey> class rely on this value to be correct. Therefore, make sure that you pass the correct flag value to the <xref:System.Security.Cryptography.CngKey.Open%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"This overload enables advanced users to use the CNG classes even if they rely on platform invoke or the managed interop capability of C++. For example, if you have a native library that returns the key as an NCRYPT_KEY_HANDLE, this overload lets you create a managed wrapper around the key and use the CNG classes to manipulate it.       When you open a key by using its handle, you cannot determine the key's ephemeral state and must specify it yourself. Several properties of the <xref:System.Security.Cryptography.CngKey> class rely on this value to be correct. Therefore, make sure that you pass the correct flag value to the <xref:System.Security.Cryptography.CngKey.Open%2A> methods.","pos":[0,689],"nodes":[{"content":"This overload enables advanced users to use the CNG classes even if they rely on platform invoke or the managed interop capability of C++.","pos":[0,138]},{"content":"For example, if you have a native library that returns the key as an NCRYPT_KEY_HANDLE, this overload lets you create a managed wrapper around the key and use the CNG classes to manipulate it.","pos":[139,331]},{"content":"When you open a key by using its handle, you cannot determine the key's ephemeral state and must specify it yourself.","pos":[338,455]},{"content":"Several properties of the &lt;xref:System.Security.Cryptography.CngKey&gt; class rely on this value to be correct.","pos":[456,564],"source":" Several properties of the <xref:System.Security.Cryptography.CngKey> class rely on this value to be correct."},{"content":"Therefore, make sure that you pass the correct flag value to the &lt;xref:System.Security.Cryptography.CngKey.Open%2A&gt; methods.","pos":[565,689],"source":" Therefore, make sure that you pass the correct flag value to the <xref:System.Security.Cryptography.CngKey.Open%2A> methods."}]}]},{"pos":[42142,42170],"content":"A handle to an existing key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A handle to an existing key.","pos":[0,28]}]},{"pos":[42286,42394],"content":"One of the enumeration values that indicates whether <ph id=\"ph1\">`keyHandle`</ph> represents an ephemeral key or a named key.","needQuote":true,"needEscape":true,"source":"One of the enumeration values that indicates whether `keyHandle` represents an ephemeral key or a named key."},{"pos":[42474,42490],"content":"An existing key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An existing key.","pos":[0,16]}]},{"pos":[42661,42748],"content":"<ph id=\"ph1\">&lt;code&gt;keyHandle&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyHandle</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[42843,43136],"content":"<code>keyHandle</code> is invalid or malformed, or it is already closed. This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <xref href=\"System.Security.Cryptography.CngKeyHandleOpenOptions\"></xref> value is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;keyHandle&lt;/code&gt;</ph> is invalid or malformed, or it is already closed.","pos":[0,72],"source":"<code>keyHandle</code> is invalid or malformed, or it is already closed."},{"content":"This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKeyHandleOpenOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value is not specified.","pos":[73,293],"source":" This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <xref href=\"System.Security.Cryptography.CngKeyHandleOpenOptions\"></xref> value is not specified."}]},{"pos":[43255,43322],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[43471,43488],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[44001,44177],"content":"Creates an instance of an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents an existing named key, using the specified key storage provider (KSP).","needQuote":true,"needEscape":true,"source":"Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that represents an existing named key, using the specified key storage provider (KSP)."},{"pos":[44189,44501],"content":"Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify the provider. In addition, a default <xref:System.Security.Cryptography.CngKeyOpenOptions> value of <xref:System.Security.Cryptography.CngKeyOpenOptions> is created and bound to the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify the provider. In addition, a default <xref:System.Security.Cryptography.CngKeyOpenOptions> value of <xref:System.Security.Cryptography.CngKeyOpenOptions> is created and bound to the key.","pos":[0,312],"nodes":[{"content":"Unlike the &lt;xref:System.Security.Cryptography.CngKey.Open%28System.String%29&gt; method overload, this overload lets you specify the provider.","pos":[0,139],"source":"Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify the provider."},{"content":"In addition, a default &lt;xref:System.Security.Cryptography.CngKeyOpenOptions&gt; value of &lt;xref:System.Security.Cryptography.CngKeyOpenOptions&gt; is created and bound to the key.","pos":[140,312],"source":" In addition, a default <xref:System.Security.Cryptography.CngKeyOpenOptions> value of <xref:System.Security.Cryptography.CngKeyOpenOptions> is created and bound to the key."}]}]},{"pos":[44728,44748],"content":"The name of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key.","pos":[0,20]}]},{"pos":[44840,44870],"content":"The KSP that contains the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KSP that contains the key.","pos":[0,30]}]},{"pos":[44950,44966],"content":"An existing key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An existing key.","pos":[0,16]}]},{"pos":[45137,45247],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;provider&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[45366,45433],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[45582,45599],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[46260,46457],"content":"Creates an instance of an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents an existing named key, using the specified key storage provider (KSP) and key open options.","needQuote":true,"needEscape":true,"source":"Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that represents an existing named key, using the specified key storage provider (KSP) and key open options."},{"pos":[46469,46638],"content":"Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify both the provider and the key open options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unlike the &lt;xref:System.Security.Cryptography.CngKey.Open%28System.String%29&gt; method overload, this overload lets you specify both the provider and the key open options.","pos":[0,169],"source":"Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify both the provider and the key open options."}]},{"pos":[46925,46945],"content":"The name of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key.","pos":[0,20]}]},{"pos":[47037,47067],"content":"The KSP that contains the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KSP that contains the key.","pos":[0,30]}]},{"pos":[47168,47358],"content":"A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.","pos":[0,190]}]},{"pos":[47438,47454],"content":"An existing key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An existing key.","pos":[0,16]}]},{"pos":[47625,47735],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;provider&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[47854,47921],"content":"Cryptography Next Generation (CNG) is not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) is not supported on this system.","pos":[0,67]}]},{"pos":[48070,48087],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[48500,48618],"content":"Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.","pos":[0,118]}]},{"pos":[48631,48920],"content":"The parent window handle for the key is used in UI prompts, such as smart card PIN prompts. This value is not persisted with persisted keys.       We recommend that you always set this property for keys that display a user interface. Do not use the default value of `null` for such keys.","needQuote":false,"needEscape":true,"nodes":[{"content":"The parent window handle for the key is used in UI prompts, such as smart card PIN prompts.","pos":[0,91]},{"content":"This value is not persisted with persisted keys.","pos":[92,140]},{"content":"We recommend that you always set this property for keys that display a user interface.","pos":[147,233]},{"content":"Do not use the default value of <ph id=\"ph1\">`null`</ph> for such keys.","pos":[234,287],"source":" Do not use the default value of `null` for such keys."}]},{"pos":[49049,49086],"content":"The parent window handle for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parent window handle for the key.","pos":[0,37]}]},{"pos":[49534,49591],"content":"Gets the key storage provider (KSP) that manages the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key storage provider (KSP) that manages the key.","pos":[0,57]}]},{"pos":[49765,49794],"content":"The KSP that manages the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KSP that manages the key.","pos":[0,29]}]},{"pos":[50262,50341],"content":"Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).","pos":[0,79]}]},{"pos":[50354,50696],"content":"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object. It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately.       You can release the current object and the handle in any order without any adverse effects.","needQuote":false,"needEscape":true,"nodes":[{"content":"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object. It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately.       You can release the current object and the handle in any order without any adverse effects.","pos":[0,340],"nodes":[{"content":"The returned handle is a duplicate of the handle in the current &lt;xref:System.Security.Cryptography.CngKey&gt; object.","pos":[0,114],"source":"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object."},{"content":"It will persist even if the current &lt;xref:System.Security.Cryptography.CngKey&gt; is disposed, and must be disposed of separately.","pos":[115,242],"source":" It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately."},{"content":"You can release the current object and the handle in any order without any adverse effects.","pos":[249,340]}]}]},{"pos":[50901,50921],"content":"A handle to the KSP.","needQuote":true,"needEscape":true,"nodes":[{"content":"A handle to the KSP.","pos":[0,20]}]},{"pos":[51501,51534],"content":"Sets a named property on the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets a named property on the key.","pos":[0,33]}]},{"pos":[51546,51907],"content":"This method enables you to add a new custom property to an existing key by using a <xref:System.Security.Cryptography.CngProperty> object. The options set on the <xref:System.Security.Cryptography.CngProperty> object must exactly match the options in the <xref:System.Security.Cryptography.CngKey.GetProperty%2A> call. Otherwise, the property will not be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method enables you to add a new custom property to an existing key by using a <xref:System.Security.Cryptography.CngProperty> object. The options set on the <xref:System.Security.Cryptography.CngProperty> object must exactly match the options in the <xref:System.Security.Cryptography.CngKey.GetProperty%2A> call. Otherwise, the property will not be found.","pos":[0,361],"nodes":[{"content":"This method enables you to add a new custom property to an existing key by using a &lt;xref:System.Security.Cryptography.CngProperty&gt; object.","pos":[0,138],"source":"This method enables you to add a new custom property to an existing key by using a <xref:System.Security.Cryptography.CngProperty> object."},{"content":"The options set on the &lt;xref:System.Security.Cryptography.CngProperty&gt; object must exactly match the options in the &lt;xref:System.Security.Cryptography.CngKey.GetProperty%2A&gt; call.","pos":[139,318],"source":" The options set on the <xref:System.Security.Cryptography.CngProperty> object must exactly match the options in the <xref:System.Security.Cryptography.CngKey.GetProperty%2A> call."},{"content":"Otherwise, the property will not be found.","pos":[319,361]}]}]},{"pos":[52115,52139],"content":"The key property to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key property to set.","pos":[0,24]}]},{"pos":[52580,52655],"content":"Gets parameters that control the user interface (UI) for accessing the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets parameters that control the user interface (UI) for accessing the key.","pos":[0,75]}]},{"pos":[52667,52808],"content":"The key UI policy is used with UI prompts such as smart card PIN prompts. This policy also controls password dialog boxes for protected keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key UI policy is used with UI prompts such as smart card PIN prompts. This policy also controls password dialog boxes for protected keys.","pos":[0,141],"nodes":[{"content":"The key UI policy is used with UI prompts such as smart card PIN prompts.","pos":[0,73]},{"content":"This policy also controls password dialog boxes for protected keys.","pos":[74,141]}]}]},{"pos":[52982,53053],"content":"An object that contains configuration parameters for displaying the UI.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains configuration parameters for displaying the UI.","pos":[0,71]}]},{"pos":[53501,53534],"content":"Gets the unique name for the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the unique name for the key.","pos":[0,33]}]},{"pos":[53546,54017],"content":"This property gets an alternate name that can be used when accessing the key. You can use this property if the original key name does not uniquely identify the persisted key. The <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> property will return the file name of the key as this property. The name returned by the <xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A> is implementation-dependent.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property gets an alternate name that can be used when accessing the key. You can use this property if the original key name does not uniquely identify the persisted key. The <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> property will return the file name of the key as this property. The name returned by the <xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A> is implementation-dependent.","pos":[0,471],"nodes":[{"content":"This property gets an alternate name that can be used when accessing the key.","pos":[0,77]},{"content":"You can use this property if the original key name does not uniquely identify the persisted key.","pos":[78,174]},{"content":"The &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A&gt; property will return the file name of the key as this property.","pos":[175,329],"source":" The <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> property will return the file name of the key as this property."},{"content":"The name returned by the &lt;xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A&gt; is implementation-dependent.","pos":[330,471],"source":" The name returned by the <xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A> is implementation-dependent."}]}]},{"pos":[54132,54262],"content":"An alternate name for the key. If the key is ephemeral, the value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An alternate name for the key.","pos":[0,30]},{"content":"If the key is ephemeral, the value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[31,130],"source":" If the key is ephemeral, the value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.CngKey\n  id: CngKey\n  children:\n  - System.Security.Cryptography.CngKey.Algorithm\n  - System.Security.Cryptography.CngKey.AlgorithmGroup\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  - System.Security.Cryptography.CngKey.Delete\n  - System.Security.Cryptography.CngKey.Dispose\n  - System.Security.Cryptography.CngKey.Exists(System.String)\n  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKey.ExportPolicy\n  - System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngKey.Handle\n  - System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.IsEphemeral\n  - System.Security.Cryptography.CngKey.IsMachineKey\n  - System.Security.Cryptography.CngKey.KeyName\n  - System.Security.Cryptography.CngKey.KeySize\n  - System.Security.Cryptography.CngKey.KeyUsage\n  - System.Security.Cryptography.CngKey.Open(System.String)\n  - System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.CngKey.ParentWindowHandle\n  - System.Security.Cryptography.CngKey.Provider\n  - System.Security.Cryptography.CngKey.ProviderHandle\n  - System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  - System.Security.Cryptography.CngKey.UIPolicy\n  - System.Security.Cryptography.CngKey.UniqueName\n  langs:\n  - csharp\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n  type: Class\n  summary: Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.\n  remarks: This class wraps NCrypt keys, not BCrypt keys. NCrypt is a subset of CNG that provides key storage functionality. BCrypt is a subset that provides base cryptographic services such as random number generation, hash functions, signatures, and encryption keys.\n  syntax:\n    content: 'public sealed class CngKey : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Algorithm\n  id: Algorithm\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Algorithm\n  nameWithType: CngKey.Algorithm\n  fullName: System.Security.Cryptography.CngKey.Algorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the algorithm that is used by the key.\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithm Algorithm { get; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: An object that specifies the name of an encryption algorithm.\n  overload: System.Security.Cryptography.CngKey.Algorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.AlgorithmGroup\n  id: AlgorithmGroup\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: AlgorithmGroup\n  nameWithType: CngKey.AlgorithmGroup\n  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the algorithm group that is used by the key.\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithmGroup AlgorithmGroup { get; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: An object that specifies the name of an encryption algorithm group.\n  overload: System.Security.Cryptography.CngKey.AlgorithmGroup*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  id: Create(System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Create(CngAlgorithm)\n  nameWithType: CngKey.Create(CngAlgorithm)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that can be used with the specified algorithm.\n  remarks: This overload creates a key without a name, which means that the key is ephemeral (that is, it will not be persisted). It also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key.\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm);\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: The algorithm that the key will be used with.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An ephemeral key.\n  overload: System.Security.Cryptography.CngKey.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>algorithm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  id: Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Create(CngAlgorithm,String)\n  nameWithType: CngKey.Create(CngAlgorithm,String)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a named <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that provides the specified algorithm.\n  remarks: If `keyName` is provided, this overload creates a persisted key. If `keyName` is not provided, the key will be ephemeral. This overload also creates a default <xref:System.Security.Cryptography.CngKeyCreationParameters> object that specifies a default <xref:System.Security.Cryptography.CngProvider> and other advanced parameters for the key.\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName);\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: The algorithm that the key will be used with.\n    - id: keyName\n      type: System.String\n      description: The key name. If a name is not provided, the key will not be persisted.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: A persisted or ephemeral key that provides the specified algorithm.\n  overload: System.Security.Cryptography.CngKey.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>algorithm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  id: Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Create(CngAlgorithm,String,CngKeyCreationParameters)\n  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a named <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that provides the specified algorithm, using the supplied key creation parameters.\n  remarks: If `keyName` is provided, this overload creates a persisted key. If `keyName` is not provided, the key will be ephemeral.\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName, System.Security.Cryptography.CngKeyCreationParameters creationParameters);\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: The algorithm that the key will be used with.\n    - id: keyName\n      type: System.String\n      description: The key name. If a name is not provided, the key will not be persisted.\n    - id: creationParameters\n      type: System.Security.Cryptography.CngKeyCreationParameters\n      description: An object that specifies advanced parameters for the method, including the <xref href=\"System.Security.Cryptography.CngProvider\"></xref>.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: A persisted or ephemeral key that provides the specified algorithm.\n  overload: System.Security.Cryptography.CngKey.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>algorithm</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Delete\n  id: Delete\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Delete()\n  nameWithType: CngKey.Delete()\n  fullName: System.Security.Cryptography.CngKey.Delete()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Removes the key that is associated with the object.\n  remarks: \"-   When you call the Delete method on an ephemeral key, it closes the handle to the key.  \\n  \\n When you call the Delete method on a named key, the <xref:System.Security.Cryptography.CngKey> object can no longer be used after the named key is deleted.\"\n  syntax:\n    content: public void Delete ();\n    parameters: []\n  overload: System.Security.Cryptography.CngKey.Delete*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to access a deleted key.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CngKey.Dispose()\n  fullName: System.Security.Cryptography.CngKey.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.CngKey\"></xref> class.\n  remarks: \"Call Dispose when you are finished using the <xref:System.Security.Cryptography.CngKey>. The Dispose method leaves the <xref:System.Security.Cryptography.CngKey> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Security.Cryptography.CngKey> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CngKey> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call Dispose before you release your last reference to the <xref:System.Security.Cryptography.CngKey>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CngKey> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.CngKey.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Exists(System.String)\n  id: Exists(System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Exists(String)\n  nameWithType: CngKey.Exists(String)\n  fullName: System.Security.Cryptography.CngKey.Exists(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Checks to see whether a named key exists in the default key storage provider (KSP).\n  remarks: The default KSP is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.\n  syntax:\n    content: public static bool Exists (string keyName);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The key name.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named key exists in the default KSP; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.Exists*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  id: Exists(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Exists(String,CngProvider)\n  nameWithType: CngKey.Exists(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Checks to see whether a named key exists in the specified key storage provider (KSP).\n  remarks: Use this overload to check for the existence of a key in a KSP other than the default KSP, which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.\n  syntax:\n    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The key name.\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: The KSP to check for the key.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named key exists in the specified provider; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.Exists*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Exists(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.\n  remarks: Use this overload to check for the existence of a key in a KSP other than the default <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>, and to specify key open options.\n  syntax:\n    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions options);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The key name.\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: The KSP to search for the key.\n    - id: options\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: A bitwise combination of the enumeration values that specify options for opening a key.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the named key exists in the specified provider; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.Exists*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  id: Export(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Export(CngKeyBlobFormat)\n  nameWithType: CngKey.Export(CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Exports the key material into a BLOB, in the specified format.\n  remarks: Cryptography Next Generation (CNG) allows export in any format that the underlying key storage provider (KSP) supports. For example, on Windows Vista,the default KSP (which is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) only allows export of private keys in the <xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>, <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>, and <xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> formats. This restriction is controlled by the underlying KSP. If you use a different KSP, other formats may apply.\n  syntax:\n    content: public byte[] Export (System.Security.Cryptography.CngKeyBlobFormat format);\n    parameters:\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: An object that specifies the format of the key BLOB.\n    return:\n      type: System.Byte[]\n      description: A BLOB that contains the key material in the specified format.\n  overload: System.Security.Cryptography.CngKey.Export*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors. Typically, the <xref:System.Security.Cryptography.CngKey.ExportPolicy*> does not allow the key to be exported.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.ExportPolicy\n  id: ExportPolicy\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: ExportPolicy\n  nameWithType: CngKey.ExportPolicy\n  fullName: System.Security.Cryptography.CngKey.ExportPolicy\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the export policy that is used by the key.\n  remarks: The export policy controls the export frequency and format for the key.\n  syntax:\n    content: public System.Security.Cryptography.CngExportPolicies ExportPolicy { get; }\n    return:\n      type: System.Security.Cryptography.CngExportPolicies\n      description: An object that specifies the export policy for the key.\n  overload: System.Security.Cryptography.CngKey.ExportPolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  id: GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: GetProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a property, given a name and a set of property options.\n  remarks: \"The purpose of this method is to return the value of an arbitrary property of the key. The typical way to retrieve properties is by using the property accessors provided by the <xref:System.Security.Cryptography.CngKey> class. <xref:System.Security.Cryptography.CngKey> provides wrappers for several, but not all, properties. The GetProperty method is primarily used to access the value of a property that is not wrapped.  \\n  \\n This method is useful in the following cases:  \\n  \\n-   A new version of the operating system supports a new Cryptography Next Generation (CNG) key property that does not have a wrapper.  \\n  \\n-   You add a custom property to the key.  \\n  \\n The `options` parameter is specifically used to indicate the following:  \\n  \\n-   Whether the property is built-in, or custom.  \\n  \\n-   Whether the property should be persisted with the key.  \\n  \\n These options must match the value that the property was set with, or the property will not be found.  \\n  \\n <xref:System.Security.Cryptography.CryptographicException> is thrown if the property cannot be found. You should call the <xref:System.Security.Cryptography.CngKey.HasProperty%2A> method first to avoid the exception instead of wrapping the method call in a `try/catch` block.\"\n  syntax:\n    content: public System.Security.Cryptography.CngProperty GetProperty (string name, System.Security.Cryptography.CngPropertyOptions options);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the desired property.\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: A bitwise combination of the enumeration values that specify options for the named property.\n    return:\n      type: System.Security.Cryptography.CngProperty\n      description: An object that contains the raw value of the specified property.\n  overload: System.Security.Cryptography.CngKey.GetProperty*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Handle\n  id: Handle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: CngKey.Handle\n  fullName: System.Security.Cryptography.CngKey.Handle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE).\n  remarks: \"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object. It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately.  \\n  \\n You can release the current object and the handle in any order without any adverse effects.\"\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n      description: A safe handle that represents the key.\n  overload: System.Security.Cryptography.CngKey.Handle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  id: HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: HasProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Checks to see whether the specified property exists on the key.\n  remarks: \"The `options` parameter is specifically used to indicate the following:  \\n  \\n-   Whether the property is built-in, or custom.  \\n  \\n-   Whether the property should be persisted with the key.  \\n  \\n These options must match the value that the property was set with, or the property will not be found.  \\n  \\n This method operates correctly even if the property is set to `false` or zero.\"\n  syntax:\n    content: public bool HasProperty (string name, System.Security.Cryptography.CngPropertyOptions options);\n    parameters:\n    - id: name\n      type: System.String\n      description: The property name to check.\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: A bitwise combination of the enumeration values that specify options for the named property.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified property is found; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.HasProperty*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Import(Byte[],CngKeyBlobFormat)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.\n  remarks: \"The default KSP is <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.  \\n  \\n> [!IMPORTANT]\\n>  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.\"\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: An array that contains the key information.\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: An object that specifies the format of the `keyBlob` array.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: A new key.\n  overload: System.Security.Cryptography.CngKey.Import*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyBlob</code> or <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Import(Byte[],CngKeyBlobFormat,CngProvider)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format, System.Security.Cryptography.CngProvider provider);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: An array that contains the key information.\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: An object that specifies the format of the `keyBlob` array.\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: The KSP.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: A new key.\n  overload: System.Security.Cryptography.CngKey.Import*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyBlob</code>, <code>format</code>, or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.IsEphemeral\n  id: IsEphemeral\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: IsEphemeral\n  nameWithType: CngKey.IsEphemeral\n  fullName: System.Security.Cryptography.CngKey.IsEphemeral\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the persistence state of the key.\n  remarks: \"This property determines whether the key is ephemeral (that is, the key exists only for the lifetime of the handle), or persisted (that is, the key exists independently of the handle).  \\n  \\n The return value depends on the method that is used to obtain the key:  \\n  \\n-   If the key was not opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the common language runtime (CLR) is managing the key and can determine whether it is ephemeral.  \\n  \\n-   If the key was opened by the <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> method overload, the CLR cannot determine whether it is ephemeral. Therefore, the key is assumed to be persisted. However, if this method is used to open a handle to a key that is created by the CLR, the CLR will be able to determine whether it is ephemeral.  \\n  \\n This property does not have a public setter; it is read-only.\"\n  syntax:\n    content: public bool IsEphemeral { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key is ephemeral; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.IsEphemeral*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.IsMachineKey\n  id: IsMachineKey\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: IsMachineKey\n  nameWithType: CngKey.IsMachineKey\n  fullName: System.Security.Cryptography.CngKey.IsMachineKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the scope (machine or user) of the key.\n  syntax:\n    content: public bool IsMachineKey { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key is available on a machine-wide basis; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the key is only for the current user.\n  overload: System.Security.Cryptography.CngKey.IsMachineKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.KeyName\n  id: KeyName\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: KeyName\n  nameWithType: CngKey.KeyName\n  fullName: System.Security.Cryptography.CngKey.KeyName\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key.\n  syntax:\n    content: public string KeyName { get; }\n    return:\n      type: System.String\n      description: The name of the key. If the key is ephemeral, the value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.KeyName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: CngKey.KeySize\n  fullName: System.Security.Cryptography.CngKey.KeySize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the key size in bits.\n  syntax:\n    content: public int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The key size in bits.\n  overload: System.Security.Cryptography.CngKey.KeySize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.KeyUsage\n  id: KeyUsage\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: KeyUsage\n  nameWithType: CngKey.KeyUsage\n  fullName: System.Security.Cryptography.CngKey.KeyUsage\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the cryptographic operations specified by the key.\n  syntax:\n    content: public System.Security.Cryptography.CngKeyUsages KeyUsage { get; }\n    return:\n      type: System.Security.Cryptography.CngKeyUsages\n      description: A bitwise combination of the enumeration values that specify the usages allowed for the key.\n  overload: System.Security.Cryptography.CngKey.KeyUsage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Open(System.String)\n  id: Open(System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(String)\n  nameWithType: CngKey.Open(String)\n  fullName: System.Security.Cryptography.CngKey.Open(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that represents an existing named key.\n  remarks: \"This overload uses the following defaults:  \\n  \\n-   Key storage provider (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>. Use the <xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29> overload if you want to specify another KSP.  \\n  \\n-   Key open options: <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>.\"\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (string keyName);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The name of the key.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An existing key.\n  overload: System.Security.Cryptography.CngKey.Open*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  id: Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object by using a handle to an existing key.\n  remarks: \"This overload enables advanced users to use the CNG classes even if they rely on platform invoke or the managed interop capability of C++. For example, if you have a native library that returns the key as an NCRYPT_KEY_HANDLE, this overload lets you create a managed wrapper around the key and use the CNG classes to manipulate it.  \\n  \\n When you open a key by using its handle, you cannot determine the key's ephemeral state and must specify it yourself. Several properties of the <xref:System.Security.Cryptography.CngKey> class rely on this value to be correct. Therefore, make sure that you pass the correct flag value to the <xref:System.Security.Cryptography.CngKey.Open%2A> methods.\"\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, System.Security.Cryptography.CngKeyHandleOpenOptions keyHandleOpenOptions);\n    parameters:\n    - id: keyHandle\n      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n      description: A handle to an existing key.\n    - id: keyHandleOpenOptions\n      type: System.Security.Cryptography.CngKeyHandleOpenOptions\n      description: One of the enumeration values that indicates whether `keyHandle` represents an ephemeral key or a named key.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An existing key.\n  overload: System.Security.Cryptography.CngKey.Open*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyHandle</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keyHandle</code> is invalid or malformed, or it is already closed. This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <xref href=\"System.Security.Cryptography.CngKeyHandleOpenOptions\"></xref> value is not specified.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  id: Open(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(String,CngProvider)\n  nameWithType: CngKey.Open(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that represents an existing named key, using the specified key storage provider (KSP).\n  remarks: Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify the provider. In addition, a default <xref:System.Security.Cryptography.CngKeyOpenOptions> value of <xref:System.Security.Cryptography.CngKeyOpenOptions> is created and bound to the key.\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The name of the key.\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: The KSP that contains the key.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An existing key.\n  overload: System.Security.Cryptography.CngKey.Open*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of an <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that represents an existing named key, using the specified key storage provider (KSP) and key open options.\n  remarks: Unlike the <xref:System.Security.Cryptography.CngKey.Open%28System.String%29> method overload, this overload lets you specify both the provider and the key open options.\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions openOptions);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The name of the key.\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: The KSP that contains the key.\n    - id: openOptions\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An existing key.\n  overload: System.Security.Cryptography.CngKey.Open*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keyName</code> or <code>provider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) is not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.ParentWindowHandle\n  id: ParentWindowHandle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: ParentWindowHandle\n  nameWithType: CngKey.ParentWindowHandle\n  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.\n  remarks: \"The parent window handle for the key is used in UI prompts, such as smart card PIN prompts. This value is not persisted with persisted keys.  \\n  \\n We recommend that you always set this property for keys that display a user interface. Do not use the default value of `null` for such keys.\"\n  syntax:\n    content: public IntPtr ParentWindowHandle { get; set; }\n    return:\n      type: System.IntPtr\n      description: The parent window handle for the key.\n  overload: System.Security.Cryptography.CngKey.ParentWindowHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.Provider\n  id: Provider\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Provider\n  nameWithType: CngKey.Provider\n  fullName: System.Security.Cryptography.CngKey.Provider\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the key storage provider (KSP) that manages the key.\n  syntax:\n    content: public System.Security.Cryptography.CngProvider Provider { get; }\n    return:\n      type: System.Security.Cryptography.CngProvider\n      description: The KSP that manages the key.\n  overload: System.Security.Cryptography.CngKey.Provider*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.ProviderHandle\n  id: ProviderHandle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: ProviderHandle\n  nameWithType: CngKey.ProviderHandle\n  fullName: System.Security.Cryptography.CngKey.ProviderHandle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).\n  remarks: \"The returned handle is a duplicate of the handle in the current <xref:System.Security.Cryptography.CngKey> object. It will persist even if the current <xref:System.Security.Cryptography.CngKey> is disposed, and must be disposed of separately.  \\n  \\n You can release the current object and the handle in any order without any adverse effects.\"\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n      description: A handle to the KSP.\n  overload: System.Security.Cryptography.CngKey.ProviderHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  id: SetProperty(System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: SetProperty(CngProperty)\n  nameWithType: CngKey.SetProperty(CngProperty)\n  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Sets a named property on the key.\n  remarks: This method enables you to add a new custom property to an existing key by using a <xref:System.Security.Cryptography.CngProperty> object. The options set on the <xref:System.Security.Cryptography.CngProperty> object must exactly match the options in the <xref:System.Security.Cryptography.CngKey.GetProperty%2A> call. Otherwise, the property will not be found.\n  syntax:\n    content: public void SetProperty (System.Security.Cryptography.CngProperty property);\n    parameters:\n    - id: property\n      type: System.Security.Cryptography.CngProperty\n      description: The key property to set.\n  overload: System.Security.Cryptography.CngKey.SetProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.UIPolicy\n  id: UIPolicy\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: UIPolicy\n  nameWithType: CngKey.UIPolicy\n  fullName: System.Security.Cryptography.CngKey.UIPolicy\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets parameters that control the user interface (UI) for accessing the key.\n  remarks: The key UI policy is used with UI prompts such as smart card PIN prompts. This policy also controls password dialog boxes for protected keys.\n  syntax:\n    content: public System.Security.Cryptography.CngUIPolicy UIPolicy { get; }\n    return:\n      type: System.Security.Cryptography.CngUIPolicy\n      description: An object that contains configuration parameters for displaying the UI.\n  overload: System.Security.Cryptography.CngKey.UIPolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.CngKey.UniqueName\n  id: UniqueName\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: UniqueName\n  nameWithType: CngKey.UniqueName\n  fullName: System.Security.Cryptography.CngKey.UniqueName\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the unique name for the key.\n  remarks: This property gets an alternate name that can be used when accessing the key. You can use this property if the original key name does not uniquely identify the persisted key. The <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> property will return the file name of the key as this property. The name returned by the <xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A> is implementation-dependent.\n  syntax:\n    content: public string UniqueName { get; }\n    return:\n      type: System.String\n      description: An alternate name for the key. If the key is ephemeral, the value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.CngKey.UniqueName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.Cryptography.CngKey.Algorithm\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Algorithm\n  nameWithType: CngKey.Algorithm\n  fullName: System.Security.Cryptography.CngKey.Algorithm\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.Security.Cryptography.CngKey.AlgorithmGroup\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: AlgorithmGroup\n  nameWithType: CngKey.AlgorithmGroup\n  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup\n- uid: System.Security.Cryptography.CngAlgorithmGroup\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithmGroup\n  nameWithType: CngAlgorithmGroup\n  fullName: System.Security.Cryptography.CngAlgorithmGroup\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create(CngAlgorithm)\n  nameWithType: CngKey.Create(CngAlgorithm)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create(CngAlgorithm,String)\n  nameWithType: CngKey.Create(CngAlgorithm,String)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create(CngAlgorithm,String,CngKeyCreationParameters)\n  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n- uid: System.Security.Cryptography.CngKeyCreationParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyCreationParameters\n  nameWithType: CngKeyCreationParameters\n  fullName: System.Security.Cryptography.CngKeyCreationParameters\n- uid: System.Security.Cryptography.CngKey.Delete\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Delete()\n  nameWithType: CngKey.Delete()\n  fullName: System.Security.Cryptography.CngKey.Delete()\n- uid: System.Security.Cryptography.CngKey.Dispose\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Dispose()\n  nameWithType: CngKey.Dispose()\n  fullName: System.Security.Cryptography.CngKey.Dispose()\n- uid: System.Security.Cryptography.CngKey.Exists(System.String)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists(String)\n  nameWithType: CngKey.Exists(String)\n  fullName: System.Security.Cryptography.CngKey.Exists(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists(String,CngProvider)\n  nameWithType: CngKey.Exists(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n- uid: System.Security.Cryptography.CngKeyOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyOpenOptions\n  nameWithType: CngKeyOpenOptions\n  fullName: System.Security.Cryptography.CngKeyOpenOptions\n- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Export(CngKeyBlobFormat)\n  nameWithType: CngKey.Export(CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyBlobFormat\n  nameWithType: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n- uid: System.Security.Cryptography.CngKey.ExportPolicy\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ExportPolicy\n  nameWithType: CngKey.ExportPolicy\n  fullName: System.Security.Cryptography.CngKey.ExportPolicy\n- uid: System.Security.Cryptography.CngExportPolicies\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngExportPolicies\n  nameWithType: CngExportPolicies\n  fullName: System.Security.Cryptography.CngExportPolicies\n- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: GetProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)\n- uid: System.Security.Cryptography.CngProperty\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProperty\n  nameWithType: CngProperty\n  fullName: System.Security.Cryptography.CngProperty\n- uid: System.Security.Cryptography.CngPropertyOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngPropertyOptions\n  nameWithType: CngPropertyOptions\n  fullName: System.Security.Cryptography.CngPropertyOptions\n- uid: System.Security.Cryptography.CngKey.Handle\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Handle\n  nameWithType: CngKey.Handle\n  fullName: System.Security.Cryptography.CngKey.Handle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptKeyHandle\n  nameWithType: SafeNCryptKeyHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: HasProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Import(Byte[],CngKeyBlobFormat)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Import(Byte[],CngKeyBlobFormat,CngProvider)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n- uid: System.Security.Cryptography.CngKey.IsEphemeral\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: IsEphemeral\n  nameWithType: CngKey.IsEphemeral\n  fullName: System.Security.Cryptography.CngKey.IsEphemeral\n- uid: System.Security.Cryptography.CngKey.IsMachineKey\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: IsMachineKey\n  nameWithType: CngKey.IsMachineKey\n  fullName: System.Security.Cryptography.CngKey.IsMachineKey\n- uid: System.Security.Cryptography.CngKey.KeyName\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeyName\n  nameWithType: CngKey.KeyName\n  fullName: System.Security.Cryptography.CngKey.KeyName\n- uid: System.Security.Cryptography.CngKey.KeySize\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeySize\n  nameWithType: CngKey.KeySize\n  fullName: System.Security.Cryptography.CngKey.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.CngKey.KeyUsage\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeyUsage\n  nameWithType: CngKey.KeyUsage\n  fullName: System.Security.Cryptography.CngKey.KeyUsage\n- uid: System.Security.Cryptography.CngKeyUsages\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyUsages\n  nameWithType: CngKeyUsages\n  fullName: System.Security.Cryptography.CngKeyUsages\n- uid: System.Security.Cryptography.CngKey.Open(System.String)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(String)\n  nameWithType: CngKey.Open(String)\n  fullName: System.Security.Cryptography.CngKey.Open(String)\n- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n- uid: System.Security.Cryptography.CngKeyHandleOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyHandleOpenOptions\n  nameWithType: CngKeyHandleOpenOptions\n  fullName: System.Security.Cryptography.CngKeyHandleOpenOptions\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(String,CngProvider)\n  nameWithType: CngKey.Open(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n- uid: System.Security.Cryptography.CngKey.ParentWindowHandle\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ParentWindowHandle\n  nameWithType: CngKey.ParentWindowHandle\n  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Cryptography.CngKey.Provider\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Provider\n  nameWithType: CngKey.Provider\n  fullName: System.Security.Cryptography.CngKey.Provider\n- uid: System.Security.Cryptography.CngKey.ProviderHandle\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ProviderHandle\n  nameWithType: CngKey.ProviderHandle\n  fullName: System.Security.Cryptography.CngKey.ProviderHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptProviderHandle\n  nameWithType: SafeNCryptProviderHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: SetProperty(CngProperty)\n  nameWithType: CngKey.SetProperty(CngProperty)\n  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)\n- uid: System.Security.Cryptography.CngKey.UIPolicy\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: UIPolicy\n  nameWithType: CngKey.UIPolicy\n  fullName: System.Security.Cryptography.CngKey.UIPolicy\n- uid: System.Security.Cryptography.CngUIPolicy\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngUIPolicy\n  nameWithType: CngUIPolicy\n  fullName: System.Security.Cryptography.CngUIPolicy\n- uid: System.Security.Cryptography.CngKey.UniqueName\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: UniqueName\n  nameWithType: CngKey.UniqueName\n  fullName: System.Security.Cryptography.CngKey.UniqueName\n- uid: System.Security.Cryptography.CngKey.Algorithm*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Algorithm\n  nameWithType: CngKey.Algorithm\n- uid: System.Security.Cryptography.CngKey.AlgorithmGroup*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: AlgorithmGroup\n  nameWithType: CngKey.AlgorithmGroup\n- uid: System.Security.Cryptography.CngKey.Create*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create\n  nameWithType: CngKey.Create\n- uid: System.Security.Cryptography.CngKey.Delete*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Delete\n  nameWithType: CngKey.Delete\n- uid: System.Security.Cryptography.CngKey.Dispose*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Dispose\n  nameWithType: CngKey.Dispose\n- uid: System.Security.Cryptography.CngKey.Exists*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists\n  nameWithType: CngKey.Exists\n- uid: System.Security.Cryptography.CngKey.Export*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Export\n  nameWithType: CngKey.Export\n- uid: System.Security.Cryptography.CngKey.ExportPolicy*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ExportPolicy\n  nameWithType: CngKey.ExportPolicy\n- uid: System.Security.Cryptography.CngKey.GetProperty*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: GetProperty\n  nameWithType: CngKey.GetProperty\n- uid: System.Security.Cryptography.CngKey.Handle*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Handle\n  nameWithType: CngKey.Handle\n- uid: System.Security.Cryptography.CngKey.HasProperty*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: HasProperty\n  nameWithType: CngKey.HasProperty\n- uid: System.Security.Cryptography.CngKey.Import*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Import\n  nameWithType: CngKey.Import\n- uid: System.Security.Cryptography.CngKey.IsEphemeral*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: IsEphemeral\n  nameWithType: CngKey.IsEphemeral\n- uid: System.Security.Cryptography.CngKey.IsMachineKey*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: IsMachineKey\n  nameWithType: CngKey.IsMachineKey\n- uid: System.Security.Cryptography.CngKey.KeyName*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeyName\n  nameWithType: CngKey.KeyName\n- uid: System.Security.Cryptography.CngKey.KeySize*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeySize\n  nameWithType: CngKey.KeySize\n- uid: System.Security.Cryptography.CngKey.KeyUsage*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeyUsage\n  nameWithType: CngKey.KeyUsage\n- uid: System.Security.Cryptography.CngKey.Open*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open\n  nameWithType: CngKey.Open\n- uid: System.Security.Cryptography.CngKey.ParentWindowHandle*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ParentWindowHandle\n  nameWithType: CngKey.ParentWindowHandle\n- uid: System.Security.Cryptography.CngKey.Provider*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Provider\n  nameWithType: CngKey.Provider\n- uid: System.Security.Cryptography.CngKey.ProviderHandle*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ProviderHandle\n  nameWithType: CngKey.ProviderHandle\n- uid: System.Security.Cryptography.CngKey.SetProperty*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: SetProperty\n  nameWithType: CngKey.SetProperty\n- uid: System.Security.Cryptography.CngKey.UIPolicy*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: UIPolicy\n  nameWithType: CngKey.UIPolicy\n- uid: System.Security.Cryptography.CngKey.UniqueName*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: UniqueName\n  nameWithType: CngKey.UniqueName\n"}