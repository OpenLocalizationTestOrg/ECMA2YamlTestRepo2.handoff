{"nodes":[{"pos":[5067,5079],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6152,6164],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6236,6248],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6310,6322],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6386,6398],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7326,7338],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8123,8135],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8194,8206],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9071,9083],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9855,9867],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10774,10786],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11776,11788],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11922,11934],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12775,12787],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13726,13738],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13822,13834],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15097,15109],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15189,15201],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15285,15297],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16048,16060],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16999,17011],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17822,17834],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18580,18592],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20051,20063],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20178,20190],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20249,20261],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21730,21742],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21857,21869],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21928,21940],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23495,23507],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25888,25900],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25962,25974],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26061,26073],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27293,27305],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27367,27379],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27459,27471],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27558,27570],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29045,29057],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29860,29872],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30849,30861],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31599,31611],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  id: WorkflowInstance.WorkflowInstanceControl\n  children:\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)\n  - System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled\n  langs:\n  - csharp\n  name: WorkflowInstance+WorkflowInstanceControl\n  nameWithType: WorkflowInstance+WorkflowInstanceControl\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl\n  type: Struct\n  syntax:\n    content: protected struct WorkflowInstance.WorkflowInstanceControl\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort\n  id: Abort\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Abort()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Abort()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)\n  id: Abort(System.Exception)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: Abort(Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Abort(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Abort(Exception)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void Abort (Exception reason);\n    parameters:\n    - id: reason\n      type: System.Exception\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public IAsyncResult BeginFlushTrackingRecords (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: To be added.\n    - id: callback\n      type: System.AsyncCallback\n      description: To be added.\n    - id: state\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.IAsyncResult\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)\n  id: EndFlushTrackingRecords(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: EndFlushTrackingRecords(IAsyncResult)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.EndFlushTrackingRecords(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.EndFlushTrackingRecords(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void EndFlushTrackingRecords (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Equals(Object)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)\n  id: FlushTrackingRecords(System.TimeSpan)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: FlushTrackingRecords(TimeSpan)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.FlushTrackingRecords(TimeSpan)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.FlushTrackingRecords(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void FlushTrackingRecords (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason\n  id: GetAbortReason\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetAbortReason()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetAbortReason()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetAbortReason()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public Exception GetAbortReason ();\n    parameters: []\n    return:\n      type: System.Exception\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks\n  id: GetBookmarks\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetBookmarks()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetBookmarks()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetBookmarks()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.Hosting.BookmarkInfo> GetBookmarks ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.Hosting.BookmarkInfo}\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)\n  id: GetBookmarks(System.Activities.BookmarkScope)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetBookmarks(BookmarkScope)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetBookmarks(BookmarkScope)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetBookmarks(BookmarkScope)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.Hosting.BookmarkInfo> GetBookmarks (System.Activities.BookmarkScope scope);\n    parameters:\n    - id: scope\n      type: System.Activities.BookmarkScope\n      description: To be added.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.Hosting.BookmarkInfo}\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState\n  id: GetCompletionState\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetCompletionState()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetCompletionState()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Activities.ActivityInstanceState GetCompletionState ();\n    parameters: []\n    return:\n      type: System.Activities.ActivityInstanceState\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)\n  id: GetCompletionState(System.Exception@)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetCompletionState(Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetCompletionState(Exception)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Activities.ActivityInstanceState GetCompletionState (out Exception terminationException);\n    parameters:\n    - id: terminationException\n      type: System.Exception\n      description: To be added.\n    return:\n      type: System.Activities.ActivityInstanceState\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)\n  id: GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetCompletionState(IDictionary<String,Object>,Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState(IDictionary<String,Object>,Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetCompletionState(IDictionary<String,Object>,Exception)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Activities.ActivityInstanceState GetCompletionState (out System.Collections.Generic.IDictionary<string,object> outputs, out Exception terminationException);\n    parameters:\n    - id: outputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: To be added.\n    - id: terminationException\n      type: System.Exception\n      description: To be added.\n    return:\n      type: System.Activities.ActivityInstanceState\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode\n  id: GetHashCode\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetHashCode()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables\n  id: GetMappedVariables\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: GetMappedVariables()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetMappedVariables()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetMappedVariables()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,System.Activities.Hosting.LocationInfo> GetMappedVariables ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Activities.Hosting.LocationInfo}\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords\n  id: HasPendingTrackingRecords\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: HasPendingTrackingRecords\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.HasPendingTrackingRecords\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.HasPendingTrackingRecords\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public bool HasPendingTrackingRecords { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable\n  id: IsPersistable\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: IsPersistable\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.IsPersistable\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.IsPersistable\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public bool IsPersistable { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  id: op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: op_Equality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.op_Equality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.op_Equality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  type: Operator\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public static bool op_Equality (System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl left, System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl right);\n    parameters:\n    - id: left\n      type: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n      description: To be added.\n    - id: right\n      type: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  id: op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: op_Inequality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.op_Inequality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.op_Inequality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  type: Operator\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public static bool op_Inequality (System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl left, System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl right);\n    parameters:\n    - id: left\n      type: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n      description: To be added.\n    - id: right\n      type: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable\n  id: PauseWhenPersistable\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: PauseWhenPersistable()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.PauseWhenPersistable()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.PauseWhenPersistable()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void PauseWhenPersistable ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization\n  id: PrepareForSerialization\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: PrepareForSerialization()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.PrepareForSerialization()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.PrepareForSerialization()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public object PrepareForSerialization ();\n    parameters: []\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause\n  id: RequestPause\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: RequestPause()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.RequestPause()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.RequestPause()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void RequestPause ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run\n  id: Run\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: Run()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Run()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Run()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void Run ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)\n  id: ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: ScheduleBookmarkResumption(Bookmark,Object)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Activities.BookmarkResumptionResult ScheduleBookmarkResumption (System.Activities.Bookmark bookmark, object value);\n    parameters:\n    - id: bookmark\n      type: System.Activities.Bookmark\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Activities.BookmarkResumptionResult\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)\n  id: ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: ScheduleBookmarkResumption(Bookmark,Object,BookmarkScope)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object,BookmarkScope)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object,BookmarkScope)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Activities.BookmarkResumptionResult ScheduleBookmarkResumption (System.Activities.Bookmark bookmark, object value, System.Activities.BookmarkScope scope);\n    parameters:\n    - id: bookmark\n      type: System.Activities.Bookmark\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n    - id: scope\n      type: System.Activities.BookmarkScope\n      description: To be added.\n    return:\n      type: System.Activities.BookmarkResumptionResult\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel\n  id: ScheduleCancel\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: ScheduleCancel()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleCancel()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.ScheduleCancel()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void ScheduleCancel ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State\n  id: State\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: State\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.State\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.State\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public System.Activities.Hosting.WorkflowInstanceState State { get; }\n    return:\n      type: System.Activities.Hosting.WorkflowInstanceState\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)\n  id: Terminate(System.Exception)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: Terminate(Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Terminate(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Terminate(Exception)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void Terminate (Exception reason);\n    parameters:\n    - id: reason\n      type: System.Exception\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)\n  id: Track(System.Activities.Tracking.WorkflowInstanceRecord)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: Track(WorkflowInstanceRecord)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Track(WorkflowInstanceRecord)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Track(WorkflowInstanceRecord)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public void Track (System.Activities.Tracking.WorkflowInstanceRecord instanceRecord);\n    parameters:\n    - id: instanceRecord\n      type: System.Activities.Tracking.WorkflowInstanceRecord\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled\n  id: TrackingEnabled\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  langs:\n  - csharp\n  name: TrackingEnabled\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.TrackingEnabled\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.TrackingEnabled\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: public bool TrackingEnabled { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Abort()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Abort()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Abort()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Abort(Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Abort(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Abort(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: EndFlushTrackingRecords(IAsyncResult)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.EndFlushTrackingRecords(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.EndFlushTrackingRecords(IAsyncResult)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Equals(Object)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: FlushTrackingRecords(TimeSpan)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.FlushTrackingRecords(TimeSpan)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.FlushTrackingRecords(TimeSpan)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetAbortReason()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetAbortReason()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetAbortReason()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetBookmarks()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetBookmarks()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetBookmarks()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.Hosting.BookmarkInfo}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<BookmarkInfo>\n  nameWithType: ReadOnlyCollection<BookmarkInfo>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.Hosting.BookmarkInfo>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Activities.Hosting.BookmarkInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Hosting.BookmarkInfo\n    name: BookmarkInfo\n    nameWithType: BookmarkInfo\n    fullName: BookmarkInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetBookmarks(BookmarkScope)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetBookmarks(BookmarkScope)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetBookmarks(BookmarkScope)\n- uid: System.Activities.BookmarkScope\n  parent: System.Activities\n  isExternal: false\n  name: BookmarkScope\n  nameWithType: BookmarkScope\n  fullName: System.Activities.BookmarkScope\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetCompletionState()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetCompletionState()\n- uid: System.Activities.ActivityInstanceState\n  parent: System.Activities\n  isExternal: false\n  name: ActivityInstanceState\n  nameWithType: ActivityInstanceState\n  fullName: System.Activities.ActivityInstanceState\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetCompletionState(Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetCompletionState(Exception)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetCompletionState(IDictionary<String,Object>,Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState(IDictionary<String,Object>,Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetCompletionState(IDictionary<String,Object>,Exception)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,Object>\n  nameWithType: IDictionary<String,Object>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetHashCode()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetMappedVariables()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetMappedVariables()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.GetMappedVariables()\n- uid: System.Collections.Generic.IDictionary{System.String,System.Activities.Hosting.LocationInfo}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,LocationInfo>\n  nameWithType: IDictionary<String,LocationInfo>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Activities.Hosting.LocationInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Activities.Hosting.LocationInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Activities.Hosting.LocationInfo\n    name: LocationInfo\n    nameWithType: LocationInfo\n    fullName: LocationInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: HasPendingTrackingRecords\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.HasPendingTrackingRecords\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.HasPendingTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: IsPersistable\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.IsPersistable\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.IsPersistable\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: op_Equality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.op_Equality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.op_Equality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstance+WorkflowInstanceControl\n  nameWithType: WorkflowInstance+WorkflowInstanceControl\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: op_Inequality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.op_Inequality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.op_Inequality(WorkflowInstance+WorkflowInstanceControl,WorkflowInstance+WorkflowInstanceControl)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: PauseWhenPersistable()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.PauseWhenPersistable()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.PauseWhenPersistable()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: PrepareForSerialization()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.PrepareForSerialization()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.PrepareForSerialization()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: RequestPause()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.RequestPause()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.RequestPause()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Run()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Run()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Run()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: ScheduleBookmarkResumption(Bookmark,Object)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object)\n- uid: System.Activities.BookmarkResumptionResult\n  parent: System.Activities\n  isExternal: false\n  name: BookmarkResumptionResult\n  nameWithType: BookmarkResumptionResult\n  fullName: System.Activities.BookmarkResumptionResult\n- uid: System.Activities.Bookmark\n  parent: System.Activities\n  isExternal: false\n  name: Bookmark\n  nameWithType: Bookmark\n  fullName: System.Activities.Bookmark\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: ScheduleBookmarkResumption(Bookmark,Object,BookmarkScope)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object,BookmarkScope)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption(Bookmark,Object,BookmarkScope)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: ScheduleCancel()\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleCancel()\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.ScheduleCancel()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: State\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.State\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.State\n- uid: System.Activities.Hosting.WorkflowInstanceState\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstanceState\n  nameWithType: WorkflowInstanceState\n  fullName: System.Activities.Hosting.WorkflowInstanceState\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Terminate(Exception)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Terminate(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Terminate(Exception)\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Track(WorkflowInstanceRecord)\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Track(WorkflowInstanceRecord)\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.Track(WorkflowInstanceRecord)\n- uid: System.Activities.Tracking.WorkflowInstanceRecord\n  parent: System.Activities.Tracking\n  isExternal: false\n  name: WorkflowInstanceRecord\n  nameWithType: WorkflowInstanceRecord\n  fullName: System.Activities.Tracking.WorkflowInstanceRecord\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: TrackingEnabled\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.TrackingEnabled\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl.TrackingEnabled\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Abort\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Abort\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: BeginFlushTrackingRecords\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.BeginFlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: EndFlushTrackingRecords\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.EndFlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Equals\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Equals\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: FlushTrackingRecords\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.FlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetAbortReason\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetAbortReason\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetBookmarks\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetBookmarks\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetCompletionState\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetCompletionState\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetHashCode\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetHashCode\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: GetMappedVariables\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.GetMappedVariables\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: HasPendingTrackingRecords\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.HasPendingTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: IsPersistable\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.IsPersistable\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: op_Equality\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.op_Equality\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: op_Inequality\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.op_Inequality\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: PauseWhenPersistable\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.PauseWhenPersistable\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: PrepareForSerialization\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.PrepareForSerialization\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: RequestPause\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.RequestPause\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Run\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Run\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: ScheduleBookmarkResumption\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleBookmarkResumption\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: ScheduleCancel\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.ScheduleCancel\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: State\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.State\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Terminate\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Terminate\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: Track\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.Track\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled*\n  parent: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  isExternal: false\n  name: TrackingEnabled\n  nameWithType: WorkflowInstance+WorkflowInstanceControl.TrackingEnabled\n"}