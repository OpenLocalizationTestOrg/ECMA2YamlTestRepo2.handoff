{"nodes":[{"pos":[1402,1446],"content":"Encapsulates a custom user-defined line cap.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encapsulates a custom user-defined line cap.","pos":[0,44]}]},{"pos":[1458,1718],"content":"Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <xref:System.Drawing.Pen> objects. GDI+ supports several predefined cap styles, and also allows users to define their own cap styles. This class is used to create custom cap styles.","needQuote":true,"needEscape":true,"nodes":[{"content":"Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <xref:System.Drawing.Pen> objects. GDI+ supports several predefined cap styles, and also allows users to define their own cap styles. This class is used to create custom cap styles.","pos":[0,260],"nodes":[{"content":"Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ &lt;xref:System.Drawing.Pen&gt; objects.","pos":[0,113],"source":"Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <xref:System.Drawing.Pen> objects."},{"content":"GDI+ supports several predefined cap styles, and also allows users to define their own cap styles.","pos":[114,212]},{"content":"This class is used to create custom cap styles.","pos":[213,260]}]}]},{"pos":[3380,3516],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified outline and fill.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> class with the specified outline and fill."},{"pos":[3529,3939],"content":"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \"winding\" regardless of the fill mode specified for the operation.       The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt; uses a fill mode of \"winding\" regardless of the fill mode specified for the operation.","pos":[0,132],"source":"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \"winding\" regardless of the fill mode specified for the operation."},{"content":"The <ph id=\"ph1\">`fillPath`</ph> and <ph id=\"ph2\">`strokePath`</ph> parameters cannot be used at the same time.","pos":[139,214],"source":"       The `fillPath` and `strokePath` parameters cannot be used at the same time."},{"content":"One parameter must be passed a null value.","pos":[215,257]},{"content":"If neither parameter is passed a null value, <ph id=\"ph1\">`fillPath`</ph> will be ignored.","pos":[258,330],"source":" If neither parameter is passed a null value, `fillPath` will be ignored."},{"content":"If <ph id=\"ph1\">`strokePath`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`fillPath`</ph> should intercept the negative y-axis.","pos":[331,406],"source":" If `strokePath` is `null`, `fillPath` should intercept the negative y-axis."}]},{"pos":[4763,4872],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that defines the fill for the custom cap.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the fill for the custom cap."},{"pos":[4963,5074],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that defines the outline of the custom cap.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the outline of the custom cap."},{"pos":[5866,6096],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified existing <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration with the specified outline and fill.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> class from the specified existing <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration with the specified outline and fill."},{"pos":[6109,6519],"content":"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \"winding\" regardless of the fill mode specified for the operation.       The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt; uses a fill mode of \"winding\" regardless of the fill mode specified for the operation.","pos":[0,132],"source":"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \"winding\" regardless of the fill mode specified for the operation."},{"content":"The <ph id=\"ph1\">`fillPath`</ph> and <ph id=\"ph2\">`strokePath`</ph> parameters cannot be used at the same time.","pos":[139,214],"source":"       The `fillPath` and `strokePath` parameters cannot be used at the same time."},{"content":"One parameter must be passed a null value.","pos":[215,257]},{"content":"If neither parameter is passed a null value, <ph id=\"ph1\">`fillPath`</ph> will be ignored.","pos":[258,330],"source":" If neither parameter is passed a null value, `fillPath` will be ignored."},{"content":"If <ph id=\"ph1\">`strokePath`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`fillPath`</ph> should intercept the negative y-axis.","pos":[331,406],"source":" If `strokePath` is `null`, `fillPath` should intercept the negative y-axis."}]},{"pos":[6811,6920],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that defines the fill for the custom cap.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the fill for the custom cap."},{"pos":[7011,7122],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that defines the outline of the custom cap.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the outline of the custom cap."},{"pos":[7205,7254],"content":"The line cap from which to create the custom cap.","needQuote":true,"needEscape":true,"nodes":[{"content":"The line cap from which to create the custom cap.","pos":[0,49]}]},{"pos":[8095,8333],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified existing <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration with the specified outline, fill, and inset.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> class from the specified existing <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration with the specified outline, fill, and inset."},{"pos":[8346,8756],"content":"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \"winding\" regardless of the fill mode specified for the operation.       The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt; uses a fill mode of \"winding\" regardless of the fill mode specified for the operation.","pos":[0,132],"source":"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \"winding\" regardless of the fill mode specified for the operation."},{"content":"The <ph id=\"ph1\">`fillPath`</ph> and <ph id=\"ph2\">`strokePath`</ph> parameters cannot be used at the same time.","pos":[139,214],"source":"       The `fillPath` and `strokePath` parameters cannot be used at the same time."},{"content":"One parameter must be passed a null value.","pos":[215,257]},{"content":"If neither parameter is passed a null value, <ph id=\"ph1\">`fillPath`</ph> will be ignored.","pos":[258,330],"source":" If neither parameter is passed a null value, `fillPath` will be ignored."},{"content":"If <ph id=\"ph1\">`strokePath`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`fillPath`</ph> should intercept the negative y-axis.","pos":[331,406],"source":" If `strokePath` is `null`, `fillPath` should intercept the negative y-axis."}]},{"pos":[9065,9174],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that defines the fill for the custom cap.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the fill for the custom cap."},{"pos":[9265,9376],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that defines the outline of the custom cap.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the outline of the custom cap."},{"pos":[9459,9508],"content":"The line cap from which to create the custom cap.","needQuote":true,"needEscape":true,"nodes":[{"content":"The line cap from which to create the custom cap.","pos":[0,49]}]},{"pos":[9574,9616],"content":"The distance between the cap and the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance between the cap and the line.","pos":[0,42]}]},{"pos":[10064,10230],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration on which this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is based.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration on which this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> is based."},{"pos":[10392,10545],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration on which this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is based.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration on which this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> is based."},{"pos":[11005,11060],"content":"Gets or sets the distance between the cap and the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the distance between the cap and the line.","pos":[0,55]}]},{"pos":[11178,11248],"content":"The distance between the beginning of the cap and the end of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance between the beginning of the cap and the end of the line.","pos":[0,70]}]},{"pos":[11694,11784],"content":"Creates an exact copy of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an exact copy of this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref>."},{"pos":[14483,14586],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> this method creates, cast as an object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> this method creates, cast as an object."},{"pos":[15038,15141],"content":"Releases all resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> object."},{"pos":[15153,15322],"content":"Calling <xref:System.IDisposable.Dispose%2A> allows the resources used by this <xref:System.Drawing.Drawing2D.CustomLineCap> object to be reallocated for other purposes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling &lt;xref:System.IDisposable.Dispose%2A&gt; allows the resources used by this &lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt; object to be reallocated for other purposes.","pos":[0,169],"source":"Calling <xref:System.IDisposable.Dispose%2A> allows the resources used by this <xref:System.Drawing.Drawing2D.CustomLineCap> object to be reallocated for other purposes."}]},{"pos":[15895,16046],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> and optionally releases the managed resources."},{"pos":[16201,16410],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[16869,17111],"content":"Allows an <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to attempt to free resources and perform other cleanup operations before the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"source":"Allows an <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> to attempt to free resources and perform other cleanup operations before the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> is reclaimed by garbage collection."},{"pos":[17840,17911],"content":"Gets the caps used to start and end lines that make up this custom cap.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the caps used to start and end lines that make up this custom cap.","pos":[0,71]}]},{"pos":[18737,18855],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration used at the beginning of a line within this cap.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the beginning of a line within this cap."},{"pos":[18937,19049],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration used at the end of a line within this cap.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the end of a line within this cap."},{"pos":[19718,19789],"content":"Sets the caps used to start and end lines that make up this custom cap.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the caps used to start and end lines that make up this custom cap.","pos":[0,71]}]},{"pos":[20607,20725],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration used at the beginning of a line within this cap.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the beginning of a line within this cap."},{"pos":[20807,20919],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration used at the end of a line within this cap.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the end of a line within this cap."},{"pos":[21390,21596],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineJoin\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how lines that compose this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object are joined.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Drawing.Drawing2D.LineJoin\"></xref> enumeration that determines how lines that compose this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> object are joined."},{"pos":[21608,21816],"content":"This property specifies a <xref:System.Drawing.Drawing2D.LineJoin> enumeration that is used to join lines and curves that make up the stroked path of this <xref:System.Drawing.Drawing2D.CustomLineCap> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property specifies a &lt;xref:System.Drawing.Drawing2D.LineJoin&gt; enumeration that is used to join lines and curves that make up the stroked path of this &lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt; object.","pos":[0,208],"source":"This property specifies a <xref:System.Drawing.Drawing2D.LineJoin> enumeration that is used to join lines and curves that make up the stroked path of this <xref:System.Drawing.Drawing2D.CustomLineCap> object."}]},{"pos":[21983,22145],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineJoin\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object uses to join lines.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.LineJoin\"></xref> enumeration this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> object uses to join lines."},{"pos":[22613,22813],"content":"Gets or sets the amount by which to scale this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> Class object with respect to the width of the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the amount by which to scale this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> Class object with respect to the width of the <xref href=\"System.Drawing.Pen\"></xref> object."},{"pos":[22825,23215],"content":"This property specifies the multiple of the pen width by which to multiply the size of the custom cap. For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high. Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property specifies the multiple of the pen width by which to multiply the size of the custom cap. For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high. Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high.","pos":[0,390],"nodes":[{"content":"This property specifies the multiple of the pen width by which to multiply the size of the custom cap.","pos":[0,102]},{"content":"For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high.","pos":[103,303]},{"content":"Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high.","pos":[304,390]}]}]},{"pos":[23334,23371],"content":"The amount by which to scale the cap.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount by which to scale the cap.","pos":[0,37]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Drawing2D.CustomLineCap\n  id: CustomLineCap\n  children:\n  - System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)\n  - System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)\n  - System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)\n  - System.Drawing.Drawing2D.CustomLineCap.BaseCap\n  - System.Drawing.Drawing2D.CustomLineCap.BaseInset\n  - System.Drawing.Drawing2D.CustomLineCap.Clone\n  - System.Drawing.Drawing2D.CustomLineCap.Dispose\n  - System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)\n  - System.Drawing.Drawing2D.CustomLineCap.Finalize\n  - System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)\n  - System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)\n  - System.Drawing.Drawing2D.CustomLineCap.StrokeJoin\n  - System.Drawing.Drawing2D.CustomLineCap.WidthScale\n  langs:\n  - csharp\n  name: CustomLineCap\n  nameWithType: CustomLineCap\n  fullName: System.Drawing.Drawing2D.CustomLineCap\n  type: Class\n  summary: Encapsulates a custom user-defined line cap.\n  remarks: Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <xref:System.Drawing.Pen> objects. GDI+ supports several predefined cap styles, and also allows users to define their own cap styles. This class is used to create custom cap styles.\n  example:\n  - \"The following example demonstrates how to use the CustomLineCap class. To run this example paste, the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/visualbasic/t-system.drawing.drawing_4_1.vb)]\\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/csharp/t-system.drawing.drawing_4_1.cs)]\"\n  syntax:\n    content: 'public class CustomLineCap : MarshalByRefObject, ICloneable, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.ICloneable\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)\n  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)'\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: CustomLineCap(GraphicsPath,GraphicsPath)\n  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> class with the specified outline and fill.\n  remarks: \"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \\\"winding\\\" regardless of the fill mode specified for the operation.  \\n  \\n The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis.\"\n  example:\n  - \"The following example demonstrates how to use the CustomLineCap constructor. To run this example, paste the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/visualbasic/b65925ed-80d8-46c6-8585-_1.vb)]\\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/csharp/b65925ed-80d8-46c6-8585-_1.cs)]\"\n  syntax:\n    content: public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath);\n    parameters:\n    - id: fillPath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the fill for the custom cap.\n    - id: strokePath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the outline of the custom cap.\n  overload: System.Drawing.Drawing2D.CustomLineCap.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)\n  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)'\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap)\n  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> class from the specified existing <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration with the specified outline and fill.\n  remarks: \"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \\\"winding\\\" regardless of the fill mode specified for the operation.  \\n  \\n The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis.\"\n  syntax:\n    content: public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap);\n    parameters:\n    - id: fillPath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the fill for the custom cap.\n    - id: strokePath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the outline of the custom cap.\n    - id: baseCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: The line cap from which to create the custom cap.\n  overload: System.Drawing.Drawing2D.CustomLineCap.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)\n  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)'\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)\n  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> class from the specified existing <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration with the specified outline, fill, and inset.\n  remarks: \"<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of \\\"winding\\\" regardless of the fill mode specified for the operation.  \\n  \\n The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis.\"\n  syntax:\n    content: public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap, float baseInset);\n    parameters:\n    - id: fillPath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the fill for the custom cap.\n    - id: strokePath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: A <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> object that defines the outline of the custom cap.\n    - id: baseCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: The line cap from which to create the custom cap.\n    - id: baseInset\n      type: System.Single\n      description: The distance between the cap and the line.\n  overload: System.Drawing.Drawing2D.CustomLineCap.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.BaseCap\n  id: BaseCap\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: BaseCap\n  nameWithType: CustomLineCap.BaseCap\n  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseCap\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets or sets the <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration on which this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> is based.\n  syntax:\n    content: public System.Drawing.Drawing2D.LineCap BaseCap { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.LineCap\n      description: The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration on which this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> is based.\n  overload: System.Drawing.Drawing2D.CustomLineCap.BaseCap*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.BaseInset\n  id: BaseInset\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: BaseInset\n  nameWithType: CustomLineCap.BaseInset\n  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseInset\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets or sets the distance between the cap and the line.\n  syntax:\n    content: public float BaseInset { get; set; }\n    return:\n      type: System.Single\n      description: The distance between the beginning of the cap and the end of the line.\n  overload: System.Drawing.Drawing2D.CustomLineCap.BaseInset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.Clone\n  id: Clone\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: CustomLineCap.Clone()\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Clone()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Creates an exact copy of this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Creates a custom line cap by using the <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.CustomLineCap> object, `firstCap`,using the <xref:System.Drawing.Drawing2D.GraphicsPath> object just created.  \\n  \\n-   Creates a clone of `firstCap` by using the Clone method.  \\n  \\n-   Sets up the <xref:System.Drawing.Pen.CustomStartCap%2A> and <xref:System.Drawing.Pen.CustomEndCap%2A> properties of the <xref:System.Drawing.Pen> object, and uses that pen to draw a line and the custom caps to the screen.  \\n  \\n```vb#  \\nPublic Sub CloneExample(e As PaintEventArgs)  \\n Dim points As Point() = New Point(- 5, - 5) New Point(0, 0) _  \\n New Point(5, - 5)  \\n Dim capPath As New GraphicsPath()  \\n ' Create a Path and add two lines to it,  \\n ' forming a custom line cap.  \\n capPath.AddLines(points)  \\n ' Create a CustomLineCap object.  \\n Dim firstCap As New CustomLineCap(Nothing, capPath)  \\n ' Create a copy of firstCap.  \\n Dim secondCap As CustomLineCap = CType(firstCap.Clone(), _  \\n CustomLineCap)  \\n ' Create a Pen object.  \\n Dim pen As New Pen(Color.Black, 3F)  \\n 'Set up the line.  \\n Dim point1 As New Point(20, 20)  \\n Dim point2 As New Point(100, 100)  \\n ' Set up the caps.  \\n pen.CustomStartCap = firstCap  \\n pen.CustomEndCap = secondCap  \\n ' Draw the line and caps to the screen.  \\n e.Graphics.DrawLine(pen, point1, point2)  \\n End Sub  \\n```  \\n  \\n```c#  \\nprivate void CloneExample(PaintEventArgs e)  \\n {  \\n // Create a Path and add two lines to it,  \\n // forming a custom line cap.  \\n Point[] points =  \\n {  \\n new Point(-5, -5),  \\n new Point(0, 0),  \\n new Point(5, -5)  \\n };  \\n GraphicsPath capPath = new GraphicsPath();  \\n capPath.AddLines(points);  \\n // Create a CustomLineCap object.  \\n CustomLineCap firstCap = new CustomLineCap(null, capPath);  \\n // Create a copy of firstCap.  \\n CustomLineCap secondCap = (CustomLineCap)firstCap.Clone();  \\n // Create a Pen object.  \\n Pen pen = new Pen(Color.Black, 3.0f);  \\n // Set up the line.  \\n Point point1 = new Point(20, 20);  \\n Point point2 = new Point(100, 100);  \\n // Set up the caps.  \\n pen.CustomStartCap = firstCap;  \\n pen.CustomEndCap = secondCap;  \\n // Draw the line and caps to the screen.  \\n e.Graphics.DrawLine(pen, point1, point2);  \\n }  \\n```\"\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> this method creates, cast as an object.\n  overload: System.Drawing.Drawing2D.CustomLineCap.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose\n  id: Dispose\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CustomLineCap.Dispose()\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> object.\n  remarks: Calling <xref:System.IDisposable.Dispose%2A> allows the resources used by this <xref:System.Drawing.Drawing2D.CustomLineCap> object to be reallocated for other purposes.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.CustomLineCap.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: CustomLineCap.Dispose(Boolean)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Drawing.Drawing2D.CustomLineCap.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.Finalize\n  id: Finalize\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: CustomLineCap.Finalize()\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Allows an <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> to attempt to free resources and perform other cleanup operations before the <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> is reclaimed by garbage collection.\n  syntax:\n    content: ~CustomLineCap ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.CustomLineCap.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)\n  id: GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: GetStrokeCaps(LineCap,LineCap)\n  nameWithType: CustomLineCap.GetStrokeCaps(LineCap,LineCap)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(LineCap,LineCap)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the caps used to start and end lines that make up this custom cap.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the GetStrokeCaps method. To run this example, paste the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/visualbasic/ecbd86d4-445b-4466-aba2-_1.vb)]\\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/csharp/ecbd86d4-445b-4466-aba2-_1.cs)]\"\n  syntax:\n    content: public void GetStrokeCaps (out System.Drawing.Drawing2D.LineCap startCap, out System.Drawing.Drawing2D.LineCap endCap);\n    parameters:\n    - id: startCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the beginning of a line within this cap.\n    - id: endCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the end of a line within this cap.\n  overload: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)\n  id: SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: SetStrokeCaps(LineCap,LineCap)\n  nameWithType: CustomLineCap.SetStrokeCaps(LineCap,LineCap)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(LineCap,LineCap)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Sets the caps used to start and end lines that make up this custom cap.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the SetStrokeCaps method. To run this example, paste the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/visualbasic/fda6a751-fef5-4b7b-a5e4-_1.vb)]\\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/csharp/fda6a751-fef5-4b7b-a5e4-_1.cs)]\"\n  syntax:\n    content: public void SetStrokeCaps (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap);\n    parameters:\n    - id: startCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the beginning of a line within this cap.\n    - id: endCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: The <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> enumeration used at the end of a line within this cap.\n  overload: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin\n  id: StrokeJoin\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: StrokeJoin\n  nameWithType: CustomLineCap.StrokeJoin\n  fullName: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets or sets the <xref href=\"System.Drawing.Drawing2D.LineJoin\"></xref> enumeration that determines how lines that compose this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> object are joined.\n  remarks: This property specifies a <xref:System.Drawing.Drawing2D.LineJoin> enumeration that is used to join lines and curves that make up the stroked path of this <xref:System.Drawing.Drawing2D.CustomLineCap> object.\n  syntax:\n    content: public System.Drawing.Drawing2D.LineJoin StrokeJoin { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.LineJoin\n      description: The <xref href=\"System.Drawing.Drawing2D.LineJoin\"></xref> enumeration this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> object uses to join lines.\n  overload: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.CustomLineCap.WidthScale\n  id: WidthScale\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  langs:\n  - csharp\n  name: WidthScale\n  nameWithType: CustomLineCap.WidthScale\n  fullName: System.Drawing.Drawing2D.CustomLineCap.WidthScale\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets or sets the amount by which to scale this <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> Class object with respect to the width of the <xref href=\"System.Drawing.Pen\"></xref> object.\n  remarks: This property specifies the multiple of the pen width by which to multiply the size of the custom cap. For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high. Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high.\n  syntax:\n    content: public float WidthScale { get; set; }\n    return:\n      type: System.Single\n      description: The amount by which to scale the cap.\n  overload: System.Drawing.Drawing2D.CustomLineCap.WidthScale*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: CustomLineCap(GraphicsPath,GraphicsPath)\n  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)\n- uid: System.Drawing.Drawing2D.GraphicsPath\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: GraphicsPath\n  nameWithType: GraphicsPath\n  fullName: System.Drawing.Drawing2D.GraphicsPath\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap)\n  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)\n- uid: System.Drawing.Drawing2D.LineCap\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: LineCap\n  nameWithType: LineCap\n  fullName: System.Drawing.Drawing2D.LineCap\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)\n  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Drawing.Drawing2D.CustomLineCap.BaseCap\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: BaseCap\n  nameWithType: CustomLineCap.BaseCap\n  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseCap\n- uid: System.Drawing.Drawing2D.CustomLineCap.BaseInset\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: BaseInset\n  nameWithType: CustomLineCap.BaseInset\n  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseInset\n- uid: System.Drawing.Drawing2D.CustomLineCap.Clone\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Clone()\n  nameWithType: CustomLineCap.Clone()\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Dispose()\n  nameWithType: CustomLineCap.Dispose()\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose()\n- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CustomLineCap.Dispose(Boolean)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Drawing.Drawing2D.CustomLineCap.Finalize\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Finalize()\n  nameWithType: CustomLineCap.Finalize()\n  fullName: System.Drawing.Drawing2D.CustomLineCap.Finalize()\n- uid: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: GetStrokeCaps(LineCap,LineCap)\n  nameWithType: CustomLineCap.GetStrokeCaps(LineCap,LineCap)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(LineCap,LineCap)\n- uid: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: SetStrokeCaps(LineCap,LineCap)\n  nameWithType: CustomLineCap.SetStrokeCaps(LineCap,LineCap)\n  fullName: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(LineCap,LineCap)\n- uid: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: StrokeJoin\n  nameWithType: CustomLineCap.StrokeJoin\n  fullName: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin\n- uid: System.Drawing.Drawing2D.LineJoin\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: LineJoin\n  nameWithType: LineJoin\n  fullName: System.Drawing.Drawing2D.LineJoin\n- uid: System.Drawing.Drawing2D.CustomLineCap.WidthScale\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: WidthScale\n  nameWithType: CustomLineCap.WidthScale\n  fullName: System.Drawing.Drawing2D.CustomLineCap.WidthScale\n- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: CustomLineCap\n  nameWithType: CustomLineCap.CustomLineCap\n- uid: System.Drawing.Drawing2D.CustomLineCap.BaseCap*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: BaseCap\n  nameWithType: CustomLineCap.BaseCap\n- uid: System.Drawing.Drawing2D.CustomLineCap.BaseInset*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: BaseInset\n  nameWithType: CustomLineCap.BaseInset\n- uid: System.Drawing.Drawing2D.CustomLineCap.Clone*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Clone\n  nameWithType: CustomLineCap.Clone\n- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Dispose\n  nameWithType: CustomLineCap.Dispose\n- uid: System.Drawing.Drawing2D.CustomLineCap.Finalize*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: Finalize\n  nameWithType: CustomLineCap.Finalize\n- uid: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: GetStrokeCaps\n  nameWithType: CustomLineCap.GetStrokeCaps\n- uid: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: SetStrokeCaps\n  nameWithType: CustomLineCap.SetStrokeCaps\n- uid: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: StrokeJoin\n  nameWithType: CustomLineCap.StrokeJoin\n- uid: System.Drawing.Drawing2D.CustomLineCap.WidthScale*\n  parent: System.Drawing.Drawing2D.CustomLineCap\n  isExternal: false\n  name: WidthScale\n  nameWithType: CustomLineCap.WidthScale\n"}