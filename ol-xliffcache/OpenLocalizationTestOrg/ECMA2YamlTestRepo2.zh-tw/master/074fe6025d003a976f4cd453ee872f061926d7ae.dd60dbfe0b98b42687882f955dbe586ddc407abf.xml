{"nodes":[{"pos":[386,455],"content":"Adds transactional capability when adding a new item to a collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds transactional capability when adding a new item to a collection.","pos":[0,69]}]},{"pos":[468,3011],"content":"The ICancelAddNew interface enables a collection to add a new item in an extensible way. The new item subsequently can be committed or rolled back. The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:      -   The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition.      -   Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.      -   The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed.      > [!NOTE] >  In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item. (Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.       There are two models that allow transactional addition of an item to a data-bound collection:      -   The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class. The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items. However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface. If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>.      -   The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and ICancelAddNew interfaces. In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ICancelAddNew interface enables a collection to add a new item in an extensible way.","pos":[0,88]},{"content":"The new item subsequently can be committed or rolled back.","pos":[89,147]},{"content":"The &lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt; method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:      -   The &lt;xref:System.ComponentModel.ICancelAddNew.EndNew%2A&gt; method will explicitly commit the pending addition.","pos":[148,450],"source":" The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:      -   The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition."},{"content":"-   Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.","pos":[456,584]},{"content":"-   The &lt;xref:System.ComponentModel.ICancelAddNew.CancelNew%2A&gt; method will roll back the pending addition if it has not already been committed.","pos":[590,734],"source":"      -   The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In some scenarios, such as Windows Forms complex data binding, the collection may receive &lt;xref:System.ComponentModel.ICancelAddNew.CancelNew%2A&gt; or &lt;xref:System.ComponentModel.ICancelAddNew.EndNew%2A&gt; calls for items other than the newly added item.","pos":[740,1003],"source":"      > [!NOTE] >  In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item."},{"content":"(Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.","pos":[1004,1142]},{"content":"There are two models that allow transactional addition of an item to a data-bound collection:      -   The older model relies directly on a collection that implements the &lt;xref:System.ComponentModel.IBindingList&gt; interface and is data-bound directly using the &lt;xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName&gt; class.","pos":[1149,1484],"source":"       There are two models that allow transactional addition of an item to a data-bound collection:      -   The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class."},{"content":"The &lt;xref:System.Windows.Forms.CurrencyManager.AddNew%2A&gt;, &lt;xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A&gt;, and &lt;xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A&gt; methods of the &lt;xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName&gt; class are responsible for transactional support for adding new items.","pos":[1485,1829],"source":" The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items."},{"content":"However, this functionality depends upon the items supporting transactional behavior through the &lt;xref:System.ComponentModel.IEditableObject&gt; interface.","pos":[1830,1982],"source":" However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface."},{"content":"If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to &lt;xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A&gt;.","pos":[1983,2169],"source":" If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>."},{"content":"-   The newer model supports a more robust data-binding scenario through the generic &lt;xref:System.ComponentModel.BindingList%601&gt; class, which implements the &lt;xref:System.ComponentModel.IBindingList&gt; and ICancelAddNew interfaces.","pos":[2175,2404],"source":"      -   The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and ICancelAddNew interfaces."},{"content":"In this case, the transactional support is managed by the &lt;xref:System.ComponentModel.BindingList%601&gt; collection directly.","pos":[2405,2528],"source":" In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly."}]},{"pos":[3493,3541],"content":"Discards a pending new item from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Discards a pending new item from the collection.","pos":[0,48]}]},{"pos":[3553,3818],"content":"The CancelNew method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CancelNew method rolls back a pending addition (&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;) of an item previously added to the collection at position <ph id=\"ph1\">`itemIndex`</ph>.","pos":[0,175],"source":"The CancelNew method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`."},{"content":"The index parameter is necessary because several new items can be simultaneously pending.","pos":[176,265]}]},{"pos":[3961,4027],"content":"The index of the item that was previously added to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the item that was previously added to the collection.","pos":[0,66]}]},{"pos":[4498,4543],"content":"Commits a pending new item to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Commits a pending new item to the collection.","pos":[0,45]}]},{"pos":[4555,4807],"content":"The EndNew commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.","needQuote":true,"needEscape":true,"nodes":[{"content":"The EndNew commits a pending addition (&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;) of an item previously added to the collection at position <ph id=\"ph1\">`itemIndex`</ph>.","pos":[0,162],"source":"The EndNew commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`."},{"content":"The index parameter is necessary because several new items can be simultaneously pending.","pos":[163,252]}]},{"pos":[4947,5013],"content":"The index of the item that was previously added to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the item that was previously added to the collection.","pos":[0,66]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ICancelAddNew\n  id: ICancelAddNew\n  children:\n  - System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  - System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  langs:\n  - csharp\n  name: ICancelAddNew\n  nameWithType: ICancelAddNew\n  fullName: System.ComponentModel.ICancelAddNew\n  type: Interface\n  summary: Adds transactional capability when adding a new item to a collection.\n  remarks: \"The ICancelAddNew interface enables a collection to add a new item in an extensible way. The new item subsequently can be committed or rolled back. The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:  \\n  \\n-   The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition.  \\n  \\n-   Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.  \\n  \\n-   The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed.  \\n  \\n> [!NOTE]\\n>  In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item. (Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.  \\n  \\n There are two models that allow transactional addition of an item to a data-bound collection:  \\n  \\n-   The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class. The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items. However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface. If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>.  \\n  \\n-   The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and ICancelAddNew interfaces. In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly.\"\n  syntax:\n    content: public interface ICancelAddNew\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  id: CancelNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  langs:\n  - csharp\n  name: CancelNew(Int32)\n  nameWithType: ICancelAddNew.CancelNew(Int32)\n  fullName: System.ComponentModel.ICancelAddNew.CancelNew(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Discards a pending new item from the collection.\n  remarks: The CancelNew method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.\n  syntax:\n    content: public void CancelNew (int itemIndex);\n    parameters:\n    - id: itemIndex\n      type: System.Int32\n      description: The index of the item that was previously added to the collection.\n  overload: System.ComponentModel.ICancelAddNew.CancelNew*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  id: EndNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  langs:\n  - csharp\n  name: EndNew(Int32)\n  nameWithType: ICancelAddNew.EndNew(Int32)\n  fullName: System.ComponentModel.ICancelAddNew.EndNew(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Commits a pending new item to the collection.\n  remarks: The EndNew commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.\n  syntax:\n    content: public void EndNew (int itemIndex);\n    parameters:\n    - id: itemIndex\n      type: System.Int32\n      description: The index of the item that was previously added to the collection.\n  overload: System.ComponentModel.ICancelAddNew.EndNew*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: CancelNew(Int32)\n  nameWithType: ICancelAddNew.CancelNew(Int32)\n  fullName: System.ComponentModel.ICancelAddNew.CancelNew(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: EndNew(Int32)\n  nameWithType: ICancelAddNew.EndNew(Int32)\n  fullName: System.ComponentModel.ICancelAddNew.EndNew(Int32)\n- uid: System.ComponentModel.ICancelAddNew.CancelNew*\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: CancelNew\n  nameWithType: ICancelAddNew.CancelNew\n- uid: System.ComponentModel.ICancelAddNew.EndNew*\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: EndNew\n  nameWithType: ICancelAddNew.EndNew\n"}