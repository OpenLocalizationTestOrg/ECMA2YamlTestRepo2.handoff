{"nodes":[{"pos":[337,409],"content":"Defines methods for objects that are managed by the hosting environment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines methods for objects that are managed by the hosting environment.","pos":[0,72]}]},{"pos":[422,1640],"content":"Objects must implement the IRegisteredObject interface in order to register with the hosting environment and have their lifetime managed by the hosting environment.       You can create an instance of a registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method on the application manager. The application manager returns the newly created object to the caller, which can then call a type-specific method on the object. During startup, the registered object should call the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A?displayProperty=fullName> method to complete registration of the object.       When the application manager needs to stop a registered object, it will call the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method.       Applications can have only one instance of a registered type. To create multiple instances of a registered type, use the factory pattern to create an object manager that is registered with the application and then manages the multiple instances. For an example of an object implementing the factory pattern, see the example for the <xref:System.Web.Hosting.ApplicationManager> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"Objects must implement the IRegisteredObject interface in order to register with the hosting environment and have their lifetime managed by the hosting environment.       You can create an instance of a registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method on the application manager. The application manager returns the newly created object to the caller, which can then call a type-specific method on the object. During startup, the registered object should call the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A?displayProperty=fullName> method to complete registration of the object.       When the application manager needs to stop a registered object, it will call the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method.       Applications can have only one instance of a registered type. To create multiple instances of a registered type, use the factory pattern to create an object manager that is registered with the application and then manages the multiple instances. For an example of an object implementing the factory pattern, see the example for the <xref:System.Web.Hosting.ApplicationManager> class.","pos":[0,1212],"nodes":[{"content":"Objects must implement the IRegisteredObject interface in order to register with the hosting environment and have their lifetime managed by the hosting environment.","pos":[0,164]},{"content":"You can create an instance of a registered object by calling the &lt;xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName&gt; method on the application manager.","pos":[171,356],"source":"       You can create an instance of a registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method on the application manager."},{"content":"The application manager returns the newly created object to the caller, which can then call a type-specific method on the object.","pos":[357,486]},{"content":"During startup, the registered object should call the &lt;xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A?displayProperty=fullName&gt; method to complete registration of the object.","pos":[487,675],"source":" During startup, the registered object should call the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A?displayProperty=fullName> method to complete registration of the object."},{"content":"When the application manager needs to stop a registered object, it will call the &lt;xref:System.Web.Hosting.IRegisteredObject.Stop%2A&gt; method.","pos":[682,822],"source":"       When the application manager needs to stop a registered object, it will call the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method."},{"content":"Applications can have only one instance of a registered type.","pos":[829,890]},{"content":"To create multiple instances of a registered type, use the factory pattern to create an object manager that is registered with the application and then manages the multiple instances.","pos":[891,1074]},{"content":"For an example of an object implementing the factory pattern, see the example for the &lt;xref:System.Web.Hosting.ApplicationManager&gt; class.","pos":[1075,1212],"source":" For an example of an object implementing the factory pattern, see the example for the <xref:System.Web.Hosting.ApplicationManager> class."}]}]},{"pos":[2119,2162],"content":"Requests a registered object to unregister.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests a registered object to unregister.","pos":[0,43]}]},{"pos":[2175,3264],"content":"The application manager will call the Stop method to ask a registered object to unregister. During processing of the Stop method, the registered object must call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A?displayProperty=fullName> method.       The Stop method is first called with the `immediate` parameter set to `false`. The object can either complete processing, call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method, and then return or it can return immediately and complete processing asynchronously before calling the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method.       If the registered object does not complete processing before the application manager's time-out period expires, the Stop method is called again with the `immediate` parameter set to `true`. When the `immediate` parameter is `true`, the registered object must call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method before returning; otherwise, its registration will be removed by the application manager.","needQuote":false,"needEscape":true,"nodes":[{"content":"The application manager will call the Stop method to ask a registered object to unregister.","pos":[0,91]},{"content":"During processing of the Stop method, the registered object must call the &lt;xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A?displayProperty=fullName&gt; method.","pos":[92,263],"source":" During processing of the Stop method, the registered object must call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A?displayProperty=fullName> method."},{"content":"The Stop method is first called with the <ph id=\"ph1\">`immediate`</ph> parameter set to <ph id=\"ph2\">`false`</ph>.","pos":[270,348],"source":"       The Stop method is first called with the `immediate` parameter set to `false`."},{"content":"The object can either complete processing, call the &lt;xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A&gt; method, and then return or it can return immediately and complete processing asynchronously before calling the &lt;xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A&gt; method.","pos":[349,649],"source":" The object can either complete processing, call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method, and then return or it can return immediately and complete processing asynchronously before calling the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method."},{"content":"If the registered object does not complete processing before the application manager's time-out period expires, the Stop method is called again with the <ph id=\"ph1\">`immediate`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[656,845],"source":"       If the registered object does not complete processing before the application manager's time-out period expires, the Stop method is called again with the `immediate` parameter set to `true`."},{"content":"When the <ph id=\"ph1\">`immediate`</ph> parameter is <ph id=\"ph2\">`true`</ph>, the registered object must call the &lt;xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A&gt; method before returning; otherwise, its registration will be removed by the application manager.","pos":[846,1085],"source":" When the `immediate` parameter is `true`, the registered object must call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method before returning; otherwise, its registration will be removed by the application manager."}]},{"pos":[3406,3640],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate the registered object should unregister from the hosting environment before returning; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the registered object should unregister from the hosting environment before returning; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Hosting.IRegisteredObject\n  id: IRegisteredObject\n  children:\n  - System.Web.Hosting.IRegisteredObject.Stop(System.Boolean)\n  langs:\n  - csharp\n  name: IRegisteredObject\n  nameWithType: IRegisteredObject\n  fullName: System.Web.Hosting.IRegisteredObject\n  type: Interface\n  summary: Defines methods for objects that are managed by the hosting environment.\n  remarks: \"Objects must implement the IRegisteredObject interface in order to register with the hosting environment and have their lifetime managed by the hosting environment.  \\n  \\n You can create an instance of a registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method on the application manager. The application manager returns the newly created object to the caller, which can then call a type-specific method on the object. During startup, the registered object should call the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A?displayProperty=fullName> method to complete registration of the object.  \\n  \\n When the application manager needs to stop a registered object, it will call the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method.  \\n  \\n Applications can have only one instance of a registered type. To create multiple instances of a registered type, use the factory pattern to create an object manager that is registered with the application and then manages the multiple instances. For an example of an object implementing the factory pattern, see the example for the <xref:System.Web.Hosting.ApplicationManager> class.\"\n  syntax:\n    content: public interface IRegisteredObject\n  implements: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.IRegisteredObject.Stop(System.Boolean)\n  id: Stop(System.Boolean)\n  parent: System.Web.Hosting.IRegisteredObject\n  langs:\n  - csharp\n  name: Stop(Boolean)\n  nameWithType: IRegisteredObject.Stop(Boolean)\n  fullName: System.Web.Hosting.IRegisteredObject.Stop(Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Requests a registered object to unregister.\n  remarks: \"The application manager will call the Stop method to ask a registered object to unregister. During processing of the Stop method, the registered object must call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A?displayProperty=fullName> method.  \\n  \\n The Stop method is first called with the `immediate` parameter set to `false`. The object can either complete processing, call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method, and then return or it can return immediately and complete processing asynchronously before calling the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method.  \\n  \\n If the registered object does not complete processing before the application manager's time-out period expires, the Stop method is called again with the `immediate` parameter set to `true`. When the `immediate` parameter is `true`, the registered object must call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method before returning; otherwise, its registration will be removed by the application manager.\"\n  syntax:\n    content: public void Stop (bool immediate);\n    parameters:\n    - id: immediate\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the registered object should unregister from the hosting environment before returning; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Hosting.IRegisteredObject.Stop*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Hosting.IRegisteredObject.Stop(System.Boolean)\n  parent: System.Web.Hosting.IRegisteredObject\n  isExternal: false\n  name: Stop(Boolean)\n  nameWithType: IRegisteredObject.Stop(Boolean)\n  fullName: System.Web.Hosting.IRegisteredObject.Stop(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Hosting.IRegisteredObject.Stop*\n  parent: System.Web.Hosting.IRegisteredObject\n  isExternal: false\n  name: Stop\n  nameWithType: IRegisteredObject.Stop\n"}