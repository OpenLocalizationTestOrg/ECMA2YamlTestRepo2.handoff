{"nodes":[{"pos":[426,651],"content":"Represents a set of command-related properties that are used to fill the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and update a data source, and is implemented by .NET Framework data providers that access relational databases.","needQuote":true,"needEscape":true,"source":"Represents a set of command-related properties that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update a data source, and is implemented by .NET Framework data providers that access relational databases."},{"pos":[3605,3674],"content":"Gets or sets an SQL statement for deleting records from the data set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement for deleting records from the data set.","pos":[0,69]}]},{"pos":[3687,4515],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When DeleteCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the DeleteCommand can be generated automatically if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[0,283],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional commands that you do not set are generated by the CommandBuilder.","pos":[284,370]},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[371,473],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[474,581],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When DeleteCommand is assigned to a previously created &lt;xref:System.Data.IDbCommand&gt;, the &lt;xref:System.Data.IDbCommand&gt; is not cloned.","pos":[588,722],"source":"       When DeleteCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned."},{"content":"The DeleteCommand maintains a reference to the previously created &lt;xref:System.Data.IDbCommand&gt; object.","pos":[723,826],"source":" The DeleteCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object."}]},{"pos":[5287,5464],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to delete records in the data source for deleted rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set."},{"pos":[5887,5965],"content":"Gets or sets an SQL statement used to insert new records into the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement used to insert new records into the data source.","pos":[0,78]}]},{"pos":[5978,7061],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When InsertCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.      > [!NOTE] >  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.IDbCommand> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the InsertCommand can be generated automatically if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[0,283],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional commands that you do not set are generated by the CommandBuilder.","pos":[284,370]},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[371,473],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[474,581],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When InsertCommand is assigned to a previously created &lt;xref:System.Data.IDbCommand&gt;, the &lt;xref:System.Data.IDbCommand&gt; is not cloned.","pos":[588,722],"source":"       When InsertCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned."},{"content":"The InsertCommand maintains a reference to the previously created &lt;xref:System.Data.IDbCommand&gt; object.","pos":[723,826],"source":" The InsertCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be added to the &lt;xref:System.Data.DataSet&gt; depending on how you set the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.IDbCommand&gt; object.","pos":[832,1078],"source":"      > [!NOTE] >  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.IDbCommand> object."}]},{"pos":[7833,8006],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to insert records in the data source for new rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set."},{"pos":[8429,8501],"content":"Gets or sets an SQL statement used to select records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement used to select records in the data source.","pos":[0,72]}]},{"pos":[8514,8890],"content":"When SelectCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.       If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"When SelectCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.       If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.","pos":[0,374],"nodes":[{"content":"When SelectCommand is assigned to a previously created &lt;xref:System.Data.IDbCommand&gt;, the &lt;xref:System.Data.IDbCommand&gt; is not cloned.","pos":[0,134],"source":"When SelectCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned."},{"content":"The SelectCommand maintains a reference to the previously created &lt;xref:System.Data.IDbCommand&gt; object.","pos":[135,238],"source":" The SelectCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object."},{"content":"If the SelectCommand does not return any rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, and no exception is raised.","pos":[245,374],"source":"       If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised."}]}]},{"pos":[9662,9842],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to select records from data source for placement in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set."},{"pos":[10265,10337],"content":"Gets or sets an SQL statement used to update records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement used to update records in the data source.","pos":[0,72]}]},{"pos":[10350,11298],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When UpdateCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.      > [!NOTE] >  If execution of this command returns rows, these rows are added to the <xref:System.Data.DataSet>.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the UpdateCommand can be generated automatically if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[0,283],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional commands that you do not set are generated by the CommandBuilder.","pos":[284,370]},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[371,473],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[474,581],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When UpdateCommand is assigned to a previously created &lt;xref:System.Data.IDbCommand&gt;, the &lt;xref:System.Data.IDbCommand&gt; is not cloned.","pos":[588,722],"source":"       When UpdateCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned."},{"content":"The UpdateCommand maintains a reference to the previously created &lt;xref:System.Data.IDbCommand&gt; object.","pos":[723,826],"source":" The UpdateCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows are added to the &lt;xref:System.Data.DataSet&gt;.","pos":[832,943],"source":"      > [!NOTE] >  If execution of this command returns rows, these rows are added to the <xref:System.Data.DataSet>."}]},{"pos":[12076,12254],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to update records in the data source for modified rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.IDbDataAdapter\n  id: IDbDataAdapter\n  children:\n  - System.Data.IDbDataAdapter.DeleteCommand\n  - System.Data.IDbDataAdapter.InsertCommand\n  - System.Data.IDbDataAdapter.SelectCommand\n  - System.Data.IDbDataAdapter.UpdateCommand\n  langs:\n  - csharp\n  name: IDbDataAdapter\n  nameWithType: IDbDataAdapter\n  fullName: System.Data.IDbDataAdapter\n  type: Interface\n  summary: Represents a set of command-related properties that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update a data source, and is implemented by .NET Framework data providers that access relational databases.\n  remarks: \"The IDbDataAdapter interface inherits from the <xref:System.Data.IDataAdapter> interface and allows an object to create a DataAdapter designed for use with a relational database. The IDbDataAdapter interface and, optionally, the utility class, <xref:System.Data.Common.DbDataAdapter>, allow an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>. For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/add/includes/ajax-current-ext-md.md). For more information about implementing .NET Framework data providers, see [&#91;\\\\<topic://cpconimplementingnetdataprovider>&#93;](http://msdn.microsoft.com/en-us/a9fa1926-071b-4c6f-997d-a16bac633852).  \\n  \\n An application does not create an instance of the IDbDataAdapter interface directly, but creates an instance of a class that inherits IDbDataAdapter and <xref:System.Data.Common.DbDataAdapter>.  \\n  \\n Classes that inherit IDbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbDataAdapter interface defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the <xref:System.Data.Common.DbDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataTable> as a parameter. In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property and the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.\"\n  example:\n  - \"The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select records from a data source. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \\n  \\n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idbdataada_1.vb)]\\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idbdataada_1.cs)]\"\n  syntax:\n    content: 'public interface IDbDataAdapter : System.Data.IDataAdapter'\n  implements:\n  - System.Data.IDataAdapter\n  platform:\n  - net462\n- uid: System.Data.IDbDataAdapter.DeleteCommand\n  id: DeleteCommand\n  parent: System.Data.IDbDataAdapter\n  langs:\n  - csharp\n  name: DeleteCommand\n  nameWithType: IDbDataAdapter.DeleteCommand\n  fullName: System.Data.IDbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an SQL statement for deleting records from the data set.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When DeleteCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.\"\n  example:\n  - \"The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_2_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_2_1.vb)]\"\n  syntax:\n    content: public System.Data.IDbCommand DeleteCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set.\n  overload: System.Data.IDbDataAdapter.DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbDataAdapter.InsertCommand\n  id: InsertCommand\n  parent: System.Data.IDbDataAdapter\n  langs:\n  - csharp\n  name: InsertCommand\n  nameWithType: IDbDataAdapter.InsertCommand\n  fullName: System.Data.IDbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an SQL statement used to insert new records into the data source.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When InsertCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.IDbCommand> object.\"\n  example:\n  - \"The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_3_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_3_1.vb)]\"\n  syntax:\n    content: public System.Data.IDbCommand InsertCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set.\n  overload: System.Data.IDbDataAdapter.InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbDataAdapter.SelectCommand\n  id: SelectCommand\n  parent: System.Data.IDbDataAdapter\n  langs:\n  - csharp\n  name: SelectCommand\n  nameWithType: IDbDataAdapter.SelectCommand\n  fullName: System.Data.IDbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an SQL statement used to select records in the data source.\n  remarks: \"When SelectCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  \\n  \\n If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.\"\n  example:\n  - \"The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_0_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_0_1.vb)]\"\n  syntax:\n    content: public System.Data.IDbCommand SelectCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set.\n  overload: System.Data.IDbDataAdapter.SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbDataAdapter.UpdateCommand\n  id: UpdateCommand\n  parent: System.Data.IDbDataAdapter\n  langs:\n  - csharp\n  name: UpdateCommand\n  nameWithType: IDbDataAdapter.UpdateCommand\n  fullName: System.Data.IDbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an SQL statement used to update records in the data source.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When UpdateCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, these rows are added to the <xref:System.Data.DataSet>.\"\n  example:\n  - \"The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_1_1.cs)]\\n [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_1_1.vb)]\"\n  syntax:\n    content: public System.Data.IDbCommand UpdateCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set.\n  overload: System.Data.IDbDataAdapter.UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.IDbDataAdapter.DeleteCommand\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: IDbDataAdapter.DeleteCommand\n  fullName: System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n- uid: System.Data.IDbDataAdapter.InsertCommand\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: IDbDataAdapter.InsertCommand\n  fullName: System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.IDbDataAdapter.SelectCommand\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: IDbDataAdapter.SelectCommand\n  fullName: System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.IDbDataAdapter.UpdateCommand\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: IDbDataAdapter.UpdateCommand\n  fullName: System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.IDbDataAdapter.DeleteCommand*\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: IDbDataAdapter.DeleteCommand\n- uid: System.Data.IDbDataAdapter.InsertCommand*\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: IDbDataAdapter.InsertCommand\n- uid: System.Data.IDbDataAdapter.SelectCommand*\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: IDbDataAdapter.SelectCommand\n- uid: System.Data.IDbDataAdapter.UpdateCommand*\n  parent: System.Data.IDbDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: IDbDataAdapter.UpdateCommand\n"}