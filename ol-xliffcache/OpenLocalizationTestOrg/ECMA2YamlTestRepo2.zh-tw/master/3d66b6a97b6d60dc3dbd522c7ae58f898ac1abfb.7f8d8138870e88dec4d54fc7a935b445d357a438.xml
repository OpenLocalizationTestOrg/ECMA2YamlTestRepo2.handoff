{"nodes":[{"pos":[2395,2472],"content":"Provides access to the properties needed to define a Message Queuing message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to the properties needed to define a Message Queuing message.","pos":[0,77]}]},{"pos":[2485,6013],"content":"Use the Message class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.       <xref:System.Messaging.MessageQueue> uses the Message class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> methods create a new instance of the Message class and set the instance's properties. The Message class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages. When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved.       The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue. You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue. The types of settings include formatter, label, encryption, and authentication. You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages. Using a Message instance to send a message to the queue gives you the flexibility to access and modify many of these properties—either for a single message or on a message-by-message basis. Message properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.       Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties. When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected.       The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify. The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property. You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message. You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>.       The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> property apply only to messages that are not of type Message. If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a Message instance sent to that queue cause these default properties to be ignored.       For a list of initial property values for an instance of Message, see the <xref:System.Messaging.Message.%23ctor%2A> constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the Message class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.       <xref:System.Messaging.MessageQueue> uses the Message class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> methods create a new instance of the Message class and set the instance's properties. The Message class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages. When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved.       The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue. You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue. The types of settings include formatter, label, encryption, and authentication. You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages. Using a Message instance to send a message to the queue gives you the flexibility to access and modify many of these properties—either for a single message or on a message-by-message basis. Message properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.       Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties. When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected.       The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify. The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property. You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message. You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>.       The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> property apply only to messages that are not of type Message. If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a Message instance sent to that queue cause these default properties to be ignored.       For a list of initial property values for an instance of Message, see the <xref:System.Messaging.Message.%23ctor%2A> constructor.","pos":[0,3516],"nodes":[{"content":"Use the Message class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.","pos":[0,146]},{"content":"&lt;xref:System.Messaging.MessageQueue&gt; uses the Message class when it peeks or receives messages from queues, because both the &lt;xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName&gt; and &lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt; methods create a new instance of the Message class and set the instance's properties.","pos":[153,510],"source":"       <xref:System.Messaging.MessageQueue> uses the Message class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> methods create a new instance of the Message class and set the instance's properties."},{"content":"The Message class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages.","pos":[511,668]},{"content":"When &lt;xref:System.Messaging.MessageQueue&gt; peeks or receives a message from a queue, its &lt;xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A&gt; property determines which of the message's properties are retrieved.","pos":[669,891],"source":" When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved."},{"content":"The &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method allows you to specify any object type for a message being sent to that queue.","pos":[898,1076],"source":"       The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue."},{"content":"You can use the &lt;xref:System.Messaging.MessageQueue&gt; instance's &lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt; property to specify settings for generic messages sent to the queue.","pos":[1077,1273],"source":" You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue."},{"content":"The types of settings include formatter, label, encryption, and authentication.","pos":[1274,1353]},{"content":"You can also specify values for the appropriate &lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt; members when you coordinate your messaging application to respond to acknowledgment and report messages.","pos":[1354,1570],"source":" You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages."},{"content":"Using a Message instance to send a message to the queue gives you the flexibility to access and modify many of these properties—either for a single message or on a message-by-message basis.","pos":[1571,1760]},{"content":"Message properties take precedence over &lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;.","pos":[1761,1865],"source":" Message properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>."},{"content":"Message data is stored in the &lt;xref:System.Messaging.Message.Body%2A&gt; property and to a lesser extent, the &lt;xref:System.Messaging.Message.AppSpecific%2A&gt; and &lt;xref:System.Messaging.Message.Extension%2A&gt; properties.","pos":[1872,2086],"source":"       Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties."},{"content":"When message data is encrypted, serialized, or deserialized, only the contents of the &lt;xref:System.Messaging.Message.Body%2A&gt; property are affected.","pos":[2087,2235],"source":" When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected."},{"content":"The contents of the &lt;xref:System.Messaging.Message.Body%2A&gt; property are serialized when the message is sent, using the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property you specify.","pos":[2242,2428],"source":"       The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify."},{"content":"The serialized contents are found in the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property.","pos":[2429,2525],"source":" The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property."},{"content":"You can also set the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property directly, for example, to send a file as the data content of a message.","pos":[2526,2673],"source":" You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message."},{"content":"You can change the &lt;xref:System.Messaging.Message.Body%2A&gt; or &lt;xref:System.Messaging.Message.Formatter%2A&gt; properties at any time before sending the message, and the data will be serialized appropriately when you call &lt;xref:System.Messaging.MessageQueue.Send%2A&gt;.","pos":[2674,2937],"source":" You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>."},{"content":"The properties defined by the &lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName&gt; property apply only to messages that are not of type Message.","pos":[2944,3124],"source":"       The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> property apply only to messages that are not of type Message."},{"content":"If you specify the &lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt; property for a &lt;xref:System.Messaging.MessageQueue&gt;, the identically named properties in a Message instance sent to that queue cause these default properties to be ignored.","pos":[3125,3380],"source":" If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a Message instance sent to that queue cause these default properties to be ignored."},{"content":"For a list of initial property values for an instance of Message, see the &lt;xref:System.Messaging.Message.%23ctor%2A&gt; constructor.","pos":[3387,3516],"source":"       For a list of initial property values for an instance of Message, see the <xref:System.Messaging.Message.%23ctor%2A> constructor."}]}]},{"pos":[8273,8378],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an empty body.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Messaging.Message\"></xref> class with an empty body."},{"pos":[8391,12117],"content":"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that has an empty body.       Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. The <xref:System.Messaging.Message.Body%2A> property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. The body is serialized using the <xref:System.Messaging.Message.Formatter%2A> property's value at the time the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance.       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.       The following table shows initial property values for an instance of <xref:System.Messaging.Message>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.Message.AppSpecific%2A>|0|   |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|   |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|   |<xref:System.Messaging.Message.Body%2A>|`null`|   |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|   |<xref:System.Messaging.Message.BodyType%2A>|0|   |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|   |<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|   |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.Message.Recoverable%2A>|`false`|   |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|   |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseTracing%2A>|`false`|","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this overload to create a new instance of the &lt;xref:System.Messaging.Message&gt; class that has an empty body.","pos":[0,111],"source":"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that has an empty body."},{"content":"Specify either the &lt;xref:System.Messaging.Message.Body%2A&gt; property or the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property before sending the &lt;xref:System.Messaging.Message&gt; object.","pos":[118,306],"source":"       Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object."},{"content":"The &lt;xref:System.Messaging.Message.Body%2A&gt; property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.","pos":[307,485],"source":" The <xref:System.Messaging.Message.Body%2A> property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object."},{"content":"Unless you write the contents of the message directly to the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property, set the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property before you send the message.","pos":[492,699],"source":"       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message."},{"content":"The body is serialized using the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property's value at the time the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method is called on the &lt;xref:System.Messaging.MessageQueue&gt; instance.","pos":[700,926],"source":" The body is serialized using the <xref:System.Messaging.Message.Formatter%2A> property's value at the time the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance."},{"content":"The &lt;xref:System.Messaging.XmlMessageFormatter&gt; is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.","pos":[933,1103],"source":"       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; and &lt;xref:System.Messaging.BinaryMessageFormatter&gt; serialize the data into binary representation.","pos":[1104,1253],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; is used when sending or receiving COM components.","pos":[1254,1355],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components."},{"content":"The following table shows initial property values for an instance of &lt;xref:System.Messaging.Message&gt;.","pos":[1362,1463],"source":"       The following table shows initial property values for an instance of <xref:System.Messaging.Message>."},{"content":"|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt;|<ph id=\"ph1\">`AcknowledgeType.None`</ph>|   |&lt;xref:System.Messaging.Message.AdministrationQueue%2A&gt;|<ph id=\"ph2\">`null`</ph>|   |&lt;xref:System.Messaging.Message.AppSpecific%2A&gt;|0|   |&lt;xref:System.Messaging.Message.AttachSenderId%2A&gt;|<ph id=\"ph3\">`true`</ph>|   |&lt;xref:System.Messaging.Message.AuthenticationProviderName%2A&gt;|Microsoft Base Cryptographic Provider version 1.0|   |&lt;xref:System.Messaging.Message.AuthenticationProviderType%2A&gt;|<ph id=\"ph4\">`CryptoProviderType.RSA_FULL`</ph>|   |&lt;xref:System.Messaging.Message.Body%2A&gt;|<ph id=\"ph5\">`null`</ph>|   |&lt;xref:System.Messaging.Message.BodyStream%2A&gt;|<ph id=\"ph6\">`Stream.null`</ph>|   |&lt;xref:System.Messaging.Message.BodyType%2A&gt;|0|   |&lt;xref:System.Messaging.Message.ConnectorType%2A&gt;|<ph id=\"ph7\">`Guid.Empty`</ph>|   |&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;|An empty string (\"\")|   |&lt;xref:System.Messaging.Message.DestinationSymmetricKey%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.DigitalSignature%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.EncryptionAlgorithm%2A&gt;|<ph id=\"ph8\">`EncryptionAlgorithm.RC2`</ph>|   |&lt;xref:System.Messaging.Message.Extension%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.Formatter%2A&gt;|<ph id=\"ph9\">`XmlMessageFormatter`</ph>|   |&lt;xref:System.Messaging.Message.HashAlgorithm%2A&gt;|<ph id=\"ph10\">`HashAlgorithm.MD5`</ph>|   |&lt;xref:System.Messaging.Message.Label%2A&gt;|An empty string (\"\")|   |&lt;xref:System.Messaging.Message.Priority%2A&gt;|<ph id=\"ph11\">`MessagePriority.Normal`</ph>|   |&lt;xref:System.Messaging.Message.Recoverable%2A&gt;|<ph id=\"ph12\">`false`</ph>|   |&lt;xref:System.Messaging.Message.ResponseQueue%2A&gt;|<ph id=\"ph13\">`null`</ph>|   |&lt;xref:System.Messaging.Message.SenderCertificate%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt;|<ph id=\"ph14\">`Message.InfiniteTimeout`</ph>|   |&lt;xref:System.Messaging.Message.TimeToReachQueue%2A&gt;|<ph id=\"ph15\">`Message.InfiniteTimeout`</ph>|   |&lt;xref:System.Messaging.Message.TransactionStatusQueue%2A&gt;|<ph id=\"ph16\">`null`</ph>|   |&lt;xref:System.Messaging.Message.UseAuthentication%2A&gt;|<ph id=\"ph17\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt;|<ph id=\"ph18\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseEncryption%2A&gt;|<ph id=\"ph19\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseJournalQueue%2A&gt;|<ph id=\"ph20\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseTracing%2A&gt;|<ph id=\"ph21\">`false`</ph><ph id=\"ph22\">|</ph>","pos":[1469,3681],"source":"      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.Message.AppSpecific%2A>|0|   |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|   |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|   |<xref:System.Messaging.Message.Body%2A>|`null`|   |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|   |<xref:System.Messaging.Message.BodyType%2A>|0|   |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|   |<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|   |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.Message.Recoverable%2A>|`false`|   |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|   |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseTracing%2A>|`false`|"}]},{"pos":[13079,13297],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the <bpt id=\"p2\">&lt;xref href=\"System.Messaging.XmlMessageFormatter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to serialize the specified object into the body of the message.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Messaging.Message\"></xref> class, using the <xref href=\"System.Messaging.XmlMessageFormatter\"></xref> to serialize the specified object into the body of the message."},{"pos":[13310,16909],"content":"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter. The `body` parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object. The body is serialized using the <xref:System.Messaging.XmlMessageFormatter> unless you change the <xref:System.Messaging.Message.Formatter%2A> property before the <xref:System.Messaging.Message> is sent. If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.       The following table shows initial property values for an instance of <xref:System.Messaging.Message>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.Message.AppSpecific%2A>|0|   |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|   |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|   |<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|   |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|   |<xref:System.Messaging.Message.BodyType%2A>|0|   |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|   |<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|   |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.Message.Recoverable%2A>|`false`|   |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|   |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseTracing%2A>|`false`|","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this overload to create a new instance of the &lt;xref:System.Messaging.Message&gt; class that contains the &lt;xref:System.Messaging.Message.Body%2A&gt; specified by the <ph id=\"ph1\">`body`</ph> parameter.","pos":[0,180],"source":"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter."},{"content":"The <ph id=\"ph1\">`body`</ph> parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.","pos":[181,327],"source":" The `body` parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object."},{"content":"The body is serialized using the &lt;xref:System.Messaging.XmlMessageFormatter&gt; unless you change the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property before the &lt;xref:System.Messaging.Message&gt; is sent.","pos":[328,532],"source":" The body is serialized using the <xref:System.Messaging.XmlMessageFormatter> unless you change the <xref:System.Messaging.Message.Formatter%2A> property before the <xref:System.Messaging.Message> is sent."},{"content":"If you change the &lt;xref:System.Messaging.Message.Body%2A&gt; or &lt;xref:System.Messaging.Message.Formatter%2A&gt; property at any time before calling &lt;xref:System.Messaging.MessageQueue.Send%2A&gt;, the message will be serialized according to the new property value.","pos":[533,788],"source":" If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value."},{"content":"The &lt;xref:System.Messaging.XmlMessageFormatter&gt; is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.","pos":[795,965],"source":"       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; and &lt;xref:System.Messaging.BinaryMessageFormatter&gt; serialize the data into binary representation.","pos":[966,1115],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; is used when sending or receiving COM components.","pos":[1116,1217],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components."},{"content":"The following table shows initial property values for an instance of &lt;xref:System.Messaging.Message&gt;.","pos":[1224,1325],"source":"       The following table shows initial property values for an instance of <xref:System.Messaging.Message>."},{"content":"|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt;|<ph id=\"ph1\">`AcknowledgeType.None`</ph>|   |&lt;xref:System.Messaging.Message.AdministrationQueue%2A&gt;|<ph id=\"ph2\">`null`</ph>|   |&lt;xref:System.Messaging.Message.AppSpecific%2A&gt;|0|   |&lt;xref:System.Messaging.Message.AttachSenderId%2A&gt;|<ph id=\"ph3\">`true`</ph>|   |&lt;xref:System.Messaging.Message.AuthenticationProviderName%2A&gt;|Microsoft Base Cryptographic Provider version 1.0|   |&lt;xref:System.Messaging.Message.AuthenticationProviderType%2A&gt;|<ph id=\"ph4\">`CryptoProviderType.RSA_FULL`</ph>|   |&lt;xref:System.Messaging.Message.Body%2A&gt;|The <ph id=\"ph5\">`body`</ph> parameter.|   |&lt;xref:System.Messaging.Message.BodyStream%2A&gt;|<ph id=\"ph6\">`Stream.null`</ph>|   |&lt;xref:System.Messaging.Message.BodyType%2A&gt;|0|   |&lt;xref:System.Messaging.Message.ConnectorType%2A&gt;|<ph id=\"ph7\">`Guid.Empty`</ph>|   |&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;|An empty string (\"\")|   |&lt;xref:System.Messaging.Message.DestinationSymmetricKey%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.DigitalSignature%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.EncryptionAlgorithm%2A&gt;|<ph id=\"ph8\">`EncryptionAlgorithm.RC2`</ph>|   |&lt;xref:System.Messaging.Message.Extension%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.Formatter%2A&gt;|<ph id=\"ph9\">`XmlMessageFormatter`</ph>|   |&lt;xref:System.Messaging.Message.HashAlgorithm%2A&gt;|<ph id=\"ph10\">`HashAlgorithm.MD5`</ph>|   |&lt;xref:System.Messaging.Message.Label%2A&gt;|An empty string (\"\")|   |&lt;xref:System.Messaging.Message.Priority%2A&gt;|<ph id=\"ph11\">`MessagePriority.Normal`</ph>|   |&lt;xref:System.Messaging.Message.Recoverable%2A&gt;|<ph id=\"ph12\">`false`</ph>|   |&lt;xref:System.Messaging.Message.ResponseQueue%2A&gt;|<ph id=\"ph13\">`null`</ph>|   |&lt;xref:System.Messaging.Message.SenderCertificate%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt;|<ph id=\"ph14\">`Message.InfiniteTimeout`</ph>|   |&lt;xref:System.Messaging.Message.TimeToReachQueue%2A&gt;|<ph id=\"ph15\">`Message.InfiniteTimeout`</ph>|   |&lt;xref:System.Messaging.Message.TransactionStatusQueue%2A&gt;|<ph id=\"ph16\">`null`</ph>|   |&lt;xref:System.Messaging.Message.UseAuthentication%2A&gt;|<ph id=\"ph17\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt;|<ph id=\"ph18\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseEncryption%2A&gt;|<ph id=\"ph19\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseJournalQueue%2A&gt;|<ph id=\"ph20\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseTracing%2A&gt;|<ph id=\"ph21\">`false`</ph><ph id=\"ph22\">|</ph>","pos":[1331,3558],"source":"      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.Message.AppSpecific%2A>|0|   |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|   |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|   |<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|   |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|   |<xref:System.Messaging.Message.BodyType%2A>|0|   |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|   |<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|   |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.Message.Recoverable%2A>|`false`|   |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|   |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseTracing%2A>|`false`|"}]},{"pos":[17448,17505],"content":"The object to be serialized into the body of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to be serialized into the body of the message.","pos":[0,57]}]},{"pos":[18064,18243],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified formatter to serialize the specified object into the body of the message.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Messaging.Message\"></xref> class using the specified formatter to serialize the specified object into the body of the message."},{"pos":[18256,21707],"content":"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter and that uses any valid formatter to serialize the body. The `body` parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object. If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.       The following table shows initial property values for an instance of <xref:System.Messaging.Message>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.Message.AppSpecific%2A>|0|   |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|   |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|   |<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|   |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|   |<xref:System.Messaging.Message.BodyType%2A>|0|   |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|   |<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.Formatter%2A>|The `formatter` parameter.|   |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.Message.Recoverable%2A>|`false`|   |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|   |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseTracing%2A>|`false`|","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this overload to create a new instance of the &lt;xref:System.Messaging.Message&gt; class that contains the &lt;xref:System.Messaging.Message.Body%2A&gt; specified by the <ph id=\"ph1\">`body`</ph> parameter and that uses any valid formatter to serialize the body.","pos":[0,236],"source":"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter and that uses any valid formatter to serialize the body."},{"content":"The <ph id=\"ph1\">`body`</ph> parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.","pos":[237,379],"source":" The `body` parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object."},{"content":"If you change the &lt;xref:System.Messaging.Message.Body%2A&gt; or &lt;xref:System.Messaging.Message.Formatter%2A&gt; property at any time before calling &lt;xref:System.Messaging.MessageQueue.Send%2A&gt;, the message will be serialized according to the new property value.","pos":[380,635],"source":" If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value."},{"content":"The &lt;xref:System.Messaging.XmlMessageFormatter&gt; is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.","pos":[642,812],"source":"       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; and &lt;xref:System.Messaging.BinaryMessageFormatter&gt; serialize the data into binary representation.","pos":[813,962],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; is used when sending or receiving COM components.","pos":[963,1064],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components."},{"content":"The following table shows initial property values for an instance of &lt;xref:System.Messaging.Message&gt;.","pos":[1071,1172],"source":"       The following table shows initial property values for an instance of <xref:System.Messaging.Message>."},{"content":"|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt;|<ph id=\"ph1\">`AcknowledgeType.None`</ph>|   |&lt;xref:System.Messaging.Message.AdministrationQueue%2A&gt;|<ph id=\"ph2\">`null`</ph>|   |&lt;xref:System.Messaging.Message.AppSpecific%2A&gt;|0|   |&lt;xref:System.Messaging.Message.AttachSenderId%2A&gt;|<ph id=\"ph3\">`true`</ph>|   |&lt;xref:System.Messaging.Message.AuthenticationProviderName%2A&gt;|Microsoft Base Cryptographic Provider version 1.0|   |&lt;xref:System.Messaging.Message.AuthenticationProviderType%2A&gt;|<ph id=\"ph4\">`CryptoProviderType.RSA_FULL`</ph>|   |&lt;xref:System.Messaging.Message.Body%2A&gt;|The <ph id=\"ph5\">`body`</ph> parameter.|   |&lt;xref:System.Messaging.Message.BodyStream%2A&gt;|<ph id=\"ph6\">`Stream.null`</ph>|   |&lt;xref:System.Messaging.Message.BodyType%2A&gt;|0|   |&lt;xref:System.Messaging.Message.ConnectorType%2A&gt;|<ph id=\"ph7\">`Guid.Empty`</ph>|   |&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;|An empty string (\"\")|   |&lt;xref:System.Messaging.Message.DestinationSymmetricKey%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.DigitalSignature%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.EncryptionAlgorithm%2A&gt;|<ph id=\"ph8\">`EncryptionAlgorithm.RC2`</ph>|   |&lt;xref:System.Messaging.Message.Extension%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.Formatter%2A&gt;|The <ph id=\"ph9\">`formatter`</ph> parameter.|   |&lt;xref:System.Messaging.Message.HashAlgorithm%2A&gt;|<ph id=\"ph10\">`HashAlgorithm.MD5`</ph>|   |&lt;xref:System.Messaging.Message.Label%2A&gt;|An empty string (\"\")|   |&lt;xref:System.Messaging.Message.Priority%2A&gt;|<ph id=\"ph11\">`MessagePriority.Normal`</ph>|   |&lt;xref:System.Messaging.Message.Recoverable%2A&gt;|<ph id=\"ph12\">`false`</ph>|   |&lt;xref:System.Messaging.Message.ResponseQueue%2A&gt;|<ph id=\"ph13\">`null`</ph>|   |&lt;xref:System.Messaging.Message.SenderCertificate%2A&gt;|A zero-length array of bytes|   |&lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt;|<ph id=\"ph14\">`Message.InfiniteTimeout`</ph>|   |&lt;xref:System.Messaging.Message.TimeToReachQueue%2A&gt;|<ph id=\"ph15\">`Message.InfiniteTimeout`</ph>|   |&lt;xref:System.Messaging.Message.TransactionStatusQueue%2A&gt;|<ph id=\"ph16\">`null`</ph>|   |&lt;xref:System.Messaging.Message.UseAuthentication%2A&gt;|<ph id=\"ph17\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt;|<ph id=\"ph18\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseEncryption%2A&gt;|<ph id=\"ph19\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseJournalQueue%2A&gt;|<ph id=\"ph20\">`false`</ph>|   |&lt;xref:System.Messaging.Message.UseTracing%2A&gt;|<ph id=\"ph21\">`false`</ph><ph id=\"ph22\">|</ph>","pos":[1178,3410],"source":"      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.Message.AppSpecific%2A>|0|   |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|   |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|   |<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|   |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|   |<xref:System.Messaging.Message.BodyType%2A>|0|   |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|   |<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.Formatter%2A>|The `formatter` parameter.|   |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|   |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.Message.Recoverable%2A>|`false`|   |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|   |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|   |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.Message.UseTracing%2A>|`false`|"}]},{"pos":[22205,22262],"content":"The object to be serialized into the body of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to be serialized into the body of the message.","pos":[0,57]}]},{"pos":[22349,22477],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Messaging.IMessageFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the formatter with which to serialize the message body.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Messaging.IMessageFormatter\"></xref> that specifies the formatter with which to serialize the message body."},{"pos":[22897,22987],"content":"Gets or sets the type of acknowledgment message to be returned to the sending application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the type of acknowledgment message to be returned to the sending application.","pos":[0,90]}]},{"pos":[23000,24045],"content":"The AcknowledgeType property specifies the type of acknowledgment messages requested by the sending application. Set the AcknowledgeType property before sending the message to request notification of certain occurrences—for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.       Message Queuing returns notification by sending acknowledgment messages to the <xref:System.Messaging.Message.AdministrationQueue%2A> property specified by the original message. An acknowledgment message's <xref:System.Messaging.Message.Acknowledgment%2A> property indicates the type of acknowledgment that it represents. For example, if an acknowledgment message was sent because a message did not reach the destination before the <xref:System.Messaging.Message.TimeToReachQueue%2A> interval expired, the <xref:System.Messaging.Message.Acknowledgment%2A> property of the acknowledgment message would contain the value `ReachQueueTimeout`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The AcknowledgeType property specifies the type of acknowledgment messages requested by the sending application.","pos":[0,112]},{"content":"Set the AcknowledgeType property before sending the message to request notification of certain occurrences—for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.","pos":[113,397]},{"content":"Message Queuing returns notification by sending acknowledgment messages to the &lt;xref:System.Messaging.Message.AdministrationQueue%2A&gt; property specified by the original message.","pos":[404,581],"source":"       Message Queuing returns notification by sending acknowledgment messages to the <xref:System.Messaging.Message.AdministrationQueue%2A> property specified by the original message."},{"content":"An acknowledgment message's &lt;xref:System.Messaging.Message.Acknowledgment%2A&gt; property indicates the type of acknowledgment that it represents.","pos":[582,725],"source":" An acknowledgment message's <xref:System.Messaging.Message.Acknowledgment%2A> property indicates the type of acknowledgment that it represents."},{"content":"For example, if an acknowledgment message was sent because a message did not reach the destination before the &lt;xref:System.Messaging.Message.TimeToReachQueue%2A&gt; interval expired, the &lt;xref:System.Messaging.Message.Acknowledgment%2A&gt; property of the acknowledgment message would contain the value <ph id=\"ph1\">`ReachQueueTimeout`</ph>.","pos":[726,1043],"source":" For example, if an acknowledgment message was sent because a message did not reach the destination before the <xref:System.Messaging.Message.TimeToReachQueue%2A> interval expired, the <xref:System.Messaging.Message.Acknowledgment%2A> property of the acknowledgment message would contain the value `ReachQueueTimeout`."}]},{"pos":[24753,25094],"content":"One of the <xref href=\"System.Messaging.AcknowledgeTypes\"></xref> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application. The default is <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AcknowledgeTypes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application.","pos":[0,264],"source":"One of the <xref href=\"System.Messaging.AcknowledgeTypes\"></xref> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[265,341],"source":" The default is <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref>."}]},{"pos":[25273,25336],"content":"The message is filtered to ignore the AcknowledgeType property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message is filtered to ignore the AcknowledgeType property.","pos":[0,63]}]},{"pos":[25690,25761],"content":"Gets the classification of acknowledgment that this message represents.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the classification of acknowledgment that this message represents.","pos":[0,71]}]},{"pos":[25774,27141],"content":"When you receive a message from an administration queue, read the Acknowledgment property to verify the status of the original message.       When a message is sent to its destination queue, Message Queuing can be requested to post an acknowledgment message. Such a message can indicate, for example, whether the message arrived and was retrieved within specified time-outs, or it can indicate what went wrong in the case of delivery failure. The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's <xref:System.Messaging.Message.AdministrationQueue%2A> property. The <xref:System.Messaging.Message.Id%2A> property of an acknowledgment message identifies the acknowledgment message, not the original message. You can find the identifier of the original message in the acknowledgment <xref:System.Messaging.Message> instance's <xref:System.Messaging.Message.CorrelationId%2A> property.       If this <xref:System.Messaging.Message> instance represents an acknowledgment message, the Acknowledgment property specifies the type of acknowledgment. Otherwise, the Acknowledgment property contains the value `Normal`.       Use the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the original message to specify the circumstances under which acknowledgments will be returned.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you receive a message from an administration queue, read the Acknowledgment property to verify the status of the original message.","pos":[0,135]},{"content":"When a message is sent to its destination queue, Message Queuing can be requested to post an acknowledgment message.","pos":[142,258]},{"content":"Such a message can indicate, for example, whether the message arrived and was retrieved within specified time-outs, or it can indicate what went wrong in the case of delivery failure.","pos":[259,442]},{"content":"The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's &lt;xref:System.Messaging.Message.AdministrationQueue%2A&gt; property.","pos":[443,640],"source":" The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's <xref:System.Messaging.Message.AdministrationQueue%2A> property."},{"content":"The &lt;xref:System.Messaging.Message.Id%2A&gt; property of an acknowledgment message identifies the acknowledgment message, not the original message.","pos":[641,785],"source":" The <xref:System.Messaging.Message.Id%2A> property of an acknowledgment message identifies the acknowledgment message, not the original message."},{"content":"You can find the identifier of the original message in the acknowledgment &lt;xref:System.Messaging.Message&gt; instance's &lt;xref:System.Messaging.Message.CorrelationId%2A&gt; property.","pos":[786,961],"source":" You can find the identifier of the original message in the acknowledgment <xref:System.Messaging.Message> instance's <xref:System.Messaging.Message.CorrelationId%2A> property."},{"content":"If this &lt;xref:System.Messaging.Message&gt; instance represents an acknowledgment message, the Acknowledgment property specifies the type of acknowledgment.","pos":[968,1120],"source":"       If this <xref:System.Messaging.Message> instance represents an acknowledgment message, the Acknowledgment property specifies the type of acknowledgment."},{"content":"Otherwise, the Acknowledgment property contains the value <ph id=\"ph1\">`Normal`</ph>.","pos":[1121,1188],"source":" Otherwise, the Acknowledgment property contains the value `Normal`."},{"content":"Use the &lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt; property of the original message to specify the circumstances under which acknowledgments will be returned.","pos":[1195,1361],"source":"       Use the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the original message to specify the circumstances under which acknowledgments will be returned."}]},{"pos":[27304,27387],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Acknowledgment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Messaging.Acknowledgment\"></xref> enumeration values."},{"pos":[27566,27800],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*> property.","pos":[0,230],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the &lt;xref:System.Messaging.MessagePropertyFilter.Acknowledgment*&gt; property.","pos":[104,230],"source":"       -or-       The message queue is filtered to ignore the <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*> property."}]}]},{"pos":[28180,28277],"content":"Gets or sets the queue that receives the acknowledgement messages that Message Queuing generates.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the queue that receives the acknowledgement messages that Message Queuing generates.","pos":[0,97]}]},{"pos":[28290,28750],"content":"The queue specified in the AdministrationQueue property can be any non-transactional queue. The acknowledgment messages sent to the administration queue can indicate whether the original message reached its destination queue and whether it was removed from the queue.       When the <xref:System.Messaging.Message.AcknowledgeType%2A> property has any value other than `None`, the sending application must specify the queue to use as the administration queue.","needQuote":false,"needEscape":true,"nodes":[{"content":"The queue specified in the AdministrationQueue property can be any non-transactional queue.","pos":[0,91]},{"content":"The acknowledgment messages sent to the administration queue can indicate whether the original message reached its destination queue and whether it was removed from the queue.","pos":[92,267]},{"content":"When the &lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt; property has any value other than <ph id=\"ph1\">`None`</ph>, the sending application must specify the queue to use as the administration queue.","pos":[274,458],"source":"       When the <xref:System.Messaging.Message.AcknowledgeType%2A> property has any value other than `None`, the sending application must specify the queue to use as the administration queue."}]},{"pos":[29454,29676],"content":"The <xref href=\"System.Messaging.MessageQueue\"></xref> that specifies the administration queue used for system-generated acknowledgment messages. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the administration queue used for system-generated acknowledgment messages.","pos":[0,145],"source":"The <xref href=\"System.Messaging.MessageQueue\"></xref> that specifies the administration queue used for system-generated acknowledgment messages."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[146,222],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[29859,29932],"content":"The message queue is filtered to ignore the AdministrationQueue property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the AdministrationQueue property.","pos":[0,73]}]},{"pos":[30271,30329],"content":"Gets or sets additional, application-specific information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets additional, application-specific information.","pos":[0,58]}]},{"pos":[30342,31074],"content":"The AppSpecific property contains application-specific information that you can use to organize different types of messages. For example, you can use application-specific indexes. It is the responsibility of the application to interpret AppSpecific property information.       Whenever possible, you should include message data in the body of the message rather than the AppSpecific property.       When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing. As with the AppSpecific property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The AppSpecific property contains application-specific information that you can use to organize different types of messages. For example, you can use application-specific indexes. It is the responsibility of the application to interpret AppSpecific property information.       Whenever possible, you should include message data in the body of the message rather than the AppSpecific property.       When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing. As with the AppSpecific property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property.","pos":[0,728],"nodes":[{"content":"The AppSpecific property contains application-specific information that you can use to organize different types of messages.","pos":[0,124]},{"content":"For example, you can use application-specific indexes.","pos":[125,179]},{"content":"It is the responsibility of the application to interpret AppSpecific property information.","pos":[180,270]},{"content":"Whenever possible, you should include message data in the body of the message rather than the AppSpecific property.","pos":[277,392]},{"content":"When working with foreign queues, use the &lt;xref:System.Messaging.Message.Extension%2A&gt; property to specify message properties that do not exist in Message Queuing.","pos":[399,562],"source":"       When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing."},{"content":"As with the AppSpecific property, it is the responsibility of the application to understand the content of the &lt;xref:System.Messaging.Message.Extension%2A&gt; property.","pos":[563,728],"source":" As with the AppSpecific property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property."}]}]},{"pos":[31192,31261],"content":"Information that is specific to the application. The default is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information that is specific to the application. The default is zero.","pos":[0,69],"nodes":[{"content":"Information that is specific to the application.","pos":[0,48]},{"content":"The default is zero.","pos":[49,69]}]}]},{"pos":[31436,31501],"content":"The message queue is filtered to ignore the AppSpecific property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the AppSpecific property.","pos":[0,65]}]},{"pos":[31840,31904],"content":"Gets the time that the message arrived in the destination queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the time that the message arrived in the destination queue.","pos":[0,64]}]},{"pos":[31916,32216],"content":"The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue. The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue. The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue.","pos":[0,300],"nodes":[{"content":"The message's &lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt; property indicates how quickly the message must be received from the destination queue.","pos":[0,153],"source":"The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue."},{"content":"The &lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt; property timer starts when the message is sent, not when the message arrives in the queue.","pos":[154,300],"source":" The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue."}]}]},{"pos":[32561,32758],"content":"A <xref:System.DateTime> that represents the message's arrival time in the destination queue. The time is adjusted from GMT to the local time of the computer on which the destination queue resides.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.DateTime> that represents the message's arrival time in the destination queue. The time is adjusted from GMT to the local time of the computer on which the destination queue resides.","pos":[0,197],"nodes":[{"content":"A &lt;xref:System.DateTime&gt; that represents the message's arrival time in the destination queue.","pos":[0,93],"source":"A <xref:System.DateTime> that represents the message's arrival time in the destination queue."},{"content":"The time is adjusted from GMT to the local time of the computer on which the destination queue resides.","pos":[94,197]}]}]},{"pos":[32934,33118],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the ArrivedTime property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the ArrivedTime property.","pos":[0,180],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the ArrivedTime property.","pos":[104,180]}]}]},{"pos":[33473,33565],"content":"Gets or sets a value that indicates whether the sender ID should be attached to the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the sender ID should be attached to the message.","pos":[0,92]}]},{"pos":[33578,34859],"content":"The <xref:System.Messaging.Message.SenderId%2A> property is an array of bytes that represents the identifier of the sending user. The sender ID is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.       The absence of the sender ID is an indication by the sending application that Message Queuing should not validate the message's sender nor verify the sender's access rights to the receiving queue. The <xref:System.Messaging.Message.SenderId%2A> is trustworthy only if the message was authenticated when it reached the destination queue. The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> or the <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> property is `false`.      > [!CAUTION] >  If a message is rejected, it is either sent to the dead-letter queue (if <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`), or it is ignored. You can request acknowledgments when a message fails to reach a queue. Otherwise, when <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false` the message might be lost without warning.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Messaging.Message.SenderId%2A&gt; property is an array of bytes that represents the identifier of the sending user.","pos":[0,129],"source":"The <xref:System.Messaging.Message.SenderId%2A> property is an array of bytes that represents the identifier of the sending user."},{"content":"The sender ID is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.","pos":[130,271]},{"content":"The absence of the sender ID is an indication by the sending application that Message Queuing should not validate the message's sender nor verify the sender's access rights to the receiving queue.","pos":[278,474]},{"content":"The &lt;xref:System.Messaging.Message.SenderId%2A&gt; is trustworthy only if the message was authenticated when it reached the destination queue.","pos":[475,614],"source":" The <xref:System.Messaging.Message.SenderId%2A> is trustworthy only if the message was authenticated when it reached the destination queue."},{"content":"The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the &lt;xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A&gt; or the &lt;xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[615,903],"source":" The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> or the <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> property is `false`."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  If a message is rejected, it is either sent to the dead-letter queue (if &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; is <ph id=\"ph2\">`true`</ph>), or it is ignored.","pos":[909,1081],"source":"      > [!CAUTION] >  If a message is rejected, it is either sent to the dead-letter queue (if <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`), or it is ignored."},{"content":"You can request acknowledgments when a message fails to reach a queue.","pos":[1082,1152]},{"content":"Otherwise, when &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; is <ph id=\"ph1\">`false`</ph> the message might be lost without warning.","pos":[1153,1276],"source":" Otherwise, when <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false` the message might be lost without warning."}]},{"pos":[35216,35512],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Messaging.Message.SenderId*> should be attached to the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Messaging.Message.SenderId*&gt; should be attached to the message; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,219],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Messaging.Message.SenderId*> should be attached to the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[220,296],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[35690,35758],"content":"The message queue is filtered to ignore the AttachSenderId property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the AttachSenderId property.","pos":[0,68]}]},{"pos":[36107,36173],"content":"Gets a value that indicates whether the message was authenticated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the message was authenticated.","pos":[0,66]}]},{"pos":[36186,36871],"content":"The Authenticated property is used only by the application while it is interacting with the message and trying to determine if authentication was requested. If the message is in the queue, the message was authenticated. Conversely, if the Authenticated property is `true`, the receiving Queue Manager authenticated the message when it received that message.       You cannot determine if a message failed authentication by looking at its properties. Message Queuing discards messages that fail authentication before they are delivered to the queue. However, you can request that an acknowledgment message be sent if a delivery failure prevents the message from arriving in the queue.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Authenticated property is used only by the application while it is interacting with the message and trying to determine if authentication was requested.","pos":[0,156]},{"content":"If the message is in the queue, the message was authenticated.","pos":[157,219]},{"content":"Conversely, if the Authenticated property is <ph id=\"ph1\">`true`</ph>, the receiving Queue Manager authenticated the message when it received that message.","pos":[220,357],"source":" Conversely, if the Authenticated property is `true`, the receiving Queue Manager authenticated the message when it received that message."},{"content":"You cannot determine if a message failed authentication by looking at its properties.","pos":[364,449]},{"content":"Message Queuing discards messages that fail authentication before they are delivered to the queue.","pos":[450,548]},{"content":"However, you can request that an acknowledgment message be sent if a delivery failure prevents the message from arriving in the queue.","pos":[549,683]}]},{"pos":[37216,37426],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if authentication was requested for the message when it entered the queue; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication was requested for the message when it entered the queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[37604,37790],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the Authenticated property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the Authenticated property.","pos":[0,182],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the Authenticated property.","pos":[104,182]}]}]},{"pos":[38205,38311],"content":"Gets or sets the name of the cryptographic provider used to generate the digital signature of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the cryptographic provider used to generate the digital signature of the message.","pos":[0,106]}]},{"pos":[38324,39064],"content":"You typically use the AuthenticationProviderName when working with foreign queues. Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.       When sending a message, always set the AuthenticationProviderName and <xref:System.Messaging.Message.ConnectorType%2A> properties together. When the message is sent, Message Queuing ignores the authentication provider name if the connector type is not also set.       The AuthenticationProviderName property cannot be `null`, but it can be an empty string (\"\").","needQuote":false,"needEscape":true,"nodes":[{"content":"You typically use the AuthenticationProviderName when working with foreign queues.","pos":[0,82]},{"content":"Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.","pos":[83,366]},{"content":"When sending a message, always set the AuthenticationProviderName and &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; properties together.","pos":[373,512],"source":"       When sending a message, always set the AuthenticationProviderName and <xref:System.Messaging.Message.ConnectorType%2A> properties together."},{"content":"When the message is sent, Message Queuing ignores the authentication provider name if the connector type is not also set.","pos":[513,634]},{"content":"The AuthenticationProviderName property cannot be <ph id=\"ph1\">`null`</ph>, but it can be an empty string (\"\").","pos":[641,734],"source":"       The AuthenticationProviderName property cannot be `null`, but it can be an empty string (\"\")."}]},{"pos":[39201,39360],"content":"The name of the cryptographic provider used to generate the digital signature of the message. The default is Microsoft Base Cryptographic Provider version 1.0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the cryptographic provider used to generate the digital signature of the message. The default is Microsoft Base Cryptographic Provider version 1.0.","pos":[0,159],"nodes":[{"content":"The name of the cryptographic provider used to generate the digital signature of the message.","pos":[0,93]},{"content":"The default is Microsoft Base Cryptographic Provider version 1.0.","pos":[94,159]}]}]},{"pos":[39551,39710],"content":"The AuthenticationProviderName property could not be set.       -or-       The message queue is filtered to ignore the AuthenticationProviderName property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The AuthenticationProviderName property could not be set.       -or-       The message queue is filtered to ignore the AuthenticationProviderName property.","pos":[0,155],"nodes":[{"content":"The AuthenticationProviderName property could not be set.","pos":[0,57]},{"content":"-or-       The message queue is filtered to ignore the AuthenticationProviderName property.","pos":[64,155]}]}]},{"pos":[39806,39909],"content":"The AuthenticationProviderName was set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The AuthenticationProviderName was set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[40323,40425],"content":"Gets or sets the type of cryptographic provider used to generate the digital signature of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the type of cryptographic provider used to generate the digital signature of the message.","pos":[0,102]}]},{"pos":[40438,41222],"content":"You typically use the AuthenticationProviderType property when working with foreign queues to specify which cryptographic service provider is associated with a message. Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.       Only `RsaFull` is intended to be used with messaging.       When sending a message, always set the AuthenticationProviderType and <xref:System.Messaging.Message.ConnectorType%2A> properties together. When the message is sent, Message Queuing ignores the authentication provider type if the connector type is not also set.","needQuote":false,"needEscape":true,"nodes":[{"content":"You typically use the AuthenticationProviderType property when working with foreign queues to specify which cryptographic service provider is associated with a message.","pos":[0,168]},{"content":"Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.","pos":[169,452]},{"content":"Only <ph id=\"ph1\">`RsaFull`</ph> is intended to be used with messaging.","pos":[459,512],"source":"       Only `RsaFull` is intended to be used with messaging."},{"content":"When sending a message, always set the AuthenticationProviderType and &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; properties together.","pos":[519,658],"source":"       When sending a message, always set the AuthenticationProviderType and <xref:System.Messaging.Message.ConnectorType%2A> properties together."},{"content":"When the message is sent, Message Queuing ignores the authentication provider type if the connector type is not also set.","pos":[659,780]}]},{"pos":[41424,41591],"content":"One of the <xref href=\"System.Messaging.CryptographicProviderType\"></xref> values. The default is <xref uid=\"langword_csharp_RSA_FULL\" name=\"RSA_FULL\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.CryptographicProviderType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,82],"source":"One of the <xref href=\"System.Messaging.CryptographicProviderType\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_RSA_FULL\" name=\"RSA_FULL\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[83,167],"source":" The default is <xref uid=\"langword_csharp_RSA_FULL\" name=\"RSA_FULL\" href=\"\"></xref>."}]},{"pos":[41782,41941],"content":"The AuthenticationProviderType property could not be set.       -or-       The message queue is filtered to ignore the AuthenticationProviderType property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The AuthenticationProviderType property could not be set.       -or-       The message queue is filtered to ignore the AuthenticationProviderType property.","pos":[0,155],"nodes":[{"content":"The AuthenticationProviderType property could not be set.","pos":[0,57]},{"content":"-or-       The message queue is filtered to ignore the AuthenticationProviderType property.","pos":[64,155]}]}]},{"pos":[42246,42286],"content":"Gets or sets the content of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the content of the message.","pos":[0,40]}]},{"pos":[42299,44719],"content":"The message's Body property usually contains the data associated with the message. Although you can also send application-specific data in the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties, you should include message data in the Body of the message whenever possible. Only the Body property contents are serialized or encrypted.       The Body property can contain any object whose size does not exceed 4 MB. If you use <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> to send any object that is not of type <xref:System.Messaging.Message> to the <xref:System.Messaging.MessageQueue>, that object will be located in the Body property of the <xref:System.Messaging.Message> instance returned by <xref:System.Messaging.MessageQueue.Peek%2A> or <xref:System.Messaging.MessageQueue.Receive%2A>.       The string argument in `MessageQueue.Send(\"hello.\")` is an example of such a generic object.       The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of information that is stored in the message body. Message Queuing uses this information to identify the type of the Body property contents.       Specify either the Body property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. The Body property can be any serializable object, such as a text string, structure object, class instance, or embedded object.       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.      > [!NOTE] >  Attempting to set the body of a message to <xref:System.Decimal.MaxValue> will cause a <xref:System.OverflowException> when the `Send` method of the <xref:System.Messaging.MessageQueue> class is called and the <xref:System.Messaging.ActiveXMessageFormatter> is used.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message's Body property usually contains the data associated with the message.","pos":[0,82]},{"content":"Although you can also send application-specific data in the &lt;xref:System.Messaging.Message.AppSpecific%2A&gt; and &lt;xref:System.Messaging.Message.Extension%2A&gt; properties, you should include message data in the Body of the message whenever possible.","pos":[83,328],"source":" Although you can also send application-specific data in the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties, you should include message data in the Body of the message whenever possible."},{"content":"Only the Body property contents are serialized or encrypted.","pos":[329,389]},{"content":"The Body property can contain any object whose size does not exceed 4 MB.","pos":[396,469]},{"content":"If you use &lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt; to send any object that is not of type &lt;xref:System.Messaging.Message&gt; to the &lt;xref:System.Messaging.MessageQueue&gt;, that object will be located in the Body property of the &lt;xref:System.Messaging.Message&gt; instance returned by &lt;xref:System.Messaging.MessageQueue.Peek%2A&gt; or &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;.","pos":[470,872],"source":" If you use <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> to send any object that is not of type <xref:System.Messaging.Message> to the <xref:System.Messaging.MessageQueue>, that object will be located in the Body property of the <xref:System.Messaging.Message> instance returned by <xref:System.Messaging.MessageQueue.Peek%2A> or <xref:System.Messaging.MessageQueue.Receive%2A>."},{"content":"The string argument in <ph id=\"ph1\">`MessageQueue.Send(\"hello.\")`</ph> is an example of such a generic object.","pos":[879,971],"source":"       The string argument in `MessageQueue.Send(\"hello.\")` is an example of such a generic object."},{"content":"The &lt;xref:System.Messaging.Message.BodyType%2A&gt; property indicates the type of information that is stored in the message body.","pos":[978,1104],"source":"       The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of information that is stored in the message body."},{"content":"Message Queuing uses this information to identify the type of the Body property contents.","pos":[1105,1194]},{"content":"Specify either the Body property or the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property before sending the &lt;xref:System.Messaging.Message&gt; object.","pos":[1201,1354],"source":"       Specify either the Body property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object."},{"content":"The Body property can be any serializable object, such as a text string, structure object, class instance, or embedded object.","pos":[1355,1481]},{"content":"Unless you write the contents of the message directly to the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property, set the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property before you send the message.","pos":[1488,1695],"source":"       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message."},{"content":"When the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method is called on the &lt;xref:System.Messaging.MessageQueue&gt; instance, the body is serialized using the formatter contained in the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property.","pos":[1696,1935],"source":" When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property."},{"content":"If you send the message without specifying a value for the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property, the formatter defaults to &lt;xref:System.Messaging.XmlMessageFormatter&gt;.","pos":[1936,2120],"source":" If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Attempting to set the body of a message to &lt;xref:System.Decimal.MaxValue&gt; will cause a &lt;xref:System.OverflowException&gt; when the <ph id=\"ph2\">`Send`</ph> method of the &lt;xref:System.Messaging.MessageQueue&gt; class is called and the &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; is used.","pos":[2126,2405],"source":"      > [!NOTE] >  Attempting to set the body of a message to <xref:System.Decimal.MaxValue> will cause a <xref:System.OverflowException> when the `Send` method of the <xref:System.Messaging.MessageQueue> class is called and the <xref:System.Messaging.ActiveXMessageFormatter> is used."}]},{"pos":[45299,45445],"content":"An object that specifies the message contents. The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the message contents. The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.","pos":[0,146],"nodes":[{"content":"An object that specifies the message contents.","pos":[0,46]},{"content":"The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.","pos":[47,146]}]}]},{"pos":[45614,45820],"content":"The <xref:System.Messaging.Message.Formatter*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       The message queue is filtered to ignore the Body property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Messaging.Message.Formatter*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,120],"source":"The <xref:System.Messaging.Message.Formatter*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       The message queue is filtered to ignore the Body property.","pos":[127,196]}]},{"pos":[46155,46211],"content":"Gets or sets the information in the body of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the information in the body of the message.","pos":[0,56]}]},{"pos":[46224,47847],"content":"The body of a message can consist of any type of information—for example, a string, a date, a currency, a number, an array of bytes, or any managed object. This information is serialized into a <xref:System.IO.Stream> to be passed to the queue.       Specify either the <xref:System.Messaging.Message.Body%2A> property or the BodyStream property before sending the <xref:System.Messaging.Message> object. If you set the <xref:System.Messaging.Message.Body%2A> property, the contents are serialized into the BodyStream property. However, you can choose to write the BodyStream property directly. This is useful, for example, when you want to open a connection to a file and stream its contents as the body of your message.       Unless you write the contents of the message directly to the BodyStream property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.       If you set the <xref:System.Messaging.Message.UseEncryption%2A> property to `true` for the body of this message, the message will be encrypted when it is sent, not when you set the <xref:System.Messaging.Message.Body%2A> property. Therefore, the BodyStream property is never encrypted.","needQuote":false,"needEscape":true,"nodes":[{"content":"The body of a message can consist of any type of information—for example, a string, a date, a currency, a number, an array of bytes, or any managed object.","pos":[0,155]},{"content":"This information is serialized into a &lt;xref:System.IO.Stream&gt; to be passed to the queue.","pos":[156,244],"source":" This information is serialized into a <xref:System.IO.Stream> to be passed to the queue."},{"content":"Specify either the &lt;xref:System.Messaging.Message.Body%2A&gt; property or the BodyStream property before sending the &lt;xref:System.Messaging.Message&gt; object.","pos":[251,404],"source":"       Specify either the <xref:System.Messaging.Message.Body%2A> property or the BodyStream property before sending the <xref:System.Messaging.Message> object."},{"content":"If you set the &lt;xref:System.Messaging.Message.Body%2A&gt; property, the contents are serialized into the BodyStream property.","pos":[405,527],"source":" If you set the <xref:System.Messaging.Message.Body%2A> property, the contents are serialized into the BodyStream property."},{"content":"However, you can choose to write the BodyStream property directly.","pos":[528,594]},{"content":"This is useful, for example, when you want to open a connection to a file and stream its contents as the body of your message.","pos":[595,721]},{"content":"Unless you write the contents of the message directly to the BodyStream property, set the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property before you send the message.","pos":[728,900],"source":"       Unless you write the contents of the message directly to the BodyStream property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message."},{"content":"When the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method is called on the &lt;xref:System.Messaging.MessageQueue&gt; instance, the body is serialized using the formatter contained in the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property.","pos":[901,1140],"source":" When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property."},{"content":"If you send the message without specifying a value for the &lt;xref:System.Messaging.Message.Formatter%2A&gt; property, the formatter defaults to &lt;xref:System.Messaging.XmlMessageFormatter&gt;.","pos":[1141,1325],"source":" If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>."},{"content":"If you set the &lt;xref:System.Messaging.Message.UseEncryption%2A&gt; property to <ph id=\"ph1\">`true`</ph> for the body of this message, the message will be encrypted when it is sent, not when you set the &lt;xref:System.Messaging.Message.Body%2A&gt; property.","pos":[1332,1562],"source":"       If you set the <xref:System.Messaging.Message.UseEncryption%2A> property to `true` for the body of this message, the message will be encrypted when it is sent, not when you set the <xref:System.Messaging.Message.Body%2A> property."},{"content":"Therefore, the BodyStream property is never encrypted.","pos":[1563,1617]}]},{"pos":[47981,48117],"content":"A <xref:System.IO.Stream> that contains the serialized information included in the <xref:System.Messaging.Message.Body*> of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; that contains the serialized information included in the &lt;xref:System.Messaging.Message.Body*&gt; of the message.","pos":[0,136],"source":"A <xref:System.IO.Stream> that contains the serialized information included in the <xref:System.Messaging.Message.Body*> of the message."}]},{"pos":[48291,48382],"content":"The message queue is filtered to ignore the <xref:System.Messaging.Message.Body*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the &lt;xref:System.Messaging.Message.Body*&gt; property.","pos":[0,91],"source":"The message queue is filtered to ignore the <xref:System.Messaging.Message.Body*> property."}]},{"pos":[48706,48767],"content":"Gets or sets the type of data that the message body contains.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the type of data that the message body contains.","pos":[0,61]}]},{"pos":[48780,49536],"content":"Message Queuing recognizes the body contents as an object or as a serialized stream. The BodyType property indicates the type of the object within the <xref:System.Messaging.Message.Body%2A> property of the message.       The <xref:System.Messaging.XmlMessageFormatter> performs binding between native types and the object in a message body. If you use the <xref:System.Messaging.XmlMessageFormatter>, the formatter sets the BodyType property for you.       Other formatters can provide binding functionality also, as shown in the following C# code.      ```   message.Formatter = new ActiveXMessageFormatter();   object myObject message.Body;   if (myObject is string) {   }   if (myObject is int) {   }   if (myObject is float) {   }   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Queuing recognizes the body contents as an object or as a serialized stream.","pos":[0,84]},{"content":"The BodyType property indicates the type of the object within the &lt;xref:System.Messaging.Message.Body%2A&gt; property of the message.","pos":[85,215],"source":" The BodyType property indicates the type of the object within the <xref:System.Messaging.Message.Body%2A> property of the message."},{"content":"The &lt;xref:System.Messaging.XmlMessageFormatter&gt; performs binding between native types and the object in a message body.","pos":[222,341],"source":"       The <xref:System.Messaging.XmlMessageFormatter> performs binding between native types and the object in a message body."},{"content":"If you use the &lt;xref:System.Messaging.XmlMessageFormatter&gt;, the formatter sets the BodyType property for you.","pos":[342,451],"source":" If you use the <xref:System.Messaging.XmlMessageFormatter>, the formatter sets the BodyType property for you."},{"content":"Other formatters can provide binding functionality also, as shown in the following C# code.","pos":[458,549]}]},{"pos":[49873,49953],"content":"The message body's true type, such as a string, a date, a currency, or a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message body's true type, such as a string, a date, a currency, or a number.","pos":[0,80]}]},{"pos":[50125,50216],"content":"The message queue is filtered to ignore the <xref:System.Messaging.Message.Body*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the &lt;xref:System.Messaging.Message.Body*&gt; property.","pos":[0,91],"source":"The message queue is filtered to ignore the <xref:System.Messaging.Message.Body*> property."}]},{"pos":[50565,50699],"content":"Gets or sets a value that indicates that some message properties typically set by Message Queuing were set by the sending application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates that some message properties typically set by Message Queuing were set by the sending application.","pos":[0,134]}]},{"pos":[50712,51933],"content":"Message Queuing requires the ConnectorType property be set whenever an application sets a message property that is usually set by Message Queuing. An application typically uses a ConnectorType in the following two cases:      -   Whenever a connector application passes a message. The ConnectorType tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.      -   Whenever the sending application, rather than Message Queuing, encrypts a message. The ConnectorType tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message.       You must set the ConnectorType property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):      -   <xref:System.Messaging.Message.AuthenticationProviderName%2A>      -   <xref:System.Messaging.Message.AuthenticationProviderType%2A>      -   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>      -   <xref:System.Messaging.Message.DigitalSignature%2A>      -   <xref:System.Messaging.Message.MessageType%2A>      -   <xref:System.Messaging.Message.SenderId%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Queuing requires the ConnectorType property be set whenever an application sets a message property that is usually set by Message Queuing. An application typically uses a ConnectorType in the following two cases:      -   Whenever a connector application passes a message. The ConnectorType tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.      -   Whenever the sending application, rather than Message Queuing, encrypts a message. The ConnectorType tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message.       You must set the ConnectorType property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):      -   <xref:System.Messaging.Message.AuthenticationProviderName%2A>      -   <xref:System.Messaging.Message.AuthenticationProviderType%2A>      -   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>      -   <xref:System.Messaging.Message.DigitalSignature%2A>      -   <xref:System.Messaging.Message.MessageType%2A>      -   <xref:System.Messaging.Message.SenderId%2A>","pos":[0,1203],"nodes":[{"content":"Message Queuing requires the ConnectorType property be set whenever an application sets a message property that is usually set by Message Queuing.","pos":[0,146]},{"content":"An application typically uses a ConnectorType in the following two cases:      -   Whenever a connector application passes a message.","pos":[147,280]},{"content":"The ConnectorType tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.","pos":[281,419]},{"content":"-   Whenever the sending application, rather than Message Queuing, encrypts a message.","pos":[425,511]},{"content":"The ConnectorType tells Message Queuing to use the &lt;xref:System.Messaging.Message.DestinationSymmetricKey%2A&gt; property value to decrypt the message.","pos":[512,660],"source":" The ConnectorType tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message."},{"content":"You must set the ConnectorType property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):      -   &lt;xref:System.Messaging.Message.AuthenticationProviderName%2A&gt;      -   &lt;xref:System.Messaging.Message.AuthenticationProviderType%2A&gt;      -   &lt;xref:System.Messaging.Message.DestinationSymmetricKey%2A&gt;      -   &lt;xref:System.Messaging.Message.DigitalSignature%2A&gt;      -   &lt;xref:System.Messaging.Message.MessageType%2A&gt;      -   &lt;xref:System.Messaging.Message.SenderId%2A&gt;","pos":[667,1203],"source":"       You must set the ConnectorType property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):      -   <xref:System.Messaging.Message.AuthenticationProviderName%2A>      -   <xref:System.Messaging.Message.AuthenticationProviderType%2A>      -   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>      -   <xref:System.Messaging.Message.DigitalSignature%2A>      -   <xref:System.Messaging.Message.MessageType%2A>      -   <xref:System.Messaging.Message.SenderId%2A>"}]}]},{"pos":[52053,52348],"content":"A <xref:System.Guid> defined by the application and used in conjunction with connector applications or message encryption. This <xref:System.Guid> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Guid> defined by the application and used in conjunction with connector applications or message encryption. This <xref:System.Guid> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.","pos":[0,295],"nodes":[{"content":"A &lt;xref:System.Guid&gt; defined by the application and used in conjunction with connector applications or message encryption.","pos":[0,122],"source":"A <xref:System.Guid> defined by the application and used in conjunction with connector applications or message encryption."},{"content":"This &lt;xref:System.Guid&gt; allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.","pos":[123,295],"source":" This <xref:System.Guid> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing."}]}]},{"pos":[52525,52592],"content":"The message queue is filtered to ignore the ConnectorType property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the ConnectorType property.","pos":[0,67]}]},{"pos":[52941,53065],"content":"Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.","pos":[0,124]}]},{"pos":[53078,54032],"content":"When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message. In this manner, the correlation identifier ties the report or acknowledgment message to the original message.       The sending application can then match the acknowledgment or report with the original message by using the CorrelationId property to identify the original message's <xref:System.Messaging.Message.Id%2A> property.       Connector applications also must set the CorrelationId property of the acknowledgment and report messages to the message identifier of the original message.       When your application sends a response message to the sending application, you can set the CorrelationId property of the response message to the message identifier of the original message. The sending application can then match your response message to the message that was sent.","needQuote":false,"needEscape":true,"nodes":[{"content":"When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message. In this manner, the correlation identifier ties the report or acknowledgment message to the original message.       The sending application can then match the acknowledgment or report with the original message by using the CorrelationId property to identify the original message's <xref:System.Messaging.Message.Id%2A> property.       Connector applications also must set the CorrelationId property of the acknowledgment and report messages to the message identifier of the original message.       When your application sends a response message to the sending application, you can set the CorrelationId property of the response message to the message identifier of the original message. The sending application can then match your response message to the message that was sent.","pos":[0,948],"nodes":[{"content":"When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message.","pos":[0,170]},{"content":"In this manner, the correlation identifier ties the report or acknowledgment message to the original message.","pos":[171,280]},{"content":"The sending application can then match the acknowledgment or report with the original message by using the CorrelationId property to identify the original message's &lt;xref:System.Messaging.Message.Id%2A&gt; property.","pos":[287,499],"source":"       The sending application can then match the acknowledgment or report with the original message by using the CorrelationId property to identify the original message's <xref:System.Messaging.Message.Id%2A> property."},{"content":"Connector applications also must set the CorrelationId property of the acknowledgment and report messages to the message identifier of the original message.","pos":[506,662]},{"content":"When your application sends a response message to the sending application, you can set the CorrelationId property of the response message to the message identifier of the original message.","pos":[669,857]},{"content":"The sending application can then match your response message to the message that was sent.","pos":[858,948]}]}]},{"pos":[54694,54972],"content":"The message identifier specified by the <xref:System.Messaging.Message.Id*> property of the original message. The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message identifier specified by the <xref:System.Messaging.Message.Id*> property of the original message. The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.","pos":[0,278],"nodes":[{"content":"The message identifier specified by the &lt;xref:System.Messaging.Message.Id*&gt; property of the original message.","pos":[0,109],"source":"The message identifier specified by the <xref:System.Messaging.Message.Id*> property of the original message."},{"content":"The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.","pos":[110,278]}]}]},{"pos":[55149,55216],"content":"The message queue is filtered to ignore the CorrelationId property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the CorrelationId property.","pos":[0,67]}]},{"pos":[55311,55393],"content":"The CorrelationId is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The CorrelationId is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[55757,55807],"content":"Gets the intended destination queue for a message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the intended destination queue for a message.","pos":[0,50]}]},{"pos":[55819,56091],"content":"The DestinationQueue property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue. Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DestinationQueue property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue. Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.","pos":[0,272],"nodes":[{"content":"The DestinationQueue property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue.","pos":[0,150]},{"content":"Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.","pos":[151,272]}]}]},{"pos":[56481,56596],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the intended destination queue for the message.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Messaging.MessageQueue\"></xref> that specifies the intended destination queue for the message."},{"pos":[56777,56966],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the DestinationQueue property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the DestinationQueue property.","pos":[0,185],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the DestinationQueue property.","pos":[104,185]}]}]},{"pos":[57366,57479],"content":"Gets or sets the symmetric key used to encrypt application-encrypted messages or messages sent to foreign queues.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the symmetric key used to encrypt application-encrypted messages or messages sent to foreign queues.","pos":[0,113]}]},{"pos":[57492,58750],"content":"Two scenarios require you to use the DestinationSymmetricKey property. The first is when your application, rather than Message Queuing, encrypts a message. The second is when you send an encrypted message to a queuing system other than Message Queuing.       Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager. When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.       If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application. It is then the responsibility of the receiving application to decrypt the message using the symmetric key.       When you set the DestinationSymmetricKey property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When the message is sent, Message Queuing ignores the DestinationSymmetricKey property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.       The DestinationSymmetricKey property has a maximum array size of 256.","needQuote":false,"needEscape":true,"nodes":[{"content":"Two scenarios require you to use the DestinationSymmetricKey property. The first is when your application, rather than Message Queuing, encrypts a message. The second is when you send an encrypted message to a queuing system other than Message Queuing.       Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager. When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.       If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application. It is then the responsibility of the receiving application to decrypt the message using the symmetric key.       When you set the DestinationSymmetricKey property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When the message is sent, Message Queuing ignores the DestinationSymmetricKey property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.       The DestinationSymmetricKey property has a maximum array size of 256.","pos":[0,1250],"nodes":[{"content":"Two scenarios require you to use the DestinationSymmetricKey property.","pos":[0,70]},{"content":"The first is when your application, rather than Message Queuing, encrypts a message.","pos":[71,155]},{"content":"The second is when you send an encrypted message to a queuing system other than Message Queuing.","pos":[156,252]},{"content":"Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager.","pos":[259,375]},{"content":"When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.","pos":[376,541]},{"content":"If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application.","pos":[548,760]},{"content":"It is then the responsibility of the receiving application to decrypt the message using the symmetric key.","pos":[761,867]},{"content":"When you set the DestinationSymmetricKey property, you must also set the &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; property.","pos":[874,1005],"source":"       When you set the DestinationSymmetricKey property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property."},{"content":"When the message is sent, Message Queuing ignores the DestinationSymmetricKey property if the &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; property is not also set.","pos":[1006,1174],"source":" When the message is sent, Message Queuing ignores the DestinationSymmetricKey property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set."},{"content":"The DestinationSymmetricKey property has a maximum array size of 256.","pos":[1181,1250]}]}]},{"pos":[58884,59017],"content":"An array of byte values that specifies the destination symmetric key used to encrypt the message. The default is a zero-length array.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of byte values that specifies the destination symmetric key used to encrypt the message. The default is a zero-length array.","pos":[0,133],"nodes":[{"content":"An array of byte values that specifies the destination symmetric key used to encrypt the message.","pos":[0,97]},{"content":"The default is a zero-length array.","pos":[98,133]}]}]},{"pos":[59204,59281],"content":"The message queue is filtered to ignore the DestinationSymmetricKey property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the DestinationSymmetricKey property.","pos":[0,77]}]},{"pos":[59376,59468],"content":"The DestinationSymmetricKey is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The DestinationSymmetricKey is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[59832,59921],"content":"Gets or sets the digital signature that Message Queuing uses to authenticate the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the digital signature that Message Queuing uses to authenticate the message.","pos":[0,89]}]},{"pos":[59934,61357],"content":"Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0. In most cases, Message Queuing generates and sets the DigitalSignature property when the sending application requests authentication. The receiving application uses this property to retrieve the digital signature attached to the message.       You can only use the DigitalSignature property when running Message Queuing version 2.0. The sending application must specify Message Queuing version 1.0 signatures when requesting authentication. If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.       The DigitalSignature property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent. In this scenario, the connector application—rather than Message Queuing—generates the digital signature, which it bases on the certificate of the user sending the message.       The DigitalSignature property has a maximum array size of 256.       When you set the DigitalSignature property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When a message is sent, Message Queuing ignores the DigitalSignature property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0. In most cases, Message Queuing generates and sets the DigitalSignature property when the sending application requests authentication. The receiving application uses this property to retrieve the digital signature attached to the message.       You can only use the DigitalSignature property when running Message Queuing version 2.0. The sending application must specify Message Queuing version 1.0 signatures when requesting authentication. If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.       The DigitalSignature property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent. In this scenario, the connector application—rather than Message Queuing—generates the digital signature, which it bases on the certificate of the user sending the message.       The DigitalSignature property has a maximum array size of 256.       When you set the DigitalSignature property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When a message is sent, Message Queuing ignores the DigitalSignature property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.","pos":[0,1415],"nodes":[{"content":"Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0.","pos":[0,118]},{"content":"In most cases, Message Queuing generates and sets the DigitalSignature property when the sending application requests authentication.","pos":[119,252]},{"content":"The receiving application uses this property to retrieve the digital signature attached to the message.","pos":[253,356]},{"content":"You can only use the DigitalSignature property when running Message Queuing version 2.0.","pos":[363,451]},{"content":"The sending application must specify Message Queuing version 1.0 signatures when requesting authentication.","pos":[452,559]},{"content":"If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.","pos":[560,702]},{"content":"The DigitalSignature property, together with the &lt;xref:System.Messaging.Message.SenderCertificate%2A&gt; property, is also used by connector applications when a message is sent.","pos":[709,883],"source":"       The DigitalSignature property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent."},{"content":"In this scenario, the connector application—rather than Message Queuing—generates the digital signature, which it bases on the certificate of the user sending the message.","pos":[884,1055]},{"content":"The DigitalSignature property has a maximum array size of 256.","pos":[1062,1124]},{"content":"When you set the DigitalSignature property, you must also set the &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; property.","pos":[1131,1255],"source":"       When you set the DigitalSignature property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property."},{"content":"When a message is sent, Message Queuing ignores the DigitalSignature property if the &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; property is not also set.","pos":[1256,1415],"source":" When a message is sent, Message Queuing ignores the DigitalSignature property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set."}]}]},{"pos":[61484,61634],"content":"An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message. The default is a zero-length array.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message. The default is a zero-length array.","pos":[0,150],"nodes":[{"content":"An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message.","pos":[0,114]},{"content":"The default is a zero-length array.","pos":[115,150]}]}]},{"pos":[61814,61884],"content":"The message queue is filtered to ignore the DigitalSignature property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the DigitalSignature property.","pos":[0,70]}]},{"pos":[61979,62073],"content":"The DigitalSignature property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The DigitalSignature property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[62452,62536],"content":"Gets or sets the encryption algorithm used to encrypt the body of a private message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the encryption algorithm used to encrypt the body of a private message.","pos":[0,84]}]},{"pos":[62549,63151],"content":"If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt. The EncryptionAlgorithm property specifies the algorithm used to encrypt the message body of a private message.       A queue can require that incoming messages be encrypted. If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message. The sending application can request that a negative acknowledgment message be returned in such a case.","needQuote":false,"needEscape":true,"nodes":[{"content":"If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt. The EncryptionAlgorithm property specifies the algorithm used to encrypt the message body of a private message.       A queue can require that incoming messages be encrypted. If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message. The sending application can request that a negative acknowledgment message be returned in such a case.","pos":[0,600],"nodes":[{"content":"If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt.","pos":[0,98]},{"content":"The EncryptionAlgorithm property specifies the algorithm used to encrypt the message body of a private message.","pos":[99,210]},{"content":"A queue can require that incoming messages be encrypted.","pos":[217,273]},{"content":"If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message.","pos":[274,497]},{"content":"The sending application can request that a negative acknowledgment message be returned in such a case.","pos":[498,600]}]}]},{"pos":[63334,63497],"content":"One of the <xref href=\"System.Messaging.EncryptionAlgorithm\"></xref> enumeration values. The default is <xref uid=\"langword_csharp_RC2\" name=\"RC2\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.EncryptionAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","pos":[0,88],"source":"One of the <xref href=\"System.Messaging.EncryptionAlgorithm\"></xref> enumeration values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_RC2\" name=\"RC2\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,163],"source":" The default is <xref uid=\"langword_csharp_RC2\" name=\"RC2\" href=\"\"></xref>."}]},{"pos":[63680,63753],"content":"The message queue is filtered to ignore the EncryptionAlgorithm property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the EncryptionAlgorithm property.","pos":[0,73]}]},{"pos":[64082,64167],"content":"Gets or sets additional, application-defined information associated with the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets additional, application-defined information associated with the message.","pos":[0,85]}]},{"pos":[64180,64888],"content":"The Extension property provides for application-defined information, like a large binary object, that is associated with the message. It is the responsibility of the receiving application to interpret the contents of the Extension property.       Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the Extension property.       When working with foreign queues, use the Extension property to specify message properties that do not exist in Message Queuing.       A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Extension property provides for application-defined information, like a large binary object, that is associated with the message. It is the responsibility of the receiving application to interpret the contents of the Extension property.       Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the Extension property.       When working with foreign queues, use the Extension property to specify message properties that do not exist in Message Queuing.       A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.","pos":[0,702],"nodes":[{"content":"The Extension property provides for application-defined information, like a large binary object, that is associated with the message.","pos":[0,133]},{"content":"It is the responsibility of the receiving application to interpret the contents of the Extension property.","pos":[134,240]},{"content":"Where possible, you should include message data in the &lt;xref:System.Messaging.Message.Body%2A&gt; property of the message rather than the Extension property.","pos":[247,401],"source":"       Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the Extension property."},{"content":"When working with foreign queues, use the Extension property to specify message properties that do not exist in Message Queuing.","pos":[408,536]},{"content":"A foreign queue exists in a queuing system other than Microsoft Message Queuing.","pos":[543,623]},{"content":"Message Queuing communicates with such queues through a connector application.","pos":[624,702]}]}]},{"pos":[65008,65142],"content":"An array of byte values that provides application-defined information associated with the message. The default is a zero-length array.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of byte values that provides application-defined information associated with the message. The default is a zero-length array.","pos":[0,134],"nodes":[{"content":"An array of byte values that provides application-defined information associated with the message.","pos":[0,98]},{"content":"The default is a zero-length array.","pos":[99,134]}]}]},{"pos":[65315,65378],"content":"The message queue is filtered to ignore the Extension property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the Extension property.","pos":[0,63]}]},{"pos":[65473,65560],"content":"The Extension property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The Extension property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[65889,65996],"content":"Gets or sets the formatter used to serialize an object into or deserialize an object from the message body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the formatter used to serialize an object into or deserialize an object from the message body.","pos":[0,107]}]},{"pos":[66009,67336],"content":"Use the Formatter property when reading and writing a message. When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property.       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the Formatter property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the Formatter property. If you send the message without specifying a value for the Formatter property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the Formatter property when reading and writing a message. When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property.       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the Formatter property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the Formatter property. If you send the message without specifying a value for the Formatter property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.","pos":[0,1323],"nodes":[{"content":"Use the Formatter property when reading and writing a message.","pos":[0,62]},{"content":"When a message is sent to the queue, the formatter serializes the &lt;xref:System.Messaging.Message.Body%2A&gt; property into a stream that can be sent to the message queue.","pos":[63,230],"source":" When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue."},{"content":"When reading from a queue, the formatter deserializes the message data into the &lt;xref:System.Messaging.Message.Body%2A&gt; property.","pos":[231,360],"source":" When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property."},{"content":"Unless you write the contents of the message directly to the &lt;xref:System.Messaging.Message.BodyStream%2A&gt; property, set the Formatter property before you send the message.","pos":[367,539],"source":"       Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the Formatter property before you send the message."},{"content":"When the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method is called on the &lt;xref:System.Messaging.MessageQueue&gt; instance, the body is serialized using the formatter contained in the Formatter property.","pos":[540,744],"source":" When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the Formatter property."},{"content":"If you send the message without specifying a value for the Formatter property, the formatter defaults to &lt;xref:System.Messaging.XmlMessageFormatter&gt;.","pos":[745,894],"source":" If you send the message without specifying a value for the Formatter property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>."},{"content":"The &lt;xref:System.Messaging.XmlMessageFormatter&gt; is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.","pos":[901,1071],"source":"       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; and &lt;xref:System.Messaging.BinaryMessageFormatter&gt; serialize the data into binary representation.","pos":[1072,1221],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; is used when sending or receiving COM components.","pos":[1222,1323],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components."}]}]},{"pos":[68345,68549],"content":"The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body. The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.IMessageFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that produces a stream to be written to or read from the message body.","pos":[0,130],"source":"The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Messaging.XmlMessageFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[131,204],"source":" The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>."}]},{"pos":[68706,68793],"content":"The Formatter property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The Formatter property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[69142,69279],"content":"Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a digital signature for a message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a digital signature for a message.","pos":[0,137]}]},{"pos":[69291,69517],"content":"On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message. The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.","needQuote":true,"needEscape":true,"nodes":[{"content":"On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message. The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.","pos":[0,226],"nodes":[{"content":"On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message.","pos":[0,115]},{"content":"The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.","pos":[116,226]}]}]},{"pos":[69681,69940],"content":"One of the <xref href=\"System.Messaging.HashAlgorithm\"></xref> enumeration values. For Windows XP, the default is <xref uid=\"langword_csharp_SHA\" name=\"SHA\" href=\"\"></xref>. Otherwise, the default is <xref uid=\"langword_csharp_MD5\" name=\"MD5\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values.","pos":[0,82],"source":"One of the <xref href=\"System.Messaging.HashAlgorithm\"></xref> enumeration values."},{"content":"For Windows XP, the default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SHA\" name=\"SHA\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[83,173],"source":" For Windows XP, the default is <xref uid=\"langword_csharp_SHA\" name=\"SHA\" href=\"\"></xref>."},{"content":"Otherwise, the default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_MD5\" name=\"MD5\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[174,259],"source":" Otherwise, the default is <xref uid=\"langword_csharp_MD5\" name=\"MD5\" href=\"\"></xref>."}]},{"pos":[70117,70184],"content":"The message queue is filtered to ignore the HashAlgorithm property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the HashAlgorithm property.","pos":[0,67]}]},{"pos":[70478,70508],"content":"Gets the message's identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the message's identifier.","pos":[0,30]}]},{"pos":[70521,71708],"content":"Message Queuing generates a message identifier when the message is sent. The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer. The combination of the two items produces a message identifier that is unique on the network.       Message Queuing generates message identifiers for all messages—including acknowledgment and report messages. An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message. You can find the Id property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message.       You can also use the Id property when sending a response message to a response queue. To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the Id property of the original message. The application reading the response message can then use the correlation identifier of the response message to identify the original message.","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Queuing generates a message identifier when the message is sent. The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer. The combination of the two items produces a message identifier that is unique on the network.       Message Queuing generates message identifiers for all messages—including acknowledgment and report messages. An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message. You can find the Id property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message.       You can also use the Id property when sending a response message to a response queue. To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the Id property of the original message. The application reading the response message can then use the correlation identifier of the response message to identify the original message.","pos":[0,1183],"nodes":[{"content":"Message Queuing generates a message identifier when the message is sent.","pos":[0,72]},{"content":"The identifier is composed of 20 bytes and includes two items: the machine &lt;xref:System.Guid&gt; of the sending computer and a unique identifier for the message on the computer.","pos":[73,247],"source":" The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer."},{"content":"The combination of the two items produces a message identifier that is unique on the network.","pos":[248,341]},{"content":"Message Queuing generates message identifiers for all messages—including acknowledgment and report messages.","pos":[348,456]},{"content":"An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message.","pos":[457,587]},{"content":"You can find the Id property value of the original message in the &lt;xref:System.Messaging.Message.CorrelationId%2A&gt; property of an acknowledgment message.","pos":[588,741],"source":" You can find the Id property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message."},{"content":"You can also use the Id property when sending a response message to a response queue.","pos":[748,833]},{"content":"To include the identifier of the original message in a response message, set the &lt;xref:System.Messaging.Message.CorrelationId%2A&gt; property of the response message to the Id property of the original message.","pos":[834,1040],"source":" To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the Id property of the original message."},{"content":"The application reading the response message can then use the correlation identifier of the response message to identify the original message.","pos":[1041,1183]}]}]},{"pos":[72351,72422],"content":"The message's unique identifier, which is generated by Message Queuing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message's unique identifier, which is generated by Message Queuing.","pos":[0,71]}]},{"pos":[72589,72764],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the Id property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the Id property.","pos":[0,171],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the Id property.","pos":[104,171]}]}]},{"pos":[73121,73155],"content":"Specifies that no time-out exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that no time-out exists.","pos":[0,34]}]},{"pos":[73167,73629],"content":"<xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out. For the former, the time-out is the maximum time allowed for a message to be received from the queue. For the latter, the time-out is the time allowed for a message to reach the queue. In both cases, you can specify the time-out as a number of seconds or use InfiniteTimeout to indicate that no time-out exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"<xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out. For the former, the time-out is the maximum time allowed for a message to be received from the queue. For the latter, the time-out is the time allowed for a message to reach the queue. In both cases, you can specify the time-out as a number of seconds or use InfiniteTimeout to indicate that no time-out exists.","pos":[0,462],"nodes":[{"content":"&lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt; and &lt;xref:System.Messaging.Message.TimeToReachQueue%2A&gt; require a value that specifies a time-out.","pos":[0,150],"source":"<xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out."},{"content":"For the former, the time-out is the maximum time allowed for a message to be received from the queue.","pos":[151,252]},{"content":"For the latter, the time-out is the time allowed for a message to reach the queue.","pos":[253,335]},{"content":"In both cases, you can specify the time-out as a number of seconds or use InfiniteTimeout to indicate that no time-out exists.","pos":[336,462]}]}]},{"pos":[73981,73993],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[74394,74486],"content":"Gets a value that indicates whether the message was the first message sent in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the message was the first message sent in a transaction.","pos":[0,92]}]},{"pos":[74499,75295],"content":"Receiving applications use the IsFirstInTransaction property to verify that a message was the first message sent in a single transaction to a single queue.       This property is available only with Message Queuing version 2.0 and later.       To verify transaction boundaries, you can use the IsFirstInTransaction property along with two other properties: <xref:System.Messaging.Message.IsLastInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>. Use the former to check whether a message was the last message sent in the transaction, and use the latter to retrieve the identifier of the transaction.       If only one message is sent in a transaction, the IsFirstInTransaction and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Receiving applications use the IsFirstInTransaction property to verify that a message was the first message sent in a single transaction to a single queue.","pos":[0,155]},{"content":"This property is available only with Message Queuing version 2.0 and later.","pos":[162,237]},{"content":"To verify transaction boundaries, you can use the IsFirstInTransaction property along with two other properties: &lt;xref:System.Messaging.Message.IsLastInTransaction%2A&gt; and &lt;xref:System.Messaging.Message.TransactionId%2A&gt;.","pos":[244,465],"source":"       To verify transaction boundaries, you can use the IsFirstInTransaction property along with two other properties: <xref:System.Messaging.Message.IsLastInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>."},{"content":"Use the former to check whether a message was the last message sent in the transaction, and use the latter to retrieve the identifier of the transaction.","pos":[466,619]},{"content":"If only one message is sent in a transaction, the IsFirstInTransaction and &lt;xref:System.Messaging.Message.IsLastInTransaction%2A&gt; properties are both set to <ph id=\"ph1\">`true`</ph>.","pos":[626,790],"source":"       If only one message is sent in a transaction, the IsFirstInTransaction and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`."}]},{"pos":[75654,75849],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the message was the first message sent in a transaction; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the message was the first message sent in a transaction; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[76034,76227],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the IsFirstInTransaction property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the IsFirstInTransaction property.","pos":[0,189],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the IsFirstInTransaction property.","pos":[104,189]}]}]},{"pos":[76607,76698],"content":"Gets a value that indicates whether the message was the last message sent in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the message was the last message sent in a transaction.","pos":[0,91]}]},{"pos":[76711,77506],"content":"Receiving applications use the IsLastInTransaction property to verify that a message was the last message sent in a single transaction to a single queue.       This property is available only with Message Queuing version 2.0 and later.       To verify transaction boundaries, you can use the IsLastInTransaction property along with two other properties: <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>. Use the former to check whether a message was the first message sent in the transaction, and use the latter to retrieve the identifier of the transaction.       If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and IsLastInTransaction properties are both set to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Receiving applications use the IsLastInTransaction property to verify that a message was the last message sent in a single transaction to a single queue.","pos":[0,153]},{"content":"This property is available only with Message Queuing version 2.0 and later.","pos":[160,235]},{"content":"To verify transaction boundaries, you can use the IsLastInTransaction property along with two other properties: &lt;xref:System.Messaging.Message.IsFirstInTransaction%2A&gt; and &lt;xref:System.Messaging.Message.TransactionId%2A&gt;.","pos":[242,463],"source":"       To verify transaction boundaries, you can use the IsLastInTransaction property along with two other properties: <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>."},{"content":"Use the former to check whether a message was the first message sent in the transaction, and use the latter to retrieve the identifier of the transaction.","pos":[464,618]},{"content":"If only one message is sent in a transaction, the &lt;xref:System.Messaging.Message.IsFirstInTransaction%2A&gt; and IsLastInTransaction properties are both set to <ph id=\"ph1\">`true`</ph>.","pos":[625,789],"source":"       If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and IsLastInTransaction properties are both set to `true`."}]},{"pos":[77863,78064],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the message was the last message sent in a single transaction; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the message was the last message sent in a single transaction; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[78248,78440],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the IsLastInTransaction property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the IsLastInTransaction property.","pos":[0,188],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the IsLastInTransaction property.","pos":[104,188]}]}]},{"pos":[78750,78828],"content":"Gets or sets an application-defined Unicode string that describes the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an application-defined Unicode string that describes the message.","pos":[0,78]}]},{"pos":[78841,79348],"content":"You can use a message label for several purposes. For example, you can use it for display purposes or to selectively process messages based on the label value. The label does not need to be unique across messages.       Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms. It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use a message label for several purposes. For example, you can use it for display purposes or to selectively process messages based on the label value. The label does not need to be unique across messages.       Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms. It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application.","pos":[0,505],"nodes":[{"content":"You can use a message label for several purposes.","pos":[0,49]},{"content":"For example, you can use it for display purposes or to selectively process messages based on the label value.","pos":[50,159]},{"content":"The label does not need to be unique across messages.","pos":[160,213]},{"content":"Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms.","pos":[220,360]},{"content":"It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application.","pos":[361,505]}]}]},{"pos":[79688,79750],"content":"The label of the message. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The label of the message. The default is an empty string (\"\").","pos":[0,62],"nodes":[{"content":"The label of the message.","pos":[0,25]},{"content":"The default is an empty string (\"\").","pos":[26,62]}]}]},{"pos":[79919,79978],"content":"The message queue is filtered to ignore the Label property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the Label property.","pos":[0,59]}]},{"pos":[80302,80363],"content":"Introduced in MSMQ 3.0. Gets the message's lookup identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Introduced in MSMQ 3.0. Gets the message's lookup identifier.","pos":[0,61],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Gets the message's lookup identifier.","pos":[24,61]}]}]},{"pos":[80376,82286],"content":"The LookupId property provides read-only access to a message's lookup identifier. The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue. The lookup identifier is not the same as the message identifier that is generated when the message is sent.       Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues. In other words, this includes both messages sent by sending applications and by Message Queuing. The lookup identifier is unique to the queue and has no meaning outside the queue.       If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.       The LookupId property can only be read on messages retrieved from a queue.       A lookup identifier is used to read a specific message in the queue. Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,       Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application. One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue.","needQuote":false,"needEscape":true,"nodes":[{"content":"The LookupId property provides read-only access to a message's lookup identifier. The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue. The lookup identifier is not the same as the message identifier that is generated when the message is sent.       Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues. In other words, this includes both messages sent by sending applications and by Message Queuing. The lookup identifier is unique to the queue and has no meaning outside the queue.       If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.       The LookupId property can only be read on messages retrieved from a queue.       A lookup identifier is used to read a specific message in the queue. Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,       Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application. One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue.","pos":[0,1900],"nodes":[{"content":"The LookupId property provides read-only access to a message's lookup identifier.","pos":[0,81]},{"content":"The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue.","pos":[82,258]},{"content":"The lookup identifier is not the same as the message identifier that is generated when the message is sent.","pos":[259,366]},{"content":"Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues.","pos":[373,627]},{"content":"In other words, this includes both messages sent by sending applications and by Message Queuing.","pos":[628,724]},{"content":"The lookup identifier is unique to the queue and has no meaning outside the queue.","pos":[725,807]},{"content":"If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.","pos":[814,1045]},{"content":"The LookupId property can only be read on messages retrieved from a queue.","pos":[1052,1126]},{"content":"A lookup identifier is used to read a specific message in the queue.","pos":[1133,1201]},{"content":"Once the lookup identifier of a message is known, the receiving application can call the &lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt; or &lt;xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A&gt; function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,       Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application.","pos":[1202,1699],"source":" Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,       Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application."},{"content":"One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue.","pos":[1700,1900]}]}]},{"pos":[82397,82521],"content":"The message's lookup identifier, which is generated by Message Queuing and is unique to the queue where the message resides.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message's lookup identifier, which is generated by Message Queuing and is unique to the queue where the message resides.","pos":[0,124]}]},{"pos":[82701,82727],"content":"MSMQ 3.0 is not installed.","needQuote":true,"needEscape":true,"nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]},{"pos":[82839,83020],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the LookupId property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the LookupId property.","pos":[0,177],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the LookupId property.","pos":[104,177]}]}]},{"pos":[83361,83600],"content":"Gets the message type: <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Acknowledgment\" name=\"Acknowledgment\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Report\" name=\"Report\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"Gets the message type: <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>, <xref uid=\"langword_csharp_Acknowledgment\" name=\"Acknowledgment\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Report\" name=\"Report\" href=\"\"></xref>."},{"pos":[83614,84557],"content":"Message Queuing typically sets this property when it sends the message. A Message Queuing message can be one of the following types:      -   `Normal`, which is either a typical message sent from an application to a queue, or a response message returned to the sending application.      -   `Acknowledgement`, which Message Queuing generates whenever the sending application requests one. For example, Message Queuing can generate positive or negative messages to indicate that the original message arrived or was read. Message Queuing returns the appropriate acknowledgment message to the administration queue specified by the sending application.      -   `Report`, which Message Queuing generates whenever a report queue is defined at the source Queue Manager. When tracing is enabled, Message Queuing sends a report message to the Message Queuing report queue each time the original message enters or leaves a Message Queuing server.","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Queuing typically sets this property when it sends the message.","pos":[0,71]},{"content":"A Message Queuing message can be one of the following types:      -   <ph id=\"ph1\">`Normal`</ph>, which is either a typical message sent from an application to a queue, or a response message returned to the sending application.","pos":[72,281],"source":" A Message Queuing message can be one of the following types:      -   `Normal`, which is either a typical message sent from an application to a queue, or a response message returned to the sending application."},{"content":"-   <ph id=\"ph1\">`Acknowledgement`</ph>, which Message Queuing generates whenever the sending application requests one.","pos":[287,388],"source":"      -   `Acknowledgement`, which Message Queuing generates whenever the sending application requests one."},{"content":"For example, Message Queuing can generate positive or negative messages to indicate that the original message arrived or was read.","pos":[389,519]},{"content":"Message Queuing returns the appropriate acknowledgment message to the administration queue specified by the sending application.","pos":[520,648]},{"content":"-   <ph id=\"ph1\">`Report`</ph>, which Message Queuing generates whenever a report queue is defined at the source Queue Manager.","pos":[654,763],"source":"      -   `Report`, which Message Queuing generates whenever a report queue is defined at the source Queue Manager."},{"content":"When tracing is enabled, Message Queuing sends a report message to the Message Queuing report queue each time the original message enters or leaves a Message Queuing server.","pos":[764,937]}]},{"pos":[84936,84966],"content":"One of the MessageType values.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the MessageType values.","pos":[0,30]}]},{"pos":[85142,85326],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the MessageType property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the MessageType property.","pos":[0,180],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the MessageType property.","pos":[104,180]}]}]},{"pos":[85651,85744],"content":"Gets or sets the message priority, which determines where in the queue the message is placed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the message priority, which determines where in the queue the message is placed.","pos":[0,93]}]},{"pos":[85757,86321],"content":"The Priority property affects how Message Queuing handles the message both while it is en route and once it reaches its destination. Higher-priority messages are given preference during routing and inserted toward the front of the destination queue. Messages with the same priority are placed in the queue according to their arrival time.       You can set a meaningful priority only for non-transactional messages. Message Queuing automatically sets the priority for transactional messages to `Lowest`, which causes transactional message priority to be ignored.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Priority property affects how Message Queuing handles the message both while it is en route and once it reaches its destination.","pos":[0,132]},{"content":"Higher-priority messages are given preference during routing and inserted toward the front of the destination queue.","pos":[133,249]},{"content":"Messages with the same priority are placed in the queue according to their arrival time.","pos":[250,338]},{"content":"You can set a meaningful priority only for non-transactional messages.","pos":[345,415]},{"content":"Message Queuing automatically sets the priority for transactional messages to <ph id=\"ph1\">`Lowest`</ph>, which causes transactional message priority to be ignored.","pos":[416,562],"source":" Message Queuing automatically sets the priority for transactional messages to `Lowest`, which causes transactional message priority to be ignored."}]},{"pos":[86950,87170],"content":"One of the <xref href=\"System.Messaging.MessagePriority\"></xref> values, which represent the priority levels of non-transactional messages. The default is <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessagePriority\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, which represent the priority levels of non-transactional messages.","pos":[0,139],"source":"One of the <xref href=\"System.Messaging.MessagePriority\"></xref> values, which represent the priority levels of non-transactional messages."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[140,220],"source":" The default is <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>."}]},{"pos":[87342,87404],"content":"The message queue is filtered to ignore the Priority property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the Priority property.","pos":[0,62]}]},{"pos":[87743,87883],"content":"Gets or sets a value that indicates whether the message is guaranteed to be delivered in the event of a computer failure or network problem.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the message is guaranteed to be delivered in the event of a computer failure or network problem.","pos":[0,140]}]},{"pos":[87896,88463],"content":"The Recoverable property indicates whether the delivery of a message is guaranteed—even if a computer crashes while the message is en route to the destination queue.       If delivery of a message is guaranteed, the message is stored locally at every step along the route, until the message is successfully forwarded to the next computer. Setting the Recoverable property to `true` could affect throughput.       If the message is transactional, Message Queuing automatically treats the message as recoverable, regardless of the value of the Recoverable property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Recoverable property indicates whether the delivery of a message is guaranteed—even if a computer crashes while the message is en route to the destination queue.","pos":[0,165]},{"content":"If delivery of a message is guaranteed, the message is stored locally at every step along the route, until the message is successfully forwarded to the next computer.","pos":[172,338]},{"content":"Setting the Recoverable property to <ph id=\"ph1\">`true`</ph> could affect throughput.","pos":[339,406],"source":" Setting the Recoverable property to `true` could affect throughput."},{"content":"If the message is transactional, Message Queuing automatically treats the message as recoverable, regardless of the value of the Recoverable property.","pos":[413,563]}]},{"pos":[88814,89138],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if delivery of the message is guaranteed (through saving the message to disk while en route); <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if delivery is not assured. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if delivery of the message is guaranteed (through saving the message to disk while en route); <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if delivery is not assured.","pos":[0,245],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if delivery of the message is guaranteed (through saving the message to disk while en route); <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if delivery is not assured."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[246,324],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[89313,89378],"content":"The message queue is filtered to ignore the Recoverable property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the Recoverable property.","pos":[0,65]}]},{"pos":[89727,89804],"content":"Gets or sets the queue that receives application-generated response messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the queue that receives application-generated response messages.","pos":[0,77]}]},{"pos":[89817,90324],"content":"The ResponseQueue property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application. The sending application specifies response queues when the application sends its messages. Any available queue can be specified as a response queue.       Messages returned to the response queue are application-specific. The application must define the contents of the messages as well as the action to take upon receipt of a message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ResponseQueue property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application. The sending application specifies response queues when the application sends its messages. Any available queue can be specified as a response queue.       Messages returned to the response queue are application-specific. The application must define the contents of the messages as well as the action to take upon receipt of a message.","pos":[0,505],"nodes":[{"content":"The ResponseQueue property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application.","pos":[0,170]},{"content":"The sending application specifies response queues when the application sends its messages.","pos":[171,261]},{"content":"Any available queue can be specified as a response queue.","pos":[262,319]},{"content":"Messages returned to the response queue are application-specific.","pos":[326,391]},{"content":"The application must define the contents of the messages as well as the action to take upon receipt of a message.","pos":[392,505]}]}]},{"pos":[90719,90913],"content":"The <xref href=\"System.Messaging.MessageQueue\"></xref> to which application-generated response messages are returned. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which application-generated response messages are returned.","pos":[0,117],"source":"The <xref href=\"System.Messaging.MessageQueue\"></xref> to which application-generated response messages are returned."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[118,194],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[91090,91157],"content":"The message queue is filtered to ignore the ResponseQueue property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the ResponseQueue property.","pos":[0,67]}]},{"pos":[91516,91564],"content":"Gets or sets the security context for a message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the security context for a message.","pos":[0,48]}]},{"pos":[91734,91903],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Messaging.SecurityContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the security context for a message, if the property has previously been set; otherwise NULL.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Messaging.SecurityContext\"></xref> object that contains the security context for a message, if the property has previously been set; otherwise NULL."},{"pos":[92343,92411],"content":"Gets or sets the security certificate used to authenticate messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the security certificate used to authenticate messages.","pos":[0,68]}]},{"pos":[92424,93447],"content":"The receiving application uses the SenderCertificate property when the message includes an external security certificate.       Message Queuing can authenticate a message using either an internal or external security certificate. Message Queuing provides internal certificates, which are used to verify message integrity. A certification authority provides an external certificate, which you can access through the SenderCertificate property of the message. In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender. An internal certificate has no usable value to a receiving application.       An external certificate must be registered with the directory service of the Message Queuing system. An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature.","needQuote":false,"needEscape":true,"nodes":[{"content":"The receiving application uses the SenderCertificate property when the message includes an external security certificate.       Message Queuing can authenticate a message using either an internal or external security certificate. Message Queuing provides internal certificates, which are used to verify message integrity. A certification authority provides an external certificate, which you can access through the SenderCertificate property of the message. In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender. An internal certificate has no usable value to a receiving application.       An external certificate must be registered with the directory service of the Message Queuing system. An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature.","pos":[0,1019],"nodes":[{"content":"The receiving application uses the SenderCertificate property when the message includes an external security certificate.","pos":[0,121]},{"content":"Message Queuing can authenticate a message using either an internal or external security certificate.","pos":[128,229]},{"content":"Message Queuing provides internal certificates, which are used to verify message integrity.","pos":[230,321]},{"content":"A certification authority provides an external certificate, which you can access through the SenderCertificate property of the message.","pos":[322,457]},{"content":"In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender.","pos":[458,613]},{"content":"An internal certificate has no usable value to a receiving application.","pos":[614,685]},{"content":"An external certificate must be registered with the directory service of the Message Queuing system.","pos":[692,792]},{"content":"An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature.","pos":[793,1019]}]}]},{"pos":[93575,93738],"content":"An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message. The default is a zero-length array.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message. The default is a zero-length array.","pos":[0,163],"nodes":[{"content":"An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message.","pos":[0,127]},{"content":"The default is a zero-length array.","pos":[128,163]}]}]},{"pos":[93919,93990],"content":"The message queue is filtered to ignore the SenderCertificate property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the SenderCertificate property.","pos":[0,71]}]},{"pos":[94314,94354],"content":"Gets the identifier of the sending user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the identifier of the sending user.","pos":[0,40]}]},{"pos":[94367,95348],"content":"If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `false`, the sender identifier specified in the SenderId property is not attached to the message when it is sent. This indicates to Message Queuing that the sender should not be validated when it sends the message to the destination queue. If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `true`, the SenderId property value is trustworthy only if the message was authenticated. Use the <xref:System.Messaging.Message.Authenticated%2A> property in conjunction with the SenderId property to verify the sender's access rights.       A connector application is an application that uses a connector server to provide communication between Message Queuing and other queuing systems. Message Queuing requires connector applications to provide sender identification. You must set the <xref:System.Messaging.Message.ConnectorType%2A> property when sending a message through a connector application.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the &lt;xref:System.Messaging.Message.AttachSenderId%2A&gt; property is <ph id=\"ph1\">`false`</ph>, the sender identifier specified in the SenderId property is not attached to the message when it is sent.","pos":[0,182],"source":"If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `false`, the sender identifier specified in the SenderId property is not attached to the message when it is sent."},{"content":"This indicates to Message Queuing that the sender should not be validated when it sends the message to the destination queue.","pos":[183,308]},{"content":"If the &lt;xref:System.Messaging.Message.AttachSenderId%2A&gt; property is <ph id=\"ph1\">`true`</ph>, the SenderId property value is trustworthy only if the message was authenticated.","pos":[309,467],"source":" If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `true`, the SenderId property value is trustworthy only if the message was authenticated."},{"content":"Use the &lt;xref:System.Messaging.Message.Authenticated%2A&gt; property in conjunction with the SenderId property to verify the sender's access rights.","pos":[468,613],"source":" Use the <xref:System.Messaging.Message.Authenticated%2A> property in conjunction with the SenderId property to verify the sender's access rights."},{"content":"A connector application is an application that uses a connector server to provide communication between Message Queuing and other queuing systems.","pos":[620,766]},{"content":"Message Queuing requires connector applications to provide sender identification.","pos":[767,848]},{"content":"You must set the &lt;xref:System.Messaging.Message.ConnectorType%2A&gt; property when sending a message through a connector application.","pos":[849,979],"source":" You must set the <xref:System.Messaging.Message.ConnectorType%2A> property when sending a message through a connector application."}]},{"pos":[95462,95676],"content":"An array of byte values that identifies the sender. The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of byte values that identifies the sender. The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.","pos":[0,214],"nodes":[{"content":"An array of byte values that identifies the sender.","pos":[0,51]},{"content":"The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.","pos":[52,214]}]}]},{"pos":[95849,96030],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SenderId property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SenderId property.","pos":[0,177],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the SenderId property.","pos":[104,177]}]}]},{"pos":[96380,96441],"content":"Gets the version of Message Queuing used to send the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the version of Message Queuing used to send the message.","pos":[0,61]}]},{"pos":[96454,96770],"content":"The SenderVersion property is important for certain features. For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.       The sending Queue Manager sets the SenderVersion property when the message is sent.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SenderVersion property is important for certain features. For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.       The sending Queue Manager sets the SenderVersion property when the message is sent.","pos":[0,314],"nodes":[{"content":"The SenderVersion property is important for certain features.","pos":[0,61]},{"content":"For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.","pos":[62,224]},{"content":"The sending Queue Manager sets the SenderVersion property when the message is sent.","pos":[231,314]}]}]},{"pos":[97113,97169],"content":"The version of Message Queuing used to send the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The version of Message Queuing used to send the message.","pos":[0,56]}]},{"pos":[97347,97533],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SenderVersion property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SenderVersion property.","pos":[0,182],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the SenderVersion property.","pos":[104,182]}]}]},{"pos":[97858,97959],"content":"Gets the date and time on the sending computer that the message was sent by the source queue manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the date and time on the sending computer that the message was sent by the source queue manager.","pos":[0,101]}]},{"pos":[97971,98202],"content":"The SentTime property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created. This time zone could be different from those of the source and destination queues.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SentTime property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created. This time zone could be different from those of the source and destination queues.","pos":[0,231],"nodes":[{"content":"The SentTime property is adjusted to the local time of the computer on which this instance of the &lt;xref:System.Messaging.Message&gt; class was created.","pos":[0,148],"source":"The SentTime property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created."},{"content":"This time zone could be different from those of the source and destination queues.","pos":[149,231]}]}]},{"pos":[98541,98612],"content":"A <xref:System.DateTime> that represents the time the message was sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; that represents the time the message was sent.","pos":[0,71],"source":"A <xref:System.DateTime> that represents the time the message was sent."}]},{"pos":[98785,98966],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SentTime property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SentTime property.","pos":[0,177],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the SentTime property.","pos":[104,177]}]}]},{"pos":[99316,99368],"content":"Gets the computer from which the message originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the computer from which the message originated.","pos":[0,52]}]},{"pos":[99380,99525],"content":"The format of the SourceMachine property does not include preceding two forward slashes (\\\\\\\\). For example, `myServer` is a valid SourceMachine.","needQuote":true,"needEscape":true,"nodes":[{"content":"The format of the SourceMachine property does not include preceding two forward slashes (<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>).","pos":[0,95],"source":"The format of the SourceMachine property does not include preceding two forward slashes (\\\\\\\\)."},{"content":"For example, <ph id=\"ph1\">`myServer`</ph> is a valid SourceMachine.","pos":[96,145],"source":" For example, `myServer` is a valid SourceMachine."}]},{"pos":[99870,99927],"content":"The name of the computer from which the message was sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the computer from which the message was sent.","pos":[0,57]}]},{"pos":[100105,100291],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SourceMachine property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the SourceMachine property.","pos":[0,182],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the SourceMachine property.","pos":[104,182]}]}]},{"pos":[100415,100483],"content":"The computer information or directory service could not be accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computer information or directory service could not be accessed.","pos":[0,68]}]},{"pos":[100847,100945],"content":"Gets or sets the maximum amount of time for the message to be received from the destination queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum amount of time for the message to be received from the destination queue.","pos":[0,98]}]},{"pos":[100958,102559],"content":"The TimeToBeReceived property specifies the total time for a sent message to be received from the destination queue. The time limit includes the time spent getting to the destination queue and the time spent waiting in the queue before the message is received.      > [!CAUTION] >  When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing. Otherwise, unpredictable behavior might result when sending a message whose TimeToBeReceived property is not <xref:System.Messaging.Message.InfiniteTimeout>.       If the interval specified by the TimeToBeReceived property expires before the message is removed from the queue, Message Queuing discards the message in one of two ways. If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored.       You can set the message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires.       If the value specified by the TimeToBeReceived property is less than the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property, TimeToBeReceived takes precedence.       When several messages are sent in a single transaction, Message Queuing uses the TimeToBeReceived property of the first message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TimeToBeReceived property specifies the total time for a sent message to be received from the destination queue.","pos":[0,116]},{"content":"The time limit includes the time spent getting to the destination queue and the time spent waiting in the queue before the message is received.","pos":[117,260]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing.","pos":[266,439],"source":"      > [!CAUTION] >  When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing."},{"content":"Otherwise, unpredictable behavior might result when sending a message whose TimeToBeReceived property is not &lt;xref:System.Messaging.Message.InfiniteTimeout&gt;.","pos":[440,597],"source":" Otherwise, unpredictable behavior might result when sending a message whose TimeToBeReceived property is not <xref:System.Messaging.Message.InfiniteTimeout>."},{"content":"If the interval specified by the TimeToBeReceived property expires before the message is removed from the queue, Message Queuing discards the message in one of two ways.","pos":[604,773]},{"content":"If the message's &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; property is <ph id=\"ph1\">`true`</ph>, the message is sent to the dead-letter queue.","pos":[774,910],"source":" If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue."},{"content":"If &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; is <ph id=\"ph1\">`false`</ph>, the message is ignored.","pos":[911,1003],"source":" If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored."},{"content":"You can set the message's &lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt; property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires.","pos":[1010,1256],"source":"       You can set the message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires."},{"content":"If the value specified by the TimeToBeReceived property is less than the value specified by the &lt;xref:System.Messaging.Message.TimeToReachQueue%2A&gt; property, TimeToBeReceived takes precedence.","pos":[1263,1455],"source":"       If the value specified by the TimeToBeReceived property is less than the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property, TimeToBeReceived takes precedence."},{"content":"When several messages are sent in a single transaction, Message Queuing uses the TimeToBeReceived property of the first message.","pos":[1462,1590]}]},{"pos":[102925,103079],"content":"The total time for a sent message to be received from the destination queue. The default is <xref href=\"System.Messaging.Message.InfiniteTimeout\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The total time for a sent message to be received from the destination queue.","pos":[0,76]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message.InfiniteTimeout\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[77,154],"source":" The default is <xref href=\"System.Messaging.Message.InfiniteTimeout\"></xref>."}]},{"pos":[103259,103329],"content":"The message queue is filtered to ignore the TimeToBeReceived property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the TimeToBeReceived property.","pos":[0,70]}]},{"pos":[103424,103476],"content":"The value specified for TimeToBeReceived is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value specified for TimeToBeReceived is invalid.","pos":[0,52]}]},{"pos":[103840,103915],"content":"Gets or sets the maximum amount of time for the message to reach the queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum amount of time for the message to reach the queue.","pos":[0,75]}]},{"pos":[103928,105176],"content":"If the interval specified by the TimeToReachQueue property expires before the message reaches its destination, Message Queuing discards the message in one of two ways. If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored       You can set he message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires.       If the TimeToReachQueue property is set to 0 seconds, Message Queuing tries once to send the message to its destination—if the queue is waiting for the message. If the queue is local, the message always reaches it.       If the value specified by the TimeToReachQueue property is greater than the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.       When several messages are sent in a single transaction, Message Queuing uses the TimeToReachQueue property of the first message.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the interval specified by the TimeToReachQueue property expires before the message reaches its destination, Message Queuing discards the message in one of two ways.","pos":[0,167]},{"content":"If the message's &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; property is <ph id=\"ph1\">`true`</ph>, the message is sent to the dead-letter queue.","pos":[168,304],"source":" If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue."},{"content":"If &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; is <ph id=\"ph1\">`false`</ph>, the message is ignored       You can set he message's &lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt; property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires.","pos":[305,647],"source":" If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored       You can set he message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires."},{"content":"If the TimeToReachQueue property is set to 0 seconds, Message Queuing tries once to send the message to its destination—if the queue is waiting for the message.","pos":[654,814]},{"content":"If the queue is local, the message always reaches it.","pos":[815,868]},{"content":"If the value specified by the TimeToReachQueue property is greater than the value specified by the &lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt; property, &lt;xref:System.Messaging.Message.TimeToBeReceived%2A&gt; takes precedence.","pos":[875,1105],"source":"       If the value specified by the TimeToReachQueue property is greater than the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence."},{"content":"When several messages are sent in a single transaction, Message Queuing uses the TimeToReachQueue property of the first message.","pos":[1112,1240]}]},{"pos":[105542,105727],"content":"The time limit for the message to reach the destination queue, beginning from the time the message is sent. The default is <xref href=\"System.Messaging.Message.InfiniteTimeout\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time limit for the message to reach the destination queue, beginning from the time the message is sent.","pos":[0,107]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message.InfiniteTimeout\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[108,185],"source":" The default is <xref href=\"System.Messaging.Message.InfiniteTimeout\"></xref>."}]},{"pos":[105907,105977],"content":"The message queue is filtered to ignore the TimeToReachQueue property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the TimeToReachQueue property.","pos":[0,70]}]},{"pos":[106072,106162],"content":"The value specified for TimeToReachQueue is invalid. It might represent a negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value specified for TimeToReachQueue is invalid. It might represent a negative number.","pos":[0,90],"nodes":[{"content":"The value specified for TimeToReachQueue is invalid.","pos":[0,52]},{"content":"It might represent a negative number.","pos":[53,90]}]}]},{"pos":[106511,106583],"content":"Gets the identifier for the transaction of which the message was a part.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the identifier for the transaction of which the message was a part.","pos":[0,72]}]},{"pos":[106596,107443],"content":"Receiving applications use the TransactionId property to verify that a message was sent as part of a specific transaction. The transaction identifier contains the identifier of the sending computer (first 16 bits) followed by a 4-byte transaction sequence number.       This property is available only for Message Queuing version 2.0 and later.       Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <sup>20</sup>. Message Queuing guarantees only that subsequent transactions will have different transaction sequence numbers.       You can use the TransactionId property along with the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties to verify transaction boundaries.","needQuote":false,"needEscape":true,"nodes":[{"content":"Receiving applications use the TransactionId property to verify that a message was sent as part of a specific transaction.","pos":[0,122]},{"content":"The transaction identifier contains the identifier of the sending computer (first 16 bits) followed by a 4-byte transaction sequence number.","pos":[123,263]},{"content":"This property is available only for Message Queuing version 2.0 and later.","pos":[270,344]},{"content":"Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <bpt id=\"p1\">&lt;sup&gt;</bpt>20<ept id=\"p1\">&lt;/sup&gt;</ept>.","pos":[351,510],"source":"       Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <sup>20</sup>."},{"content":"Message Queuing guarantees only that subsequent transactions will have different transaction sequence numbers.","pos":[511,621]},{"content":"You can use the TransactionId property along with the &lt;xref:System.Messaging.Message.IsFirstInTransaction%2A&gt; and &lt;xref:System.Messaging.Message.IsLastInTransaction%2A&gt; properties to verify transaction boundaries.","pos":[628,841],"source":"       You can use the TransactionId property along with the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties to verify transaction boundaries."}]},{"pos":[107789,107852],"content":"The identifier for the transaction associated with the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier for the transaction associated with the message.","pos":[0,63]}]},{"pos":[108030,108216],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the TransactionId property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the TransactionId property.","pos":[0,182],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the TransactionId property.","pos":[104,182]}]}]},{"pos":[108611,108668],"content":"Gets the transaction status queue on the source computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the transaction status queue on the source computer.","pos":[0,57]}]},{"pos":[108681,109430],"content":"The TransactionStatusQueue property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications. Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.       A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.       The connector application can use the transaction status queue to send acknowledgment messages back to the sending application. The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TransactionStatusQueue property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications. Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.       A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.       The connector application can use the transaction status queue to send acknowledgment messages back to the sending application. The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments.","pos":[0,745],"nodes":[{"content":"The TransactionStatusQueue property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications.","pos":[0,165]},{"content":"Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.","pos":[166,307]},{"content":"A foreign queue exists in a queuing system other than Microsoft Message Queuing.","pos":[314,394]},{"content":"Message Queuing communicates with such queues through a connector application.","pos":[395,473]},{"content":"The connector application can use the transaction status queue to send acknowledgment messages back to the sending application.","pos":[480,607]},{"content":"The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments.","pos":[608,745]}]}]},{"pos":[109838,110051],"content":"The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application.","pos":[0,136]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,213],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[110238,110433],"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the TransactionStatusQueue property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The message has not been sent. This property can only be read on messages retrieved from a queue.       -or-       The message queue is filtered to ignore the TransactionStatusQueue property.","pos":[0,191],"nodes":[{"content":"The message has not been sent.","pos":[0,30]},{"content":"This property can only be read on messages retrieved from a queue.","pos":[31,97]},{"content":"-or-       The message queue is filtered to ignore the TransactionStatusQueue property.","pos":[104,191]}]}]},{"pos":[110803,110908],"content":"Gets or sets a value that indicates whether the message was (or must be) authenticated before being sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the message was (or must be) authenticated before being sent.","pos":[0,105]}]},{"pos":[110921,111679],"content":"The UseAuthentication property specifies whether the message needs to be authenticated. If the sending application requests authentication, Message Queuing creates a digital signature and uses it to sign the message when it is sent and authenticate the message when it is received.       If UseAuthentication is `false` and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue.       You cannot determine if a message failed authentication by looking at its properties. Message Queuing discards such messages before they are delivered to the queue. However, you can request that an acknowledgment message be sent if a delivery failure prevents a message from arriving in the queue.","needQuote":false,"needEscape":true,"nodes":[{"content":"The UseAuthentication property specifies whether the message needs to be authenticated.","pos":[0,87]},{"content":"If the sending application requests authentication, Message Queuing creates a digital signature and uses it to sign the message when it is sent and authenticate the message when it is received.","pos":[88,281]},{"content":"If UseAuthentication is <ph id=\"ph1\">`false`</ph> and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue.","pos":[288,450],"source":"       If UseAuthentication is `false` and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue."},{"content":"You cannot determine if a message failed authentication by looking at its properties.","pos":[457,542]},{"content":"Message Queuing discards such messages before they are delivered to the queue.","pos":[543,621]},{"content":"However, you can request that an acknowledgment message be sent if a delivery failure prevents a message from arriving in the queue.","pos":[622,754]}]},{"pos":[111806,112010],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the sending application requested authentication for the message; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the sending application requested authentication for the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[112191,112262],"content":"The message queue is filtered to ignore the UseAuthentication property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the UseAuthentication property.","pos":[0,71]}]},{"pos":[112636,112768],"content":"Gets or sets a value that indicates whether a copy of the message that could not be delivered should be sent to a dead-letter queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a copy of the message that could not be delivered should be sent to a dead-letter queue.","pos":[0,132]}]},{"pos":[112781,113921],"content":"The <xref:System.Messaging.Message.UseJournalQueue%2A> and UseDeadLetterQueue properties specify how Message Queuing tracks a message. If UseDeadLetterQueue is `true`, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message. Delivery failure could be caused by a message timer expiring, for example.       In the case of delivery failure for a transactional message, Message Queuing sends the message to the transactional dead-letter queue on the source machine in all negative and in-doubt cases.       When you store messages in a dead-letter queue, you should clear the queue periodically to remove messages that are no longer needed. Messages stored in dead-letter queues count against the size quota for the computer where the queue resides. The computer quota is set by the administrator and refers to the size allocated for storing messages on the whole computer, not just in a single queue.       You do not create a journal or dead-letter queue. These are both system queues that Message Queuing generates.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Messaging.Message.UseJournalQueue%2A&gt; and UseDeadLetterQueue properties specify how Message Queuing tracks a message.","pos":[0,134],"source":"The <xref:System.Messaging.Message.UseJournalQueue%2A> and UseDeadLetterQueue properties specify how Message Queuing tracks a message."},{"content":"If UseDeadLetterQueue is <ph id=\"ph1\">`true`</ph>, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message.","pos":[135,343],"source":" If UseDeadLetterQueue is `true`, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message."},{"content":"Delivery failure could be caused by a message timer expiring, for example.","pos":[344,418]},{"content":"In the case of delivery failure for a transactional message, Message Queuing sends the message to the transactional dead-letter queue on the source machine in all negative and in-doubt cases.","pos":[425,616]},{"content":"When you store messages in a dead-letter queue, you should clear the queue periodically to remove messages that are no longer needed.","pos":[623,756]},{"content":"Messages stored in dead-letter queues count against the size quota for the computer where the queue resides.","pos":[757,865]},{"content":"The computer quota is set by the administrator and refers to the size allocated for storing messages on the whole computer, not just in a single queue.","pos":[866,1017]},{"content":"You do not create a journal or dead-letter queue.","pos":[1024,1073]},{"content":"These are both system queues that Message Queuing generates.","pos":[1074,1134]}]},{"pos":[114286,114602],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,237],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[238,316],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[114784,114856],"content":"The message queue is filtered to ignore the UseDeadLetterQueue property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the UseDeadLetterQueue property.","pos":[0,72]}]},{"pos":[115205,115277],"content":"Gets or sets a value that indicates whether to make the message private.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether to make the message private.","pos":[0,72]}]},{"pos":[115290,115900],"content":"If a message is private, its body is encrypted before it is sent and decrypted when it is received. To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.       When sending private messages, your application does not need to perform the message encryption. Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service. When receiving private messages, the receiving Queue Manager always decrypts the message body.","needQuote":false,"needEscape":true,"nodes":[{"content":"If a message is private, its body is encrypted before it is sent and decrypted when it is received. To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.       When sending private messages, your application does not need to perform the message encryption. Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service. When receiving private messages, the receiving Queue Manager always decrypts the message body.","pos":[0,608],"nodes":[{"content":"If a message is private, its body is encrypted before it is sent and decrypted when it is received.","pos":[0,99]},{"content":"To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.","pos":[100,230]},{"content":"When sending private messages, your application does not need to perform the message encryption.","pos":[237,333]},{"content":"Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service.","pos":[334,513]},{"content":"When receiving private messages, the receiving Queue Manager always decrypts the message body.","pos":[514,608]}]}]},{"pos":[116255,116520],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to require Message Queuing to encrypt the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to require Message Queuing to encrypt the message; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,186],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to require Message Queuing to encrypt the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[187,265],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[116697,116764],"content":"The message queue is filtered to ignore the UseEncryption property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the UseEncryption property.","pos":[0,67]}]},{"pos":[117123,117253],"content":"Gets or sets a value that indicates whether a copy of the message should be kept in a machine journal on the originating computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a copy of the message should be kept in a machine journal on the originating computer.","pos":[0,130]}]},{"pos":[117266,118195],"content":"The UseJournalQueue and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message. If UseJournalQueue is `true`, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted.       The sent message is only copied to the journal queue if the destination queue is on a remote computer. If the destination is on the local computer, the message is sent directly to the queue; there are no intermediate steps to require journaling.       When you store messages in a journal queue, clear the queue periodically to remove messages that are no longer needed. Messages stored in journal queues count against the quota for the computer where the queue resides. (The computer quota is set by the administrator.)       You do not create a journal or dead-letter queue. These are both system queues that Message Queuing generates.","needQuote":false,"needEscape":true,"nodes":[{"content":"The UseJournalQueue and &lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt; properties specify how Message Queuing tracks a message.","pos":[0,134],"source":"The UseJournalQueue and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message."},{"content":"If UseJournalQueue is <ph id=\"ph1\">`true`</ph>, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted.","pos":[135,279],"source":" If UseJournalQueue is `true`, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted."},{"content":"The sent message is only copied to the journal queue if the destination queue is on a remote computer.","pos":[286,388]},{"content":"If the destination is on the local computer, the message is sent directly to the queue; there are no intermediate steps to require journaling.","pos":[389,531]},{"content":"When you store messages in a journal queue, clear the queue periodically to remove messages that are no longer needed.","pos":[538,656]},{"content":"Messages stored in journal queues count against the quota for the computer where the queue resides.","pos":[657,756]},{"content":"(The computer quota is set by the administrator.)       You do not create a journal or dead-letter queue.","pos":[757,862]},{"content":"These are both system queues that Message Queuing generates.","pos":[863,923]}]},{"pos":[118554,118962],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,329],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[330,408],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[119141,119210],"content":"The message queue is filtered to ignore the UseJournalQueue property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the UseJournalQueue property.","pos":[0,69]}]},{"pos":[119544,119648],"content":"Gets or sets a value that indicates whether to trace a message as it moves toward its destination queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether to trace a message as it moves toward its destination queue.","pos":[0,104]}]},{"pos":[119661,120311],"content":"The UseTracing property specifies whether to track the route of a message as it moves toward its destination queue. If `true`, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server. The report queue is specified by the source Queue Manager. Report queues are not limited to report messages generated by Message Queuing; your application-generated messages can also be sent to report queues.       Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise. The administrator configures these settings.","needQuote":false,"needEscape":true,"nodes":[{"content":"The UseTracing property specifies whether to track the route of a message as it moves toward its destination queue.","pos":[0,115]},{"content":"If <ph id=\"ph1\">`true`</ph>, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server.","pos":[116,271],"source":" If `true`, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server."},{"content":"The report queue is specified by the source Queue Manager.","pos":[272,330]},{"content":"Report queues are not limited to report messages generated by Message Queuing; your application-generated messages can also be sent to report queues.","pos":[331,480]},{"content":"Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise.","pos":[487,603]},{"content":"The administrator configures these settings.","pos":[604,648]}]},{"pos":[120660,121023],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,284],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[285,363],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[121197,121261],"content":"The message queue is filtered to ignore the UseTracing property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message queue is filtered to ignore the UseTracing property.","pos":[0,64]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.Message\n  id: Message\n  children:\n  - System.Messaging.Message.#ctor\n  - System.Messaging.Message.#ctor(System.Object)\n  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)\n  - System.Messaging.Message.AcknowledgeType\n  - System.Messaging.Message.Acknowledgment\n  - System.Messaging.Message.AdministrationQueue\n  - System.Messaging.Message.AppSpecific\n  - System.Messaging.Message.ArrivedTime\n  - System.Messaging.Message.AttachSenderId\n  - System.Messaging.Message.Authenticated\n  - System.Messaging.Message.AuthenticationProviderName\n  - System.Messaging.Message.AuthenticationProviderType\n  - System.Messaging.Message.Body\n  - System.Messaging.Message.BodyStream\n  - System.Messaging.Message.BodyType\n  - System.Messaging.Message.ConnectorType\n  - System.Messaging.Message.CorrelationId\n  - System.Messaging.Message.DestinationQueue\n  - System.Messaging.Message.DestinationSymmetricKey\n  - System.Messaging.Message.DigitalSignature\n  - System.Messaging.Message.EncryptionAlgorithm\n  - System.Messaging.Message.Extension\n  - System.Messaging.Message.Formatter\n  - System.Messaging.Message.HashAlgorithm\n  - System.Messaging.Message.Id\n  - System.Messaging.Message.InfiniteTimeout\n  - System.Messaging.Message.IsFirstInTransaction\n  - System.Messaging.Message.IsLastInTransaction\n  - System.Messaging.Message.Label\n  - System.Messaging.Message.LookupId\n  - System.Messaging.Message.MessageType\n  - System.Messaging.Message.Priority\n  - System.Messaging.Message.Recoverable\n  - System.Messaging.Message.ResponseQueue\n  - System.Messaging.Message.SecurityContext\n  - System.Messaging.Message.SenderCertificate\n  - System.Messaging.Message.SenderId\n  - System.Messaging.Message.SenderVersion\n  - System.Messaging.Message.SentTime\n  - System.Messaging.Message.SourceMachine\n  - System.Messaging.Message.TimeToBeReceived\n  - System.Messaging.Message.TimeToReachQueue\n  - System.Messaging.Message.TransactionId\n  - System.Messaging.Message.TransactionStatusQueue\n  - System.Messaging.Message.UseAuthentication\n  - System.Messaging.Message.UseDeadLetterQueue\n  - System.Messaging.Message.UseEncryption\n  - System.Messaging.Message.UseJournalQueue\n  - System.Messaging.Message.UseTracing\n  langs:\n  - csharp\n  name: Message\n  nameWithType: Message\n  fullName: System.Messaging.Message\n  type: Class\n  summary: Provides access to the properties needed to define a Message Queuing message.\n  remarks: \"Use the Message class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.  \\n  \\n <xref:System.Messaging.MessageQueue> uses the Message class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> methods create a new instance of the Message class and set the instance's properties. The Message class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages. When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved.  \\n  \\n The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue. You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue. The types of settings include formatter, label, encryption, and authentication. You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages. Using a Message instance to send a message to the queue gives you the flexibility to access and modify many of these properties—either for a single message or on a message-by-message basis. Message properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.  \\n  \\n Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties. When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected.  \\n  \\n The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify. The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property. You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message. You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>.  \\n  \\n The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> property apply only to messages that are not of type Message. If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a Message instance sent to that queue cause these default properties to be ignored.  \\n  \\n For a list of initial property values for an instance of Message, see the <xref:System.Messaging.Message.%23ctor%2A> constructor.\"\n  example:\n  - \"The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \\n  \\n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.message_1.cpp)]\\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.message_1.cs)]\\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.message_1.vb)]  \\n  \\n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/t-system.messaging.message_2.cpp)]\\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/t-system.messaging.message_2.cs)]\\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/t-system.messaging.message_2.vb)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(\"System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      public class Message : System.ComponentModel.Component\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Messaging.Message.#ctor\n  id: '#ctor'\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Message()\n  nameWithType: Message.Message()\n  fullName: System.Messaging.Message.Message()\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.Message\"></xref> class with an empty body.\n  remarks: \"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that has an empty body.  \\n  \\n Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. The <xref:System.Messaging.Message.Body%2A> property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.  \\n  \\n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. The body is serialized using the <xref:System.Messaging.Message.Formatter%2A> property's value at the time the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance.  \\n  \\n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \\n  \\n The following table shows initial property values for an instance of <xref:System.Messaging.Message>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  \\n|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.AppSpecific%2A>|0|  \\n|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  \\n|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|  \\n|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  \\n|<xref:System.Messaging.Message.Body%2A>|`null`|  \\n|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  \\n|<xref:System.Messaging.Message.BodyType%2A>|0|  \\n|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  \\n|<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\\\"\\\")|  \\n|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \\n|<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  \\n|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \\n|<xref:System.Messaging.Message.Label%2A>|An empty string (\\\"\\\")|  \\n|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  \\n|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  \\n|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseTracing%2A>|`false`|\"\n  example:\n  - \"The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \\n  \\n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/m-system.messaging.messa_16_1.cpp)]\\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_16_1.vb)]\\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/m-system.messaging.messa_16_1.cs)]\"\n  syntax:\n    content: public Message ();\n    parameters: []\n  overload: System.Messaging.Message.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.Message.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Message(Object)\n  nameWithType: Message.Message(Object)\n  fullName: System.Messaging.Message.Message(Object)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.Message\"></xref> class, using the <xref href=\"System.Messaging.XmlMessageFormatter\"></xref> to serialize the specified object into the body of the message.\n  remarks: \"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter. The `body` parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object. The body is serialized using the <xref:System.Messaging.XmlMessageFormatter> unless you change the <xref:System.Messaging.Message.Formatter%2A> property before the <xref:System.Messaging.Message> is sent. If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.  \\n  \\n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \\n  \\n The following table shows initial property values for an instance of <xref:System.Messaging.Message>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  \\n|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.AppSpecific%2A>|0|  \\n|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  \\n|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|  \\n|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  \\n|<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|  \\n|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  \\n|<xref:System.Messaging.Message.BodyType%2A>|0|  \\n|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  \\n|<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\\\"\\\")|  \\n|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \\n|<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  \\n|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \\n|<xref:System.Messaging.Message.Label%2A>|An empty string (\\\"\\\")|  \\n|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  \\n|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  \\n|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseTracing%2A>|`false`|\"\n  example:\n  - \"The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \\n  \\n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.messa_33_1.cpp)]\\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.messa_33_1.cs)]\\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_33_1.vb)]\"\n  syntax:\n    content: public Message (object body);\n    parameters:\n    - id: body\n      type: System.Object\n      description: The object to be serialized into the body of the message.\n  overload: System.Messaging.Message.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)\n  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Message(Object,IMessageFormatter)\n  nameWithType: Message.Message(Object,IMessageFormatter)\n  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.Message\"></xref> class using the specified formatter to serialize the specified object into the body of the message.\n  remarks: \"Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter and that uses any valid formatter to serialize the body. The `body` parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object. If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.  \\n  \\n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \\n  \\n The following table shows initial property values for an instance of <xref:System.Messaging.Message>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  \\n|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.AppSpecific%2A>|0|  \\n|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  \\n|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|  \\n|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  \\n|<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|  \\n|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  \\n|<xref:System.Messaging.Message.BodyType%2A>|0|  \\n|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  \\n|<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\\\"\\\")|  \\n|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \\n|<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.Formatter%2A>|The `formatter` parameter.|  \\n|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \\n|<xref:System.Messaging.Message.Label%2A>|An empty string (\\\"\\\")|  \\n|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  \\n|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  \\n|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  \\n|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  \\n|<xref:System.Messaging.Message.UseTracing%2A>|`false`|\"\n  example:\n  - >-\n    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/6734a59e-0a86-49d1-96b9-_1.cpp)]\n     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/6734a59e-0a86-49d1-96b9-_1.cs)]\n     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/6734a59e-0a86-49d1-96b9-_1.vb)]\n  syntax:\n    content: public Message (object body, System.Messaging.IMessageFormatter formatter);\n    parameters:\n    - id: body\n      type: System.Object\n      description: The object to be serialized into the body of the message.\n    - id: formatter\n      type: System.Messaging.IMessageFormatter\n      description: A <xref href=\"System.Messaging.IMessageFormatter\"></xref> that specifies the formatter with which to serialize the message body.\n  overload: System.Messaging.Message.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.Message.AcknowledgeType\n  id: AcknowledgeType\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: AcknowledgeType\n  nameWithType: Message.AcknowledgeType\n  fullName: System.Messaging.Message.AcknowledgeType\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the type of acknowledgment message to be returned to the sending application.\n  remarks: \"The AcknowledgeType property specifies the type of acknowledgment messages requested by the sending application. Set the AcknowledgeType property before sending the message to request notification of certain occurrences—for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.  \\n  \\n Message Queuing returns notification by sending acknowledgment messages to the <xref:System.Messaging.Message.AdministrationQueue%2A> property specified by the original message. An acknowledgment message's <xref:System.Messaging.Message.Acknowledgment%2A> property indicates the type of acknowledgment that it represents. For example, if an acknowledgment message was sent because a message did not reach the destination before the <xref:System.Messaging.Message.TimeToReachQueue%2A> interval expired, the <xref:System.Messaging.Message.Acknowledgment%2A> property of the acknowledgment message would contain the value `ReachQueueTimeout`.\"\n  example:\n  - \"The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \\n  \\n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_11_1.cs)]\\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_11_1.cpp)]\\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_11_1.vb)]\"\n  syntax:\n    content: public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }\n    return:\n      type: System.Messaging.AcknowledgeTypes\n      description: One of the <xref href=\"System.Messaging.AcknowledgeTypes\"></xref> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application. The default is <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref>.\n  overload: System.Messaging.Message.AcknowledgeType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message is filtered to ignore the AcknowledgeType property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.Acknowledgment\n  id: Acknowledgment\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Acknowledgment\n  nameWithType: Message.Acknowledgment\n  fullName: System.Messaging.Message.Acknowledgment\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the classification of acknowledgment that this message represents.\n  remarks: \"When you receive a message from an administration queue, read the Acknowledgment property to verify the status of the original message.  \\n  \\n When a message is sent to its destination queue, Message Queuing can be requested to post an acknowledgment message. Such a message can indicate, for example, whether the message arrived and was retrieved within specified time-outs, or it can indicate what went wrong in the case of delivery failure. The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's <xref:System.Messaging.Message.AdministrationQueue%2A> property. The <xref:System.Messaging.Message.Id%2A> property of an acknowledgment message identifies the acknowledgment message, not the original message. You can find the identifier of the original message in the acknowledgment <xref:System.Messaging.Message> instance's <xref:System.Messaging.Message.CorrelationId%2A> property.  \\n  \\n If this <xref:System.Messaging.Message> instance represents an acknowledgment message, the Acknowledgment property specifies the type of acknowledgment. Otherwise, the Acknowledgment property contains the value `Normal`.  \\n  \\n Use the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the original message to specify the circumstances under which acknowledgments will be returned.\"\n  syntax:\n    content: public System.Messaging.Acknowledgment Acknowledgment { get; }\n    return:\n      type: System.Messaging.Acknowledgment\n      description: One of the <xref href=\"System.Messaging.Acknowledgment\"></xref> enumeration values.\n  overload: System.Messaging.Message.Acknowledgment*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*> property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.AdministrationQueue\n  id: AdministrationQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: AdministrationQueue\n  nameWithType: Message.AdministrationQueue\n  fullName: System.Messaging.Message.AdministrationQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the queue that receives the acknowledgement messages that Message Queuing generates.\n  remarks: \"The queue specified in the AdministrationQueue property can be any non-transactional queue. The acknowledgment messages sent to the administration queue can indicate whether the original message reached its destination queue and whether it was removed from the queue.  \\n  \\n When the <xref:System.Messaging.Message.AcknowledgeType%2A> property has any value other than `None`, the sending application must specify the queue to use as the administration queue.\"\n  example:\n  - \"The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \\n  \\n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_47_1.cs)]\\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_47_1.cpp)]\\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_47_1.vb)]\"\n  syntax:\n    content: public System.Messaging.MessageQueue AdministrationQueue { get; set; }\n    return:\n      type: System.Messaging.MessageQueue\n      description: The <xref href=\"System.Messaging.MessageQueue\"></xref> that specifies the administration queue used for system-generated acknowledgment messages. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Messaging.Message.AdministrationQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the AdministrationQueue property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.AppSpecific\n  id: AppSpecific\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: AppSpecific\n  nameWithType: Message.AppSpecific\n  fullName: System.Messaging.Message.AppSpecific\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets additional, application-specific information.\n  remarks: \"The AppSpecific property contains application-specific information that you can use to organize different types of messages. For example, you can use application-specific indexes. It is the responsibility of the application to interpret AppSpecific property information.  \\n  \\n Whenever possible, you should include message data in the body of the message rather than the AppSpecific property.  \\n  \\n When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing. As with the AppSpecific property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property.\"\n  syntax:\n    content: public int AppSpecific { get; set; }\n    return:\n      type: System.Int32\n      description: Information that is specific to the application. The default is zero.\n  overload: System.Messaging.Message.AppSpecific*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the AppSpecific property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.ArrivedTime\n  id: ArrivedTime\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: ArrivedTime\n  nameWithType: Message.ArrivedTime\n  fullName: System.Messaging.Message.ArrivedTime\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the time that the message arrived in the destination queue.\n  remarks: The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue. The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue.\n  example:\n  - \"The following code example displays the value of a message's ArrivedTime property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public DateTime ArrivedTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref:System.DateTime> that represents the message's arrival time in the destination queue. The time is adjusted from GMT to the local time of the computer on which the destination queue resides.\n  overload: System.Messaging.Message.ArrivedTime*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the ArrivedTime property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.AttachSenderId\n  id: AttachSenderId\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: AttachSenderId\n  nameWithType: Message.AttachSenderId\n  fullName: System.Messaging.Message.AttachSenderId\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether the sender ID should be attached to the message.\n  remarks: \"The <xref:System.Messaging.Message.SenderId%2A> property is an array of bytes that represents the identifier of the sending user. The sender ID is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.  \\n  \\n The absence of the sender ID is an indication by the sending application that Message Queuing should not validate the message's sender nor verify the sender's access rights to the receiving queue. The <xref:System.Messaging.Message.SenderId%2A> is trustworthy only if the message was authenticated when it reached the destination queue. The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> or the <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> property is `false`.  \\n  \\n> [!CAUTION]\\n>  If a message is rejected, it is either sent to the dead-letter queue (if <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`), or it is ignored. You can request acknowledgments when a message fails to reach a queue. Otherwise, when <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false` the message might be lost without warning.\"\n  example:\n  - \"The following code example gets and sets the value of a message's AttachSenderId property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool AttachSenderId { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Messaging.Message.SenderId*> should be attached to the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Messaging.Message.AttachSenderId*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the AttachSenderId property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.Authenticated\n  id: Authenticated\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Authenticated\n  nameWithType: Message.Authenticated\n  fullName: System.Messaging.Message.Authenticated\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates whether the message was authenticated.\n  remarks: \"The Authenticated property is used only by the application while it is interacting with the message and trying to determine if authentication was requested. If the message is in the queue, the message was authenticated. Conversely, if the Authenticated property is `true`, the receiving Queue Manager authenticated the message when it received that message.  \\n  \\n You cannot determine if a message failed authentication by looking at its properties. Message Queuing discards messages that fail authentication before they are delivered to the queue. However, you can request that an acknowledgment message be sent if a delivery failure prevents the message from arriving in the queue.\"\n  example:\n  - \"The following code example displays the value of a message's Authenticated property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool Authenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication was requested for the message when it entered the queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.Authenticated*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the Authenticated property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.AuthenticationProviderName\n  id: AuthenticationProviderName\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: AuthenticationProviderName\n  nameWithType: Message.AuthenticationProviderName\n  fullName: System.Messaging.Message.AuthenticationProviderName\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the name of the cryptographic provider used to generate the digital signature of the message.\n  remarks: \"You typically use the AuthenticationProviderName when working with foreign queues. Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.  \\n  \\n When sending a message, always set the AuthenticationProviderName and <xref:System.Messaging.Message.ConnectorType%2A> properties together. When the message is sent, Message Queuing ignores the authentication provider name if the connector type is not also set.  \\n  \\n The AuthenticationProviderName property cannot be `null`, but it can be an empty string (\\\"\\\").\"\n  syntax:\n    content: public string AuthenticationProviderName { get; set; }\n    return:\n      type: System.String\n      description: The name of the cryptographic provider used to generate the digital signature of the message. The default is Microsoft Base Cryptographic Provider version 1.0.\n  overload: System.Messaging.Message.AuthenticationProviderName*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The AuthenticationProviderName property could not be set.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the AuthenticationProviderName property.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The AuthenticationProviderName was set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.Message.AuthenticationProviderType\n  id: AuthenticationProviderType\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: AuthenticationProviderType\n  nameWithType: Message.AuthenticationProviderType\n  fullName: System.Messaging.Message.AuthenticationProviderType\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the type of cryptographic provider used to generate the digital signature of the message.\n  remarks: \"You typically use the AuthenticationProviderType property when working with foreign queues to specify which cryptographic service provider is associated with a message. Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.  \\n  \\n Only `RsaFull` is intended to be used with messaging.  \\n  \\n When sending a message, always set the AuthenticationProviderType and <xref:System.Messaging.Message.ConnectorType%2A> properties together. When the message is sent, Message Queuing ignores the authentication provider type if the connector type is not also set.\"\n  syntax:\n    content: public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }\n    return:\n      type: System.Messaging.CryptographicProviderType\n      description: One of the <xref href=\"System.Messaging.CryptographicProviderType\"></xref> values. The default is <xref uid=\"langword_csharp_RSA_FULL\" name=\"RSA_FULL\" href=\"\"></xref>.\n  overload: System.Messaging.Message.AuthenticationProviderType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The AuthenticationProviderType property could not be set.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the AuthenticationProviderType property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.Body\n  id: Body\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Body\n  nameWithType: Message.Body\n  fullName: System.Messaging.Message.Body\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the content of the message.\n  remarks: \"The message's Body property usually contains the data associated with the message. Although you can also send application-specific data in the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties, you should include message data in the Body of the message whenever possible. Only the Body property contents are serialized or encrypted.  \\n  \\n The Body property can contain any object whose size does not exceed 4 MB. If you use <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> to send any object that is not of type <xref:System.Messaging.Message> to the <xref:System.Messaging.MessageQueue>, that object will be located in the Body property of the <xref:System.Messaging.Message> instance returned by <xref:System.Messaging.MessageQueue.Peek%2A> or <xref:System.Messaging.MessageQueue.Receive%2A>.  \\n  \\n The string argument in `MessageQueue.Send(\\\"hello.\\\")` is an example of such a generic object.  \\n  \\n The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of information that is stored in the message body. Message Queuing uses this information to identify the type of the Body property contents.  \\n  \\n Specify either the Body property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. The Body property can be any serializable object, such as a text string, structure object, class instance, or embedded object.  \\n  \\n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n> [!NOTE]\\n>  Attempting to set the body of a message to <xref:System.Decimal.MaxValue> will cause a <xref:System.OverflowException> when the `Send` method of the <xref:System.Messaging.MessageQueue> class is called and the <xref:System.Messaging.ActiveXMessageFormatter> is used.\"\n  example:\n  - \"The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \\n  \\n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_13_1.cpp)]\\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_13_1.vb)]\\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_13_1.cs)]\"\n  syntax:\n    content: public object Body { get; set; }\n    return:\n      type: System.Object\n      description: An object that specifies the message contents. The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.\n  overload: System.Messaging.Message.Body*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref:System.Messaging.Message.Formatter*> property is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the Body property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.BodyStream\n  id: BodyStream\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: BodyStream\n  nameWithType: Message.BodyStream\n  fullName: System.Messaging.Message.BodyStream\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the information in the body of the message.\n  remarks: \"The body of a message can consist of any type of information—for example, a string, a date, a currency, a number, an array of bytes, or any managed object. This information is serialized into a <xref:System.IO.Stream> to be passed to the queue.  \\n  \\n Specify either the <xref:System.Messaging.Message.Body%2A> property or the BodyStream property before sending the <xref:System.Messaging.Message> object. If you set the <xref:System.Messaging.Message.Body%2A> property, the contents are serialized into the BodyStream property. However, you can choose to write the BodyStream property directly. This is useful, for example, when you want to open a connection to a file and stream its contents as the body of your message.  \\n  \\n Unless you write the contents of the message directly to the BodyStream property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n If you set the <xref:System.Messaging.Message.UseEncryption%2A> property to `true` for the body of this message, the message will be encrypted when it is sent, not when you set the <xref:System.Messaging.Message.Body%2A> property. Therefore, the BodyStream property is never encrypted.\"\n  syntax:\n    content: public System.IO.Stream BodyStream { get; set; }\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> that contains the serialized information included in the <xref:System.Messaging.Message.Body*> of the message.\n  overload: System.Messaging.Message.BodyStream*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the <xref:System.Messaging.Message.Body*> property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.BodyType\n  id: BodyType\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: BodyType\n  nameWithType: Message.BodyType\n  fullName: System.Messaging.Message.BodyType\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the type of data that the message body contains.\n  remarks: \"Message Queuing recognizes the body contents as an object or as a serialized stream. The BodyType property indicates the type of the object within the <xref:System.Messaging.Message.Body%2A> property of the message.  \\n  \\n The <xref:System.Messaging.XmlMessageFormatter> performs binding between native types and the object in a message body. If you use the <xref:System.Messaging.XmlMessageFormatter>, the formatter sets the BodyType property for you.  \\n  \\n Other formatters can provide binding functionality also, as shown in the following C# code.  \\n  \\n```  \\nmessage.Formatter = new ActiveXMessageFormatter();  \\nobject myObject message.Body;  \\nif (myObject is string) {  \\n}  \\nif (myObject is int) {  \\n}  \\nif (myObject is float) {  \\n}  \\n```\"\n  example:\n  - \"The following code example displays the value of a message's BodyType property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public int BodyType { get; set; }\n    return:\n      type: System.Int32\n      description: The message body's true type, such as a string, a date, a currency, or a number.\n  overload: System.Messaging.Message.BodyType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the <xref:System.Messaging.Message.Body*> property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.ConnectorType\n  id: ConnectorType\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: ConnectorType\n  nameWithType: Message.ConnectorType\n  fullName: System.Messaging.Message.ConnectorType\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates that some message properties typically set by Message Queuing were set by the sending application.\n  remarks: \"Message Queuing requires the ConnectorType property be set whenever an application sets a message property that is usually set by Message Queuing. An application typically uses a ConnectorType in the following two cases:  \\n  \\n-   Whenever a connector application passes a message. The ConnectorType tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.  \\n  \\n-   Whenever the sending application, rather than Message Queuing, encrypts a message. The ConnectorType tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message.  \\n  \\n You must set the ConnectorType property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):  \\n  \\n-   <xref:System.Messaging.Message.AuthenticationProviderName%2A>  \\n  \\n-   <xref:System.Messaging.Message.AuthenticationProviderType%2A>  \\n  \\n-   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>  \\n  \\n-   <xref:System.Messaging.Message.DigitalSignature%2A>  \\n  \\n-   <xref:System.Messaging.Message.MessageType%2A>  \\n  \\n-   <xref:System.Messaging.Message.SenderId%2A>\"\n  syntax:\n    content: public Guid ConnectorType { get; set; }\n    return:\n      type: System.Guid\n      description: A <xref:System.Guid> defined by the application and used in conjunction with connector applications or message encryption. This <xref:System.Guid> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.\n  overload: System.Messaging.Message.ConnectorType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the ConnectorType property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.CorrelationId\n  id: CorrelationId\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: CorrelationId\n  nameWithType: Message.CorrelationId\n  fullName: System.Messaging.Message.CorrelationId\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.\n  remarks: \"When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message. In this manner, the correlation identifier ties the report or acknowledgment message to the original message.  \\n  \\n The sending application can then match the acknowledgment or report with the original message by using the CorrelationId property to identify the original message's <xref:System.Messaging.Message.Id%2A> property.  \\n  \\n Connector applications also must set the CorrelationId property of the acknowledgment and report messages to the message identifier of the original message.  \\n  \\n When your application sends a response message to the sending application, you can set the CorrelationId property of the response message to the message identifier of the original message. The sending application can then match your response message to the message that was sent.\"\n  example:\n  - \"The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \\n  \\n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_95_1.cs)]\\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_95_1.cpp)]\\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_95_1.vb)]\"\n  syntax:\n    content: public string CorrelationId { get; set; }\n    return:\n      type: System.String\n      description: The message identifier specified by the <xref:System.Messaging.Message.Id*> property of the original message. The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.\n  overload: System.Messaging.Message.CorrelationId*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the CorrelationId property.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The CorrelationId is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.Message.DestinationQueue\n  id: DestinationQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: DestinationQueue\n  nameWithType: Message.DestinationQueue\n  fullName: System.Messaging.Message.DestinationQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the intended destination queue for a message.\n  remarks: The DestinationQueue property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue. Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.\n  example:\n  - \"The following code example displays the value of a message's DestinationQueue property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public System.Messaging.MessageQueue DestinationQueue { get; }\n    return:\n      type: System.Messaging.MessageQueue\n      description: A <xref href=\"System.Messaging.MessageQueue\"></xref> that specifies the intended destination queue for the message.\n  overload: System.Messaging.Message.DestinationQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the DestinationQueue property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.DestinationSymmetricKey\n  id: DestinationSymmetricKey\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: DestinationSymmetricKey\n  nameWithType: Message.DestinationSymmetricKey\n  fullName: System.Messaging.Message.DestinationSymmetricKey\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the symmetric key used to encrypt application-encrypted messages or messages sent to foreign queues.\n  remarks: \"Two scenarios require you to use the DestinationSymmetricKey property. The first is when your application, rather than Message Queuing, encrypts a message. The second is when you send an encrypted message to a queuing system other than Message Queuing.  \\n  \\n Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager. When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.  \\n  \\n If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application. It is then the responsibility of the receiving application to decrypt the message using the symmetric key.  \\n  \\n When you set the DestinationSymmetricKey property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When the message is sent, Message Queuing ignores the DestinationSymmetricKey property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.  \\n  \\n The DestinationSymmetricKey property has a maximum array size of 256.\"\n  syntax:\n    content: public byte[] DestinationSymmetricKey { get; set; }\n    return:\n      type: System.Byte[]\n      description: An array of byte values that specifies the destination symmetric key used to encrypt the message. The default is a zero-length array.\n  overload: System.Messaging.Message.DestinationSymmetricKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the DestinationSymmetricKey property.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The DestinationSymmetricKey is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.Message.DigitalSignature\n  id: DigitalSignature\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: DigitalSignature\n  nameWithType: Message.DigitalSignature\n  fullName: System.Messaging.Message.DigitalSignature\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the digital signature that Message Queuing uses to authenticate the message.\n  remarks: \"Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0. In most cases, Message Queuing generates and sets the DigitalSignature property when the sending application requests authentication. The receiving application uses this property to retrieve the digital signature attached to the message.  \\n  \\n You can only use the DigitalSignature property when running Message Queuing version 2.0. The sending application must specify Message Queuing version 1.0 signatures when requesting authentication. If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.  \\n  \\n The DigitalSignature property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent. In this scenario, the connector application—rather than Message Queuing—generates the digital signature, which it bases on the certificate of the user sending the message.  \\n  \\n The DigitalSignature property has a maximum array size of 256.  \\n  \\n When you set the DigitalSignature property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When a message is sent, Message Queuing ignores the DigitalSignature property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.\"\n  syntax:\n    content: public byte[] DigitalSignature { get; set; }\n    return:\n      type: System.Byte[]\n      description: An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message. The default is a zero-length array.\n  overload: System.Messaging.Message.DigitalSignature*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the DigitalSignature property.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The DigitalSignature property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.Message.EncryptionAlgorithm\n  id: EncryptionAlgorithm\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: EncryptionAlgorithm\n  nameWithType: Message.EncryptionAlgorithm\n  fullName: System.Messaging.Message.EncryptionAlgorithm\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the encryption algorithm used to encrypt the body of a private message.\n  remarks: \"If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt. The EncryptionAlgorithm property specifies the algorithm used to encrypt the message body of a private message.  \\n  \\n A queue can require that incoming messages be encrypted. If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message. The sending application can request that a negative acknowledgment message be returned in such a case.\"\n  syntax:\n    content: public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }\n    return:\n      type: System.Messaging.EncryptionAlgorithm\n      description: One of the <xref href=\"System.Messaging.EncryptionAlgorithm\"></xref> enumeration values. The default is <xref uid=\"langword_csharp_RC2\" name=\"RC2\" href=\"\"></xref>.\n  overload: System.Messaging.Message.EncryptionAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the EncryptionAlgorithm property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.Extension\n  id: Extension\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Extension\n  nameWithType: Message.Extension\n  fullName: System.Messaging.Message.Extension\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets additional, application-defined information associated with the message.\n  remarks: \"The Extension property provides for application-defined information, like a large binary object, that is associated with the message. It is the responsibility of the receiving application to interpret the contents of the Extension property.  \\n  \\n Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the Extension property.  \\n  \\n When working with foreign queues, use the Extension property to specify message properties that do not exist in Message Queuing.  \\n  \\n A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.\"\n  syntax:\n    content: public byte[] Extension { get; set; }\n    return:\n      type: System.Byte[]\n      description: An array of byte values that provides application-defined information associated with the message. The default is a zero-length array.\n  overload: System.Messaging.Message.Extension*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the Extension property.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Extension property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.Message.Formatter\n  id: Formatter\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Formatter\n  nameWithType: Message.Formatter\n  fullName: System.Messaging.Message.Formatter\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the formatter used to serialize an object into or deserialize an object from the message body.\n  remarks: \"Use the Formatter property when reading and writing a message. When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property.  \\n  \\n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the Formatter property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the Formatter property. If you send the message without specifying a value for the Formatter property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.\"\n  example:\n  - \"The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \\n  \\n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_1.cpp)]\\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_1.cs)]\\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_1.vb)]  \\n  \\n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_2.cpp)]\\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_2.cs)]\\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_2.vb)]\"\n  syntax:\n    content: public System.Messaging.IMessageFormatter Formatter { get; set; }\n    return:\n      type: System.Messaging.IMessageFormatter\n      description: The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body. The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>.\n  overload: System.Messaging.Message.Formatter*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Formatter property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.Message.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: Message.HashAlgorithm\n  fullName: System.Messaging.Message.HashAlgorithm\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a digital signature for a message.\n  remarks: On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message. The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.\n  syntax:\n    content: public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }\n    return:\n      type: System.Messaging.HashAlgorithm\n      description: One of the <xref href=\"System.Messaging.HashAlgorithm\"></xref> enumeration values. For Windows XP, the default is <xref uid=\"langword_csharp_SHA\" name=\"SHA\" href=\"\"></xref>. Otherwise, the default is <xref uid=\"langword_csharp_MD5\" name=\"MD5\" href=\"\"></xref>.\n  overload: System.Messaging.Message.HashAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the HashAlgorithm property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.Id\n  id: Id\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Id\n  nameWithType: Message.Id\n  fullName: System.Messaging.Message.Id\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the message's identifier.\n  remarks: \"Message Queuing generates a message identifier when the message is sent. The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer. The combination of the two items produces a message identifier that is unique on the network.  \\n  \\n Message Queuing generates message identifiers for all messages—including acknowledgment and report messages. An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message. You can find the Id property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message.  \\n  \\n You can also use the Id property when sending a response message to a response queue. To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the Id property of the original message. The application reading the response message can then use the correlation identifier of the response message to identify the original message.\"\n  example:\n  - \"The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \\n  \\n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_19_1.cs)]\\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_19_1.cpp)]\\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_19_1.vb)]\"\n  syntax:\n    content: public string Id { get; }\n    return:\n      type: System.String\n      description: The message's unique identifier, which is generated by Message Queuing.\n  overload: System.Messaging.Message.Id*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the Id property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.InfiniteTimeout\n  id: InfiniteTimeout\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: InfiniteTimeout\n  nameWithType: Message.InfiniteTimeout\n  fullName: System.Messaging.Message.InfiniteTimeout\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Specifies that no time-out exists.\n  remarks: <xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out. For the former, the time-out is the maximum time allowed for a message to be received from the queue. For the latter, the time-out is the time allowed for a message to reach the queue. In both cases, you can specify the time-out as a number of seconds or use InfiniteTimeout to indicate that no time-out exists.\n  example:\n  - \"The following code example demonstrates the use of the InfiniteTimeout field.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public static readonly TimeSpan InfiniteTimeout;\n    return:\n      type: System.TimeSpan\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.Message.IsFirstInTransaction\n  id: IsFirstInTransaction\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: IsFirstInTransaction\n  nameWithType: Message.IsFirstInTransaction\n  fullName: System.Messaging.Message.IsFirstInTransaction\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates whether the message was the first message sent in a transaction.\n  remarks: \"Receiving applications use the IsFirstInTransaction property to verify that a message was the first message sent in a single transaction to a single queue.  \\n  \\n This property is available only with Message Queuing version 2.0 and later.  \\n  \\n To verify transaction boundaries, you can use the IsFirstInTransaction property along with two other properties: <xref:System.Messaging.Message.IsLastInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>. Use the former to check whether a message was the last message sent in the transaction, and use the latter to retrieve the identifier of the transaction.  \\n  \\n If only one message is sent in a transaction, the IsFirstInTransaction and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`.\"\n  example:\n  - \"The following code example displays the value of a message's IsFirstInTransaction property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool IsFirstInTransaction { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the message was the first message sent in a transaction; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.IsFirstInTransaction*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the IsFirstInTransaction property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.IsLastInTransaction\n  id: IsLastInTransaction\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: IsLastInTransaction\n  nameWithType: Message.IsLastInTransaction\n  fullName: System.Messaging.Message.IsLastInTransaction\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates whether the message was the last message sent in a transaction.\n  remarks: \"Receiving applications use the IsLastInTransaction property to verify that a message was the last message sent in a single transaction to a single queue.  \\n  \\n This property is available only with Message Queuing version 2.0 and later.  \\n  \\n To verify transaction boundaries, you can use the IsLastInTransaction property along with two other properties: <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>. Use the former to check whether a message was the first message sent in the transaction, and use the latter to retrieve the identifier of the transaction.  \\n  \\n If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and IsLastInTransaction properties are both set to `true`.\"\n  example:\n  - \"The following code example displays the value of a message's IsLastInTransaction property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool IsLastInTransaction { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the message was the last message sent in a single transaction; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.IsLastInTransaction*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the IsLastInTransaction property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.Label\n  id: Label\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Label\n  nameWithType: Message.Label\n  fullName: System.Messaging.Message.Label\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets an application-defined Unicode string that describes the message.\n  remarks: \"You can use a message label for several purposes. For example, you can use it for display purposes or to selectively process messages based on the label value. The label does not need to be unique across messages.  \\n  \\n Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms. It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application.\"\n  example:\n  - \"The following code example gets and sets the value of a message's Label property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public string Label { get; set; }\n    return:\n      type: System.String\n      description: The label of the message. The default is an empty string (\"\").\n  overload: System.Messaging.Message.Label*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the Label property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.LookupId\n  id: LookupId\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: LookupId\n  nameWithType: Message.LookupId\n  fullName: System.Messaging.Message.LookupId\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Gets the message's lookup identifier.\n  remarks: \"The LookupId property provides read-only access to a message's lookup identifier. The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue. The lookup identifier is not the same as the message identifier that is generated when the message is sent.  \\n  \\n Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues. In other words, this includes both messages sent by sending applications and by Message Queuing. The lookup identifier is unique to the queue and has no meaning outside the queue.  \\n  \\n If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.  \\n  \\n The LookupId property can only be read on messages retrieved from a queue.  \\n  \\n A lookup identifier is used to read a specific message in the queue. Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,  \\n  \\n Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application. One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue.\"\n  syntax:\n    content: public long LookupId { get; }\n    return:\n      type: System.Int64\n      description: The message's lookup identifier, which is generated by Message Queuing and is unique to the queue where the message resides.\n  overload: System.Messaging.Message.LookupId*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the LookupId property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.MessageType\n  id: MessageType\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: MessageType\n  nameWithType: Message.MessageType\n  fullName: System.Messaging.Message.MessageType\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: 'Gets the message type: <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>, <xref uid=\"langword_csharp_Acknowledgment\" name=\"Acknowledgment\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Report\" name=\"Report\" href=\"\"></xref>.'\n  remarks: \"Message Queuing typically sets this property when it sends the message. A Message Queuing message can be one of the following types:  \\n  \\n-   `Normal`, which is either a typical message sent from an application to a queue, or a response message returned to the sending application.  \\n  \\n-   `Acknowledgement`, which Message Queuing generates whenever the sending application requests one. For example, Message Queuing can generate positive or negative messages to indicate that the original message arrived or was read. Message Queuing returns the appropriate acknowledgment message to the administration queue specified by the sending application.  \\n  \\n-   `Report`, which Message Queuing generates whenever a report queue is defined at the source Queue Manager. When tracing is enabled, Message Queuing sends a report message to the Message Queuing report queue each time the original message enters or leaves a Message Queuing server.\"\n  example:\n  - \"The following code example displays the value of a message's MessageType property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public System.Messaging.MessageType MessageType { get; }\n    return:\n      type: System.Messaging.MessageType\n      description: One of the MessageType values.\n  overload: System.Messaging.Message.MessageType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the MessageType property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.Priority\n  id: Priority\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Priority\n  nameWithType: Message.Priority\n  fullName: System.Messaging.Message.Priority\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the message priority, which determines where in the queue the message is placed.\n  remarks: \"The Priority property affects how Message Queuing handles the message both while it is en route and once it reaches its destination. Higher-priority messages are given preference during routing and inserted toward the front of the destination queue. Messages with the same priority are placed in the queue according to their arrival time.  \\n  \\n You can set a meaningful priority only for non-transactional messages. Message Queuing automatically sets the priority for transactional messages to `Lowest`, which causes transactional message priority to be ignored.\"\n  example:\n  - \"The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \\n  \\n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_87_1.cpp)]\\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_87_1.vb)]\\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_87_1.cs)]\"\n  syntax:\n    content: public System.Messaging.MessagePriority Priority { get; set; }\n    return:\n      type: System.Messaging.MessagePriority\n      description: One of the <xref href=\"System.Messaging.MessagePriority\"></xref> values, which represent the priority levels of non-transactional messages. The default is <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>.\n  overload: System.Messaging.Message.Priority*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the Priority property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.Recoverable\n  id: Recoverable\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: Recoverable\n  nameWithType: Message.Recoverable\n  fullName: System.Messaging.Message.Recoverable\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether the message is guaranteed to be delivered in the event of a computer failure or network problem.\n  remarks: \"The Recoverable property indicates whether the delivery of a message is guaranteed—even if a computer crashes while the message is en route to the destination queue.  \\n  \\n If delivery of a message is guaranteed, the message is stored locally at every step along the route, until the message is successfully forwarded to the next computer. Setting the Recoverable property to `true` could affect throughput.  \\n  \\n If the message is transactional, Message Queuing automatically treats the message as recoverable, regardless of the value of the Recoverable property.\"\n  example:\n  - \"The following code example gets and sets the value of a message's Recoverable property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool Recoverable { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if delivery of the message is guaranteed (through saving the message to disk while en route); <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if delivery is not assured. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.Recoverable*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the Recoverable property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.ResponseQueue\n  id: ResponseQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: ResponseQueue\n  nameWithType: Message.ResponseQueue\n  fullName: System.Messaging.Message.ResponseQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the queue that receives application-generated response messages.\n  remarks: \"The ResponseQueue property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application. The sending application specifies response queues when the application sends its messages. Any available queue can be specified as a response queue.  \\n  \\n Messages returned to the response queue are application-specific. The application must define the contents of the messages as well as the action to take upon receipt of a message.\"\n  example:\n  - \"The following code example gets and sets the value of a message's ResponseQueue property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public System.Messaging.MessageQueue ResponseQueue { get; set; }\n    return:\n      type: System.Messaging.MessageQueue\n      description: The <xref href=\"System.Messaging.MessageQueue\"></xref> to which application-generated response messages are returned. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Messaging.Message.ResponseQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the ResponseQueue property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.SecurityContext\n  id: SecurityContext\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: SecurityContext\n  nameWithType: Message.SecurityContext\n  fullName: System.Messaging.Message.SecurityContext\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the security context for a message.\n  syntax:\n    content: public System.Messaging.SecurityContext SecurityContext { get; set; }\n    return:\n      type: System.Messaging.SecurityContext\n      description: A <xref href=\"System.Messaging.SecurityContext\"></xref> object that contains the security context for a message, if the property has previously been set; otherwise NULL.\n  overload: System.Messaging.Message.SecurityContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.Message.SenderCertificate\n  id: SenderCertificate\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: SenderCertificate\n  nameWithType: Message.SenderCertificate\n  fullName: System.Messaging.Message.SenderCertificate\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the security certificate used to authenticate messages.\n  remarks: \"The receiving application uses the SenderCertificate property when the message includes an external security certificate.  \\n  \\n Message Queuing can authenticate a message using either an internal or external security certificate. Message Queuing provides internal certificates, which are used to verify message integrity. A certification authority provides an external certificate, which you can access through the SenderCertificate property of the message. In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender. An internal certificate has no usable value to a receiving application.  \\n  \\n An external certificate must be registered with the directory service of the Message Queuing system. An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature.\"\n  syntax:\n    content: public byte[] SenderCertificate { get; set; }\n    return:\n      type: System.Byte[]\n      description: An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message. The default is a zero-length array.\n  overload: System.Messaging.Message.SenderCertificate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the SenderCertificate property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.SenderId\n  id: SenderId\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: SenderId\n  nameWithType: Message.SenderId\n  fullName: System.Messaging.Message.SenderId\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the identifier of the sending user.\n  remarks: \"If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `false`, the sender identifier specified in the SenderId property is not attached to the message when it is sent. This indicates to Message Queuing that the sender should not be validated when it sends the message to the destination queue. If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `true`, the SenderId property value is trustworthy only if the message was authenticated. Use the <xref:System.Messaging.Message.Authenticated%2A> property in conjunction with the SenderId property to verify the sender's access rights.  \\n  \\n A connector application is an application that uses a connector server to provide communication between Message Queuing and other queuing systems. Message Queuing requires connector applications to provide sender identification. You must set the <xref:System.Messaging.Message.ConnectorType%2A> property when sending a message through a connector application.\"\n  syntax:\n    content: public byte[] SenderId { get; }\n    return:\n      type: System.Byte[]\n      description: An array of byte values that identifies the sender. The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.\n  overload: System.Messaging.Message.SenderId*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the SenderId property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.SenderVersion\n  id: SenderVersion\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: SenderVersion\n  nameWithType: Message.SenderVersion\n  fullName: System.Messaging.Message.SenderVersion\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the version of Message Queuing used to send the message.\n  remarks: \"The SenderVersion property is important for certain features. For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.  \\n  \\n The sending Queue Manager sets the SenderVersion property when the message is sent.\"\n  example:\n  - \"The following code example displays the value of a message's SenderVersion property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public long SenderVersion { get; }\n    return:\n      type: System.Int64\n      description: The version of Message Queuing used to send the message.\n  overload: System.Messaging.Message.SenderVersion*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the SenderVersion property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.SentTime\n  id: SentTime\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: SentTime\n  nameWithType: Message.SentTime\n  fullName: System.Messaging.Message.SentTime\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the date and time on the sending computer that the message was sent by the source queue manager.\n  remarks: The SentTime property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created. This time zone could be different from those of the source and destination queues.\n  example:\n  - \"The following code example displays the value of a message's SentTime property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public DateTime SentTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref:System.DateTime> that represents the time the message was sent.\n  overload: System.Messaging.Message.SentTime*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the SentTime property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.SourceMachine\n  id: SourceMachine\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: SourceMachine\n  nameWithType: Message.SourceMachine\n  fullName: System.Messaging.Message.SourceMachine\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the computer from which the message originated.\n  remarks: The format of the SourceMachine property does not include preceding two forward slashes (\\\\\\\\). For example, `myServer` is a valid SourceMachine.\n  example:\n  - \"The following code example displays the value of a message's SourceMachine property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public string SourceMachine { get; }\n    return:\n      type: System.String\n      description: The name of the computer from which the message was sent.\n  overload: System.Messaging.Message.SourceMachine*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the SourceMachine property.\"\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The computer information or directory service could not be accessed.\n  platform:\n  - net462\n- uid: System.Messaging.Message.TimeToBeReceived\n  id: TimeToBeReceived\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: TimeToBeReceived\n  nameWithType: Message.TimeToBeReceived\n  fullName: System.Messaging.Message.TimeToBeReceived\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the maximum amount of time for the message to be received from the destination queue.\n  remarks: \"The TimeToBeReceived property specifies the total time for a sent message to be received from the destination queue. The time limit includes the time spent getting to the destination queue and the time spent waiting in the queue before the message is received.  \\n  \\n> [!CAUTION]\\n>  When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing. Otherwise, unpredictable behavior might result when sending a message whose TimeToBeReceived property is not <xref:System.Messaging.Message.InfiniteTimeout>.  \\n  \\n If the interval specified by the TimeToBeReceived property expires before the message is removed from the queue, Message Queuing discards the message in one of two ways. If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored.  \\n  \\n You can set the message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires.  \\n  \\n If the value specified by the TimeToBeReceived property is less than the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property, TimeToBeReceived takes precedence.  \\n  \\n When several messages are sent in a single transaction, Message Queuing uses the TimeToBeReceived property of the first message.\"\n  example:\n  - \"The following code example gets and sets the value of a message's TimeToBeReceived property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public TimeSpan TimeToBeReceived { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The total time for a sent message to be received from the destination queue. The default is <xref href=\"System.Messaging.Message.InfiniteTimeout\"></xref>.\n  overload: System.Messaging.Message.TimeToBeReceived*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the TimeToBeReceived property.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for TimeToBeReceived is invalid.\n  platform:\n  - net462\n- uid: System.Messaging.Message.TimeToReachQueue\n  id: TimeToReachQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: TimeToReachQueue\n  nameWithType: Message.TimeToReachQueue\n  fullName: System.Messaging.Message.TimeToReachQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the maximum amount of time for the message to reach the queue.\n  remarks: \"If the interval specified by the TimeToReachQueue property expires before the message reaches its destination, Message Queuing discards the message in one of two ways. If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored  \\n  \\n You can set he message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires.  \\n  \\n If the TimeToReachQueue property is set to 0 seconds, Message Queuing tries once to send the message to its destination—if the queue is waiting for the message. If the queue is local, the message always reaches it.  \\n  \\n If the value specified by the TimeToReachQueue property is greater than the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.  \\n  \\n When several messages are sent in a single transaction, Message Queuing uses the TimeToReachQueue property of the first message.\"\n  example:\n  - \"The following code example gets and sets the value of a message's TimeToReachQueue property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public TimeSpan TimeToReachQueue { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The time limit for the message to reach the destination queue, beginning from the time the message is sent. The default is <xref href=\"System.Messaging.Message.InfiniteTimeout\"></xref>.\n  overload: System.Messaging.Message.TimeToReachQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the TimeToReachQueue property.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for TimeToReachQueue is invalid. It might represent a negative number.\n  platform:\n  - net462\n- uid: System.Messaging.Message.TransactionId\n  id: TransactionId\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: TransactionId\n  nameWithType: Message.TransactionId\n  fullName: System.Messaging.Message.TransactionId\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the identifier for the transaction of which the message was a part.\n  remarks: \"Receiving applications use the TransactionId property to verify that a message was sent as part of a specific transaction. The transaction identifier contains the identifier of the sending computer (first 16 bits) followed by a 4-byte transaction sequence number.  \\n  \\n This property is available only for Message Queuing version 2.0 and later.  \\n  \\n Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <sup>20</sup>. Message Queuing guarantees only that subsequent transactions will have different transaction sequence numbers.  \\n  \\n You can use the TransactionId property along with the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties to verify transaction boundaries.\"\n  example:\n  - \"The following code example displays the value of a message's TransactionId property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public string TransactionId { get; }\n    return:\n      type: System.String\n      description: The identifier for the transaction associated with the message.\n  overload: System.Messaging.Message.TransactionId*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the TransactionId property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.TransactionStatusQueue\n  id: TransactionStatusQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: TransactionStatusQueue\n  nameWithType: Message.TransactionStatusQueue\n  fullName: System.Messaging.Message.TransactionStatusQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the transaction status queue on the source computer.\n  remarks: \"The TransactionStatusQueue property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications. Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.  \\n  \\n A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.  \\n  \\n The connector application can use the transaction status queue to send acknowledgment messages back to the sending application. The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments.\"\n  example:\n  - \"The following code example displays the value of a message's TransactionStatusQueue property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }\n    return:\n      type: System.Messaging.MessageQueue\n      description: The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Messaging.Message.TransactionStatusQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The message has not been sent. This property can only be read on messages retrieved from a queue.  \\n  \\n -or-  \\n  \\n The message queue is filtered to ignore the TransactionStatusQueue property.\"\n  platform:\n  - net462\n- uid: System.Messaging.Message.UseAuthentication\n  id: UseAuthentication\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: UseAuthentication\n  nameWithType: Message.UseAuthentication\n  fullName: System.Messaging.Message.UseAuthentication\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether the message was (or must be) authenticated before being sent.\n  remarks: \"The UseAuthentication property specifies whether the message needs to be authenticated. If the sending application requests authentication, Message Queuing creates a digital signature and uses it to sign the message when it is sent and authenticate the message when it is received.  \\n  \\n If UseAuthentication is `false` and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue.  \\n  \\n You cannot determine if a message failed authentication by looking at its properties. Message Queuing discards such messages before they are delivered to the queue. However, you can request that an acknowledgment message be sent if a delivery failure prevents a message from arriving in the queue.\"\n  syntax:\n    content: public bool UseAuthentication { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the sending application requested authentication for the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.UseAuthentication*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the UseAuthentication property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.UseDeadLetterQueue\n  id: UseDeadLetterQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: UseDeadLetterQueue\n  nameWithType: Message.UseDeadLetterQueue\n  fullName: System.Messaging.Message.UseDeadLetterQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether a copy of the message that could not be delivered should be sent to a dead-letter queue.\n  remarks: \"The <xref:System.Messaging.Message.UseJournalQueue%2A> and UseDeadLetterQueue properties specify how Message Queuing tracks a message. If UseDeadLetterQueue is `true`, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message. Delivery failure could be caused by a message timer expiring, for example.  \\n  \\n In the case of delivery failure for a transactional message, Message Queuing sends the message to the transactional dead-letter queue on the source machine in all negative and in-doubt cases.  \\n  \\n When you store messages in a dead-letter queue, you should clear the queue periodically to remove messages that are no longer needed. Messages stored in dead-letter queues count against the size quota for the computer where the queue resides. The computer quota is set by the administrator and refers to the size allocated for storing messages on the whole computer, not just in a single queue.  \\n  \\n You do not create a journal or dead-letter queue. These are both system queues that Message Queuing generates.\"\n  example:\n  - \"The following code example gets and sets the value of a message's UseDeadLetterQueue property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool UseDeadLetterQueue { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.UseDeadLetterQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the UseDeadLetterQueue property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.UseEncryption\n  id: UseEncryption\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: UseEncryption\n  nameWithType: Message.UseEncryption\n  fullName: System.Messaging.Message.UseEncryption\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether to make the message private.\n  remarks: \"If a message is private, its body is encrypted before it is sent and decrypted when it is received. To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.  \\n  \\n When sending private messages, your application does not need to perform the message encryption. Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service. When receiving private messages, the receiving Queue Manager always decrypts the message body.\"\n  example:\n  - \"The following code example gets and sets the value of a message's UseEncryption property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool UseEncryption { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to require Message Queuing to encrypt the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.UseEncryption*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the UseEncryption property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.UseJournalQueue\n  id: UseJournalQueue\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: UseJournalQueue\n  nameWithType: Message.UseJournalQueue\n  fullName: System.Messaging.Message.UseJournalQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether a copy of the message should be kept in a machine journal on the originating computer.\n  remarks: \"The UseJournalQueue and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message. If UseJournalQueue is `true`, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted.  \\n  \\n The sent message is only copied to the journal queue if the destination queue is on a remote computer. If the destination is on the local computer, the message is sent directly to the queue; there are no intermediate steps to require journaling.  \\n  \\n When you store messages in a journal queue, clear the queue periodically to remove messages that are no longer needed. Messages stored in journal queues count against the quota for the computer where the queue resides. (The computer quota is set by the administrator.)  \\n  \\n You do not create a journal or dead-letter queue. These are both system queues that Message Queuing generates.\"\n  example:\n  - \"The following code example gets and sets the value of a message's UseJournalQueue property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool UseJournalQueue { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.UseJournalQueue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the UseJournalQueue property.\n  platform:\n  - net462\n- uid: System.Messaging.Message.UseTracing\n  id: UseTracing\n  parent: System.Messaging.Message\n  langs:\n  - csharp\n  name: UseTracing\n  nameWithType: Message.UseTracing\n  fullName: System.Messaging.Message.UseTracing\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether to trace a message as it moves toward its destination queue.\n  remarks: \"The UseTracing property specifies whether to track the route of a message as it moves toward its destination queue. If `true`, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server. The report queue is specified by the source Queue Manager. Report queues are not limited to report messages generated by Message Queuing; your application-generated messages can also be sent to report queues.  \\n  \\n Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise. The administrator configures these settings.\"\n  example:\n  - \"The following code example gets and sets the value of a message's UseTracing property.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public bool UseTracing { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.Message.UseTracing*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message queue is filtered to ignore the UseTracing property.\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.Messaging.Message.#ctor\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Message()\n  nameWithType: Message.Message()\n  fullName: System.Messaging.Message.Message()\n- uid: System.Messaging.Message.#ctor(System.Object)\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Message(Object)\n  nameWithType: Message.Message(Object)\n  fullName: System.Messaging.Message.Message(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Message(Object,IMessageFormatter)\n  nameWithType: Message.Message(Object,IMessageFormatter)\n  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)\n- uid: System.Messaging.IMessageFormatter\n  parent: System.Messaging\n  isExternal: false\n  name: IMessageFormatter\n  nameWithType: IMessageFormatter\n  fullName: System.Messaging.IMessageFormatter\n- uid: System.Messaging.Message.AcknowledgeType\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AcknowledgeType\n  nameWithType: Message.AcknowledgeType\n  fullName: System.Messaging.Message.AcknowledgeType\n- uid: System.Messaging.AcknowledgeTypes\n  parent: System.Messaging\n  isExternal: false\n  name: AcknowledgeTypes\n  nameWithType: AcknowledgeTypes\n  fullName: System.Messaging.AcknowledgeTypes\n- uid: System.Messaging.Message.Acknowledgment\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Acknowledgment\n  nameWithType: Message.Acknowledgment\n  fullName: System.Messaging.Message.Acknowledgment\n- uid: System.Messaging.Acknowledgment\n  parent: System.Messaging\n  isExternal: false\n  name: Acknowledgment\n  nameWithType: Acknowledgment\n  fullName: System.Messaging.Acknowledgment\n- uid: System.Messaging.Message.AdministrationQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AdministrationQueue\n  nameWithType: Message.AdministrationQueue\n  fullName: System.Messaging.Message.AdministrationQueue\n- uid: System.Messaging.MessageQueue\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueue\n  nameWithType: MessageQueue\n  fullName: System.Messaging.MessageQueue\n- uid: System.Messaging.Message.AppSpecific\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AppSpecific\n  nameWithType: Message.AppSpecific\n  fullName: System.Messaging.Message.AppSpecific\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Messaging.Message.ArrivedTime\n  parent: System.Messaging.Message\n  isExternal: false\n  name: ArrivedTime\n  nameWithType: Message.ArrivedTime\n  fullName: System.Messaging.Message.ArrivedTime\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Messaging.Message.AttachSenderId\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AttachSenderId\n  nameWithType: Message.AttachSenderId\n  fullName: System.Messaging.Message.AttachSenderId\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.Message.Authenticated\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Authenticated\n  nameWithType: Message.Authenticated\n  fullName: System.Messaging.Message.Authenticated\n- uid: System.Messaging.Message.AuthenticationProviderName\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AuthenticationProviderName\n  nameWithType: Message.AuthenticationProviderName\n  fullName: System.Messaging.Message.AuthenticationProviderName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Messaging.Message.AuthenticationProviderType\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AuthenticationProviderType\n  nameWithType: Message.AuthenticationProviderType\n  fullName: System.Messaging.Message.AuthenticationProviderType\n- uid: System.Messaging.CryptographicProviderType\n  parent: System.Messaging\n  isExternal: false\n  name: CryptographicProviderType\n  nameWithType: CryptographicProviderType\n  fullName: System.Messaging.CryptographicProviderType\n- uid: System.Messaging.Message.Body\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Body\n  nameWithType: Message.Body\n  fullName: System.Messaging.Message.Body\n- uid: System.Messaging.Message.BodyStream\n  parent: System.Messaging.Message\n  isExternal: false\n  name: BodyStream\n  nameWithType: Message.BodyStream\n  fullName: System.Messaging.Message.BodyStream\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Messaging.Message.BodyType\n  parent: System.Messaging.Message\n  isExternal: false\n  name: BodyType\n  nameWithType: Message.BodyType\n  fullName: System.Messaging.Message.BodyType\n- uid: System.Messaging.Message.ConnectorType\n  parent: System.Messaging.Message\n  isExternal: false\n  name: ConnectorType\n  nameWithType: Message.ConnectorType\n  fullName: System.Messaging.Message.ConnectorType\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Messaging.Message.CorrelationId\n  parent: System.Messaging.Message\n  isExternal: false\n  name: CorrelationId\n  nameWithType: Message.CorrelationId\n  fullName: System.Messaging.Message.CorrelationId\n- uid: System.Messaging.Message.DestinationQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: DestinationQueue\n  nameWithType: Message.DestinationQueue\n  fullName: System.Messaging.Message.DestinationQueue\n- uid: System.Messaging.Message.DestinationSymmetricKey\n  parent: System.Messaging.Message\n  isExternal: false\n  name: DestinationSymmetricKey\n  nameWithType: Message.DestinationSymmetricKey\n  fullName: System.Messaging.Message.DestinationSymmetricKey\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Messaging.Message.DigitalSignature\n  parent: System.Messaging.Message\n  isExternal: false\n  name: DigitalSignature\n  nameWithType: Message.DigitalSignature\n  fullName: System.Messaging.Message.DigitalSignature\n- uid: System.Messaging.Message.EncryptionAlgorithm\n  parent: System.Messaging.Message\n  isExternal: false\n  name: EncryptionAlgorithm\n  nameWithType: Message.EncryptionAlgorithm\n  fullName: System.Messaging.Message.EncryptionAlgorithm\n- uid: System.Messaging.EncryptionAlgorithm\n  parent: System.Messaging\n  isExternal: false\n  name: EncryptionAlgorithm\n  nameWithType: EncryptionAlgorithm\n  fullName: System.Messaging.EncryptionAlgorithm\n- uid: System.Messaging.Message.Extension\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Extension\n  nameWithType: Message.Extension\n  fullName: System.Messaging.Message.Extension\n- uid: System.Messaging.Message.Formatter\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Formatter\n  nameWithType: Message.Formatter\n  fullName: System.Messaging.Message.Formatter\n- uid: System.Messaging.Message.HashAlgorithm\n  parent: System.Messaging.Message\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: Message.HashAlgorithm\n  fullName: System.Messaging.Message.HashAlgorithm\n- uid: System.Messaging.HashAlgorithm\n  parent: System.Messaging\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Messaging.HashAlgorithm\n- uid: System.Messaging.Message.Id\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Id\n  nameWithType: Message.Id\n  fullName: System.Messaging.Message.Id\n- uid: System.Messaging.Message.InfiniteTimeout\n  parent: System.Messaging.Message\n  isExternal: false\n  name: InfiniteTimeout\n  nameWithType: Message.InfiniteTimeout\n  fullName: System.Messaging.Message.InfiniteTimeout\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Messaging.Message.IsFirstInTransaction\n  parent: System.Messaging.Message\n  isExternal: false\n  name: IsFirstInTransaction\n  nameWithType: Message.IsFirstInTransaction\n  fullName: System.Messaging.Message.IsFirstInTransaction\n- uid: System.Messaging.Message.IsLastInTransaction\n  parent: System.Messaging.Message\n  isExternal: false\n  name: IsLastInTransaction\n  nameWithType: Message.IsLastInTransaction\n  fullName: System.Messaging.Message.IsLastInTransaction\n- uid: System.Messaging.Message.Label\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Label\n  nameWithType: Message.Label\n  fullName: System.Messaging.Message.Label\n- uid: System.Messaging.Message.LookupId\n  parent: System.Messaging.Message\n  isExternal: false\n  name: LookupId\n  nameWithType: Message.LookupId\n  fullName: System.Messaging.Message.LookupId\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Messaging.Message.MessageType\n  parent: System.Messaging.Message\n  isExternal: false\n  name: MessageType\n  nameWithType: Message.MessageType\n  fullName: System.Messaging.Message.MessageType\n- uid: System.Messaging.MessageType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageType\n  nameWithType: MessageType\n  fullName: System.Messaging.MessageType\n- uid: System.Messaging.Message.Priority\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Priority\n  nameWithType: Message.Priority\n  fullName: System.Messaging.Message.Priority\n- uid: System.Messaging.MessagePriority\n  parent: System.Messaging\n  isExternal: false\n  name: MessagePriority\n  nameWithType: MessagePriority\n  fullName: System.Messaging.MessagePriority\n- uid: System.Messaging.Message.Recoverable\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Recoverable\n  nameWithType: Message.Recoverable\n  fullName: System.Messaging.Message.Recoverable\n- uid: System.Messaging.Message.ResponseQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: ResponseQueue\n  nameWithType: Message.ResponseQueue\n  fullName: System.Messaging.Message.ResponseQueue\n- uid: System.Messaging.Message.SecurityContext\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SecurityContext\n  nameWithType: Message.SecurityContext\n  fullName: System.Messaging.Message.SecurityContext\n- uid: System.Messaging.SecurityContext\n  parent: System.Messaging\n  isExternal: false\n  name: SecurityContext\n  nameWithType: SecurityContext\n  fullName: System.Messaging.SecurityContext\n- uid: System.Messaging.Message.SenderCertificate\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SenderCertificate\n  nameWithType: Message.SenderCertificate\n  fullName: System.Messaging.Message.SenderCertificate\n- uid: System.Messaging.Message.SenderId\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SenderId\n  nameWithType: Message.SenderId\n  fullName: System.Messaging.Message.SenderId\n- uid: System.Messaging.Message.SenderVersion\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SenderVersion\n  nameWithType: Message.SenderVersion\n  fullName: System.Messaging.Message.SenderVersion\n- uid: System.Messaging.Message.SentTime\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SentTime\n  nameWithType: Message.SentTime\n  fullName: System.Messaging.Message.SentTime\n- uid: System.Messaging.Message.SourceMachine\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SourceMachine\n  nameWithType: Message.SourceMachine\n  fullName: System.Messaging.Message.SourceMachine\n- uid: System.Messaging.Message.TimeToBeReceived\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TimeToBeReceived\n  nameWithType: Message.TimeToBeReceived\n  fullName: System.Messaging.Message.TimeToBeReceived\n- uid: System.Messaging.Message.TimeToReachQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TimeToReachQueue\n  nameWithType: Message.TimeToReachQueue\n  fullName: System.Messaging.Message.TimeToReachQueue\n- uid: System.Messaging.Message.TransactionId\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TransactionId\n  nameWithType: Message.TransactionId\n  fullName: System.Messaging.Message.TransactionId\n- uid: System.Messaging.Message.TransactionStatusQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TransactionStatusQueue\n  nameWithType: Message.TransactionStatusQueue\n  fullName: System.Messaging.Message.TransactionStatusQueue\n- uid: System.Messaging.Message.UseAuthentication\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseAuthentication\n  nameWithType: Message.UseAuthentication\n  fullName: System.Messaging.Message.UseAuthentication\n- uid: System.Messaging.Message.UseDeadLetterQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseDeadLetterQueue\n  nameWithType: Message.UseDeadLetterQueue\n  fullName: System.Messaging.Message.UseDeadLetterQueue\n- uid: System.Messaging.Message.UseEncryption\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseEncryption\n  nameWithType: Message.UseEncryption\n  fullName: System.Messaging.Message.UseEncryption\n- uid: System.Messaging.Message.UseJournalQueue\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseJournalQueue\n  nameWithType: Message.UseJournalQueue\n  fullName: System.Messaging.Message.UseJournalQueue\n- uid: System.Messaging.Message.UseTracing\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseTracing\n  nameWithType: Message.UseTracing\n  fullName: System.Messaging.Message.UseTracing\n- uid: System.Messaging.Message.#ctor*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Message\n  nameWithType: Message.Message\n- uid: System.Messaging.Message.AcknowledgeType*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AcknowledgeType\n  nameWithType: Message.AcknowledgeType\n- uid: System.Messaging.Message.Acknowledgment*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Acknowledgment\n  nameWithType: Message.Acknowledgment\n- uid: System.Messaging.Message.AdministrationQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AdministrationQueue\n  nameWithType: Message.AdministrationQueue\n- uid: System.Messaging.Message.AppSpecific*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AppSpecific\n  nameWithType: Message.AppSpecific\n- uid: System.Messaging.Message.ArrivedTime*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: ArrivedTime\n  nameWithType: Message.ArrivedTime\n- uid: System.Messaging.Message.AttachSenderId*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AttachSenderId\n  nameWithType: Message.AttachSenderId\n- uid: System.Messaging.Message.Authenticated*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Authenticated\n  nameWithType: Message.Authenticated\n- uid: System.Messaging.Message.AuthenticationProviderName*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AuthenticationProviderName\n  nameWithType: Message.AuthenticationProviderName\n- uid: System.Messaging.Message.AuthenticationProviderType*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: AuthenticationProviderType\n  nameWithType: Message.AuthenticationProviderType\n- uid: System.Messaging.Message.Body*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Body\n  nameWithType: Message.Body\n- uid: System.Messaging.Message.BodyStream*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: BodyStream\n  nameWithType: Message.BodyStream\n- uid: System.Messaging.Message.BodyType*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: BodyType\n  nameWithType: Message.BodyType\n- uid: System.Messaging.Message.ConnectorType*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: ConnectorType\n  nameWithType: Message.ConnectorType\n- uid: System.Messaging.Message.CorrelationId*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: CorrelationId\n  nameWithType: Message.CorrelationId\n- uid: System.Messaging.Message.DestinationQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: DestinationQueue\n  nameWithType: Message.DestinationQueue\n- uid: System.Messaging.Message.DestinationSymmetricKey*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: DestinationSymmetricKey\n  nameWithType: Message.DestinationSymmetricKey\n- uid: System.Messaging.Message.DigitalSignature*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: DigitalSignature\n  nameWithType: Message.DigitalSignature\n- uid: System.Messaging.Message.EncryptionAlgorithm*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: EncryptionAlgorithm\n  nameWithType: Message.EncryptionAlgorithm\n- uid: System.Messaging.Message.Extension*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Extension\n  nameWithType: Message.Extension\n- uid: System.Messaging.Message.Formatter*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Formatter\n  nameWithType: Message.Formatter\n- uid: System.Messaging.Message.HashAlgorithm*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: Message.HashAlgorithm\n- uid: System.Messaging.Message.Id*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Id\n  nameWithType: Message.Id\n- uid: System.Messaging.Message.IsFirstInTransaction*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: IsFirstInTransaction\n  nameWithType: Message.IsFirstInTransaction\n- uid: System.Messaging.Message.IsLastInTransaction*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: IsLastInTransaction\n  nameWithType: Message.IsLastInTransaction\n- uid: System.Messaging.Message.Label*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Label\n  nameWithType: Message.Label\n- uid: System.Messaging.Message.LookupId*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: LookupId\n  nameWithType: Message.LookupId\n- uid: System.Messaging.Message.MessageType*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: MessageType\n  nameWithType: Message.MessageType\n- uid: System.Messaging.Message.Priority*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Priority\n  nameWithType: Message.Priority\n- uid: System.Messaging.Message.Recoverable*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: Recoverable\n  nameWithType: Message.Recoverable\n- uid: System.Messaging.Message.ResponseQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: ResponseQueue\n  nameWithType: Message.ResponseQueue\n- uid: System.Messaging.Message.SecurityContext*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SecurityContext\n  nameWithType: Message.SecurityContext\n- uid: System.Messaging.Message.SenderCertificate*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SenderCertificate\n  nameWithType: Message.SenderCertificate\n- uid: System.Messaging.Message.SenderId*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SenderId\n  nameWithType: Message.SenderId\n- uid: System.Messaging.Message.SenderVersion*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SenderVersion\n  nameWithType: Message.SenderVersion\n- uid: System.Messaging.Message.SentTime*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SentTime\n  nameWithType: Message.SentTime\n- uid: System.Messaging.Message.SourceMachine*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: SourceMachine\n  nameWithType: Message.SourceMachine\n- uid: System.Messaging.Message.TimeToBeReceived*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TimeToBeReceived\n  nameWithType: Message.TimeToBeReceived\n- uid: System.Messaging.Message.TimeToReachQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TimeToReachQueue\n  nameWithType: Message.TimeToReachQueue\n- uid: System.Messaging.Message.TransactionId*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TransactionId\n  nameWithType: Message.TransactionId\n- uid: System.Messaging.Message.TransactionStatusQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: TransactionStatusQueue\n  nameWithType: Message.TransactionStatusQueue\n- uid: System.Messaging.Message.UseAuthentication*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseAuthentication\n  nameWithType: Message.UseAuthentication\n- uid: System.Messaging.Message.UseDeadLetterQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseDeadLetterQueue\n  nameWithType: Message.UseDeadLetterQueue\n- uid: System.Messaging.Message.UseEncryption*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseEncryption\n  nameWithType: Message.UseEncryption\n- uid: System.Messaging.Message.UseJournalQueue*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseJournalQueue\n  nameWithType: Message.UseJournalQueue\n- uid: System.Messaging.Message.UseTracing*\n  parent: System.Messaging.Message\n  isExternal: false\n  name: UseTracing\n  nameWithType: Message.UseTracing\n"}