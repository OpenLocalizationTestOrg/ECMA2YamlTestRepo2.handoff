{"nodes":[{"pos":[2565,2753],"content":"Represents a set of data commands and a connection to a database that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the database. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a set of data commands and a connection to a database that are used to fill the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and update the database.","pos":[0,156],"source":"Represents a set of data commands and a connection to a database that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the database."},{"content":"This class cannot be inherited.","pos":[157,188]}]},{"pos":[2766,11945],"content":"This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md).       The OracleDataAdapter serves as a bridge between a **DataSet** and database for retrieving and saving data. The OracleDataAdapter provides this bridge by using <xref:System.Data.Common.DbDataAdapter.Fill%2A> to load data from the database into the <xref:System.Data.DataSet>, and using <xref:System.Data.Common.DbDataAdapter.Update%2A> to send changes made in the <xref:System.Data.DataSet> back to the data source.       When the OracleDataAdapter fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>. You may also have the OracleDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>. For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  By default, numeric fields imported to a <xref:System.Data.DataTable> with <xref:System.Data.Common.DbDataAdapter.Fill%2A> are mapped to <xref:System.Data.OracleClient.OracleNumber> objects. It is possible to overflow the <xref:System.Data.OracleClient.OracleNumber>, and throw an Oracle exception, by importing a non-integral numeric value that is either too large or too high precision for the <xref:System.Data.OracleClient.OracleNumber>'s precision limitations. Refer to the description of <xref:System.Data.OracleClient.OracleNumber> for more information.       The OracleDataAdapter also includes the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.DeleteCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.UpdateCommand%2A>, and `TableMappings` properties to facilitate loading and updating of data.       The .NET Framework Data Provider for Oracle does not support batched SQL statements. However, it does allow you to use multiple `REF CURSOR` output parameters to fill a **DataSet**, each in its own <xref:System.Data.DataTable>. You must define the parameters, mark them as output parameters, and indicate that they are `REF CURSOR` data types. Note that you cannot use the <xref:System.Data.Common.DbDataAdapter.Update%2A> method when the OracleDataAdapter is filled using `REF CURSOR` parameters returned by a stored procedure, because Oracle does not provide the information necessary to determine what the table name and column names are when the SQL statement is executed. The following C# example assumes that you have created this stored procedure.       Create the following Oracle package on the Oracle server.      ```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```       Create the following Oracle package body on the Oracle server.      ```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO <> 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```       The following C# example demonstrates how you might obtain table and column information using the stored procedure.      ```c#   // GetConnectionString() returns a connection string for   // the data source.      string connString = GetConnectionString();   DataSet ds = new DataSet();   OracleConnection conn = new OracleConnection(connString);   OracleCommand cmd = conn.CreateCommand();      cmd.CommandText = \"CURSPKG.OPEN_TWO_CURSORS\";   cmd.CommandType = CommandType.StoredProcedure;   cmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction =           ParameterDirection.Output;   cmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction =           ParameterDirection.Output;      OracleDataAdapter da = new OracleDataAdapter(cmd);   da.TableMappings.Add(\"Table\", \"Emp\");   da.TableMappings.Add(\"Table1\", \"Dept\");   da.Fill(ds);      ds.Relations.Add(\"EmpDept\", ds.Tables[\"Dept\"].Columns[\"Deptno\"],          ds.Tables[\"Emp\"].Columns[\"Deptno\"], false);   ```       The following Visual Basic example demonstrates how to use an OracleDataAdapter to fill a <xref:System.Data.DataSet> using an Oracle `REF CURSOR`. These examples use tables that are defined in the Oracle Scott/Tiger schema, and require the following PL/SQL package and package body. You must create these on your server to use the examples.       Create the following Oracle package on the Oracle server.      ```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```       Create the following Oracle package body on the Oracle server.      ```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO <> 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```       This Visual Basic example executes a PL/SQL stored procedure that returns two `REF CURSOR` parameters, and fills a <xref:System.Data.DataSet> with the rows that are returned.      ```vb#      ' GetConnectionString() returns a connection string for   ' the data source.          Dim connString As New String(GetConnectionString())       Dim ds As New DataSet()       Dim conn As New OracleConnection(connString)       Dim cmd As OracleCommand = conn.CreateCommand()          cmd.CommandText = \"CURSPKG.OPEN_TWO_CURSORS\"       cmd.CommandType = CommandType.StoredProcedure       cmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = _          ParameterDirection.Output       cmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = _          ParameterDirection.Output          Dim da As New OracleDataAdapter(cmd)       da.TableMappings.Add(\"Table\", \"Emp\")       da.TableMappings.Add(\"Table1\", \"Dept\")       da.Fill(ds)          ds.Relations.Add(\"EmpDept\", ds.Tables(\"Dept\").Columns(\"Deptno\"), _         ds.Tables(\"Emp\").Columns(\"Deptno\"), False)   ```       After using the OracleDataAdapter to perform a `Fill` or `FillSchema` operation, the `DataColumn.ReadOnly` property always returns false, regardless of whether a column can be updated or not, because the Oracle server does not return this information.","needQuote":false,"needEscape":true,"nodes":[{"content":"This type is deprecated and will be removed in a future version of the .NET Framework.","pos":[0,86]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Oracle and ADO.NET<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[87,173],"source":" For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md)."},{"content":"The OracleDataAdapter serves as a bridge between a <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> and database for retrieving and saving data.","pos":[180,287],"source":"       The OracleDataAdapter serves as a bridge between a **DataSet** and database for retrieving and saving data."},{"content":"The OracleDataAdapter provides this bridge by using &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; to load data from the database into the &lt;xref:System.Data.DataSet&gt;, and using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to send changes made in the &lt;xref:System.Data.DataSet&gt; back to the data source.","pos":[288,595],"source":" The OracleDataAdapter provides this bridge by using <xref:System.Data.Common.DbDataAdapter.Fill%2A> to load data from the database into the <xref:System.Data.DataSet>, and using <xref:System.Data.Common.DbDataAdapter.Update%2A> to send changes made in the <xref:System.Data.DataSet> back to the data source."},{"content":"When the OracleDataAdapter fills a &lt;xref:System.Data.DataSet&gt;, it creates the necessary tables and columns for the returned data if they do not already exist.","pos":[602,760],"source":"       When the OracleDataAdapter fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist."},{"content":"However, primary key information is not included in the implicitly created schema unless the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property is set to &lt;xref:System.Data.MissingSchemaAction&gt;.","pos":[761,973],"source":" However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>."},{"content":"You may also have the OracleDataAdapter create the schema of the &lt;xref:System.Data.DataSet&gt;, including primary key information, before filling it with data using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;.","pos":[974,1190],"source":" You may also have the OracleDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Adding Existing Constraints to a DataSet<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1191,1299],"source":" For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  By default, numeric fields imported to a &lt;xref:System.Data.DataTable&gt; with &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; are mapped to &lt;xref:System.Data.OracleClient.OracleNumber&gt; objects.","pos":[1305,1508],"source":"      > [!NOTE] >  By default, numeric fields imported to a <xref:System.Data.DataTable> with <xref:System.Data.Common.DbDataAdapter.Fill%2A> are mapped to <xref:System.Data.OracleClient.OracleNumber> objects."},{"content":"It is possible to overflow the &lt;xref:System.Data.OracleClient.OracleNumber&gt;, and throw an Oracle exception, by importing a non-integral numeric value that is either too large or too high precision for the &lt;xref:System.Data.OracleClient.OracleNumber&gt;'s precision limitations.","pos":[1509,1783],"source":" It is possible to overflow the <xref:System.Data.OracleClient.OracleNumber>, and throw an Oracle exception, by importing a non-integral numeric value that is either too large or too high precision for the <xref:System.Data.OracleClient.OracleNumber>'s precision limitations."},{"content":"Refer to the description of &lt;xref:System.Data.OracleClient.OracleNumber&gt; for more information.","pos":[1784,1878],"source":" Refer to the description of <xref:System.Data.OracleClient.OracleNumber> for more information."},{"content":"The OracleDataAdapter also includes the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt;, &lt;xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.OracleClient.OracleDataAdapter.DeleteCommand%2A&gt;, &lt;xref:System.Data.OracleClient.OracleDataAdapter.UpdateCommand%2A&gt;, and <ph id=\"ph1\">`TableMappings`</ph> properties to facilitate loading and updating of data.","pos":[1885,2271],"source":"       The OracleDataAdapter also includes the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.DeleteCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.UpdateCommand%2A>, and `TableMappings` properties to facilitate loading and updating of data."},{"content":"The .NET Framework Data Provider for Oracle does not support batched SQL statements.","pos":[2278,2362]},{"content":"However, it does allow you to use multiple <ph id=\"ph1\">`REF CURSOR`</ph> output parameters to fill a <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept>, each in its own &lt;xref:System.Data.DataTable&gt;.","pos":[2363,2505],"source":" However, it does allow you to use multiple `REF CURSOR` output parameters to fill a **DataSet**, each in its own <xref:System.Data.DataTable>."},{"content":"You must define the parameters, mark them as output parameters, and indicate that they are <ph id=\"ph1\">`REF CURSOR`</ph> data types.","pos":[2506,2621],"source":" You must define the parameters, mark them as output parameters, and indicate that they are `REF CURSOR` data types."},{"content":"Note that you cannot use the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method when the OracleDataAdapter is filled using <ph id=\"ph1\">`REF CURSOR`</ph> parameters returned by a stored procedure, because Oracle does not provide the information necessary to determine what the table name and column names are when the SQL statement is executed.","pos":[2622,2954],"source":" Note that you cannot use the <xref:System.Data.Common.DbDataAdapter.Update%2A> method when the OracleDataAdapter is filled using `REF CURSOR` parameters returned by a stored procedure, because Oracle does not provide the information necessary to determine what the table name and column names are when the SQL statement is executed."},{"content":"The following C# example assumes that you have created this stored procedure.","pos":[2955,3032]},{"content":"Create the following Oracle package on the Oracle server.","pos":[3039,3096]},{"content":"<ph id=\"ph1\">```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```</ph>       Create the following Oracle package body on the Oracle server.","pos":[3102,3452],"source":"```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```       Create the following Oracle package body on the Oracle server."},{"content":"<ph id=\"ph1\">```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO &lt;&gt; 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```</ph>       The following C# example demonstrates how you might obtain table and column information using the stored procedure.","pos":[3458,4786],"source":"```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO <> 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```       The following C# example demonstrates how you might obtain table and column information using the stored procedure."},{"content":"<ph id=\"ph1\">```c#   // GetConnectionString() returns a connection string for   // the data source.      string connString = GetConnectionString();   DataSet ds = new DataSet();   OracleConnection conn = new OracleConnection(connString);   OracleCommand cmd = conn.CreateCommand();      cmd.CommandText = \"CURSPKG.OPEN_TWO_CURSORS\";   cmd.CommandType = CommandType.StoredProcedure;   cmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction =           ParameterDirection.Output;   cmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction =           ParameterDirection.Output;      OracleDataAdapter da = new OracleDataAdapter(cmd);   da.TableMappings.Add(\"Table\", \"Emp\");   da.TableMappings.Add(\"Table1\", \"Dept\");   da.Fill(ds);      ds.Relations.Add(\"EmpDept\", ds.Tables[\"Dept\"].Columns[\"Deptno\"],          ds.Tables[\"Emp\"].Columns[\"Deptno\"], false);   ```</ph>       The following Visual Basic example demonstrates how to use an OracleDataAdapter to fill a &lt;xref:System.Data.DataSet&gt; using an Oracle <ph id=\"ph2\">`REF CURSOR`</ph>.","pos":[4792,5800],"source":"```c#   // GetConnectionString() returns a connection string for   // the data source.      string connString = GetConnectionString();   DataSet ds = new DataSet();   OracleConnection conn = new OracleConnection(connString);   OracleCommand cmd = conn.CreateCommand();      cmd.CommandText = \"CURSPKG.OPEN_TWO_CURSORS\";   cmd.CommandType = CommandType.StoredProcedure;   cmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction =           ParameterDirection.Output;   cmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction =           ParameterDirection.Output;      OracleDataAdapter da = new OracleDataAdapter(cmd);   da.TableMappings.Add(\"Table\", \"Emp\");   da.TableMappings.Add(\"Table1\", \"Dept\");   da.Fill(ds);      ds.Relations.Add(\"EmpDept\", ds.Tables[\"Dept\"].Columns[\"Deptno\"],          ds.Tables[\"Emp\"].Columns[\"Deptno\"], false);   ```       The following Visual Basic example demonstrates how to use an OracleDataAdapter to fill a <xref:System.Data.DataSet> using an Oracle `REF CURSOR`."},{"content":"These examples use tables that are defined in the Oracle Scott/Tiger schema, and require the following PL/SQL package and package body.","pos":[5801,5936]},{"content":"You must create these on your server to use the examples.","pos":[5937,5994]},{"content":"Create the following Oracle package on the Oracle server.","pos":[6001,6058]},{"content":"<ph id=\"ph1\">```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```</ph>       Create the following Oracle package body on the Oracle server.","pos":[6064,6414],"source":"```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```       Create the following Oracle package body on the Oracle server."},{"content":"<ph id=\"ph1\">```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO &lt;&gt; 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```</ph>       This Visual Basic example executes a PL/SQL stored procedure that returns two <ph id=\"ph2\">`REF CURSOR`</ph> parameters, and fills a &lt;xref:System.Data.DataSet&gt; with the rows that are returned.","pos":[6420,7807],"source":"```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO <> 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```       This Visual Basic example executes a PL/SQL stored procedure that returns two `REF CURSOR` parameters, and fills a <xref:System.Data.DataSet> with the rows that are returned."},{"content":"<ph id=\"ph1\">```vb#      ' GetConnectionString() returns a connection string for   ' the data source.          Dim connString As New String(GetConnectionString())       Dim ds As New DataSet()       Dim conn As New OracleConnection(connString)       Dim cmd As OracleCommand = conn.CreateCommand()          cmd.CommandText = \"CURSPKG.OPEN_TWO_CURSORS\"       cmd.CommandType = CommandType.StoredProcedure       cmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = _          ParameterDirection.Output       cmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = _          ParameterDirection.Output          Dim da As New OracleDataAdapter(cmd)       da.TableMappings.Add(\"Table\", \"Emp\")       da.TableMappings.Add(\"Table1\", \"Dept\")       da.Fill(ds)          ds.Relations.Add(\"EmpDept\", ds.Tables(\"Dept\").Columns(\"Deptno\"), _         ds.Tables(\"Emp\").Columns(\"Deptno\"), False)   ```</ph>       After using the OracleDataAdapter to perform a <ph id=\"ph2\">`Fill`</ph> or <ph id=\"ph3\">`FillSchema`</ph> operation, the <ph id=\"ph4\">`DataColumn.ReadOnly`</ph> property always returns false, regardless of whether a column can be updated or not, because the Oracle server does not return this information.","pos":[7813,8959],"source":"```vb#      ' GetConnectionString() returns a connection string for   ' the data source.          Dim connString As New String(GetConnectionString())       Dim ds As New DataSet()       Dim conn As New OracleConnection(connString)       Dim cmd As OracleCommand = conn.CreateCommand()          cmd.CommandText = \"CURSPKG.OPEN_TWO_CURSORS\"       cmd.CommandType = CommandType.StoredProcedure       cmd.Parameters.Add(\"EMPCURSOR\", OracleType.Cursor).Direction = _          ParameterDirection.Output       cmd.Parameters.Add(\"DEPTCURSOR\", OracleType.Cursor).Direction = _          ParameterDirection.Output          Dim da As New OracleDataAdapter(cmd)       da.TableMappings.Add(\"Table\", \"Emp\")       da.TableMappings.Add(\"Table1\", \"Dept\")       da.Fill(ds)          ds.Relations.Add(\"EmpDept\", ds.Tables(\"Dept\").Columns(\"Deptno\"), _         ds.Tables(\"Emp\").Columns(\"Deptno\"), False)   ```       After using the OracleDataAdapter to perform a `Fill` or `FillSchema` operation, the `DataColumn.ReadOnly` property always returns false, regardless of whether a column can be updated or not, because the Oracle server does not return this information."}]},{"pos":[17588,17692],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class."},{"pos":[17705,18249],"content":"When you create an instance of <xref:System.Data.OracleClient.OracleDataAdapter>, the following read/write properties are set to their default values, as shown in the table.      |Properties|Default value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you create an instance of &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;, the following read/write properties are set to their default values, as shown in the table.","pos":[0,173],"source":"When you create an instance of <xref:System.Data.OracleClient.OracleDataAdapter>, the following read/write properties are set to their default values, as shown in the table."},{"content":"|Properties|Default value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[179,537],"source":"      |Properties|Default value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[22327,22471],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified SQL SELECT statement.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class with the specified SQL SELECT statement."},{"pos":[22484,23267],"content":"This implementation of the <xref:System.Data.OracleClient.OracleDataAdapter> constructor sets the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.       When you create an instance of <xref:System.Data.OracleClient.OracleDataAdapter>, the following read/write properties are set to their default values, as shown in the table.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; constructor sets the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property to the value specified in the <ph id=\"ph1\">`selectCommand`</ph> parameter.","pos":[0,230],"source":"This implementation of the <xref:System.Data.OracleClient.OracleDataAdapter> constructor sets the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter."},{"content":"When you create an instance of &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;, the following read/write properties are set to their default values, as shown in the table.","pos":[237,410],"source":"       When you create an instance of <xref:System.Data.OracleClient.OracleDataAdapter>, the following read/write properties are set to their default values, as shown in the table."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[416,774],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[26858,27137],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is an SQL SELECT statement or stored procedure, and is set as the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> that is an SQL SELECT statement or stored procedure, and is set as the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref>."},{"pos":[27835,28038],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an SQL SELECT statement and an <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class with an SQL SELECT statement and an <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>."},{"pos":[28050,28266],"content":"This implementation of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; can be useful in an application that must call the <ph id=\"ph1\">`Fill`</ph> method for two or more &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; objects.","needQuote":true,"needEscape":true,"source":"This implementation of the <xref:System.Data.OracleClient.OracleDataAdapter> can be useful in an application that must call the `Fill` method for two or more <xref:System.Data.OracleClient.OracleDataAdapter> objects."},{"pos":[31813,32037],"content":"A string that is an SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref>."},{"pos":[32138,32235],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the connection.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> that represents the connection."},{"pos":[32847,33004],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an SQL SELECT statement and a connection string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class with an SQL SELECT statement and a connection string."},{"pos":[36637,36861],"content":"A string that is an SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref>."},{"pos":[36940,36962],"content":"The connection string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection string.","pos":[0,22]}]},{"pos":[37705,37717],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37774,37786],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39604,39616],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39689,39701],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39783,39795],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39886,39898],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39981,39993],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41258,41270],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41343,41355],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41437,41449],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41540,41552],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41636,41648],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[42173,42262],"content":"Gets or sets an SQL statement or stored procedure used to delete records in the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to delete records in the database.","pos":[0,89]}]},{"pos":[42275,43295],"content":"When the DeleteCommand property is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, the DeleteCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand>.       During an update operation, if DeleteCommand is not set and primary key information is present in the <xref:System.Data.DataSet>, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate the DeleteCommand, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database. To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>. The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"When the DeleteCommand property is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.","pos":[0,179],"source":"When the DeleteCommand property is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned."},{"content":"Instead, the DeleteCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;.","pos":[180,301],"source":" Instead, the DeleteCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand>."},{"content":"During an update operation, if DeleteCommand is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, you can use the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt; class to automatically generate the DeleteCommand, and additional commands needed to reconcile the &lt;xref:System.Data.DataSet&gt; to the database.","pos":[308,649],"source":"       During an update operation, if DeleteCommand is not set and primary key information is present in the <xref:System.Data.DataSet>, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate the DeleteCommand, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database."},{"content":"To do this, set the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;.","pos":[650,803],"source":" To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>."},{"content":"The generation logic also requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[804,910],"source":" The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[911,1018],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[45563,45798],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during an update operation to delete records in the database that correspond to deleted rows in the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> used during an update operation to delete records in the database that correspond to deleted rows in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[46440,46452],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[47299,47311],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[47381,47393],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[47464,47476],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48438,48450],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48521,48533],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48598,48610],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48669,48681],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[49836,49931],"content":"Gets or sets an SQL statement or stored procedure used to insert new records into the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to insert new records into the database.","pos":[0,95]}]},{"pos":[49944,51532],"content":"When the InsertCommand property is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand> object, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, InsertCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand>.       During an update operation, if InsertCommand is not set and primary key information is present in the <xref:System.Data.DataSet>, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate InsertCommand, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database. To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>. The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending upon how you set the <xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OracleClient.OracleCommand> object.       When you update a column with the `LONG RAW` data type, an exception is thrown when you enter a value of `NULL` in the column. The Oracle `LONG RAW` data type is a deprecated type in Oracle version 8.0. To avoid this error, use the `BLOB` data type instead of `LONG RAW`.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the InsertCommand property is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt; object, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.","pos":[0,186],"source":"When the InsertCommand property is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand> object, the <xref:System.Data.OracleClient.OracleCommand> is not cloned."},{"content":"Instead, InsertCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;.","pos":[187,304],"source":" Instead, InsertCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand>."},{"content":"During an update operation, if InsertCommand is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, you can use the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt; class to automatically generate InsertCommand, and additional commands needed to reconcile the &lt;xref:System.Data.DataSet&gt; to the database.","pos":[311,648],"source":"       During an update operation, if InsertCommand is not set and primary key information is present in the <xref:System.Data.DataSet>, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate InsertCommand, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database."},{"content":"To do this, set the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;.","pos":[649,802],"source":" To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>."},{"content":"The generation logic also requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[803,909],"source":" The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[910,1017],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be added to the &lt;xref:System.Data.DataSet&gt; depending upon how you set the &lt;xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.","pos":[1023,1303],"source":"      > [!NOTE] >  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending upon how you set the <xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OracleClient.OracleCommand> object."},{"content":"When you update a column with the <ph id=\"ph1\">`LONG RAW`</ph> data type, an exception is thrown when you enter a value of <ph id=\"ph2\">`NULL`</ph> in the column.","pos":[1310,1436],"source":"       When you update a column with the `LONG RAW` data type, an exception is thrown when you enter a value of `NULL` in the column."},{"content":"The Oracle <ph id=\"ph1\">`LONG RAW`</ph> data type is a deprecated type in Oracle version 8.0.","pos":[1437,1512],"source":" The Oracle `LONG RAW` data type is a deprecated type in Oracle version 8.0."},{"content":"To avoid this error, use the <ph id=\"ph1\">`BLOB`</ph> data type instead of <ph id=\"ph2\">`LONG RAW`</ph>.","pos":[1513,1581],"source":" To avoid this error, use the `BLOB` data type instead of `LONG RAW`."}]},{"pos":[53876,54081],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during an update operation to insert records in the database that correspond to new rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> used during an update operation to insert records in the database that correspond to new rows in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[54932,54944],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[55807,55819],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[56317,56400],"content":"Occurs during an update operation after a command is executed against the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs during an update operation after a command is executed against the database.","pos":[0,83]}]},{"pos":[56413,57009],"content":"When using the `Update` method, there are two events that occur per data row updated. The order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The `OnRowUpdating` event is raised.      3.  The command executes.      4.  If the `UpdateRowSource` enumeration is set to `FirstReturnedRecord`, the first returned result is placed in the **DataRow**.      5.  If there are output parameters, they are placed in the **DataRow**.      6.  The `OnRowUpdated` event is raised.      7.  `AcceptChanges` is called.","needQuote":false,"needEscape":true,"nodes":[{"content":"When using the <ph id=\"ph1\">`Update`</ph> method, there are two events that occur per data row updated.","pos":[0,85],"source":"When using the `Update` method, there are two events that occur per data row updated."},{"content":"The order of execution is as follows:      1.","pos":[86,131]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[133,212],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[218,220]},{"content":"The <ph id=\"ph1\">`OnRowUpdating`</ph> event is raised.","pos":[222,258],"source":"  The `OnRowUpdating` event is raised."},{"content":"3.","pos":[264,266]},{"content":"The command executes.","pos":[268,289]},{"content":"4.","pos":[295,297]},{"content":"If the <ph id=\"ph1\">`UpdateRowSource`</ph> enumeration is set to <ph id=\"ph2\">`FirstReturnedRecord`</ph>, the first returned result is placed in the <bpt id=\"p1\">**</bpt>DataRow<ept id=\"p1\">**</ept>.","pos":[299,424],"source":"  If the `UpdateRowSource` enumeration is set to `FirstReturnedRecord`, the first returned result is placed in the **DataRow**."},{"content":"5.","pos":[430,432]},{"content":"If there are output parameters, they are placed in the <bpt id=\"p1\">**</bpt>DataRow<ept id=\"p1\">**</ept>.","pos":[434,501],"source":"  If there are output parameters, they are placed in the **DataRow**."},{"content":"6.","pos":[507,509]},{"content":"The <ph id=\"ph1\">`OnRowUpdated`</ph> event is raised.","pos":[511,546],"source":"  The `OnRowUpdated` event is raised."},{"content":"7.","pos":[552,554]},{"content":"<ph id=\"ph1\">`AcceptChanges`</ph> is called.","pos":[556,582],"source":"`AcceptChanges` is called."}]},{"pos":[57210,57222],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[57655,57770],"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; before a command is executed against the data source.","pos":[0,115],"source":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source."}]},{"pos":[57783,58379],"content":"When using the `Update` method, there are two events that occur per data row updated. The order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The `OnRowUpdating` event is raised.      3.  The command executes.      4.  If the `UpdateRowSource` enumeration is set to `FirstReturnedRecord`, the first returned result is placed in the **DataRow**.      5.  If there are output parameters, they are placed in the **DataRow**.      6.  The `OnRowUpdated` event is raised.      7.  `AcceptChanges` is called.","needQuote":false,"needEscape":true,"nodes":[{"content":"When using the <ph id=\"ph1\">`Update`</ph> method, there are two events that occur per data row updated.","pos":[0,85],"source":"When using the `Update` method, there are two events that occur per data row updated."},{"content":"The order of execution is as follows:      1.","pos":[86,131]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[133,212],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[218,220]},{"content":"The <ph id=\"ph1\">`OnRowUpdating`</ph> event is raised.","pos":[222,258],"source":"  The `OnRowUpdating` event is raised."},{"content":"3.","pos":[264,266]},{"content":"The command executes.","pos":[268,289]},{"content":"4.","pos":[295,297]},{"content":"If the <ph id=\"ph1\">`UpdateRowSource`</ph> enumeration is set to <ph id=\"ph2\">`FirstReturnedRecord`</ph>, the first returned result is placed in the <bpt id=\"p1\">**</bpt>DataRow<ept id=\"p1\">**</ept>.","pos":[299,424],"source":"  If the `UpdateRowSource` enumeration is set to `FirstReturnedRecord`, the first returned result is placed in the **DataRow**."},{"content":"5.","pos":[430,432]},{"content":"If there are output parameters, they are placed in the <bpt id=\"p1\">**</bpt>DataRow<ept id=\"p1\">**</ept>.","pos":[434,501],"source":"  If there are output parameters, they are placed in the **DataRow**."},{"content":"6.","pos":[507,509]},{"content":"The <ph id=\"ph1\">`OnRowUpdated`</ph> event is raised.","pos":[511,546],"source":"  The `OnRowUpdated` event is raised."},{"content":"7.","pos":[552,554]},{"content":"<ph id=\"ph1\">`AcceptChanges`</ph> is called.","pos":[556,582],"source":"`AcceptChanges` is called."}]},{"pos":[58583,58595],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[59041,59130],"content":"Gets or sets an SQL statement or stored procedure used to select records in the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to select records in the database.","pos":[0,89]}]},{"pos":[59143,59557],"content":"When SelectCommand is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, the SelectCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand> object.       If SelectCommand does not return any rows, no tables are added to the **DataSet**, and no exception is raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"When SelectCommand is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.","pos":[0,166],"source":"When SelectCommand is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned."},{"content":"Instead, the SelectCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.","pos":[167,295],"source":" Instead, the SelectCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand> object."},{"content":"If SelectCommand does not return any rows, no tables are added to the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept>, and no exception is raised.","pos":[302,412],"source":"       If SelectCommand does not return any rows, no tables are added to the **DataSet**, and no exception is raised."}]},{"pos":[61899,62093],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during a fill operation to select records from database for placement in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> that is used during a fill operation to select records from database for placement in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[62758,62845],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.DeleteCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>."}]},{"pos":[62857,63063],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,206],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,206],"source":" It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[63231,63265],"content":"A string representing the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the command.","pos":[0,34]}]},{"pos":[63957,64044],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.InsertCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>."}]},{"pos":[64056,64262],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,206],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,206],"source":" It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[64430,64464],"content":"A string representing the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the command.","pos":[0,34]}]},{"pos":[65156,65243],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.SelectCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>."}]},{"pos":[65255,65461],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,206],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,206],"source":" It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[65629,65663],"content":"A string representing the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the command.","pos":[0,34]}]},{"pos":[66355,66442],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.UpdateCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>."}]},{"pos":[66454,66660],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,206],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,206],"source":" It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[66828,66862],"content":"A string representing the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the command.","pos":[0,34]}]},{"pos":[67473,67576],"content":"For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ICloneable.Clone%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,103],"source":"For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;."}]},{"pos":[67588,67785],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.ICloneable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.ICloneable> interface.","pos":[0,197],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.","pos":[60,197],"source":" It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.ICloneable> interface."}]}]},{"pos":[67913,67958],"content":"A new object that is a copy of this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object that is a copy of this instance.","pos":[0,45]}]},{"pos":[69114,69255],"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.","pos":[0,141]}]},{"pos":[69268,69750],"content":"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. This can increase application performance by reducing the number of round-trips to the server.       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before you implement your application.       An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. This can increase application performance by reducing the number of round-trips to the server.       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before you implement your application.       An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.","pos":[0,478],"nodes":[{"content":"Use the UpdateBatchSize property to update a data source with changes from a &lt;xref:System.Data.DataSet&gt;.","pos":[0,104],"source":"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>."},{"content":"This can increase application performance by reducing the number of round-trips to the server.","pos":[105,199]},{"content":"Executing an extremely large batch could decrease performance.","pos":[206,268]},{"content":"Therefore, you should test for the optimum batch size setting before you implement your application.","pos":[269,369]},{"content":"An &lt;xref:System.ArgumentOutOfRangeException&gt; is thrown if the value is set to a number less than zero.","pos":[376,478],"source":"       An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero."}]}]},{"pos":[69882,70748],"content":"The number of rows to process per batch.       <table><thead><tr><th> Value:       </th><th> Effect:       </th></tr></thead><tbody><tr><td> 0       </td><td> There is no limit on the batch size.       </td></tr><tr><td> 1       </td><td> Disables batch updating.       </td></tr><tr><td> &gt; 1       </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.       </td></tr></tbody></table>       When setting this to a value other than 1 all the commands associated with the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> have to have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref> or <xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"></xref>. An exception is thrown otherwise.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of rows to process per batch.       ","pos":[0,47],"nodes":[{"content":"The number of rows to process per batch.","pos":[0,40]}]},{"content":"Value:","pos":[70,76]},{"content":"Effect:","pos":[93,100]},{"content":"0","pos":[141,142]},{"content":" There is no limit on the batch size.       ","pos":[158,202],"nodes":[{"content":"There is no limit on the batch size.","pos":[1,37]}]},{"content":"1","pos":[221,222]},{"content":" Disables batch updating.       ","pos":[238,270],"nodes":[{"content":"Disables batch updating.","pos":[1,25]}]},{"content":"<ph id=\"ph1\">&amp;gt;</ph> 1","pos":[289,295],"source":"&gt; 1       "},{"content":" Changes are sent using batches of UpdateBatchSize operations at a time.       ","pos":[311,390],"nodes":[{"content":"Changes are sent using batches of UpdateBatchSize operations at a time.","pos":[1,72]}]},{"content":"       When setting this to a value other than 1 all the commands associated with the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> have to have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref> or <xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"></xref>. An exception is thrown otherwise.","pos":[416,832],"nodes":[{"content":"When setting this to a value other than 1 all the commands associated with the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> have to have their &lt;xref:System.Data.IDbCommand.UpdatedRowSource*&gt; property set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[7,382],"source":"       When setting this to a value other than 1 all the commands associated with the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> have to have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref> or <xref uid=\"langword_csharp_OutputParameters\" name=\"OutputParameters\" href=\"\"></xref>."},{"content":"An exception is thrown otherwise.","pos":[383,416]}]}]},{"pos":[71267,71356],"content":"Gets or sets an SQL statement or stored procedure used to update records in the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to update records in the database.","pos":[0,89]}]},{"pos":[71369,73042],"content":"When UpdateCommand is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, the UpdateCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand> object.       During an update operation, if <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A> is not set and primary key information is present in the **DataSet**, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A>, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database. To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>. The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending upon how you set the <xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OracleClient.OracleCommand> object.       When you update a column with the `LONG RAW` data type, an exception is thrown when you enter a value of `NULL` in the column. The Oracle `LONG RAW` data type is a deprecated type in Oracle version 8.0. To avoid this error, use the `BLOB` data type instead of `LONG RAW`.","needQuote":false,"needEscape":true,"nodes":[{"content":"When UpdateCommand is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.","pos":[0,166],"source":"When UpdateCommand is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned."},{"content":"Instead, the UpdateCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.","pos":[167,295],"source":" Instead, the UpdateCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand> object."},{"content":"During an update operation, if &lt;xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A&gt; is not set and primary key information is present in the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept>, you can use the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt; class to automatically generate &lt;xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A&gt;, and additional commands needed to reconcile the &lt;xref:System.Data.DataSet&gt; to the database.","pos":[302,730],"source":"       During an update operation, if <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A> is not set and primary key information is present in the **DataSet**, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A>, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database."},{"content":"To do this, set the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;.","pos":[731,884],"source":" To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>."},{"content":"The generation logic also requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[885,991],"source":" The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[992,1099],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be merged with the &lt;xref:System.Data.DataSet&gt; depending upon how you set the &lt;xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.","pos":[1105,1388],"source":"      > [!NOTE] >  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending upon how you set the <xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OracleClient.OracleCommand> object."},{"content":"When you update a column with the <ph id=\"ph1\">`LONG RAW`</ph> data type, an exception is thrown when you enter a value of <ph id=\"ph2\">`NULL`</ph> in the column.","pos":[1395,1521],"source":"       When you update a column with the `LONG RAW` data type, an exception is thrown when you enter a value of `NULL` in the column."},{"content":"The Oracle <ph id=\"ph1\">`LONG RAW`</ph> data type is a deprecated type in Oracle version 8.0.","pos":[1522,1597],"source":" The Oracle `LONG RAW` data type is a deprecated type in Oracle version 8.0."},{"content":"To avoid this error, use the <ph id=\"ph1\">`BLOB`</ph> data type instead of <ph id=\"ph2\">`LONG RAW`</ph>.","pos":[1598,1666],"source":" To avoid this error, use the `BLOB` data type instead of `LONG RAW`."}]},{"pos":[75744,75954],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during an update operation to update records in the database that correspond to modified rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> used during an update operation to update records in the database that correspond to modified rows in the <xref href=\"System.Data.DataSet\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.OracleClient.OracleDataAdapter\n  id: OracleDataAdapter\n  children:\n  - System.Data.OracleClient.OracleDataAdapter.#ctor\n  - System.Data.OracleClient.OracleDataAdapter.#ctor(System.Data.OracleClient.OracleCommand)\n  - System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.Data.OracleClient.OracleConnection)\n  - System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.String)\n  - System.Data.OracleClient.OracleDataAdapter.AddToBatch(System.Data.IDbCommand)\n  - System.Data.OracleClient.OracleDataAdapter.ClearBatch\n  - System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.OracleClient.OracleDataAdapter.DeleteCommand\n  - System.Data.OracleClient.OracleDataAdapter.ExecuteBatch\n  - System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  - System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  - System.Data.OracleClient.OracleDataAdapter.InitializeBatching\n  - System.Data.OracleClient.OracleDataAdapter.InsertCommand\n  - System.Data.OracleClient.OracleDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  - System.Data.OracleClient.OracleDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  - System.Data.OracleClient.OracleDataAdapter.RowUpdated\n  - System.Data.OracleClient.OracleDataAdapter.RowUpdating\n  - System.Data.OracleClient.OracleDataAdapter.SelectCommand\n  - System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  - System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  - System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  - System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  - System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone\n  - System.Data.OracleClient.OracleDataAdapter.TerminateBatching\n  - System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize\n  - System.Data.OracleClient.OracleDataAdapter.UpdateCommand\n  langs:\n  - csharp\n  name: OracleDataAdapter\n  nameWithType: OracleDataAdapter\n  fullName: System.Data.OracleClient.OracleDataAdapter\n  type: Class\n  summary: Represents a set of data commands and a connection to a database that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the database. This class cannot be inherited.\n  remarks: \"This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The OracleDataAdapter serves as a bridge between a **DataSet** and database for retrieving and saving data. The OracleDataAdapter provides this bridge by using <xref:System.Data.Common.DbDataAdapter.Fill%2A> to load data from the database into the <xref:System.Data.DataSet>, and using <xref:System.Data.Common.DbDataAdapter.Update%2A> to send changes made in the <xref:System.Data.DataSet> back to the data source.  \\n  \\n When the OracleDataAdapter fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>. You may also have the OracleDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>. For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  By default, numeric fields imported to a <xref:System.Data.DataTable> with <xref:System.Data.Common.DbDataAdapter.Fill%2A> are mapped to <xref:System.Data.OracleClient.OracleNumber> objects. It is possible to overflow the <xref:System.Data.OracleClient.OracleNumber>, and throw an Oracle exception, by importing a non-integral numeric value that is either too large or too high precision for the <xref:System.Data.OracleClient.OracleNumber>'s precision limitations. Refer to the description of <xref:System.Data.OracleClient.OracleNumber> for more information.  \\n  \\n The OracleDataAdapter also includes the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.DeleteCommand%2A>, <xref:System.Data.OracleClient.OracleDataAdapter.UpdateCommand%2A>, and `TableMappings` properties to facilitate loading and updating of data.  \\n  \\n The .NET Framework Data Provider for Oracle does not support batched SQL statements. However, it does allow you to use multiple `REF CURSOR` output parameters to fill a **DataSet**, each in its own <xref:System.Data.DataTable>. You must define the parameters, mark them as output parameters, and indicate that they are `REF CURSOR` data types. Note that you cannot use the <xref:System.Data.Common.DbDataAdapter.Update%2A> method when the OracleDataAdapter is filled using `REF CURSOR` parameters returned by a stored procedure, because Oracle does not provide the information necessary to determine what the table name and column names are when the SQL statement is executed. The following C# example assumes that you have created this stored procedure.  \\n  \\n Create the following Oracle package on the Oracle server.  \\n  \\n```  \\nCREATE OR REPLACE PACKAGE CURSPKG AS   \\n   TYPE T_CURSOR IS REF CURSOR;   \\n   PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,   \\n      IO_CURSOR OUT T_CURSOR);   \\n   PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \\n      DEPTCURSOR OUT T_CURSOR);  \\nEND CURSPKG;  \\n/  \\n```  \\n  \\n Create the following Oracle package body on the Oracle server.  \\n  \\n```  \\nCREATE OR REPLACE PACKAGE BODY CURSPKG AS   \\n    PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,   \\n                               IO_CURSOR OUT T_CURSOR)   \\n    IS   \\n        V_CURSOR T_CURSOR;   \\n    BEGIN   \\n        IF N_EMPNO <> 0 THEN   \\n             OPEN V_CURSOR FOR   \\n             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME   \\n                  FROM EMP, DEPT   \\n                  WHERE EMP.DEPTNO = DEPT.DEPTNO   \\n                        AND EMP.EMPNO = N_EMPNO;   \\n        ELSE   \\n             OPEN V_CURSOR FOR   \\n             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME   \\n                  FROM EMP, DEPT   \\n                  WHERE EMP.DEPTNO = DEPT.DEPTNO;   \\n        END IF;   \\n        IO_CURSOR := V_CURSOR;   \\n    END OPEN_ONE_CURSOR;   \\n    PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \\n                                DEPTCURSOR OUT T_CURSOR)   \\n    IS   \\n        V_CURSOR1 T_CURSOR;   \\n        V_CURSOR2 T_CURSOR;   \\n    BEGIN   \\n        OPEN V_CURSOR1 FOR SELECT * FROM EMP;   \\n        OPEN V_CURSOR2 FOR SELECT * FROM DEPT;   \\n        EMPCURSOR  := V_CURSOR1;   \\n        DEPTCURSOR := V_CURSOR2;   \\n    END OPEN_TWO_CURSORS;   \\nEND CURSPKG;  \\n /  \\n```  \\n  \\n The following C# example demonstrates how you might obtain table and column information using the stored procedure.  \\n  \\n```c#  \\n// GetConnectionString() returns a connection string for  \\n// the data source.  \\n  \\nstring connString = GetConnectionString();  \\nDataSet ds = new DataSet();  \\nOracleConnection conn = new OracleConnection(connString);  \\nOracleCommand cmd = conn.CreateCommand();  \\n  \\ncmd.CommandText = \\\"CURSPKG.OPEN_TWO_CURSORS\\\";  \\ncmd.CommandType = CommandType.StoredProcedure;  \\ncmd.Parameters.Add(\\\"EMPCURSOR\\\", OracleType.Cursor).Direction =   \\n       ParameterDirection.Output;  \\ncmd.Parameters.Add(\\\"DEPTCURSOR\\\", OracleType.Cursor).Direction =   \\n       ParameterDirection.Output;  \\n  \\nOracleDataAdapter da = new OracleDataAdapter(cmd);  \\nda.TableMappings.Add(\\\"Table\\\", \\\"Emp\\\");  \\nda.TableMappings.Add(\\\"Table1\\\", \\\"Dept\\\");  \\nda.Fill(ds);  \\n  \\nds.Relations.Add(\\\"EmpDept\\\", ds.Tables[\\\"Dept\\\"].Columns[\\\"Deptno\\\"],   \\n      ds.Tables[\\\"Emp\\\"].Columns[\\\"Deptno\\\"], false);  \\n```  \\n  \\n The following Visual Basic example demonstrates how to use an OracleDataAdapter to fill a <xref:System.Data.DataSet> using an Oracle `REF CURSOR`. These examples use tables that are defined in the Oracle Scott/Tiger schema, and require the following PL/SQL package and package body. You must create these on your server to use the examples.  \\n  \\n Create the following Oracle package on the Oracle server.  \\n  \\n```  \\nCREATE OR REPLACE PACKAGE CURSPKG AS   \\n   TYPE T_CURSOR IS REF CURSOR;   \\n   PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,   \\n      IO_CURSOR OUT T_CURSOR);   \\n   PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \\n      DEPTCURSOR OUT T_CURSOR);  \\nEND CURSPKG;  \\n/  \\n```  \\n  \\n Create the following Oracle package body on the Oracle server.  \\n  \\n```  \\nCREATE OR REPLACE PACKAGE BODY CURSPKG AS   \\n    PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,   \\n                               IO_CURSOR OUT T_CURSOR)   \\n    IS   \\n        V_CURSOR T_CURSOR;   \\n    BEGIN   \\n        IF N_EMPNO <> 0 THEN   \\n             OPEN V_CURSOR FOR   \\n             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME   \\n                  FROM EMP, DEPT   \\n                  WHERE EMP.DEPTNO = DEPT.DEPTNO   \\n                        AND EMP.EMPNO = N_EMPNO;   \\n        ELSE   \\n             OPEN V_CURSOR FOR   \\n             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME   \\n                  FROM EMP, DEPT   \\n                  WHERE EMP.DEPTNO = DEPT.DEPTNO;   \\n        END IF;   \\n        IO_CURSOR := V_CURSOR;   \\n    END OPEN_ONE_CURSOR;   \\n    PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,   \\n                                DEPTCURSOR OUT T_CURSOR)   \\n    IS   \\n        V_CURSOR1 T_CURSOR;   \\n        V_CURSOR2 T_CURSOR;   \\n    BEGIN   \\n        OPEN V_CURSOR1 FOR SELECT * FROM EMP;   \\n        OPEN V_CURSOR2 FOR SELECT * FROM DEPT;   \\n        EMPCURSOR  := V_CURSOR1;   \\n        DEPTCURSOR := V_CURSOR2;   \\n    END OPEN_TWO_CURSORS;   \\nEND CURSPKG;  \\n /  \\n```  \\n  \\n This Visual Basic example executes a PL/SQL stored procedure that returns two `REF CURSOR` parameters, and fills a <xref:System.Data.DataSet> with the rows that are returned.  \\n  \\n```vb#  \\n  \\n' GetConnectionString() returns a connection string for  \\n' the data source.  \\n  \\n    Dim connString As New String(GetConnectionString())  \\n    Dim ds As New DataSet()  \\n    Dim conn As New OracleConnection(connString)  \\n    Dim cmd As OracleCommand = conn.CreateCommand()  \\n  \\n    cmd.CommandText = \\\"CURSPKG.OPEN_TWO_CURSORS\\\"  \\n    cmd.CommandType = CommandType.StoredProcedure  \\n    cmd.Parameters.Add(\\\"EMPCURSOR\\\", OracleType.Cursor).Direction = _  \\n       ParameterDirection.Output  \\n    cmd.Parameters.Add(\\\"DEPTCURSOR\\\", OracleType.Cursor).Direction = _  \\n       ParameterDirection.Output  \\n  \\n    Dim da As New OracleDataAdapter(cmd)  \\n    da.TableMappings.Add(\\\"Table\\\", \\\"Emp\\\")  \\n    da.TableMappings.Add(\\\"Table1\\\", \\\"Dept\\\")  \\n    da.Fill(ds)  \\n  \\n    ds.Relations.Add(\\\"EmpDept\\\", ds.Tables(\\\"Dept\\\").Columns(\\\"Deptno\\\"), _  \\n      ds.Tables(\\\"Emp\\\").Columns(\\\"Deptno\\\"), False)  \\n```  \\n  \\n After using the OracleDataAdapter to perform a `Fill` or `FillSchema` operation, the `DataColumn.ReadOnly` property always returns false, regardless of whether a column can be updated or not, because the Oracle server does not return this information.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"RowUpdated\")]\n\n      [System.ComponentModel.Designer(\"Microsoft.VSDesigner.Data.VS.OracleDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ComponentModel.ToolboxItem(\"Microsoft.VSDesigner.Data.VS.OracleDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Obsolete(\"OracleDataAdapter has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260\", false)]\n\n      public sealed class OracleDataAdapter : System.Data.Common.DbDataAdapter, ICloneable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DataAdapter\n  - System.Data.Common.DbDataAdapter\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  - System.Data.Common.DataAdapter.CloneInternals\n  - System.Data.Common.DataAdapter.ContinueUpdateOnError\n  - System.Data.Common.DataAdapter.CreateTableMappings\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.FillError\n  - System.Data.Common.DataAdapter.FillLoadOption\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.HasTableMappings\n  - System.Data.Common.DataAdapter.MissingMappingAction\n  - System.Data.Common.DataAdapter.MissingSchemaAction\n  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  - System.Data.Common.DataAdapter.ResetFillLoadOption\n  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  - System.Data.Common.DataAdapter.TableMappings\n  - System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  - System.Data.Common.DbDataAdapter.FillCommandBehavior\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.GetFillParameters\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor\n  id: '#ctor'\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: OracleDataAdapter()\n  nameWithType: OracleDataAdapter.OracleDataAdapter()\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter()\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class.\n  remarks: \"When you create an instance of <xref:System.Data.OracleClient.OracleDataAdapter>, the following read/write properties are set to their default values, as shown in the table.  \\n  \\n|Properties|Default value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets some of its properties.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Sub CreateOracleDataAdapter()  \\n    Dim myOracleConnection As OracleConnection = New OracleConnection(\\\"Data Source=Oracle8i;Integrated Security=yes\\\")  \\n    Dim custDA As OracleDataAdapter = New OracleDataAdapter  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey  \\n  \\n    custDA.SelectCommand = New OracleCommand(\\\"SELECT DeptNo, DName FROM Dept\\\", myOracleConnection)  \\n    custDA.InsertCommand = New OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" & _  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection)  \\n    custDA.UpdateCommand = New OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" & _  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n    custDA.DeleteCommand = New OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static void CreateOracleDataAdapter()   \\n{  \\n    OracleConnection myOracleConnection = new OracleConnection(\\\"Data Source=Oracle8i;Integrated Security=yes\\\");  \\n    OracleDataAdapter custDA = new OracleDataAdapter();  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey;  \\n  \\n    custDA.SelectCommand = new OracleCommand(\\\"SELECT DeptNo, CompanyName FROM Dept\\\", myOracleConnection);  \\n    custDA.InsertCommand = new OracleCommand(\\\"INSERT INTO Dept (DeptNo, CompanyName) \\\" +  \\n                                            \\\"VALUES (:pDeptNo, :pCompanyName)\\\", myOracleConnection);  \\n    custDA.UpdateCommand = new OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, CompanyName = :pCompanyName \\\" +  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n    custDA.DeleteCommand = new OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.InsertCommand.Parameters.Add(\\\"pCompanyName\\\", OracleType.VarChar, 14, \\\"CompanyName\\\");  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pCompanyName\\\", OracleType.VarChar, 14, \\\"CompanyName\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n}  \\n```\"\n  syntax:\n    content: public OracleDataAdapter ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor(System.Data.OracleClient.OracleCommand)\n  id: '#ctor(System.Data.OracleClient.OracleCommand)'\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: OracleDataAdapter(OracleCommand)\n  nameWithType: OracleDataAdapter.OracleDataAdapter(OracleCommand)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(OracleCommand)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class with the specified SQL SELECT statement.\n  remarks: \"This implementation of the <xref:System.Data.OracleClient.OracleDataAdapter> constructor sets the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.  \\n  \\n When you create an instance of <xref:System.Data.OracleClient.OracleDataAdapter>, the following read/write properties are set to their default values, as shown in the table.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets some of its properties.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Sub CreateOracleDataAdapter()  \\n    Dim myOracleConnection As OracleConnection = New OracleConnection(\\\"Data Source=Oracle8i;Integrated Security=yes\\\")  \\n    Dim myOracleCommand As OracleCommand = New OracleCommand(\\\"SELECT DeptNo, DName FROM Dept\\\", myOracleConnection)  \\n    Dim custDA As OracleDataAdapter = New OracleDataAdapter(myOracleCommand)  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey  \\n  \\n    custDA.InsertCommand = New OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" & _  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection)  \\n    custDA.UpdateCommand = New OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" & _  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n    custDA.DeleteCommand = New OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static void CreateOracleDataAdapter()   \\n{  \\n    OracleConnection myOracleConnection = new OracleConnection(\\\"Data Source=Oracle8i;Integrated Security=yes\\\");  \\n    OracleCommand myOracleCommand = new OracleCommand(\\\"SELECT DeptNo, DName FROM Dept\\\", myOracleConnection);  \\n    OracleDataAdapter custDA = new OracleDataAdapter(myOracleCommand);  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey;  \\n  \\n    custDA.InsertCommand = new OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" +  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection);  \\n    custDA.UpdateCommand = new OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" +  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n    custDA.DeleteCommand = new OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\");  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n}  \\n```\"\n  syntax:\n    content: public OracleDataAdapter (System.Data.OracleClient.OracleCommand selectCommand);\n    parameters:\n    - id: selectCommand\n      type: System.Data.OracleClient.OracleCommand\n      description: An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> that is an SQL SELECT statement or stored procedure, and is set as the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref>.\n  overload: System.Data.OracleClient.OracleDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.Data.OracleClient.OracleConnection)\n  id: '#ctor(System.String,System.Data.OracleClient.OracleConnection)'\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: OracleDataAdapter(String,OracleConnection)\n  nameWithType: OracleDataAdapter.OracleDataAdapter(String,OracleConnection)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(String,OracleConnection)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class with an SQL SELECT statement and an <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>.\n  remarks: This implementation of the <xref:System.Data.OracleClient.OracleDataAdapter> can be useful in an application that must call the `Fill` method for two or more <xref:System.Data.OracleClient.OracleDataAdapter> objects.\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets some of its properties.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Sub CreateOracleDataAdapter()  \\n    Dim myOracleConnection As OracleConnection = New OracleConnection(\\\"Data Source=Oracle8i;Integrated Security=yes\\\")  \\n    Dim mySelectText As String = \\\"SELECT DeptNo, DName FROM Dept\\\"  \\n    Dim custDA As OracleDataAdapter = New OracleDataAdapter(mySelectText, myOracleConnection)   \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey  \\n  \\n    custDA.InsertCommand = New OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" & _  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection)  \\n    custDA.UpdateCommand = New OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" & _  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n    custDA.DeleteCommand = New OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static void CreateOracleDataAdapter()   \\n{  \\n    OracleConnection myOracleConnection = new OracleConnection(\\\"Data Source=Oracle8i;Integrated Security=yes\\\");  \\n  \\n    string mySelectText = \\\"SELECT DeptNo, DName FROM Dept\\\";  \\n  \\n    OracleDataAdapter custDA = new OracleDataAdapter(mySelectText, myOracleConnection );  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey;  \\n  \\n    custDA.InsertCommand = new OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" +  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection);  \\n    custDA.UpdateCommand = new OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" +  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n    custDA.DeleteCommand = new OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\");  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n}  \\n```\"\n  syntax:\n    content: public OracleDataAdapter (string selectCommandText, System.Data.OracleClient.OracleConnection selectConnection);\n    parameters:\n    - id: selectCommandText\n      type: System.String\n      description: A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref>.\n    - id: selectConnection\n      type: System.Data.OracleClient.OracleConnection\n      description: An <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> that represents the connection.\n  overload: System.Data.OracleClient.OracleDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: OracleDataAdapter(String,String)\n  nameWithType: OracleDataAdapter.OracleDataAdapter(String,String)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(String,String)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref> class with an SQL SELECT statement and a connection string.\n  remarks: ''\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets some of its properties.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Sub CreateOracleDataAdapter()  \\n    Dim myConnectionText As String = \\\"Data Source=Oracle8i;Integrated Security=yes\\\"  \\n    Dim mySelectText As String = \\\"SELECT DeptNo, DName FROM Dept\\\"  \\n    Dim custDA As OracleDataAdapter = New OracleDataAdapter(mySelectText, myConnectionText )   \\n    Dim myOracleConnection As OracleConnection = custDA.SelectCommand.Connection  \\n  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey     \\n  \\n    custDA.InsertCommand = New OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" & _  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection)  \\n    custDA.UpdateCommand = New OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" & _  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n    custDA.DeleteCommand = New OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection)  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\")  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static void CreateOracleDataAdapter()   \\n{  \\n    string myConnectionText = \\\"Data Source=Oracle8i;Integrated Security=yes\\\";  \\n  \\n    string mySelectText = \\\"SELECT DeptNo, DName FROM Dept\\\";  \\n  \\n    OracleDataAdapter custDA = new OracleDataAdapter(mySelectText, myConnectionText );  \\n   OracleConnection myOracleConnection = custDA.SelectCommand.Connection;  \\n  \\n    custDA.MissingSchemaAction = MissingSchemaAction.AddWithKey;  \\n  \\n    custDA.InsertCommand = new OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" +  \\n                                            \\\"VALUES (:pDeptNo, :pDName)\\\", myOracleConnection);  \\n    custDA.UpdateCommand = new OracleCommand(\\\"UPDATE Dept SET DeptNo = :pDeptNo, DName = :pDName \\\" +  \\n                                            \\\"WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n    custDA.DeleteCommand = new OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", myOracleConnection);  \\n  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.InsertCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\");  \\n  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"pDName\\\", OracleType.VarChar, 14, \\\"DName\\\");  \\n    custDA.UpdateCommand.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n  \\n    custDA.DeleteCommand.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\").SourceVersion = DataRowVersion.Original;  \\n}  \\n```\"\n  syntax:\n    content: public OracleDataAdapter (string selectCommandText, string selectConnectionString);\n    parameters:\n    - id: selectCommandText\n      type: System.String\n      description: A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OracleClient.OracleDataAdapter\"></xref>.\n    - id: selectConnectionString\n      type: System.String\n      description: The connection string.\n  overload: System.Data.OracleClient.OracleDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.AddToBatch(System.Data.IDbCommand)\n  id: AddToBatch(System.Data.IDbCommand)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: AddToBatch(IDbCommand)\n  nameWithType: OracleDataAdapter.AddToBatch(IDbCommand)\n  fullName: System.Data.OracleClient.OracleDataAdapter.AddToBatch(IDbCommand)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override int AddToBatch (System.Data.IDbCommand command);\n    parameters:\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.AddToBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.ClearBatch\n  id: ClearBatch\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: ClearBatch()\n  nameWithType: OracleDataAdapter.ClearBatch()\n  fullName: System.Data.OracleClient.OracleDataAdapter.ClearBatch()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void ClearBatch ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleDataAdapter.ClearBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OracleDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: To be added.\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    - id: statementType\n      type: System.Data.StatementType\n      description: To be added.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: To be added.\n    return:\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OracleDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: To be added.\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    - id: statementType\n      type: System.Data.StatementType\n      description: To be added.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: To be added.\n    return:\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.DeleteCommand\n  id: DeleteCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: DeleteCommand\n  nameWithType: OracleDataAdapter.DeleteCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets an SQL statement or stored procedure used to delete records in the database.\n  remarks: \"When the DeleteCommand property is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, the DeleteCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand>.  \\n  \\n During an update operation, if DeleteCommand is not set and primary key information is present in the <xref:System.Data.DataSet>, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate the DeleteCommand, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database. To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>. The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> and DeleteCommand properties. It assumes you have already created an <xref:System.Data.OracleClient.OracleConnection> object.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Shared Function CreateCustomerAdapter(conn As OracleConnection) As OracleDataAdapter   \\n  \\n  Dim da As OracleDataAdapter = New OracleDataAdapter()  \\n  Dim cmd As OracleCommand  \\n  Dim parm As OracleParameter  \\n  \\n  ' Create the SelectCommand.  \\n  \\n  cmd = New OracleCommand(\\\"SELECT * FROM Dept \\\" & _  \\n                       \\\"WHERE DName = :pDName AND Loc = :pLoc\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14)  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13)  \\n  \\n  da.SelectCommand = cmd  \\n  \\n  ' Create the DeleteCommand.  \\n  \\n  cmd = New OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", conn)  \\n  \\n  parm = cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n  parm.SourceVersion = DataRowVersion.Original  \\n  \\n  da.DeleteCommand = cmd  \\n  \\n  Return da  \\nEnd Function  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static OracleDataAdapter CreateCustomerAdapter(OracleConnection conn)  \\n{  \\n  OracleDataAdapter da = new OracleDataAdapter();  \\n  OracleCommand cmd;  \\n  OracleParameter parm;  \\n  \\n  // Create the SelectCommand.  \\n  \\n  cmd = new OracleCommand(\\\"SELECT * FROM Dept \\\" +  \\n                       \\\"WHERE DName = :pDName AND Loc = :pLoc\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14);  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13);  \\n  \\n  da.SelectCommand = cmd;  \\n  \\n  // Create the DeleteCommand.  \\n  \\n  cmd = new OracleCommand(\\\"DELETE FROM Dept WHERE DeptNo = :pDeptNo\\\", conn);  \\n  \\n  parm = cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n  parm.SourceVersion = DataRowVersion.Original;  \\n  \\n  da.DeleteCommand = cmd;  \\n  \\n  return da;  \\n}  \\n```\"\n  syntax:\n    content: public System.Data.OracleClient.OracleCommand DeleteCommand { get; set; }\n    return:\n      type: System.Data.OracleClient.OracleCommand\n      description: An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> used during an update operation to delete records in the database that correspond to deleted rows in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleDataAdapter.DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.ExecuteBatch\n  id: ExecuteBatch\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: ExecuteBatch()\n  nameWithType: OracleDataAdapter.ExecuteBatch()\n  fullName: System.Data.OracleClient.OracleDataAdapter.ExecuteBatch()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override int ExecuteBatch ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.ExecuteBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  id: GetBatchedParameter(System.Int32,System.Int32)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: GetBatchedParameter(Int32,Int32)\n  nameWithType: OracleDataAdapter.GetBatchedParameter(Int32,Int32)\n  fullName: System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);\n    parameters:\n    - id: commandIdentifier\n      type: System.Int32\n      description: To be added.\n    - id: parameterIndex\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Data.IDataParameter\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: GetBatchedRecordsAffected(Int32,Int32,Exception)\n  nameWithType: OracleDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  fullName: System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);\n    parameters:\n    - id: commandIdentifier\n      type: System.Int32\n      description: To be added.\n    - id: recordsAffected\n      type: System.Int32\n      description: To be added.\n    - id: error\n      type: System.Exception\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.InitializeBatching\n  id: InitializeBatching\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: InitializeBatching()\n  nameWithType: OracleDataAdapter.InitializeBatching()\n  fullName: System.Data.OracleClient.OracleDataAdapter.InitializeBatching()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void InitializeBatching ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleDataAdapter.InitializeBatching*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.InsertCommand\n  id: InsertCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: InsertCommand\n  nameWithType: OracleDataAdapter.InsertCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets an SQL statement or stored procedure used to insert new records into the database.\n  remarks: \"When the InsertCommand property is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand> object, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, InsertCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand>.  \\n  \\n During an update operation, if InsertCommand is not set and primary key information is present in the <xref:System.Data.DataSet>, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate InsertCommand, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database. To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>. The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending upon how you set the <xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OracleClient.OracleCommand> object.  \\n  \\n When you update a column with the `LONG RAW` data type, an exception is thrown when you enter a value of `NULL` in the column. The Oracle `LONG RAW` data type is a deprecated type in Oracle version 8.0. To avoid this error, use the `BLOB` data type instead of `LONG RAW`.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> and InsertCommand properties. It assumes you have already created an <xref:System.Data.OracleClient.OracleConnection> object.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Shared Function CreateCustomerAdapter(conn As OracleConnection) As OracleDataAdapter   \\n  \\n  Dim da As OracleDataAdapter = New OracleDataAdapter()  \\n  Dim cmd As OracleCommand  \\n  \\n  ' Create the SelectCommand.  \\n  \\n  cmd = New OracleCommand(\\\"SELECT * FROM Dept \\\" & _  \\n                       \\\"WHERE DName = :pDName AND Loc = :pLoc\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14)  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13)  \\n  \\n  da.SelectCommand = cmd  \\n  \\n  ' Create the InsertCommand.  \\n  \\n  cmd = New OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" & _  \\n                       \\\"VALUES (:pDeptNo, :pDName)\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14, \\\"DName\\\")  \\n  \\n  da.InsertCommand = cmd  \\n  \\n  Return da  \\nEnd Function  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static OracleDataAdapter CreateCustomerAdapter(OracleConnection conn)  \\n{  \\n  OracleDataAdapter da = new OracleDataAdapter();  \\n  OracleCommand cmd;  \\n  \\n  // Create the SelectCommand.  \\n  \\n  cmd = new OracleCommand(\\\"SELECT * FROM Dept \\\" +  \\n                       \\\"WHERE DName = :pDName AND Loc = :pLoc\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14);  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13);  \\n  \\n  da.SelectCommand = cmd;  \\n  \\n  // Create the InsertCommand.  \\n  \\n  cmd = new OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" +  \\n                       \\\"VALUES (:pDeptNo, :pDName)\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14, \\\"DName\\\");  \\n  \\n  da.InsertCommand = cmd;  \\n  \\n  return da;  \\n}  \\n```\"\n  syntax:\n    content: public System.Data.OracleClient.OracleCommand InsertCommand { get; set; }\n    return:\n      type: System.Data.OracleClient.OracleCommand\n      description: An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> used during an update operation to insert records in the database that correspond to new rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OracleClient.OracleDataAdapter.InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: OracleDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.OnRowUpdated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: OracleDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: To be added.\n  overload: System.Data.OracleClient.OracleDataAdapter.OnRowUpdating*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.RowUpdated\n  id: RowUpdated\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: RowUpdated\n  nameWithType: OracleDataAdapter.RowUpdated\n  fullName: System.Data.OracleClient.OracleDataAdapter.RowUpdated\n  type: Event\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Occurs during an update operation after a command is executed against the database.\n  remarks: \"When using the `Update` method, there are two events that occur per data row updated. The order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The `OnRowUpdating` event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the `UpdateRowSource` enumeration is set to `FirstReturnedRecord`, the first returned result is placed in the **DataRow**.  \\n  \\n5.  If there are output parameters, they are placed in the **DataRow**.  \\n  \\n6.  The `OnRowUpdated` event is raised.  \\n  \\n7.  `AcceptChanges` is called.\"\n  syntax:\n    content: public event System.Data.OracleClient.OracleRowUpdatedEventHandler RowUpdated;\n    return:\n      type: System.Data.OracleClient.OracleRowUpdatedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.RowUpdating\n  id: RowUpdating\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: RowUpdating\n  nameWithType: OracleDataAdapter.RowUpdating\n  fullName: System.Data.OracleClient.OracleDataAdapter.RowUpdating\n  type: Event\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source.\n  remarks: \"When using the `Update` method, there are two events that occur per data row updated. The order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The `OnRowUpdating` event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the `UpdateRowSource` enumeration is set to `FirstReturnedRecord`, the first returned result is placed in the **DataRow**.  \\n  \\n5.  If there are output parameters, they are placed in the **DataRow**.  \\n  \\n6.  The `OnRowUpdated` event is raised.  \\n  \\n7.  `AcceptChanges` is called.\"\n  syntax:\n    content: public event System.Data.OracleClient.OracleRowUpdatingEventHandler RowUpdating;\n    return:\n      type: System.Data.OracleClient.OracleRowUpdatingEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.SelectCommand\n  id: SelectCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: SelectCommand\n  nameWithType: OracleDataAdapter.SelectCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets an SQL statement or stored procedure used to select records in the database.\n  remarks: \"When SelectCommand is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, the SelectCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand> object.  \\n  \\n If SelectCommand does not return any rows, no tables are added to the **DataSet**, and no exception is raised.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets the SelectCommand and <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A> properties. It assumes you have already created an <xref:System.Data.OracleClient.OracleConnection> object.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Shared Function CreateCustomerAdapter(conn As OracleConnection) As OracleDataAdapter   \\n  \\n  Dim da As OracleDataAdapter = New OracleDataAdapter()  \\n  Dim cmd As OracleCommand  \\n  \\n  ' Create the SelectCommand.  \\n  \\n  cmd = New OracleCommand(\\\"SELECT * FROM Dept \\\" & _  \\n                       \\\"WHERE DName = :pDName AND Loc = :pLoc\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14)  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13)  \\n  \\n  da.SelectCommand = cmd  \\n  \\n  ' Create the InsertCommand.  \\n  \\n  cmd = New OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" & _  \\n                       \\\"VALUES (pDeptNo, pDName)\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14, \\\"DName\\\")  \\n  \\n  da.InsertCommand = cmd  \\n  \\n  Return da  \\nEnd Function  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static OracleDataAdapter CreateCustomerAdapter(OracleConnection conn)  \\n{  \\n  OracleDataAdapter da = new OracleDataAdapter();  \\n  OracleCommand cmd;  \\n  \\n  // Create the SelectCommand.  \\n  \\n  cmd = new OracleCommand(\\\"SELECT * FROM Dept \\\" +  \\n                       \\\"WHERE DName = :pDName AND Loc = :pLoc\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14);  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13);  \\n  \\n  da.SelectCommand = cmd;  \\n  \\n  // Create the InsertCommand.  \\n  \\n  cmd = new OracleCommand(\\\"INSERT INTO Dept (DeptNo, DName) \\\" +  \\n                       \\\"VALUES (:pDeptNo, :pDName)\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14, \\\"DName\\\");  \\n  \\n  da.InsertCommand = cmd;  \\n  \\n  return da;  \\n}  \\n```\"\n  syntax:\n    content: public System.Data.OracleClient.OracleCommand SelectCommand { get; set; }\n    return:\n      type: System.Data.OracleClient.OracleCommand\n      description: An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> that is used during a fill operation to select records from database for placement in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OracleClient.OracleDataAdapter.SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  id: System#Data#IDbDataAdapter#DeleteCommand\n  isEii: true\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: A string representing the command.\n  overload: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  id: System#Data#IDbDataAdapter#InsertCommand\n  isEii: true\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: A string representing the command.\n  overload: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  id: System#Data#IDbDataAdapter#SelectCommand\n  isEii: true\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: A string representing the command.\n  overload: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  id: System#Data#IDbDataAdapter#UpdateCommand\n  isEii: true\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: A string representing the command.\n  overload: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: OracleDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleDataAdapter> instance is cast to an <xref:System.ICloneable> interface.\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new object that is a copy of this instance.\n  overload: System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.TerminateBatching\n  id: TerminateBatching\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: TerminateBatching()\n  nameWithType: OracleDataAdapter.TerminateBatching()\n  fullName: System.Data.OracleClient.OracleDataAdapter.TerminateBatching()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void TerminateBatching ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleDataAdapter.TerminateBatching*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize\n  id: UpdateBatchSize\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: UpdateBatchSize\n  nameWithType: OracleDataAdapter.UpdateBatchSize\n  fullName: System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.\n  remarks: \"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. This can increase application performance by reducing the number of round-trips to the server.  \\n  \\n Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before you implement your application.  \\n  \\n An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.\"\n  syntax:\n    content: public override int UpdateBatchSize { get; set; }\n    return:\n      type: System.Int32\n      description: \"The number of rows to process per batch.  \\n  \\n <table><thead><tr><th> Value:  \\n  \\n </th><th> Effect:  \\n  \\n </th></tr></thead><tbody><tr><td> 0  \\n  \\n </td><td> There is no limit on the batch size.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td> Disables batch updating.  \\n  \\n </td></tr><tr><td> &gt; 1  \\n  \\n </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.  \\n  \\n </td></tr></tbody></table>  \\n  \\n When setting this to a value other than 1 all the commands associated with the <xref href=\\\"System.Data.OracleClient.OracleDataAdapter\\\"></xref> have to have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to <xref uid=\\\"langword_csharp_None\\\" name=\\\"None\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_OutputParameters\\\" name=\\\"OutputParameters\\\" href=\\\"\\\"></xref>. An exception is thrown otherwise.\"\n  overload: System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleDataAdapter.UpdateCommand\n  id: UpdateCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  langs:\n  - csharp\n  name: UpdateCommand\n  nameWithType: OracleDataAdapter.UpdateCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets an SQL statement or stored procedure used to update records in the database.\n  remarks: \"When UpdateCommand is assigned to a previously created <xref:System.Data.OracleClient.OracleCommand>, the <xref:System.Data.OracleClient.OracleCommand> is not cloned. Instead, the UpdateCommand maintains a reference to the previously created <xref:System.Data.OracleClient.OracleCommand> object.  \\n  \\n During an update operation, if <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A> is not set and primary key information is present in the **DataSet**, you can use the <xref:System.Data.OracleClient.OracleCommandBuilder> class to automatically generate <xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A>, and additional commands needed to reconcile the <xref:System.Data.DataSet> to the database. To do this, set the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> property of the <xref:System.Data.OracleClient.OracleDataAdapter>. The generation logic also requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending upon how you set the <xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OracleClient.OracleCommand> object.  \\n  \\n When you update a column with the `LONG RAW` data type, an exception is thrown when you enter a value of `NULL` in the column. The Oracle `LONG RAW` data type is a deprecated type in Oracle version 8.0. To avoid this error, use the `BLOB` data type instead of `LONG RAW`.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleDataAdapter> and sets the <xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A> and UpdateCommand properties. It assumes you have already created an <xref:System.Data.OracleClient.OracleConnection> object.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nPublic Shared Function CreateCustomerAdapter(conn As OracleConnection) As OracleDataAdapter   \\n  \\n  Dim da As OracleDataAdapter = New OracleDataAdapter()  \\n  Dim cmd As OracleCommand  \\n  Dim parm As OracleParameter  \\n  \\n  ' Create the SelectCommand.  \\n  \\n  cmd = New OracleCommand(\\\"SELECT * FROM Dept \\\" & _  \\n                       \\\"WHERE DName = pDName AND Loc = pLoc\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14)  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13)  \\n  \\n  da.SelectCommand = cmd  \\n  \\n  ' Create the UpdateCommand.  \\n  \\n  cmd = New OracleCommand(\\\"UPDATE Dept SET DeptNo = pDeptNo, DName = pDName \\\" & _  \\n                       \\\"WHERE DeptNo = poldDeptNo\\\", conn)  \\n  \\n  cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14, \\\"DName\\\")  \\n  \\n  parm = cmd.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\")  \\n  parm.SourceVersion = DataRowVersion.Original  \\n  \\n  da.UpdateCommand = cmd  \\n  \\n  Return da  \\nEnd Function  \\n```  \\n  \\n [C#]  \\n  \\n```  \\npublic static OracleDataAdapter CreateCustomerAdapter(OracleConnection conn)  \\n{  \\n  OracleDataAdapter da = new OracleDataAdapter();  \\n  OracleCommand cmd;  \\n  OracleParameter parm;  \\n  \\n  // Create the SelectCommand.  \\n  \\n  cmd = new OracleCommand(\\\"SELECT * FROM Dept \\\" +  \\n                       \\\"WHERE DName = pDName AND Loc = pLoc\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14);  \\n  cmd.Parameters.Add(\\\"pLoc\\\", OracleType.NVarChar, 13);  \\n  \\n  da.SelectCommand = cmd;  \\n  \\n  // Create the UpdateCommand.  \\n  \\n  cmd = new OracleCommand(\\\"UPDATE Dept SET DeptNo = pDeptNo, DName = pDName \\\" +  \\n                       \\\"WHERE DeptNo = poldDeptNo\\\", conn);  \\n  \\n  cmd.Parameters.Add(\\\"pDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n  cmd.Parameters.Add(\\\"pDName\\\", OracleType.NVarChar, 14, \\\"DName\\\");  \\n  \\n  parm = cmd.Parameters.Add(\\\"poldDeptNo\\\", OracleType.Number, 2, \\\"DeptNo\\\");  \\n  parm.SourceVersion = DataRowVersion.Original;  \\n  \\n  da.UpdateCommand = cmd;  \\n  \\n  return da;  \\n}  \\n```\"\n  syntax:\n    content: public System.Data.OracleClient.OracleCommand UpdateCommand { get; set; }\n    return:\n      type: System.Data.OracleClient.OracleCommand\n      description: An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> used during an update operation to update records in the database that correspond to modified rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OracleClient.OracleDataAdapter.UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.Common.DbDataAdapter\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OracleDataAdapter()\n  nameWithType: OracleDataAdapter.OracleDataAdapter()\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter()\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor(System.Data.OracleClient.OracleCommand)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OracleDataAdapter(OracleCommand)\n  nameWithType: OracleDataAdapter.OracleDataAdapter(OracleCommand)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(OracleCommand)\n- uid: System.Data.OracleClient.OracleCommand\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleCommand\n  nameWithType: OracleCommand\n  fullName: System.Data.OracleClient.OracleCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.Data.OracleClient.OracleConnection)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OracleDataAdapter(String,OracleConnection)\n  nameWithType: OracleDataAdapter.OracleDataAdapter(String,OracleConnection)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(String,OracleConnection)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.OracleClient.OracleConnection\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleConnection\n  nameWithType: OracleConnection\n  fullName: System.Data.OracleClient.OracleConnection\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.String)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OracleDataAdapter(String,String)\n  nameWithType: OracleDataAdapter.OracleDataAdapter(String,String)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(String,String)\n- uid: System.Data.OracleClient.OracleDataAdapter.AddToBatch(System.Data.IDbCommand)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: AddToBatch(IDbCommand)\n  nameWithType: OracleDataAdapter.AddToBatch(IDbCommand)\n  fullName: System.Data.OracleClient.OracleDataAdapter.AddToBatch(IDbCommand)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.ClearBatch\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: ClearBatch()\n  nameWithType: OracleDataAdapter.ClearBatch()\n  fullName: System.Data.OracleClient.OracleDataAdapter.ClearBatch()\n- uid: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OracleDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatedEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatedEventArgs\n  nameWithType: RowUpdatedEventArgs\n  fullName: System.Data.Common.RowUpdatedEventArgs\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.StatementType\n  parent: System.Data\n  isExternal: false\n  name: StatementType\n  nameWithType: StatementType\n  fullName: System.Data.StatementType\n- uid: System.Data.Common.DataTableMapping\n  parent: System.Data.Common\n  isExternal: false\n  name: DataTableMapping\n  nameWithType: DataTableMapping\n  fullName: System.Data.Common.DataTableMapping\n- uid: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OracleDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatingEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatingEventArgs\n  nameWithType: RowUpdatingEventArgs\n  fullName: System.Data.Common.RowUpdatingEventArgs\n- uid: System.Data.OracleClient.OracleDataAdapter.DeleteCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: OracleDataAdapter.DeleteCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.DeleteCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.ExecuteBatch\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: ExecuteBatch()\n  nameWithType: OracleDataAdapter.ExecuteBatch()\n  fullName: System.Data.OracleClient.OracleDataAdapter.ExecuteBatch()\n- uid: System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: GetBatchedParameter(Int32,Int32)\n  nameWithType: OracleDataAdapter.GetBatchedParameter(Int32,Int32)\n  fullName: System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter(Int32,Int32)\n- uid: System.Data.IDataParameter\n  parent: System.Data\n  isExternal: false\n  name: IDataParameter\n  nameWithType: IDataParameter\n  fullName: System.Data.IDataParameter\n- uid: System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: GetBatchedRecordsAffected(Int32,Int32,Exception)\n  nameWithType: OracleDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  fullName: System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Data.OracleClient.OracleDataAdapter.InitializeBatching\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: InitializeBatching()\n  nameWithType: OracleDataAdapter.InitializeBatching()\n  fullName: System.Data.OracleClient.OracleDataAdapter.InitializeBatching()\n- uid: System.Data.OracleClient.OracleDataAdapter.InsertCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: OracleDataAdapter.InsertCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.InsertCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: OracleDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n- uid: System.Data.OracleClient.OracleDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: OracleDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.OracleClient.OracleDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n- uid: System.Data.OracleClient.OracleDataAdapter.RowUpdated\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: RowUpdated\n  nameWithType: OracleDataAdapter.RowUpdated\n  fullName: System.Data.OracleClient.OracleDataAdapter.RowUpdated\n- uid: System.Data.OracleClient.OracleRowUpdatedEventHandler\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleRowUpdatedEventHandler\n  nameWithType: OracleRowUpdatedEventHandler\n  fullName: System.Data.OracleClient.OracleRowUpdatedEventHandler\n- uid: System.Data.OracleClient.OracleDataAdapter.RowUpdating\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: RowUpdating\n  nameWithType: OracleDataAdapter.RowUpdating\n  fullName: System.Data.OracleClient.OracleDataAdapter.RowUpdating\n- uid: System.Data.OracleClient.OracleRowUpdatingEventHandler\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleRowUpdatingEventHandler\n  nameWithType: OracleRowUpdatingEventHandler\n  fullName: System.Data.OracleClient.OracleRowUpdatingEventHandler\n- uid: System.Data.OracleClient.OracleDataAdapter.SelectCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: OracleDataAdapter.SelectCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.SelectCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: OracleDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.OracleClient.OracleDataAdapter.System.ICloneable.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.OracleClient.OracleDataAdapter.TerminateBatching\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: TerminateBatching()\n  nameWithType: OracleDataAdapter.TerminateBatching()\n  fullName: System.Data.OracleClient.OracleDataAdapter.TerminateBatching()\n- uid: System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: UpdateBatchSize\n  nameWithType: OracleDataAdapter.UpdateBatchSize\n  fullName: System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize\n- uid: System.Data.OracleClient.OracleDataAdapter.UpdateCommand\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: OracleDataAdapter.UpdateCommand\n  fullName: System.Data.OracleClient.OracleDataAdapter.UpdateCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.#ctor*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OracleDataAdapter\n  nameWithType: OracleDataAdapter.OracleDataAdapter\n- uid: System.Data.OracleClient.OracleDataAdapter.AddToBatch*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: AddToBatch\n  nameWithType: OracleDataAdapter.AddToBatch\n- uid: System.Data.OracleClient.OracleDataAdapter.ClearBatch*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: ClearBatch\n  nameWithType: OracleDataAdapter.ClearBatch\n- uid: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatedEvent*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent\n  nameWithType: OracleDataAdapter.CreateRowUpdatedEvent\n- uid: System.Data.OracleClient.OracleDataAdapter.CreateRowUpdatingEvent*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent\n  nameWithType: OracleDataAdapter.CreateRowUpdatingEvent\n- uid: System.Data.OracleClient.OracleDataAdapter.DeleteCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: OracleDataAdapter.DeleteCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.ExecuteBatch*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: ExecuteBatch\n  nameWithType: OracleDataAdapter.ExecuteBatch\n- uid: System.Data.OracleClient.OracleDataAdapter.GetBatchedParameter*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: GetBatchedParameter\n  nameWithType: OracleDataAdapter.GetBatchedParameter\n- uid: System.Data.OracleClient.OracleDataAdapter.GetBatchedRecordsAffected*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: GetBatchedRecordsAffected\n  nameWithType: OracleDataAdapter.GetBatchedRecordsAffected\n- uid: System.Data.OracleClient.OracleDataAdapter.InitializeBatching*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: InitializeBatching\n  nameWithType: OracleDataAdapter.InitializeBatching\n- uid: System.Data.OracleClient.OracleDataAdapter.InsertCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: OracleDataAdapter.InsertCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.OnRowUpdated*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OnRowUpdated\n  nameWithType: OracleDataAdapter.OnRowUpdated\n- uid: System.Data.OracleClient.OracleDataAdapter.OnRowUpdating*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: OnRowUpdating\n  nameWithType: OracleDataAdapter.OnRowUpdating\n- uid: System.Data.OracleClient.OracleDataAdapter.SelectCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: OracleDataAdapter.SelectCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: OracleDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: OracleDataAdapter.System.ICloneable.Clone\n- uid: System.Data.OracleClient.OracleDataAdapter.TerminateBatching*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: TerminateBatching\n  nameWithType: OracleDataAdapter.TerminateBatching\n- uid: System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: UpdateBatchSize\n  nameWithType: OracleDataAdapter.UpdateBatchSize\n- uid: System.Data.OracleClient.OracleDataAdapter.UpdateCommand*\n  parent: System.Data.OracleClient.OracleDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: OracleDataAdapter.UpdateCommand\n"}