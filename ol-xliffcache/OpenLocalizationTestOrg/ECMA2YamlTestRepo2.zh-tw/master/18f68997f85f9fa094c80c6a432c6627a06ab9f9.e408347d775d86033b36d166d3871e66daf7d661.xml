{"nodes":[{"pos":[580,646],"content":"Provides access to the metadata and MSIL for the body of a method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to the metadata and MSIL for the body of a method.","pos":[0,66]}]},{"pos":[659,2229],"content":"The MethodBody class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.       You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.      > [!NOTE] >  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.       To obtain a MethodBody object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The MethodBody class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.","pos":[0,207]},{"content":"You can use the token-resolution methods of the module class, such as &lt;xref:System.Reflection.Module.ResolveType%2A&gt;, &lt;xref:System.Reflection.Module.ResolveMethod%2A&gt;, and &lt;xref:System.Reflection.Module.ResolveType%2A&gt;, to resolve the tokens in the method body to &lt;xref:System.Type&gt; objects, &lt;xref:System.Reflection.MethodInfo&gt; objects, and &lt;xref:System.Reflection.FieldInfo&gt; objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.","pos":[214,709],"source":"       You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.","pos":[715,825],"source":"      > [!NOTE] >  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats."},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[826,1012]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[1013,1309],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."},{"content":"To obtain a MethodBody object for a given method, first obtain a &lt;xref:System.Reflection.MethodInfo&gt; object for the method, then call the &lt;xref:System.Reflection.MethodInfo&gt; object's &lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt; method.","pos":[1316,1559],"source":"       To obtain a MethodBody object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method."}]},{"pos":[3972,4062],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.MethodBody\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Reflection.MethodBody\"></xref> class."},{"pos":[4074,4192],"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is invoked by derived classes during the construction of &lt;xref:System.Reflection.MethodBody&gt; objects.","pos":[0,118],"source":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects."}]},{"pos":[4736,4816],"content":"Gets a list that includes all the exception-handling clauses in the method body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a list that includes all the exception-handling clauses in the method body.","pos":[0,80]}]},{"pos":[4829,5664],"content":"The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.      > [!NOTE] >  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"nodes":[{"content":"The list includes all clauses from all try blocks in the method body.","pos":[0,69]},{"content":"Each &lt;xref:System.Reflection.ExceptionHandlingClause&gt; object contains information that identifies the try block with which it is associated.","pos":[70,210],"source":" Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.","pos":[216,344],"source":"      > [!NOTE] >  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats."},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[345,531]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[532,828],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[7833,8030],"content":"An <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IList%601<ph id=\"ph2\">&amp;gt;</ph> of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.ExceptionHandlingClause\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects representing the exception-handling clauses in the body of the method.","needQuote":true,"needEscape":true,"source":"An &lt;xref:System.Collections.Generic.IList%601&gt; of <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> objects representing the exception-handling clauses in the body of the method."},{"pos":[8490,8549],"content":"Returns the MSIL for the method body, as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the MSIL for the method body, as an array of bytes.","pos":[0,59]}]},{"pos":[8562,9666],"content":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.      > [!NOTE] >  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use the token-resolution methods of the module class, such as &lt;xref:System.Reflection.Module.ResolveType%2A&gt;, &lt;xref:System.Reflection.Module.ResolveMethod%2A&gt;, and &lt;xref:System.Reflection.Module.ResolveMember%2A&gt;, to resolve the tokens in the method body to &lt;xref:System.Type&gt; objects, &lt;xref:System.Reflection.MethodInfo&gt; objects, and &lt;xref:System.Reflection.FieldInfo&gt; objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.","pos":[0,497],"source":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.","pos":[503,613],"source":"      > [!NOTE] >  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats."},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[614,800]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[801,1097],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[9810,9889],"content":"An array of type <xref:System.Byte> that contains the MSIL for the method body.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that contains the MSIL for the method body.","pos":[0,79],"source":"An array of type <xref:System.Byte> that contains the MSIL for the method body."}]},{"pos":[10307,10428],"content":"Gets a value indicating whether local variables in the method body are initialized to the default values for their types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether local variables in the method body are initialized to the default values for their types.","pos":[0,121]}]},{"pos":[10441,10741],"content":"The InitLocals property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.       Reference variables are initialized to `null` by default. Numeric variables are initialized to zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"The InitLocals property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as <ph id=\"ph1\">`int x;`</ph> in C# or <ph id=\"ph2\">`Dim x As Integer`</ph> in Visual Basic.","pos":[0,191],"source":"The InitLocals property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic."},{"content":"Reference variables are initialized to <ph id=\"ph1\">`null`</ph> by default.","pos":[198,255],"source":"       Reference variables are initialized to `null` by default."},{"content":"Numeric variables are initialized to zero.","pos":[256,298]}]},{"pos":[11939,12272],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the method body contains code to initialize local variables to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> for reference types, or to the zero-initialized value for value types; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the method body contains code to initialize local variables to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types, or to the zero-initialized value for value types; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12769,12871],"content":"Gets a metadata token for the signature that describes the local variables for the method in metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a metadata token for the signature that describes the local variables for the method in metadata.","pos":[0,102]}]},{"pos":[12884,13510],"content":"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.      > [!NOTE] >  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Reflection.MethodBody.LocalVariables%2A&gt; property to obtain information about the method's local variables.","pos":[0,128],"source":"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[134,324],"source":"      > [!NOTE] >  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\"."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[325,621],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[13647,13693],"content":"An integer that represents the metadata token.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the metadata token.","pos":[0,46]}]},{"pos":[14142,14203],"content":"Gets the list of local variables declared in the method body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the list of local variables declared in the method body.","pos":[0,61]}]},{"pos":[14215,14375],"content":"You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"You do not need the metadata token for the local variable signature provided by the &lt;xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A&gt; property.","pos":[0,160],"source":"You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property."}]},{"pos":[16192,16361],"content":"An &lt;xref:System.Collections.Generic.IList%601&gt; of <xref:System.Reflection.LocalVariableInfo> objects that describe the local variables declared in the method body.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IList%601<ph id=\"ph2\">&amp;gt;</ph> of &lt;xref:System.Reflection.LocalVariableInfo&gt; objects that describe the local variables declared in the method body.","pos":[0,169],"source":"An &lt;xref:System.Collections.Generic.IList%601&gt; of <xref:System.Reflection.LocalVariableInfo> objects that describe the local variables declared in the method body."}]},{"pos":[16787,16870],"content":"Gets the maximum number of items on the operand stack when the method is executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the maximum number of items on the operand stack when the method is executing.","pos":[0,83]}]},{"pos":[16883,17364],"content":"For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"nodes":[{"content":"For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[0,184]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[185,481],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[18561,18639],"content":"The maximum number of items on the operand stack when the method is executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of items on the operand stack when the method is executing.","pos":[0,78]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.MethodBody\n  id: MethodBody\n  children:\n  - System.Reflection.MethodBody.#ctor\n  - System.Reflection.MethodBody.ExceptionHandlingClauses\n  - System.Reflection.MethodBody.GetILAsByteArray\n  - System.Reflection.MethodBody.InitLocals\n  - System.Reflection.MethodBody.LocalSignatureMetadataToken\n  - System.Reflection.MethodBody.LocalVariables\n  - System.Reflection.MethodBody.MaxStackSize\n  langs:\n  - csharp\n  name: MethodBody\n  nameWithType: MethodBody\n  fullName: System.Reflection.MethodBody\n  type: Class\n  summary: Provides access to the metadata and MSIL for the body of a method.\n  remarks: \"The MethodBody class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.  \\n  \\n You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \\n  \\n> [!NOTE]\\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n To obtain a MethodBody object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \\n  \\n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n [!code-cpp[MethodBody#1](~/add/codesnippet/cpp/t-system.reflection.meth_1.cpp)]\\n [!code-vb[MethodBody#1](~/add/codesnippet/visualbasic/t-system.reflection.meth_1.vb)]\\n [!code-cs[MethodBody#1](~/add/codesnippet/csharp/t-system.reflection.meth_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class MethodBody\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.#ctor\n  id: '#ctor'\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: MethodBody()\n  nameWithType: MethodBody.MethodBody()\n  fullName: System.Reflection.MethodBody.MethodBody()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.MethodBody\"></xref> class.\n  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.\n  syntax:\n    content: protected MethodBody ();\n    parameters: []\n  overload: System.Reflection.MethodBody.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.ExceptionHandlingClauses\n  id: ExceptionHandlingClauses\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: ExceptionHandlingClauses\n  nameWithType: MethodBody.ExceptionHandlingClauses\n  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets a list that includes all the exception-handling clauses in the method body.\n  remarks: \"The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.  \\n  \\n> [!NOTE]\\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_2_1.cpp)]\\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_1.vb)]\\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_2_1.cs)]  \\n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.meth_2_2.cpp)]\\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_2.vb)]\\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.meth_2_2.cs)]  \\n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_2_3.cpp)]\\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_3.vb)]\\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_2_3.cs)]  \\n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.meth_2_4.cpp)]\\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_4.vb)]\\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.meth_2_4.cs)]\"\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}\n      description: An &lt;xref:System.Collections.Generic.IList%601&gt; of <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> objects representing the exception-handling clauses in the body of the method.\n  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.GetILAsByteArray\n  id: GetILAsByteArray\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: GetILAsByteArray()\n  nameWithType: MethodBody.GetILAsByteArray()\n  fullName: System.Reflection.MethodBody.GetILAsByteArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Returns the MSIL for the method body, as an array of bytes.\n  remarks: \"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \\n  \\n> [!NOTE]\\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual byte[] GetILAsByteArray ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that contains the MSIL for the method body.\n  overload: System.Reflection.MethodBody.GetILAsByteArray*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.InitLocals\n  id: InitLocals\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: InitLocals\n  nameWithType: MethodBody.InitLocals\n  fullName: System.Reflection.MethodBody.InitLocals\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets a value indicating whether local variables in the method body are initialized to the default values for their types.\n  remarks: \"The InitLocals property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.  \\n  \\n Reference variables are initialized to `null` by default. Numeric variables are initialized to zero.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_3_1.cpp)]\\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_1.vb)]\\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_3_1.cs)]  \\n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_3_2.cpp)]\\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_2.vb)]\\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_3_2.cs)]\"\n  syntax:\n    content: public virtual bool InitLocals { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the method body contains code to initialize local variables to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types, or to the zero-initialized value for value types; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Reflection.MethodBody.InitLocals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken\n  id: LocalSignatureMetadataToken\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: LocalSignatureMetadataToken\n  nameWithType: MethodBody.LocalSignatureMetadataToken\n  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets a metadata token for the signature that describes the local variables for the method in metadata.\n  remarks: \"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.  \\n  \\n> [!NOTE]\\n>  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual int LocalSignatureMetadataToken { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents the metadata token.\n  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.LocalVariables\n  id: LocalVariables\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: LocalVariables\n  nameWithType: MethodBody.LocalVariables\n  fullName: System.Reflection.MethodBody.LocalVariables\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets the list of local variables declared in the method body.\n  remarks: You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_0_1.cpp)]\\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_1.vb)]\\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_0_1.cs)]  \\n[!code-cpp[MethodBody#3](~/add/codesnippet/cpp/p-system.reflection.meth_0_2.cpp)]\\n[!code-vb[MethodBody#3](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_2.vb)]\\n[!code-cs[MethodBody#3](~/add/codesnippet/csharp/p-system.reflection.meth_0_2.cs)]  \\n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_0_3.cpp)]\\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_3.vb)]\\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_0_3.cs)]  \\n[!code-cpp[MethodBody#6](~/add/codesnippet/cpp/p-system.reflection.meth_0_4.cpp)]\\n[!code-vb[MethodBody#6](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_4.vb)]\\n[!code-cs[MethodBody#6](~/add/codesnippet/csharp/p-system.reflection.meth_0_4.cs)]\"\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}\n      description: An &lt;xref:System.Collections.Generic.IList%601&gt; of <xref:System.Reflection.LocalVariableInfo> objects that describe the local variables declared in the method body.\n  overload: System.Reflection.MethodBody.LocalVariables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.MethodBody.MaxStackSize\n  id: MaxStackSize\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: MaxStackSize\n  nameWithType: MethodBody.MaxStackSize\n  fullName: System.Reflection.MethodBody.MaxStackSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets the maximum number of items on the operand stack when the method is executing.\n  remarks: 'For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_1_1.cpp)]\\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_1.vb)]\\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_1_1.cs)]  \\n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_1_2.cpp)]\\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_2.vb)]\\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_1_2.cs)]\"\n  syntax:\n    content: public virtual int MaxStackSize { get; }\n    return:\n      type: System.Int32\n      description: The maximum number of items on the operand stack when the method is executing.\n  overload: System.Reflection.MethodBody.MaxStackSize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Reflection.MethodBody.#ctor\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MethodBody()\n  nameWithType: MethodBody.MethodBody()\n  fullName: System.Reflection.MethodBody.MethodBody()\n- uid: System.Reflection.MethodBody.ExceptionHandlingClauses\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: ExceptionHandlingClauses\n  nameWithType: MethodBody.ExceptionHandlingClauses\n  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses\n- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<ExceptionHandlingClause>\n  nameWithType: IList<ExceptionHandlingClause>\n  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Reflection.ExceptionHandlingClause>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.ExceptionHandlingClause\n    name: ExceptionHandlingClause\n    nameWithType: ExceptionHandlingClause\n    fullName: ExceptionHandlingClause\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.MethodBody.GetILAsByteArray\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: GetILAsByteArray()\n  nameWithType: MethodBody.GetILAsByteArray()\n  fullName: System.Reflection.MethodBody.GetILAsByteArray()\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MethodBody.InitLocals\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: InitLocals\n  nameWithType: MethodBody.InitLocals\n  fullName: System.Reflection.MethodBody.InitLocals\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalSignatureMetadataToken\n  nameWithType: MethodBody.LocalSignatureMetadataToken\n  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.MethodBody.LocalVariables\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalVariables\n  nameWithType: MethodBody.LocalVariables\n  fullName: System.Reflection.MethodBody.LocalVariables\n- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<LocalVariableInfo>\n  nameWithType: IList<LocalVariableInfo>\n  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Reflection.LocalVariableInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.LocalVariableInfo\n    name: LocalVariableInfo\n    nameWithType: LocalVariableInfo\n    fullName: LocalVariableInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.MethodBody.MaxStackSize\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MaxStackSize\n  nameWithType: MethodBody.MaxStackSize\n  fullName: System.Reflection.MethodBody.MaxStackSize\n- uid: System.Reflection.MethodBody.#ctor*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MethodBody\n  nameWithType: MethodBody.MethodBody\n- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: ExceptionHandlingClauses\n  nameWithType: MethodBody.ExceptionHandlingClauses\n- uid: System.Reflection.MethodBody.GetILAsByteArray*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: GetILAsByteArray\n  nameWithType: MethodBody.GetILAsByteArray\n- uid: System.Reflection.MethodBody.InitLocals*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: InitLocals\n  nameWithType: MethodBody.InitLocals\n- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalSignatureMetadataToken\n  nameWithType: MethodBody.LocalSignatureMetadataToken\n- uid: System.Reflection.MethodBody.LocalVariables*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalVariables\n  nameWithType: MethodBody.LocalVariables\n- uid: System.Reflection.MethodBody.MaxStackSize*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MaxStackSize\n  nameWithType: MethodBody.MaxStackSize\n"}