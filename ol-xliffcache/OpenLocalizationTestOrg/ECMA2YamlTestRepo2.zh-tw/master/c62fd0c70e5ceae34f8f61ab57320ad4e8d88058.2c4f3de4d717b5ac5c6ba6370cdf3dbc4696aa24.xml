{"nodes":[{"pos":[2614,2720],"content":"Encapsulates a 3-by-3 affine matrix that represents a geometric transform. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encapsulates a 3-by-3 affine matrix that represents a geometric transform. This class cannot be inherited.","pos":[0,106],"nodes":[{"content":"Encapsulates a 3-by-3 affine matrix that represents a geometric transform.","pos":[0,74]},{"content":"This class cannot be inherited.","pos":[75,106]}]}]},{"pos":[2733,5660],"content":"In [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] you can store an affine transformation in a Matrix object. Because the third column of a matrix that represents an affine transformation is always (0, 0, 1), you specify only the six numbers in the first two columns when you construct a Matrix object. The statement `Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)` constructs the matrix shown in the following figure.       ![Transformations](~/add/media/aboutgdip05-art10.gif \"Transformations\")      ## Composite Transformations    A composite transformation is a sequence of transformations, one followed by the other. Consider the matrices and transformations in the following list:      |||   |-|-|   |Matrix A|Rotate 90 degrees|   |Matrix B|Scale by a factor of 2 in the x direction|   |Matrix C|Translate 3 units in the y direction|       If we start with the point (2, 1) — represented by the matrix [2 1 1] — and multiply by A, then B, then C, the point (2, 1) will undergo the three transformations in the order listed.       [2 1 1]ABC = [-2 5 1]       Rather than store the three parts of the composite transformation in three separate matrices, you can multiply A, B, and C together to get a single 3×3 matrix that stores the entire composite transformation. Suppose ABC = D. Then a point multiplied by D gives the same result as a point multiplied by A, then B, then C.       [2 1 1]D = [-2 5 1]       The following illustration shows the matrices A, B, C, and D.       ![Transformations](~/add/media/aboutgdip05-art12.gif \"Transformations\")       The fact that the matrix of a composite transformation can be formed by multiplying the individual transformation matrices means that any sequence of affine transformations can be stored in a single Matrix object.      > [!CAUTION] >  The order of a composite transformation is important. In general, rotate, then scale, then translate is not the same as scale, then rotate, then translate. Similarly, the order of matrix multiplication is important. In general, ABC is not the same as BAC.       The Matrix class provides several methods for building a composite transformation: <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>, <xref:System.Drawing.Drawing2D.Matrix.Rotate%2A>, <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A>, <xref:System.Drawing.Drawing2D.Matrix.Scale%2A>, <xref:System.Drawing.Drawing2D.Matrix.Shear%2A>, and <xref:System.Drawing.Drawing2D.Matrix.Translate%2A>. The following example creates the matrix of a composite transformation that first rotates 30 degrees, then scales by a factor of 2 in the y direction, and then translates 5 units in the x direction:       [!code-vb[System.Drawing.CoordinateSystems#11](~/add/codesnippet/visualbasic/t-system.drawing.drawing_10_1.vb)]  [!code-cs[System.Drawing.CoordinateSystems#11](~/add/codesnippet/csharp/t-system.drawing.drawing_10_1.cs)]","needQuote":false,"needEscape":true,"nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> you can store an affine transformation in a Matrix object.","pos":[0,123],"source":"In [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] you can store an affine transformation in a Matrix object."},{"content":"Because the third column of a matrix that represents an affine transformation is always (0, 0, 1), you specify only the six numbers in the first two columns when you construct a Matrix object.","pos":[124,316]},{"content":"The statement <ph id=\"ph1\">`Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)`</ph> constructs the matrix shown in the following figure.","pos":[317,433],"source":" The statement `Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)` constructs the matrix shown in the following figure."},{"content":"<bpt id=\"p1\">![</bpt>Transformations<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/aboutgdip05-art10.gif \"</bpt>Transformations<ept id=\"p2\">\")</ept>      ## Composite Transformations    A composite transformation is a sequence of transformations, one followed by the other.","pos":[440,636],"source":"![Transformations](~/add/media/aboutgdip05-art10.gif \"Transformations\")      ## Composite Transformations    A composite transformation is a sequence of transformations, one followed by the other."},{"content":"Consider the matrices and transformations in the following list:      |||   |-|-|   |Matrix A|Rotate 90 degrees|   |Matrix B|Scale by a factor of 2 in the x direction|   |Matrix C|Translate 3 units in the y direction|       If we start with the point (2, 1) — represented by the matrix [2 1 1] — and multiply by A, then B, then C, the point (2, 1) will undergo the three transformations in the order listed.","pos":[637,1044]},{"content":"[2 1 1]ABC = [-2 5 1]       Rather than store the three parts of the composite transformation in three separate matrices, you can multiply A, B, and C together to get a single 3×3 matrix that stores the entire composite transformation.","pos":[1051,1286]},{"content":"Suppose ABC = D. Then a point multiplied by D gives the same result as a point multiplied by A, then B, then C.       [2 1 1]D = [-2 5 1]       The following illustration shows the matrices A, B, C, and D.       <bpt id=\"p1\">![</bpt>Transformations<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/aboutgdip05-art12.gif \"</bpt>Transformations<ept id=\"p2\">\")</ept>       The fact that the matrix of a composite transformation can be formed by multiplying the individual transformation matrices means that any sequence of affine transformations can be stored in a single Matrix object.","pos":[1287,1790],"source":" Suppose ABC = D. Then a point multiplied by D gives the same result as a point multiplied by A, then B, then C.       [2 1 1]D = [-2 5 1]       The following illustration shows the matrices A, B, C, and D.       ![Transformations](~/add/media/aboutgdip05-art12.gif \"Transformations\")       The fact that the matrix of a composite transformation can be formed by multiplying the individual transformation matrices means that any sequence of affine transformations can be stored in a single Matrix object."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  The order of a composite transformation is important.","pos":[1796,1865],"source":"      > [!CAUTION] >  The order of a composite transformation is important."},{"content":"In general, rotate, then scale, then translate is not the same as scale, then rotate, then translate.","pos":[1866,1967]},{"content":"Similarly, the order of matrix multiplication is important.","pos":[1968,2027]},{"content":"In general, ABC is not the same as BAC.","pos":[2028,2067]},{"content":"The Matrix class provides several methods for building a composite transformation: &lt;xref:System.Drawing.Drawing2D.Matrix.Multiply%2A&gt;, &lt;xref:System.Drawing.Drawing2D.Matrix.Rotate%2A&gt;, &lt;xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A&gt;, &lt;xref:System.Drawing.Drawing2D.Matrix.Scale%2A&gt;, &lt;xref:System.Drawing.Drawing2D.Matrix.Shear%2A&gt;, and &lt;xref:System.Drawing.Drawing2D.Matrix.Translate%2A&gt;.","pos":[2074,2465],"source":"       The Matrix class provides several methods for building a composite transformation: <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>, <xref:System.Drawing.Drawing2D.Matrix.Rotate%2A>, <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A>, <xref:System.Drawing.Drawing2D.Matrix.Scale%2A>, <xref:System.Drawing.Drawing2D.Matrix.Shear%2A>, and <xref:System.Drawing.Drawing2D.Matrix.Translate%2A>."},{"content":"The following example creates the matrix of a composite transformation that first rotates 30 degrees, then scales by a factor of 2 in the y direction, and then translates 5 units in the x direction:       <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Drawing.CoordinateSystems#11<ept id=\"p2\">](~/add/codesnippet/visualbasic/t-system.drawing.drawing_10_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Drawing.CoordinateSystems#11<ept id=\"p4\">](~/add/codesnippet/csharp/t-system.drawing.drawing_10_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[2466,2890],"source":" The following example creates the matrix of a composite transformation that first rotates 30 degrees, then scales by a factor of 2 in the y direction, and then translates 5 units in the x direction:       [!code-vb[System.Drawing.CoordinateSystems#11](~/add/codesnippet/visualbasic/t-system.drawing.drawing_10_1.vb)]  [!code-cs[System.Drawing.CoordinateSystems#11](~/add/codesnippet/csharp/t-system.drawing.drawing_10_1.cs)]"}]},{"pos":[6439,6555],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class as the identity matrix.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class as the identity matrix."},{"pos":[7181,7356],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class to the geometric transform defined by the specified rectangle and array of points.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class to the geometric transform defined by the specified rectangle and array of points."},{"pos":[7368,7863],"content":"This method initializes the new Matrix such that it represents the geometric transform that maps the rectangle specified by the `rect` parameter to the parallelogram defined by the three points in the `plgpts` parameter. The upper-left corner of the rectangle is mapped to the first point in the `plgpts` array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point. The lower-right point of the parallelogram is implied by the first three.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method initializes the new Matrix such that it represents the geometric transform that maps the rectangle specified by the <ph id=\"ph1\">`rect`</ph> parameter to the parallelogram defined by the three points in the <ph id=\"ph2\">`plgpts`</ph> parameter.","pos":[0,220],"source":"This method initializes the new Matrix such that it represents the geometric transform that maps the rectangle specified by the `rect` parameter to the parallelogram defined by the three points in the `plgpts` parameter."},{"content":"The upper-left corner of the rectangle is mapped to the first point in the <ph id=\"ph1\">`plgpts`</ph> array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point.","pos":[221,421],"source":" The upper-left corner of the rectangle is mapped to the first point in the `plgpts` array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point."},{"content":"The lower-right point of the parallelogram is implied by the first three.","pos":[422,495]}]},{"pos":[8052,8158],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the rectangle to be transformed.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the rectangle to be transformed."},{"pos":[8230,8529],"content":"An array of three <xref href=\"System.Drawing.Point\"></xref> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed.","pos":[0,216],"source":"An array of three <xref href=\"System.Drawing.Point\"></xref> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed."},{"content":"The lower-right corner of the parallelogram is implied by the first three corners.","pos":[217,299]}]},{"pos":[9105,9280],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class to the geometric transform defined by the specified rectangle and array of points.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class to the geometric transform defined by the specified rectangle and array of points."},{"pos":[9292,9819],"content":"This method initializes the new <xref:System.Drawing.Drawing2D.Matrix> such that it represents the geometric transform that maps the rectangle specified by the `rect` parameter to the parallelogram defined by the three points in the `plgpts` parameter. The upper-left corner of the rectangle is mapped to the first point in the `plgpts` array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point. The lower-right point of the parallelogram is implied by the first three.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method initializes the new &lt;xref:System.Drawing.Drawing2D.Matrix&gt; such that it represents the geometric transform that maps the rectangle specified by the <ph id=\"ph1\">`rect`</ph> parameter to the parallelogram defined by the three points in the <ph id=\"ph2\">`plgpts`</ph> parameter.","pos":[0,252],"source":"This method initializes the new <xref:System.Drawing.Drawing2D.Matrix> such that it represents the geometric transform that maps the rectangle specified by the `rect` parameter to the parallelogram defined by the three points in the `plgpts` parameter."},{"content":"The upper-left corner of the rectangle is mapped to the first point in the <ph id=\"ph1\">`plgpts`</ph> array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point.","pos":[253,453],"source":" The upper-left corner of the rectangle is mapped to the first point in the `plgpts` array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point."},{"content":"The lower-right point of the parallelogram is implied by the first three.","pos":[454,527]}]},{"pos":[10011,10118],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the rectangle to be transformed.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the rectangle to be transformed."},{"pos":[10191,10491],"content":"An array of three <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed.","pos":[0,217],"source":"An array of three <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed."},{"content":"The lower-right corner of the parallelogram is implied by the first three corners.","pos":[218,300]}]},{"pos":[11201,11322],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified elements.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class with the specified elements."},{"pos":[11501,11609],"content":"The value in the first row and first column of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value in the first row and first column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[11669,11778],"content":"The value in the first row and second column of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value in the first row and second column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[11838,11947],"content":"The value in the second row and first column of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value in the second row and first column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[12007,12117],"content":"The value in the second row and second column of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value in the second row and second column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[12176,12284],"content":"The value in the third row and first column of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value in the third row and first column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[12343,12452],"content":"The value in the third row and second column of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value in the third row and second column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[12859,12942],"content":"Creates an exact copy of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an exact copy of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[13109,13191],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that this method creates.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that this method creates."},{"pos":[13608,13697],"content":"Releases all resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[13709,13844],"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by this &lt;xref:System.Drawing.Drawing2D.Matrix&gt; object to be reallocated for other purposes.","needQuote":true,"needEscape":true,"source":"Calling `Dispose` allows the resources used by this <xref:System.Drawing.Drawing2D.Matrix> object to be reallocated for other purposes."},{"pos":[14330,14459],"content":"Gets an array of floating-point values that represents the elements of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an array of floating-point values that represents the elements of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[14471,14618],"content":"The elements m11, m12, m21, m22, dx, and dy of the <xref:System.Drawing.Drawing2D.Matrix> are represented by the values in the array in that order.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elements m11, m12, m21, m22, dx, and dy of the &lt;xref:System.Drawing.Drawing2D.Matrix&gt; are represented by the values in the array in that order.","pos":[0,147],"source":"The elements m11, m12, m21, m22, dx, and dy of the <xref:System.Drawing.Drawing2D.Matrix> are represented by the values in the array in that order."}]},{"pos":[14734,14858],"content":"An array of floating-point values that represents the elements of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of floating-point values that represents the elements of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[15321,15492],"content":"Tests whether the specified object is a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and is identical to this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Tests whether the specified object is a <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> and is identical to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[15633,15652],"content":"The object to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to test.","pos":[0,19]}]},{"pos":[15711,16028],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> identical to this <bpt id=\"p4\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> identical to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16451,16575],"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","pos":[0,124]}]},{"pos":[17069,17089],"content":"Returns a hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a hash code.","pos":[0,20]}]},{"pos":[17224,17300],"content":"The hash code for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The hash code for this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[17718,17805],"content":"Inverts this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if it is invertible.","needQuote":true,"needEscape":true,"source":"Inverts this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>, if it is invertible."},{"pos":[18484,18597],"content":"Gets a value indicating whether this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is the identity matrix.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is the identity matrix."},{"pos":[18711,18937],"content":"This property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is identity; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is identity; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19380,19484],"content":"Gets a value indicating whether this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invertible.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is invertible."},{"pos":[19600,19828],"content":"This property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is invertible; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is invertible; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20341,20553],"content":"Multiplies this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by the matrix specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">matrix</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, by prepending the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Multiplies this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by the matrix specified in the <code>matrix</code> parameter, by prepending the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[20837,20981],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by which this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is to be multiplied.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is to be multiplied."},{"pos":[21600,21794],"content":"Multiplies this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by the matrix specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">matrix</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, and in the order specified in the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">order</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Multiplies this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by the matrix specified in the <code>matrix</code> parameter, and in the order specified in the <code>order</code> parameter."},{"pos":[21806,22155],"content":"If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in a prepended order. If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in an appended order.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in a prepended order. If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in an appended order.","pos":[0,349],"nodes":[{"content":"If the specified order is &lt;xref:System.Drawing.Drawing2D.MatrixOrder&gt;, this &lt;xref:System.Drawing.Drawing2D.Matrix&gt; is multiplied by the specified matrix in a prepended order.","pos":[0,174],"source":"If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in a prepended order."},{"content":"If the specified order is &lt;xref:System.Drawing.Drawing2D.MatrixOrder&gt;, this &lt;xref:System.Drawing.Drawing2D.Matrix&gt; is multiplied by the specified matrix in an appended order.","pos":[175,349],"source":" If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in an appended order."}]}]},{"pos":[23894,24038],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by which this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is to be multiplied.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is to be multiplied."},{"pos":[24123,24233],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the order of the multiplication.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that represents the order of the multiplication."},{"pos":[24649,24804],"content":"Gets the x translation value (the dx value, or the element in the third row and first column) of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the x translation value (the dx value, or the element in the third row and first column) of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[24915,25000],"content":"The x translation value of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The x translation value of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[25415,25571],"content":"Gets the y translation value (the dy value, or the element in the third row and second column) of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the y translation value (the dy value, or the element in the third row and second column) of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[25682,25767],"content":"The y translation value of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The y translation value of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[26176,26285],"content":"Resets this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to have the elements of the identity matrix.","needQuote":true,"needEscape":true,"source":"Resets this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to have the elements of the identity matrix."},{"pos":[26297,26409],"content":"The elements on the main diagonal of the identity matrix are 1. All other elements of the identity matrix are 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elements on the main diagonal of the identity matrix are 1. All other elements of the identity matrix are 0.","pos":[0,112],"nodes":[{"content":"The elements on the main diagonal of the identity matrix are 1.","pos":[0,63]},{"content":"All other elements of the identity matrix are 0.","pos":[64,112]}]}]},{"pos":[28314,28450],"content":"Prepend to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> a clockwise rotation, around the origin and by the specified angle.","needQuote":true,"needEscape":true,"source":"Prepend to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> a clockwise rotation, around the origin and by the specified angle."},{"pos":[28739,28777],"content":"The angle of the rotation, in degrees.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle of the rotation, in degrees.","pos":[0,38]}]},{"pos":[29348,29544],"content":"Applies a clockwise rotation of an amount specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">angle</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, around the origin (zero x and y coordinates) for this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies a clockwise rotation of an amount specified in the <code>angle</code> parameter, around the origin (zero x and y coordinates) for this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[30738,30785],"content":"The angle (extent) of the rotation, in degrees.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle (extent) of the rotation, in degrees.","pos":[0,47]}]},{"pos":[30870,31069],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the order (append or prepend) in which the rotation is applied to this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the rotation is applied to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[31605,31790],"content":"Applies a clockwise rotation to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> around the point specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, and by prepending the rotation.","needQuote":true,"needEscape":true,"source":"Applies a clockwise rotation to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> around the point specified in the <code>point</code> parameter, and by prepending the rotation."},{"pos":[32773,32820],"content":"The angle (extent) of the rotation, in degrees.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle (extent) of the rotation, in degrees.","pos":[0,47]}]},{"pos":[32890,32978],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the center of the rotation.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the center of the rotation."},{"pos":[33626,33765],"content":"Applies a clockwise rotation about the specified point to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Applies a clockwise rotation about the specified point to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order."},{"pos":[35085,35123],"content":"The angle of the rotation, in degrees.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle of the rotation, in degrees.","pos":[0,38]}]},{"pos":[35193,35281],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the center of the rotation.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the center of the rotation."},{"pos":[35366,35504],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the order (append or prepend) in which the rotation is applied.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the rotation is applied."},{"pos":[36011,36138],"content":"Applies the specified scale vector to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by prepending the scale vector.","needQuote":true,"needEscape":true,"source":"Applies the specified scale vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by prepending the scale vector."},{"pos":[36457,36567],"content":"The value by which to scale this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the x-axis direction.","needQuote":true,"needEscape":true,"source":"The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the x-axis direction."},{"pos":[36630,36740],"content":"The value by which to scale this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the y-axis direction.","needQuote":true,"needEscape":true,"source":"The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the y-axis direction."},{"pos":[37354,37522],"content":"Applies the specified scale vector (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scaleX</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scaleY</ph><ept id=\"p2\">&lt;/code&gt;</ept>) to this <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> using the specified order.","needQuote":true,"needEscape":true,"source":"Applies the specified scale vector (<code>scaleX</code> and <code>scaleY</code>) to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> using the specified order."},{"pos":[38869,38979],"content":"The value by which to scale this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the x-axis direction.","needQuote":true,"needEscape":true,"source":"The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the x-axis direction."},{"pos":[39042,39152],"content":"The value by which to scale this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the y-axis direction.","needQuote":true,"needEscape":true,"source":"The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the y-axis direction."},{"pos":[39237,39440],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the order (append or prepend) in which the scale vector is applied to this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the scale vector is applied to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[39944,40079],"content":"Applies the specified shear vector to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by prepending the shear transformation.","needQuote":true,"needEscape":true,"source":"Applies the specified shear vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by prepending the shear transformation."},{"pos":[40091,40696],"content":"The transformation applied in this method is a pure shear only if one of the parameters is 0. Applied to a rectangle at the origin, when the `shearY` factor is 0, the transformation moves the bottom edge horizontally by `shearX` times the height of the rectangle. When the `shearX` factor is 0, it moves the right edge vertically by `shearY` times the width of the rectangle. Caution is in order when both parameters are nonzero, because the results are hard to predict. For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformation applied in this method is a pure shear only if one of the parameters is 0.","pos":[0,93]},{"content":"Applied to a rectangle at the origin, when the <ph id=\"ph1\">`shearY`</ph> factor is 0, the transformation moves the bottom edge horizontally by <ph id=\"ph2\">`shearX`</ph> times the height of the rectangle.","pos":[94,263],"source":" Applied to a rectangle at the origin, when the `shearY` factor is 0, the transformation moves the bottom edge horizontally by `shearX` times the height of the rectangle."},{"content":"When the <ph id=\"ph1\">`shearX`</ph> factor is 0, it moves the right edge vertically by <ph id=\"ph2\">`shearY`</ph> times the width of the rectangle.","pos":[264,375],"source":" When the `shearX` factor is 0, it moves the right edge vertically by `shearY` times the width of the rectangle."},{"content":"Caution is in order when both parameters are nonzero, because the results are hard to predict.","pos":[376,470]},{"content":"For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.","pos":[471,605]}]},{"pos":[42424,42452],"content":"The horizontal shear factor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The horizontal shear factor.","pos":[0,28]}]},{"pos":[42515,42541],"content":"The vertical shear factor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vertical shear factor.","pos":[0,26]}]},{"pos":[43155,43274],"content":"Applies the specified shear vector to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Applies the specified shear vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order."},{"pos":[43286,43891],"content":"The transformation applied in this method is a pure shear only if one of the parameters is 0. Applied to a rectangle at the origin, when the `shearY` factor is 0, the transformation moves the bottom edge horizontally by `shearX` times the height of the rectangle. When the `shearX` factor is 0, it moves the right edge vertically by `shearY` times the width of the rectangle. Caution is in order when both parameters are nonzero, because the results are hard to predict. For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformation applied in this method is a pure shear only if one of the parameters is 0.","pos":[0,93]},{"content":"Applied to a rectangle at the origin, when the <ph id=\"ph1\">`shearY`</ph> factor is 0, the transformation moves the bottom edge horizontally by <ph id=\"ph2\">`shearX`</ph> times the height of the rectangle.","pos":[94,263],"source":" Applied to a rectangle at the origin, when the `shearY` factor is 0, the transformation moves the bottom edge horizontally by `shearX` times the height of the rectangle."},{"content":"When the <ph id=\"ph1\">`shearX`</ph> factor is 0, it moves the right edge vertically by <ph id=\"ph2\">`shearY`</ph> times the width of the rectangle.","pos":[264,375],"source":" When the `shearX` factor is 0, it moves the right edge vertically by `shearY` times the width of the rectangle."},{"content":"Caution is in order when both parameters are nonzero, because the results are hard to predict.","pos":[376,470]},{"content":"For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.","pos":[471,605]}]},{"pos":[44201,44229],"content":"The horizontal shear factor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The horizontal shear factor.","pos":[0,28]}]},{"pos":[44292,44318],"content":"The vertical shear factor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vertical shear factor.","pos":[0,26]}]},{"pos":[44403,44538],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the order (append or prepend) in which the shear is applied.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the shear is applied."},{"pos":[45064,45200],"content":"Applies the geometric transform represented by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a specified array of points.","needQuote":true,"needEscape":true,"source":"Applies the geometric transform represented by this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to a specified array of points."},{"pos":[46598,46703],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points to transform.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform."},{"pos":[47244,47380],"content":"Applies the geometric transform represented by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a specified array of points.","needQuote":true,"needEscape":true,"source":"Applies the geometric transform represented by this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to a specified array of points."},{"pos":[47749,47855],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points to transform.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points to transform."},{"pos":[48396,48535],"content":"Applies only the scale and rotate components of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified array of points.","needQuote":true,"needEscape":true,"source":"Applies only the scale and rotate components of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to the specified array of points."},{"pos":[50103,50208],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points to transform.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform."},{"pos":[50755,50869],"content":"Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.","pos":[0,114],"nodes":[{"content":"Multiplies each vector in an array by the matrix.","pos":[0,49]},{"content":"The translation elements of this matrix (third row) are ignored.","pos":[50,114]}]}]},{"pos":[51241,51346],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points to transform.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform."},{"pos":[51881,52068],"content":"Applies the specified translation vector (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offsetX</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offsetY</ph><ept id=\"p2\">&lt;/code&gt;</ept>) to this <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> by prepending the translation vector.","needQuote":true,"needEscape":true,"source":"Applies the specified translation vector (<code>offsetX</code> and <code>offsetY</code>) to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by prepending the translation vector."},{"pos":[52398,52490],"content":"The x value by which to translate this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The x value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[52554,52646],"content":"The y value by which to translate this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The y value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[53284,53409],"content":"Applies the specified translation vector to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Applies the specified translation vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order."},{"pos":[54678,54770],"content":"The x value by which to translate this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The x value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[54834,54926],"content":"The y value by which to translate this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The y value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[55011,55213],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the order (append or prepend) in which the translation is applied to this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the translation is applied to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[55773,55887],"content":"Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.","pos":[0,114],"nodes":[{"content":"Multiplies each vector in an array by the matrix.","pos":[0,49]},{"content":"The translation elements of this matrix (third row) are ignored.","pos":[50,114]}]}]},{"pos":[56059,56164],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points to transform.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Drawing2D.Matrix\n  id: Matrix\n  children:\n  - System.Drawing.Drawing2D.Matrix.#ctor\n  - System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])\n  - System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Drawing2D.Matrix.Clone\n  - System.Drawing.Drawing2D.Matrix.Dispose\n  - System.Drawing.Drawing2D.Matrix.Elements\n  - System.Drawing.Drawing2D.Matrix.Equals(System.Object)\n  - System.Drawing.Drawing2D.Matrix.Finalize\n  - System.Drawing.Drawing2D.Matrix.GetHashCode\n  - System.Drawing.Drawing2D.Matrix.Invert\n  - System.Drawing.Drawing2D.Matrix.IsIdentity\n  - System.Drawing.Drawing2D.Matrix.IsInvertible\n  - System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Drawing2D.Matrix.OffsetX\n  - System.Drawing.Drawing2D.Matrix.OffsetY\n  - System.Drawing.Drawing2D.Matrix.Reset\n  - System.Drawing.Drawing2D.Matrix.Rotate(System.Single)\n  - System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)\n  - System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)\n  - System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)\n  - System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)\n  - System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])\n  langs:\n  - csharp\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Drawing.Drawing2D.Matrix\n  type: Class\n  summary: Encapsulates a 3-by-3 affine matrix that represents a geometric transform. This class cannot be inherited.\n  remarks: \"In [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] you can store an affine transformation in a Matrix object. Because the third column of a matrix that represents an affine transformation is always (0, 0, 1), you specify only the six numbers in the first two columns when you construct a Matrix object. The statement `Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)` constructs the matrix shown in the following figure.  \\n  \\n ![Transformations](~/add/media/aboutgdip05-art10.gif \\\"Transformations\\\")  \\n  \\n## Composite Transformations  \\n A composite transformation is a sequence of transformations, one followed by the other. Consider the matrices and transformations in the following list:  \\n  \\n|||  \\n|-|-|  \\n|Matrix A|Rotate 90 degrees|  \\n|Matrix B|Scale by a factor of 2 in the x direction|  \\n|Matrix C|Translate 3 units in the y direction|  \\n  \\n If we start with the point (2, 1) — represented by the matrix [2 1 1] — and multiply by A, then B, then C, the point (2, 1) will undergo the three transformations in the order listed.  \\n  \\n [2 1 1]ABC = [-2 5 1]  \\n  \\n Rather than store the three parts of the composite transformation in three separate matrices, you can multiply A, B, and C together to get a single 3×3 matrix that stores the entire composite transformation. Suppose ABC = D. Then a point multiplied by D gives the same result as a point multiplied by A, then B, then C.  \\n  \\n [2 1 1]D = [-2 5 1]  \\n  \\n The following illustration shows the matrices A, B, C, and D.  \\n  \\n ![Transformations](~/add/media/aboutgdip05-art12.gif \\\"Transformations\\\")  \\n  \\n The fact that the matrix of a composite transformation can be formed by multiplying the individual transformation matrices means that any sequence of affine transformations can be stored in a single Matrix object.  \\n  \\n> [!CAUTION]\\n>  The order of a composite transformation is important. In general, rotate, then scale, then translate is not the same as scale, then rotate, then translate. Similarly, the order of matrix multiplication is important. In general, ABC is not the same as BAC.  \\n  \\n The Matrix class provides several methods for building a composite transformation: <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>, <xref:System.Drawing.Drawing2D.Matrix.Rotate%2A>, <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A>, <xref:System.Drawing.Drawing2D.Matrix.Scale%2A>, <xref:System.Drawing.Drawing2D.Matrix.Shear%2A>, and <xref:System.Drawing.Drawing2D.Matrix.Translate%2A>. The following example creates the matrix of a composite transformation that first rotates 30 degrees, then scales by a factor of 2 in the y direction, and then translates 5 units in the x direction:  \\n  \\n [!code-vb[System.Drawing.CoordinateSystems#11](~/add/codesnippet/visualbasic/t-system.drawing.drawing_10_1.vb)]\\n [!code-cs[System.Drawing.CoordinateSystems#11](~/add/codesnippet/csharp/t-system.drawing.drawing_10_1.cs)]\"\n  syntax:\n    content: 'public sealed class Matrix : MarshalByRefObject, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.#ctor\n  id: '#ctor'\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Matrix()\n  nameWithType: Matrix.Matrix()\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix()\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class as the identity matrix.\n  syntax:\n    content: public Matrix ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.Matrix.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])\n  id: '#ctor(System.Drawing.Rectangle,System.Drawing.Point[])'\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Matrix(Rectangle,Point[])\n  nameWithType: Matrix.Matrix(Rectangle,Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Rectangle,Point[])\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class to the geometric transform defined by the specified rectangle and array of points.\n  remarks: This method initializes the new Matrix such that it represents the geometric transform that maps the rectangle specified by the `rect` parameter to the parallelogram defined by the three points in the `plgpts` parameter. The upper-left corner of the rectangle is mapped to the first point in the `plgpts` array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point. The lower-right point of the parallelogram is implied by the first three.\n  syntax:\n    content: public Matrix (System.Drawing.Rectangle rect, System.Drawing.Point[] plgpts);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the rectangle to be transformed.\n    - id: plgpts\n      type: System.Drawing.Point[]\n      description: An array of three <xref href=\"System.Drawing.Point\"></xref> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners.\n  overload: System.Drawing.Drawing2D.Matrix.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])\n  id: '#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])'\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Matrix(RectangleF,PointF[])\n  nameWithType: Matrix.Matrix(RectangleF,PointF[])\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix(RectangleF,PointF[])\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class to the geometric transform defined by the specified rectangle and array of points.\n  remarks: This method initializes the new <xref:System.Drawing.Drawing2D.Matrix> such that it represents the geometric transform that maps the rectangle specified by the `rect` parameter to the parallelogram defined by the three points in the `plgpts` parameter. The upper-left corner of the rectangle is mapped to the first point in the `plgpts` array, the upper-right corner is mapped to the second point, and the lower-left corner is mapped to the third point. The lower-right point of the parallelogram is implied by the first three.\n  syntax:\n    content: public Matrix (System.Drawing.RectangleF rect, System.Drawing.PointF[] plgpts);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the rectangle to be transformed.\n    - id: plgpts\n      type: System.Drawing.PointF[]\n      description: An array of three <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners.\n  overload: System.Drawing.Drawing2D.Matrix.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)'\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Matrix(Single,Single,Single,Single,Single,Single)\n  nameWithType: Matrix.Matrix(Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Single,Single,Single,Single,Single,Single)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> class with the specified elements.\n  syntax:\n    content: public Matrix (float m11, float m12, float m21, float m22, float dx, float dy);\n    parameters:\n    - id: m11\n      type: System.Single\n      description: The value in the first row and first column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: m12\n      type: System.Single\n      description: The value in the first row and second column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: m21\n      type: System.Single\n      description: The value in the second row and first column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: m22\n      type: System.Single\n      description: The value in the second row and second column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: dx\n      type: System.Single\n      description: The value in the third row and first column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: dy\n      type: System.Single\n      description: The value in the third row and second column of the new <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Clone\n  id: Clone\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Matrix.Clone()\n  fullName: System.Drawing.Drawing2D.Matrix.Clone()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Creates an exact copy of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  syntax:\n    content: public System.Drawing.Drawing2D.Matrix Clone ();\n    parameters: []\n    return:\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that this method creates.\n  overload: System.Drawing.Drawing2D.Matrix.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Dispose\n  id: Dispose\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Matrix.Dispose()\n  fullName: System.Drawing.Drawing2D.Matrix.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: Calling `Dispose` allows the resources used by this <xref:System.Drawing.Drawing2D.Matrix> object to be reallocated for other purposes.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.Matrix.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Elements\n  id: Elements\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Elements\n  nameWithType: Matrix.Elements\n  fullName: System.Drawing.Drawing2D.Matrix.Elements\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets an array of floating-point values that represents the elements of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: The elements m11, m12, m21, m22, dx, and dy of the <xref:System.Drawing.Drawing2D.Matrix> are represented by the values in the array in that order.\n  syntax:\n    content: public float[] Elements { get; }\n    return:\n      type: System.Single[]\n      description: An array of floating-point values that represents the elements of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.Elements*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Matrix.Equals(Object)\n  fullName: System.Drawing.Drawing2D.Matrix.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Tests whether the specified object is a <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> and is identical to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> identical to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Finalize\n  id: Finalize\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: Matrix.Finalize()\n  fullName: System.Drawing.Drawing2D.Matrix.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.\n  syntax:\n    content: ~Matrix ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.Matrix.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.GetHashCode\n  id: GetHashCode\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Matrix.GetHashCode()\n  fullName: System.Drawing.Drawing2D.Matrix.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Returns a hash code.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Invert\n  id: Invert\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Invert()\n  nameWithType: Matrix.Invert()\n  fullName: System.Drawing.Drawing2D.Matrix.Invert()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Inverts this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>, if it is invertible.\n  remarks: ''\n  example:\n  - \"The following code example creates a matrix and inverts it:  \\n  \\n```c#  \\nMatrix myMatrix = new Matrix(3, 5, 1, 2, 2, 4);  \\n myMatrix.Invert();  \\n```\"\n  syntax:\n    content: public void Invert ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.Matrix.Invert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.IsIdentity\n  id: IsIdentity\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: IsIdentity\n  nameWithType: Matrix.IsIdentity\n  fullName: System.Drawing.Drawing2D.Matrix.IsIdentity\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets a value indicating whether this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is the identity matrix.\n  syntax:\n    content: public bool IsIdentity { get; }\n    return:\n      type: System.Boolean\n      description: This property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is identity; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.IsIdentity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.IsInvertible\n  id: IsInvertible\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: IsInvertible\n  nameWithType: Matrix.IsInvertible\n  fullName: System.Drawing.Drawing2D.Matrix.IsInvertible\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets a value indicating whether this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is invertible.\n  syntax:\n    content: public bool IsInvertible { get; }\n    return:\n      type: System.Boolean\n      description: This property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is invertible; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.IsInvertible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)\n  id: Multiply(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Multiply(Matrix)\n  nameWithType: Matrix.Multiply(Matrix)\n  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Multiplies this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by the matrix specified in the <code>matrix</code> parameter, by prepending the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>.\n  syntax:\n    content: public void Multiply (System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is to be multiplied.\n  overload: System.Drawing.Drawing2D.Matrix.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  id: Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Multiply(Matrix,MatrixOrder)\n  nameWithType: Matrix.Multiply(Matrix,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Multiplies this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by the matrix specified in the <code>matrix</code> parameter, and in the order specified in the <code>order</code> parameter.\n  remarks: If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in a prepended order. If the specified order is <xref:System.Drawing.Drawing2D.MatrixOrder>, this <xref:System.Drawing.Drawing2D.Matrix> is multiplied by the specified matrix in an appended order.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Creates three matrices.  \\n  \\n-   Lists the contents of matrix 1 to the screen.  \\n  \\n-   Multiplies matrix 1 by matrix 2 and stores the result in matrix 1.  \\n  \\n-   Lists the contents of matrix 1 to the screen.  \\n  \\n-   Multiplies the result stored in matrix 1 by matrix 3, and again stores the result in matrix 1.  \\n  \\n-   Lists the contents of matrix 1 to the screen.  \\n  \\n-   Draws a rectangle to the screen prior to applying the matrix 1 transform (the blue rectangle).  \\n  \\n-   Applies the transform to the rectangle.  \\n  \\n-   Draws the transformed rectangle to the screen (the red rectangle), using the same coordinates as the previous rectangle.  \\n  \\n Notice that the red rectangle has been scaled by a factor of two in the horizontal direction, then rotated 90 degrees, and then moved (translated) 250 points in the x direction and 50 points in the y direction.  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/cpp/8671b24d-b76c-4435-bbb4-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/visualbasic/8671b24d-b76c-4435-bbb4-_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/csharp/8671b24d-b76c-4435-bbb4-_1.cs)]\"\n  syntax:\n    content: public void Multiply (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> is to be multiplied.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: The <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that represents the order of the multiplication.\n  overload: System.Drawing.Drawing2D.Matrix.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.OffsetX\n  id: OffsetX\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: OffsetX\n  nameWithType: Matrix.OffsetX\n  fullName: System.Drawing.Drawing2D.Matrix.OffsetX\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the x translation value (the dx value, or the element in the third row and first column) of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  syntax:\n    content: public float OffsetX { get; }\n    return:\n      type: System.Single\n      description: The x translation value of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.OffsetX*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.OffsetY\n  id: OffsetY\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: OffsetY\n  nameWithType: Matrix.OffsetY\n  fullName: System.Drawing.Drawing2D.Matrix.OffsetY\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the y translation value (the dy value, or the element in the third row and second column) of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  syntax:\n    content: public float OffsetY { get; }\n    return:\n      type: System.Single\n      description: The y translation value of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.OffsetY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Reset\n  id: Reset\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: Matrix.Reset()\n  fullName: System.Drawing.Drawing2D.Matrix.Reset()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Resets this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to have the elements of the identity matrix.\n  remarks: The elements on the main diagonal of the identity matrix are 1. All other elements of the identity matrix are 0.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Creates a scaling matrix.  \\n  \\n-   Lists the matrix elements to the screen.  \\n  \\n-   Resets the matrix to identity.  \\n  \\n-   Lists the elements to the screen.  \\n  \\n-   Translates the matrix by 50 points in the x-axis and 40 points in the y-axis.  \\n  \\n-   Lists the elements of the translated matrix to the screen.  \\n  \\n-   Draws a rectangle is drawn to the screen prior to applying the matrix transform (the blue rectangle).  \\n  \\n-   Applies the transform to the rectangle.  \\n  \\n-   Draws the transformed rectangle is drawn to the screen (the red rectangle), using the same coordinates as the previous rectangle.  \\n  \\n Notice that the red rectangle was not scaled (because of the reset) but was translated in the x-axis and y-axis.  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/cpp/m-system.drawing.drawing_5_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.drawing_5_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/csharp/m-system.drawing.drawing_5_1.cs)]\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.Matrix.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single)\n  id: Rotate(System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Rotate(Single)\n  nameWithType: Matrix.Rotate(Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Prepend to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> a clockwise rotation, around the origin and by the specified angle.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Rotate%28System.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.\n  syntax:\n    content: public void Rotate (float angle);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: The angle of the rotation, in degrees.\n  overload: System.Drawing.Drawing2D.Matrix.Rotate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Rotate(Single,MatrixOrder)\n  nameWithType: Matrix.Rotate(Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a clockwise rotation of an amount specified in the <code>angle</code> parameter, around the origin (zero x and y coordinates) for this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).  \\n  \\n-   Creates a matrix and rotates it 45 degrees.  \\n  \\n-   Applies this matrix transform to the rectangle.  \\n  \\n-   Draws the transformed rectangle to the screen (the red rectangle).  \\n  \\n Notice that the red rectangle has been rotated around the 0, 0 screen coordinates.  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/cpp/4dc64a49-8a71-40e5-a40b-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/visualbasic/4dc64a49-8a71-40e5-a40b-_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/csharp/4dc64a49-8a71-40e5-a40b-_1.cs)]\"\n  syntax:\n    content: public void Rotate (float angle, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: The angle (extent) of the rotation, in degrees.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the rotation is applied to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.Rotate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)\n  id: RotateAt(System.Single,System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: RotateAt(Single,PointF)\n  nameWithType: Matrix.RotateAt(Single,PointF)\n  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a clockwise rotation to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> around the point specified in the <code>point</code> parameter, and by prepending the rotation.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates using a <xref:System.Drawing.Drawing2D.Matrix> and the <xref:System.Drawing.Drawing2D.GraphicsPath.Transform%2A> method to rotate a string. This example is designed to be used with Windows Forms. Create a form and paste the following code into it. Call the `DrawVerticalStringFromBottomUp` method in the form's <xref:System.Windows.Forms.Control.Paint> event handler, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.MiscExamples#5](~/add/codesnippet/csharp/m-system.drawing.drawing_11_1.cs)]\\n [!code-cpp[System.Drawing.MiscExamples#5](~/add/codesnippet/cpp/m-system.drawing.drawing_11_1.cpp)]\\n [!code-vb[System.Drawing.MiscExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.drawing_11_1.vb)]\"\n  syntax:\n    content: public void RotateAt (float angle, System.Drawing.PointF point);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: The angle (extent) of the rotation, in degrees.\n    - id: point\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the center of the rotation.\n  overload: System.Drawing.Drawing2D.Matrix.RotateAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)\n  id: RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: RotateAt(Single,PointF,MatrixOrder)\n  nameWithType: Matrix.RotateAt(Single,PointF,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a clockwise rotation about the specified point to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).  \\n  \\n-   Creates a matrix and rotates it 45 degrees around a specified point.  \\n  \\n-   Applies this matrix transform is to the rectangle.  \\n  \\n-   Draws the transformed rectangle to the screen (the red rectangle).  \\n  \\n Notice that the red rectangle has been rotated around the upper left-hand corner of the rectangle (the rotation point specified the RotateAt method).  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/cpp/fc8aec2b-1f13-41da-9f14-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/visualbasic/fc8aec2b-1f13-41da-9f14-_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/csharp/fc8aec2b-1f13-41da-9f14-_1.cs)]\"\n  syntax:\n    content: public void RotateAt (float angle, System.Drawing.PointF point, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: The angle of the rotation, in degrees.\n    - id: point\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the center of the rotation.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the rotation is applied.\n  overload: System.Drawing.Drawing2D.Matrix.RotateAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)\n  id: Scale(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Scale(Single,Single)\n  nameWithType: Matrix.Scale(Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified scale vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by prepending the scale vector.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Scale%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.\n  syntax:\n    content: public void Scale (float scaleX, float scaleY);\n    parameters:\n    - id: scaleX\n      type: System.Single\n      description: The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the x-axis direction.\n    - id: scaleY\n      type: System.Single\n      description: The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the y-axis direction.\n  overload: System.Drawing.Drawing2D.Matrix.Scale*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Scale(Single,Single,MatrixOrder)\n  nameWithType: Matrix.Scale(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified scale vector (<code>scaleX</code> and <code>scaleY</code>) to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> using the specified order.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Draws a rectangle to the screen prior to applying a scaling transform (the blue rectangle).  \\n  \\n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.  \\n  \\n-   Applies this matrix transform to the rectangle.  \\n  \\n-   Draws the transformed rectangle to the screen (the red rectangle).  \\n  \\n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/cpp/05985bb7-69b2-4fd4-9c7f-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/visualbasic/05985bb7-69b2-4fd4-9c7f-_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/csharp/05985bb7-69b2-4fd4-9c7f-_1.cs)]\"\n  syntax:\n    content: public void Scale (float scaleX, float scaleY, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: scaleX\n      type: System.Single\n      description: The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the x-axis direction.\n    - id: scaleY\n      type: System.Single\n      description: The value by which to scale this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the y-axis direction.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the scale vector is applied to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.Scale*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)\n  id: Shear(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Shear(Single,Single)\n  nameWithType: Matrix.Shear(Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified shear vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by prepending the shear transformation.\n  remarks: The transformation applied in this method is a pure shear only if one of the parameters is 0. Applied to a rectangle at the origin, when the `shearY` factor is 0, the transformation moves the bottom edge horizontally by `shearX` times the height of the rectangle. When the `shearX` factor is 0, it moves the right edge vertically by `shearY` times the width of the rectangle. Caution is in order when both parameters are nonzero, because the results are hard to predict. For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following action:  \\n  \\n-   Draws a rectangle to the screen, using a green pen, prior to applying a scaling transform.  \\n  \\n-   Creates a <xref:System.Drawing.Drawing2D.Matrix> and uses it to set a world-coordinate transform for the <xref:System.Drawing.Graphics>.  \\n  \\n-   Draws another rectangle using a red pen.  \\n  \\n-   Draws an ellipse using a blue pen.  \\n  \\n The result is a green rectangle, a red parallelogram and a transformed, blue ellipse. Notice that the green rectangle (drawn prior to setting the transform) directly uses the coordinates supplied in the <xref:System.Drawing.Graphics.DrawRectangle%2A> call. The other two figures are transformed prior to drawing. The rectangle is transformed to a parallelogram (red), and the ellipse (blue) is transformed to fit into the transformed parallelogram. Notice the bottom of the rectangle is moved (sheared) in the x-axis by a factor of two times the height of the rectangle, thus forming the parallelogram.  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/cpp/m-system.drawing.drawing_3_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.drawing_3_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/csharp/m-system.drawing.drawing_3_1.cs)]\"\n  syntax:\n    content: public void Shear (float shearX, float shearY);\n    parameters:\n    - id: shearX\n      type: System.Single\n      description: The horizontal shear factor.\n    - id: shearY\n      type: System.Single\n      description: The vertical shear factor.\n  overload: System.Drawing.Drawing2D.Matrix.Shear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Shear(Single,Single,MatrixOrder)\n  nameWithType: Matrix.Shear(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified shear vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order.\n  remarks: The transformation applied in this method is a pure shear only if one of the parameters is 0. Applied to a rectangle at the origin, when the `shearY` factor is 0, the transformation moves the bottom edge horizontally by `shearX` times the height of the rectangle. When the `shearX` factor is 0, it moves the right edge vertically by `shearY` times the width of the rectangle. Caution is in order when both parameters are nonzero, because the results are hard to predict. For example, if both factors are 1, the transformation is singular (hence noninvertible), squeezing the entire plane to a single line.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Shear%28System.Single%2CSystem.Single%29>.\n  syntax:\n    content: public void Shear (float shearX, float shearY, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: shearX\n      type: System.Single\n      description: The horizontal shear factor.\n    - id: shearY\n      type: System.Single\n      description: The vertical shear factor.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the shear is applied.\n  overload: System.Drawing.Drawing2D.Matrix.Shear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])\n  id: TransformPoints(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: TransformPoints(Point[])\n  nameWithType: Matrix.TransformPoints(Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the geometric transform represented by this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to a specified array of points.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Creates an array of points that form a rectangle.  \\n  \\n-   Draws this array of points (to the screen prior to applying a scaling transform (the blue rectangle).  \\n  \\n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.  \\n  \\n-   Applies this matrix transform to the array of points.  \\n  \\n-   Draws the transformed array to the screen (the red rectangle).  \\n  \\n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/cpp/m-system.drawing.drawing_1_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/visualbasic/m-system.drawing.drawing_1_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/csharp/m-system.drawing.drawing_1_1.cs)]\"\n  syntax:\n    content: public void TransformPoints (System.Drawing.Point[] pts);\n    parameters:\n    - id: pts\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform.\n  overload: System.Drawing.Drawing2D.Matrix.TransformPoints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])\n  id: TransformPoints(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: TransformPoints(PointF[])\n  nameWithType: Matrix.TransformPoints(PointF[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the geometric transform represented by this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to a specified array of points.\n  remarks: ''\n  example:\n  - For an example, see [TransformPoints(Point\\[\\])](assetId:///M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void TransformPoints (System.Drawing.PointF[] pts);\n    parameters:\n    - id: pts\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points to transform.\n  overload: System.Drawing.Drawing2D.Matrix.TransformPoints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])\n  id: TransformVectors(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: TransformVectors(Point[])\n  nameWithType: Matrix.TransformVectors(Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies only the scale and rotate components of this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> to the specified array of points.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Creates an array of points that form a rectangle.  \\n  \\n-   Draws this array of points to the screen prior to applying a scaling transform (the blue rectangle).  \\n  \\n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis, and translates it by 100 in both axes.  \\n  \\n-   Lists the matrix elements to the screen.  \\n  \\n-   Applies this matrix transform to the array of points.  \\n  \\n-   Draws the transformed array to the screen (the red rectangle).  \\n  \\n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle) but the translation vector (the last two elements of the matrix) is ignored.  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/cpp/m-system.drawing.drawing_12_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/visualbasic/m-system.drawing.drawing_12_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/csharp/m-system.drawing.drawing_12_1.cs)]\"\n  syntax:\n    content: public void TransformVectors (System.Drawing.Point[] pts);\n    parameters:\n    - id: pts\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform.\n  overload: System.Drawing.Drawing2D.Matrix.TransformVectors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])\n  id: TransformVectors(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: TransformVectors(PointF[])\n  nameWithType: Matrix.TransformVectors(PointF[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.\n  remarks: ''\n  example:\n  - For an example, see [TransformVectors(Point\\[\\])](assetId:///M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void TransformVectors (System.Drawing.PointF[] pts);\n    parameters:\n    - id: pts\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform.\n  overload: System.Drawing.Drawing2D.Matrix.TransformVectors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)\n  id: Translate(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Translate(Single,Single)\n  nameWithType: Matrix.Translate(Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified translation vector (<code>offsetX</code> and <code>offsetY</code>) to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by prepending the translation vector.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Translate%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.\n  syntax:\n    content: public void Translate (float offsetX, float offsetY);\n    parameters:\n    - id: offsetX\n      type: System.Single\n      description: The x value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: offsetY\n      type: System.Single\n      description: The y value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.Translate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: Translate(Single,Single,MatrixOrder)\n  nameWithType: Matrix.Translate(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified translation vector to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \\n  \\n-   Draws a rectangle to the screen prior to applying a translate transform (the blue rectangle).  \\n  \\n-   Creates a matrix and translates it by 100 in both axes.  \\n  \\n-   Applies this matrix transform to the rectangle,  \\n  \\n-   Draws the transformed rectangle to the screen (the red rectangle).  \\n  \\n Notice that the beginning of the red rectangle is located 100 points in both axes from the beginning of the blue triangle.  \\n  \\n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/cpp/48411d65-00d9-48ff-a809-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/visualbasic/48411d65-00d9-48ff-a809-_1.vb)]\\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/csharp/48411d65-00d9-48ff-a809-_1.cs)]\"\n  syntax:\n    content: public void Translate (float offsetX, float offsetY, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: offsetX\n      type: System.Single\n      description: The x value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: offsetY\n      type: System.Single\n      description: The y value by which to translate this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies the order (append or prepend) in which the translation is applied to this <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  overload: System.Drawing.Drawing2D.Matrix.Translate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])\n  id: VectorTransformPoints(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  langs:\n  - csharp\n  name: VectorTransformPoints(Point[])\n  nameWithType: Matrix.VectorTransformPoints(Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.\n  syntax:\n    content: public void VectorTransformPoints (System.Drawing.Point[] pts);\n    parameters:\n    - id: pts\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transform.\n  overload: System.Drawing.Drawing2D.Matrix.VectorTransformPoints*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Drawing.Drawing2D.Matrix.#ctor\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Matrix()\n  nameWithType: Matrix.Matrix()\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix()\n- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Matrix(Rectangle,Point[])\n  nameWithType: Matrix.Matrix(Rectangle,Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Rectangle,Point[])\n- uid: System.Drawing.Rectangle\n  parent: System.Drawing\n  isExternal: false\n  name: Rectangle\n  nameWithType: Rectangle\n  fullName: System.Drawing.Rectangle\n- uid: System.Drawing.Point[]\n  parent: System.Drawing\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Drawing.Point[]\n  spec.csharp:\n  - uid: System.Drawing.Point\n    name: Point\n    nameWithType: Point\n    fullName: Point[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Matrix(RectangleF,PointF[])\n  nameWithType: Matrix.Matrix(RectangleF,PointF[])\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix(RectangleF,PointF[])\n- uid: System.Drawing.RectangleF\n  parent: System.Drawing\n  isExternal: false\n  name: RectangleF\n  nameWithType: RectangleF\n  fullName: System.Drawing.RectangleF\n- uid: System.Drawing.PointF[]\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF[]\n  spec.csharp:\n  - uid: System.Drawing.PointF\n    name: PointF\n    nameWithType: PointF\n    fullName: PointF[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Matrix(Single,Single,Single,Single,Single,Single)\n  nameWithType: Matrix.Matrix(Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Single,Single,Single,Single,Single,Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Drawing.Drawing2D.Matrix.Clone\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Clone()\n  nameWithType: Matrix.Clone()\n  fullName: System.Drawing.Drawing2D.Matrix.Clone()\n- uid: System.Drawing.Drawing2D.Matrix\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Drawing.Drawing2D.Matrix\n- uid: System.Drawing.Drawing2D.Matrix.Dispose\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Dispose()\n  nameWithType: Matrix.Dispose()\n  fullName: System.Drawing.Drawing2D.Matrix.Dispose()\n- uid: System.Drawing.Drawing2D.Matrix.Elements\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Elements\n  nameWithType: Matrix.Elements\n  fullName: System.Drawing.Drawing2D.Matrix.Elements\n- uid: System.Single[]\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single[]\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: Single[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.Matrix.Equals(System.Object)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Matrix.Equals(Object)\n  fullName: System.Drawing.Drawing2D.Matrix.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.Drawing2D.Matrix.Finalize\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Finalize()\n  nameWithType: Matrix.Finalize()\n  fullName: System.Drawing.Drawing2D.Matrix.Finalize()\n- uid: System.Drawing.Drawing2D.Matrix.GetHashCode\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Matrix.GetHashCode()\n  fullName: System.Drawing.Drawing2D.Matrix.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Drawing.Drawing2D.Matrix.Invert\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Invert()\n  nameWithType: Matrix.Invert()\n  fullName: System.Drawing.Drawing2D.Matrix.Invert()\n- uid: System.Drawing.Drawing2D.Matrix.IsIdentity\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: IsIdentity\n  nameWithType: Matrix.IsIdentity\n  fullName: System.Drawing.Drawing2D.Matrix.IsIdentity\n- uid: System.Drawing.Drawing2D.Matrix.IsInvertible\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: IsInvertible\n  nameWithType: Matrix.IsInvertible\n  fullName: System.Drawing.Drawing2D.Matrix.IsInvertible\n- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Multiply(Matrix)\n  nameWithType: Matrix.Multiply(Matrix)\n  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix)\n- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Multiply(Matrix,MatrixOrder)\n  nameWithType: Matrix.Multiply(Matrix,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix,MatrixOrder)\n- uid: System.Drawing.Drawing2D.MatrixOrder\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: MatrixOrder\n  nameWithType: MatrixOrder\n  fullName: System.Drawing.Drawing2D.MatrixOrder\n- uid: System.Drawing.Drawing2D.Matrix.OffsetX\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: OffsetX\n  nameWithType: Matrix.OffsetX\n  fullName: System.Drawing.Drawing2D.Matrix.OffsetX\n- uid: System.Drawing.Drawing2D.Matrix.OffsetY\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: OffsetY\n  nameWithType: Matrix.OffsetY\n  fullName: System.Drawing.Drawing2D.Matrix.OffsetY\n- uid: System.Drawing.Drawing2D.Matrix.Reset\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Reset()\n  nameWithType: Matrix.Reset()\n  fullName: System.Drawing.Drawing2D.Matrix.Reset()\n- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Rotate(Single)\n  nameWithType: Matrix.Rotate(Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single)\n- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Rotate(Single,MatrixOrder)\n  nameWithType: Matrix.Rotate(Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single,MatrixOrder)\n- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: RotateAt(Single,PointF)\n  nameWithType: Matrix.RotateAt(Single,PointF)\n  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF)\n- uid: System.Drawing.PointF\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF\n- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: RotateAt(Single,PointF,MatrixOrder)\n  nameWithType: Matrix.RotateAt(Single,PointF,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF,MatrixOrder)\n- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Scale(Single,Single)\n  nameWithType: Matrix.Scale(Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single)\n- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Scale(Single,Single,MatrixOrder)\n  nameWithType: Matrix.Scale(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single,MatrixOrder)\n- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Shear(Single,Single)\n  nameWithType: Matrix.Shear(Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single)\n- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Shear(Single,Single,MatrixOrder)\n  nameWithType: Matrix.Shear(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single,MatrixOrder)\n- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: TransformPoints(Point[])\n  nameWithType: Matrix.TransformPoints(Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(Point[])\n- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: TransformPoints(PointF[])\n  nameWithType: Matrix.TransformPoints(PointF[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(PointF[])\n- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: TransformVectors(Point[])\n  nameWithType: Matrix.TransformVectors(Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(Point[])\n- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: TransformVectors(PointF[])\n  nameWithType: Matrix.TransformVectors(PointF[])\n  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(PointF[])\n- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Translate(Single,Single)\n  nameWithType: Matrix.Translate(Single,Single)\n  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single)\n- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Translate(Single,Single,MatrixOrder)\n  nameWithType: Matrix.Translate(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single,MatrixOrder)\n- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: VectorTransformPoints(Point[])\n  nameWithType: Matrix.VectorTransformPoints(Point[])\n  fullName: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(Point[])\n- uid: System.Drawing.Drawing2D.Matrix.#ctor*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix.Matrix\n- uid: System.Drawing.Drawing2D.Matrix.Clone*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Clone\n  nameWithType: Matrix.Clone\n- uid: System.Drawing.Drawing2D.Matrix.Dispose*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Dispose\n  nameWithType: Matrix.Dispose\n- uid: System.Drawing.Drawing2D.Matrix.Elements*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Elements\n  nameWithType: Matrix.Elements\n- uid: System.Drawing.Drawing2D.Matrix.Equals*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Equals\n  nameWithType: Matrix.Equals\n- uid: System.Drawing.Drawing2D.Matrix.Finalize*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Finalize\n  nameWithType: Matrix.Finalize\n- uid: System.Drawing.Drawing2D.Matrix.GetHashCode*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Matrix.GetHashCode\n- uid: System.Drawing.Drawing2D.Matrix.Invert*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Invert\n  nameWithType: Matrix.Invert\n- uid: System.Drawing.Drawing2D.Matrix.IsIdentity*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: IsIdentity\n  nameWithType: Matrix.IsIdentity\n- uid: System.Drawing.Drawing2D.Matrix.IsInvertible*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: IsInvertible\n  nameWithType: Matrix.IsInvertible\n- uid: System.Drawing.Drawing2D.Matrix.Multiply*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Multiply\n  nameWithType: Matrix.Multiply\n- uid: System.Drawing.Drawing2D.Matrix.OffsetX*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: OffsetX\n  nameWithType: Matrix.OffsetX\n- uid: System.Drawing.Drawing2D.Matrix.OffsetY*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: OffsetY\n  nameWithType: Matrix.OffsetY\n- uid: System.Drawing.Drawing2D.Matrix.Reset*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Reset\n  nameWithType: Matrix.Reset\n- uid: System.Drawing.Drawing2D.Matrix.Rotate*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Rotate\n  nameWithType: Matrix.Rotate\n- uid: System.Drawing.Drawing2D.Matrix.RotateAt*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: RotateAt\n  nameWithType: Matrix.RotateAt\n- uid: System.Drawing.Drawing2D.Matrix.Scale*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Scale\n  nameWithType: Matrix.Scale\n- uid: System.Drawing.Drawing2D.Matrix.Shear*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Shear\n  nameWithType: Matrix.Shear\n- uid: System.Drawing.Drawing2D.Matrix.TransformPoints*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: TransformPoints\n  nameWithType: Matrix.TransformPoints\n- uid: System.Drawing.Drawing2D.Matrix.TransformVectors*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: TransformVectors\n  nameWithType: Matrix.TransformVectors\n- uid: System.Drawing.Drawing2D.Matrix.Translate*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: Translate\n  nameWithType: Matrix.Translate\n- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints*\n  parent: System.Drawing.Drawing2D.Matrix\n  isExternal: false\n  name: VectorTransformPoints\n  nameWithType: Matrix.VectorTransformPoints\n"}