{"nodes":[{"pos":[1288,1390],"content":"Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).","pos":[0,102]}]},{"pos":[3306,3436],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a random 2,048-bit key pair.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a random 2,048-bit key pair."},{"pos":[3973,4122],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a randomly generated key of the specified size.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a randomly generated key of the specified size."},{"pos":[4134,4269],"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.","pos":[0,135],"nodes":[{"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64.","pos":[0,66]},{"content":"We recommend that a minimum size of 2,048 bits be used for all keys.","pos":[67,135]}]}]},{"pos":[4400,4440],"content":"The size of the key to generate in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the key to generate in bits.","pos":[0,40]}]},{"pos":[4658,4692],"content":"<ph id=\"ph1\">&lt;code&gt;keySize&lt;/code&gt;</ph> is not valid.","needQuote":true,"needEscape":true,"source":"<code>keySize</code> is not valid."},{"pos":[5146,5266],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with the specified key."},{"pos":[5279,5601],"content":"The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>.       This constructor creates a copy of the key. Even if `key` is disposed, the copy of this key object in DSA remains alive.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName&gt; of <ph id=\"ph1\">`key`</ph> must be &lt;xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName&gt;.","pos":[0,193],"source":"The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>."},{"content":"This constructor creates a copy of the key.","pos":[200,243]},{"content":"Even if <ph id=\"ph1\">`key`</ph> is disposed, the copy of this key object in DSA remains alive.","pos":[244,320],"source":" Even if `key` is disposed, the copy of this key object in DSA remains alive."}]},{"pos":[5780,5814],"content":"The key to use for DSA operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key to use for DSA operations.","pos":[0,34]}]},{"pos":[5978,6018],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid DSA key.","needQuote":true,"needEscape":true,"source":"<code>key</code> is not a valid DSA key."},{"pos":[6121,6202],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6652,6705],"content":"Creates the digital signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the digital signature for the specified data.","pos":[0,53]}]},{"pos":[6865,6887],"content":"The data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to be signed.","pos":[0,22]}]},{"pos":[6945,6990],"content":"The digital signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digital signature for the specified data.","pos":[0,45]}]},{"pos":[7172,7257],"content":"<ph id=\"ph1\">&lt;code&gt;rgbHash&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rgbHash</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7376,7451],"content":"<ph id=\"ph1\">&lt;code&gt;rgbHash&lt;/code&gt;</ph> is shorter in length than the Q value of the DSA key .","needQuote":true,"needEscape":true,"source":"<code>rgbHash</code> is shorter in length than the Q value of the DSA key ."},{"pos":[8010,8022],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8556,8593],"content":"Exports the DSA algorithm parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exports the DSA algorithm parameters.","pos":[0,37]}]},{"pos":[8823,8989],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9076,9105],"content":"The DSA algorithm parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DSA algorithm parameters.","pos":[0,29]}]},{"pos":[9334,9379],"content":"DSA key is not a valid public or private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"DSA key is not a valid public or private key.","pos":[0,45]}]},{"pos":[10161,10173],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10276,10288],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10346,10358],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11307,11319],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11381,11393],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11454,11466],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11569,11581],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11639,11651],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12260,12432],"content":"Replaces the existing key that the current instance is working with by creating a new <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the parameters structure.","needQuote":true,"needEscape":true,"source":"Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure."},{"pos":[12662,12681],"content":"The DSA parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DSA parameters.","pos":[0,19]}]},{"pos":[12856,12899],"content":"The specified DSA parameters are not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified DSA parameters are not valid.","pos":[0,43]}]},{"pos":[13237,13388],"content":"Gets the key that will be used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for any cryptographic operation that it performs.","needQuote":true,"needEscape":true,"source":"Gets the key that will be used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object for any cryptographic operation that it performs."},{"pos":[13401,14187],"content":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.       This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.","needQuote":false,"needEscape":true,"nodes":[{"content":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.       This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.","pos":[0,784],"nodes":[{"content":"The  &lt;xref:System.Security.Cryptography.CngKey&gt; object is disposed if the key is reset, for instance by changing the &lt;xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName&gt; property, by using the &lt;xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName&gt; method to create a new key, or by disposing the parent &lt;xref:System.Security.Cryptography.DSACng&gt; object.","pos":[0,412],"source":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object."},{"content":"Therefore, you should ensure that the key object is no longer used in these cases.","pos":[413,495]},{"content":"This &lt;xref:System.Security.Cryptography.CngKey&gt; object is not the same as the &lt;xref:System.Security.Cryptography.CngKey&gt; object passed to the &lt;xref:System.Security.Cryptography.DSACng.%23ctor%2A&gt; constructor, if that constructor was used.","pos":[502,740],"source":"       This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used."},{"content":"However, it will point to the same CNG key.","pos":[741,784]}]}]},{"pos":[14347,14467],"content":"The key used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to perform cryptographic operations.","needQuote":true,"needEscape":true,"source":"The key used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object to perform cryptographic operations."},{"pos":[14960,15004],"content":"Gets the name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]},{"pos":[15138,15206],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15681,15750],"content":"Gets the key sizes, in bits, that are supported by the DSA algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key sizes, in bits, that are supported by the DSA algorithm.","pos":[0,69]}]},{"pos":[15936,16000],"content":"An array that contains the key sizes supported by the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the key sizes supported by the algorithm.","pos":[0,64]}]},{"pos":[16493,16534],"content":"Gets the name of the signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]},{"pos":[16666,16683],"content":"The string \"DSA\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The string \"DSA\".","pos":[0,17]}]},{"pos":[17267,17338],"content":"Verifies if the specified digital signature matches the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies if the specified digital signature matches the specified data.","pos":[0,71]}]},{"pos":[17517,17533],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[17602,17639],"content":"The digital signature to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digital signature to be verified.","pos":[0,37]}]},{"pos":[17698,17919],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p2\">&lt;/code&gt;</ept> matches the signature computed using the specified data; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rgbSignature</code> matches the signature computed using the specified data; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18102,18339],"content":"The <code>rgbHash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,99],"source":"The <code>rgbHash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[106,221],"source":"       -or-       The <code>rgbSignature</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[18459,18534],"content":"<ph id=\"ph1\">&lt;code&gt;rgbHash&lt;/code&gt;</ph> is shorter in length than the Q value of the DSA key .","needQuote":true,"needEscape":true,"source":"<code>rgbHash</code> is shorter in length than the Q value of the DSA key ."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSACng\n  id: DSACng\n  children:\n  - System.Security.Cryptography.DSACng.#ctor\n  - System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  - System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  - System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSACng.Key\n  - System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  - System.Security.Cryptography.DSACng.LegalKeySizes\n  - System.Security.Cryptography.DSACng.SignatureAlgorithm\n  - System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSACng\n  nameWithType: DSACng\n  fullName: System.Security.Cryptography.DSACng\n  type: Class\n  summary: Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).\n  syntax:\n    content: 'public sealed class DSACng : System.Security.Cryptography.DSA'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.DSA\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: DSACng()\n  nameWithType: DSACng.DSACng()\n  fullName: System.Security.Cryptography.DSACng.DSACng()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a random 2,048-bit key pair.\n  syntax:\n    content: public DSACng ();\n    parameters: []\n  overload: System.Security.Cryptography.DSACng.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: DSACng(Int32)\n  nameWithType: DSACng.DSACng(Int32)\n  fullName: System.Security.Cryptography.DSACng.DSACng(Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a randomly generated key of the specified size.\n  remarks: Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.\n  syntax:\n    content: public DSACng (int keySize);\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: The size of the key to generate in bits.\n  overload: System.Security.Cryptography.DSACng.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>keySize</code> is not valid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: DSACng(CngKey)\n  nameWithType: DSACng.DSACng(CngKey)\n  fullName: System.Security.Cryptography.DSACng.DSACng(CngKey)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with the specified key.\n  remarks: \"The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>.  \\n  \\n This constructor creates a copy of the key. Even if `key` is disposed, the copy of this key object in DSA remains alive.\"\n  syntax:\n    content: public DSACng (System.Security.Cryptography.CngKey key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: The key to use for DSA operations.\n  overload: System.Security.Cryptography.DSACng.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> is not a valid DSA key.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSACng.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSACng.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates the digital signature for the specified data.\n  syntax:\n    content: public override byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the specified data.\n  overload: System.Security.Cryptography.DSACng.CreateSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rgbHash</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <code>rgbHash</code> is shorter in length than the Q value of the DSA key .\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DSACng.Dispose(Boolean)\n  fullName: System.Security.Cryptography.DSACng.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Security.Cryptography.DSACng.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSACng.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSACng.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Exports the DSA algorithm parameters.\n  syntax:\n    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: The DSA algorithm parameters.\n  overload: System.Security.Cryptography.DSACng.ExportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: DSA key is not a valid public or private key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSACng.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACng.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: To be added.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: To be added.\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Cryptography.DSACng.HashData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSACng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: To be added.\n    - id: offset\n      type: System.Int32\n      description: To be added.\n    - id: count\n      type: System.Int32\n      description: To be added.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: To be added.\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Cryptography.DSACng.HashData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACng.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSACng.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure.\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: The DSA parameters.\n  overload: System.Security.Cryptography.DSACng.ImportParameters*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The specified DSA parameters are not valid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.Key\n  id: Key\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: Key\n  nameWithType: DSACng.Key\n  fullName: System.Security.Cryptography.DSACng.Key\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the key that will be used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object for any cryptographic operation that it performs.\n  remarks: \"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.  \\n  \\n This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.\"\n  syntax:\n    content: public System.Security.Cryptography.CngKey Key { get; }\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: The key used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object to perform cryptographic operations.\n  overload: System.Security.Cryptography.DSACng.Key*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACng.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: DSACng.LegalKeySizes\n  fullName: System.Security.Cryptography.DSACng.LegalKeySizes\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the key sizes, in bits, that are supported by the DSA algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: An array that contains the key sizes supported by the algorithm.\n  overload: System.Security.Cryptography.DSACng.LegalKeySizes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: DSACng.SignatureAlgorithm\n  fullName: System.Security.Cryptography.DSACng.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The string \"DSA\".\n  overload: System.Security.Cryptography.DSACng.SignatureAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSACng.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACng.VerifySignature(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Verifies if the specified digital signature matches the specified data.\n  syntax:\n    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The signed data.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The digital signature to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rgbSignature</code> matches the signature computed using the specified data; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACng.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>rgbHash</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>rgbSignature</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <code>rgbHash</code> is shorter in length than the Q value of the DSA key .\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.DSA\n  isExternal: false\n  name: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.DSACng.#ctor\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng()\n  nameWithType: DSACng.DSACng()\n  fullName: System.Security.Cryptography.DSACng.DSACng()\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng(Int32)\n  nameWithType: DSACng.DSACng(Int32)\n  fullName: System.Security.Cryptography.DSACng.DSACng(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng(CngKey)\n  nameWithType: DSACng.DSACng(CngKey)\n  fullName: System.Security.Cryptography.DSACng.DSACng(CngKey)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSACng.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSACng.CreateSignature(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DSACng.Dispose(Boolean)\n  fullName: System.Security.Cryptography.DSACng.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSACng.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSACng.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSACng.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACng.HashData(Stream,HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSACng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACng.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACng.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSACng.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSACng.Key\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Key\n  nameWithType: DSACng.Key\n  fullName: System.Security.Cryptography.DSACng.Key\n- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACng.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACng.LegalKeySizes\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: DSACng.LegalKeySizes\n  fullName: System.Security.Cryptography.DSACng.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: KeySizes[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACng.SignatureAlgorithm\n  fullName: System.Security.Cryptography.DSACng.SignatureAlgorithm\n- uid: System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSACng.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACng.VerifySignature(Byte[],Byte[])\n- uid: System.Security.Cryptography.DSACng.#ctor*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng\n  nameWithType: DSACng.DSACng\n- uid: System.Security.Cryptography.DSACng.CreateSignature*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: CreateSignature\n  nameWithType: DSACng.CreateSignature\n- uid: System.Security.Cryptography.DSACng.Dispose*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Dispose\n  nameWithType: DSACng.Dispose\n- uid: System.Security.Cryptography.DSACng.ExportParameters*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ExportParameters\n  nameWithType: DSACng.ExportParameters\n- uid: System.Security.Cryptography.DSACng.HashData*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: HashData\n  nameWithType: DSACng.HashData\n- uid: System.Security.Cryptography.DSACng.ImportParameters*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ImportParameters\n  nameWithType: DSACng.ImportParameters\n- uid: System.Security.Cryptography.DSACng.Key*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Key\n  nameWithType: DSACng.Key\n- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACng.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.DSACng.LegalKeySizes*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: DSACng.LegalKeySizes\n- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACng.SignatureAlgorithm\n- uid: System.Security.Cryptography.DSACng.VerifySignature*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: VerifySignature\n  nameWithType: DSACng.VerifySignature\n"}