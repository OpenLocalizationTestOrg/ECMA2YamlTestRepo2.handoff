{"nodes":[{"pos":[8547,8952],"content":"Provides a WPF framework-level set of properties, events, and methods for [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elements. This class represents the provided WPF framework-level implementation that is built on the WPF core-level [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] that are defined by <xref href=\"System.Windows.UIElement\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a WPF framework-level set of properties, events, and methods for <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> elements.","pos":[0,152],"source":"Provides a WPF framework-level set of properties, events, and methods for [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elements."},{"content":"This class represents the provided WPF framework-level implementation that is built on the WPF core-level <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> that are defined by <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[153,405],"source":" This class represents the provided WPF framework-level implementation that is built on the WPF core-level [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] that are defined by <xref href=\"System.Windows.UIElement\"></xref>."}]},{"pos":[8965,13684],"content":"FrameworkElement is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services. For more information about these concepts, see [WPF Architecture](~/add/includes/ajax-current-ext-md.md).       FrameworkElement extends <xref:System.Windows.UIElement> and adds the following capabilities:      -   **Layout system definition**: FrameworkElement provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>. Most notably, FrameworkElement seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead. For example, FrameworkElement seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any FrameworkElement derived class. At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined. For more information, see [Layout](~/add/includes/ajax-current-ext-md.md).      -   **The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements. Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the FrameworkElement level. Note however that FrameworkElement deliberately does not define a content model, and leaves that responsibility to derived classes. For more information, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).      -   **Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree. FrameworkElement defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements. For more information, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md).      -   **Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by FrameworkElement. For more information, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md) and [XAML Resources](~/add/includes/ajax-current-ext-md.md).      -   **Styles:** FrameworkElement defines the <xref:System.Windows.FrameworkElement.Style%2A> property. However, FrameworkElement does not yet define support for templates, or support decorators. These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.      -   **More animation support:** Some animation support was already defined at the WPF core level, but FrameworkElement extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.       As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] classes derive from FrameworkElement, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.       If you intend to use FrameworkElement as a base class, you might want to first examine the existing derived classes. FrameworkElement provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an \"element\" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. For instance, a FrameworkElement does not define any true content model; FrameworkElement as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] child elements. In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"FrameworkElement is the connecting point between WPF framework-level element classes and the WPF core-level set of &lt;xref:System.Windows.UIElement&gt; presentation services.","pos":[0,169],"source":"FrameworkElement is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services."},{"content":"For more information about these concepts, see <bpt id=\"p1\">[</bpt>WPF Architecture<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[170,275],"source":" For more information about these concepts, see [WPF Architecture](~/add/includes/ajax-current-ext-md.md)."},{"content":"FrameworkElement extends &lt;xref:System.Windows.UIElement&gt; and adds the following capabilities:      -   <bpt id=\"p1\">**</bpt>Layout system definition<ept id=\"p1\">**</ept>: FrameworkElement provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  &lt;xref:System.Windows.UIElement&gt;.","pos":[282,579],"source":"       FrameworkElement extends <xref:System.Windows.UIElement> and adds the following capabilities:      -   **Layout system definition**: FrameworkElement provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>."},{"content":"Most notably, FrameworkElement seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.","pos":[580,757]},{"content":"For example, FrameworkElement seals &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; but provides &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.","pos":[758,912],"source":" For example, FrameworkElement seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>."},{"content":"These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any FrameworkElement derived class.","pos":[913,1066]},{"content":"At the WPF core level, certain members that will structure a general <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> based layout solution are in place, but the actual engine of the layout system is not defined.","pos":[1067,1306],"source":" At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Layout<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1307,1381],"source":" For more information, see [Layout](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   <bpt id=\"p1\">**</bpt>The logical tree:<ept id=\"p1\">**</ept> The general <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> programming model is often expressed in terms of being a tree of elements.","pos":[1387,1575],"source":"      -   **The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements."},{"content":"Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the FrameworkElement level.","pos":[1576,1742]},{"content":"Note however that FrameworkElement deliberately does not define a content model, and leaves that responsibility to derived classes.","pos":[1743,1874]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Trees in WPF<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1875,1955],"source":" For more information, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   <bpt id=\"p1\">**</bpt>Object lifetime events:<ept id=\"p1\">**</ept> It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.","pos":[1961,2135],"source":"      -   **Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree."},{"content":"FrameworkElement defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.","pos":[2136,2314]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object Lifetime Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2315,2405],"source":" For more information, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   <bpt id=\"p1\">**</bpt>Support for data binding and dynamic resource references:<ept id=\"p1\">**</ept> The property-level support for data binding and resources is implemented by the &lt;xref:System.Windows.DependencyProperty&gt; class and embodied in the property system, but the ability to resolve a member value that is stored as an &lt;xref:System.Windows.Expression&gt; (the programming construct that underlies both data binding and dynamic resources) is implemented by FrameworkElement.","pos":[2411,2855],"source":"      -   **Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by FrameworkElement."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>XAML Resources<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2856,3005],"source":" For more information, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md) and [XAML Resources](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   <bpt id=\"p1\">**</bpt>Styles:<ept id=\"p1\">**</ept> FrameworkElement defines the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property.","pos":[3011,3113],"source":"      -   **Styles:** FrameworkElement defines the <xref:System.Windows.FrameworkElement.Style%2A> property."},{"content":"However, FrameworkElement does not yet define support for templates, or support decorators.","pos":[3114,3205]},{"content":"These features are introduced by control classes such as &lt;xref:System.Windows.Controls.Control&gt; and &lt;xref:System.Windows.Controls.ContentControl&gt;.","pos":[3206,3352],"source":" These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>."},{"content":"-   <bpt id=\"p1\">**</bpt>More animation support:<ept id=\"p1\">**</ept> Some animation support was already defined at the WPF core level, but FrameworkElement extends this by implementing &lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt; and related members.","pos":[3358,3584],"source":"      -   **More animation support:** Some animation support was already defined at the WPF core level, but FrameworkElement extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members."},{"content":"As can be seen from the class hierarchy, many <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> classes derive from FrameworkElement, either directly or through intermediate base classes such as &lt;xref:System.Windows.Controls.Panel&gt; or &lt;xref:System.Windows.Controls.Control&gt;.","pos":[3591,3891],"source":"       As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] classes derive from FrameworkElement, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>."},{"content":"If you intend to use FrameworkElement as a base class, you might want to first examine the existing derived classes.","pos":[3898,4014]},{"content":"FrameworkElement provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an \"element\" in the sense of a building block that you use to create <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> in <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.","pos":[4015,4337],"source":" FrameworkElement provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an \"element\" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]."},{"content":"For instance, a FrameworkElement does not define any true content model; FrameworkElement as a base class does not define a property that can create <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> child elements.","pos":[4338,4568],"source":" For instance, a FrameworkElement does not define any true content model; FrameworkElement as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] child elements."},{"content":"In particular, you might want to look at &lt;xref:System.Windows.Controls.Control&gt; and &lt;xref:System.Windows.Controls.ContentControl&gt;.","pos":[4569,4699],"source":" In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>."}]},{"pos":[41588,41681],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkElement\"></xref> class."},{"pos":[42196,42237],"content":"Gets the rendered height of this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the rendered height of this element.","pos":[0,41]}]},{"pos":[42250,43338],"content":"This property is a calculated value based on other height inputs, and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.       Because ActualHeight is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system. The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.       Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.      <a name=\"dependencyPropertyInfo_ActualHeight\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is a calculated value based on other height inputs, and the layout system.","pos":[0,88]},{"content":"The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; that are the basis of the input change.","pos":[89,332],"source":" The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change."},{"content":"Because ActualHeight is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.","pos":[339,525]},{"content":"The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.","pos":[526,651]},{"content":"Although you cannot set this property from <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a &lt;xref:System.Windows.Trigger&gt; upon its value in a style.","pos":[658,839],"source":"       Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_ActualHeight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[845,1074],"source":"<a name=\"dependencyPropertyInfo_ActualHeight\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[43773,43914],"content":"The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0 (zero).","needQuote":true,"needEscape":true,"nodes":[{"content":"The element's height, as a value in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,110],"source":"The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is 0 (zero).","pos":[111,141]}]},{"pos":[44403,44491],"content":"Identifies the <xref:System.Windows.FrameworkElement.ActualHeight*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.ActualHeight*&gt; dependency property.","pos":[0,88],"source":"Identifies the <xref:System.Windows.FrameworkElement.ActualHeight*> dependency property."}]},{"pos":[44671,44683],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[45072,45112],"content":"Gets the rendered width of this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the rendered width of this element.","pos":[0,40]}]},{"pos":[45125,46208],"content":"This property is a calculated value based on other width inputs, and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.       Because ActualWidth is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system. The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.       Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.      <a name=\"dependencyPropertyInfo_ActualWidth\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is a calculated value based on other width inputs, and the layout system.","pos":[0,87]},{"content":"The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; that are the basis of the input change.","pos":[88,330],"source":" The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change."},{"content":"Because ActualWidth is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.","pos":[337,522]},{"content":"The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.","pos":[523,648]},{"content":"Although you cannot set this property from <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a &lt;xref:System.Windows.Trigger&gt; upon its value in a style.","pos":[655,836],"source":"       Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_ActualWidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[842,1069],"source":"<a name=\"dependencyPropertyInfo_ActualWidth\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[46629,46769],"content":"The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0 (zero).","needQuote":true,"needEscape":true,"nodes":[{"content":"The element's width, as a value in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,109],"source":"The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is 0 (zero).","pos":[110,140]}]},{"pos":[47252,47339],"content":"Identifies the <xref:System.Windows.FrameworkElement.ActualWidth*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.ActualWidth*&gt; dependency property.","pos":[0,87],"source":"Identifies the <xref:System.Windows.FrameworkElement.ActualWidth*> dependency property."}]},{"pos":[47518,47530],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[47991,48052],"content":"Adds the provided object to the logical tree of this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the provided object to the logical tree of this element.","pos":[0,61]}]},{"pos":[48065,49456],"content":"Use this method for the implementation of collections on objects that represent logical child elements of an element. Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.       For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario. Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>. These classes provide a content model with particular enforcement of logical tree child elements through dedicated [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control such as styling through templates. For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and AddLogicalChild, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).       AddLogicalChild may throw an exception if called at a time when the logical tree is being iterated by another process.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method for the implementation of collections on objects that represent logical child elements of an element.","pos":[0,117]},{"content":"Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.","pos":[118,307]},{"content":"For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.","pos":[314,523]},{"content":"Consider subclassing at the level of &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, and &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.","pos":[524,709],"source":" Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>."},{"content":"These classes provide a content model with particular enforcement of logical tree child elements through dedicated <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.","pos":[710,1089],"source":" These classes provide a content model with particular enforcement of logical tree child elements through dedicated [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control such as styling through templates."},{"content":"For more information on how to use &lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt; and AddLogicalChild, see <bpt id=\"p1\">[</bpt>Trees in WPF<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1090,1262],"source":" For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and AddLogicalChild, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md)."},{"content":"AddLogicalChild may throw an exception if called at a time when the logical tree is being iterated by another process.","pos":[1269,1387]}]},{"pos":[50475,50501],"content":"Child element to be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"Child element to be added.","pos":[0,26]}]},{"pos":[50965,51105],"content":"Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.","pos":[0,140]}]},{"pos":[51118,51977],"content":"Applications can call this method to guarantee that the visual tree of an element is complete. This guarantee step might be necessary if code will be checking the child elements in the tree. For typical element logic within applications, calling ApplyTemplate is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.       ApplyTemplate is called on every Measure pass by the WPF framework-level layout system.       <xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Applications can call this method to guarantee that the visual tree of an element is complete. This guarantee step might be necessary if code will be checking the child elements in the tree. For typical element logic within applications, calling ApplyTemplate is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.       ApplyTemplate is called on every Measure pass by the WPF framework-level layout system.       <xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.","pos":[0,855],"nodes":[{"content":"Applications can call this method to guarantee that the visual tree of an element is complete.","pos":[0,94]},{"content":"This guarantee step might be necessary if code will be checking the child elements in the tree.","pos":[95,190]},{"content":"For typical element logic within applications, calling ApplyTemplate is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.","pos":[191,381]},{"content":"ApplyTemplate is called on every Measure pass by the WPF framework-level layout system.","pos":[388,475]},{"content":"&lt;xref:System.Windows.FrameworkElement&gt; derived classes can use the &lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; class handler to be notified of cases where this method was called explicitly, or by the layout system.","pos":[482,710],"source":"       <xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system."},{"content":"&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; is called after the template is completely generated and attached to the logical tree.","pos":[711,855],"source":" <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree."}]}]},{"pos":[52109,52286],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if visuals were added to the tree; returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> otherwise.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if visuals were added to the tree; returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise."},{"pos":[52792,52947],"content":"Implements &lt;xref:System.Windows.UIElement.ArrangeCore*&gt; (defined as virtual in <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) and seals the implementation.","needQuote":true,"needEscape":true,"source":"Implements <xref:System.Windows.UIElement.ArrangeCore*> (defined as virtual in <xref href=\"System.Windows.UIElement\"></xref>) and seals the implementation."},{"pos":[52959,53219],"content":"This method is sealed. In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is sealed. In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.","pos":[0,260],"nodes":[{"content":"This method is sealed.","pos":[0,22]},{"content":"In order to override the logic in your custom element specifically for the arrange pass of element layout, your &lt;xref:System.Windows.FrameworkElement&gt; derived class must override &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.","pos":[23,260],"source":" In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>."}]}]},{"pos":[53406,53503],"content":"The final area within the parent that this element should use to arrange itself and its children.","needQuote":true,"needEscape":true,"nodes":[{"content":"The final area within the parent that this element should use to arrange itself and its children.","pos":[0,97]}]},{"pos":[54027,54183],"content":"When overridden in a derived class, positions child elements and determines a size for a <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> derived class.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, positions child elements and determines a size for a <xref href=\"System.Windows.FrameworkElement\"></xref> derived class."},{"pos":[54381,54478],"content":"The final area within the parent that this element should use to arrange itself and its children.","needQuote":true,"needEscape":true,"nodes":[{"content":"The final area within the parent that this element should use to arrange itself and its children.","pos":[0,97]}]},{"pos":[54542,54563],"content":"The actual size used.","needQuote":true,"needEscape":true,"nodes":[{"content":"The actual size used.","pos":[0,21]}]},{"pos":[55007,55058],"content":"Starts the initialization process for this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts the initialization process for this element.","pos":[0,51]}]},{"pos":[55070,55483],"content":"You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree. For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree. Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree. For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree. Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.","pos":[0,413],"nodes":[{"content":"You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.","pos":[0,148]},{"content":"For instance, you might have created a new &lt;xref:System.Windows.FrameworkElement&gt;, but have not yet attached it to any logical tree.","pos":[149,281],"source":" For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree."},{"content":"Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.","pos":[282,413]}]}]},{"pos":[56143,56220],"content":"Begins the sequence of actions that are contained in the provided storyboard.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins the sequence of actions that are contained in the provided storyboard.","pos":[0,77]}]},{"pos":[56233,57199],"content":"Most typical animation scenarios do not use this method. Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element. When triggered by the event, the animation then runs. Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.       For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period. Therefore the animation cannot be restarted after running once. Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Most typical animation scenarios do not use this method.","pos":[0,56]},{"content":"Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.","pos":[57,297],"source":" Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element."},{"content":"When triggered by the event, the animation then runs.","pos":[298,351]},{"content":"Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.","pos":[352,492],"source":" Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup."},{"content":"For the signatures that do not use the <ph id=\"ph1\">`isControllable`</ph>, parameter, or when that parameter is specified <ph id=\"ph2\">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period.","pos":[499,734],"source":"       For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period."},{"content":"Therefore the animation cannot be restarted after running once.","pos":[735,798]},{"content":"Controlling an animation also requires that the storyboard have an <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.","pos":[799,962],"source":" Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code."}]},{"pos":[57900,57924],"content":"The storyboard to begin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The storyboard to begin.","pos":[0,24]}]},{"pos":[58656,58807],"content":"Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.","pos":[0,151]}]},{"pos":[58820,62621],"content":"Most typical animation scenarios do not use this method. Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element. When triggered by the event, the animation then runs. Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.       For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period. Therefore the animation cannot be restarted after running once. Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code.       Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.      ## Using the Compose HandoffBehavior    When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.       To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock:      -   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.      -   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.       This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.       For more information about clock objects, see [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Most typical animation scenarios do not use this method.","pos":[0,56]},{"content":"Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.","pos":[57,297],"source":" Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element."},{"content":"When triggered by the event, the animation then runs.","pos":[298,351]},{"content":"Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.","pos":[352,492],"source":" Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup."},{"content":"For the signatures that do not use the <ph id=\"ph1\">`isControllable`</ph>, parameter, or when that parameter is specified <ph id=\"ph2\">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period.","pos":[499,734],"source":"       For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period."},{"content":"Therefore the animation cannot be restarted after running once.","pos":[735,798]},{"content":"Controlling an animation also requires that the storyboard have an <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.","pos":[799,962],"source":" Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code."},{"content":"Handoff behavior can be specified as an attribute of &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;.","pos":[969,1076],"source":"       Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>."},{"content":"Using the Compose HandoffBehavior    When you apply a &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, or &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to a property by using the &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, any &lt;xref:System.Windows.Media.Animation.Clock&gt; objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.","pos":[1085,1632],"source":"      ## Using the Compose HandoffBehavior    When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically."},{"content":"To avoid performance issues when you apply a large number of clocks by using &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, you should remove composing clocks from the animated property after they complete.","pos":[1639,1853],"source":"       To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete."},{"content":"There are several ways to remove a clock:      -   To remove all clocks from a property, use the &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt; or &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; method of the animated object.","pos":[1854,2294],"source":" There are several ways to remove a clock:      -   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object."},{"content":"Specify the property being animated as the first parameter, and <ph id=\"ph1\">`null`</ph> as the second.","pos":[2295,2380],"source":" Specify the property being animated as the first parameter, and `null` as the second."},{"content":"This removes all animation clocks from the property.","pos":[2381,2433]},{"content":"-   To remove a specific &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; from a list of clocks, use the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of the &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to retrieve a &lt;xref:System.Windows.Media.Animation.ClockController&gt;, then call the &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; method of the &lt;xref:System.Windows.Media.Animation.ClockController&gt;.","pos":[2439,2890],"source":"      -   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>."},{"content":"This is typically done in the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event handler for a clock.","pos":[2891,3001],"source":" This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock."},{"content":"Note that only root clocks can be controlled by a &lt;xref:System.Windows.Media.Animation.ClockController&gt;; the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of a child clock returns <ph id=\"ph1\">`null`</ph>.","pos":[3002,3210],"source":" Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`."},{"content":"Note also that the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event is not raised if the effective duration of the clock is forever.","pos":[3211,3354],"source":" Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever."},{"content":"In that case, the user must determine when to call &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.","pos":[3356,3471],"source":"  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>."},{"content":"This is primarily an issue for animations on objects that have a long lifetime.","pos":[3478,3557]},{"content":"When an object is garbage collected, its clocks are also disconnected and garbage collected.","pos":[3559,3651]},{"content":"For more information about clock objects, see <bpt id=\"p1\">[</bpt>Animation and Timing System Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3658,3782],"source":"       For more information about clock objects, see [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[63386,63410],"content":"The storyboard to begin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The storyboard to begin.","pos":[0,24]}]},{"pos":[63515,63635],"content":"A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.","pos":[0,120]}]},{"pos":[64421,64560],"content":"Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.","pos":[0,139]}]},{"pos":[64573,68374],"content":"Most typical animation scenarios do not use this method. Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element. When triggered by the event, the animation then runs. Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.       For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period. Therefore the animation cannot be restarted after running once. Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code.       Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.      ## Using the Compose HandoffBehavior    When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.       To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock:      -   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.      -   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.       This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.       For more information about clock objects, see [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Most typical animation scenarios do not use this method.","pos":[0,56]},{"content":"Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.","pos":[57,297],"source":" Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element."},{"content":"When triggered by the event, the animation then runs.","pos":[298,351]},{"content":"Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.","pos":[352,492],"source":" Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup."},{"content":"For the signatures that do not use the <ph id=\"ph1\">`isControllable`</ph>, parameter, or when that parameter is specified <ph id=\"ph2\">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period.","pos":[499,734],"source":"       For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \"Fill\" period."},{"content":"Therefore the animation cannot be restarted after running once.","pos":[735,798]},{"content":"Controlling an animation also requires that the storyboard have an <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.","pos":[799,962],"source":" Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code."},{"content":"Handoff behavior can be specified as an attribute of &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;.","pos":[969,1076],"source":"       Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>."},{"content":"Using the Compose HandoffBehavior    When you apply a &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, or &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to a property by using the &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, any &lt;xref:System.Windows.Media.Animation.Clock&gt; objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.","pos":[1085,1632],"source":"      ## Using the Compose HandoffBehavior    When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically."},{"content":"To avoid performance issues when you apply a large number of clocks by using &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, you should remove composing clocks from the animated property after they complete.","pos":[1639,1853],"source":"       To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete."},{"content":"There are several ways to remove a clock:      -   To remove all clocks from a property, use the &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt; or &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; method of the animated object.","pos":[1854,2294],"source":" There are several ways to remove a clock:      -   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object."},{"content":"Specify the property being animated as the first parameter, and <ph id=\"ph1\">`null`</ph> as the second.","pos":[2295,2380],"source":" Specify the property being animated as the first parameter, and `null` as the second."},{"content":"This removes all animation clocks from the property.","pos":[2381,2433]},{"content":"-   To remove a specific &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; from a list of clocks, use the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of the &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to retrieve a &lt;xref:System.Windows.Media.Animation.ClockController&gt;, then call the &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; method of the &lt;xref:System.Windows.Media.Animation.ClockController&gt;.","pos":[2439,2890],"source":"      -   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>."},{"content":"This is typically done in the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event handler for a clock.","pos":[2891,3001],"source":" This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock."},{"content":"Note that only root clocks can be controlled by a &lt;xref:System.Windows.Media.Animation.ClockController&gt;; the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of a child clock returns <ph id=\"ph1\">`null`</ph>.","pos":[3002,3210],"source":" Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`."},{"content":"Note also that the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event is not raised if the effective duration of the clock is forever.","pos":[3211,3354],"source":" Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever."},{"content":"In that case, the user must determine when to call &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.","pos":[3356,3471],"source":"  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>."},{"content":"This is primarily an issue for animations on objects that have a long lifetime.","pos":[3478,3557]},{"content":"When an object is garbage collected, its clocks are also disconnected and garbage collected.","pos":[3559,3651]},{"content":"For more information about clock objects, see <bpt id=\"p1\">[</bpt>Animation and Timing System Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3658,3782],"source":"       For more information about clock objects, see [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[68678,68702],"content":"The storyboard to begin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The storyboard to begin.","pos":[0,24]}]},{"pos":[68807,68927],"content":"A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.","pos":[0,120]}]},{"pos":[68999,69082],"content":"Declares whether the animation is controllable (can be paused) after it is started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Declares whether the animation is controllable (can be paused) after it is started.","pos":[0,83]}]},{"pos":[69537,69637],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.BindingGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for the element.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Windows.Data.BindingGroup\"></xref> that is used for the element."},{"pos":[69650,70874],"content":"A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object. For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided. The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object’s properties. You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object. For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country of the address.       Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.      <a name=\"dependencyPropertyInfo_BindingGroup\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|   |Metadata properties set to **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Windows.Data.BindingGroup&gt; can be used to validate the values of multiple properties of an object.","pos":[0,113],"source":"A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object."},{"content":"For example, suppose that an application prompts the user to enter an address and then populates an object of type <ph id=\"ph1\">`Address`</ph>, which has the properties <ph id=\"ph2\">`Street`</ph>, <ph id=\"ph3\">`City`</ph>, <ph id=\"ph4\">`ZipCode`</ph>, and <ph id=\"ph5\">`Country`</ph>, with the values that the user provided.","pos":[114,348],"source":" For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided."},{"content":"The application has a panel that contains four &lt;xref:System.Windows.Controls.TextBox&gt; controls, each of which is bound to one of the object’s properties.","pos":[349,502],"source":" The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object’s properties."},{"content":"You can use a &lt;xref:System.Windows.Controls.ValidationRule&gt; in a &lt;xref:System.Windows.Data.BindingGroup&gt; to validate the <ph id=\"ph1\">`Address`</ph> object.","pos":[503,641],"source":" You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object."},{"content":"For example, the &lt;xref:System.Windows.Controls.ValidationRule&gt; can ensure that the zip code is valid for the country of the address.","pos":[642,774],"source":" For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country of the address."},{"content":"Child elements inherit the &lt;xref:System.Windows.Data.BindingGroup&gt; from their parent elements, just as with any other inheritable property.","pos":[781,920],"source":"       Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_BindingGroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;|   |Metadata properties set to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|","pos":[926,1212],"source":"<a name=\"dependencyPropertyInfo_BindingGroup\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|   |Metadata properties set to **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|"}]},{"pos":[72895,72982],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.BindingGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for the element.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Data.BindingGroup\"></xref> that is used for the element."},{"pos":[73471,73559],"content":"Identifies the <xref:System.Windows.FrameworkElement.BindingGroup*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.BindingGroup*&gt; dependency property.","pos":[0,88],"source":"Identifies the <xref:System.Windows.FrameworkElement.BindingGroup*> dependency property."}]},{"pos":[73739,73751],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[74154,74249],"content":"Attempts to bring this element into view, within any scrollable regions it is contained within.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to bring this element into view, within any scrollable regions it is contained within.","pos":[0,95]}]},{"pos":[74262,75742],"content":"By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element. This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class. The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control. Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the BringIntoView method transmit any information about success or failure, other than that the event is typically marked handled on success. Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility>.       If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.       By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element. If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By calling this method, you raise a &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event that originates from the current element.","pos":[0,143],"source":"By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element."},{"content":"This event is raised so that it can be handled by a &lt;xref:System.Windows.Controls.ScrollViewer&gt;, or a derived or similar class.","pos":[144,271],"source":" This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class."},{"content":"The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the &lt;xref:System.Windows.Controls.ScrollViewer&gt; control.","pos":[272,515],"source":" The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control."},{"content":"Neither the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event nor the BringIntoView method transmit any information about success or failure, other than that the event is typically marked handled on success.","pos":[516,739],"source":" Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the BringIntoView method transmit any information about success or failure, other than that the event is typically marked handled on success."},{"content":"Reasons for failure can include the element settings, such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; being some value other than &lt;xref:System.Windows.Visibility&gt;.","pos":[740,909],"source":" Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility>."},{"content":"If you use the signature that does not specify a <ph id=\"ph1\">`targetRectangle`</ph>, then the entire element size (its &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) will be made visible.","pos":[916,1086],"source":"       If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible."},{"content":"By calling this method, you potentially will call &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt; on any parent scrollable area that contains the element.","pos":[1093,1268],"source":"       By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element."},{"content":"If this element is not contained in a scrollable area, the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event is still raised, but there will be no effect because there are no event listeners.","pos":[1269,1476],"source":" If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners."}]},{"pos":[77194,77317],"content":"Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.","pos":[0,123]}]},{"pos":[77330,78852],"content":"By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element. This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class. The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control. Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success. Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility>.       If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.       By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element. If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By calling this method, you raise a &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event that originates from the current element.","pos":[0,143],"source":"By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element."},{"content":"This event is raised so that it can be handled by a &lt;xref:System.Windows.Controls.ScrollViewer&gt;, or a derived or similar class.","pos":[144,271],"source":" This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class."},{"content":"The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the &lt;xref:System.Windows.Controls.ScrollViewer&gt; control.","pos":[272,515],"source":" The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control."},{"content":"Neither the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event nor the &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt; method transmit any information about success or failure, other than that the event is typically marked handled on success.","pos":[516,781],"source":" Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success."},{"content":"Reasons for failure can include the element settings, such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; being some value other than &lt;xref:System.Windows.Visibility&gt;.","pos":[782,951],"source":" Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility>."},{"content":"If you use the signature that does not specify a <ph id=\"ph1\">`targetRectangle`</ph>, then the entire element size (its &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) will be made visible.","pos":[958,1128],"source":"       If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible."},{"content":"By calling this method, you potentially will call &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt; on any parent scrollable area that contains the element.","pos":[1135,1310],"source":"       By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element."},{"content":"If this element is not contained in a scrollable area, the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event is still raised, but there will be no effect because there are no event listeners.","pos":[1311,1518],"source":" If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners."}]},{"pos":[79686,79754],"content":"Specified size of the element that should also be brought into view.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specified size of the element that should also be brought into view.","pos":[0,68]}]},{"pos":[80202,80391],"content":"Gets or sets the context menu element that should appear whenever the context menu is requested through <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> from within this element.","needQuote":true,"needEscape":true,"source":"Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] from within this element."},{"pos":[80404,80981],"content":"<xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a ContextMenu property. However, this creates a confusing context menu experience for the user and this practice is not recommended.      <a name=\"dependencyPropertyInfo_ContextMenu\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, and it is technically possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a ContextMenu property.","pos":[0,225],"source":"<xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a ContextMenu property."},{"content":"However, this creates a confusing context menu experience for the user and this practice is not recommended.","pos":[226,334]},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_ContextMenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[340,567],"source":"<a name=\"dependencyPropertyInfo_ContextMenu\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[81154,81196],"content":"The context menu assigned to this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The context menu assigned to this element.","pos":[0,42]}]},{"pos":[81674,81735],"content":"Occurs just before any context menu on the element is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs just before any context menu on the element is closed.","pos":[0,61]}]},{"pos":[81748,83818],"content":"To suppress closing context menus, handlers of the event should mark it as handled.       To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:       [!code-xml[CorePseudocode#FEContextMenuClosing](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)]       (This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the ContextMenuClosing identifier such that you can use it as a trigger).       <xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the ContextMenuClosing event will not be raised by a context menu directly. Instead, the event is raised from the element that \"owns\" the context menu as a property and is only raised when a user attempts to close a context menu in the UI. However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu). In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.       The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.      <a name=\"routedEventInfo_ContextMenuClosing\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To suppress closing context menus, handlers of the event should mark it as handled.","pos":[0,83]},{"content":"To use this event as an &lt;xref:System.Windows.EventTrigger&gt; in a style, you must reference the underlying service's definition of the event:       <bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>CorePseudocode#FEContextMenuClosing<ept id=\"p2\">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)</ept><ept id=\"p1\">]</ept>       (This usage is required because the event implementation on &lt;xref:System.Windows.FrameworkElement&gt; that exposes the underlying service event does not map the ContextMenuClosing identifier such that you can use it as a trigger).","pos":[90,594],"source":"       To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:       [!code-xml[CorePseudocode#FEContextMenuClosing](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)]       (This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the ContextMenuClosing identifier such that you can use it as a trigger)."},{"content":"&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, but the ContextMenuClosing event will not be raised by a context menu directly.","pos":[601,789],"source":"       <xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the ContextMenuClosing event will not be raised by a context menu directly."},{"content":"Instead, the event is raised from the element that \"owns\" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.","pos":[790,953]},{"content":"However it is possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property (a nested context menu).","pos":[954,1128],"source":" However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu)."},{"content":"In this case the &lt;xref:System.Windows.Controls.ContextMenu&gt; really does own the nested &lt;xref:System.Windows.Controls.ContextMenu&gt; and might raise the event, with the source of the event being the nested context menu.","pos":[1129,1345],"source":" In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu."},{"content":"The &lt;xref:System.Windows.Controls.ContextMenu&gt; class itself also has a similar event (&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;) but the &lt;xref:System.Windows.Controls.ContextMenu.Closed&gt; event does not provide you the opportunity to cancel the user action.","pos":[1352,1616],"source":"       The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_ContextMenuClosing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt; to implement class handling for this event in derived classes.","pos":[1622,2045],"source":"<a name=\"routedEventInfo_ContextMenuClosing\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes."}]},{"pos":[84015,84027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[84473,84573],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"></xref> routed event."},{"pos":[84586,85123],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[85293,85305],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[85726,85780],"content":"Occurs when any context menu on the element is opened.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when any context menu on the element is opened.","pos":[0,54]}]},{"pos":[85793,88518],"content":"To manually open context menus, handlers of the events should mark the relevant event as handled. Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu. Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>. However, there is a timing issue you should be aware of. In order to completely replace the context menu through a ContextMenuOpening handler, the initial context menu must not be null / empty. Alternatively, you might need to handle the event and then manually open a new context menu. For details, see [How to: Handle the ContextMenuOpening Event](~/add/includes/ajax-current-ext-md.md).       To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:       [!code-xml[CorePseudocode#FEContextMenuOpening](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)]       (This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the ContextMenuOpening identifier such that you can use it in triggers).       <xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source. The event is raised from the element that \"owns\" the context menu as a property and is only raised when a user attempts to open a context menu in the UI. It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName>).       The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.      <a name=\"routedEventInfo_ContextMenuOpening\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To manually open context menus, handlers of the events should mark the relevant event as handled.","pos":[0,97]},{"content":"Otherwise, the existing value of the &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property will be used to automatically open a context menu.","pos":[98,248],"source":" Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu."},{"content":"Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property and then open the new &lt;xref:System.Windows.Controls.ContextMenu&gt;.","pos":[249,501],"source":" Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>."},{"content":"However, there is a timing issue you should be aware of.","pos":[502,558]},{"content":"In order to completely replace the context menu through a ContextMenuOpening handler, the initial context menu must not be null / empty.","pos":[559,695]},{"content":"Alternatively, you might need to handle the event and then manually open a new context menu.","pos":[696,788]},{"content":"For details, see <bpt id=\"p1\">[</bpt>How to: Handle the ContextMenuOpening Event<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[789,891],"source":" For details, see [How to: Handle the ContextMenuOpening Event](~/add/includes/ajax-current-ext-md.md)."},{"content":"To use this event as an &lt;xref:System.Windows.EventTrigger&gt; in a style, you must reference the underlying attached event:       <bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>CorePseudocode#FEContextMenuOpening<ept id=\"p2\">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)</ept><ept id=\"p1\">]</ept>       (This usage is required because the event implementation on &lt;xref:System.Windows.FrameworkElement&gt; that exposes the underlying service event does not map the ContextMenuOpening identifier such that you can use it in triggers).","pos":[898,1382],"source":"       To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:       [!code-xml[CorePseudocode#FEContextMenuOpening](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)]       (This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the ContextMenuOpening identifier such that you can use it in triggers)."},{"content":"&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, but this event will not be raised from the context menu being opened as a source.","pos":[1389,1579],"source":"       <xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source."},{"content":"The event is raised from the element that \"owns\" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.","pos":[1580,1733]},{"content":"It is possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property, but you should avoid this scenario (for details, see &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;).","pos":[1734,2010],"source":" It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName>)."},{"content":"The &lt;xref:System.Windows.Controls.ContextMenu&gt; class itself also has a similar event (&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;) but &lt;xref:System.Windows.Controls.ContextMenu.Opened&gt; does not provide you the opportunity to cancel the user action.","pos":[2017,2271],"source":"       The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_ContextMenuOpening\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt; to implement class handling for this event in derived classes.","pos":[2277,2700],"source":"<a name=\"routedEventInfo_ContextMenuOpening\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes."}]},{"pos":[88715,88727],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[89173,89273],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"></xref> routed event."},{"pos":[89286,89823],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[89993,90005],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[90431,90518],"content":"Identifies the <xref:System.Windows.FrameworkElement.ContextMenu*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.ContextMenu*&gt; dependency property.","pos":[0,87],"source":"Identifies the <xref:System.Windows.FrameworkElement.ContextMenu*> dependency property."}]},{"pos":[90697,90709],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[91073,91155],"content":"Gets or sets the cursor that displays when the mouse pointer is over this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the cursor that displays when the mouse pointer is over this element.","pos":[0,82]}]},{"pos":[91168,94754],"content":"When you set this property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string. The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value. See <xref:System.Windows.Input.Cursor> for details.       Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property. Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.       To revert the behavior of setting this property to the eventual default, set it to `null` again.       The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere. If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] application will be an arrow. However, the transient cursor changes are not set to the Cursor values of the elements when they are passed over. The Cursor property will only report non null values in cases where it was actually set, for instance through code or a style. Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event. The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event. This is the mechanism that produces the visually apparent cursor in most cases. If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the Cursor property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.       If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class. Setting Cursor in code requires one of the following:      -   Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance. Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.      -   Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.       Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust. For more information on custom cursors, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=\"dependencyPropertyInfo_Cursor\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.CursorProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you set this property in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor relies on type conversion for the &lt;xref:System.Windows.Input.Cursor&gt; class to evaluate the string.","pos":[0,275],"source":"When you set this property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string."},{"content":"The provided string should evaluate to a &lt;xref:System.Windows.Input.CursorType&gt; value.","pos":[276,362],"source":" The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value."},{"content":"See &lt;xref:System.Windows.Input.Cursor&gt; for details.","pos":[363,414],"source":" See <xref:System.Windows.Input.Cursor> for details."},{"content":"Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; property.","pos":[421,642],"source":"       Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property."},{"content":"Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.","pos":[643,857]},{"content":"To revert the behavior of setting this property to the eventual default, set it to <ph id=\"ph1\">`null`</ph> again.","pos":[864,960],"source":"       To revert the behavior of setting this property to the eventual default, set it to `null` again."},{"content":"The <ph id=\"ph1\">`null`</ph> default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.","pos":[967,1103],"source":"       The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere."},{"content":"If presented without programmatic values from any source, the default cursor that is visually over a <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> application will be an arrow.","pos":[1104,1303],"source":" If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] application will be an arrow."},{"content":"However, the transient cursor changes are not set to the Cursor values of the elements when they are passed over.","pos":[1304,1417]},{"content":"The Cursor property will only report non null values in cases where it was actually set, for instance through code or a style.","pos":[1418,1544]},{"content":"Each movement of the mouse over a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> application raises a &lt;xref:System.Windows.UIElement.QueryCursor&gt; event.","pos":[1545,1726],"source":" Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event."},{"content":"The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.","pos":[1727,1889]},{"content":"This is the mechanism that produces the visually apparent cursor in most cases.","pos":[1890,1969]},{"content":"If a &lt;xref:System.Windows.UIElement.QueryCursor&gt; handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the Cursor property at any level, unless &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; is set.","pos":[1970,2270],"source":" If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the Cursor property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set."},{"content":"If not are not creating a custom cursor, you typically set this property to a static property value of the &lt;xref:System.Windows.Input.Cursors&gt; class.","pos":[2277,2426],"source":"       If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class."},{"content":"Setting Cursor in code requires one of the following:      -   Call the &lt;xref:System.Windows.Input.Cursor&gt; constructor to get a &lt;xref:System.Windows.Input.Cursor&gt; instance.","pos":[2427,2599],"source":" Setting Cursor in code requires one of the following:      -   Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance."},{"content":"Both signatures of the &lt;xref:System.Windows.Input.Cursor&gt; constructor use streams or files, in anticipation that you are creating the &lt;xref:System.Windows.Input.Cursor&gt; object for a custom cursor.","pos":[2600,2796],"source":" Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor."},{"content":"-   Use the &lt;xref:System.Windows.Input.CursorConverter&gt; class and its &lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt; method to specify a cursor by &lt;xref:System.Windows.Input.CursorType&gt;, or a string that can evaluate to a &lt;xref:System.Windows.Input.CursorType&gt;, and cast the return to &lt;xref:System.Windows.Input.Cursor&gt;.","pos":[2802,3134],"source":"      -   Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>."},{"content":"Setting the &lt;xref:System.Windows.Input.Cursor&gt; to a custom value is not enabled in partial trust.","pos":[3141,3238],"source":"       Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust."},{"content":"For more information on custom cursors, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3239,3339],"source":" For more information on custom cursors, see [Input Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Cursor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.CursorProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[3345,3562],"source":"<a name=\"dependencyPropertyInfo_Cursor\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.CursorProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[95230,95455],"content":"The cursor to display. The default value is defined as <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> per this dependency property. However, the practical default at run time will come from a variety of factors.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cursor to display.","pos":[0,22]},{"content":"The default value is defined as <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> per this dependency property.","pos":[23,145],"source":" The default value is defined as <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> per this dependency property."},{"content":"However, the practical default at run time will come from a variety of factors.","pos":[146,225]}]},{"pos":[95908,95990],"content":"Identifies the <xref:System.Windows.FrameworkElement.Cursor*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; dependency property.","pos":[0,82],"source":"Identifies the <xref:System.Windows.FrameworkElement.Cursor*> dependency property."}]},{"pos":[96164,96176],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[96565,96647],"content":"Gets or sets the data context for an element when it participates in data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the data context for an element when it participates in data binding.","pos":[0,82]}]},{"pos":[96660,100298],"content":"*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.       Data context can be set directly to a [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] object, with the bindings evaluating to properties of that object. Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.       This dependency property inherits property values. If there are child elements without other values for DataContext established through local values or styles, then the property system will set the value to be the DataContext value of the nearest parent element with this value assigned.       Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>. For more information, see [How to: Specify the Binding Source](~/add/includes/ajax-current-ext-md.md).       In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], DataContext is most typically set to as a <xref:System.Windows.Data.Binding> declaration. You can use either property element syntax or attribute syntax. Attribute syntax is shown in the example on this page. You can also use code to set DataContext.       DataContext is a bindable property, to facilitate scenarios where one context might be bound to another. However, if you bind to DataContext, be careful to not create circular binding references (do not bind a DataContext to itself, which is possible to do because of the property value inheritance nature of the DataContext property).      <a name=\"xamlPropertyElementUsage_DataContext\"></a>    ## XAML Property Element Usage      ```   <object>     <object.DataContext>       <dataContextObject />     </object.DataContext>   </object>   ```      <a name=\"xamlAttributeUsage_DataContext\"></a>    ## XAML Attribute Usage      ```   <object DataContext=\"bindingUsage\"/>   - or -   <object DataContext=\"{resourceExtension contextResourceKey}\"/>   ```      <a name=\"xamlValues_DataContext\"></a>    ## XAML Values    *dataContextObject*    A directly embedded object that serves as data context for any bindings within the parent element. Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class. Alternatively, raw data of any [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object type intended for binding may be placed here, with the actual bindings defined later.       *bindingUsage*    A binding usage that evaluates to an appropriate data context. For details, see [Binding Markup Extension](~/add/includes/ajax-current-ext-md.md).       *resourceExtension*    One of the following:  or . This usage is used when referring to raw data defined as an object in resources. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).       *contextResourceKey*    The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.      <a name=\"dependencyPropertyInfo_DataContext\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.DataContextProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<bpt id=\"p1\">*</bpt>Data context<ept id=\"p1\">*</ept> is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.","pos":[0,213],"source":"*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path."},{"content":"Data context can be set directly to a <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> object, with the bindings evaluating to properties of that object.","pos":[220,386],"source":"       Data context can be set directly to a [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] object, with the bindings evaluating to properties of that object."},{"content":"Alternatively, you can set the data context to a &lt;xref:System.Windows.Data.DataSourceProvider&gt; object.","pos":[387,489],"source":" Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object."},{"content":"This dependency property inherits property values.","pos":[496,546]},{"content":"If there are child elements without other values for DataContext established through local values or styles, then the property system will set the value to be the DataContext value of the nearest parent element with this value assigned.","pos":[547,783]},{"content":"Alternatively, you can use one of the following properties of the &lt;xref:System.Windows.Data.Binding&gt; class to specify the binding source explicitly: &lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;, &lt;xref:System.Windows.Data.Binding.Source%2A&gt;, or &lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;.","pos":[790,1092],"source":"       Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Specify the Binding Source<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1093,1195],"source":" For more information, see [How to: Specify the Binding Source](~/add/includes/ajax-current-ext-md.md)."},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, DataContext is most typically set to as a &lt;xref:System.Windows.Data.Binding&gt; declaration.","pos":[1202,1361],"source":"       In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], DataContext is most typically set to as a <xref:System.Windows.Data.Binding> declaration."},{"content":"You can use either property element syntax or attribute syntax.","pos":[1362,1425]},{"content":"Attribute syntax is shown in the example on this page.","pos":[1426,1480]},{"content":"You can also use code to set DataContext.","pos":[1481,1522]},{"content":"DataContext is a bindable property, to facilitate scenarios where one context might be bound to another.","pos":[1529,1633]},{"content":"However, if you bind to DataContext, be careful to not create circular binding references (do not bind a DataContext to itself, which is possible to do because of the property value inheritance nature of the DataContext property).","pos":[1634,1864]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlPropertyElementUsage_DataContext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph1\">```   &lt;object&gt;     &lt;object.DataContext&gt;       &lt;dataContextObject /&gt;     &lt;/object.DataContext&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlAttributeUsage_DataContext\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph2\">```   &lt;object DataContext=\"bindingUsage\"/&gt;   - or -   &lt;object DataContext=\"{resourceExtension contextResourceKey}\"/&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_DataContext\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>dataContextObject<ept id=\"p4\">*</ept>    A directly embedded object that serves as data context for any bindings within the parent element.","pos":[1870,2464],"source":"<a name=\"xamlPropertyElementUsage_DataContext\"></a>    ## XAML Property Element Usage      ```   <object>     <object.DataContext>       <dataContextObject />     </object.DataContext>   </object>   ```      <a name=\"xamlAttributeUsage_DataContext\"></a>    ## XAML Attribute Usage      ```   <object DataContext=\"bindingUsage\"/>   - or -   <object DataContext=\"{resourceExtension contextResourceKey}\"/>   ```      <a name=\"xamlValues_DataContext\"></a>    ## XAML Values    *dataContextObject*    A directly embedded object that serves as data context for any bindings within the parent element."},{"content":"Typically, this object is a &lt;xref:System.Windows.Data.Binding&gt; or another &lt;xref:System.Windows.Data.BindingBase&gt; derived class.","pos":[2465,2592],"source":" Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class."},{"content":"Alternatively, raw data of any <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> object type intended for binding may be placed here, with the actual bindings defined later.","pos":[2593,2780],"source":" Alternatively, raw data of any [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object type intended for binding may be placed here, with the actual bindings defined later."},{"content":"<bpt id=\"p1\">*</bpt>bindingUsage<ept id=\"p1\">*</ept>    A binding usage that evaluates to an appropriate data context.","pos":[2787,2867],"source":"*bindingUsage*    A binding usage that evaluates to an appropriate data context."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Binding Markup Extension<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2868,2951],"source":" For details, see [Binding Markup Extension](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">*</bpt>resourceExtension<ept id=\"p1\">*</ept>    One of the following:  or .","pos":[2958,3008],"source":"*resourceExtension*    One of the following:  or ."},{"content":"This usage is used when referring to raw data defined as an object in resources.","pos":[3009,3089]},{"content":"See <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3090,3150],"source":" See [XAML Resources](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">*</bpt>contextResourceKey<ept id=\"p1\">*</ept>    The key identifier for the object being requested from within a &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[3157,3286],"source":"*contextResourceKey*    The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_DataContext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.DataContextProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|","pos":[3292,3574],"source":"<a name=\"dependencyPropertyInfo_DataContext\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.DataContextProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|"}]},{"pos":[100951,100985],"content":"The object to use as data context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to use as data context.","pos":[0,34]}]},{"pos":[101463,101517],"content":"Occurs when the data context for this element changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the data context for this element changes.","pos":[0,54]}]},{"pos":[101530,102370],"content":"For an explanation of data contexts and data binding, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).      > [!IMPORTANT] >  When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected. This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself. All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results. The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the DataContextChanged event. The reevaluations can occur before the event, after the event, or in any mixture.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For an explanation of data contexts and data binding, see <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[0,121],"source":"For an explanation of data contexts and data binding, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When the &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; for an element changes, all data-bound properties on this element are potentially affected.","pos":[127,299],"source":"      > [!IMPORTANT] >  When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected."},{"content":"This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.","pos":[300,465]},{"content":"All such existing bindings must re-interpret the new &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; and will reevaluate the binding results.","pos":[466,613],"source":" All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results."},{"content":"The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the DataContextChanged event.","pos":[614,755]},{"content":"The reevaluations can occur before the event, after the event, or in any mixture.","pos":[756,837]}]},{"pos":[102577,102589],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[103015,103102],"content":"Identifies the <xref:System.Windows.FrameworkElement.DataContext*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.DataContext*&gt; dependency property.","pos":[0,87],"source":"Identifies the <xref:System.Windows.FrameworkElement.DataContext*> dependency property."}]},{"pos":[103281,103293],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[103702,103809],"content":"Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.","pos":[0,107]}]},{"pos":[103822,105288],"content":"This property is typically not set through any of its direct property accessors. Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class. When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).       A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists. This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.       If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.      <a name=\"dependencyPropertyInfo_DefaultStyleKey\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is typically not set through any of its direct property accessors.","pos":[0,80]},{"content":"Instead, you override the type-specific metadata of this dependency property every time you create a new &lt;xref:System.Windows.FrameworkElement&gt; derived class.","pos":[81,239],"source":" Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class."},{"content":"When you derive a control, call the &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; method against the &lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt; identifier, within the static constructor of the control derived class (or equivalent class initialization).","pos":[240,527],"source":" When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization)."},{"content":"A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.","pos":[534,715]},{"content":"This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.","pos":[716,978]},{"content":"If you want your element or control to deliberately not use theme styles, set the &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[985,1150],"source":"       If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_DefaultStyleKey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[1156,1452],"source":"<a name=\"dependencyPropertyInfo_DefaultStyleKey\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[107031,107175],"content":"The style key. To work correctly as part of theme style lookup, this value is expected to be the <xref:System.Type> of the control being styled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The style key. To work correctly as part of theme style lookup, this value is expected to be the <xref:System.Type> of the control being styled.","pos":[0,144],"nodes":[{"content":"The style key.","pos":[0,14]},{"content":"To work correctly as part of theme style lookup, this value is expected to be the &lt;xref:System.Type&gt; of the control being styled.","pos":[15,144],"source":" To work correctly as part of theme style lookup, this value is expected to be the <xref:System.Type> of the control being styled."}]}]},{"pos":[107682,107773],"content":"Identifies the <xref:System.Windows.FrameworkElement.DefaultStyleKey*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt; dependency property.","pos":[0,91],"source":"Identifies the <xref:System.Windows.FrameworkElement.DefaultStyleKey*> dependency property."}]},{"pos":[107959,107971],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[108344,108414],"content":"Indicates that the initialization process for the element is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that the initialization process for the element is complete.","pos":[0,70]}]},{"pos":[108426,108884],"content":"If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event. Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event. Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.","pos":[0,458],"nodes":[{"content":"If &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was previously called, the base implementation will raise the &lt;xref:System.Windows.FrameworkElement.Initialized&gt; event.","pos":[0,174],"source":"If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event."},{"content":"Otherwise, if &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was not called or it could not be determined whether &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was called, &lt;xref:System.Windows.FrameworkElement.Initialized&gt; is not raised and an exception is thrown instead.","pos":[175,458],"source":" Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead."}]}]},{"pos":[109136,109258],"content":"EndInit was called without <xref:System.Windows.FrameworkElement.BeginInit*> having previously been called on the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"EndInit was called without &lt;xref:System.Windows.FrameworkElement.BeginInit*&gt; having previously been called on the element.","pos":[0,122],"source":"EndInit was called without <xref:System.Windows.FrameworkElement.BeginInit*> having previously been called on the element."}]},{"pos":[109667,109722],"content":"Finds an element that has the provided identifier name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds an element that has the provided identifier name.","pos":[0,55]}]},{"pos":[109735,109997],"content":"If the element has child elements, these child elements are all searched recursively for the requested named element.       FindName operates within the current element's namescope. For details, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the element has child elements, these child elements are all searched recursively for the requested named element.","pos":[0,117]},{"content":"FindName operates within the current element's namescope.","pos":[124,181]},{"content":"For details, see <bpt id=\"p1\">[</bpt>WPF XAML Namescopes<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[182,260],"source":" For details, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[110136,110170],"content":"The name of the requested element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the requested element.","pos":[0,34]}]},{"pos":[110228,110357],"content":"The requested element. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no matching element was found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested element.","pos":[0,22]},{"content":"This can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no matching element was found.","pos":[23,129],"source":" This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no matching element was found."}]},{"pos":[110857,110968],"content":"Searches for a resource with the specified key, and throws an exception if the requested resource is not found.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a resource with the specified key, and throws an exception if the requested resource is not found.","pos":[0,111]}]},{"pos":[110981,112336],"content":"> [!IMPORTANT] >  If you call this method for a key that cannot be found, an exception is thrown. If you do not want to handle exceptions that result from calling FindResource, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead. <xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.       If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources. This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup. For more information about resource lookup, see [XAML Resources](~/add/includes/ajax-current-ext-md.md).       Typically, you immediately cast a FindResource return value to the type of the property that you setting with the returned resource value.       Resource keys are not necessarily strings. For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention. For details, see [Styling and Templating](~/add/includes/ajax-current-ext-md.md) or [XAML Resources](../Topic/XAML%20Resources.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  If you call this method for a key that cannot be found, an exception is thrown.","pos":[0,97],"source":"> [!IMPORTANT] >  If you call this method for a key that cannot be found, an exception is thrown."},{"content":"If you do not want to handle exceptions that result from calling FindResource, call &lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt; instead.","pos":[98,248],"source":" If you do not want to handle exceptions that result from calling FindResource, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead."},{"content":"&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt; returns <ph id=\"ph1\">`null`</ph> when a requested resource cannot be found, and does not throw an exception.","pos":[249,397],"source":" <xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception."},{"content":"If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.","pos":[404,578]},{"content":"This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.","pos":[579,715]},{"content":"For more information about resource lookup, see <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[716,820],"source":" For more information about resource lookup, see [XAML Resources](~/add/includes/ajax-current-ext-md.md)."},{"content":"Typically, you immediately cast a FindResource return value to the type of the property that you setting with the returned resource value.","pos":[827,965]},{"content":"Resource keys are not necessarily strings.","pos":[972,1014]},{"content":"For instance, styles for controls at the theme level are deliberately keyed to the &lt;xref:System.Type&gt; of the control, and application or page styles for controls typically use this same key convention.","pos":[1015,1216],"source":" For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Styling and Templating<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id=\"p2\">[</bpt>XAML Resources<ept id=\"p2\">](../Topic/XAML%20Resources.md)</ept>.","pos":[1217,1348],"source":" For details, see [Styling and Templating](~/add/includes/ajax-current-ext-md.md) or [XAML Resources](../Topic/XAML%20Resources.md)."}]},{"pos":[112904,112950],"content":"The key identifier for the requested resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier for the requested resource.","pos":[0,46]}]},{"pos":[113008,113224],"content":"The requested resource. If no resource with the provided key was found, an exception is thrown. An <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref> value might also be returned in the exception case.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested resource.","pos":[0,23]},{"content":"If no resource with the provided key was found, an exception is thrown.","pos":[24,95]},{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value might also be returned in the exception case.","pos":[96,216],"source":" An <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref> value might also be returned in the exception case."}]},{"pos":[113448,113935],"content":"<code>resourceKey</code> was not found and an event handler does not exist for the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event.       -or-       <code>resourceKey</code> was not found and the <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> in the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;resourceKey&lt;/code&gt;</ph> was not found and an event handler does not exist for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[0,165],"source":"<code>resourceKey</code> was not found and an event handler does not exist for the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;resourceKey&lt;/code&gt;</ph> was not found and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*&gt;</ph> property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","pos":[172,473],"source":"       -or-       <code>resourceKey</code> was not found and the <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> in the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event."}]},{"pos":[114039,114128],"content":"<ph id=\"ph1\">&lt;code&gt;resourceKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>resourceKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[114510,114684],"content":"Gets or sets the direction that text and other <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> elements flow within any parent element that controls their layout.","needQuote":true,"needEscape":true,"source":"Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout."},{"pos":[117625,117867],"content":"The direction that text and other [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] elements flow within their parent element, as a value of the enumeration. The default value is <xref href=\"System.Windows.FlowDirection\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The direction that text and other <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> elements flow within their parent element, as a value of the enumeration.","pos":[0,170],"source":"The direction that text and other [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] elements flow within their parent element, as a value of the enumeration."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Windows.FlowDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[171,242],"source":" The default value is <xref href=\"System.Windows.FlowDirection\"></xref>."}]},{"pos":[118362,118451],"content":"Identifies the <xref:System.Windows.FrameworkElement.FlowDirection*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; dependency property.","pos":[0,89],"source":"Identifies the <xref:System.Windows.FrameworkElement.FlowDirection*> dependency property."}]},{"pos":[118632,118644],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[119058,119228],"content":"Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.","pos":[0,170]}]},{"pos":[119241,121738],"content":"This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata. This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.       Conceptually, the visual behavior of focus applied to a control should be coherent from control to control. The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme. Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus. If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style. For more information on the design intention of FocusVisualStyle and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/add/includes/ajax-current-ext-md.md).      <a name=\"xamlAttributeUsage_FocusVisualStyle\"></a>    ## XAML Attribute Usage      ```   <object FocusVisualStyle=\"{resourceExtension styleResourceKey}\"/>   ```      <a name=\"xamlPropertyElementUsage_FocusVisualStyle\"></a>    ## XAML Property Element Usage      <a name=\"xamlValues_FocusVisualStyle\"></a>    ## XAML Values    *resourceExtension*    One of the following: , or . See [XAML Resources](~/add/includes/ajax-current-ext-md.md).       *styleResourceKey*    The key that identifies the style being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.      > [!NOTE] >  Property element syntax is technically possible, but not recommended. See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md). A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.      <a name=\"dependencyPropertyInfo_FocusVisualStyle\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property affects visual appearance but does not report &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt; in metadata.","pos":[0,137],"source":"This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata."},{"content":"This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.","pos":[138,318]},{"content":"Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.","pos":[325,432]},{"content":"The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.","pos":[433,554]},{"content":"Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.","pos":[555,753]},{"content":"If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as &lt;xref:System.Windows.UIElement.IsFocused%2A&gt; or &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;, and to do so in a way that does not visually interfere with any existing focus visual style.","pos":[754,1148],"source":" If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style."},{"content":"For more information on the design intention of FocusVisualStyle and alternative focus properties, see <bpt id=\"p1\">[</bpt>Styling for Focus in Controls, and FocusVisualStyle<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1149,1345],"source":" For more information on the design intention of FocusVisualStyle and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_FocusVisualStyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object FocusVisualStyle=\"{resourceExtension styleResourceKey}\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlPropertyElementUsage_FocusVisualStyle\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <bpt id=\"p3\">&lt;a name=\"xamlValues_FocusVisualStyle\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>resourceExtension<ept id=\"p4\">*</ept>    One of the following: , or .","pos":[1351,1728],"source":"<a name=\"xamlAttributeUsage_FocusVisualStyle\"></a>    ## XAML Attribute Usage      ```   <object FocusVisualStyle=\"{resourceExtension styleResourceKey}\"/>   ```      <a name=\"xamlPropertyElementUsage_FocusVisualStyle\"></a>    ## XAML Property Element Usage      <a name=\"xamlValues_FocusVisualStyle\"></a>    ## XAML Values    *resourceExtension*    One of the following: , or ."},{"content":"See <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1729,1789],"source":" See [XAML Resources](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">*</bpt>styleResourceKey<ept id=\"p1\">*</ept>    The key that identifies the style being requested.","pos":[1796,1868],"source":"*styleResourceKey*    The key that identifies the style being requested."},{"content":"The key refers to an existing resource in a &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[1869,1954],"source":" The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Property element syntax is technically possible, but not recommended.","pos":[1960,2042],"source":"      > [!NOTE] >  Property element syntax is technically possible, but not recommended."},{"content":"See <bpt id=\"p1\">[</bpt>Inline Styles and Templates<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2043,2116],"source":" See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md)."},{"content":"A binding reference using  or &lt;xref:System.Windows.Data.Binding&gt; is also possible, but uncommon.","pos":[2117,2213],"source":" A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_FocusVisualStyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[2219,2456],"source":"<a name=\"dependencyPropertyInfo_FocusVisualStyle\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[121886,122159],"content":"The desired style to apply on focus. The default value as declared in the dependency property is an empty static <xref href=\"System.Windows.Style\"></xref>. However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.","needQuote":true,"needEscape":true,"nodes":[{"content":"The desired style to apply on focus.","pos":[0,36]},{"content":"The default value as declared in the dependency property is an empty static <bpt id=\"p1\">&lt;xref href=\"System.Windows.Style\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[37,155],"source":" The default value as declared in the dependency property is an empty static <xref href=\"System.Windows.Style\"></xref>."},{"content":"However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.","pos":[156,273]}]},{"pos":[122672,122764],"content":"Identifies the <xref:System.Windows.FrameworkElement.FocusVisualStyle*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt; dependency property.","pos":[0,92],"source":"Identifies the <xref:System.Windows.FrameworkElement.FocusVisualStyle*> dependency property."}]},{"pos":[122948,122960],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[123349,123624],"content":"Gets or sets a value that indicates whether this <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> should force the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> to render the cursor as declared by the &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; property.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether this <xref href=\"System.Windows.FrameworkElement\"></xref> should force the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <xref:System.Windows.FrameworkElement.Cursor*> property."},{"pos":[123637,124269],"content":"If you set this property to `true` you will override the cursor preferences established by child elements. Doing so in general application [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors. Setting ForceCursor is more appropriate in control subclassing or compositing scenarios.      <a name=\"dependencyPropertyInfo_ForceCursor\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you set this property to <ph id=\"ph1\">`true`</ph> you will override the cursor preferences established by child elements.","pos":[0,106],"source":"If you set this property to `true` you will override the cursor preferences established by child elements."},{"content":"Doing so in general application <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> might be confusing for the user, particularly if child elements are attempting to specify cursors.","pos":[107,300],"source":" Doing so in general application [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors."},{"content":"Setting ForceCursor is more appropriate in control subclassing or compositing scenarios.","pos":[301,389]},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_ForceCursor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[395,622],"source":"<a name=\"dependencyPropertyInfo_ForceCursor\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[124560,124957],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if cursor presentation while over this element is forced to use current <xref:System.Windows.FrameworkElement.Cursor*> settings for the cursor (including on all child elements); otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if cursor presentation while over this element is forced to use current &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; settings for the cursor (including on all child elements); otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,312],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if cursor presentation while over this element is forced to use current <xref:System.Windows.FrameworkElement.Cursor*> settings for the cursor (including on all child elements); otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[313,397],"source":" The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[125440,125527],"content":"Identifies the <xref:System.Windows.FrameworkElement.ForceCursor*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.ForceCursor*&gt; dependency property.","pos":[0,87],"source":"Identifies the <xref:System.Windows.FrameworkElement.ForceCursor*> dependency property."}]},{"pos":[125706,125718],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[126280,126405],"content":"Returns the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.BindingExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the binding on the specified property.","needQuote":true,"needEscape":true,"source":"Returns the <xref href=\"System.Windows.Data.BindingExpression\"></xref> that represents the binding on the specified property."},{"pos":[126418,126876],"content":"Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.       This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName> method. GetBindingExpression passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Checking the return value for <ph id=\"ph1\">`null`</ph> is a technique you can use to determine whether a property has an active binding.","pos":[0,118],"source":"Checking the return value for `null` is a technique you can use to determine whether a property has an active binding."},{"content":"This method is really just a convenience wrapper around the &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt; method.","pos":[125,286],"source":"       This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName> method."},{"content":"GetBindingExpression passes the current instance and the <ph id=\"ph1\">`dp`</ph> parameter to &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;.","pos":[287,456],"source":" GetBindingExpression passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName>."}]},{"pos":[127101,127191],"content":"The target <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to get the binding from.","needQuote":true,"needEscape":true,"source":"The target <xref href=\"System.Windows.DependencyProperty\"></xref> to get the binding from."},{"pos":[127273,127460],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.BindingExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the target property has an active binding; otherwise, returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.Data.BindingExpression\"></xref> if the target property has an active binding; otherwise, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[128058,128223],"content":"Gets the value of the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; attached property for the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the value of the <xref:System.Windows.FrameworkElement.FlowDirection*> attached property for the specified <xref href=\"System.Windows.DependencyObject\"></xref>."},{"pos":[128235,128756],"content":"The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element. To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The main purpose of this method is to support attached property syntax for the &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; property, therefore allowing child elements of a provided &lt;xref:System.Windows.FrameworkElement&gt; to specify flow direction for the arrangement within their parent element.","pos":[0,306],"source":"The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element."},{"content":"To get the value on the current &lt;xref:System.Windows.FrameworkElement&gt;, use the direct <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> accessor &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.","pos":[307,521],"source":" To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>."}]},{"pos":[128980,129062],"content":"The element to return a <xref:System.Windows.FrameworkElement.FlowDirection*> for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to return a &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; for.","pos":[0,82],"source":"The element to return a <xref:System.Windows.FrameworkElement.FlowDirection*> for."}]},{"pos":[129135,129195],"content":"The requested flow direction, as a value of the enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested flow direction, as a value of the enumeration.","pos":[0,60]}]},{"pos":[129714,129871],"content":"Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.","pos":[0,157],"nodes":[{"content":"Returns a geometry for a clipping mask.","pos":[0,39]},{"content":"The mask applies if the layout system attempts to arrange an element that is larger than the available display space.","pos":[40,157]}]}]},{"pos":[129884,130968],"content":"Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.       A returned null reference indicates that no clipping will occur. The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`. This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName>. The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations. Several subclasses of <xref:System.Windows.FrameworkElement> override this method again. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Margins will be subtracted from the <ph id=\"ph1\">`layoutSlotSize`</ph> as part of layout system behavior.","pos":[0,87],"source":"Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior."},{"content":"A returned null reference indicates that no clipping will occur.","pos":[94,158]},{"content":"The default implementation always returns <ph id=\"ph1\">`null`</ph> when &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id=\"ph2\">`false`</ph>.","pos":[159,272],"source":" The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`."},{"content":"This method overrides &lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;.","pos":[273,369],"source":" This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Windows.FrameworkElement&gt; implementation uses &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; in its calculations.","pos":[370,560],"source":" The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations."},{"content":"Several subclasses of &lt;xref:System.Windows.FrameworkElement&gt; override this method again.","pos":[561,649],"source":" Several subclasses of <xref:System.Windows.FrameworkElement> override this method again."},{"content":"&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;, overrides to always return <ph id=\"ph1\">`null`</ph> because adorners are often deliberately outside the ordinary bounds.","pos":[650,835],"source":" <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds."},{"content":"&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt; and &lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt; return <ph id=\"ph1\">`null`</ph> if &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id=\"ph2\">`false`</ph>.","pos":[836,1082],"source":" <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`."}]},{"pos":[131186,131252],"content":"The size of the part of the element that does visual presentation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the part of the element that does visual presentation.","pos":[0,66]}]},{"pos":[131326,131348],"content":"The clipping geometry.","needQuote":true,"needEscape":true,"nodes":[{"content":"The clipping geometry.","pos":[0,22]}]},{"pos":[131873,131998],"content":"Returns the named element in the visual tree of an instantiated <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.ControlTemplate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the named element in the visual tree of an instantiated <xref href=\"System.Windows.Controls.ControlTemplate\"></xref>."},{"pos":[132011,133324],"content":"Templates in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope. This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template. Call the GetTemplateChild method to return references to objects that come from the template after it is instantiated. You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.       <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> supplies the same function as this method. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it. Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> when you need to get an element outside of its parent control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Templates in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> have a self-contained namescope.","pos":[0,121],"source":"Templates in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope."},{"content":"This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.","pos":[122,284]},{"content":"Call the GetTemplateChild method to return references to objects that come from the template after it is instantiated.","pos":[285,403]},{"content":"You cannot use the &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; method to find items from templates because &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; acts in a more general scope, and there is no connection between the &lt;xref:System.Windows.Controls.ControlTemplate&gt; class itself and the instantiated template once it is applied.","pos":[404,797],"source":" You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied."},{"content":"&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; supplies the same function as this method.","pos":[804,923],"source":"       <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> supplies the same function as this method."},{"content":"&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.","pos":[924,1167],"source":" <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it."},{"content":"Use &lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; when you need to get an element outside of its parent control.","pos":[1168,1311],"source":" Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> when you need to get an element outside of its parent control."}]},{"pos":[133509,133535],"content":"Name of the child to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the child to find.","pos":[0,26]}]},{"pos":[133611,133745],"content":"The requested element. May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no element of the requested name exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested element.","pos":[0,22]},{"content":"May be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no element of the requested name exists.","pos":[23,134],"source":" May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no element of the requested name exists."}]},{"pos":[134220,134304],"content":"Returns an alternative logical parent for this element if there is no visual parent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an alternative logical parent for this element if there is no visual parent.","pos":[0,84]}]},{"pos":[134316,134694],"content":"This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName>. The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value. Derived class implementations might return alternate parent relationships.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName>. The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value. Derived class implementations might return alternate parent relationships.","pos":[0,378],"nodes":[{"content":"This method overrides &lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;.","pos":[0,98],"source":"This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName>."},{"content":"The default &lt;xref:System.Windows.FrameworkElement&gt; implementation returns the expected single visual parent, which is the same result as getting the &lt;xref:System.Windows.FrameworkElement.Parent%2A&gt; value.","pos":[99,303],"source":" The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value."},{"content":"Derived class implementations might return alternate parent relationships.","pos":[304,378]}]}]},{"pos":[134883,135069],"content":"Returns something other than <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whenever a WPF framework-level implementation of this method has a non-visual parent connection.","needQuote":true,"needEscape":true,"source":"Returns something other than <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> whenever a WPF framework-level implementation of this method has a non-visual parent connection."},{"pos":[135581,135755],"content":"Overrides &lt;xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName&gt;, and returns a child at the specified index from a collection of child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Overrides <ph id=\"ph1\">&amp;lt;</ph>xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>, and returns a child at the specified index from a collection of child elements.","pos":[0,174],"source":"Overrides &lt;xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName&gt;, and returns a child at the specified index from a collection of child elements."}]},{"pos":[135767,135957],"content":"In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero. The content model for GetVisualChild supports either zero or one child elements, not a collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero. The content model for GetVisualChild supports either zero or one child elements, not a collection.","pos":[0,190],"nodes":[{"content":"In the &lt;xref:System.Windows.FrameworkElement&gt; implementation, the only valid index is zero.","pos":[0,91],"source":"In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero."},{"content":"The content model for GetVisualChild supports either zero or one child elements, not a collection.","pos":[92,190]}]}]},{"pos":[137026,137096],"content":"The zero-based index of the requested child element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the requested child element in the collection.","pos":[0,70]}]},{"pos":[137168,137344],"content":"The requested child element. This should not return <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; if the provided index is out of range, an exception is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested child element.","pos":[0,28]},{"content":"This should not return <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; if the provided index is out of range, an exception is thrown.","pos":[29,176],"source":" This should not return <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; if the provided index is out of range, an exception is thrown."}]},{"pos":[137768,137817],"content":"Gets or sets the suggested height of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the suggested height of the element.","pos":[0,49]}]},{"pos":[137830,142264],"content":"Height is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information. The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>. If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, Height.       If this element is a child element within some other element, then setting this property to a value is really only a suggested value. The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process. In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the Height on <xref:System.Windows.Window>. (For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)       In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=fullName>. This is how you specify auto sizing behavior in code. In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] you set the value to the string \"Auto\" (case insensitive) to enable the auto sizing behavior. Auto sizing behavior implies that the element will fill the height available to it. Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.       The return value of this property is always the same as any value that was set to it. In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary. This can happen either statically because the layout rejected the suggested size for some reason, or momentarily. The layout system itself works asynchronously relative to the property system's set of Height and may not have processed that particular sizing property change yet.       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.       In addition to the validation check, there is a nondeterministic upper value bound for Height that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=fullName> but smaller than <xref:System.Double.MaxValue?displayProperty=fullName>). If you exceed this bound, the element will not render, and no exception is thrown. Do not set Height to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.      <a name=\"xamlAttributeUsage_Height\"></a>    ## XAML Attribute Usage      ```   <object Height=\"double\"/>   - or -   <object Height=\"qualifiedDouble\"/>   - or -   <object Height=\"Auto\"/>   ```      <a name=\"xamlValues_Height\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0. See Remarks for upper bound information. This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.       *qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.       `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px       **Auto**    Enables autosizing behavior. See Remarks.      <a name=\"dependencyPropertyInfo_Height\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.HeightProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Height is one of three writable properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.","pos":[0,117],"source":"Height is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information."},{"content":"The other two are &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.","pos":[118,244],"source":" The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>."},{"content":"If there is a conflict between these values, the order of application for actual height determination is that first &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, and finally, if it is within bounds, Height.","pos":[245,532],"source":" If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, Height."},{"content":"If this element is a child element within some other element, then setting this property to a value is really only a suggested value.","pos":[539,672]},{"content":"The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.","pos":[673,819]},{"content":"In practical terms, a &lt;xref:System.Windows.FrameworkElement&gt; is almost always the child element of something else; even when you set the Height on &lt;xref:System.Windows.Window&gt;.","pos":[820,996],"source":" In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the Height on <xref:System.Windows.Window>."},{"content":"(For &lt;xref:System.Windows.Window&gt;, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)       In addition to acceptable &lt;xref:System.Double&gt; values, this property can also be &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.","pos":[997,1320],"source":" (For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)       In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=fullName>."},{"content":"This is how you specify auto sizing behavior in code.","pos":[1321,1374]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string \"Auto\" (case insensitive) to enable the auto sizing behavior.","pos":[1375,1537],"source":" In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] you set the value to the string \"Auto\" (case insensitive) to enable the auto sizing behavior."},{"content":"Auto sizing behavior implies that the element will fill the height available to it.","pos":[1538,1621]},{"content":"Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.","pos":[1622,1806]},{"content":"The return value of this property is always the same as any value that was set to it.","pos":[1813,1898]},{"content":"In contrast, the value of the &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; may vary.","pos":[1899,1993],"source":" In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary."},{"content":"This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.","pos":[1994,2107]},{"content":"The layout system itself works asynchronously relative to the property system's set of Height and may not have processed that particular sizing property change yet.","pos":[2108,2272]},{"content":"The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.","pos":[2279,2408],"source":"       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism."},{"content":"If you attempt to set an invalid value, a run-time exception is thrown.","pos":[2409,2480]},{"content":"In addition to the validation check, there is a nondeterministic upper value bound for Height that is enforced by the layout system (this is a very large number, larger than &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt; but smaller than &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).","pos":[2487,2789],"source":"       In addition to the validation check, there is a nondeterministic upper value bound for Height that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=fullName> but smaller than <xref:System.Double.MaxValue?displayProperty=fullName>)."},{"content":"If you exceed this bound, the element will not render, and no exception is thrown.","pos":[2790,2872]},{"content":"Do not set Height to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.","pos":[2873,3037]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Height\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object Height=\"double\"/&gt;   - or -   &lt;object Height=\"qualifiedDouble\"/&gt;   - or -   &lt;object Height=\"Auto\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Height\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>double<ept id=\"p3\">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.","pos":[3043,3416],"source":"<a name=\"xamlAttributeUsage_Height\"></a>    ## XAML Attribute Usage      ```   <object Height=\"double\"/>   - or -   <object Height=\"qualifiedDouble\"/>   - or -   <object Height=\"Auto\"/>   ```      <a name=\"xamlValues_Height\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0."},{"content":"See Remarks for upper bound information.","pos":[3417,3457]},{"content":"This value is interpreted as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.","pos":[3458,3571],"source":" This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement."},{"content":"Strings need not explicitly include decimal points.","pos":[3572,3623]},{"content":"For instance a value of <ph id=\"ph1\">`1`</ph> is acceptable.","pos":[3624,3666],"source":" For instance a value of `1` is acceptable."},{"content":"<bpt id=\"p1\">*</bpt>qualifiedDouble<ept id=\"p1\">*</ept>    A <bpt id=\"p2\">*</bpt>double<ept id=\"p2\">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id=\"ph1\">`px`</ph>, <ph id=\"ph2\">`in`</ph>, <ph id=\"ph3\">`cm`</ph>, <ph id=\"ph4\">`pt`</ph>.","pos":[3673,3813],"source":"*qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`."},{"content":"<ph id=\"ph1\">`px`</ph> (default) is <ph id=\"ph2\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id=\"ph3\">`in`</ph> is inches; 1in==96px       <ph id=\"ph4\">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id=\"ph5\">`pt`</ph> is points; 1pt==(96/72) px       <bpt id=\"p1\">**</bpt>Auto<ept id=\"p1\">**</ept>    Enables autosizing behavior.","pos":[3820,4073],"source":"`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px       **Auto**    Enables autosizing behavior."},{"content":"See Remarks.","pos":[4074,4086]},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Height\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.HeightProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[4092,4370],"source":"<a name=\"dependencyPropertyInfo_Height\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.HeightProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[142381,142649],"content":"The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is &lt;xref:System.Double?displayProperty=fullName&gt;. This value must be equal to or greater than 0.0. See Remarks for upper bound information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the element, in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,104],"source":"The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is <ph id=\"ph1\">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[105,178],"source":" The default value is &lt;xref:System.Double?displayProperty=fullName&gt;."},{"content":"This value must be equal to or greater than 0.0.","pos":[179,227]},{"content":"See Remarks for upper bound information.","pos":[228,268]}]},{"pos":[143102,143184],"content":"Identifies the <xref:System.Windows.FrameworkElement.Height*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Height*&gt; dependency property.","pos":[0,82],"source":"Identifies the <xref:System.Windows.FrameworkElement.Height*> dependency property."}]},{"pos":[143358,143370],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[143799,143955],"content":"Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.","pos":[0,156]}]},{"pos":[143968,146017],"content":"When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting HorizontalAlignment to <xref:System.Windows.HorizontalAlignment>.       HorizontalAlignment is the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \"default\" value set differently in subclassed elements, particularly controls. This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently. For example, the apparent \"default\" of HorizontalAlignment for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment>, even though <xref:System.Windows.Controls.Label> inherits HorizontalAlignment direct from <xref:System.Windows.FrameworkElement>. This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.       <xref:System.Windows.Controls.Canvas> does not use HorizontalAlignment when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.       When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment>.      <a name=\"dependencyPropertyInfo_HorizontalAlignment\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting HorizontalAlignment to &lt;xref:System.Windows.HorizontalAlignment&gt;.","pos":[0,318],"source":"When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting HorizontalAlignment to <xref:System.Windows.HorizontalAlignment>."},{"content":"HorizontalAlignment is the <ph id=\"ph1\">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.","pos":[325,477],"source":"       HorizontalAlignment is the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property."},{"content":"This particular dependency property quite frequently has its apparent \"default\" value set differently in subclassed elements, particularly controls.","pos":[478,626]},{"content":"This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.","pos":[627,885]},{"content":"For example, the apparent \"default\" of HorizontalAlignment for a &lt;xref:System.Windows.Controls.Label&gt; control will be &lt;xref:System.Windows.HorizontalAlignment&gt;, even though &lt;xref:System.Windows.Controls.Label&gt; inherits HorizontalAlignment direct from &lt;xref:System.Windows.FrameworkElement&gt;.","pos":[886,1176],"source":" For example, the apparent \"default\" of HorizontalAlignment for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment>, even though <xref:System.Windows.Controls.Label> inherits HorizontalAlignment direct from <xref:System.Windows.FrameworkElement>."},{"content":"This is because that value was reset within the default style of &lt;xref:System.Windows.Controls.Label&gt;, within the style's control template.","pos":[1177,1316],"source":" This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template."},{"content":"&lt;xref:System.Windows.Controls.Canvas&gt; does not use HorizontalAlignment when composing layout, because &lt;xref:System.Windows.Controls.Canvas&gt; is based on absolute positioning.","pos":[1323,1496],"source":"       <xref:System.Windows.Controls.Canvas> does not use HorizontalAlignment when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning."},{"content":"When inherited by &lt;xref:System.Windows.Controls.Label&gt; or derived classes, &lt;xref:System.Windows.Controls.Label&gt; redefines the default value of this dependency property to be &lt;xref:System.Windows.HorizontalAlignment&gt;.","pos":[1503,1719],"source":"       When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment>."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_HorizontalAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|","pos":[1725,2029],"source":"<a name=\"dependencyPropertyInfo_HorizontalAlignment\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|"}]},{"pos":[146196,146330],"content":"A horizontal alignment setting, as a value of the enumeration. The default is <xref href=\"System.Windows.HorizontalAlignment\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A horizontal alignment setting, as a value of the enumeration.","pos":[0,62]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Windows.HorizontalAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[63,134],"source":" The default is <xref href=\"System.Windows.HorizontalAlignment\"></xref>."}]},{"pos":[146861,146956],"content":"Identifies the <xref:System.Windows.FrameworkElement.HorizontalAlignment*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt; dependency property.","pos":[0,95],"source":"Identifies the <xref:System.Windows.FrameworkElement.HorizontalAlignment*> dependency property."}]},{"pos":[147143,147155],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[147584,147706],"content":"Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.","pos":[0,122]}]},{"pos":[147719,148414],"content":"Certain boundaries in the element tree set InheritanceBehavior to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further. RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName> value.       If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Certain boundaries in the element tree set InheritanceBehavior to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further. RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName> value.       If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.","pos":[0,693],"nodes":[{"content":"Certain boundaries in the element tree set InheritanceBehavior to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.","pos":[0,283]},{"content":"RelativeSource FindAncestor lookup occurs when a binding uses a &lt;xref:System.Windows.Data.RelativeSource&gt; that has its &lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt; property set to the &lt;xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt; value.","pos":[284,550],"source":" RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName> value."},{"content":"If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.","pos":[557,693]}]}]},{"pos":[148596,148695],"content":"A value of the enumeration. The default is <xref href=\"System.Windows.InheritanceBehavior\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of the enumeration.","pos":[0,27]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Windows.InheritanceBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[28,99],"source":" The default is <xref href=\"System.Windows.InheritanceBehavior\"></xref>."}]},{"pos":[149146,149505],"content":"Occurs when this <xref href=\"System.Windows.FrameworkElement\"></xref> is initialized. This event coincides with cases where the value of the <xref:System.Windows.FrameworkElement.IsInitialized*> property changes from <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (or undefined) to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when this <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is initialized.","pos":[0,85],"source":"Occurs when this <xref href=\"System.Windows.FrameworkElement\"></xref> is initialized."},{"content":"This event coincides with cases where the value of the &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt; property changes from <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (or undefined) to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[86,359],"source":" This event coincides with cases where the value of the <xref:System.Windows.FrameworkElement.IsInitialized*> property changes from <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (or undefined) to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[149518,151036],"content":"This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called. Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page is processed.       Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or Initialized depends on your requirements. If you do not need to read element properties, intend to reset properties, and do not need any layout information, Initialized might be the better event to act upon. If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon. Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required. (You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This event will be raised whenever the &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt; or &lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt; methods are called.","pos":[0,175],"source":"This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called."},{"content":"Calls to either method could have come from application code, or through the <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> processor behavior when a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> page is processed.","pos":[176,427],"source":" Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page is processed."},{"content":"Whether you choose to handle &lt;xref:System.Windows.FrameworkElement.Loaded&gt; or Initialized depends on your requirements.","pos":[434,553],"source":"       Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or Initialized depends on your requirements."},{"content":"If you do not need to read element properties, intend to reset properties, and do not need any layout information, Initialized might be the better event to act upon.","pos":[554,719]},{"content":"If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, &lt;xref:System.Windows.FrameworkElement.Loaded&gt; might be the better event to act upon.","pos":[720,935],"source":" If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon."},{"content":"Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.","pos":[936,1084]},{"content":"(You might need to check the &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a &lt;xref:System.Windows.FrameworkElement&gt;, and also for several related application and element classes, see <bpt id=\"p1\">[</bpt>Object Lifetime Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1085,1514],"source":" (You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[151163,151175],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[151559,151660],"content":"Gets or sets the context for input used by this <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the context for input used by this <xref href=\"System.Windows.FrameworkElement\"></xref>."},{"pos":[151673,152500],"content":"This dependency property inherits property values. If there are child elements without other values for InputScope established through local values or styles, then the property system will set the value to be the InputScope value of the nearest ancestor element with this value assigned.       Although a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is not common.      <a name=\"dependencyPropertyInfo_InputScope\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.InputScopeProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This dependency property inherits property values.","pos":[0,50]},{"content":"If there are child elements without other values for InputScope established through local values or styles, then the property system will set the value to be the InputScope value of the nearest ancestor element with this value assigned.","pos":[51,287]},{"content":"Although a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax usage is listed and is syntactically allowed, setting this property in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is not common.","pos":[294,529],"source":"       Although a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is not common."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_InputScope\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.InputScopeProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|","pos":[535,815],"source":"<a name=\"dependencyPropertyInfo_InputScope\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.InputScopeProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|"}]},{"pos":[152664,152885],"content":"The input scope, which modifies how input from alternative input methods is interpreted. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> (which results in a default handling of commands).","needQuote":true,"needEscape":true,"nodes":[{"content":"The input scope, which modifies how input from alternative input methods is interpreted.","pos":[0,88]},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (which results in a default handling of commands).","pos":[89,221],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> (which results in a default handling of commands)."}]},{"pos":[153362,153448],"content":"Identifies the <xref:System.Windows.FrameworkElement.InputScope*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.InputScope*&gt; dependency property.","pos":[0,86],"source":"Identifies the <xref:System.Windows.FrameworkElement.InputScope*> dependency property."}]},{"pos":[153626,153638],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[154037,154305],"content":"Gets a value that indicates whether this element has been initialized, either during processing by a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor, or by explicitly having its &lt;xref:System.Windows.FrameworkElement.EndInit*&gt; method called.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <xref:System.Windows.FrameworkElement.EndInit*> method called."},{"pos":[154318,155136],"content":"This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.       This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>. Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized. Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called. In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property may also be <ph id=\"ph1\">`true`</ph> if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.","pos":[0,164],"source":"This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again."},{"content":"This property is useful if you also are using &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; and &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;.","pos":[171,323],"source":"       This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>."},{"content":"Elements in the logical tree that is loaded by a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor are assured to be initialized.","pos":[324,479],"source":" Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized."},{"content":"Elements not in the logical tree are initialized when &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt; is called.","pos":[480,594],"source":" Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called."},{"content":"In absence of any specific handling of &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; and &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;, this will happen as soon as the constructor returns the initialized result.","pos":[595,816],"source":" In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result."}]},{"pos":[155254,155536],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the element is initialized per the aforementioned <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processing or method calls; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[155969,156051],"content":"Gets a value that indicates whether this element has been loaded for presentation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether this element has been loaded for presentation.","pos":[0,82]}]},{"pos":[156064,156640],"content":"From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code. `true` state is set by the general presentation logic when elements are loaded into the presentation engine.       Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"From a newly constructed &lt;xref:System.Windows.FrameworkElement&gt;, this property starts off <ph id=\"ph1\">`false`</ph>, and remains <ph id=\"ph2\">`true`</ph> after it is set to <ph id=\"ph3\">`true`</ph>, even if the element is subsequently removed from a connected logical tree by code.","pos":[0,227],"source":"From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code."},{"content":"<ph id=\"ph1\">`true`</ph> state is set by the general presentation logic when elements are loaded into the presentation engine.","pos":[228,336],"source":"`true` state is set by the general presentation logic when elements are loaded into the presentation engine."},{"content":"Typically, loaded elements are rendered, but not all &lt;xref:System.Windows.FrameworkElement&gt; derived classes have a presentation, and other properties such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; can influence presentation.","pos":[343,574],"source":"       Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation."}]},{"pos":[157345,157588],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current element is attached to an element tree; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the element has never been attached to a loaded element tree.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current element is attached to an element tree; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the element has never been attached to a loaded element tree."},{"pos":[158016,158104],"content":"Gets or sets localization/globalization language information that applies to an element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets localization/globalization language information that applies to an element.","pos":[0,88]}]},{"pos":[158117,159534],"content":"The string formats follow the RFC 3066 standard. For example, U.S. English is \"en-US\". For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.       This dependency property inherits property values. If there are child elements without other values for Language established through local values or styles, the property system will set the value to be the Language value of the nearest ancestor element with this value assigned.       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] defines the general meaning of the `xml:lang` attribute. Language essentially exposes the meaning of this attribute as a dependency property. Language can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]. If you set Language, that value becomes the `xml:lang` and overwrites any previous value. For more information, see [xml:lang Handling in XAML](~/add/includes/ajax-current-ext-md.md).      <a name=\"dependencyPropertyInfo_CultureInfo\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.LanguageProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The string formats follow the RFC 3066 standard.","pos":[0,48]},{"content":"For example, U.S. English is \"en-US\".","pos":[49,86]},{"content":"For more information on the values and format, see &lt;xref:System.Windows.Markup.XmlLanguage&gt;.","pos":[87,179],"source":" For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>."},{"content":"This dependency property inherits property values.","pos":[186,236]},{"content":"If there are child elements without other values for Language established through local values or styles, the property system will set the value to be the Language value of the nearest ancestor element with this value assigned.","pos":[237,464]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph> defines the general meaning of the <ph id=\"ph2\">`xml:lang`</ph> attribute.","pos":[471,591],"source":"[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] defines the general meaning of the `xml:lang` attribute."},{"content":"Language essentially exposes the meaning of this attribute as a dependency property.","pos":[592,676]},{"content":"Language can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the <ph id=\"ph1\">`xml:lang`</ph> attribute can inherit to child element scope in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>.","pos":[677,932],"source":" Language can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]."},{"content":"If you set Language, that value becomes the <ph id=\"ph1\">`xml:lang`</ph> and overwrites any previous value.","pos":[933,1022],"source":" If you set Language, that value becomes the `xml:lang` and overwrites any previous value."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>xml:lang Handling in XAML<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1023,1116],"source":" For more information, see [xml:lang Handling in XAML](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_CultureInfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LanguageProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|","pos":[1122,1401],"source":"<a name=\"dependencyPropertyInfo_CultureInfo\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.LanguageProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|"}]},{"pos":[159700,159921],"content":"The language information for this element. The default value is an <xref href=\"System.Windows.Markup.XmlLanguage\"></xref> with its <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*> value set to the string \"en-US\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The language information for this element.","pos":[0,42]},{"content":"The default value is an <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XmlLanguage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with its &lt;xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt; value set to the string \"en-US\".","pos":[43,221],"source":" The default value is an <xref href=\"System.Windows.Markup.XmlLanguage\"></xref> with its <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*> value set to the string \"en-US\"."}]},{"pos":[160386,160470],"content":"Identifies the <xref:System.Windows.FrameworkElement.Language*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Language*&gt; dependency property.","pos":[0,84],"source":"Identifies the <xref:System.Windows.FrameworkElement.Language*> dependency property."}]},{"pos":[160646,160658],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[161067,161166],"content":"Gets or sets a graphics transformation that should apply to this element when  layout is performed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a graphics transformation that should apply to this element when  layout is performed.","pos":[0,99]}]},{"pos":[161179,163036],"content":"In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, LayoutTransform will affect results of layout.       Setting a transform provides powerful capabilities of scaling and rotating. However, LayoutTransform ignores <xref:System.Windows.Media.TranslateTransform> operations. This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.       LayoutTransform can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system. When you apply a LayoutTransform to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged. If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need. However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.       Example scenarios where LayoutTransform would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.      <a name=\"dependencyPropertyInfo_LayoutTransform\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In contrast to &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;, LayoutTransform will affect results of layout.","pos":[0,113],"source":"In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, LayoutTransform will affect results of layout."},{"content":"Setting a transform provides powerful capabilities of scaling and rotating.","pos":[120,195]},{"content":"However, LayoutTransform ignores &lt;xref:System.Windows.Media.TranslateTransform&gt; operations.","pos":[196,287],"source":" However, LayoutTransform ignores <xref:System.Windows.Media.TranslateTransform> operations."},{"content":"This is because the layout system behavior for child elements of a &lt;xref:System.Windows.FrameworkElement&gt; auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.","pos":[288,527],"source":" This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element."},{"content":"LayoutTransform can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.","pos":[534,677]},{"content":"When you apply a LayoutTransform to the &lt;xref:System.Windows.Controls.Panel.Children%2A&gt; collection of the &lt;xref:System.Windows.Controls.Panel&gt;, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.","pos":[678,932],"source":" When you apply a LayoutTransform to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged."},{"content":"If you are updating the complete application <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>, this functionality might be exactly what you need.","pos":[933,1089],"source":" If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need."},{"content":"However, if you do not need a full layout pass, use the &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt; property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.","pos":[1090,1310],"source":" However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario."},{"content":"Example scenarios where LayoutTransform would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.      <bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_LayoutTransform\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[1317,1841],"source":"       Example scenarios where LayoutTransform would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.      <a name=\"dependencyPropertyInfo_LayoutTransform\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[163967,164069],"content":"The transform this element should use. The default is <xref:System.Windows.Media.Transform.Identity*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transform this element should use. The default is <xref:System.Windows.Media.Transform.Identity*>.","pos":[0,102],"nodes":[{"content":"The transform this element should use.","pos":[0,38]},{"content":"The default is &lt;xref:System.Windows.Media.Transform.Identity*&gt;.","pos":[39,102],"source":" The default is <xref:System.Windows.Media.Transform.Identity*>."}]}]},{"pos":[164576,164667],"content":"Identifies the <xref:System.Windows.FrameworkElement.LayoutTransform*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.LayoutTransform*&gt; dependency property.","pos":[0,91],"source":"Identifies the <xref:System.Windows.FrameworkElement.LayoutTransform*> dependency property."}]},{"pos":[164850,164862],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[165223,165296],"content":"Occurs when the element is laid out, rendered, and ready for interaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the element is laid out, rendered, and ready for interaction.","pos":[0,73]}]},{"pos":[165309,167527],"content":"Loaded is usually the last event raised in an element initialization sequence. It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>. Whether you choose to handle Loaded or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements. If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon. If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, Loaded might be the better event to act upon. Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required. (You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md).       Direct routed events do not follow a route, they are only handled within the same element on which they are raised. Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.       Loaded and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes. A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload. Therefore Loaded cannot be assumed to occur only when a page is first loaded through navigation to the page.      <a name=\"routedEventInfo_Loaded\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.LoadedEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.RoutedEventHandler>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Loaded is usually the last event raised in an element initialization sequence.","pos":[0,78]},{"content":"It will always be raised after &lt;xref:System.Windows.FrameworkElement.Initialized&gt;.","pos":[79,161],"source":" It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>."},{"content":"Whether you choose to handle Loaded or &lt;xref:System.Windows.FrameworkElement.Initialized&gt; depends on your requirements.","pos":[162,281],"source":" Whether you choose to handle Loaded or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements."},{"content":"If you do not need to read element properties, intend to reset properties, and do not need any layout information, &lt;xref:System.Windows.FrameworkElement.Initialized&gt; might be the better event to act upon.","pos":[282,486],"source":" If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon."},{"content":"If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, Loaded might be the better event to act upon.","pos":[487,663]},{"content":"Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.","pos":[664,812]},{"content":"(You might need to check the &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a &lt;xref:System.Windows.FrameworkElement&gt;, and also for several related application and element classes, see <bpt id=\"p1\">[</bpt>Object Lifetime Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[813,1242],"source":" (You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"Direct routed events do not follow a route, they are only handled within the same element on which they are raised.","pos":[1249,1364]},{"content":"Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.","pos":[1365,1542],"source":" Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style."},{"content":"Loaded and &lt;xref:System.Windows.FrameworkElement.Unloaded&gt; might both be raised on controls as a result of user-initiated system theme changes.","pos":[1549,1692],"source":"       Loaded and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes."},{"content":"A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.","pos":[1693,1847]},{"content":"Therefore Loaded cannot be assumed to occur only when a page is first loaded through navigation to the page.","pos":[1848,1956]},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_Loaded\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LoadedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|","pos":[1962,2201],"source":"<a name=\"routedEventInfo_Loaded\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.LoadedEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.RoutedEventHandler>|"}]},{"pos":[167684,167696],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[168082,168170],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.Loaded\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.Loaded\"></xref> routed event."},{"pos":[168183,168720],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[168878,168890],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[169299,169361],"content":"Gets an enumerator for logical child elements of this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an enumerator for logical child elements of this element.","pos":[0,62]}]},{"pos":[169374,169813],"content":"LogicalChildren allows you to iterate over child elements. This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.       For more information on how to use LogicalChildren and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"LogicalChildren allows you to iterate over child elements.","pos":[0,58]},{"content":"This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly &lt;xref:System.Windows.FrameworkContentElement&gt; child elements.","pos":[59,258],"source":" This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements."},{"content":"For more information on how to use LogicalChildren and &lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;, see <bpt id=\"p1\">[</bpt>Trees in WPF<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[265,437],"source":"       For more information on how to use LogicalChildren and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[169986,170043],"content":"An enumerator for logical child elements of this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator for logical child elements of this element.","pos":[0,57]}]},{"pos":[170468,170512],"content":"Gets or sets the outer margin of an element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the outer margin of an element.","pos":[0,44]}]},{"pos":[170525,174415],"content":"The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]. Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.       Margin is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically. The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric Margin in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attribute syntax also.       A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.       Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.       Elements that have margins set will not typically constrain the size of the specified Margin if the allotted rectangle space is not large enough for the margin plus the element content area. The element content area will be constrained instead when layout is calculated. The only case where margins would be constrained also is if the content is already constrained all the way to zero.      <a name=\"xamlAttributeUsage_Margin\"></a>    ## XAML Attribute Usage      ```   <object Margin=\"left,top,right,bottom\"/>   - or -   <object Margin=\"left,top\"/>   - or -   <object Margin=\"thicknessReference\"/>   ```      <a name=\"xamlPropertyElementUsage_Margin\"></a>    ## XAML Property Element Usage      ```   <object>     <object.Margin>       <Thickness Left=\"left\" Top=\"top\" Right=\"right\" Bottom=\"bottom\"/>     </object.Margin>   </object>   ```      <a name=\"xamlValues_Margin\"></a>    ## XAML Values    *left, top, right, bottom*    Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.       The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically. For instance, `Margin=\"20\"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20. `Margin=\"20,50\"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.       The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]. You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.       Number values provided as [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0). For more information on [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.       *thicknessReference*    An object reference to an existing <xref:System.Windows.Thickness>. This might be a `}`, a , or `}` reference. For more information on [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.      <a name=\"dependencyPropertyInfo_Margin\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MarginProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The margin is the space between this element and other elements that will be adjacent when layout creates the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.","pos":[0,170],"source":"The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]."},{"content":"Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.","pos":[171,320]},{"content":"Margin is set as a &lt;xref:System.Windows.Thickness&gt; structure rather than as a number so that the margin can be set asymmetrically.","pos":[327,457],"source":"       Margin is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically."},{"content":"The &lt;xref:System.Windows.Thickness&gt; structure itself supports string type conversion so that you can specify an asymmetric Margin in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> attribute syntax also.","pos":[458,679],"source":" The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric Margin in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attribute syntax also."},{"content":"A non-zero margin applies space outside the element layout's &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;.","pos":[686,860],"source":"       A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>."},{"content":"Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.","pos":[867,1050]},{"content":"Elements that have margins set will not typically constrain the size of the specified Margin if the allotted rectangle space is not large enough for the margin plus the element content area.","pos":[1057,1247]},{"content":"The element content area will be constrained instead when layout is calculated.","pos":[1248,1327]},{"content":"The only case where margins would be constrained also is if the content is already constrained all the way to zero.","pos":[1328,1443]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Margin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object Margin=\"left,top,right,bottom\"/&gt;   - or -   &lt;object Margin=\"left,top\"/&gt;   - or -   &lt;object Margin=\"thicknessReference\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlPropertyElementUsage_Margin\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph2\">```   &lt;object&gt;     &lt;object.Margin&gt;       &lt;Thickness Left=\"left\" Top=\"top\" Right=\"right\" Bottom=\"bottom\"/&gt;     &lt;/object.Margin&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_Margin\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>left, top, right, bottom<ept id=\"p4\">*</ept>    Number values between 0 and &lt;xref:System.Double.PositiveInfinity&gt; that specify the four possible dimension properties of a &lt;xref:System.Windows.Thickness&gt; structure.","pos":[1449,2153],"source":"<a name=\"xamlAttributeUsage_Margin\"></a>    ## XAML Attribute Usage      ```   <object Margin=\"left,top,right,bottom\"/>   - or -   <object Margin=\"left,top\"/>   - or -   <object Margin=\"thicknessReference\"/>   ```      <a name=\"xamlPropertyElementUsage_Margin\"></a>    ## XAML Property Element Usage      ```   <object>     <object.Margin>       <Thickness Left=\"left\" Top=\"top\" Right=\"right\" Bottom=\"bottom\"/>     </object.Margin>   </object>   ```      <a name=\"xamlValues_Margin\"></a>    ## XAML Values    *left, top, right, bottom*    Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure."},{"content":"The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.","pos":[2160,2278]},{"content":"For instance, <ph id=\"ph1\">`Margin=\"20\"`</ph> will be interpreted to mean a &lt;xref:System.Windows.Thickness&gt; with all properties set to 20.","pos":[2279,2399],"source":" For instance, `Margin=\"20\"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20."},{"content":"<ph id=\"ph1\">`Margin=\"20,50\"`</ph> will be interpreted to mean a &lt;xref:System.Windows.Thickness&gt; with &lt;xref:System.Windows.Thickness.Left%2A&gt; and &lt;xref:System.Windows.Thickness.Right%2A&gt; set to 20, and &lt;xref:System.Windows.Thickness.Top%2A&gt; and &lt;xref:System.Windows.Thickness.Bottom%2A&gt; set to 50.","pos":[2400,2679],"source":"`Margin=\"20,50\"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50."},{"content":"The default unit for a &lt;xref:System.Windows.Thickness&gt; measure is <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>.","pos":[2686,2822],"source":"       The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]."},{"content":"You can also specify other units by appending the unit type strings <ph id=\"ph1\">`cm`</ph>, <ph id=\"ph2\">`in`</ph>, or <ph id=\"ph3\">`pt`</ph> to any measure.","pos":[2823,2926],"source":" You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure."},{"content":"Number values provided as <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).","pos":[2933,3123],"source":"       Number values provided as [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0)."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> usage, see &lt;xref:System.Windows.Thickness&gt;.","pos":[3124,3255],"source":" For more information on [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>."},{"content":"<bpt id=\"p1\">*</bpt>thicknessReference<ept id=\"p1\">*</ept>    An object reference to an existing &lt;xref:System.Windows.Thickness&gt;.","pos":[3262,3353],"source":"*thicknessReference*    An object reference to an existing <xref:System.Windows.Thickness>."},{"content":"This might be a <ph id=\"ph1\">`}`</ph>, a , or <ph id=\"ph2\">`}`</ph> reference.","pos":[3354,3396],"source":" This might be a `}`, a , or `}` reference."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> usage, see &lt;xref:System.Windows.Thickness&gt;.","pos":[3397,3528],"source":" For more information on [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Margin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MarginProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[3534,3812],"source":"<a name=\"dependencyPropertyInfo_Margin\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MarginProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[174561,174708],"content":"Provides margin values for the element. The default value is a <xref href=\"System.Windows.Thickness\"></xref> with all properties equal to 0 (zero).","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides margin values for the element.","pos":[0,39]},{"content":"The default value is a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Thickness\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with all properties equal to 0 (zero).","pos":[40,147],"source":" The default value is a <xref href=\"System.Windows.Thickness\"></xref> with all properties equal to 0 (zero)."}]},{"pos":[175161,175243],"content":"Identifies the <xref:System.Windows.FrameworkElement.Margin*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Margin*&gt; dependency property.","pos":[0,82],"source":"Identifies the <xref:System.Windows.FrameworkElement.Margin*> dependency property."}]},{"pos":[175417,175429],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[175808,175866],"content":"Gets or sets the maximum height constraint of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum height constraint of the element.","pos":[0,58]}]},{"pos":[175879,178152],"content":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information. The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.  If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then MaxHeight, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value a run-time exception is thrown.      <a name=\"xamlAttributeUsage_MaxHeight\"></a>    ## XAML Attribute Usage      ```   <object MaxHeight=\"double\"/>   - or –   <object MaxHeight =\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MaxHeight\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/add/includes/ajax-current-ext-md.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.       *qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.       `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MaxHeight\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.","pos":[0,106],"source":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information."},{"content":"The other two are &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.","pos":[107,230],"source":" The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>."},{"content":"If there is a conflict between these values, the order of application for actual height determination is first &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; must be honored, then MaxHeight, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.","pos":[232,525],"source":"  If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then MaxHeight, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>."},{"content":"The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.","pos":[532,661],"source":"       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism."},{"content":"If you attempt to set an invalid value a run-time exception is thrown.","pos":[662,732]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MaxHeight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object MaxHeight=\"double\"/&gt;   - or –   &lt;object MaxHeight =\"qualifiedDouble\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_MaxHeight\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>double<ept id=\"p3\">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.","pos":[738,1089],"source":"<a name=\"xamlAttributeUsage_MaxHeight\"></a>    ## XAML Attribute Usage      ```   <object MaxHeight=\"double\"/>   - or –   <object MaxHeight =\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MaxHeight\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0."},{"content":"This is interpreted as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.","pos":[1090,1197],"source":" This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement."},{"content":"Strings need not explicitly include decimal points.","pos":[1198,1249]},{"content":"For instance a value of <ph id=\"ph1\">`1`</ph> is acceptable.","pos":[1250,1292],"source":" For instance a value of `1` is acceptable."},{"content":"The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id=\"p1\">[</bpt>x:Static Markup Extension<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> if you need to explicitly set the value to be &lt;xref:System.Double.PositiveInfinity&gt;.","pos":[1299,1574],"source":"       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/add/includes/ajax-current-ext-md.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>."},{"content":"<bpt id=\"p1\">*</bpt>qualifiedDouble<ept id=\"p1\">*</ept>    A <bpt id=\"p2\">*</bpt>double<ept id=\"p2\">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id=\"ph1\">`px`</ph>, <ph id=\"ph2\">`in`</ph>, <ph id=\"ph3\">`cm`</ph>, <ph id=\"ph4\">`pt`</ph>.","pos":[1581,1721],"source":"*qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`."},{"content":"<ph id=\"ph1\">`px`</ph> (default) is <ph id=\"ph2\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id=\"ph3\">`in`</ph> is inches; 1in==96px       <ph id=\"ph4\">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id=\"ph5\">`pt`</ph> is points; 1pt==(96/72) px      <bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_MaxHeight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;|   |Metadata properties set to <ph id=\"ph6\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[1728,2224],"source":"`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MaxHeight\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[178272,178521],"content":"The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is <xref:System.Double>. This value can be any value equal to or greater than 0.0. <xref:System.Double> is also valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum height of the element, in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,112],"source":"The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is &lt;xref:System.Double&gt;.","pos":[113,155],"source":" The default value is <xref:System.Double>."},{"content":"This value can be any value equal to or greater than 0.0.","pos":[156,213]},{"content":"&lt;xref:System.Double&gt; is also valid.","pos":[214,249],"source":" <xref:System.Double> is also valid."}]},{"pos":[178992,179077],"content":"Identifies the <xref:System.Windows.FrameworkElement.MaxHeight*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.MaxHeight*&gt; dependency property.","pos":[0,85],"source":"Identifies the <xref:System.Windows.FrameworkElement.MaxHeight*> dependency property."}]},{"pos":[179254,179266],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[179640,179697],"content":"Gets or sets the maximum width constraint of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum width constraint of the element.","pos":[0,57]}]},{"pos":[179710,181946],"content":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information. The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>. If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then MaxWidth, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.      <a name=\"xamlAttributeUsage_MaxWidth\"></a>    ## XAML Attribute Usage      ```   <object MaxWidth=\"double\"/>   - or -   <object MaxWidth=\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MaxWidth\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/add/includes/ajax-current-ext-md.md) to set the value to be <xref:System.Double.PositiveInfinity>.       *qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.       `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MaxWidth\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.","pos":[0,105],"source":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information."},{"content":"The other two are &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.","pos":[106,227],"source":" The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>."},{"content":"If there is a conflict between these values, the order of application for actual width determination is first &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; must be honored, then MaxWidth, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.","pos":[228,517],"source":" If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then MaxWidth, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>."},{"content":"The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.","pos":[524,653],"source":"       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism."},{"content":"If you attempt to set an invalid value, a run-time exception is thrown.","pos":[654,725]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MaxWidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object MaxWidth=\"double\"/&gt;   - or -   &lt;object MaxWidth=\"qualifiedDouble\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_MaxWidth\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>double<ept id=\"p3\">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.","pos":[731,1077],"source":"<a name=\"xamlAttributeUsage_MaxWidth\"></a>    ## XAML Attribute Usage      ```   <object MaxWidth=\"double\"/>   - or -   <object MaxWidth=\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MaxWidth\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0."},{"content":"This is interpreted as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.","pos":[1078,1185],"source":" This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement."},{"content":"Strings need not explicitly include decimal points.","pos":[1186,1237]},{"content":"For instance a value of <ph id=\"ph1\">`1`</ph> is acceptable.","pos":[1238,1280],"source":" For instance a value of `1` is acceptable."},{"content":"The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id=\"p1\">[</bpt>x:Static Markup Extension<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> to set the value to be &lt;xref:System.Double.PositiveInfinity&gt;.","pos":[1287,1539],"source":"       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/add/includes/ajax-current-ext-md.md) to set the value to be <xref:System.Double.PositiveInfinity>."},{"content":"<bpt id=\"p1\">*</bpt>qualifiedDouble<ept id=\"p1\">*</ept>    A <bpt id=\"p2\">*</bpt>double<ept id=\"p2\">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id=\"ph1\">`px`</ph>, <ph id=\"ph2\">`in`</ph>, <ph id=\"ph3\">`cm`</ph>, <ph id=\"ph4\">`pt`</ph>.","pos":[1546,1686],"source":"*qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`."},{"content":"<ph id=\"ph1\">`px`</ph> (default) is <ph id=\"ph2\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id=\"ph3\">`in`</ph> is inches; 1in==96px       <ph id=\"ph4\">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id=\"ph5\">`pt`</ph> is points; 1pt==(96/72) px      <bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_MaxWidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;|   |Metadata properties set to <ph id=\"ph6\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[1693,2187],"source":"`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MaxWidth\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[182065,182313],"content":"The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is <xref:System.Double>. This value can be any value equal to or greater than 0.0. <xref:System.Double> is also valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum width of the element, in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,111],"source":"The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is &lt;xref:System.Double&gt;.","pos":[112,154],"source":" The default value is <xref:System.Double>."},{"content":"This value can be any value equal to or greater than 0.0.","pos":[155,212]},{"content":"&lt;xref:System.Double&gt; is also valid.","pos":[213,248],"source":" <xref:System.Double> is also valid."}]},{"pos":[182778,182862],"content":"Identifies the <xref:System.Windows.FrameworkElement.MaxWidth*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.MaxWidth*&gt; dependency property.","pos":[0,84],"source":"Identifies the <xref:System.Windows.FrameworkElement.MaxWidth*> dependency property."}]},{"pos":[183038,183050],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[183497,183607],"content":"Implements basic measure-pass layout system behavior for <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Implements basic measure-pass layout system behavior for <xref href=\"System.Windows.FrameworkElement\"></xref>."},{"pos":[183619,184295],"content":"This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName> to connect the  WPF core-level and WPF framework-level layout measure implementations. The <xref:System.Windows.FrameworkElement> implementation seals the method. To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead. To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName> to connect the  WPF core-level and WPF framework-level layout measure implementations. The <xref:System.Windows.FrameworkElement> implementation seals the method. To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead. To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName>.","pos":[0,676],"nodes":[{"content":"This method overrides &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt; to connect the  WPF core-level and WPF framework-level layout measure implementations.","pos":[0,180],"source":"This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName> to connect the  WPF core-level and WPF framework-level layout measure implementations."},{"content":"The &lt;xref:System.Windows.FrameworkElement&gt; implementation seals the method.","pos":[181,256],"source":" The <xref:System.Windows.FrameworkElement> implementation seals the method."},{"content":"To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override &lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt; instead.","pos":[257,430],"source":" To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead."},{"content":"To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use &lt;xref:System.Windows.FrameworkElement&gt;, override &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;.","pos":[431,676],"source":" To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName>."}]}]},{"pos":[184505,184579],"content":"The available size that the parent element can give to the child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The available size that the parent element can give to the child elements.","pos":[0,74]}]},{"pos":[184643,184686],"content":"The desired size of this element in layout.","needQuote":true,"needEscape":true,"nodes":[{"content":"The desired size of this element in layout.","pos":[0,43]}]},{"pos":[185210,185399],"content":"When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>-derived class.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <xref href=\"System.Windows.FrameworkElement\"></xref>-derived class."},{"pos":[185412,186990],"content":"Override MeasureOverride to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] layout system. Your implementation should do the following:      1.  Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.      2.  Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).      3.  Compute the net desired size of the parent based upon the measurement of the child elements.       The return value of MeasureOverride should be the element's own desired size, which then becomes the measure input for the parent element of the current element. This same process continues through the layout system until the root element of the page is reached.       During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space. This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.      > [!IMPORTANT] >  Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Override MeasureOverride to implement custom layout sizing behavior for your element as it participates in the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> layout system.","pos":[0,194],"source":"Override MeasureOverride to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] layout system."},{"content":"Your implementation should do the following:      1.","pos":[195,247]},{"content":"Iterate your element's particular collection of children that are part of layout, call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child element.","pos":[249,401],"source":"  Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element."},{"content":"2.","pos":[407,409]},{"content":"Immediately get &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt; on the child (this is set as a property after &lt;xref:System.Windows.UIElement.Measure%2A&gt; is called).","pos":[411,574],"source":"  Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called)."},{"content":"3.","pos":[580,582]},{"content":"Compute the net desired size of the parent based upon the measurement of the child elements.","pos":[584,676]},{"content":"The return value of MeasureOverride should be the element's own desired size, which then becomes the measure input for the parent element of the current element.","pos":[683,844]},{"content":"This same process continues through the layout system until the root element of the page is reached.","pos":[845,945]},{"content":"During this process, child elements might return a larger &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt; size than the initial <ph id=\"ph1\">`availableSize`</ph> to indicate that the child element wants more space.","pos":[952,1147],"source":"       During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space."},{"content":"This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.","pos":[1148,1373]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Elements should call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child during this process, otherwise the child elements will not be correctly sized or arranged.","pos":[1379,1565],"source":"      > [!IMPORTANT] >  Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged."}]},{"pos":[187197,187371],"content":"The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.","pos":[0,174],"nodes":[{"content":"The available size that this element can give to child elements.","pos":[0,64]},{"content":"Infinity can be specified as a value to indicate that the element will size to whatever content is available.","pos":[65,174]}]}]},{"pos":[187435,187546],"content":"The size that this element determines it needs during layout, based on its calculations of child element sizes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size that this element determines it needs during layout, based on its calculations of child element sizes.","pos":[0,111]}]},{"pos":[187986,188044],"content":"Gets or sets the minimum height constraint of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the minimum height constraint of the element.","pos":[0,58]}]},{"pos":[188057,190153],"content":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.  The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>. If there is a conflict between these values, the order of application for actual height determination is first MinHeight must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.      <a name=\"xamlAttributeUsage_MinHeight\"></a>    ## XAML Attribute Usage      ```   <object MinHeight=\"double\"/>   - or -   <object MinHeight=\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MinHeight\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.       *qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.       `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MinHeight\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MinHeightProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.","pos":[0,106],"source":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information."},{"content":"The other two are &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.","pos":[108,231],"source":"  The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>."},{"content":"If there is a conflict between these values, the order of application for actual height determination is first MinHeight must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.","pos":[232,525],"source":" If there is a conflict between these values, the order of application for actual height determination is first MinHeight must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>."},{"content":"The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.","pos":[532,661],"source":"       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism."},{"content":"If you attempt to set an invalid value, a run-time exception is thrown.","pos":[662,733]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MinHeight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object MinHeight=\"double\"/&gt;   - or -   &lt;object MinHeight=\"qualifiedDouble\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_MinHeight\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>double<ept id=\"p3\">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.","pos":[739,1089],"source":"<a name=\"xamlAttributeUsage_MinHeight\"></a>    ## XAML Attribute Usage      ```   <object MinHeight=\"double\"/>   - or -   <object MinHeight=\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MinHeight\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0."},{"content":"This is interpreted as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.","pos":[1090,1197],"source":" This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement."},{"content":"Strings need not explicitly include decimal points.","pos":[1198,1249]},{"content":"For instance a value of <ph id=\"ph1\">`1`</ph> is acceptable.","pos":[1250,1292],"source":" For instance a value of `1` is acceptable."},{"content":"The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply.","pos":[1299,1397],"source":"       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply."},{"content":"<bpt id=\"p1\">*</bpt>qualifiedDouble<ept id=\"p1\">*</ept>    A <bpt id=\"p2\">*</bpt>double<ept id=\"p2\">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id=\"ph1\">`px`</ph>, <ph id=\"ph2\">`in`</ph>, <ph id=\"ph3\">`cm`</ph>, <ph id=\"ph4\">`pt`</ph>.","pos":[1404,1544],"source":"*qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`."},{"content":"<ph id=\"ph1\">`px`</ph> (default) is <ph id=\"ph2\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id=\"ph3\">`in`</ph> is inches; 1in==96px       <ph id=\"ph4\">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id=\"ph5\">`pt`</ph> is points; 1pt==(96/72) px      <bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_MinHeight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MinHeightProperty&gt;|   |Metadata properties set to <ph id=\"ph6\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[1551,2047],"source":"`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MinHeight\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MinHeightProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[190273,190573],"content":"The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0.0. This value can be any value equal to or greater than 0.0. However, <xref:System.Double> is NOT valid, nor is &lt;xref:System.Double?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum height of the element, in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,112],"source":"The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is 0.0.","pos":[113,138]},{"content":"This value can be any value equal to or greater than 0.0.","pos":[139,196]},{"content":"However, &lt;xref:System.Double&gt; is NOT valid, nor is <ph id=\"ph1\">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[197,300],"source":" However, <xref:System.Double> is NOT valid, nor is &lt;xref:System.Double?displayProperty=fullName&gt;."}]},{"pos":[191044,191129],"content":"Identifies the <xref:System.Windows.FrameworkElement.MinHeight*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.MinHeight*&gt; dependency property.","pos":[0,85],"source":"Identifies the <xref:System.Windows.FrameworkElement.MinHeight*> dependency property."}]},{"pos":[191306,191318],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[191692,191749],"content":"Gets or sets the minimum width constraint of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the minimum width constraint of the element.","pos":[0,57]}]},{"pos":[191762,193846],"content":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.  The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  If there is a conflict between these values, the order of application for actual width determination is first MinWidth must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.      <a name=\"xamlAttributeUsage_MinWidth\"></a>    ## XAML Attribute Usage      ```   <object MinWidth=\"double\"/>   - or -   <object MinWidth=\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MinWidth\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.       *qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.       `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MinWidth\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MinWidthProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.","pos":[0,105],"source":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information."},{"content":"The other two are &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.","pos":[107,228],"source":"  The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>."},{"content":"If there is a conflict between these values, the order of application for actual width determination is first MinWidth must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.","pos":[230,519],"source":"  If there is a conflict between these values, the order of application for actual width determination is first MinWidth must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>."},{"content":"The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.","pos":[526,655],"source":"       The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism."},{"content":"If you attempt to set an invalid value, a run-time exception is thrown.","pos":[656,727]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MinWidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object MinWidth=\"double\"/&gt;   - or -   &lt;object MinWidth=\"qualifiedDouble\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_MinWidth\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>double<ept id=\"p3\">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.","pos":[733,1079],"source":"<a name=\"xamlAttributeUsage_MinWidth\"></a>    ## XAML Attribute Usage      ```   <object MinWidth=\"double\"/>   - or -   <object MinWidth=\"qualifiedDouble\"/>   ```      <a name=\"xamlValues_MinWidth\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0."},{"content":"This is interpreted as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.","pos":[1080,1187],"source":" This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement."},{"content":"Strings need not explicitly include decimal points.","pos":[1188,1239]},{"content":"For instance a value of <ph id=\"ph1\">`1`</ph> is acceptable.","pos":[1240,1282],"source":" For instance a value of `1` is acceptable."},{"content":"The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply.","pos":[1289,1387],"source":"       The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply."},{"content":"<bpt id=\"p1\">*</bpt>qualifiedDouble<ept id=\"p1\">*</ept>    A <bpt id=\"p2\">*</bpt>double<ept id=\"p2\">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id=\"ph1\">`px`</ph>, <ph id=\"ph2\">`in`</ph>, <ph id=\"ph3\">`cm`</ph>, <ph id=\"ph4\">`pt`</ph>.","pos":[1394,1534],"source":"*qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`."},{"content":"<ph id=\"ph1\">`px`</ph> (default) is <ph id=\"ph2\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id=\"ph3\">`in`</ph> is inches; 1in==96px       <ph id=\"ph4\">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id=\"ph5\">`pt`</ph> is points; 1pt==(96/72) px      <bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_MinWidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MinWidthProperty&gt;|   |Metadata properties set to <ph id=\"ph6\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[1541,2035],"source":"`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px      <a name=\"dependencyPropertyInfo_MinWidth\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.MinWidthProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[193965,194264],"content":"The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0.0. This value can be any value equal to or greater than 0.0. However, <xref:System.Double> is not valid, nor is &lt;xref:System.Double?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum width of the element, in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,111],"source":"The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is 0.0.","pos":[112,137]},{"content":"This value can be any value equal to or greater than 0.0.","pos":[138,195]},{"content":"However, &lt;xref:System.Double&gt; is not valid, nor is <ph id=\"ph1\">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[196,299],"source":" However, <xref:System.Double> is not valid, nor is &lt;xref:System.Double?displayProperty=fullName&gt;."}]},{"pos":[194729,194813],"content":"Identifies the <xref:System.Windows.FrameworkElement.MinWidth*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.MinWidth*&gt; dependency property.","pos":[0,84],"source":"Identifies the <xref:System.Windows.FrameworkElement.MinWidth*> dependency property."}]},{"pos":[194989,195001],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[195510,195615],"content":"Moves the keyboard focus away from this element and to another element in a provided traversal direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves the keyboard focus away from this element and to another element in a provided traversal direction.","pos":[0,105]}]},{"pos":[195627,195748],"content":"This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName> and seals the method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This implementation overrides &lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt; and seals the method.","pos":[0,121],"source":"This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName> and seals the method."}]},{"pos":[196686,196757],"content":"The direction that focus is to be moved, as a value of the enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The direction that focus is to be moved, as a value of the enumeration.","pos":[0,71]}]},{"pos":[196816,197076],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if focus is moved successfully; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the target element in direction as specified does not exist or could not be keyboard focused.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if focus is moved successfully; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the target element in direction as specified does not exist or could not be keyboard focused."},{"pos":[197485,197767],"content":"Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the identifying name of the element.","pos":[0,49]},{"content":"The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor.","pos":[50,282],"source":" The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor."}]},{"pos":[197780,202307],"content":"The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.       This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/add/includes/ajax-current-ext-md.md).       Names must be unique within a namescope. For more information, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md).       Getting a Name if you are creating elements in code is not common. If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the Name. An exception to this is if the Name string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. Setting a Name from code-behind if the original Name was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] will not change the original object reference. The object references are created only when the underlying namescopes are explicitly created during parsing. You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the Name property of an already loaded element.       One notable case where setting Name from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time. Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance. See the Example section, or [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).       Setting Name from code has limited applications, but getting an element by Name is more common. One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page. The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by Name in the logical tree for that element, searching the tree recursively as necessary. Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a Name string as an argument.       Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>. Implementations of this interface are expected to enforce that names be unambiguous within their scope. The root elements that define this interface also define the namescope behavior boundaries for all the related [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)].       The Name property also serves as an identifier for other processes. For instance, the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] automation model will use Name as the AutomationId for clients and providers.       The string values used for Name have some restrictions, as imposed by the underlying [x:Name Directive](../Topic/x:Name%20Directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] specification. Most notably, a Name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores. For more information, see [WPF XAML Namescopes](../Topic/WPF%20XAML%20Namescopes.md).       Name is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation. Data binding a Name is technically possible, but is an extremely uncommon scenario because a data-bound Name cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.      <a name=\"dependencyPropertyInfo_Name\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.NameProperty>|   |Metadata properties set to `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The most common usage of this property is to specify a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element name as an attribute in markup.","pos":[0,160],"source":"The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup."},{"content":"This property essentially provides a WPF framework-level convenience property to set the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[167,380],"source":"       This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/add/includes/ajax-current-ext-md.md)."},{"content":"Names must be unique within a namescope.","pos":[387,427]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>WPF XAML Namescopes<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[428,515],"source":" For more information, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)."},{"content":"Getting a Name if you are creating elements in code is not common.","pos":[522,588]},{"content":"If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the Name.","pos":[589,747]},{"content":"An exception to this is if the Name string has some overloaded meaning, for instance if it is useful to display that name in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[748,936],"source":" An exception to this is if the Name string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]."},{"content":"Setting a Name from code-behind if the original Name was set from markup is also not recommended, and changing the property after loading the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> will not change the original object reference.","pos":[937,1191],"source":" Setting a Name from code-behind if the original Name was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] will not change the original object reference."},{"content":"The object references are created only when the underlying namescopes are explicitly created during parsing.","pos":[1192,1300]},{"content":"You must specifically call &lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt; to make an effective change to the Name property of an already loaded element.","pos":[1301,1461],"source":" You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the Name property of an already loaded element."},{"content":"One notable case where setting Name from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.","pos":[1468,1644]},{"content":"Before you can register a name, might also need to instantiate and assign a &lt;xref:System.Windows.NameScope&gt; instance.","pos":[1645,1762],"source":" Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance."},{"content":"See the Example section, or <bpt id=\"p1\">[</bpt>Storyboards Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1763,1853],"source":" See the Example section, or [Storyboards Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"Setting Name from code has limited applications, but getting an element by Name is more common.","pos":[1860,1955]},{"content":"One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.","pos":[1956,2147]},{"content":"The utility method &lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;, which is available from any &lt;xref:System.Windows.FrameworkElement&gt;, can find any element by Name in the logical tree for that element, searching the tree recursively as necessary.","pos":[2148,2398],"source":" The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by Name in the logical tree for that element, searching the tree recursively as necessary."},{"content":"Or you can use the &lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt; static method of &lt;xref:System.Windows.LogicalTreeHelper&gt;, which also takes a Name string as an argument.","pos":[2399,2581],"source":" Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a Name string as an argument."},{"content":"Typically used root elements (&lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Controls.Page&gt; for example) implement the interface &lt;xref:System.Windows.Markup.INameScope&gt;.","pos":[2588,2761],"source":"       Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>."},{"content":"Implementations of this interface are expected to enforce that names be unambiguous within their scope.","pos":[2762,2865]},{"content":"The root elements that define this interface also define the namescope behavior boundaries for all the related <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>.","pos":[2866,3059],"source":" The root elements that define this interface also define the namescope behavior boundaries for all the related [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]."},{"content":"The Name property also serves as an identifier for other processes.","pos":[3066,3133]},{"content":"For instance, the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> automation model will use Name as the AutomationId for clients and providers.","pos":[3134,3305],"source":" For instance, the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] automation model will use Name as the AutomationId for clients and providers."},{"content":"The string values used for Name have some restrictions, as imposed by the underlying <bpt id=\"p1\">[</bpt>x:Name Directive<ept id=\"p1\">](../Topic/x:Name%20Directive.md)</ept> defined by the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> specification.","pos":[3312,3543],"source":"       The string values used for Name have some restrictions, as imposed by the underlying [x:Name Directive](../Topic/x:Name%20Directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] specification."},{"content":"Most notably, a Name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.","pos":[3544,3677]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>WPF XAML Namescopes<ept id=\"p1\">](../Topic/WPF%20XAML%20Namescopes.md)</ept>.","pos":[3678,3763],"source":" For more information, see [WPF XAML Namescopes](../Topic/WPF%20XAML%20Namescopes.md)."},{"content":"Name is one of the very few dependency properties that cannot be animated (&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; is <ph id=\"ph1\">`true`</ph> in metadata), because the name itself is vital for targeting an animation.","pos":[3770,3995],"source":"       Name is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation."},{"content":"Data binding a Name is technically possible, but is an extremely uncommon scenario because a data-bound Name cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.","pos":[3996,4219]},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Name\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.NameProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;|","pos":[4225,4499],"source":"<a name=\"dependencyPropertyInfo_Name\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.NameProperty>|   |Metadata properties set to `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|"}]},{"pos":[203072,203128],"content":"The name of the element. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the element. The default is an empty string.","pos":[0,56],"nodes":[{"content":"The name of the element.","pos":[0,24]},{"content":"The default is an empty string.","pos":[25,56]}]}]},{"pos":[203569,203649],"content":"Identifies the <xref:System.Windows.FrameworkElement.Name*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Name*&gt; dependency property.","pos":[0,80],"source":"Identifies the <xref:System.Windows.FrameworkElement.Name*> dependency property."}]},{"pos":[203821,203833],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[204246,204400],"content":"When overridden in a derived class, is invoked whenever application code or internal processes call <xref:System.Windows.FrameworkElement.ApplyTemplate*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, is invoked whenever application code or internal processes call &lt;xref:System.Windows.FrameworkElement.ApplyTemplate*&gt;.","pos":[0,154],"source":"When overridden in a derived class, is invoked whenever application code or internal processes call <xref:System.Windows.FrameworkElement.ApplyTemplate*>."}]},{"pos":[204413,204722],"content":"This method has no default implementation.       Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element. For more information, see [Styling and Templating](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Templates are the section of an element's completed visual tree that comes from the Template property of a &lt;xref:System.Windows.Style&gt; that is applied for the element.","pos":[49,216],"source":"       Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Styling and Templating<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[217,307],"source":" For more information, see [Styling and Templating](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[205456,205663],"content":"Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked whenever an unhandled <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event reaches this class in its route.","pos":[0,147],"source":"Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"></xref> routed event reaches this class in its route."},{"content":"Implement this method to add class handling for this event.","pos":[148,207]}]},{"pos":[206992,207022],"content":"Provides data about the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data about the event.","pos":[0,30]}]},{"pos":[207678,207885],"content":"Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked whenever an unhandled <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event reaches this class in its route.","pos":[0,147],"source":"Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"></xref> routed event reaches this class in its route."},{"content":"Implement this method to add class handling for this event.","pos":[148,207]}]},{"pos":[209214,209299],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data."},{"pos":[209862,209987],"content":"Invoked whenever an unhandled <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement.GotFocus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event reaches this element in its route.","needQuote":true,"needEscape":true,"source":"Invoked whenever an unhandled <xref href=\"System.Windows.UIElement.GotFocus\"></xref> event reaches this element in its route."},{"pos":[210000,210937],"content":"Unlike some other On* methods exposed by the base elements, OnGotFocus does have a default implementation. Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>. When invoked, OnGotFocus sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus. The OnGotFocus handler does not mark the event arguments as handled, even when focus is set to the current element. If the event's source was another element in the tree (not the current element), the handler does nothing.       You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Unlike some other On* methods exposed by the base elements, OnGotFocus does have a default implementation. Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>. When invoked, OnGotFocus sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus. The OnGotFocus handler does not mark the event arguments as handled, even when focus is set to the current element. If the event's source was another element in the tree (not the current element), the handler does nothing.       You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).","pos":[0,935],"nodes":[{"content":"Unlike some other On* methods exposed by the base elements, OnGotFocus does have a default implementation.","pos":[0,106]},{"content":"Specifically, it has an implementation that overrides the null implementation in the next level of base element down, &lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;.","pos":[107,271],"source":" Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>."},{"content":"When invoked, OnGotFocus sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.","pos":[272,428]},{"content":"The OnGotFocus handler does not mark the event arguments as handled, even when focus is set to the current element.","pos":[429,544]},{"content":"If the event's source was another element in the tree (not the current element), the handler does nothing.","pos":[545,651]},{"content":"You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see &lt;xref:System.Windows.UIElement.Focusable%2A&gt;).","pos":[658,935],"source":"       You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>)."}]}]},{"pos":[211123,211208],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data."},{"pos":[211730,211982],"content":"Raises the <xref href=\"System.Windows.FrameworkElement.Initialized\"></xref> event. This method is invoked whenever <xref:System.Windows.FrameworkElement.IsInitialized*> is set to <xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref>internally.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.Initialized\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[0,82],"source":"Raises the <xref href=\"System.Windows.FrameworkElement.Initialized\"></xref> event."},{"content":"This method is invoked whenever &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt; is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>internally.","pos":[83,252],"source":" This method is invoked whenever <xref:System.Windows.FrameworkElement.IsInitialized*> is set to <xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref>internally."}]},{"pos":[212800,212885],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data."},{"pos":[213571,213868],"content":"Invoked whenever the effective value of any dependency property on this <xref href=\"System.Windows.FrameworkElement\"></xref> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <xref:System.Windows.DependencyObject.OnPropertyChanged*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked whenever the effective value of any dependency property on this <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been updated.","pos":[0,142],"source":"Invoked whenever the effective value of any dependency property on this <xref href=\"System.Windows.FrameworkElement\"></xref> has been updated."},{"content":"The specific dependency property that changed is reported in the arguments parameter.","pos":[143,228]},{"content":"Overrides &lt;xref:System.Windows.DependencyObject.OnPropertyChanged*&gt;.","pos":[229,297],"source":" Overrides <xref:System.Windows.DependencyObject.OnPropertyChanged*>."}]},{"pos":[213881,215086],"content":"This method is not intended to generally detect property changes or invalidations. It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.       This method is potentially invoked many times during the life of an object. Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties. However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.       Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes. That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is not intended to generally detect property changes or invalidations.","pos":[0,82]},{"content":"It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.","pos":[83,233]},{"content":"This method is potentially invoked many times during the life of an object.","pos":[240,315]},{"content":"Therefore, you can achieve better performance if you override the metadata of specific properties and then attach &lt;xref:System.Windows.CoerceValueCallback&gt; or &lt;xref:System.Windows.PropertyChangedCallback&gt; functions for individual properties.","pos":[316,557],"source":" Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties."},{"content":"However, you would use this method if a &lt;xref:System.Windows.FrameworkElement&gt; includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.","pos":[558,834],"source":" However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations."},{"content":"Note that there is an identically named <ph id=\"ph1\">`OnPropertyChanged`</ph> method with a different signature (the parameter type is &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;) that can appear on a number of classes.","pos":[841,1052],"source":"       Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes."},{"content":"That <ph id=\"ph1\">`OnPropertyChanged`</ph> is used for data object notifications, and is part of the contract for &lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;.","pos":[1053,1201],"source":" That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>."}]},{"pos":[215317,215404],"content":"The event data that describes the property that changed, as well as old and new values.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event data that describes the property that changed, as well as old and new values.","pos":[0,87]}]},{"pos":[216009,216159],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.SizeChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event, using the specified information as part of the eventual event data.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.FrameworkElement.SizeChanged\"></xref> event, using the specified information as part of the eventual event data."},{"pos":[216171,216539],"content":"This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.","pos":[0,368],"nodes":[{"content":"This method overrides &lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;.","pos":[0,77],"source":"This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>."},{"content":"If you call this method you will reset the &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; property, the &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.","pos":[78,368],"source":" If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event."}]}]},{"pos":[216747,216802],"content":"Details of the old and new size involved in the change.","needQuote":true,"needEscape":true,"nodes":[{"content":"Details of the old and new size involved in the change.","pos":[0,55]}]},{"pos":[217394,217482],"content":"Invoked when the style in use on this element changes, which will invalidate the layout.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked when the style in use on this element changes, which will invalidate the layout.","pos":[0,88]}]},{"pos":[217494,217601],"content":"This method has a default implementation that sets an internal flag that notes the style changed condition.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method has a default implementation that sets an internal flag that notes the style changed condition.","pos":[0,107]}]},{"pos":[217814,217828],"content":"The old style.","needQuote":true,"needEscape":true,"nodes":[{"content":"The old style.","pos":[0,14]}]},{"pos":[217900,217914],"content":"The new style.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new style.","pos":[0,14]}]},{"pos":[218524,218727],"content":"Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked whenever an unhandled <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event reaches this class in its route.","pos":[0,143],"source":"Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"></xref> routed event reaches this class in its route."},{"content":"Implement this method to add class handling for this event.","pos":[144,203]}]},{"pos":[220044,220074],"content":"Provides data about the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data about the event.","pos":[0,30]}]},{"pos":[220686,220880],"content":"Invoked whenever the <xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked whenever the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event reaches this class in its route.","pos":[0,134],"source":"Invoked whenever the <xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"></xref> routed event reaches this class in its route."},{"content":"Implement this method to add class handling for this event.","pos":[135,194]}]},{"pos":[222218,222248],"content":"Provides data about the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data about the event.","pos":[0,30]}]},{"pos":[222867,223003],"content":"Invoked when the parent of this element in the visual tree is changed. Overrides <xref:System.Windows.UIElement.OnVisualParentChanged*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoked when the parent of this element in the visual tree is changed. Overrides <xref:System.Windows.UIElement.OnVisualParentChanged*>.","pos":[0,136],"nodes":[{"content":"Invoked when the parent of this element in the visual tree is changed.","pos":[0,70]},{"content":"Overrides &lt;xref:System.Windows.UIElement.OnVisualParentChanged*&gt;.","pos":[71,136],"source":" Overrides <xref:System.Windows.UIElement.OnVisualParentChanged*>."}]}]},{"pos":[223015,223311],"content":"The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing. For more information, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.","pos":[0,215]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Trees in WPF<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[216,296],"source":" For more information, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[223525,223686],"content":"The old parent element. May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to indicate that the element did not have a visual parent previously.","needQuote":true,"needEscape":true,"nodes":[{"content":"The old parent element.","pos":[0,23]},{"content":"May be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that the element did not have a visual parent previously.","pos":[24,161],"source":" May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to indicate that the element did not have a visual parent previously."}]},{"pos":[224192,224297],"content":"Gets or sets a value that indicates whether this element incorporates style properties from theme styles.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether this element incorporates style properties from theme styles.","pos":[0,105]}]},{"pos":[224310,225430],"content":"The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.      > [!IMPORTANT] >  If you set OverridesDefaultStyle to `true` on a control, you will be suppressing the default control template supplied by the theme styles. That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] functionality and visualization for the control. If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure. For more information, see [Control Authoring Overview](~/add/includes/ajax-current-ext-md.md).      <a name=\"dependencyPropertyInfo_OverridesDefaultStyle\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.","pos":[0,122]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If you set OverridesDefaultStyle to <ph id=\"ph2\">`true`</ph> on a control, you will be suppressing the default control template supplied by the theme styles.","pos":[128,285],"source":"      > [!IMPORTANT] >  If you set OverridesDefaultStyle to `true` on a control, you will be suppressing the default control template supplied by the theme styles."},{"content":"That control template typically includes the content presenter and other composited elements that provide basic <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> functionality and visualization for the control.","pos":[286,509],"source":" That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] functionality and visualization for the control."},{"content":"If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.","pos":[510,698]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Control Authoring Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[699,793],"source":" For more information, see [Control Authoring Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_OverridesDefaultStyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[799,1107],"source":"<a name=\"dependencyPropertyInfo_OverridesDefaultStyle\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[225561,226058],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.","pos":[0,223],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.","pos":[224,418],"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[419,497],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[226601,226698],"content":"Identifies the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt; dependency property.","pos":[0,97],"source":"Identifies the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle*> dependency property."}]},{"pos":[226887,226899],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[227263,227312],"content":"Gets the logical parent  element of this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the logical parent  element of this element.","pos":[0,49]}]},{"pos":[227325,229218],"content":"Parent may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.       Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change. You typically should get the value immediately before you need it.       See [Trees in WPF](~/add/includes/ajax-current-ext-md.md) for more information about logical tree  traversal, and the scenarios where using  Parent as a technique of parent element discovery is appropriate.       The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree. The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.       Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.       The most typical scenario for using the Parent property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent. For templates, the Parent of the template eventually will be `null`. To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.       Note that this property does not report visual tree parents in cases where these vary from the logical tree parents. Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases. See <xref:System.Windows.Media.VisualTreeHelper>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Parent may be <ph id=\"ph1\">`null`</ph> in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.","pos":[0,188],"source":"Parent may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object."},{"content":"Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.","pos":[195,376]},{"content":"You typically should get the value immediately before you need it.","pos":[377,443]},{"content":"See <bpt id=\"p1\">[</bpt>Trees in WPF<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> for more information about logical tree  traversal, and the scenarios where using  Parent as a technique of parent element discovery is appropriate.","pos":[450,656],"source":"       See [Trees in WPF](~/add/includes/ajax-current-ext-md.md) for more information about logical tree  traversal, and the scenarios where using  Parent as a technique of parent element discovery is appropriate."},{"content":"The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.","pos":[663,833]},{"content":"The &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; that applies for bindings can also change when elements are reparented.","pos":[834,963],"source":" The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented."},{"content":"Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.","pos":[970,1151]},{"content":"The most typical scenario for using the Parent property is to obtain a reference and then get various &lt;xref:System.Windows.FrameworkElement&gt; property values from the parent.","pos":[1158,1331],"source":"       The most typical scenario for using the Parent property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent."},{"content":"For templates, the Parent of the template eventually will be <ph id=\"ph1\">`null`</ph>.","pos":[1332,1400],"source":" For templates, the Parent of the template eventually will be `null`."},{"content":"To get past this point and extend into the logical tree where the template is actually applied, use &lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;.","pos":[1401,1559],"source":" To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>."},{"content":"Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.","pos":[1566,1682]},{"content":"Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.","pos":[1683,1831]},{"content":"See &lt;xref:System.Windows.Media.VisualTreeHelper&gt;.","pos":[1832,1881],"source":" See <xref:System.Windows.Media.VisualTreeHelper>."}]},{"pos":[229880,229910],"content":"This element's logical parent.","needQuote":true,"needEscape":true,"nodes":[{"content":"This element's logical parent.","pos":[0,30]}]},{"pos":[230494,230797],"content":"Supports incremental layout implementations in specialized subclasses of <xref href=\"System.Windows.FrameworkElement\"></xref>. ParentLayoutInvalidated is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.","needQuote":true,"needEscape":true,"nodes":[{"content":"Supports incremental layout implementations in specialized subclasses of <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,126],"source":"Supports incremental layout implementations in specialized subclasses of <xref href=\"System.Windows.FrameworkElement\"></xref>."},{"content":"ParentLayoutInvalidated is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.","pos":[127,303]}]},{"pos":[230810,232176],"content":"If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked. The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.       By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation. The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.       An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system. Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior. For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked. The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.       By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation. The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.       An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system. Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior. For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.","pos":[0,1362],"nodes":[{"content":"If this element has a child element on which some property was invalidated and the property was marked as &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt; or &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt; in property metadata during registration, this method is invoked.","pos":[0,318],"source":"If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked."},{"content":"The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.","pos":[319,484]},{"content":"By default, &lt;xref:System.Windows.FrameworkElement&gt; does not support incremental layout, and in the &lt;xref:System.Windows.FrameworkElement&gt; class this method has no default implementation.","pos":[491,677],"source":"       By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation."},{"content":"The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.","pos":[678,823]},{"content":"An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.","pos":[830,1017]},{"content":"Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.","pos":[1018,1161]},{"content":"For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.","pos":[1162,1362]}]}]},{"pos":[232370,232409],"content":"The child element reporting the change.","needQuote":true,"needEscape":true,"nodes":[{"content":"The child element reporting the change.","pos":[0,39]}]},{"pos":[233042,233198],"content":"Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.","pos":[0,156]}]},{"pos":[233210,233314],"content":"<xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt; is the related method that actually does move focus.","pos":[0,104],"source":"<xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus."}]},{"pos":[234489,234561],"content":"The direction for which a prospective focus change should be determined.","needQuote":true,"needEscape":true,"nodes":[{"content":"The direction for which a prospective focus change should be determined.","pos":[0,72]}]},{"pos":[234637,234862],"content":"The next element that focus would move to if focus were actually traversed. May return <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if focus cannot be moved relative to this element for the provided direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The next element that focus would move to if focus were actually traversed.","pos":[0,75]},{"content":"May return <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if focus cannot be moved relative to this element for the provided direction.","pos":[76,225],"source":" May return <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if focus cannot be moved relative to this element for the provided direction."}]},{"pos":[235082,235586],"content":"Specified one of the following directions in the <xref href=\"System.Windows.Input.TraversalRequest\"></xref>: <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>. These directions are not legal for PredictFocus (but they are legal for <xref:System.Windows.FrameworkElement.MoveFocus*>).","needQuote":false,"needEscape":true,"nodes":[{"content":"Specified one of the following directions in the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.TraversalRequest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>: <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.FocusNavigationDirection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.FocusNavigationDirection\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref href=\"System.Windows.Input.FocusNavigationDirection\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, <bpt id=\"p5\">&lt;xref href=\"System.Windows.Input.FocusNavigationDirection\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","pos":[0,380],"source":"Specified one of the following directions in the <xref href=\"System.Windows.Input.TraversalRequest\"></xref>: <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>."},{"content":"These directions are not legal for PredictFocus (but they are legal for &lt;xref:System.Windows.FrameworkElement.MoveFocus*&gt;).","pos":[381,504],"source":" These directions are not legal for PredictFocus (but they are legal for <xref:System.Windows.FrameworkElement.MoveFocus*>)."}]},{"pos":[236065,236168],"content":"Provides an accessor that simplifies access to the <xref:System.Windows.NameScope> registration method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an accessor that simplifies access to the &lt;xref:System.Windows.NameScope&gt; registration method.","pos":[0,103],"source":"Provides an accessor that simplifies access to the <xref:System.Windows.NameScope> registration method."}]},{"pos":[236181,237175],"content":"This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>. The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>. For more information about namescopes, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md).       Calling RegisterName is necessary in order to correctly hook up animation storyboards for applications when created in code. This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element. This is true even if that element is accessible by reference from the code. For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is a convenience method for calling &lt;xref:System.Windows.NameScope.RegisterName%2A&gt;.","pos":[0,96],"source":"This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>."},{"content":"The implementation will check successive parent elements until it finds the applicable &lt;xref:System.Windows.NameScope&gt; implementation, which is found by finding an element that implements &lt;xref:System.Windows.Markup.INameScope&gt;.","pos":[97,325],"source":" The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>."},{"content":"For more information about namescopes, see <bpt id=\"p1\">[</bpt>WPF XAML Namescopes<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[326,430],"source":" For more information about namescopes, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)."},{"content":"Calling RegisterName is necessary in order to correctly hook up animation storyboards for applications when created in code.","pos":[437,561]},{"content":"This is because one of the key storyboard properties, &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;, uses a run-time name lookup instead of being able to take a reference to a target element.","pos":[562,770],"source":" This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element."},{"content":"This is true even if that element is accessible by reference from the code.","pos":[771,846]},{"content":"For more information on why you need to register names for storyboard targets, see <bpt id=\"p1\">[</bpt>Storyboards Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[847,992],"source":" For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[237694,237744],"content":"Name to use for the specified name-object mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name to use for the specified name-object mapping.","pos":[0,50]}]},{"pos":[237814,237837],"content":"Object for the mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"Object for the mapping.","pos":[0,23]}]},{"pos":[238371,238571],"content":"Removes the provided object from this element's logical tree. <xref href=\"System.Windows.FrameworkElement\"></xref> updates the affected logical tree parent pointers to keep in sync with this deletion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the provided object from this element's logical tree.","pos":[0,61]},{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> updates the affected logical tree parent pointers to keep in sync with this deletion.","pos":[62,200],"source":"<xref href=\"System.Windows.FrameworkElement\"></xref> updates the affected logical tree parent pointers to keep in sync with this deletion."}]},{"pos":[238584,239580],"content":"Use this method for the implementation of collections on objects that represent logical children of an element. This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.       For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate. Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>. These classes provide a content model with particular enforcement of logical children through dedicated [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method for the implementation of collections on objects that represent logical children of an element.","pos":[0,111]},{"content":"This might be done in property getters or setters, class handlers of <ph id=\"ph1\">`Changed`</ph> events, constructors, or within the collection types themselves.","pos":[112,255],"source":" This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves."},{"content":"For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.","pos":[262,439]},{"content":"Consider subclassing at the level of &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, and &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.","pos":[440,625],"source":" Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>."},{"content":"These classes provide a content model with particular enforcement of logical children through dedicated <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.","pos":[626,994],"source":" These classes provide a content model with particular enforcement of logical children through dedicated [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control such as styling through templates."}]},{"pos":[240626,240648],"content":"The element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to remove.","pos":[0,22]}]},{"pos":[241143,241235],"content":"Occurs when <xref:System.Windows.FrameworkElement.BringIntoView*> is called on this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when &lt;xref:System.Windows.FrameworkElement.BringIntoView*&gt; is called on this element.","pos":[0,92],"source":"Occurs when <xref:System.Windows.FrameworkElement.BringIntoView*> is called on this element."}]},{"pos":[241248,242191],"content":"This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the RequestBringIntoView event should be made visible within the scrollable region. The <xref:System.Windows.Controls.ScrollViewer> will then mark the RequestBringIntoView event as handled, by using class handling of the event. In general RequestBringIntoView event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.      <a name=\"routedEventInfo_RequestBringIntoView\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.RequestBringIntoViewEventHandler>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This event indicates to a parent &lt;xref:System.Windows.Controls.ScrollViewer&gt; (or derived class) that the element that raises the RequestBringIntoView event should be made visible within the scrollable region.","pos":[0,208],"source":"This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the RequestBringIntoView event should be made visible within the scrollable region."},{"content":"The &lt;xref:System.Windows.Controls.ScrollViewer&gt; will then mark the RequestBringIntoView event as handled, by using class handling of the event.","pos":[209,352],"source":" The <xref:System.Windows.Controls.ScrollViewer> will then mark the RequestBringIntoView event as handled, by using class handling of the event."},{"content":"In general RequestBringIntoView event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;.","pos":[353,643],"source":" In general RequestBringIntoView event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_RequestBringIntoView\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RequestBringIntoViewEventHandler&gt;|","pos":[649,932],"source":"<a name=\"routedEventInfo_RequestBringIntoView\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.RequestBringIntoViewEventHandler>|"}]},{"pos":[242390,242402],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[242858,242960],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> routed event."},{"pos":[243131,243143],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[243522,243575],"content":"Gets or sets the locally-defined resource dictionary.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the locally-defined resource dictionary.","pos":[0,53]}]},{"pos":[243588,247618],"content":"Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application. Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case). In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).       Note that this property returns only the resource dictionary declared directly within that element. This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.       Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary. In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] defined resource. For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values. When you access resources through code, it is essentially equivalent to a  reference made from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].       The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code. The Resources property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.       Notice that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>. This is an example of implicit collection syntax; a tag representing the collection element can be omitted. The elements that are added as items to the collection are specified instead. For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md). One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>. For details, see [Merged Resource Dictionaries](~/add/includes/ajax-current-ext-md.md).      <a name=\"xamlPropertyElementUsage_Resources\"></a>    ## XAML Property Element Usage      ```   <object>     <object.Resources>       oneOrMoreResourceElements     </object.Resources>   </object>   ```      <a name=\"xamlValues_Resources\"></a>    ## XAML Values    *oneOrMoreResourceElements*    One or more object elements, each of which defines a resource. Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/add/includes/ajax-current-ext-md.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Resource dictionaries that can be defined completely or partially in <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> are typically created as a property element, and are typically on the root element for any individual page or for the application.","pos":[0,263],"source":"Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application."},{"content":"Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).","pos":[264,421]},{"content":"In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).","pos":[422,775]},{"content":"Note that this property returns only the resource dictionary declared directly within that element.","pos":[782,881]},{"content":"This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.","pos":[882,1057]},{"content":"Resources can also be referenced by code from within the collection, but be aware that resources created in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> will definitely not be accessible until after &lt;xref:System.Windows.FrameworkElement.Loaded&gt; is raised by the element that declares the dictionary.","pos":[1064,1384],"source":"       Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary."},{"content":"In fact, resources are parsed asynchronously and not even the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event is an assurance that you can reference a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> defined resource.","pos":[1385,1623],"source":" In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] defined resource."},{"content":"For this reason you should generally only access <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> defined resources as part of run-time code, or through other <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> techniques such as styles or resource extension references for attribute values.","pos":[1624,1946],"source":" For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values."},{"content":"When you access resources through code, it is essentially equivalent to a  reference made from <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1947,2108],"source":" When you access resources through code, it is essentially equivalent to a  reference made from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."},{"content":"The underlying &lt;xref:System.Windows.ResourceDictionary&gt; supports the methods required to add, remove or query resources from within the collection by using code.","pos":[2115,2276],"source":"       The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code."},{"content":"The Resources property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[2277,2465],"source":" The Resources property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>."},{"content":"Notice that the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax shown does not include an element for the &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[2472,2644],"source":"       Notice that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>."},{"content":"This is an example of implicit collection syntax; a tag representing the collection element can be omitted.","pos":[2645,2752]},{"content":"The elements that are added as items to the collection are specified instead.","pos":[2753,2830]},{"content":"For more information about implicit collections and <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>XAML Syntax In Detail<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2831,3017],"source":" For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md)."},{"content":"One case where a &lt;xref:System.Windows.ResourceDictionary&gt; is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[3018,3269],"source":" One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Merged Resource Dictionaries<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3270,3357],"source":" For details, see [Merged Resource Dictionaries](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlPropertyElementUsage_Resources\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph1\">```   &lt;object&gt;     &lt;object.Resources&gt;       oneOrMoreResourceElements     &lt;/object.Resources&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Resources\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>oneOrMoreResourceElements<ept id=\"p3\">*</ept>    One or more object elements, each of which defines a resource.","pos":[3363,3719],"source":"<a name=\"xamlPropertyElementUsage_Resources\"></a>    ## XAML Property Element Usage      ```   <object>     <object.Resources>       oneOrMoreResourceElements     </object.Resources>   </object>   ```      <a name=\"xamlValues_Resources\"></a>    ## XAML Values    *oneOrMoreResourceElements*    One or more object elements, each of which defines a resource."},{"content":"Each resource property element within each &lt;xref:System.Windows.ResourceDictionary&gt; must have a unique value for the <bpt id=\"p1\">[</bpt>x:Key Directive<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>, which serves as the unique key when values are retrieved from the &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[3720,4002],"source":" Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/add/includes/ajax-current-ext-md.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>."}]},{"pos":[247785,247881],"content":"The current locally-defined dictionary of resources, where each resource can be accessed by key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current locally-defined dictionary of resources, where each resource can be accessed by key.","pos":[0,96]}]},{"pos":[248497,248619],"content":"Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.","pos":[0,122]}]},{"pos":[248631,249350],"content":"This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter. This signature is more convenient if you are establishing a simple default binding. If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is a convenience method for calling &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, which passes the current instance as the &lt;xref:System.Windows.DependencyObject&gt;, and creates a new &lt;xref:System.Windows.Data.Binding&gt; based on the provided <ph id=\"ph1\">`path`</ph> parameter.","pos":[0,306],"source":"This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter."},{"content":"This signature is more convenient if you are establishing a simple default binding.","pos":[307,390]},{"content":"If you need to specify any binding properties to non-default conditions, or want to use a &lt;xref:System.Windows.Data.MultiBinding&gt; or &lt;xref:System.Windows.Data.PriorityBinding&gt;,you should use the &lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt; signature.","pos":[391,719],"source":" If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature."}]},{"pos":[249929,250005],"content":"Identifies the destination property where the binding should be established.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the destination property where the binding should be established.","pos":[0,76]}]},{"pos":[250066,250140],"content":"The source property name or the path to the property used for the binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source property name or the path to the property used for the binding.","pos":[0,74]}]},{"pos":[250222,250312],"content":"Records the conditions of the binding. This return value can be useful for error checking.","needQuote":true,"needEscape":true,"nodes":[{"content":"Records the conditions of the binding. This return value can be useful for error checking.","pos":[0,90],"nodes":[{"content":"Records the conditions of the binding.","pos":[0,38]},{"content":"This return value can be useful for error checking.","pos":[39,90]}]}]},{"pos":[250980,251053],"content":"Attaches a binding to this element, based on the provided binding object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attaches a binding to this element, based on the provided binding object.","pos":[0,73]}]},{"pos":[251065,251278],"content":"This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>, which passes the current instance as the <xref:System.Windows.DependencyObject>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is a convenience method for calling &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, which passes the current instance as the &lt;xref:System.Windows.DependencyObject&gt;.","pos":[0,213],"source":"This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>, which passes the current instance as the <xref:System.Windows.DependencyObject>."}]},{"pos":[251537,251601],"content":"Identifies the property where the binding should be established.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the property where the binding should be established.","pos":[0,64]}]},{"pos":[251683,251728],"content":"Represents the specifics of the data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the specifics of the data binding.","pos":[0,45]}]},{"pos":[251814,251904],"content":"Records the conditions of the binding. This return value can be useful for error checking.","needQuote":true,"needEscape":true,"nodes":[{"content":"Records the conditions of the binding. This return value can be useful for error checking.","pos":[0,90],"nodes":[{"content":"Records the conditions of the binding.","pos":[0,38]},{"content":"This return value can be useful for error checking.","pos":[39,90]}]}]},{"pos":[252592,252711],"content":"Sets the value of the <xref:System.Windows.FrameworkElement.FlowDirection*> attached property for the provided element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the value of the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; attached property for the provided element.","pos":[0,119],"source":"Sets the value of the <xref:System.Windows.FrameworkElement.FlowDirection*> attached property for the provided element."}]},{"pos":[252723,253219],"content":"This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element. To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method supports attached property syntax for the &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; property, therefore allowing child elements of a provided &lt;xref:System.Windows.FrameworkElement&gt; to specify flow direction for the arrangement within their parent element.","pos":[0,281],"source":"This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element."},{"content":"To set the value on the current &lt;xref:System.Windows.FrameworkElement&gt;, use the direct <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> accessor &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.","pos":[282,496],"source":" To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>."}]},{"pos":[253455,253499],"content":"The element that specifies a flow direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element that specifies a flow direction.","pos":[0,44]}]},{"pos":[253576,253629],"content":"A value of the enumeration, specifying the direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of the enumeration, specifying the direction.","pos":[0,53]}]},{"pos":[254302,254416],"content":"Searches for a resource with the specified name and sets up a resource reference to it for the specified property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a resource with the specified name and sets up a resource reference to it for the specified property.","pos":[0,114]}]},{"pos":[254428,254919],"content":"A resource reference is similar to the use of a [DynamicResource Markup Extension](~/add/includes/ajax-current-ext-md.md) in markup. The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis. The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A resource reference is similar to the use of a <bpt id=\"p1\">[</bpt>DynamicResource Markup Extension<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> in markup.","pos":[0,132],"source":"A resource reference is similar to the use of a [DynamicResource Markup Extension](~/add/includes/ajax-current-ext-md.md) in markup."},{"content":"The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.","pos":[133,266]},{"content":"The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).","pos":[267,491]}]},{"pos":[255123,255167],"content":"The property to which the resource is bound.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property to which the resource is bound.","pos":[0,44]}]},{"pos":[255228,255253],"content":"The name of the resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the resource.","pos":[0,25]}]},{"pos":[255777,255913],"content":"Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Resources*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Resources*&gt; property.","pos":[0,136],"source":"Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Resources*> property."}]},{"pos":[255925,256062],"content":"This will return <ph id=\"ph1\">`true`</ph> as long as there is at least one keyed resource in the local &lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>."},{"pos":[256204,256433],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Resources*&gt; property value should be serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.FrameworkElement.Resources*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[256941,257073],"content":"Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Style*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Style*&gt; property.","pos":[0,132],"source":"Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Style*> property."}]},{"pos":[257085,257159],"content":"This will return <ph id=\"ph1\">`true`</ph> if the &lt;xref:System.Windows.Style&gt; is locally set.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This will return `true` if the <xref:System.Windows.Style> is locally set."},{"pos":[257297,257522],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Style*&gt; property value should be serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.FrameworkElement.Style*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[258041,258176],"content":"Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Triggers*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Triggers*&gt; property.","pos":[0,135],"source":"Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Triggers*> property."}]},{"pos":[258188,258297],"content":"This method returns <ph id=\"ph1\">`true`</ph> if the &lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt; property is locally set.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set."},{"pos":[258438,258666],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Triggers*&gt; property value should be serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.FrameworkElement.Triggers*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[259121,259296],"content":"Occurs when either the &lt;xref:System.Windows.FrameworkElement.ActualHeight<bpt id=\"p1\">*</bpt>&gt; or the &lt;xref:System.Windows.FrameworkElement.ActualWidth<ept id=\"p1\">*</ept>&gt; properties change value on this element.","needQuote":true,"needEscape":true,"source":"Occurs when either the <xref:System.Windows.FrameworkElement.ActualHeight*> or the <xref:System.Windows.FrameworkElement.ActualWidth*> properties change value on this element."},{"pos":[259309,260394],"content":"Direct routed events do not follow a route, they are only handled within the same element on which they are raised. Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.       The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant. This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values. The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.      <a name=\"routedEventInfo_SizeChanged\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.SizeChangedEventHandler>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Direct routed events do not follow a route, they are only handled within the same element on which they are raised.","pos":[0,115]},{"content":"Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.","pos":[116,293],"source":" Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style."},{"content":"The layout system reads properties within the &lt;xref:System.Windows.SizeChangedEventArgs&gt; argument class of this event, to  determine whether the reported size changes should be considered significant.","pos":[300,500],"source":"       The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant."},{"content":"This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.","pos":[501,697]},{"content":"The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.","pos":[698,812]},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_SizeChanged\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.SizeChangedEventHandler&gt;|","pos":[818,1072],"source":"<a name=\"routedEventInfo_SizeChanged\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.SizeChangedEventHandler>|"}]},{"pos":[260566,260578],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[260989,261082],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.SizeChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.SizeChanged\"></xref> routed event."},{"pos":[261095,261632],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[261795,261807],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[262203,262290],"content":"Occurs when the source value changes for any existing property binding on this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the source value changes for any existing property binding on this element.","pos":[0,87]}]},{"pos":[262303,262627],"content":"This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.      <a name=\"xamlAttributeUsage_SourceUpdated\"></a>    ## XAML Attribute Usage      ```   <object SourceUpdated=\"eventHandler\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This event creates an alias for the &lt;xref:System.Windows.Data.Binding.SourceUpdated&gt; event that is raised by any &lt;xref:System.Windows.Data.Binding&gt; associated with this element.","pos":[0,177],"source":"This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SourceUpdated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object SourceUpdated=\"eventHandler\"/&gt;   ```</ph>","pos":[183,313],"source":"<a name=\"xamlAttributeUsage_SourceUpdated\"></a>    ## XAML Attribute Usage      ```   <object SourceUpdated=\"eventHandler\"/>   ```"}]},{"pos":[262842,262854],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[263213,263277],"content":"Gets or sets the style used by this element when it is rendered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the style used by this element when it is rendered.","pos":[0,64]}]},{"pos":[263290,266321],"content":"For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style). This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element. In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.       Setting the styles has some restrictions. You can reset the entire Style property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition. However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed. Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown. A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).       Style is a dependency property with special precedence. The locally set style generally operates at the highest precedence in the property system. If the Style is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type. If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the Style property value. See [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md) or [Styling and Templating](~/add/includes/ajax-current-ext-md.md).      <a name=\"xamlAttributeUsage_Style\"></a>    ## XAML Attribute Usage      ```   <object Style=\"{resourceExtension styleResourceKey}\"/>   ```      <a name=\"xamlPropertyElementUsage_Style\"></a>    ## XAML Property Element Usage      <a name=\"xamlValues_Style\"></a>    ## XAML Values    *resourceExtension*    One of the following: , or . See [XAML Resources](~/add/includes/ajax-current-ext-md.md).       *styleResourceKey*    The key that identifies the style being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.      > [!NOTE] >  Property element syntax is technically possible, but not recommended for most style scenarios. See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md). A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.      <a name=\"dependencyPropertyInfo_Style\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.StyleProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).","pos":[0,211]},{"content":"This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.","pos":[212,368]},{"content":"In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.","pos":[369,496]},{"content":"Setting the styles has some restrictions.","pos":[503,544]},{"content":"You can reset the entire Style property to a new &lt;xref:System.Windows.Style&gt; at any time, which will force a layout recomposition.","pos":[545,675],"source":" You can reset the entire Style property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition."},{"content":"However, as soon as that style is placed in use by a loaded element, the &lt;xref:System.Windows.Style&gt; should be considered sealed.","pos":[676,805],"source":" However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed."},{"content":"Attempting to make a change to any individual property of an in-use style (such as anything within the collection of &lt;xref:System.Windows.Style.Setters%2A&gt;) causes an exception to be thrown.","pos":[806,996],"source":" Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown."},{"content":"A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).","pos":[997,1191]},{"content":"Style is a dependency property with special precedence.","pos":[1198,1253]},{"content":"The locally set style generally operates at the highest precedence in the property system.","pos":[1254,1344]},{"content":"If the Style is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.","pos":[1345,1500]},{"content":"If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the Style property value.","pos":[1501,1707]},{"content":"See <bpt id=\"p1\">[</bpt>Dependency Property Value Precedence<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id=\"p2\">[</bpt>Styling and Templating<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1708,1857],"source":" See [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md) or [Styling and Templating](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Style\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object Style=\"{resourceExtension styleResourceKey}\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlPropertyElementUsage_Style\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <bpt id=\"p3\">&lt;a name=\"xamlValues_Style\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>resourceExtension<ept id=\"p4\">*</ept>    One of the following: , or .","pos":[1863,2196],"source":"<a name=\"xamlAttributeUsage_Style\"></a>    ## XAML Attribute Usage      ```   <object Style=\"{resourceExtension styleResourceKey}\"/>   ```      <a name=\"xamlPropertyElementUsage_Style\"></a>    ## XAML Property Element Usage      <a name=\"xamlValues_Style\"></a>    ## XAML Values    *resourceExtension*    One of the following: , or ."},{"content":"See <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2197,2257],"source":" See [XAML Resources](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">*</bpt>styleResourceKey<ept id=\"p1\">*</ept>    The key that identifies the style being requested.","pos":[2264,2336],"source":"*styleResourceKey*    The key that identifies the style being requested."},{"content":"The key refers to an existing resource in a &lt;xref:System.Windows.ResourceDictionary&gt;.","pos":[2337,2422],"source":" The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Property element syntax is technically possible, but not recommended for most style scenarios.","pos":[2428,2535],"source":"      > [!NOTE] >  Property element syntax is technically possible, but not recommended for most style scenarios."},{"content":"See <bpt id=\"p1\">[</bpt>Inline Styles and Templates<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2536,2609],"source":" See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md)."},{"content":"A binding reference using  or &lt;xref:System.Windows.Data.Binding&gt; is also possible, but uncommon.","pos":[2610,2706],"source":" A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Style\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.StyleProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[2712,2988],"source":"<a name=\"dependencyPropertyInfo_Style\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.StyleProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[266962,267249],"content":"The applied, nondefault style for the element, if present. Otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>. The default for a default-constructed <xref href=\"System.Windows.FrameworkElement\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The applied, nondefault style for the element, if present.","pos":[0,58]},{"content":"Otherwise, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[59,131],"source":" Otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"The default for a default-constructed <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[132,287],"source":" The default for a default-constructed <xref href=\"System.Windows.FrameworkElement\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[267696,267777],"content":"Identifies the <xref:System.Windows.FrameworkElement.Style*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Style*&gt; dependency property.","pos":[0,81],"source":"Identifies the <xref:System.Windows.FrameworkElement.Style*> dependency property."}]},{"pos":[267950,267962],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[268672,268792],"content":"For a description of this member, see the <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see the &lt;xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt; method.","pos":[0,120],"source":"For a description of this member, see the <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*> method."}]},{"pos":[268804,269008],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.","pos":[0,204],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Windows.FrameworkElement&gt; instance is cast to an &lt;xref:System.Windows.Markup.IQueryAmbient&gt; interface.","pos":[60,204],"source":" It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface."}]}]},{"pos":[269185,269228],"content":"The name of the requested ambient property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the requested ambient property.","pos":[0,43]}]},{"pos":[269287,269465],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">propertyName</ph><ept id=\"p2\">&lt;/code&gt;</ept> is available; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>propertyName</code> is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[269922,270025],"content":"Gets or sets an arbitrary object value that can be used to store custom information about this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an arbitrary object value that can be used to store custom information about this element.","pos":[0,103]}]},{"pos":[270038,271543],"content":"This property is analogous to Tag properties in other [!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)] programming models, such as [!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)] or [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]. Tag is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.       Because this property takes an object, you would need to use the property element usage in order to set the Tag property in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] to anything other than an object with a known and built-in type converter, such as a string. Objects used in this manner are typically not within the standard [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] elements. For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md) and [XAML and Custom Classes for WPF](~/add/includes/ajax-current-ext-md.md).      <a name=\"dependencyPropertyInfo_Tag\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.TagProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is analogous to Tag properties in other <ph id=\"ph1\">[!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)]</ph> programming models, such as <ph id=\"ph2\">[!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)]</ph> or <ph id=\"ph3\">[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,276],"source":"This property is analogous to Tag properties in other [!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)] programming models, such as [!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)] or [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]."},{"content":"Tag is intended to provide a pre-existing property location where you can store some basic custom information about any &lt;xref:System.Windows.FrameworkElement&gt; without requiring you to subclass an element.","pos":[277,481],"source":" Tag is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element."},{"content":"Because this property takes an object, you would need to use the property element usage in order to set the Tag property in <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> to anything other than an object with a known and built-in type converter, such as a string.","pos":[488,768],"source":"       Because this property takes an object, you would need to use the property element usage in order to set the Tag property in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] to anything other than an object with a known and built-in type converter, such as a string."},{"content":"Objects used in this manner are typically not within the standard <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> elements.","pos":[769,1089],"source":" Objects used in this manner are typically not within the standard [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] elements."},{"content":"For details, see <bpt id=\"p1\">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>XAML and Custom Classes for WPF<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1090,1276],"source":" For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md) and [XAML and Custom Classes for WPF](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Tag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.TagProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[1282,1493],"source":"<a name=\"dependencyPropertyInfo_Tag\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.TagProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[271657,271712],"content":"The intended value. This property has no default value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The intended value. This property has no default value.","pos":[0,55],"nodes":[{"content":"The intended value.","pos":[0,19]},{"content":"This property has no default value.","pos":[20,55]}]}]},{"pos":[272147,272226],"content":"Identifies the <xref:System.Windows.FrameworkElement.Tag*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Tag*&gt; dependency property.","pos":[0,79],"source":"Identifies the <xref:System.Windows.FrameworkElement.Tag*> dependency property."}]},{"pos":[272397,272409],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[272805,272883],"content":"Occurs when the target value changes for any property binding on this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the target value changes for any property binding on this element.","pos":[0,78]}]},{"pos":[272896,273610],"content":"This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element. This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.       Use the event data of the TargetUpdated event to determine the specific property that is reporting the target value update.      <a name=\"xamlAttributeUsage_TargetUpdated\"></a>    ## XAML Attribute Usage      ```   <object TargetUpdated=\"eventHandler\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This event creates an alias for the &lt;xref:System.Windows.Data.Binding.TargetUpdated&gt; event that is raised by any &lt;xref:System.Windows.Data.Binding&gt; associated with this element.","pos":[0,177],"source":"This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element."},{"content":"This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.","pos":[178,435]},{"content":"Use the event data of the TargetUpdated event to determine the specific property that is reporting the target value update.","pos":[442,565]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_TargetUpdated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object TargetUpdated=\"eventHandler\"/&gt;   ```</ph>","pos":[571,701],"source":"<a name=\"xamlAttributeUsage_TargetUpdated\"></a>    ## XAML Attribute Usage      ```   <object TargetUpdated=\"eventHandler\"/>   ```"}]},{"pos":[273825,273837],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[274246,274383],"content":"Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.","pos":[0,137],"nodes":[{"content":"Gets a reference to the template parent of this element.","pos":[0,56]},{"content":"This property is not relevant if the element was not created through a template.","pos":[57,137]}]}]},{"pos":[274396,275633],"content":"TemplatedParent is frequently `null` for objects that are created in your application markup or code. This is because you create those objects directly, not via a template. Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.       Cases where TemplatedParent might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates. Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.       Templates are actually shared objects, where the contents of the template are created only once. Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root. In order to connect such a template reference to the page's logical tree, you should get the TemplatedParent value and continue to navigate that element tree as desired.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"TemplatedParent is frequently <ph id=\"ph1\">`null`</ph> for objects that are created in your application markup or code.","pos":[0,101],"source":"TemplatedParent is frequently `null` for objects that are created in your application markup or code."},{"content":"This is because you create those objects directly, not via a template.","pos":[102,172]},{"content":"Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.","pos":[173,302]},{"content":"Cases where TemplatedParent might not be <ph id=\"ph1\">`null`</ph> include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with &lt;xref:System.Windows.Media.VisualTreeHelper&gt;, or working with enumerators, which might return elements that came from templates.","pos":[309,605],"source":"       Cases where TemplatedParent might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates."},{"content":"Another case is if you specifically call &lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt; against an existing &lt;xref:System.Windows.FrameworkTemplate&gt; and are work with the returned object.","pos":[606,797],"source":" Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object."},{"content":"Templates are actually shared objects, where the contents of the template are created only once.","pos":[804,900]},{"content":"Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.","pos":[901,1063]},{"content":"In order to connect such a template reference to the page's logical tree, you should get the TemplatedParent value and continue to navigate that element tree as desired.","pos":[1064,1233]}]},{"pos":[275797,276055],"content":"The element whose <xref href=\"System.Windows.FrameworkTemplate\"></xref> <xref:System.Windows.FrameworkTemplate.VisualTree*> caused this element to be created. This value is frequently <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; see Remarks.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element whose <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkTemplate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> &lt;xref:System.Windows.FrameworkTemplate.VisualTree*&gt; caused this element to be created.","pos":[0,158],"source":"The element whose <xref href=\"System.Windows.FrameworkTemplate\"></xref> <xref:System.Windows.FrameworkTemplate.VisualTree*> caused this element to be created."},{"content":"This value is frequently <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","pos":[159,258],"source":" This value is frequently <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; see Remarks."}]},{"pos":[276485,276620],"content":"Gets or sets the tool-tip object that is displayed for this element in the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]."},{"pos":[276633,278773],"content":"If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)].  If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system. For more information, see <xref:System.Windows.Controls.ToolTipService>. The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.      <a name=\"xamlAttributeUsage_ToolTip\"></a>    ## XAML Attribute Usage      ```   <object ToolTip=\"toolTipContent\"/>   ```      <a name=\"xamlPropertyElementUsage_ToolTip\"></a>    ## XAML Property Element Usage      ```   <object>     <object.ToolTip>       <ToolTip .../>     </object.ToolTip>   </object>   - or -   <object>     <object.ToolTip>       toolTipObjectContent     </object.ToolTip>   </object>   ```      <a name=\"xamlValues_ToolTip\"></a>    ## XAML Values    *toolTipContent*    A string that becomes the display text for the ToolTip.       *toolTipObjectContent*    Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement> . Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the ToolTip, eventually containing text content within the compositing. In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName> property.       <`ToolTip` .../>    See <xref:System.Windows.Controls.ToolTip>.      <a name=\"dependencyPropertyInfo_ToolTip\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ToolTipProperty>|   |Metadata properties set to `true`|None|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of this property is of type &lt;xref:System.Windows.Controls.ToolTip&gt;, then that value is the tool-tip that will be used in the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,201],"source":"If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]."},{"content":"If the value is of any other type, then that value will be used as the <bpt id=\"p1\">*</bpt>content<ept id=\"p1\">*</ept> for a &lt;xref:System.Windows.Controls.ToolTip&gt; provided (constructed) by the system.","pos":[203,366],"source":"  If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system."},{"content":"For more information, see &lt;xref:System.Windows.Controls.ToolTipService&gt;.","pos":[367,439],"source":" For more information, see <xref:System.Windows.Controls.ToolTipService>."},{"content":"The service class provides attached properties that can be used to further customize a &lt;xref:System.Windows.Controls.ToolTip&gt;.","pos":[440,566],"source":" The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToolTip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object ToolTip=\"toolTipContent\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlPropertyElementUsage_ToolTip\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph2\">```   &lt;object&gt;     &lt;object.ToolTip&gt;       &lt;ToolTip .../&gt;     &lt;/object.ToolTip&gt;   &lt;/object&gt;   - or -   &lt;object&gt;     &lt;object.ToolTip&gt;       toolTipObjectContent     &lt;/object.ToolTip&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_ToolTip\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p4\">*</bpt>toolTipContent<ept id=\"p4\">*</ept>    A string that becomes the display text for the ToolTip.","pos":[572,1119],"source":"<a name=\"xamlAttributeUsage_ToolTip\"></a>    ## XAML Attribute Usage      ```   <object ToolTip=\"toolTipContent\"/>   ```      <a name=\"xamlPropertyElementUsage_ToolTip\"></a>    ## XAML Property Element Usage      ```   <object>     <object.ToolTip>       <ToolTip .../>     </object.ToolTip>   </object>   - or -   <object>     <object.ToolTip>       toolTipObjectContent     </object.ToolTip>   </object>   ```      <a name=\"xamlValues_ToolTip\"></a>    ## XAML Values    *toolTipContent*    A string that becomes the display text for the ToolTip."},{"content":"<bpt id=\"p1\">*</bpt>toolTipObjectContent<ept id=\"p1\">*</ept>    Some object, provided in object element form, that should be used as the content for the &lt;xref:System.Windows.FrameworkElement&gt; .","pos":[1126,1281],"source":"*toolTipObjectContent*    Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement> ."},{"content":"Typically this would be a &lt;xref:System.Windows.FrameworkElement&gt; or some other element that creates layout compositing for the ToolTip, eventually containing text content within the compositing.","pos":[1282,1476],"source":" Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the ToolTip, eventually containing text content within the compositing."},{"content":"In this usage, the &lt;xref:System.Windows.Controls.ToolTip&gt; element is created implicitly from the parsed <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, and the <bpt id=\"p1\">*</bpt>toolTipObjectContent<ept id=\"p1\">*</ept> content is set as its &lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt; property.","pos":[1477,1792],"source":" In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName> property."},{"content":"&lt;<ph id=\"ph1\">`ToolTip`</ph> .../&gt;    See &lt;xref:System.Windows.Controls.ToolTip&gt;.","pos":[1799,1862],"source":"       <`ToolTip` .../>    See <xref:System.Windows.Controls.ToolTip>."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_ToolTip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","pos":[1868,2087],"source":"<a name=\"dependencyPropertyInfo_ToolTip\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ToolTipProperty>|   |Metadata properties set to `true`|None|"}]},{"pos":[279315,279409],"content":"The tooltip object. See Remarks below for details on why this parameter is not strongly typed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tooltip object. See Remarks below for details on why this parameter is not strongly typed.","pos":[0,94],"nodes":[{"content":"The tooltip object.","pos":[0,19]},{"content":"See Remarks below for details on why this parameter is not strongly typed.","pos":[20,94]}]}]},{"pos":[279863,279919],"content":"Occurs just before any tooltip on the element is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs just before any tooltip on the element is closed.","pos":[0,56]}]},{"pos":[279932,280791],"content":"Marking the ToolTipClosing event as handled does not cancel closing the tooltip. Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.       This event cannot be an <xref:System.Windows.EventTrigger> in a style. This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.      <a name=\"routedEventInfo_ToolTipClosing\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Marking the ToolTipClosing event as handled does not cancel closing the tooltip.","pos":[0,80]},{"content":"Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.","pos":[81,189]},{"content":"This event cannot be an &lt;xref:System.Windows.EventTrigger&gt; in a style.","pos":[196,266],"source":"       This event cannot be an <xref:System.Windows.EventTrigger> in a style."},{"content":"This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.","pos":[267,433]},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_ToolTipClosing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; to implement class handling for this event in derived classes.","pos":[439,844],"source":"<a name=\"routedEventInfo_ToolTipClosing\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes."}]},{"pos":[280976,280988],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[281414,281510],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"></xref> routed event."},{"pos":[281523,282060],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[282226,282238],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[282639,282688],"content":"Occurs when any tooltip on the element is opened.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when any tooltip on the element is opened.","pos":[0,49]}]},{"pos":[282701,284293],"content":"To prevent a tooltip from appearing in the UI, your handler for ToolTipOpening can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled. Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content. Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.       ToolTipOpening will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset. Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.       The ToolTipOpening event cannot be an <xref:System.Windows.EventTrigger> in a style. This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.      <a name=\"routedEventInfo_ToolTipOpening\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To prevent a tooltip from appearing in the UI, your handler for ToolTipOpening can mark the &lt;xref:System.Windows.Controls.ToolTipEventArgs&gt; event data handled.","pos":[0,159],"source":"To prevent a tooltip from appearing in the UI, your handler for ToolTipOpening can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled."},{"content":"Otherwise, the tooltip is displayed, using the value of the &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; property as the tooltip content.","pos":[160,302],"source":" Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content."},{"content":"Another possible scenario is that you could write a handler that resets the value of the &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; property for the element that is the event source, just before the tooltip is displayed.","pos":[303,530],"source":" Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed."},{"content":"ToolTipOpening will not be raised if the value of &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; is <ph id=\"ph1\">`null`</ph> or otherwise unset.","pos":[537,666],"source":"       ToolTipOpening will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset."},{"content":"Do not deliberately set &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; to <ph id=\"ph1\">`null`</ph> while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.","pos":[667,906],"source":" Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI."},{"content":"The ToolTipOpening event cannot be an &lt;xref:System.Windows.EventTrigger&gt; in a style.","pos":[913,997],"source":"       The ToolTipOpening event cannot be an <xref:System.Windows.EventTrigger> in a style."},{"content":"This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.","pos":[998,1164]},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_ToolTipOpening\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; to implement class handling for this event in derived classes.","pos":[1170,1575],"source":"<a name=\"routedEventInfo_ToolTipOpening\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|      -   Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes."}]},{"pos":[284478,284490],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[284916,285012],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"></xref> routed event."},{"pos":[285025,285562],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[285728,285740],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[286146,286229],"content":"Identifies the <xref:System.Windows.FrameworkElement.ToolTip*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.ToolTip*&gt; dependency property.","pos":[0,83],"source":"Identifies the <xref:System.Windows.FrameworkElement.ToolTip*> dependency property."}]},{"pos":[286404,286416],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[286790,286881],"content":"Gets the collection of triggers established directly on this element, or in child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of triggers established directly on this element, or in child elements.","pos":[0,91]}]},{"pos":[286894,289348],"content":"> [!NOTE] >  This property can only be set in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add. The property to access the collection object itself is read-only, the collection itself is read-write. The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.       This property does not enable you to examine triggers that exist as part of styles in use on this element. It only reports the collection of triggers that are literally added to the collection, either in markup or code. Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.       In terms of behavior (and trying to establish which effect came from which element's declared Triggers collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree. Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.       Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>). If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.      <a name=\"xamlPropertyElementUsage_Triggers\"></a>    ## XAML Property Element Usage      ```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ```      <a name=\"xamlValues_Triggers\"></a>    ## XAML Values    *oneOrMoreTriggers*    One or more defined <xref:System.Windows.EventTrigger> elements. Each such trigger is expected to contain valid storyboard actions and references. Note that this collection can only be established on the root element of a page. For more information, see [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  This property can only be set in <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.","pos":[0,227],"source":"> [!NOTE] >  This property can only be set in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add."},{"content":"The property to access the collection object itself is read-only, the collection itself is read-write.","pos":[228,330]},{"content":"The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.","pos":[331,453]},{"content":"This property does not enable you to examine triggers that exist as part of styles in use on this element.","pos":[460,566]},{"content":"It only reports the collection of triggers that are literally added to the collection, either in markup or code.","pos":[567,679]},{"content":"Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.","pos":[680,882]},{"content":"In terms of behavior (and trying to establish which effect came from which element's declared Triggers collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.","pos":[889,1138]},{"content":"Note that if you use lifetime events such as &lt;xref:System.Windows.FrameworkElement.Loaded&gt; to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.","pos":[1139,1384],"source":" Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time."},{"content":"Note that the collection of triggers established on an element only supports &lt;xref:System.Windows.EventTrigger&gt;, not property triggers (&lt;xref:System.Windows.Trigger&gt;).","pos":[1391,1558],"source":"       Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>)."},{"content":"If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property, or indirectly through an implicit style reference.","pos":[1559,1831],"source":" If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlPropertyElementUsage_Triggers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph1\">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Triggers\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>oneOrMoreTriggers<ept id=\"p3\">*</ept>    One or more defined &lt;xref:System.Windows.EventTrigger&gt; elements.","pos":[1837,2175],"source":"<a name=\"xamlPropertyElementUsage_Triggers\"></a>    ## XAML Property Element Usage      ```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ```      <a name=\"xamlValues_Triggers\"></a>    ## XAML Values    *oneOrMoreTriggers*    One or more defined <xref:System.Windows.EventTrigger> elements."},{"content":"Each such trigger is expected to contain valid storyboard actions and references.","pos":[2176,2257]},{"content":"Note that this collection can only be established on the root element of a page.","pos":[2258,2338]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Storyboards Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2339,2427],"source":" For more information, see [Storyboards Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[289507,289590],"content":"A strongly typed collection of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Trigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A strongly typed collection of <xref href=\"System.Windows.Trigger\"></xref> objects."},{"pos":[290105,290188],"content":"Searches for a resource with the specified key, and returns that resource if found.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a resource with the specified key, and returns that resource if found.","pos":[0,83]}]},{"pos":[290201,290939],"content":"If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time. The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that TryFindResource is called.       Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.       The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.","pos":[0,219]},{"content":"The method returns <ph id=\"ph1\">`null`</ph> only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that TryFindResource is called.","pos":[220,400],"source":" The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that TryFindResource is called."},{"content":"Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.","pos":[407,554]},{"content":"The &lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt; method has similar behavior, except that it throws an exception if no resource with the provided key was returned.","pos":[561,734],"source":"       The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned."}]},{"pos":[291758,291805],"content":"The key identifier of the resource to be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier of the resource to be found.","pos":[0,47]}]},{"pos":[291863,292006],"content":"The found resource, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no resource with the provided <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found.","needQuote":true,"needEscape":true,"source":"The found resource, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no resource with the provided <code>key</code> is found."},{"pos":[292438,292520],"content":"Occurs when the element is removed from within an element tree of loaded elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the element is removed from within an element tree of loaded elements.","pos":[0,82]}]},{"pos":[292533,293894],"content":"Direct routed events do not follow a route, they are only handled within the same element on which they are raised. Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.       <xref:System.Windows.FrameworkElement.Loaded> and Unloaded might both be raised on controls as a result of user-initiated system theme changes. A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload. Therefore Unloaded cannot be assumed to occur only on navigation away from the page.       Note that the Unloaded event is not raised after an application begins shutting down. Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs. If you place cleanup code within a handler for the Unloaded event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.      <a name=\"routedEventInfo_Unloaded\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.UnloadedEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.RoutedEventHandler>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Direct routed events do not follow a route, they are only handled within the same element on which they are raised.","pos":[0,115]},{"content":"Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.","pos":[116,293],"source":" Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style."},{"content":"&lt;xref:System.Windows.FrameworkElement.Loaded&gt; and Unloaded might both be raised on controls as a result of user-initiated system theme changes.","pos":[300,443],"source":"       <xref:System.Windows.FrameworkElement.Loaded> and Unloaded might both be raised on controls as a result of user-initiated system theme changes."},{"content":"A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.","pos":[444,598]},{"content":"Therefore Unloaded cannot be assumed to occur only on navigation away from the page.","pos":[599,683]},{"content":"Note that the Unloaded event is not raised after an application begins shutting down.","pos":[690,775]},{"content":"Application shutdown occurs when the condition defined by the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; property occurs.","pos":[776,904],"source":" Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs."},{"content":"If you place cleanup code within a handler for the Unloaded event, such as for a &lt;xref:System.Windows.Window&gt; or a &lt;xref:System.Windows.Controls.UserControl&gt;, it may not be called as expected.","pos":[905,1097],"source":" If you place cleanup code within a handler for the Unloaded event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_Unloaded\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.UnloadedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|","pos":[1103,1346],"source":"<a name=\"routedEventInfo_Unloaded\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.UnloadedEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.RoutedEventHandler>|"}]},{"pos":[294053,294065],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[294461,294551],"content":"Identifies the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.Unloaded\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Identifies the <xref href=\"System.Windows.FrameworkElement.Unloaded\"></xref> routed event."},{"pos":[294564,295101],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,535],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]},{"content":"For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.","pos":[274,390],"source":"       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.","pos":[391,535],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]},{"pos":[295261,295273],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[295729,295809],"content":"Simplifies access to the <xref:System.Windows.NameScope> de-registration method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Simplifies access to the &lt;xref:System.Windows.NameScope&gt; de-registration method.","pos":[0,80],"source":"Simplifies access to the <xref:System.Windows.NameScope> de-registration method."}]},{"pos":[295821,295921],"content":"You only need to un-register names if you intend to re-register another element with that same name.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You only need to un-register names if you intend to re-register another element with that same name.","pos":[0,100]}]},{"pos":[296063,296125],"content":"Name of the name-object pair to remove from the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the name-object pair to remove from the current scope.","pos":[0,62]}]},{"pos":[296613,296709],"content":"Reapplies the default style to the current <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reapplies the default style to the current <xref href=\"System.Windows.FrameworkElement\"></xref>."},{"pos":[297269,297397],"content":"Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.","pos":[0,128]}]},{"pos":[297410,299772],"content":"When the UseLayoutRounding property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.       This property is inherited by child elements.      > [!NOTE] >  You should set UseLayoutRounding to `true` on the root element. The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary. If UseLayoutRounding cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.       Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel. The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel. The line on the left does not use layout rounding and is anti-aliased. The line on the right uses layout rounding.       ![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG \"Anti-aliased line compared to single pixel line.\")       When you use layout rounding and <xref:System.Windows.GridUnitType> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering. For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.      > [!NOTE] >  In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders. By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher. Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime>``<AppContextSwitchOverrides      value=\"Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false\"/>``</runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the UseLayoutRounding property for an element is <ph id=\"ph1\">`true`</ph>, all non-integral pixel values that are calculated during the &lt;xref:System.Windows.UIElement.Measure%2A&gt; and &lt;xref:System.Windows.UIElement.Arrange%2A&gt; passes are rounded to whole pixel values.","pos":[0,254],"source":"When the UseLayoutRounding property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values."},{"content":"This property is inherited by child elements.","pos":[261,306]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You should set UseLayoutRounding to <ph id=\"ph2\">`true`</ph> on the root element.","pos":[312,388],"source":"      > [!NOTE] >  You should set UseLayoutRounding to `true` on the root element."},{"content":"The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.","pos":[389,578]},{"content":"If UseLayoutRounding cannot be set at the root, set &lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt; on the child to obtain the effect that you want.","pos":[579,734],"source":" If UseLayoutRounding cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want."},{"content":"Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.","pos":[741,902]},{"content":"The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.","pos":[903,1019]},{"content":"The line on the left does not use layout rounding and is anti-aliased.","pos":[1020,1090]},{"content":"The line on the right uses layout rounding.","pos":[1091,1134]},{"content":"<bpt id=\"p1\">![</bpt>Anti&amp;#45;aliased line compared to single pixel line.<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/pixelsnaplinecompare.PNG \"</bpt>Anti-aliased line compared to single pixel line.<ept id=\"p2\">\")</ept>","pos":[1141,1285],"source":"![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG \"Anti-aliased line compared to single pixel line.\")"},{"content":"When you use layout rounding and &lt;xref:System.Windows.GridUnitType&gt; sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.","pos":[1292,1473],"source":"       When you use layout rounding and <xref:System.Windows.GridUnitType> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering."},{"content":"For example, if a grid has a total width of 100 with 3 columns each of size &lt;xref:System.Windows.GridUnitType&gt;, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.","pos":[1474,1745],"source":" For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.","pos":[1751,1870],"source":"      > [!NOTE] >  In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders."},{"content":"By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.","pos":[1871,1964]},{"content":"Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: <ph id=\"ph1\">`&lt;runtime&gt;``&lt;AppContextSwitchOverrides      value=\"Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false\"/&gt;``&lt;/runtime&gt;`</ph> The setting only takes effect when the application is running on the .NET Framework 4.6.","pos":[1965,2344],"source":" Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime>``<AppContextSwitchOverrides      value=\"Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false\"/>``</runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6."}]},{"pos":[301640,301885],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if layout rounding is applied; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if layout rounding is applied; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,166],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if layout rounding is applied; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[167,245],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[302404,302497],"content":"Identifies the <xref:System.Windows.FrameworkElement.UseLayoutRounding*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt; dependency property.","pos":[0,93],"source":"Identifies the <xref:System.Windows.FrameworkElement.UseLayoutRounding*> dependency property."}]},{"pos":[302682,302694],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[303113,303266],"content":"Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.","pos":[0,153]}]},{"pos":[303279,305323],"content":"When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment>.       VerticalAlignment is the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \"default\" value set differently in derived element classes, particularly controls. This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently. For example, the apparent \"default\" of VerticalAlignment for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits VerticalAlignment direct from <xref:System.Windows.FrameworkElement>. This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.       <xref:System.Windows.Controls.Canvas> does not use VerticalAlignment when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.       When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment>.      <a name=\"dependencyPropertyInfo_VerticalAlignment\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to &lt;xref:System.Windows.VerticalAlignment&gt;.","pos":[0,291],"source":"When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment>."},{"content":"VerticalAlignment is the <ph id=\"ph1\">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.","pos":[298,448],"source":"       VerticalAlignment is the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property."},{"content":"This particular dependency property quite frequently has its apparent \"default\" value set differently in derived element classes, particularly controls.","pos":[449,601]},{"content":"This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.","pos":[602,866]},{"content":"For example, the apparent \"default\" of VerticalAlignment for a &lt;xref:System.Windows.Controls.ComboBoxItem&gt; control will be &lt;xref:System.Windows.VerticalAlignment&gt;, even though &lt;xref:System.Windows.Controls.ComboBoxItem&gt; inherits VerticalAlignment direct from &lt;xref:System.Windows.FrameworkElement&gt;.","pos":[867,1165],"source":" For example, the apparent \"default\" of VerticalAlignment for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits VerticalAlignment direct from <xref:System.Windows.FrameworkElement>."},{"content":"This is because that value was reset within the default style of &lt;xref:System.Windows.Controls.ComboBoxItem&gt;, within the style's control template.","pos":[1166,1312],"source":" This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template."},{"content":"&lt;xref:System.Windows.Controls.Canvas&gt; does not use VerticalAlignment when composing layout, because &lt;xref:System.Windows.Controls.Canvas&gt; is based on absolute positioning.","pos":[1319,1490],"source":"       <xref:System.Windows.Controls.Canvas> does not use VerticalAlignment when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning."},{"content":"When inherited by &lt;xref:System.Windows.Controls.ComboBoxItem&gt; or any derived classes, &lt;xref:System.Windows.Controls.ComboBoxItem&gt; redefines the default value of this property to be &lt;xref:System.Windows.VerticalAlignment&gt;.","pos":[1497,1718],"source":"       When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment>."},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_VerticalAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|","pos":[1724,2024],"source":"<a name=\"dependencyPropertyInfo_VerticalAlignment\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|"}]},{"pos":[305496,305595],"content":"A vertical alignment setting. The default is <xref href=\"System.Windows.VerticalAlignment\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vertical alignment setting.","pos":[0,29]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Windows.VerticalAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[30,99],"source":" The default is <xref href=\"System.Windows.VerticalAlignment\"></xref>."}]},{"pos":[306114,306207],"content":"Identifies the <xref:System.Windows.FrameworkElement.VerticalAlignment*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.VerticalAlignment*&gt; dependency property.","pos":[0,93],"source":"Identifies the <xref:System.Windows.FrameworkElement.VerticalAlignment*> dependency property."}]},{"pos":[306392,306404],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[306833,306894],"content":"Gets the number of visual child elements within this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of visual child elements within this element.","pos":[0,61]}]},{"pos":[306907,307459],"content":"The <xref:System.Windows.FrameworkElement> implementation of VisualChildrenCount always returns either zero or one. Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.       This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.FrameworkElement> implementation of VisualChildrenCount always returns either zero or one. Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.       This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).","pos":[0,550],"nodes":[{"content":"The &lt;xref:System.Windows.FrameworkElement&gt; implementation of VisualChildrenCount always returns either zero or one.","pos":[0,115],"source":"The <xref:System.Windows.FrameworkElement> implementation of VisualChildrenCount always returns either zero or one."},{"content":"Classes that maintain a visual child collection that might exceed one must override both this property and &lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;.","pos":[116,280],"source":" Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>."},{"content":"This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;, &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;).","pos":[287,550],"source":"       This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>)."}]}]},{"pos":[308484,308537],"content":"The number of visual child elements for this element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of visual child elements for this element.","pos":[0,53]}]},{"pos":[308961,308999],"content":"Gets or sets the width of the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width of the element.","pos":[0,38]}]},{"pos":[309012,312498],"content":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.  The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, Width.       The return value of this property is always the same as any value that was set to it. In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary. The layout may have rejected the suggested size for some reason. Also, the layout system itself works asynchronously relative to the property system set of Width and may not have processed that particular sizing property change yet.       In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=fullName>. This is how you specify auto sizing behavior. In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] you set the value to the string \"Auto\" (case insensitive) to enable the auto sizing behavior. Auto sizing behavior implies that the element will fill the width available to it. Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.       In addition to the validation check, there is a nondeterministic upper value bound for Width that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=fullName> but smaller than <xref:System.Double.MaxValue?displayProperty=fullName>). If you exceed this bound, the element will not render, and no exception is thrown. Do not set Width to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.      <a name=\"xamlAttributeUsage_Width\"></a>    ## XAML Attribute Usage      ```   <object Width=\"double\"/>   - or –   <object Width =\"qualifiedDouble\"/>   - or -   <object Width =\"Auto\"/>   ```      <a name=\"xamlValues_Width\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0. See Remarks for upper bound information. This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.       *qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.       `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px       `Auto`    Enables autosizing behavior. See Remarks.      <a name=\"dependencyPropertyInfo_Width\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.WidthProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.","pos":[0,105],"source":"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information."},{"content":"The other two are &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.","pos":[107,231],"source":"  The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>."},{"content":"If there is a conflict between these values, the order of application for actual width determination is first &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, and finally if each of these are within bounds, Width.","pos":[233,522],"source":"  If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, Width."},{"content":"The return value of this property is always the same as any value that was set to it.","pos":[529,614]},{"content":"In contrast, the value of the &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; may vary.","pos":[615,708],"source":" In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary."},{"content":"The layout may have rejected the suggested size for some reason.","pos":[709,773]},{"content":"Also, the layout system itself works asynchronously relative to the property system set of Width and may not have processed that particular sizing property change yet.","pos":[774,941]},{"content":"In addition to acceptable &lt;xref:System.Double&gt; values, this property can also be &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.","pos":[948,1079],"source":"       In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=fullName>."},{"content":"This is how you specify auto sizing behavior.","pos":[1080,1125]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string \"Auto\" (case insensitive) to enable the auto sizing behavior.","pos":[1126,1288],"source":" In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] you set the value to the string \"Auto\" (case insensitive) to enable the auto sizing behavior."},{"content":"Auto sizing behavior implies that the element will fill the width available to it.","pos":[1289,1371]},{"content":"Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.","pos":[1372,1545]},{"content":"In addition to the validation check, there is a nondeterministic upper value bound for Width that is enforced by the layout system (this is a very large number, larger than &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt; but smaller than &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).","pos":[1552,1853],"source":"       In addition to the validation check, there is a nondeterministic upper value bound for Width that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=fullName> but smaller than <xref:System.Double.MaxValue?displayProperty=fullName>)."},{"content":"If you exceed this bound, the element will not render, and no exception is thrown.","pos":[1854,1936]},{"content":"Do not set Width to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.","pos":[1937,2100]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Width\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object Width=\"double\"/&gt;   - or –   &lt;object Width =\"qualifiedDouble\"/&gt;   - or -   &lt;object Width =\"Auto\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Width\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>double<ept id=\"p3\">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.","pos":[2106,2476],"source":"<a name=\"xamlAttributeUsage_Width\"></a>    ## XAML Attribute Usage      ```   <object Width=\"double\"/>   - or –   <object Width =\"qualifiedDouble\"/>   - or -   <object Width =\"Auto\"/>   ```      <a name=\"xamlValues_Width\"></a>    ## XAML Values    *double*    <xref:System.Double>       String representation of a <xref:System.Double> value equal to or greater than 0.0."},{"content":"See Remarks for upper bound information.","pos":[2477,2517]},{"content":"This value is interpreted as a <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.","pos":[2518,2631],"source":" This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement."},{"content":"Strings need not explicitly include decimal points.","pos":[2632,2683]},{"content":"For instance a value of <ph id=\"ph1\">`1`</ph> is acceptable.","pos":[2684,2726],"source":" For instance a value of `1` is acceptable."},{"content":"<bpt id=\"p1\">*</bpt>qualifiedDouble<ept id=\"p1\">*</ept>    A <bpt id=\"p2\">*</bpt>double<ept id=\"p2\">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id=\"ph1\">`px`</ph>, <ph id=\"ph2\">`in`</ph>, <ph id=\"ph3\">`cm`</ph>, <ph id=\"ph4\">`pt`</ph>.","pos":[2733,2873],"source":"*qualifiedDouble*    A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`."},{"content":"<ph id=\"ph1\">`px`</ph> (default) is <ph id=\"ph2\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id=\"ph3\">`in`</ph> is inches; 1in==96px       <ph id=\"ph4\">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id=\"ph5\">`pt`</ph> is points; 1pt==(96/72) px       <ph id=\"ph6\">`Auto`</ph>    Enables autosizing behavior.","pos":[2880,3131],"source":"`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]       `in` is inches; 1in==96px       `cm` is centimeters; 1cm==(96/2.54) px       `pt` is points; 1pt==(96/72) px       `Auto`    Enables autosizing behavior."},{"content":"See Remarks.","pos":[3132,3144]},{"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_Width\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.WidthProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|","pos":[3150,3426],"source":"<a name=\"dependencyPropertyInfo_Width\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.FrameworkElement.WidthProperty>|   |Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|"}]},{"pos":[312614,312881],"content":"The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is &lt;xref:System.Double?displayProperty=fullName&gt;. This value must be equal to or greater than 0.0. See Remarks for upper bound information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the element, in <ph id=\"ph1\">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[0,103],"source":"The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]."},{"content":"The default value is <ph id=\"ph1\">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[104,177],"source":" The default value is &lt;xref:System.Double?displayProperty=fullName&gt;."},{"content":"This value must be equal to or greater than 0.0.","pos":[178,226]},{"content":"See Remarks for upper bound information.","pos":[227,267]}]},{"pos":[313328,313409],"content":"Identifies the <xref:System.Windows.FrameworkElement.Width*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.FrameworkElement.Width*&gt; dependency property.","pos":[0,81],"source":"Identifies the <xref:System.Windows.FrameworkElement.Width*> dependency property."}]},{"pos":[313582,313594],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.FrameworkElement\n  id: FrameworkElement\n  children:\n  - System.Windows.FrameworkElement.#ctor\n  - System.Windows.FrameworkElement.ActualHeight\n  - System.Windows.FrameworkElement.ActualHeightProperty\n  - System.Windows.FrameworkElement.ActualWidth\n  - System.Windows.FrameworkElement.ActualWidthProperty\n  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)\n  - System.Windows.FrameworkElement.ApplyTemplate\n  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)\n  - System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)\n  - System.Windows.FrameworkElement.BeginInit\n  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)\n  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)\n  - System.Windows.FrameworkElement.BindingGroup\n  - System.Windows.FrameworkElement.BindingGroupProperty\n  - System.Windows.FrameworkElement.BringIntoView\n  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)\n  - System.Windows.FrameworkElement.ContextMenu\n  - System.Windows.FrameworkElement.ContextMenuClosing\n  - System.Windows.FrameworkElement.ContextMenuClosingEvent\n  - System.Windows.FrameworkElement.ContextMenuOpening\n  - System.Windows.FrameworkElement.ContextMenuOpeningEvent\n  - System.Windows.FrameworkElement.ContextMenuProperty\n  - System.Windows.FrameworkElement.Cursor\n  - System.Windows.FrameworkElement.CursorProperty\n  - System.Windows.FrameworkElement.DataContext\n  - System.Windows.FrameworkElement.DataContextChanged\n  - System.Windows.FrameworkElement.DataContextProperty\n  - System.Windows.FrameworkElement.DefaultStyleKey\n  - System.Windows.FrameworkElement.DefaultStyleKeyProperty\n  - System.Windows.FrameworkElement.EndInit\n  - System.Windows.FrameworkElement.FindName(System.String)\n  - System.Windows.FrameworkElement.FindResource(System.Object)\n  - System.Windows.FrameworkElement.FlowDirection\n  - System.Windows.FrameworkElement.FlowDirectionProperty\n  - System.Windows.FrameworkElement.FocusVisualStyle\n  - System.Windows.FrameworkElement.FocusVisualStyleProperty\n  - System.Windows.FrameworkElement.ForceCursor\n  - System.Windows.FrameworkElement.ForceCursorProperty\n  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)\n  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)\n  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)\n  - System.Windows.FrameworkElement.GetTemplateChild(System.String)\n  - System.Windows.FrameworkElement.GetUIParentCore\n  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)\n  - System.Windows.FrameworkElement.Height\n  - System.Windows.FrameworkElement.HeightProperty\n  - System.Windows.FrameworkElement.HorizontalAlignment\n  - System.Windows.FrameworkElement.HorizontalAlignmentProperty\n  - System.Windows.FrameworkElement.InheritanceBehavior\n  - System.Windows.FrameworkElement.Initialized\n  - System.Windows.FrameworkElement.InputScope\n  - System.Windows.FrameworkElement.InputScopeProperty\n  - System.Windows.FrameworkElement.IsInitialized\n  - System.Windows.FrameworkElement.IsLoaded\n  - System.Windows.FrameworkElement.Language\n  - System.Windows.FrameworkElement.LanguageProperty\n  - System.Windows.FrameworkElement.LayoutTransform\n  - System.Windows.FrameworkElement.LayoutTransformProperty\n  - System.Windows.FrameworkElement.Loaded\n  - System.Windows.FrameworkElement.LoadedEvent\n  - System.Windows.FrameworkElement.LogicalChildren\n  - System.Windows.FrameworkElement.Margin\n  - System.Windows.FrameworkElement.MarginProperty\n  - System.Windows.FrameworkElement.MaxHeight\n  - System.Windows.FrameworkElement.MaxHeightProperty\n  - System.Windows.FrameworkElement.MaxWidth\n  - System.Windows.FrameworkElement.MaxWidthProperty\n  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)\n  - System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)\n  - System.Windows.FrameworkElement.MinHeight\n  - System.Windows.FrameworkElement.MinHeightProperty\n  - System.Windows.FrameworkElement.MinWidth\n  - System.Windows.FrameworkElement.MinWidthProperty\n  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  - System.Windows.FrameworkElement.Name\n  - System.Windows.FrameworkElement.NameProperty\n  - System.Windows.FrameworkElement.OnApplyTemplate\n  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)\n  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)\n  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)\n  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)\n  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)\n  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)\n  - System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  - System.Windows.FrameworkElement.OverridesDefaultStyle\n  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n  - System.Windows.FrameworkElement.Parent\n  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)\n  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)\n  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)\n  - System.Windows.FrameworkElement.RequestBringIntoView\n  - System.Windows.FrameworkElement.RequestBringIntoViewEvent\n  - System.Windows.FrameworkElement.Resources\n  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)\n  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)\n  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)\n  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.FrameworkElement.ShouldSerializeResources\n  - System.Windows.FrameworkElement.ShouldSerializeStyle\n  - System.Windows.FrameworkElement.ShouldSerializeTriggers\n  - System.Windows.FrameworkElement.SizeChanged\n  - System.Windows.FrameworkElement.SizeChangedEvent\n  - System.Windows.FrameworkElement.SourceUpdated\n  - System.Windows.FrameworkElement.Style\n  - System.Windows.FrameworkElement.StyleProperty\n  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)\n  - System.Windows.FrameworkElement.Tag\n  - System.Windows.FrameworkElement.TagProperty\n  - System.Windows.FrameworkElement.TargetUpdated\n  - System.Windows.FrameworkElement.TemplatedParent\n  - System.Windows.FrameworkElement.ToolTip\n  - System.Windows.FrameworkElement.ToolTipClosing\n  - System.Windows.FrameworkElement.ToolTipClosingEvent\n  - System.Windows.FrameworkElement.ToolTipOpening\n  - System.Windows.FrameworkElement.ToolTipOpeningEvent\n  - System.Windows.FrameworkElement.ToolTipProperty\n  - System.Windows.FrameworkElement.Triggers\n  - System.Windows.FrameworkElement.TryFindResource(System.Object)\n  - System.Windows.FrameworkElement.Unloaded\n  - System.Windows.FrameworkElement.UnloadedEvent\n  - System.Windows.FrameworkElement.UnregisterName(System.String)\n  - System.Windows.FrameworkElement.UpdateDefaultStyle\n  - System.Windows.FrameworkElement.UseLayoutRounding\n  - System.Windows.FrameworkElement.UseLayoutRoundingProperty\n  - System.Windows.FrameworkElement.VerticalAlignment\n  - System.Windows.FrameworkElement.VerticalAlignmentProperty\n  - System.Windows.FrameworkElement.VisualChildrenCount\n  - System.Windows.FrameworkElement.Width\n  - System.Windows.FrameworkElement.WidthProperty\n  langs:\n  - csharp\n  name: FrameworkElement\n  nameWithType: FrameworkElement\n  fullName: System.Windows.FrameworkElement\n  type: Class\n  summary: Provides a WPF framework-level set of properties, events, and methods for [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elements. This class represents the provided WPF framework-level implementation that is built on the WPF core-level [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] that are defined by <xref href=\"System.Windows.UIElement\"></xref>.\n  remarks: \"FrameworkElement is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services. For more information about these concepts, see [WPF Architecture](~/add/includes/ajax-current-ext-md.md).  \\n  \\n FrameworkElement extends <xref:System.Windows.UIElement> and adds the following capabilities:  \\n  \\n-   **Layout system definition**: FrameworkElement provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>. Most notably, FrameworkElement seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead. For example, FrameworkElement seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any FrameworkElement derived class. At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined. For more information, see [Layout](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   **The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements. Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the FrameworkElement level. Note however that FrameworkElement deliberately does not define a content model, and leaves that responsibility to derived classes. For more information, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   **Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree. FrameworkElement defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements. For more information, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   **Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by FrameworkElement. For more information, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md) and [XAML Resources](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   **Styles:** FrameworkElement defines the <xref:System.Windows.FrameworkElement.Style%2A> property. However, FrameworkElement does not yet define support for templates, or support decorators. These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.  \\n  \\n-   **More animation support:** Some animation support was already defined at the WPF core level, but FrameworkElement extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.  \\n  \\n As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] classes derive from FrameworkElement, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.  \\n  \\n If you intend to use FrameworkElement as a base class, you might want to first examine the existing derived classes. FrameworkElement provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an \\\"element\\\" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. For instance, a FrameworkElement does not define any true content model; FrameworkElement as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] child elements. In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.\"\n  syntax:\n    content: >-\n      [System.Windows.Markup.RuntimeNameProperty(\"Name\")]\n\n      [System.Windows.Markup.UsableDuringInitialization(true)]\n\n      [System.Windows.Markup.XmlLangProperty(\"Language\")]\n\n      [System.Windows.StyleTypedProperty(Property=\"FocusVisualStyle\", StyleTargetType=typeof(System.Windows.Controls.Control))]\n\n      public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Media.Visual\n  - System.Windows.UIElement\n  implements:\n  - System.ComponentModel.ISupportInitialize\n  - System.Windows.IFrameworkInputElement\n  - System.Windows.Markup.IQueryAmbient\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)\n  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)\n  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)\n  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.VisualBitmapEffect\n  - System.Windows.Media.Visual.VisualBitmapEffectInput\n  - System.Windows.Media.Visual.VisualBitmapScalingMode\n  - System.Windows.Media.Visual.VisualCacheMode\n  - System.Windows.Media.Visual.VisualClearTypeHint\n  - System.Windows.Media.Visual.VisualClip\n  - System.Windows.Media.Visual.VisualEdgeMode\n  - System.Windows.Media.Visual.VisualEffect\n  - System.Windows.Media.Visual.VisualOffset\n  - System.Windows.Media.Visual.VisualOpacity\n  - System.Windows.Media.Visual.VisualOpacityMask\n  - System.Windows.Media.Visual.VisualParent\n  - System.Windows.Media.Visual.VisualScrollableAreaClip\n  - System.Windows.Media.Visual.VisualTextHintingMode\n  - System.Windows.Media.Visual.VisualTextRenderingMode\n  - System.Windows.Media.Visual.VisualTransform\n  - System.Windows.Media.Visual.VisualXSnappingGuidelines\n  - System.Windows.Media.Visual.VisualYSnappingGuidelines\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.AllowDrop\n  - System.Windows.UIElement.AllowDropProperty\n  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.UIElement.AreAnyTouchesCaptured\n  - System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  - System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  - System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  - System.Windows.UIElement.AreAnyTouchesOver\n  - System.Windows.UIElement.AreAnyTouchesOverProperty\n  - System.Windows.UIElement.Arrange(System.Windows.Rect)\n  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.UIElement.BitmapEffect\n  - System.Windows.UIElement.BitmapEffectInput\n  - System.Windows.UIElement.BitmapEffectInputProperty\n  - System.Windows.UIElement.BitmapEffectProperty\n  - System.Windows.UIElement.CacheMode\n  - System.Windows.UIElement.CacheModeProperty\n  - System.Windows.UIElement.CaptureMouse\n  - System.Windows.UIElement.CaptureStylus\n  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  - System.Windows.UIElement.Clip\n  - System.Windows.UIElement.ClipProperty\n  - System.Windows.UIElement.ClipToBounds\n  - System.Windows.UIElement.ClipToBoundsProperty\n  - System.Windows.UIElement.CommandBindings\n  - System.Windows.UIElement.DesiredSize\n  - System.Windows.UIElement.DragEnter\n  - System.Windows.UIElement.DragEnterEvent\n  - System.Windows.UIElement.DragLeave\n  - System.Windows.UIElement.DragLeaveEvent\n  - System.Windows.UIElement.DragOver\n  - System.Windows.UIElement.DragOverEvent\n  - System.Windows.UIElement.Drop\n  - System.Windows.UIElement.DropEvent\n  - System.Windows.UIElement.Effect\n  - System.Windows.UIElement.EffectProperty\n  - System.Windows.UIElement.Focus\n  - System.Windows.UIElement.Focusable\n  - System.Windows.UIElement.FocusableChanged\n  - System.Windows.UIElement.FocusableProperty\n  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.UIElement.GiveFeedback\n  - System.Windows.UIElement.GiveFeedbackEvent\n  - System.Windows.UIElement.GotFocus\n  - System.Windows.UIElement.GotFocusEvent\n  - System.Windows.UIElement.GotKeyboardFocus\n  - System.Windows.UIElement.GotKeyboardFocusEvent\n  - System.Windows.UIElement.GotMouseCapture\n  - System.Windows.UIElement.GotMouseCaptureEvent\n  - System.Windows.UIElement.GotStylusCapture\n  - System.Windows.UIElement.GotStylusCaptureEvent\n  - System.Windows.UIElement.GotTouchCapture\n  - System.Windows.UIElement.GotTouchCaptureEvent\n  - System.Windows.UIElement.HasAnimatedProperties\n  - System.Windows.UIElement.HasEffectiveKeyboardFocus\n  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  - System.Windows.UIElement.InputBindings\n  - System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  - System.Windows.UIElement.InvalidateArrange\n  - System.Windows.UIElement.InvalidateMeasure\n  - System.Windows.UIElement.InvalidateVisual\n  - System.Windows.UIElement.IsArrangeValid\n  - System.Windows.UIElement.IsEnabled\n  - System.Windows.UIElement.IsEnabledChanged\n  - System.Windows.UIElement.IsEnabledCore\n  - System.Windows.UIElement.IsEnabledProperty\n  - System.Windows.UIElement.IsFocused\n  - System.Windows.UIElement.IsFocusedProperty\n  - System.Windows.UIElement.IsHitTestVisible\n  - System.Windows.UIElement.IsHitTestVisibleChanged\n  - System.Windows.UIElement.IsHitTestVisibleProperty\n  - System.Windows.UIElement.IsInputMethodEnabled\n  - System.Windows.UIElement.IsKeyboardFocused\n  - System.Windows.UIElement.IsKeyboardFocusedChanged\n  - System.Windows.UIElement.IsKeyboardFocusedProperty\n  - System.Windows.UIElement.IsKeyboardFocusWithin\n  - System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  - System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  - System.Windows.UIElement.IsManipulationEnabled\n  - System.Windows.UIElement.IsManipulationEnabledProperty\n  - System.Windows.UIElement.IsMeasureValid\n  - System.Windows.UIElement.IsMouseCaptured\n  - System.Windows.UIElement.IsMouseCapturedChanged\n  - System.Windows.UIElement.IsMouseCapturedProperty\n  - System.Windows.UIElement.IsMouseCaptureWithin\n  - System.Windows.UIElement.IsMouseCaptureWithinChanged\n  - System.Windows.UIElement.IsMouseCaptureWithinProperty\n  - System.Windows.UIElement.IsMouseDirectlyOver\n  - System.Windows.UIElement.IsMouseDirectlyOverChanged\n  - System.Windows.UIElement.IsMouseDirectlyOverProperty\n  - System.Windows.UIElement.IsMouseOver\n  - System.Windows.UIElement.IsMouseOverProperty\n  - System.Windows.UIElement.IsStylusCaptured\n  - System.Windows.UIElement.IsStylusCapturedChanged\n  - System.Windows.UIElement.IsStylusCapturedProperty\n  - System.Windows.UIElement.IsStylusCaptureWithin\n  - System.Windows.UIElement.IsStylusCaptureWithinChanged\n  - System.Windows.UIElement.IsStylusCaptureWithinProperty\n  - System.Windows.UIElement.IsStylusDirectlyOver\n  - System.Windows.UIElement.IsStylusDirectlyOverChanged\n  - System.Windows.UIElement.IsStylusDirectlyOverProperty\n  - System.Windows.UIElement.IsStylusOver\n  - System.Windows.UIElement.IsStylusOverProperty\n  - System.Windows.UIElement.IsVisible\n  - System.Windows.UIElement.IsVisibleChanged\n  - System.Windows.UIElement.IsVisibleProperty\n  - System.Windows.UIElement.KeyDown\n  - System.Windows.UIElement.KeyDownEvent\n  - System.Windows.UIElement.KeyUp\n  - System.Windows.UIElement.KeyUpEvent\n  - System.Windows.UIElement.LayoutUpdated\n  - System.Windows.UIElement.LostFocus\n  - System.Windows.UIElement.LostFocusEvent\n  - System.Windows.UIElement.LostKeyboardFocus\n  - System.Windows.UIElement.LostKeyboardFocusEvent\n  - System.Windows.UIElement.LostMouseCapture\n  - System.Windows.UIElement.LostMouseCaptureEvent\n  - System.Windows.UIElement.LostStylusCapture\n  - System.Windows.UIElement.LostStylusCaptureEvent\n  - System.Windows.UIElement.LostTouchCapture\n  - System.Windows.UIElement.LostTouchCaptureEvent\n  - System.Windows.UIElement.ManipulationBoundaryFeedback\n  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  - System.Windows.UIElement.ManipulationCompleted\n  - System.Windows.UIElement.ManipulationCompletedEvent\n  - System.Windows.UIElement.ManipulationDelta\n  - System.Windows.UIElement.ManipulationDeltaEvent\n  - System.Windows.UIElement.ManipulationInertiaStarting\n  - System.Windows.UIElement.ManipulationInertiaStartingEvent\n  - System.Windows.UIElement.ManipulationStarted\n  - System.Windows.UIElement.ManipulationStartedEvent\n  - System.Windows.UIElement.ManipulationStarting\n  - System.Windows.UIElement.ManipulationStartingEvent\n  - System.Windows.UIElement.Measure(System.Windows.Size)\n  - System.Windows.UIElement.MouseDown\n  - System.Windows.UIElement.MouseDownEvent\n  - System.Windows.UIElement.MouseEnter\n  - System.Windows.UIElement.MouseEnterEvent\n  - System.Windows.UIElement.MouseLeave\n  - System.Windows.UIElement.MouseLeaveEvent\n  - System.Windows.UIElement.MouseLeftButtonDown\n  - System.Windows.UIElement.MouseLeftButtonDownEvent\n  - System.Windows.UIElement.MouseLeftButtonUp\n  - System.Windows.UIElement.MouseLeftButtonUpEvent\n  - System.Windows.UIElement.MouseMove\n  - System.Windows.UIElement.MouseMoveEvent\n  - System.Windows.UIElement.MouseRightButtonDown\n  - System.Windows.UIElement.MouseRightButtonDownEvent\n  - System.Windows.UIElement.MouseRightButtonUp\n  - System.Windows.UIElement.MouseRightButtonUpEvent\n  - System.Windows.UIElement.MouseUp\n  - System.Windows.UIElement.MouseUpEvent\n  - System.Windows.UIElement.MouseWheel\n  - System.Windows.UIElement.MouseWheelEvent\n  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  - System.Windows.UIElement.OnCreateAutomationPeer\n  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.Opacity\n  - System.Windows.UIElement.OpacityMask\n  - System.Windows.UIElement.OpacityMaskProperty\n  - System.Windows.UIElement.OpacityProperty\n  - System.Windows.UIElement.PersistId\n  - System.Windows.UIElement.PreviewDragEnter\n  - System.Windows.UIElement.PreviewDragEnterEvent\n  - System.Windows.UIElement.PreviewDragLeave\n  - System.Windows.UIElement.PreviewDragLeaveEvent\n  - System.Windows.UIElement.PreviewDragOver\n  - System.Windows.UIElement.PreviewDragOverEvent\n  - System.Windows.UIElement.PreviewDrop\n  - System.Windows.UIElement.PreviewDropEvent\n  - System.Windows.UIElement.PreviewGiveFeedback\n  - System.Windows.UIElement.PreviewGiveFeedbackEvent\n  - System.Windows.UIElement.PreviewGotKeyboardFocus\n  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  - System.Windows.UIElement.PreviewKeyDown\n  - System.Windows.UIElement.PreviewKeyDownEvent\n  - System.Windows.UIElement.PreviewKeyUp\n  - System.Windows.UIElement.PreviewKeyUpEvent\n  - System.Windows.UIElement.PreviewLostKeyboardFocus\n  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  - System.Windows.UIElement.PreviewMouseDown\n  - System.Windows.UIElement.PreviewMouseDownEvent\n  - System.Windows.UIElement.PreviewMouseLeftButtonDown\n  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  - System.Windows.UIElement.PreviewMouseLeftButtonUp\n  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  - System.Windows.UIElement.PreviewMouseMove\n  - System.Windows.UIElement.PreviewMouseMoveEvent\n  - System.Windows.UIElement.PreviewMouseRightButtonDown\n  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  - System.Windows.UIElement.PreviewMouseRightButtonUp\n  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  - System.Windows.UIElement.PreviewMouseUp\n  - System.Windows.UIElement.PreviewMouseUpEvent\n  - System.Windows.UIElement.PreviewMouseWheel\n  - System.Windows.UIElement.PreviewMouseWheelEvent\n  - System.Windows.UIElement.PreviewQueryContinueDrag\n  - System.Windows.UIElement.PreviewQueryContinueDragEvent\n  - System.Windows.UIElement.PreviewStylusButtonDown\n  - System.Windows.UIElement.PreviewStylusButtonDownEvent\n  - System.Windows.UIElement.PreviewStylusButtonUp\n  - System.Windows.UIElement.PreviewStylusButtonUpEvent\n  - System.Windows.UIElement.PreviewStylusDown\n  - System.Windows.UIElement.PreviewStylusDownEvent\n  - System.Windows.UIElement.PreviewStylusInAirMove\n  - System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  - System.Windows.UIElement.PreviewStylusInRange\n  - System.Windows.UIElement.PreviewStylusInRangeEvent\n  - System.Windows.UIElement.PreviewStylusMove\n  - System.Windows.UIElement.PreviewStylusMoveEvent\n  - System.Windows.UIElement.PreviewStylusOutOfRange\n  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  - System.Windows.UIElement.PreviewStylusSystemGesture\n  - System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  - System.Windows.UIElement.PreviewStylusUp\n  - System.Windows.UIElement.PreviewStylusUpEvent\n  - System.Windows.UIElement.PreviewTextInput\n  - System.Windows.UIElement.PreviewTextInputEvent\n  - System.Windows.UIElement.PreviewTouchDown\n  - System.Windows.UIElement.PreviewTouchDownEvent\n  - System.Windows.UIElement.PreviewTouchMove\n  - System.Windows.UIElement.PreviewTouchMoveEvent\n  - System.Windows.UIElement.PreviewTouchUp\n  - System.Windows.UIElement.PreviewTouchUpEvent\n  - System.Windows.UIElement.QueryContinueDrag\n  - System.Windows.UIElement.QueryContinueDragEvent\n  - System.Windows.UIElement.QueryCursor\n  - System.Windows.UIElement.QueryCursorEvent\n  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.ReleaseAllTouchCaptures\n  - System.Windows.UIElement.ReleaseMouseCapture\n  - System.Windows.UIElement.ReleaseStylusCapture\n  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.UIElement.RenderSize\n  - System.Windows.UIElement.RenderTransform\n  - System.Windows.UIElement.RenderTransformOrigin\n  - System.Windows.UIElement.RenderTransformOriginProperty\n  - System.Windows.UIElement.RenderTransformProperty\n  - System.Windows.UIElement.ShouldSerializeCommandBindings\n  - System.Windows.UIElement.ShouldSerializeInputBindings\n  - System.Windows.UIElement.SnapsToDevicePixels\n  - System.Windows.UIElement.SnapsToDevicePixelsProperty\n  - System.Windows.UIElement.StylusButtonDown\n  - System.Windows.UIElement.StylusButtonDownEvent\n  - System.Windows.UIElement.StylusButtonUp\n  - System.Windows.UIElement.StylusButtonUpEvent\n  - System.Windows.UIElement.StylusDown\n  - System.Windows.UIElement.StylusDownEvent\n  - System.Windows.UIElement.StylusEnter\n  - System.Windows.UIElement.StylusEnterEvent\n  - System.Windows.UIElement.StylusInAirMove\n  - System.Windows.UIElement.StylusInAirMoveEvent\n  - System.Windows.UIElement.StylusInRange\n  - System.Windows.UIElement.StylusInRangeEvent\n  - System.Windows.UIElement.StylusLeave\n  - System.Windows.UIElement.StylusLeaveEvent\n  - System.Windows.UIElement.StylusMove\n  - System.Windows.UIElement.StylusMoveEvent\n  - System.Windows.UIElement.StylusOutOfRange\n  - System.Windows.UIElement.StylusOutOfRangeEvent\n  - System.Windows.UIElement.StylusPlugIns\n  - System.Windows.UIElement.StylusSystemGesture\n  - System.Windows.UIElement.StylusSystemGestureEvent\n  - System.Windows.UIElement.StylusUp\n  - System.Windows.UIElement.StylusUpEvent\n  - System.Windows.UIElement.TextInput\n  - System.Windows.UIElement.TextInputEvent\n  - System.Windows.UIElement.TouchDown\n  - System.Windows.UIElement.TouchDownEvent\n  - System.Windows.UIElement.TouchEnter\n  - System.Windows.UIElement.TouchEnterEvent\n  - System.Windows.UIElement.TouchesCaptured\n  - System.Windows.UIElement.TouchesCapturedWithin\n  - System.Windows.UIElement.TouchesDirectlyOver\n  - System.Windows.UIElement.TouchesOver\n  - System.Windows.UIElement.TouchLeave\n  - System.Windows.UIElement.TouchLeaveEvent\n  - System.Windows.UIElement.TouchMove\n  - System.Windows.UIElement.TouchMoveEvent\n  - System.Windows.UIElement.TouchUp\n  - System.Windows.UIElement.TouchUpEvent\n  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  - System.Windows.UIElement.Uid\n  - System.Windows.UIElement.UidProperty\n  - System.Windows.UIElement.UpdateLayout\n  - System.Windows.UIElement.Visibility\n  - System.Windows.UIElement.VisibilityProperty\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.#ctor\n  id: '#ctor'\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FrameworkElement()\n  nameWithType: FrameworkElement.FrameworkElement()\n  fullName: System.Windows.FrameworkElement.FrameworkElement()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkElement\"></xref> class.\n  syntax:\n    content: public FrameworkElement ();\n    parameters: []\n  overload: System.Windows.FrameworkElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ActualHeight\n  id: ActualHeight\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ActualHeight\n  nameWithType: FrameworkElement.ActualHeight\n  fullName: System.Windows.FrameworkElement.ActualHeight\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the rendered height of this element.\n  remarks: \"This property is a calculated value based on other height inputs, and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.  \\n  \\n Because ActualHeight is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system. The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.  \\n  \\n Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.  \\n  \\n<a name=\\\"dependencyPropertyInfo_ActualHeight\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example displays various height properties.  \\n  \\n [!code-cs[HeightMinHeightMaxHeight#3](~/add/codesnippet/csharp/Height_MinHeight_MaxHeight_CSharp/Window1.xaml.cs#3)]\\n [!code-vb[HeightMinHeightMaxHeight#3](~/add/codesnippet/visualbasic/Height_MinHeight_MaxHeight/Window1.xaml.vb#3)]\"\n  syntax:\n    content: public double ActualHeight { get; }\n    return:\n      type: System.Double\n      description: The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0 (zero).\n  overload: System.Windows.FrameworkElement.ActualHeight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ActualHeightProperty\n  id: ActualHeightProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ActualHeightProperty\n  nameWithType: FrameworkElement.ActualHeightProperty\n  fullName: System.Windows.FrameworkElement.ActualHeightProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.ActualHeight*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ActualHeightProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ActualWidth\n  id: ActualWidth\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ActualWidth\n  nameWithType: FrameworkElement.ActualWidth\n  fullName: System.Windows.FrameworkElement.ActualWidth\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the rendered width of this element.\n  remarks: \"This property is a calculated value based on other width inputs, and the layout system. The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.  \\n  \\n Because ActualWidth is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system. The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.  \\n  \\n Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.  \\n  \\n<a name=\\\"dependencyPropertyInfo_ActualWidth\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example displays various width properties.  \\n  \\n [!code-vb[WidthMinWidthMaxWidth#3](~/add/codesnippet/visualbasic/Width_MinWidth_MaxWidth/Window1.xaml.vb#3)]\\n [!code-cs[WidthMinWidthMaxWidth#3](~/add/codesnippet/csharp/Width_MinWidth_MaxWidth_CSharp/Window1.xaml.cs#3)]\"\n  syntax:\n    content: public double ActualWidth { get; }\n    return:\n      type: System.Double\n      description: The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0 (zero).\n  overload: System.Windows.FrameworkElement.ActualWidth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ActualWidthProperty\n  id: ActualWidthProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ActualWidthProperty\n  nameWithType: FrameworkElement.ActualWidthProperty\n  fullName: System.Windows.FrameworkElement.ActualWidthProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.ActualWidth*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ActualWidthProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.AddLogicalChild(System.Object)\n  id: AddLogicalChild(System.Object)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: AddLogicalChild(Object)\n  nameWithType: FrameworkElement.AddLogicalChild(Object)\n  fullName: System.Windows.FrameworkElement.AddLogicalChild(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Adds the provided object to the logical tree of this element.\n  remarks: \"Use this method for the implementation of collections on objects that represent logical child elements of an element. Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.  \\n  \\n For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario. Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>. These classes provide a content model with particular enforcement of logical tree child elements through dedicated [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control such as styling through templates. For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and AddLogicalChild, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).  \\n  \\n AddLogicalChild may throw an exception if called at a time when the logical tree is being iterated by another process.\"\n  example:\n  - \"The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation. The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection. The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.  \\n  \\n [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/visualbasic/compositiontargetrenderinganimations/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]\\n [!code-cs[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/csharp/CompositionTargetRenderingAnimations/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]\"\n  syntax:\n    content: protected void AddLogicalChild (object child);\n    parameters:\n    - id: child\n      type: System.Object\n      description: Child element to be added.\n  overload: System.Windows.FrameworkElement.AddLogicalChild*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ApplyTemplate\n  id: ApplyTemplate\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ApplyTemplate()\n  nameWithType: FrameworkElement.ApplyTemplate()\n  fullName: System.Windows.FrameworkElement.ApplyTemplate()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.\n  remarks: \"Applications can call this method to guarantee that the visual tree of an element is complete. This guarantee step might be necessary if code will be checking the child elements in the tree. For typical element logic within applications, calling ApplyTemplate is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.  \\n  \\n ApplyTemplate is called on every Measure pass by the WPF framework-level layout system.  \\n  \\n <xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.\"\n  syntax:\n    content: public bool ApplyTemplate ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if visuals were added to the tree; returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.\n  overload: System.Windows.FrameworkElement.ApplyTemplate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)\n  id: ArrangeCore(System.Windows.Rect)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ArrangeCore(Rect)\n  nameWithType: FrameworkElement.ArrangeCore(Rect)\n  fullName: System.Windows.FrameworkElement.ArrangeCore(Rect)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Implements <xref:System.Windows.UIElement.ArrangeCore*> (defined as virtual in <xref href=\"System.Windows.UIElement\"></xref>) and seals the implementation.\n  remarks: This method is sealed. In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.\n  syntax:\n    content: protected override sealed void ArrangeCore (System.Windows.Rect finalRect);\n    parameters:\n    - id: finalRect\n      type: System.Windows.Rect\n      description: The final area within the parent that this element should use to arrange itself and its children.\n  overload: System.Windows.FrameworkElement.ArrangeCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)\n  id: ArrangeOverride(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ArrangeOverride(Size)\n  nameWithType: FrameworkElement.ArrangeOverride(Size)\n  fullName: System.Windows.FrameworkElement.ArrangeOverride(Size)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: When overridden in a derived class, positions child elements and determines a size for a <xref href=\"System.Windows.FrameworkElement\"></xref> derived class.\n  syntax:\n    content: protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);\n    parameters:\n    - id: finalSize\n      type: System.Windows.Size\n      description: The final area within the parent that this element should use to arrange itself and its children.\n    return:\n      type: System.Windows.Size\n      description: The actual size used.\n  overload: System.Windows.FrameworkElement.ArrangeOverride*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BeginInit\n  id: BeginInit\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BeginInit()\n  nameWithType: FrameworkElement.BeginInit()\n  fullName: System.Windows.FrameworkElement.BeginInit()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Starts the initialization process for this element.\n  remarks: You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree. For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree. Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.\n  syntax:\n    content: public virtual void BeginInit ();\n    parameters: []\n  overload: System.Windows.FrameworkElement.BeginInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)\n  id: BeginStoryboard(System.Windows.Media.Animation.Storyboard)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BeginStoryboard(Storyboard)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard)\n  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Begins the sequence of actions that are contained in the provided storyboard.\n  remarks: \"Most typical animation scenarios do not use this method. Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element. When triggered by the event, the animation then runs. Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.  \\n  \\n For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \\\"Fill\\\" period. Therefore the animation cannot be restarted after running once. Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code.\"\n  example:\n  - \"The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.  \\n  \\n [!code-vb[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/visualbasic/cubeanimation_xbap/page1.xaml.vb#febeginstoryboard)]\\n [!code-cs[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/csharp/CubeAnimation_XBAP/Page1.xaml.cs#febeginstoryboard)]\"\n  syntax:\n    content: public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);\n    parameters:\n    - id: storyboard\n      type: System.Windows.Media.Animation.Storyboard\n      description: The storyboard to begin.\n  overload: System.Windows.FrameworkElement.BeginStoryboard*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)\n  id: BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BeginStoryboard(Storyboard,HandoffBehavior)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)\n  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.\n  remarks: \"Most typical animation scenarios do not use this method. Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element. When triggered by the event, the animation then runs. Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.  \\n  \\n For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \\\"Fill\\\" period. Therefore the animation cannot be restarted after running once. Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code.  \\n  \\n Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.  \\n  \\n## Using the Compose HandoffBehavior  \\n When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.  \\n  \\n To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock:  \\n  \\n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \\n  \\n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \\n  \\n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \\n  \\n For more information about clock objects, see [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.  \\n  \\n [!code-vb[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/visualbasic/cubeanimation_xbap/page1.xaml.vb#febeginstoryboard)]\\n [!code-cs[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/csharp/CubeAnimation_XBAP/Page1.xaml.cs#febeginstoryboard)]\"\n  syntax:\n    content: public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);\n    parameters:\n    - id: storyboard\n      type: System.Windows.Media.Animation.Storyboard\n      description: The storyboard to begin.\n    - id: handoffBehavior\n      type: System.Windows.Media.Animation.HandoffBehavior\n      description: A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.\n  overload: System.Windows.FrameworkElement.BeginStoryboard*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)\n  id: BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BeginStoryboard(Storyboard,HandoffBehavior,Boolean)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)\n  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.\n  remarks: \"Most typical animation scenarios do not use this method. Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element. When triggered by the event, the animation then runs. Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.  \\n  \\n For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the \\\"Fill\\\" period. Therefore the animation cannot be restarted after running once. Controlling an animation also requires that the storyboard have an [x:Name Directive](~/add/includes/ajax-current-ext-md.md) or be accessible by reference in code.  \\n  \\n Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.  \\n  \\n## Using the Compose HandoffBehavior  \\n When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.  \\n  \\n To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock:  \\n  \\n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \\n  \\n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \\n  \\n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \\n  \\n For more information about clock objects, see [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);\n    parameters:\n    - id: storyboard\n      type: System.Windows.Media.Animation.Storyboard\n      description: The storyboard to begin.\n    - id: handoffBehavior\n      type: System.Windows.Media.Animation.HandoffBehavior\n      description: A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.\n    - id: isControllable\n      type: System.Boolean\n      description: Declares whether the animation is controllable (can be paused) after it is started.\n  overload: System.Windows.FrameworkElement.BeginStoryboard*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BindingGroup\n  id: BindingGroup\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BindingGroup\n  nameWithType: FrameworkElement.BindingGroup\n  fullName: System.Windows.FrameworkElement.BindingGroup\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the <xref href=\"System.Windows.Data.BindingGroup\"></xref> that is used for the element.\n  remarks: \"A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object. For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided. The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object’s properties. You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object. For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country of the address.  \\n  \\n Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.  \\n  \\n<a name=\\\"dependencyPropertyInfo_BindingGroup\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  \\n|Metadata properties set to **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|\"\n  example:\n  - \"The following examples are part of an application that checks whether the user has set the properties of two objects to equal values. The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source. The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.  \\n  \\n [!code-xml[BindingGroupSnippets#BindingGroupComplete](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#bindinggroupcomplete)]  \\n  \\n The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.  In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.  \\n  \\n [!code-cs[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#bindinggroupnamevalidationrule)]\\n [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#bindinggroupnamevalidationrule)]  \\n  \\n To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.  The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.  \\n  \\n [!code-cs[BindingGroupSnippets#UpdateSourcesClick](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#updatesourcesclick)]\\n [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#updatesourcesclick)]\"\n  syntax:\n    content: public System.Windows.Data.BindingGroup BindingGroup { get; set; }\n    return:\n      type: System.Windows.Data.BindingGroup\n      description: The <xref href=\"System.Windows.Data.BindingGroup\"></xref> that is used for the element.\n  overload: System.Windows.FrameworkElement.BindingGroup*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BindingGroupProperty\n  id: BindingGroupProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BindingGroupProperty\n  nameWithType: FrameworkElement.BindingGroupProperty\n  fullName: System.Windows.FrameworkElement.BindingGroupProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.BindingGroup*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty BindingGroupProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BringIntoView\n  id: BringIntoView\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BringIntoView()\n  nameWithType: FrameworkElement.BringIntoView()\n  fullName: System.Windows.FrameworkElement.BringIntoView()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attempts to bring this element into view, within any scrollable regions it is contained within.\n  remarks: \"By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element. This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class. The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control. Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the BringIntoView method transmit any information about success or failure, other than that the event is typically marked handled on success. Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility>.  \\n  \\n If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.  \\n  \\n By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element. If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.\"\n  example:\n  - \"The following example implements a handler for an application navigation event that responds whenever the [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)] being navigated to includes a fragment. The fragment is named in the [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame. BringIntoView and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.  \\n  \\n [!code-vb[FragmentNavigationSample#FEBringIntoView](~/add/codesnippet/visualbasic/FragmentNavigationSampleVisualBasic/MainWindow.xaml.vb#febringintoview)]\\n [!code-cs[FragmentNavigationSample#FEBringIntoView](~/add/codesnippet/csharp/FragmentNavigationSample/MainWindow.xaml.cs#febringintoview)]\"\n  syntax:\n    content: public void BringIntoView ();\n    parameters: []\n  overload: System.Windows.FrameworkElement.BringIntoView*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)\n  id: BringIntoView(System.Windows.Rect)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: BringIntoView(Rect)\n  nameWithType: FrameworkElement.BringIntoView(Rect)\n  fullName: System.Windows.FrameworkElement.BringIntoView(Rect)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.\n  remarks: \"By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element. This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class. The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control. Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success. Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility>.  \\n  \\n If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.  \\n  \\n By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element. If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.\"\n  example:\n  - \"The following example has a large graphic in a constrained scrolling region. A button on the page has a handler that scrolls the view to a particular region of the large graphic.  \\n  \\n [!code-xml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/add/codesnippet/xaml/BaseElementsSmorgasbord/Page1.xaml#bringintoviewrectmarkup)]  \\n  \\n [!code-cs[BaseElementsSmorgasbord#BringIntoViewRectCode](~/add/codesnippet/csharp/BaseElementsSmorgasbord/Page1.xaml.cs#bringintoviewrectcode)]\\n [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/add/codesnippet/visualbasic/baseelementssmorgasbord/page1.xaml.vb#bringintoviewrectcode)]\"\n  syntax:\n    content: public void BringIntoView (System.Windows.Rect targetRectangle);\n    parameters:\n    - id: targetRectangle\n      type: System.Windows.Rect\n      description: Specified size of the element that should also be brought into view.\n  overload: System.Windows.FrameworkElement.BringIntoView*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ContextMenu\n  id: ContextMenu\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ContextMenu\n  nameWithType: FrameworkElement.ContextMenu\n  fullName: System.Windows.FrameworkElement.ContextMenu\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] from within this element.\n  remarks: \"<xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a ContextMenu property. However, this creates a confusing context menu experience for the user and this practice is not recommended.  \\n  \\n<a name=\\\"dependencyPropertyInfo_ContextMenu\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public System.Windows.Controls.ContextMenu ContextMenu { get; set; }\n    return:\n      type: System.Windows.Controls.ContextMenu\n      description: The context menu assigned to this element.\n  overload: System.Windows.FrameworkElement.ContextMenu*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ContextMenuClosing\n  id: ContextMenuClosing\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ContextMenuClosing\n  nameWithType: FrameworkElement.ContextMenuClosing\n  fullName: System.Windows.FrameworkElement.ContextMenuClosing\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs just before any context menu on the element is closed.\n  remarks: \"To suppress closing context menus, handlers of the event should mark it as handled.  \\n  \\n To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:  \\n  \\n [!code-xml[CorePseudocode#FEContextMenuClosing](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)]  \\n  \\n (This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the ContextMenuClosing identifier such that you can use it as a trigger).  \\n  \\n <xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the ContextMenuClosing event will not be raised by a context menu directly. Instead, the event is raised from the element that \\\"owns\\\" the context menu as a property and is only raised when a user attempts to close a context menu in the UI. However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu). In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.  \\n  \\n The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.  \\n  \\n<a name=\\\"routedEventInfo_ContextMenuClosing\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|  \\n  \\n-   Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;\n    return:\n      type: System.Windows.Controls.ContextMenuEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ContextMenuClosingEvent\n  id: ContextMenuClosingEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ContextMenuClosingEvent\n  nameWithType: FrameworkElement.ContextMenuClosingEvent\n  fullName: System.Windows.FrameworkElement.ContextMenuClosingEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ContextMenuOpening\n  id: ContextMenuOpening\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ContextMenuOpening\n  nameWithType: FrameworkElement.ContextMenuOpening\n  fullName: System.Windows.FrameworkElement.ContextMenuOpening\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when any context menu on the element is opened.\n  remarks: \"To manually open context menus, handlers of the events should mark the relevant event as handled. Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu. Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>. However, there is a timing issue you should be aware of. In order to completely replace the context menu through a ContextMenuOpening handler, the initial context menu must not be null / empty. Alternatively, you might need to handle the event and then manually open a new context menu. For details, see [How to: Handle the ContextMenuOpening Event](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:  \\n  \\n [!code-xml[CorePseudocode#FEContextMenuOpening](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)]  \\n  \\n (This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the ContextMenuOpening identifier such that you can use it in triggers).  \\n  \\n <xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source. The event is raised from the element that \\\"owns\\\" the context menu as a property and is only raised when a user attempts to open a context menu in the UI. It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName>).  \\n  \\n The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.  \\n  \\n<a name=\\\"routedEventInfo_ContextMenuOpening\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|  \\n  \\n-   Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;\n    return:\n      type: System.Windows.Controls.ContextMenuEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ContextMenuOpeningEvent\n  id: ContextMenuOpeningEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ContextMenuOpeningEvent\n  nameWithType: FrameworkElement.ContextMenuOpeningEvent\n  fullName: System.Windows.FrameworkElement.ContextMenuOpeningEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ContextMenuProperty\n  id: ContextMenuProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ContextMenuProperty\n  nameWithType: FrameworkElement.ContextMenuProperty\n  fullName: System.Windows.FrameworkElement.ContextMenuProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.ContextMenu*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ContextMenuProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Cursor\n  id: Cursor\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Cursor\n  nameWithType: FrameworkElement.Cursor\n  fullName: System.Windows.FrameworkElement.Cursor\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the cursor that displays when the mouse pointer is over this element.\n  remarks: \"When you set this property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string. The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value. See <xref:System.Windows.Input.Cursor> for details.  \\n  \\n Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property. Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.  \\n  \\n To revert the behavior of setting this property to the eventual default, set it to `null` again.  \\n  \\n The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere. If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] application will be an arrow. However, the transient cursor changes are not set to the Cursor values of the elements when they are passed over. The Cursor property will only report non null values in cases where it was actually set, for instance through code or a style. Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event. The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event. This is the mechanism that produces the visually apparent cursor in most cases. If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the Cursor property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.  \\n  \\n If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class. Setting Cursor in code requires one of the following:  \\n  \\n-   Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance. Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.  \\n  \\n-   Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.  \\n  \\n Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust. For more information on custom cursors, see [Input Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_Cursor\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.CursorProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example shows how to deliberately set the cursor graphic.  \\n  \\n [!code-cs[cursors#ChangeCursorsSample](~/add/codesnippet/csharp/cursors/Window1.xaml.cs#changecursorssample)]\\n [!code-vb[cursors#ChangeCursorsSample](~/add/codesnippet/visualbasic/cursors/Window1.xaml.vb#changecursorssample)]\"\n  syntax:\n    content: public System.Windows.Input.Cursor Cursor { get; set; }\n    return:\n      type: System.Windows.Input.Cursor\n      description: The cursor to display. The default value is defined as <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> per this dependency property. However, the practical default at run time will come from a variety of factors.\n  overload: System.Windows.FrameworkElement.Cursor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.CursorProperty\n  id: CursorProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: CursorProperty\n  nameWithType: FrameworkElement.CursorProperty\n  fullName: System.Windows.FrameworkElement.CursorProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Cursor*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CursorProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.DataContext\n  id: DataContext\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: DataContext\n  nameWithType: FrameworkElement.DataContext\n  fullName: System.Windows.FrameworkElement.DataContext\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the data context for an element when it participates in data binding.\n  remarks: \"*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.  \\n  \\n Data context can be set directly to a [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] object, with the bindings evaluating to properties of that object. Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.  \\n  \\n This dependency property inherits property values. If there are child elements without other values for DataContext established through local values or styles, then the property system will set the value to be the DataContext value of the nearest parent element with this value assigned.  \\n  \\n Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>. For more information, see [How to: Specify the Binding Source](~/add/includes/ajax-current-ext-md.md).  \\n  \\n In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], DataContext is most typically set to as a <xref:System.Windows.Data.Binding> declaration. You can use either property element syntax or attribute syntax. Attribute syntax is shown in the example on this page. You can also use code to set DataContext.  \\n  \\n DataContext is a bindable property, to facilitate scenarios where one context might be bound to another. However, if you bind to DataContext, be careful to not create circular binding references (do not bind a DataContext to itself, which is possible to do because of the property value inheritance nature of the DataContext property).  \\n  \\n<a name=\\\"xamlPropertyElementUsage_DataContext\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.DataContext>  \\n    <dataContextObject />  \\n  </object.DataContext>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlAttributeUsage_DataContext\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object DataContext=\\\"bindingUsage\\\"/>  \\n- or -  \\n<object DataContext=\\\"{resourceExtension contextResourceKey}\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_DataContext\\\"></a>   \\n## XAML Values  \\n *dataContextObject*  \\n A directly embedded object that serves as data context for any bindings within the parent element. Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class. Alternatively, raw data of any [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object type intended for binding may be placed here, with the actual bindings defined later.  \\n  \\n *bindingUsage*  \\n A binding usage that evaluates to an appropriate data context. For details, see [Binding Markup Extension](~/add/includes/ajax-current-ext-md.md).  \\n  \\n *resourceExtension*  \\n One of the following:  or . This usage is used when referring to raw data defined as an object in resources. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  \\n  \\n *contextResourceKey*  \\n The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_DataContext\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.DataContextProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|\"\n  example:\n  - \"The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.  \\n  \\n [!code-xml[MasterDetail#DataContextProperty](~/add/codesnippet/xaml/MasterDetail/Page1.xaml#datacontextproperty)]  \\n[!code-xml[MasterDetail#DataContextProperty2](~/add/codesnippet/xaml/MasterDetail/Page1.xaml#datacontextproperty2)]  \\n[!code-xml[MasterDetail#DataContextProperty3](~/add/codesnippet/xaml/MasterDetail/Page1.xaml#datacontextproperty3)]\"\n  syntax:\n    content: public object DataContext { get; set; }\n    return:\n      type: System.Object\n      description: The object to use as data context.\n  overload: System.Windows.FrameworkElement.DataContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.DataContextChanged\n  id: DataContextChanged\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: DataContextChanged\n  nameWithType: FrameworkElement.DataContextChanged\n  fullName: System.Windows.FrameworkElement.DataContextChanged\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the data context for this element changes.\n  remarks: \"For an explanation of data contexts and data binding, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!IMPORTANT]\\n>  When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected. This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself. All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results. The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the DataContextChanged event. The reevaluations can occur before the event, after the event, or in any mixture.\"\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.DataContextProperty\n  id: DataContextProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: DataContextProperty\n  nameWithType: FrameworkElement.DataContextProperty\n  fullName: System.Windows.FrameworkElement.DataContextProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.DataContext*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty DataContextProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.DefaultStyleKey\n  id: DefaultStyleKey\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: DefaultStyleKey\n  nameWithType: FrameworkElement.DefaultStyleKey\n  fullName: System.Windows.FrameworkElement.DefaultStyleKey\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.\n  remarks: \"This property is typically not set through any of its direct property accessors. Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class. When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).  \\n  \\n A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists. This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.  \\n  \\n If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.  \\n  \\n<a name=\\\"dependencyPropertyInfo_DefaultStyleKey\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  example:\n  - \"The following example illustrates the dependency property metadata override usage discussed in Remarks. This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly. The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md)) and finally overrides the DefaultStyleKey dependency property metadata on the `NumericUpDown` class. DefaultStyleKey always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control. The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](http://go.microsoft.com/fwlink/?LinkID=160025).  \\n  \\n [!code-cs[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/add/codesnippet/csharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]\\n [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/add/codesnippet/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  \\n[!code-cs[CustomControlNumericUpDown#Close](~/add/codesnippet/csharp/CustomControlLibrary/NumericUpDown.cs#close)]\\n[!code-vb[CustomControlNumericUpDown#Close](~/add/codesnippet/visualbasic/customcontrollibrary/numericupdown.vb#close)]\"\n  syntax:\n    content: protected object DefaultStyleKey { get; set; }\n    return:\n      type: System.Object\n      description: The style key. To work correctly as part of theme style lookup, this value is expected to be the <xref:System.Type> of the control being styled.\n  overload: System.Windows.FrameworkElement.DefaultStyleKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.DefaultStyleKeyProperty\n  id: DefaultStyleKeyProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: DefaultStyleKeyProperty\n  nameWithType: FrameworkElement.DefaultStyleKeyProperty\n  fullName: System.Windows.FrameworkElement.DefaultStyleKeyProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.DefaultStyleKey*> dependency property.\n  syntax:\n    content: protected static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.EndInit\n  id: EndInit\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: EndInit()\n  nameWithType: FrameworkElement.EndInit()\n  fullName: System.Windows.FrameworkElement.EndInit()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Indicates that the initialization process for the element is complete.\n  remarks: If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event. Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.\n  syntax:\n    content: public virtual void EndInit ();\n    parameters: []\n  overload: System.Windows.FrameworkElement.EndInit*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: EndInit was called without <xref:System.Windows.FrameworkElement.BeginInit*> having previously been called on the element.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.FindName(System.String)\n  id: FindName(System.String)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FindName(String)\n  nameWithType: FrameworkElement.FindName(String)\n  fullName: System.Windows.FrameworkElement.FindName(String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Finds an element that has the provided identifier name.\n  remarks: \"If the element has child elements, these child elements are all searched recursively for the requested named element.  \\n  \\n FindName operates within the current element's namescope. For details, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public object FindName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the requested element.\n    return:\n      type: System.Object\n      description: The requested element. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no matching element was found.\n  overload: System.Windows.FrameworkElement.FindName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.FindResource(System.Object)\n  id: FindResource(System.Object)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FindResource(Object)\n  nameWithType: FrameworkElement.FindResource(Object)\n  fullName: System.Windows.FrameworkElement.FindResource(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Searches for a resource with the specified key, and throws an exception if the requested resource is not found.\n  remarks: \"> [!IMPORTANT]\\n>  If you call this method for a key that cannot be found, an exception is thrown. If you do not want to handle exceptions that result from calling FindResource, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead. <xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.  \\n  \\n If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources. This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup. For more information about resource lookup, see [XAML Resources](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Typically, you immediately cast a FindResource return value to the type of the property that you setting with the returned resource value.  \\n  \\n Resource keys are not necessarily strings. For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention. For details, see [Styling and Templating](~/add/includes/ajax-current-ext-md.md) or [XAML Resources](../Topic/XAML%20Resources.md).\"\n  example:\n  - \"The following example obtains a named resource and casts it to an appropriate type to fill a property.  \\n  \\n [!code-cs[PropertiesOvwSupport#ResourceProceduralGet](~/add/codesnippet/csharp/PropertiesOvwSupport/page3.xaml.cs#resourceproceduralget)]\\n [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/add/codesnippet/visualbasic/propertiesovwsupport/page3.xaml.vb#resourceproceduralget)]\"\n  syntax:\n    content: public object FindResource (object resourceKey);\n    parameters:\n    - id: resourceKey\n      type: System.Object\n      description: The key identifier for the requested resource.\n    return:\n      type: System.Object\n      description: The requested resource. If no resource with the provided key was found, an exception is thrown. An <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref> value might also be returned in the exception case.\n  overload: System.Windows.FrameworkElement.FindResource*\n  exceptions:\n  - type: System.Windows.ResourceReferenceKeyNotFoundException\n    commentId: T:System.Windows.ResourceReferenceKeyNotFoundException\n    description: \"<code>resourceKey</code> was not found and an event handler does not exist for the <xref href=\\\"System.Windows.Threading.Dispatcher.UnhandledException\\\"></xref> event.  \\n  \\n -or-  \\n  \\n <code>resourceKey</code> was not found and the <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*> property is <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref> in the <xref href=\\\"System.Windows.Threading.Dispatcher.UnhandledException\\\"></xref> event.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>resourceKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.FlowDirection\n  id: FlowDirection\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FlowDirection\n  nameWithType: FrameworkElement.FlowDirection\n  fullName: System.Windows.FrameworkElement.FlowDirection\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.\n  remarks: \"The dependency property usage sets the FlowDirection on this element. Because of property value inheritance, setting FlowDirection on an element can potentially set FlowDirection on all child elements that did not set FlowDirection locally or though other means such as styles.  \\n  \\n This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information. For more information on globalization considerations, see [Globalization for WPF](~/add/includes/ajax-current-ext-md.md).  \\n  \\n This property has a defined [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property. However, it is also registered as attached, so it can also function as an attached property. The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property. The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property. (Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction. The property value is then read by the eventual content host without requiring attached property usage.)  \\n  \\n<a name=\\\"xamlAttributeUsage_FlowDirection\\\"></a>   \\n## XAML Attribute Usage  \\n \\\\<*object* **FlowDirection**=\\\"<xref:System.Windows.FlowDirection>\\\"/>  \\n  \\n<a name=\\\"xamlTextUsage_FlowDirection\\\"></a>   \\n## XAML Text Usage  \\n This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attached property usage:  \\n  \\n `<` *object* `FrameworkElement.`**FlowDirection**=\\\"<xref:System.Windows.FlowDirection>`\\\"/>`  \\n  \\n<a name=\\\"dependencyPropertyInfo_FlowDirection\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  \\n  \\n This property is both a dependency property and an attached property; see Remarks.\"\n  syntax:\n    content: public System.Windows.FlowDirection FlowDirection { get; set; }\n    return:\n      type: System.Windows.FlowDirection\n      description: The direction that text and other [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] elements flow within their parent element, as a value of the enumeration. The default value is <xref href=\"System.Windows.FlowDirection\"></xref>.\n  overload: System.Windows.FrameworkElement.FlowDirection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.FlowDirectionProperty\n  id: FlowDirectionProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FlowDirectionProperty\n  nameWithType: FrameworkElement.FlowDirectionProperty\n  fullName: System.Windows.FrameworkElement.FlowDirectionProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.FlowDirection*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty FlowDirectionProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.FocusVisualStyle\n  id: FocusVisualStyle\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FocusVisualStyle\n  nameWithType: FrameworkElement.FocusVisualStyle\n  fullName: System.Windows.FrameworkElement.FocusVisualStyle\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.\n  remarks: \"This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata. This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.  \\n  \\n Conceptually, the visual behavior of focus applied to a control should be coherent from control to control. The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme. Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus. If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style. For more information on the design intention of FocusVisualStyle and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"xamlAttributeUsage_FocusVisualStyle\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object FocusVisualStyle=\\\"{resourceExtension styleResourceKey}\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_FocusVisualStyle\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n<a name=\\\"xamlValues_FocusVisualStyle\\\"></a>   \\n## XAML Values  \\n *resourceExtension*  \\n One of the following: , or . See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  \\n  \\n *styleResourceKey*  \\n The key that identifies the style being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  \\n  \\n> [!NOTE]\\n>  Property element syntax is technically possible, but not recommended. See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md). A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.  \\n  \\n<a name=\\\"dependencyPropertyInfo_FocusVisualStyle\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public System.Windows.Style FocusVisualStyle { get; set; }\n    return:\n      type: System.Windows.Style\n      description: The desired style to apply on focus. The default value as declared in the dependency property is an empty static <xref href=\"System.Windows.Style\"></xref>. However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.\n  overload: System.Windows.FrameworkElement.FocusVisualStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.FocusVisualStyleProperty\n  id: FocusVisualStyleProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: FocusVisualStyleProperty\n  nameWithType: FrameworkElement.FocusVisualStyleProperty\n  fullName: System.Windows.FrameworkElement.FocusVisualStyleProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.FocusVisualStyle*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ForceCursor\n  id: ForceCursor\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ForceCursor\n  nameWithType: FrameworkElement.ForceCursor\n  fullName: System.Windows.FrameworkElement.ForceCursor\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether this <xref href=\"System.Windows.FrameworkElement\"></xref> should force the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <xref:System.Windows.FrameworkElement.Cursor*> property.\n  remarks: \"If you set this property to `true` you will override the cursor preferences established by child elements. Doing so in general application [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors. Setting ForceCursor is more appropriate in control subclassing or compositing scenarios.  \\n  \\n<a name=\\\"dependencyPropertyInfo_ForceCursor\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example forces the cursor value.  \\n  \\n [!code-xml[ForceCursor#ForceCursor](~/add/codesnippet/xaml/forcecursor/default.xaml#forcecursor)]\"\n  syntax:\n    content: public bool ForceCursor { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if cursor presentation while over this element is forced to use current <xref:System.Windows.FrameworkElement.Cursor*> settings for the cursor (including on all child elements); otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.ForceCursor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ForceCursorProperty\n  id: ForceCursorProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ForceCursorProperty\n  nameWithType: FrameworkElement.ForceCursorProperty\n  fullName: System.Windows.FrameworkElement.ForceCursorProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.ForceCursor*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ForceCursorProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)\n  id: GetBindingExpression(System.Windows.DependencyProperty)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: GetBindingExpression(DependencyProperty)\n  nameWithType: FrameworkElement.GetBindingExpression(DependencyProperty)\n  fullName: System.Windows.FrameworkElement.GetBindingExpression(DependencyProperty)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns the <xref href=\"System.Windows.Data.BindingExpression\"></xref> that represents the binding on the specified property.\n  remarks: \"Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.  \\n  \\n This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName> method. GetBindingExpression passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The target <xref href=\"System.Windows.DependencyProperty\"></xref> to get the binding from.\n    return:\n      type: System.Windows.Data.BindingExpression\n      description: A <xref href=\"System.Windows.Data.BindingExpression\"></xref> if the target property has an active binding; otherwise, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.GetBindingExpression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)\n  id: GetFlowDirection(System.Windows.DependencyObject)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: GetFlowDirection(DependencyObject)\n  nameWithType: FrameworkElement.GetFlowDirection(DependencyObject)\n  fullName: System.Windows.FrameworkElement.GetFlowDirection(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the value of the <xref:System.Windows.FrameworkElement.FlowDirection*> attached property for the specified <xref href=\"System.Windows.DependencyObject\"></xref>.\n  remarks: The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element. To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.\n  syntax:\n    content: public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);\n    parameters:\n    - id: element\n      type: System.Windows.DependencyObject\n      description: The element to return a <xref:System.Windows.FrameworkElement.FlowDirection*> for.\n    return:\n      type: System.Windows.FlowDirection\n      description: The requested flow direction, as a value of the enumeration.\n  overload: System.Windows.FrameworkElement.GetFlowDirection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)\n  id: GetLayoutClip(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: GetLayoutClip(Size)\n  nameWithType: FrameworkElement.GetLayoutClip(Size)\n  fullName: System.Windows.FrameworkElement.GetLayoutClip(Size)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.\n  remarks: \"Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.  \\n  \\n A returned null reference indicates that no clipping will occur. The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`. This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName>. The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations. Several subclasses of <xref:System.Windows.FrameworkElement> override this method again. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.\"\n  syntax:\n    content: protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);\n    parameters:\n    - id: layoutSlotSize\n      type: System.Windows.Size\n      description: The size of the part of the element that does visual presentation.\n    return:\n      type: System.Windows.Media.Geometry\n      description: The clipping geometry.\n  overload: System.Windows.FrameworkElement.GetLayoutClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.GetTemplateChild(System.String)\n  id: GetTemplateChild(System.String)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: GetTemplateChild(String)\n  nameWithType: FrameworkElement.GetTemplateChild(String)\n  fullName: System.Windows.FrameworkElement.GetTemplateChild(String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns the named element in the visual tree of an instantiated <xref href=\"System.Windows.Controls.ControlTemplate\"></xref>.\n  remarks: \"Templates in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope. This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template. Call the GetTemplateChild method to return references to objects that come from the template after it is instantiated. You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.  \\n  \\n <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> supplies the same function as this method. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it. Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> when you need to get an element outside of its parent control.\"\n  syntax:\n    content: protected System.Windows.DependencyObject GetTemplateChild (string childName);\n    parameters:\n    - id: childName\n      type: System.String\n      description: Name of the child to find.\n    return:\n      type: System.Windows.DependencyObject\n      description: The requested element. May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no element of the requested name exists.\n  overload: System.Windows.FrameworkElement.GetTemplateChild*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.GetUIParentCore\n  id: GetUIParentCore\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: GetUIParentCore()\n  nameWithType: FrameworkElement.GetUIParentCore()\n  fullName: System.Windows.FrameworkElement.GetUIParentCore()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns an alternative logical parent for this element if there is no visual parent.\n  remarks: This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName>. The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value. Derived class implementations might return alternate parent relationships.\n  syntax:\n    content: protected override System.Windows.DependencyObject GetUIParentCore ();\n    parameters: []\n    return:\n      type: System.Windows.DependencyObject\n      description: Returns something other than <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> whenever a WPF framework-level implementation of this method has a non-visual parent connection.\n  overload: System.Windows.FrameworkElement.GetUIParentCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.GetVisualChild(System.Int32)\n  id: GetVisualChild(System.Int32)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: GetVisualChild(Int32)\n  nameWithType: FrameworkElement.GetVisualChild(Int32)\n  fullName: System.Windows.FrameworkElement.GetVisualChild(Int32)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Overrides &lt;xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName&gt;, and returns a child at the specified index from a collection of child elements.\n  remarks: In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero. The content model for GetVisualChild supports either zero or one child elements, not a collection.\n  example:\n  - \"The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children. These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and GetVisualChild.  \\n  \\n [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverridespre)]\\n [!code-cs[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverridespre)]  \\n[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverrides)]\\n[!code-cs[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverrides)]\"\n  syntax:\n    content: protected override System.Windows.Media.Visual GetVisualChild (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the requested child element in the collection.\n    return:\n      type: System.Windows.Media.Visual\n      description: The requested child element. This should not return <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; if the provided index is out of range, an exception is thrown.\n  overload: System.Windows.FrameworkElement.GetVisualChild*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Height\n  id: Height\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Height\n  nameWithType: FrameworkElement.Height\n  fullName: System.Windows.FrameworkElement.Height\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the suggested height of the element.\n  remarks: \"Height is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information. The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>. If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, Height.  \\n  \\n If this element is a child element within some other element, then setting this property to a value is really only a suggested value. The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process. In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the Height on <xref:System.Windows.Window>. (For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)  \\n  \\n In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=fullName>. This is how you specify auto sizing behavior in code. In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] you set the value to the string \\\"Auto\\\" (case insensitive) to enable the auto sizing behavior. Auto sizing behavior implies that the element will fill the height available to it. Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.  \\n  \\n The return value of this property is always the same as any value that was set to it. In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary. This can happen either statically because the layout rejected the suggested size for some reason, or momentarily. The layout system itself works asynchronously relative to the property system's set of Height and may not have processed that particular sizing property change yet.  \\n  \\n The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.  \\n  \\n In addition to the validation check, there is a nondeterministic upper value bound for Height that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=fullName> but smaller than <xref:System.Double.MaxValue?displayProperty=fullName>). If you exceed this bound, the element will not render, and no exception is thrown. Do not set Height to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.  \\n  \\n<a name=\\\"xamlAttributeUsage_Height\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Height=\\\"double\\\"/>  \\n- or -  \\n<object Height=\\\"qualifiedDouble\\\"/>  \\n- or -  \\n<object Height=\\\"Auto\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_Height\\\"></a>   \\n## XAML Values  \\n *double*  \\n <xref:System.Double>  \\n  \\n String representation of a <xref:System.Double> value equal to or greater than 0.0. See Remarks for upper bound information. This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.  \\n  \\n *qualifiedDouble*  \\n A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.  \\n  \\n `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n `in` is inches; 1in==96px  \\n  \\n `cm` is centimeters; 1cm==(96/2.54) px  \\n  \\n `pt` is points; 1pt==(96/72) px  \\n  \\n **Auto**  \\n Enables autosizing behavior. See Remarks.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Height\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.HeightProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public double Height { get; set; }\n    return:\n      type: System.Double\n      description: The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is &lt;xref:System.Double?displayProperty=fullName&gt;. This value must be equal to or greater than 0.0. See Remarks for upper bound information.\n  overload: System.Windows.FrameworkElement.Height*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.HeightProperty\n  id: HeightProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: HeightProperty\n  nameWithType: FrameworkElement.HeightProperty\n  fullName: System.Windows.FrameworkElement.HeightProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Height*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty HeightProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.HorizontalAlignment\n  id: HorizontalAlignment\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: HorizontalAlignment\n  nameWithType: FrameworkElement.HorizontalAlignment\n  fullName: System.Windows.FrameworkElement.HorizontalAlignment\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.\n  remarks: \"When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting HorizontalAlignment to <xref:System.Windows.HorizontalAlignment>.  \\n  \\n HorizontalAlignment is the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \\\"default\\\" value set differently in subclassed elements, particularly controls. This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently. For example, the apparent \\\"default\\\" of HorizontalAlignment for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment>, even though <xref:System.Windows.Controls.Label> inherits HorizontalAlignment direct from <xref:System.Windows.FrameworkElement>. This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.  \\n  \\n <xref:System.Windows.Controls.Canvas> does not use HorizontalAlignment when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.  \\n  \\n When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_HorizontalAlignment\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|\"\n  syntax:\n    content: public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }\n    return:\n      type: System.Windows.HorizontalAlignment\n      description: A horizontal alignment setting, as a value of the enumeration. The default is <xref href=\"System.Windows.HorizontalAlignment\"></xref>.\n  overload: System.Windows.FrameworkElement.HorizontalAlignment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.HorizontalAlignmentProperty\n  id: HorizontalAlignmentProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: HorizontalAlignmentProperty\n  nameWithType: FrameworkElement.HorizontalAlignmentProperty\n  fullName: System.Windows.FrameworkElement.HorizontalAlignmentProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.HorizontalAlignment*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.InheritanceBehavior\n  id: InheritanceBehavior\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: InheritanceBehavior\n  nameWithType: FrameworkElement.InheritanceBehavior\n  fullName: System.Windows.FrameworkElement.InheritanceBehavior\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.\n  remarks: \"Certain boundaries in the element tree set InheritanceBehavior to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further. RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName> value.  \\n  \\n If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.\"\n  syntax:\n    content: protected System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }\n    return:\n      type: System.Windows.InheritanceBehavior\n      description: A value of the enumeration. The default is <xref href=\"System.Windows.InheritanceBehavior\"></xref>.\n  overload: System.Windows.FrameworkElement.InheritanceBehavior*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Initialized\n  id: Initialized\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Initialized\n  nameWithType: FrameworkElement.Initialized\n  fullName: System.Windows.FrameworkElement.Initialized\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when this <xref href=\"System.Windows.FrameworkElement\"></xref> is initialized. This event coincides with cases where the value of the <xref:System.Windows.FrameworkElement.IsInitialized*> property changes from <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> (or undefined) to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called. Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page is processed.  \\n  \\n Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or Initialized depends on your requirements. If you do not need to read element properties, intend to reset properties, and do not need any layout information, Initialized might be the better event to act upon. If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon. Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required. (You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)  \\n  \\n For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public event EventHandler Initialized;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.InputScope\n  id: InputScope\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: InputScope\n  nameWithType: FrameworkElement.InputScope\n  fullName: System.Windows.FrameworkElement.InputScope\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the context for input used by this <xref href=\"System.Windows.FrameworkElement\"></xref>.\n  remarks: \"This dependency property inherits property values. If there are child elements without other values for InputScope established through local values or styles, then the property system will set the value to be the InputScope value of the nearest ancestor element with this value assigned.  \\n  \\n Although a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is not common.  \\n  \\n<a name=\\\"dependencyPropertyInfo_InputScope\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|\"\n  syntax:\n    content: public System.Windows.Input.InputScope InputScope { get; set; }\n    return:\n      type: System.Windows.Input.InputScope\n      description: The input scope, which modifies how input from alternative input methods is interpreted. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> (which results in a default handling of commands).\n  overload: System.Windows.FrameworkElement.InputScope*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.InputScopeProperty\n  id: InputScopeProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: InputScopeProperty\n  nameWithType: FrameworkElement.InputScopeProperty\n  fullName: System.Windows.FrameworkElement.InputScopeProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.InputScope*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty InputScopeProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.IsInitialized\n  id: IsInitialized\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: IsInitialized\n  nameWithType: FrameworkElement.IsInitialized\n  fullName: System.Windows.FrameworkElement.IsInitialized\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <xref:System.Windows.FrameworkElement.EndInit*> method called.\n  remarks: \"This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.  \\n  \\n This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>. Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized. Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called. In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.\"\n  syntax:\n    content: public bool IsInitialized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.IsInitialized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.IsLoaded\n  id: IsLoaded\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: IsLoaded\n  nameWithType: FrameworkElement.IsLoaded\n  fullName: System.Windows.FrameworkElement.IsLoaded\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets a value that indicates whether this element has been loaded for presentation.\n  remarks: \"From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code. `true` state is set by the general presentation logic when elements are loaded into the presentation engine.  \\n  \\n Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.\"\n  example:\n  - \"The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event. The other handler is hooked to a user control, and calls IsLoaded to assure that the root element is loaded completely. Both handlers call the same function (not shown) that will populate child elements with fresh data.  \\n  \\n [!code-cs[GroupBoxExample#FEIsLoaded](~/add/codesnippet/csharp/GroupBoxExample/Page1.xaml.cs#feisloaded)]\"\n  syntax:\n    content: public bool IsLoaded { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current element is attached to an element tree; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the element has never been attached to a loaded element tree.\n  overload: System.Windows.FrameworkElement.IsLoaded*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Language\n  id: Language\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Language\n  nameWithType: FrameworkElement.Language\n  fullName: System.Windows.FrameworkElement.Language\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets localization/globalization language information that applies to an element.\n  remarks: \"The string formats follow the RFC 3066 standard. For example, U.S. English is \\\"en-US\\\". For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.  \\n  \\n This dependency property inherits property values. If there are child elements without other values for Language established through local values or styles, the property system will set the value to be the Language value of the nearest ancestor element with this value assigned.  \\n  \\n [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] defines the general meaning of the `xml:lang` attribute. Language essentially exposes the meaning of this attribute as a dependency property. Language can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]. If you set Language, that value becomes the `xml:lang` and overwrites any previous value. For more information, see [xml:lang Handling in XAML](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_CultureInfo\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.LanguageProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|\"\n  syntax:\n    content: public System.Windows.Markup.XmlLanguage Language { get; set; }\n    return:\n      type: System.Windows.Markup.XmlLanguage\n      description: The language information for this element. The default value is an <xref href=\"System.Windows.Markup.XmlLanguage\"></xref> with its <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*> value set to the string \"en-US\".\n  overload: System.Windows.FrameworkElement.Language*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.LanguageProperty\n  id: LanguageProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: LanguageProperty\n  nameWithType: FrameworkElement.LanguageProperty\n  fullName: System.Windows.FrameworkElement.LanguageProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Language*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty LanguageProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.LayoutTransform\n  id: LayoutTransform\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: LayoutTransform\n  nameWithType: FrameworkElement.LayoutTransform\n  fullName: System.Windows.FrameworkElement.LayoutTransform\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a graphics transformation that should apply to this element when  layout is performed.\n  remarks: \"In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, LayoutTransform will affect results of layout.  \\n  \\n Setting a transform provides powerful capabilities of scaling and rotating. However, LayoutTransform ignores <xref:System.Windows.Media.TranslateTransform> operations. This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.  \\n  \\n LayoutTransform can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system. When you apply a LayoutTransform to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged. If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need. However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.  \\n  \\n Example scenarios where LayoutTransform would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.  \\n  \\n<a name=\\\"dependencyPropertyInfo_LayoutTransform\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  example:\n  - \"The following example shows how to apply a LayoutTransform to an element. The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>. It also uses the LayoutTransform property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-vb[LayoutTransform#1](~/add/codesnippet/visualbasic/LayoutTransformVB/LayoutTransform.vb#1)]\\n [!code-cpp[LayoutTransform#1](~/add/codesnippet/cpp/layouttransform/LayoutTransform.cpp#1)]\\n [!code-xml[LayoutTransform#1](~/add/codesnippet/xaml/LayoutTransform/default.xaml#1)]\\n [!code-cs[LayoutTransform#1](~/add/codesnippet/csharp/LayoutTransformCsharp/LayoutTransform.cs#1)]\"\n  syntax:\n    content: public System.Windows.Media.Transform LayoutTransform { get; set; }\n    return:\n      type: System.Windows.Media.Transform\n      description: The transform this element should use. The default is <xref:System.Windows.Media.Transform.Identity*>.\n  overload: System.Windows.FrameworkElement.LayoutTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.LayoutTransformProperty\n  id: LayoutTransformProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: LayoutTransformProperty\n  nameWithType: FrameworkElement.LayoutTransformProperty\n  fullName: System.Windows.FrameworkElement.LayoutTransformProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.LayoutTransform*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty LayoutTransformProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Loaded\n  id: Loaded\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Loaded\n  nameWithType: FrameworkElement.Loaded\n  fullName: System.Windows.FrameworkElement.Loaded\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the element is laid out, rendered, and ready for interaction.\n  remarks: \"Loaded is usually the last event raised in an element initialization sequence. It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>. Whether you choose to handle Loaded or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements. If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon. If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, Loaded might be the better event to act upon. Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required. (You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)  \\n  \\n For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Direct routed events do not follow a route, they are only handled within the same element on which they are raised. Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.  \\n  \\n Loaded and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes. A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload. Therefore Loaded cannot be assumed to occur only when a page is first loaded through navigation to the page.  \\n  \\n<a name=\\\"routedEventInfo_Loaded\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.LoadedEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.RoutedEventHandler>|\"\n  syntax:\n    content: public event System.Windows.RoutedEventHandler Loaded;\n    return:\n      type: System.Windows.RoutedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.LoadedEvent\n  id: LoadedEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: LoadedEvent\n  nameWithType: FrameworkElement.LoadedEvent\n  fullName: System.Windows.FrameworkElement.LoadedEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.Loaded\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LoadedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.LogicalChildren\n  id: LogicalChildren\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: LogicalChildren\n  nameWithType: FrameworkElement.LogicalChildren\n  fullName: System.Windows.FrameworkElement.LogicalChildren\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets an enumerator for logical child elements of this element.\n  remarks: \"LogicalChildren allows you to iterate over child elements. This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.  \\n  \\n For more information on how to use LogicalChildren and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: protected virtual System.Collections.IEnumerator LogicalChildren { get; }\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for logical child elements of this element.\n  overload: System.Windows.FrameworkElement.LogicalChildren*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Margin\n  id: Margin\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Margin\n  nameWithType: FrameworkElement.Margin\n  fullName: System.Windows.FrameworkElement.Margin\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the outer margin of an element.\n  remarks: \"The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]. Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.  \\n  \\n Margin is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically. The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric Margin in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attribute syntax also.  \\n  \\n A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.  \\n  \\n Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.  \\n  \\n Elements that have margins set will not typically constrain the size of the specified Margin if the allotted rectangle space is not large enough for the margin plus the element content area. The element content area will be constrained instead when layout is calculated. The only case where margins would be constrained also is if the content is already constrained all the way to zero.  \\n  \\n<a name=\\\"xamlAttributeUsage_Margin\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Margin=\\\"left,top,right,bottom\\\"/>  \\n- or -  \\n<object Margin=\\\"left,top\\\"/>  \\n- or -  \\n<object Margin=\\\"thicknessReference\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_Margin\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.Margin>  \\n    <Thickness Left=\\\"left\\\" Top=\\\"top\\\" Right=\\\"right\\\" Bottom=\\\"bottom\\\"/>  \\n  </object.Margin>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_Margin\\\"></a>   \\n## XAML Values  \\n *left, top, right, bottom*  \\n Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.  \\n  \\n The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically. For instance, `Margin=\\\"20\\\"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20. `Margin=\\\"20,50\\\"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.  \\n  \\n The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]. You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.  \\n  \\n Number values provided as [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0). For more information on [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.  \\n  \\n *thicknessReference*  \\n An object reference to an existing <xref:System.Windows.Thickness>. This might be a `}`, a , or `}` reference. For more information on [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Margin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.MarginProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public System.Windows.Thickness Margin { get; set; }\n    return:\n      type: System.Windows.Thickness\n      description: Provides margin values for the element. The default value is a <xref href=\"System.Windows.Thickness\"></xref> with all properties equal to 0 (zero).\n  overload: System.Windows.FrameworkElement.Margin*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MarginProperty\n  id: MarginProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MarginProperty\n  nameWithType: FrameworkElement.MarginProperty\n  fullName: System.Windows.FrameworkElement.MarginProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Margin*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty MarginProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MaxHeight\n  id: MaxHeight\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MaxHeight\n  nameWithType: FrameworkElement.MaxHeight\n  fullName: System.Windows.FrameworkElement.MaxHeight\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the maximum height constraint of the element.\n  remarks: \"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information. The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.  If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then MaxHeight, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.  \\n  \\n The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value a run-time exception is thrown.  \\n  \\n<a name=\\\"xamlAttributeUsage_MaxHeight\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object MaxHeight=\\\"double\\\"/>  \\n- or –  \\n<object MaxHeight =\\\"qualifiedDouble\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_MaxHeight\\\"></a>   \\n## XAML Values  \\n *double*  \\n <xref:System.Double>  \\n  \\n String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.  \\n  \\n The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/add/includes/ajax-current-ext-md.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.  \\n  \\n *qualifiedDouble*  \\n A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.  \\n  \\n `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n `in` is inches; 1in==96px  \\n  \\n `cm` is centimeters; 1cm==(96/2.54) px  \\n  \\n `pt` is points; 1pt==(96/72) px  \\n  \\n<a name=\\\"dependencyPropertyInfo_MaxHeight\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public double MaxHeight { get; set; }\n    return:\n      type: System.Double\n      description: The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is <xref:System.Double>. This value can be any value equal to or greater than 0.0. <xref:System.Double> is also valid.\n  overload: System.Windows.FrameworkElement.MaxHeight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MaxHeightProperty\n  id: MaxHeightProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MaxHeightProperty\n  nameWithType: FrameworkElement.MaxHeightProperty\n  fullName: System.Windows.FrameworkElement.MaxHeightProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.MaxHeight*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty MaxHeightProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MaxWidth\n  id: MaxWidth\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MaxWidth\n  nameWithType: FrameworkElement.MaxWidth\n  fullName: System.Windows.FrameworkElement.MaxWidth\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the maximum width constraint of the element.\n  remarks: \"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information. The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>. If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then MaxWidth, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.  \\n  \\n The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.  \\n  \\n<a name=\\\"xamlAttributeUsage_MaxWidth\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object MaxWidth=\\\"double\\\"/>  \\n- or -  \\n<object MaxWidth=\\\"qualifiedDouble\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_MaxWidth\\\"></a>   \\n## XAML Values  \\n *double*  \\n <xref:System.Double>  \\n  \\n String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.  \\n  \\n The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/add/includes/ajax-current-ext-md.md) to set the value to be <xref:System.Double.PositiveInfinity>.  \\n  \\n *qualifiedDouble*  \\n A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.  \\n  \\n `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n `in` is inches; 1in==96px  \\n  \\n `cm` is centimeters; 1cm==(96/2.54) px  \\n  \\n `pt` is points; 1pt==(96/72) px  \\n  \\n<a name=\\\"dependencyPropertyInfo_MaxWidth\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public double MaxWidth { get; set; }\n    return:\n      type: System.Double\n      description: The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is <xref:System.Double>. This value can be any value equal to or greater than 0.0. <xref:System.Double> is also valid.\n  overload: System.Windows.FrameworkElement.MaxWidth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MaxWidthProperty\n  id: MaxWidthProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MaxWidthProperty\n  nameWithType: FrameworkElement.MaxWidthProperty\n  fullName: System.Windows.FrameworkElement.MaxWidthProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.MaxWidth*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty MaxWidthProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)\n  id: MeasureCore(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MeasureCore(Size)\n  nameWithType: FrameworkElement.MeasureCore(Size)\n  fullName: System.Windows.FrameworkElement.MeasureCore(Size)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Implements basic measure-pass layout system behavior for <xref href=\"System.Windows.FrameworkElement\"></xref>.\n  remarks: This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName> to connect the  WPF core-level and WPF framework-level layout measure implementations. The <xref:System.Windows.FrameworkElement> implementation seals the method. To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead. To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName>.\n  syntax:\n    content: protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);\n    parameters:\n    - id: availableSize\n      type: System.Windows.Size\n      description: The available size that the parent element can give to the child elements.\n    return:\n      type: System.Windows.Size\n      description: The desired size of this element in layout.\n  overload: System.Windows.FrameworkElement.MeasureCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)\n  id: MeasureOverride(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MeasureOverride(Size)\n  nameWithType: FrameworkElement.MeasureOverride(Size)\n  fullName: System.Windows.FrameworkElement.MeasureOverride(Size)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <xref href=\"System.Windows.FrameworkElement\"></xref>-derived class.\n  remarks: \"Override MeasureOverride to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] layout system. Your implementation should do the following:  \\n  \\n1.  Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.  \\n  \\n2.  Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).  \\n  \\n3.  Compute the net desired size of the parent based upon the measurement of the child elements.  \\n  \\n The return value of MeasureOverride should be the element's own desired size, which then becomes the measure input for the parent element of the current element. This same process continues through the layout system until the root element of the page is reached.  \\n  \\n During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space. This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.  \\n  \\n> [!IMPORTANT]\\n>  Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.\"\n  syntax:\n    content: protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);\n    parameters:\n    - id: availableSize\n      type: System.Windows.Size\n      description: The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.\n    return:\n      type: System.Windows.Size\n      description: The size that this element determines it needs during layout, based on its calculations of child element sizes.\n  overload: System.Windows.FrameworkElement.MeasureOverride*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MinHeight\n  id: MinHeight\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MinHeight\n  nameWithType: FrameworkElement.MinHeight\n  fullName: System.Windows.FrameworkElement.MinHeight\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the minimum height constraint of the element.\n  remarks: \"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.  The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>. If there is a conflict between these values, the order of application for actual height determination is first MinHeight must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.  \\n  \\n The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.  \\n  \\n<a name=\\\"xamlAttributeUsage_MinHeight\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object MinHeight=\\\"double\\\"/>  \\n- or -  \\n<object MinHeight=\\\"qualifiedDouble\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_MinHeight\\\"></a>   \\n## XAML Values  \\n *double*  \\n <xref:System.Double>  \\n  \\n String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.  \\n  \\n The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.  \\n  \\n *qualifiedDouble*  \\n A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.  \\n  \\n `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n `in` is inches; 1in==96px  \\n  \\n `cm` is centimeters; 1cm==(96/2.54) px  \\n  \\n `pt` is points; 1pt==(96/72) px  \\n  \\n<a name=\\\"dependencyPropertyInfo_MinHeight\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public double MinHeight { get; set; }\n    return:\n      type: System.Double\n      description: The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0.0. This value can be any value equal to or greater than 0.0. However, <xref:System.Double> is NOT valid, nor is &lt;xref:System.Double?displayProperty=fullName&gt;.\n  overload: System.Windows.FrameworkElement.MinHeight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MinHeightProperty\n  id: MinHeightProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MinHeightProperty\n  nameWithType: FrameworkElement.MinHeightProperty\n  fullName: System.Windows.FrameworkElement.MinHeightProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.MinHeight*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty MinHeightProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MinWidth\n  id: MinWidth\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MinWidth\n  nameWithType: FrameworkElement.MinWidth\n  fullName: System.Windows.FrameworkElement.MinWidth\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the minimum width constraint of the element.\n  remarks: \"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.  The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  If there is a conflict between these values, the order of application for actual width determination is first MinWidth must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.  \\n  \\n The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set an invalid value, a run-time exception is thrown.  \\n  \\n<a name=\\\"xamlAttributeUsage_MinWidth\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object MinWidth=\\\"double\\\"/>  \\n- or -  \\n<object MinWidth=\\\"qualifiedDouble\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_MinWidth\\\"></a>   \\n## XAML Values  \\n *double*  \\n <xref:System.Double>  \\n  \\n String representation of a <xref:System.Double> value equal to or greater than 0.0. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.  \\n  \\n The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.  \\n  \\n *qualifiedDouble*  \\n A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.  \\n  \\n `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n `in` is inches; 1in==96px  \\n  \\n `cm` is centimeters; 1cm==(96/2.54) px  \\n  \\n `pt` is points; 1pt==(96/72) px  \\n  \\n<a name=\\\"dependencyPropertyInfo_MinWidth\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public double MinWidth { get; set; }\n    return:\n      type: System.Double\n      description: The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is 0.0. This value can be any value equal to or greater than 0.0. However, <xref:System.Double> is not valid, nor is &lt;xref:System.Double?displayProperty=fullName&gt;.\n  overload: System.Windows.FrameworkElement.MinWidth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MinWidthProperty\n  id: MinWidthProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MinWidthProperty\n  nameWithType: FrameworkElement.MinWidthProperty\n  fullName: System.Windows.FrameworkElement.MinWidthProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.MinWidth*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty MinWidthProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  id: MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: MoveFocus(TraversalRequest)\n  nameWithType: FrameworkElement.MoveFocus(TraversalRequest)\n  fullName: System.Windows.FrameworkElement.MoveFocus(TraversalRequest)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Moves the keyboard focus away from this element and to another element in a provided traversal direction.\n  remarks: This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName> and seals the method.\n  example:\n  - \"The following example implements a handler that handles several possible button inputs. Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>. The handler tracks the element with current keyboard focus, and calls MoveFocus on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.  \\n  \\n [!code-cs[FocusSample#FocusSampleMoveFocus](~/add/codesnippet/csharp/FocusSample/Window1.xaml.cs#focussamplemovefocus)]\\n [!code-vb[FocusSample#FocusSampleMoveFocus](~/add/codesnippet/visualbasic/focussample/window1.xaml.vb#focussamplemovefocus)]\"\n  syntax:\n    content: public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);\n    parameters:\n    - id: request\n      type: System.Windows.Input.TraversalRequest\n      description: The direction that focus is to be moved, as a value of the enumeration.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if focus is moved successfully; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the target element in direction as specified does not exist or could not be keyboard focused.\n  overload: System.Windows.FrameworkElement.MoveFocus*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Name\n  id: Name\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Name\n  nameWithType: FrameworkElement.Name\n  fullName: System.Windows.FrameworkElement.Name\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] processor.\n  remarks: \"The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.  \\n  \\n This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Names must be unique within a namescope. For more information, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Getting a Name if you are creating elements in code is not common. If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the Name. An exception to this is if the Name string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. Setting a Name from code-behind if the original Name was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] will not change the original object reference. The object references are created only when the underlying namescopes are explicitly created during parsing. You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the Name property of an already loaded element.  \\n  \\n One notable case where setting Name from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time. Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance. See the Example section, or [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Setting Name from code has limited applications, but getting an element by Name is more common. One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page. The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by Name in the logical tree for that element, searching the tree recursively as necessary. Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a Name string as an argument.  \\n  \\n Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>. Implementations of this interface are expected to enforce that names be unambiguous within their scope. The root elements that define this interface also define the namescope behavior boundaries for all the related [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)].  \\n  \\n The Name property also serves as an identifier for other processes. For instance, the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] automation model will use Name as the AutomationId for clients and providers.  \\n  \\n The string values used for Name have some restrictions, as imposed by the underlying [x:Name Directive](../Topic/x:Name%20Directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] specification. Most notably, a Name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores. For more information, see [WPF XAML Namescopes](../Topic/WPF%20XAML%20Namescopes.md).  \\n  \\n Name is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation. Data binding a Name is technically possible, but is an extremely uncommon scenario because a data-bound Name cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Name\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.NameProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|\"\n  example:\n  - \"The following example sets the Name property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>. The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the Name, and cannot be targeted by object reference.  \\n  \\n [!code-vb[animateHeight_procedural#FEName](~/add/codesnippet/visualbasic/animateheight/animatedheightexample.vb#fename)]\\n [!code-cs[animateHeight_procedural#FEName](~/add/codesnippet/csharp/animateheight_csharp/AnimatedHeightExample.cs#fename)]\"\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: The name of the element. The default is an empty string.\n  overload: System.Windows.FrameworkElement.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.NameProperty\n  id: NameProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: NameProperty\n  nameWithType: FrameworkElement.NameProperty\n  fullName: System.Windows.FrameworkElement.NameProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Name*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty NameProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnApplyTemplate\n  id: OnApplyTemplate\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnApplyTemplate()\n  nameWithType: FrameworkElement.OnApplyTemplate()\n  fullName: System.Windows.FrameworkElement.OnApplyTemplate()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: When overridden in a derived class, is invoked whenever application code or internal processes call <xref:System.Windows.FrameworkElement.ApplyTemplate*>.\n  remarks: \"This method has no default implementation.  \\n  \\n Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element. For more information, see [Styling and Templating](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public virtual void OnApplyTemplate ();\n    parameters: []\n  overload: System.Windows.FrameworkElement.OnApplyTemplate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)\n  id: OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnContextMenuClosing(ContextMenuEventArgs)\n  nameWithType: FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)\n  fullName: System.Windows.FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ContextMenuClosing\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \\n  \\n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled.\"\n  syntax:\n    content: protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Controls.ContextMenuEventArgs\n      description: Provides data about the event.\n  overload: System.Windows.FrameworkElement.OnContextMenuClosing*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)\n  id: OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnContextMenuOpening(ContextMenuEventArgs)\n  nameWithType: FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)\n  fullName: System.Windows.FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ContextMenuOpening\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \\n  \\n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled.\"\n  syntax:\n    content: protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Controls.ContextMenuEventArgs\n      description: The <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.FrameworkElement.OnContextMenuOpening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  id: OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: FrameworkElement.OnGotFocus(RoutedEventArgs)\n  fullName: System.Windows.FrameworkElement.OnGotFocus(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked whenever an unhandled <xref href=\"System.Windows.UIElement.GotFocus\"></xref> event reaches this element in its route.\n  remarks: \"Unlike some other On* methods exposed by the base elements, OnGotFocus does have a default implementation. Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>. When invoked, OnGotFocus sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus. The OnGotFocus handler does not mark the event arguments as handled, even when focus is set to the current element. If the event's source was another element in the tree (not the current element), the handler does nothing.  \\n  \\n You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).\"\n  syntax:\n    content: protected override void OnGotFocus (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: The <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.FrameworkElement.OnGotFocus*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnInitialized(System.EventArgs)\n  id: OnInitialized(System.EventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnInitialized(EventArgs)\n  nameWithType: FrameworkElement.OnInitialized(EventArgs)\n  fullName: System.Windows.FrameworkElement.OnInitialized(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.FrameworkElement.Initialized\"></xref> event. This method is invoked whenever <xref:System.Windows.FrameworkElement.IsInitialized*> is set to <xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref>internally.\n  remarks: \"This particular On* method is not a class handler hook. Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] On\\\\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.  \\n  \\n Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior. Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] framework.\"\n  syntax:\n    content: protected virtual void OnInitialized (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: The <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.FrameworkElement.OnInitialized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked whenever the effective value of any dependency property on this <xref href=\"System.Windows.FrameworkElement\"></xref> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <xref:System.Windows.DependencyObject.OnPropertyChanged*>.\n  remarks: \"This method is not intended to generally detect property changes or invalidations. It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.  \\n  \\n This method is potentially invoked many times during the life of an object. Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties. However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.  \\n  \\n Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes. That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.\"\n  syntax:\n    content: protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The event data that describes the property that changed, as well as old and new values.\n  overload: System.Windows.FrameworkElement.OnPropertyChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  id: OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnRenderSizeChanged(SizeChangedInfo)\n  nameWithType: FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)\n  fullName: System.Windows.FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.FrameworkElement.SizeChanged\"></xref> event, using the specified information as part of the eventual event data.\n  remarks: This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.\n  syntax:\n    content: protected override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);\n    parameters:\n    - id: sizeInfo\n      type: System.Windows.SizeChangedInfo\n      description: Details of the old and new size involved in the change.\n  overload: System.Windows.FrameworkElement.OnRenderSizeChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)\n  id: OnStyleChanged(System.Windows.Style,System.Windows.Style)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnStyleChanged(Style,Style)\n  nameWithType: FrameworkElement.OnStyleChanged(Style,Style)\n  fullName: System.Windows.FrameworkElement.OnStyleChanged(Style,Style)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked when the style in use on this element changes, which will invalidate the layout.\n  remarks: This method has a default implementation that sets an internal flag that notes the style changed condition.\n  syntax:\n    content: protected virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);\n    parameters:\n    - id: oldStyle\n      type: System.Windows.Style\n      description: The old style.\n    - id: newStyle\n      type: System.Windows.Style\n      description: The new style.\n  overload: System.Windows.FrameworkElement.OnStyleChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)\n  id: OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnToolTipClosing(ToolTipEventArgs)\n  nameWithType: FrameworkElement.OnToolTipClosing(ToolTipEventArgs)\n  fullName: System.Windows.FrameworkElement.OnToolTipClosing(ToolTipEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked whenever an unhandled <xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \\n  \\n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled.\"\n  syntax:\n    content: protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Controls.ToolTipEventArgs\n      description: Provides data about the event.\n  overload: System.Windows.FrameworkElement.OnToolTipClosing*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)\n  id: OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnToolTipOpening(ToolTipEventArgs)\n  nameWithType: FrameworkElement.OnToolTipOpening(ToolTipEventArgs)\n  fullName: System.Windows.FrameworkElement.OnToolTipOpening(ToolTipEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked whenever the <xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"></xref> routed event reaches this class in its route. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \\n  \\n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.\"\n  syntax:\n    content: protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Controls.ToolTipEventArgs\n      description: Provides data about the event.\n  overload: System.Windows.FrameworkElement.OnToolTipOpening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  id: OnVisualParentChanged(System.Windows.DependencyObject)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OnVisualParentChanged(DependencyObject)\n  nameWithType: FrameworkElement.OnVisualParentChanged(DependencyObject)\n  fullName: System.Windows.FrameworkElement.OnVisualParentChanged(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Invoked when the parent of this element in the visual tree is changed. Overrides <xref:System.Windows.UIElement.OnVisualParentChanged*>.\n  remarks: The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing. For more information, see [Trees in WPF](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);\n    parameters:\n    - id: oldParent\n      type: System.Windows.DependencyObject\n      description: The old parent element. May be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to indicate that the element did not have a visual parent previously.\n  overload: System.Windows.FrameworkElement.OnVisualParentChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyle\n  id: OverridesDefaultStyle\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OverridesDefaultStyle\n  nameWithType: FrameworkElement.OverridesDefaultStyle\n  fullName: System.Windows.FrameworkElement.OverridesDefaultStyle\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether this element incorporates style properties from theme styles.\n  remarks: \"The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.  \\n  \\n> [!IMPORTANT]\\n>  If you set OverridesDefaultStyle to `true` on a control, you will be suppressing the default control template supplied by the theme styles. That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] functionality and visualization for the control. If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure. For more information, see [Control Authoring Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_OverridesDefaultStyle\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public bool OverridesDefaultStyle { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.OverridesDefaultStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n  id: OverridesDefaultStyleProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: OverridesDefaultStyleProperty\n  nameWithType: FrameworkElement.OverridesDefaultStyleProperty\n  fullName: System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Parent\n  id: Parent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: FrameworkElement.Parent\n  fullName: System.Windows.FrameworkElement.Parent\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the logical parent  element of this element.\n  remarks: \"Parent may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.  \\n  \\n Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change. You typically should get the value immediately before you need it.  \\n  \\n See [Trees in WPF](~/add/includes/ajax-current-ext-md.md) for more information about logical tree  traversal, and the scenarios where using  Parent as a technique of parent element discovery is appropriate.  \\n  \\n The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree. The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.  \\n  \\n Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.  \\n  \\n The most typical scenario for using the Parent property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent. For templates, the Parent of the template eventually will be `null`. To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.  \\n  \\n Note that this property does not report visual tree parents in cases where these vary from the logical tree parents. Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases. See <xref:System.Windows.Media.VisualTreeHelper>.\"\n  example:\n  - \"The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match. In this case these are properties that affect the rendering size.  \\n  \\n [!code-vb[GeometryDesigner#FEParentProperty](~/add/codesnippet/visualbasic/geometrydesigner/window1.xaml.vb#feparentproperty)]\\n [!code-cs[GeometryDesigner#FEParentProperty](~/add/codesnippet/csharp/GeometryDesigner/Window1.xaml.cs#feparentproperty)]\"\n  syntax:\n    content: public System.Windows.DependencyObject Parent { get; }\n    return:\n      type: System.Windows.DependencyObject\n      description: This element's logical parent.\n  overload: System.Windows.FrameworkElement.Parent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)\n  id: ParentLayoutInvalidated(System.Windows.UIElement)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ParentLayoutInvalidated(UIElement)\n  nameWithType: FrameworkElement.ParentLayoutInvalidated(UIElement)\n  fullName: System.Windows.FrameworkElement.ParentLayoutInvalidated(UIElement)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Supports incremental layout implementations in specialized subclasses of <xref href=\"System.Windows.FrameworkElement\"></xref>. ParentLayoutInvalidated is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.\n  remarks: \"If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked. The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.  \\n  \\n By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation. The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.  \\n  \\n An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system. Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior. For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.\"\n  syntax:\n    content: protected virtual void ParentLayoutInvalidated (System.Windows.UIElement child);\n    parameters:\n    - id: child\n      type: System.Windows.UIElement\n      description: The child element reporting the change.\n  overload: System.Windows.FrameworkElement.ParentLayoutInvalidated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: FrameworkElement.PredictFocus(FocusNavigationDirection)\n  fullName: System.Windows.FrameworkElement.PredictFocus(FocusNavigationDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.\n  remarks: <xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.\n  example:\n  - \"The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>. The handler tracks the element with current keyboard focus, and calls PredictFocus on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided. Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.  \\n  \\n [!code-cs[FocusSample#FEPredictFocus](~/add/codesnippet/csharp/FocusSample/Window1.xaml.cs#fepredictfocus)]\\n [!code-vb[FocusSample#FEPredictFocus](~/add/codesnippet/visualbasic/focussample/window1.xaml.vb#fepredictfocus)]\"\n  syntax:\n    content: public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Input.FocusNavigationDirection\n      description: The direction for which a prospective focus change should be determined.\n    return:\n      type: System.Windows.DependencyObject\n      description: The next element that focus would move to if focus were actually traversed. May return <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if focus cannot be moved relative to this element for the provided direction.\n  overload: System.Windows.FrameworkElement.PredictFocus*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: 'Specified one of the following directions in the <xref href=\"System.Windows.Input.TraversalRequest\"></xref>: <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>, <xref href=\"System.Windows.Input.FocusNavigationDirection\"></xref>. These directions are not legal for PredictFocus (but they are legal for <xref:System.Windows.FrameworkElement.MoveFocus*>).'\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.RegisterName(System.String,System.Object)\n  id: RegisterName(System.String,System.Object)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: RegisterName(String,Object)\n  nameWithType: FrameworkElement.RegisterName(String,Object)\n  fullName: System.Windows.FrameworkElement.RegisterName(String,Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Provides an accessor that simplifies access to the <xref:System.Windows.NameScope> registration method.\n  remarks: \"This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>. The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>. For more information about namescopes, see [WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Calling RegisterName is necessary in order to correctly hook up animation storyboards for applications when created in code. This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element. This is true even if that element is accessible by reference from the code. For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - >-\n    [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/add/codesnippet/visualbasic/animateproperty_storyboards_vb/scopeexample.vb#namescopeexample)]\n     [!code-cs[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/add/codesnippet/csharp/AnimateProperty_Storyboards_csharp/ScopeExample.cs#namescopeexample)]\n  syntax:\n    content: public void RegisterName (string name, object scopedElement);\n    parameters:\n    - id: name\n      type: System.String\n      description: Name to use for the specified name-object mapping.\n    - id: scopedElement\n      type: System.Object\n      description: Object for the mapping.\n  overload: System.Windows.FrameworkElement.RegisterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)\n  id: RemoveLogicalChild(System.Object)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: RemoveLogicalChild(Object)\n  nameWithType: FrameworkElement.RemoveLogicalChild(Object)\n  fullName: System.Windows.FrameworkElement.RemoveLogicalChild(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Removes the provided object from this element's logical tree. <xref href=\"System.Windows.FrameworkElement\"></xref> updates the affected logical tree parent pointers to keep in sync with this deletion.\n  remarks: \"Use this method for the implementation of collections on objects that represent logical children of an element. This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.  \\n  \\n For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate. Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>. These classes provide a content model with particular enforcement of logical children through dedicated [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.\"\n  example:\n  - \"The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation. The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection. The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.  \\n  \\n [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/visualbasic/compositiontargetrenderinganimations/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]\\n [!code-cs[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/csharp/CompositionTargetRenderingAnimations/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]\"\n  syntax:\n    content: protected void RemoveLogicalChild (object child);\n    parameters:\n    - id: child\n      type: System.Object\n      description: The element to remove.\n  overload: System.Windows.FrameworkElement.RemoveLogicalChild*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.RequestBringIntoView\n  id: RequestBringIntoView\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: RequestBringIntoView\n  nameWithType: FrameworkElement.RequestBringIntoView\n  fullName: System.Windows.FrameworkElement.RequestBringIntoView\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when <xref:System.Windows.FrameworkElement.BringIntoView*> is called on this element.\n  remarks: \"This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the RequestBringIntoView event should be made visible within the scrollable region. The <xref:System.Windows.Controls.ScrollViewer> will then mark the RequestBringIntoView event as handled, by using class handling of the event. In general RequestBringIntoView event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.  \\n  \\n<a name=\\\"routedEventInfo_RequestBringIntoView\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.RequestBringIntoViewEventHandler>|\"\n  syntax:\n    content: public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;\n    return:\n      type: System.Windows.RequestBringIntoViewEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.RequestBringIntoViewEvent\n  id: RequestBringIntoViewEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: RequestBringIntoViewEvent\n  nameWithType: FrameworkElement.RequestBringIntoViewEvent\n  fullName: System.Windows.FrameworkElement.RequestBringIntoViewEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Resources\n  id: Resources\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Resources\n  nameWithType: FrameworkElement.Resources\n  fullName: System.Windows.FrameworkElement.Resources\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the locally-defined resource dictionary.\n  remarks: \"Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application. Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case). In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).  \\n  \\n Note that this property returns only the resource dictionary declared directly within that element. This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.  \\n  \\n Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary. In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] defined resource. For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values. When you access resources through code, it is essentially equivalent to a  reference made from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].  \\n  \\n The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code. The Resources property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.  \\n  \\n Notice that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>. This is an example of implicit collection syntax; a tag representing the collection element can be omitted. The elements that are added as items to the collection are specified instead. For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md). One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>. For details, see [Merged Resource Dictionaries](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"xamlPropertyElementUsage_Resources\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.Resources>  \\n    oneOrMoreResourceElements  \\n  </object.Resources>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_Resources\\\"></a>   \\n## XAML Values  \\n *oneOrMoreResourceElements*  \\n One or more object elements, each of which defines a resource. Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/add/includes/ajax-current-ext-md.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.\"\n  syntax:\n    content: public System.Windows.ResourceDictionary Resources { get; set; }\n    return:\n      type: System.Windows.ResourceDictionary\n      description: The current locally-defined dictionary of resources, where each resource can be accessed by key.\n  overload: System.Windows.FrameworkElement.Resources*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)\n  id: SetBinding(System.Windows.DependencyProperty,System.String)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SetBinding(DependencyProperty,String)\n  nameWithType: FrameworkElement.SetBinding(DependencyProperty,String)\n  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.\n  remarks: This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter. This signature is more convenient if you are establishing a simple default binding. If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.\n  example:\n  - \"The following example sets a binding using a specific path.  \\n  \\n [!code-cs[BaseElementsSmorgasbord#SetBindingPath](~/add/codesnippet/csharp/BaseElementsSmorgasbord/Page1.xaml.cs#setbindingpath)]\\n [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/add/codesnippet/visualbasic/baseelementssmorgasbord/page1.xaml.vb#setbindingpath)]\"\n  syntax:\n    content: public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: Identifies the destination property where the binding should be established.\n    - id: path\n      type: System.String\n      description: The source property name or the path to the property used for the binding.\n    return:\n      type: System.Windows.Data.BindingExpression\n      description: Records the conditions of the binding. This return value can be useful for error checking.\n  overload: System.Windows.FrameworkElement.SetBinding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)\n  id: SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SetBinding(DependencyProperty,BindingBase)\n  nameWithType: FrameworkElement.SetBinding(DependencyProperty,BindingBase)\n  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,BindingBase)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attaches a binding to this element, based on the provided binding object.\n  remarks: This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>, which passes the current instance as the <xref:System.Windows.DependencyObject>.\n  syntax:\n    content: public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: Identifies the property where the binding should be established.\n    - id: binding\n      type: System.Windows.Data.BindingBase\n      description: Represents the specifics of the data binding.\n    return:\n      type: System.Windows.Data.BindingExpressionBase\n      description: Records the conditions of the binding. This return value can be useful for error checking.\n  overload: System.Windows.FrameworkElement.SetBinding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)\n  id: SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SetFlowDirection(DependencyObject,FlowDirection)\n  nameWithType: FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)\n  fullName: System.Windows.FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Sets the value of the <xref:System.Windows.FrameworkElement.FlowDirection*> attached property for the provided element.\n  remarks: This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element. To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.\n  syntax:\n    content: public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);\n    parameters:\n    - id: element\n      type: System.Windows.DependencyObject\n      description: The element that specifies a flow direction.\n    - id: value\n      type: System.Windows.FlowDirection\n      description: A value of the enumeration, specifying the direction.\n  overload: System.Windows.FrameworkElement.SetFlowDirection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)\n  id: SetResourceReference(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SetResourceReference(DependencyProperty,Object)\n  nameWithType: FrameworkElement.SetResourceReference(DependencyProperty,Object)\n  fullName: System.Windows.FrameworkElement.SetResourceReference(DependencyProperty,Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Searches for a resource with the specified name and sets up a resource reference to it for the specified property.\n  remarks: A resource reference is similar to the use of a [DynamicResource Markup Extension](~/add/includes/ajax-current-ext-md.md) in markup. The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis. The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).\n  syntax:\n    content: public void SetResourceReference (System.Windows.DependencyProperty dp, object name);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to which the resource is bound.\n    - id: name\n      type: System.Object\n      description: The name of the resource.\n  overload: System.Windows.FrameworkElement.SetResourceReference*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ShouldSerializeResources\n  id: ShouldSerializeResources\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ShouldSerializeResources()\n  nameWithType: FrameworkElement.ShouldSerializeResources()\n  fullName: System.Windows.FrameworkElement.ShouldSerializeResources()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Resources*> property.\n  remarks: This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>.\n  syntax:\n    content: public bool ShouldSerializeResources ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.FrameworkElement.Resources*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.ShouldSerializeResources*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ShouldSerializeStyle\n  id: ShouldSerializeStyle\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ShouldSerializeStyle()\n  nameWithType: FrameworkElement.ShouldSerializeStyle()\n  fullName: System.Windows.FrameworkElement.ShouldSerializeStyle()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Style*> property.\n  remarks: This will return `true` if the <xref:System.Windows.Style> is locally set.\n  syntax:\n    content: public bool ShouldSerializeStyle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.FrameworkElement.Style*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.ShouldSerializeStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers\n  id: ShouldSerializeTriggers\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ShouldSerializeTriggers()\n  nameWithType: FrameworkElement.ShouldSerializeTriggers()\n  fullName: System.Windows.FrameworkElement.ShouldSerializeTriggers()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref:System.Windows.FrameworkElement.Triggers*> property.\n  remarks: This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set.\n  syntax:\n    content: public bool ShouldSerializeTriggers ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.FrameworkElement.Triggers*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.ShouldSerializeTriggers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SizeChanged\n  id: SizeChanged\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SizeChanged\n  nameWithType: FrameworkElement.SizeChanged\n  fullName: System.Windows.FrameworkElement.SizeChanged\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when either the <xref:System.Windows.FrameworkElement.ActualHeight*> or the <xref:System.Windows.FrameworkElement.ActualWidth*> properties change value on this element.\n  remarks: \"Direct routed events do not follow a route, they are only handled within the same element on which they are raised. Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.  \\n  \\n The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant. This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values. The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.  \\n  \\n<a name=\\\"routedEventInfo_SizeChanged\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.SizeChangedEventHandler>|\"\n  syntax:\n    content: public event System.Windows.SizeChangedEventHandler SizeChanged;\n    return:\n      type: System.Windows.SizeChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SizeChangedEvent\n  id: SizeChangedEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SizeChangedEvent\n  nameWithType: FrameworkElement.SizeChangedEvent\n  fullName: System.Windows.FrameworkElement.SizeChangedEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.SizeChanged\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent SizeChangedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.SourceUpdated\n  id: SourceUpdated\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: SourceUpdated\n  nameWithType: FrameworkElement.SourceUpdated\n  fullName: System.Windows.FrameworkElement.SourceUpdated\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the source value changes for any existing property binding on this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.  \\n  \\n<a name=\\\"xamlAttributeUsage_SourceUpdated\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object SourceUpdated=\\\"eventHandler\\\"/>  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Windows.Data.DataTransferEventArgs> SourceUpdated;\n    return:\n      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Style\n  id: Style\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Style\n  nameWithType: FrameworkElement.Style\n  fullName: System.Windows.FrameworkElement.Style\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the style used by this element when it is rendered.\n  remarks: \"For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style). This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element. In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.  \\n  \\n Setting the styles has some restrictions. You can reset the entire Style property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition. However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed. Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown. A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).  \\n  \\n Style is a dependency property with special precedence. The locally set style generally operates at the highest precedence in the property system. If the Style is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type. If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the Style property value. See [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md) or [Styling and Templating](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"xamlAttributeUsage_Style\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Style=\\\"{resourceExtension styleResourceKey}\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_Style\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n<a name=\\\"xamlValues_Style\\\"></a>   \\n## XAML Values  \\n *resourceExtension*  \\n One of the following: , or . See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  \\n  \\n *styleResourceKey*  \\n The key that identifies the style being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  \\n  \\n> [!NOTE]\\n>  Property element syntax is technically possible, but not recommended for most style scenarios. See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md). A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Style\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.StyleProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  example:\n  - \"The following example defines a style in a resource dictionary.  \\n  \\n [!code-xml[FEResource#StyleProperty](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty)]  \\n[!code-xml[FEResource#StyleProperty2](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty2)]  \\n[!code-xml[FEResource#StyleProperty3](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty3)]  \\n[!code-xml[FEResource#StyleProperty4](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty4)]\"\n  syntax:\n    content: public System.Windows.Style Style { get; set; }\n    return:\n      type: System.Windows.Style\n      description: The applied, nondefault style for the element, if present. Otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>. The default for a default-constructed <xref href=\"System.Windows.FrameworkElement\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.Style*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.StyleProperty\n  id: StyleProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: StyleProperty\n  nameWithType: FrameworkElement.StyleProperty\n  fullName: System.Windows.FrameworkElement.StyleProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Style*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty StyleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)\n  id: System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)\n  isEii: true\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)\n  nameWithType: FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)\n  fullName: System.Windows.FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: For a description of this member, see the <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*> method.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.\n  syntax:\n    content: bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: The name of the requested ambient property.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>propertyName</code> is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Tag\n  id: Tag\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Tag\n  nameWithType: FrameworkElement.Tag\n  fullName: System.Windows.FrameworkElement.Tag\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets an arbitrary object value that can be used to store custom information about this element.\n  remarks: \"This property is analogous to Tag properties in other [!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)] programming models, such as [!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)] or [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]. Tag is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.  \\n  \\n Because this property takes an object, you would need to use the property element usage in order to set the Tag property in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] to anything other than an object with a known and built-in type converter, such as a string. Objects used in this manner are typically not within the standard [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] elements. For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md) and [XAML and Custom Classes for WPF](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_Tag\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.TagProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public object Tag { get; set; }\n    return:\n      type: System.Object\n      description: The intended value. This property has no default value.\n  overload: System.Windows.FrameworkElement.Tag*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.TagProperty\n  id: TagProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: TagProperty\n  nameWithType: FrameworkElement.TagProperty\n  fullName: System.Windows.FrameworkElement.TagProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Tag*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty TagProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.TargetUpdated\n  id: TargetUpdated\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: TargetUpdated\n  nameWithType: FrameworkElement.TargetUpdated\n  fullName: System.Windows.FrameworkElement.TargetUpdated\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the target value changes for any property binding on this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element. This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.  \\n  \\n Use the event data of the TargetUpdated event to determine the specific property that is reporting the target value update.  \\n  \\n<a name=\\\"xamlAttributeUsage_TargetUpdated\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object TargetUpdated=\\\"eventHandler\\\"/>  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Windows.Data.DataTransferEventArgs> TargetUpdated;\n    return:\n      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.TemplatedParent\n  id: TemplatedParent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: TemplatedParent\n  nameWithType: FrameworkElement.TemplatedParent\n  fullName: System.Windows.FrameworkElement.TemplatedParent\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.\n  remarks: \"TemplatedParent is frequently `null` for objects that are created in your application markup or code. This is because you create those objects directly, not via a template. Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.  \\n  \\n Cases where TemplatedParent might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates. Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.  \\n  \\n Templates are actually shared objects, where the contents of the template are created only once. Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root. In order to connect such a template reference to the page's logical tree, you should get the TemplatedParent value and continue to navigate that element tree as desired.\"\n  syntax:\n    content: public System.Windows.DependencyObject TemplatedParent { get; }\n    return:\n      type: System.Windows.DependencyObject\n      description: The element whose <xref href=\"System.Windows.FrameworkTemplate\"></xref> <xref:System.Windows.FrameworkTemplate.VisualTree*> caused this element to be created. This value is frequently <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>; see Remarks.\n  overload: System.Windows.FrameworkElement.TemplatedParent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ToolTip\n  id: ToolTip\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ToolTip\n  nameWithType: FrameworkElement.ToolTip\n  fullName: System.Windows.FrameworkElement.ToolTip\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].\n  remarks: \"If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)].  If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system. For more information, see <xref:System.Windows.Controls.ToolTipService>. The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToolTip\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object ToolTip=\\\"toolTipContent\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_ToolTip\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.ToolTip>  \\n    <ToolTip .../>  \\n  </object.ToolTip>  \\n</object>  \\n- or -  \\n<object>  \\n  <object.ToolTip>  \\n    toolTipObjectContent  \\n  </object.ToolTip>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_ToolTip\\\"></a>   \\n## XAML Values  \\n *toolTipContent*  \\n A string that becomes the display text for the ToolTip.  \\n  \\n *toolTipObjectContent*  \\n Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement> . Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the ToolTip, eventually containing text content within the compositing. In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName> property.  \\n  \\n <`ToolTip` .../>  \\n See <xref:System.Windows.Controls.ToolTip>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_ToolTip\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the ToolTip property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.  \\n  \\n [!code-vb[StatusBar#MakeProgressBar](~/add/codesnippet/visualbasic/statusbar/window1.xaml.vb#makeprogressbar)]\\n [!code-cs[StatusBar#MakeProgressBar](~/add/codesnippet/csharp/StatusBar/Window1.xaml.cs#makeprogressbar)]\"\n  syntax:\n    content: public object ToolTip { get; set; }\n    return:\n      type: System.Object\n      description: The tooltip object. See Remarks below for details on why this parameter is not strongly typed.\n  overload: System.Windows.FrameworkElement.ToolTip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ToolTipClosing\n  id: ToolTipClosing\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ToolTipClosing\n  nameWithType: FrameworkElement.ToolTipClosing\n  fullName: System.Windows.FrameworkElement.ToolTipClosing\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs just before any tooltip on the element is closed.\n  remarks: \"Marking the ToolTipClosing event as handled does not cancel closing the tooltip. Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.  \\n  \\n This event cannot be an <xref:System.Windows.EventTrigger> in a style. This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.  \\n  \\n<a name=\\\"routedEventInfo_ToolTipClosing\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|  \\n  \\n-   Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;\n    return:\n      type: System.Windows.Controls.ToolTipEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ToolTipClosingEvent\n  id: ToolTipClosingEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ToolTipClosingEvent\n  nameWithType: FrameworkElement.ToolTipClosingEvent\n  fullName: System.Windows.FrameworkElement.ToolTipClosingEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.ToolTipClosing\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ToolTipOpening\n  id: ToolTipOpening\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ToolTipOpening\n  nameWithType: FrameworkElement.ToolTipOpening\n  fullName: System.Windows.FrameworkElement.ToolTipOpening\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when any tooltip on the element is opened.\n  remarks: \"To prevent a tooltip from appearing in the UI, your handler for ToolTipOpening can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled. Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content. Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.  \\n  \\n ToolTipOpening will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset. Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.  \\n  \\n The ToolTipOpening event cannot be an <xref:System.Windows.EventTrigger> in a style. This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.  \\n  \\n<a name=\\\"routedEventInfo_ToolTipOpening\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|  \\n  \\n-   Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;\n    return:\n      type: System.Windows.Controls.ToolTipEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ToolTipOpeningEvent\n  id: ToolTipOpeningEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ToolTipOpeningEvent\n  nameWithType: FrameworkElement.ToolTipOpeningEvent\n  fullName: System.Windows.FrameworkElement.ToolTipOpeningEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.ToolTipOpening\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.ToolTipProperty\n  id: ToolTipProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: ToolTipProperty\n  nameWithType: FrameworkElement.ToolTipProperty\n  fullName: System.Windows.FrameworkElement.ToolTipProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.ToolTip*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ToolTipProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Triggers\n  id: Triggers\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Triggers\n  nameWithType: FrameworkElement.Triggers\n  fullName: System.Windows.FrameworkElement.Triggers\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the collection of triggers established directly on this element, or in child elements.\n  remarks: \"> [!NOTE]\\n>  This property can only be set in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add. The property to access the collection object itself is read-only, the collection itself is read-write. The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.  \\n  \\n This property does not enable you to examine triggers that exist as part of styles in use on this element. It only reports the collection of triggers that are literally added to the collection, either in markup or code. Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.  \\n  \\n In terms of behavior (and trying to establish which effect came from which element's declared Triggers collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree. Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.  \\n  \\n Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>). If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.  \\n  \\n<a name=\\\"xamlPropertyElementUsage_Triggers\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.Triggers>  \\n    oneOrMoreTriggers  \\n  </object.Triggers>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_Triggers\\\"></a>   \\n## XAML Values  \\n *oneOrMoreTriggers*  \\n One or more defined <xref:System.Windows.EventTrigger> elements. Each such trigger is expected to contain valid storyboard actions and references. Note that this collection can only be established on the root element of a page. For more information, see [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.Windows.TriggerCollection Triggers { get; }\n    return:\n      type: System.Windows.TriggerCollection\n      description: A strongly typed collection of <xref href=\"System.Windows.Trigger\"></xref> objects.\n  overload: System.Windows.FrameworkElement.Triggers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.TryFindResource(System.Object)\n  id: TryFindResource(System.Object)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: TryFindResource(Object)\n  nameWithType: FrameworkElement.TryFindResource(Object)\n  fullName: System.Windows.FrameworkElement.TryFindResource(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Searches for a resource with the specified key, and returns that resource if found.\n  remarks: \"If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time. The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that TryFindResource is called.  \\n  \\n Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.  \\n  \\n The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.\"\n  example:\n  - \"The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling TryFindResource on itself. This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and is not shown).  \\n  \\n [!code-cs[BaseElementsSmorgasbord#FETryFindResource](~/add/codesnippet/csharp/BaseElementsSmorgasbord/Page1.xaml.cs#fetryfindresource)]\\n [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/add/codesnippet/visualbasic/baseelementssmorgasbord/page1.xaml.vb#fetryfindresource)]\"\n  syntax:\n    content: public object TryFindResource (object resourceKey);\n    parameters:\n    - id: resourceKey\n      type: System.Object\n      description: The key identifier of the resource to be found.\n    return:\n      type: System.Object\n      description: The found resource, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no resource with the provided <code>key</code> is found.\n  overload: System.Windows.FrameworkElement.TryFindResource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Unloaded\n  id: Unloaded\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Unloaded\n  nameWithType: FrameworkElement.Unloaded\n  fullName: System.Windows.FrameworkElement.Unloaded\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the element is removed from within an element tree of loaded elements.\n  remarks: \"Direct routed events do not follow a route, they are only handled within the same element on which they are raised. Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.  \\n  \\n <xref:System.Windows.FrameworkElement.Loaded> and Unloaded might both be raised on controls as a result of user-initiated system theme changes. A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload. Therefore Unloaded cannot be assumed to occur only on navigation away from the page.  \\n  \\n Note that the Unloaded event is not raised after an application begins shutting down. Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs. If you place cleanup code within a handler for the Unloaded event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.  \\n  \\n<a name=\\\"routedEventInfo_Unloaded\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.RoutedEventHandler>|\"\n  syntax:\n    content: public event System.Windows.RoutedEventHandler Unloaded;\n    return:\n      type: System.Windows.RoutedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.UnloadedEvent\n  id: UnloadedEvent\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: UnloadedEvent\n  nameWithType: FrameworkElement.UnloadedEvent\n  fullName: System.Windows.FrameworkElement.UnloadedEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.FrameworkElement.Unloaded\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent UnloadedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.UnregisterName(System.String)\n  id: UnregisterName(System.String)\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: UnregisterName(String)\n  nameWithType: FrameworkElement.UnregisterName(String)\n  fullName: System.Windows.FrameworkElement.UnregisterName(String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Simplifies access to the <xref:System.Windows.NameScope> de-registration method.\n  remarks: You only need to un-register names if you intend to re-register another element with that same name.\n  syntax:\n    content: public void UnregisterName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Name of the name-object pair to remove from the current scope.\n  overload: System.Windows.FrameworkElement.UnregisterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.UpdateDefaultStyle\n  id: UpdateDefaultStyle\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: UpdateDefaultStyle()\n  nameWithType: FrameworkElement.UpdateDefaultStyle()\n  fullName: System.Windows.FrameworkElement.UpdateDefaultStyle()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Reapplies the default style to the current <xref href=\"System.Windows.FrameworkElement\"></xref>.\n  syntax:\n    content: public void UpdateDefaultStyle ();\n    parameters: []\n  overload: System.Windows.FrameworkElement.UpdateDefaultStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.UseLayoutRounding\n  id: UseLayoutRounding\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: UseLayoutRounding\n  nameWithType: FrameworkElement.UseLayoutRounding\n  fullName: System.Windows.FrameworkElement.UseLayoutRounding\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.\n  remarks: \"When the UseLayoutRounding property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.  \\n  \\n This property is inherited by child elements.  \\n  \\n> [!NOTE]\\n>  You should set UseLayoutRounding to `true` on the root element. The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary. If UseLayoutRounding cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.  \\n  \\n Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel. The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel. The line on the left does not use layout rounding and is anti-aliased. The line on the right uses layout rounding.  \\n  \\n ![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG \\\"Anti-aliased line compared to single pixel line.\\\")  \\n  \\n When you use layout rounding and <xref:System.Windows.GridUnitType> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering. For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.  \\n  \\n> [!NOTE]\\n>  In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders. By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher. Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime>``<AppContextSwitchOverrides      value=\\\"Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false\\\"/>``</runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.\"\n  example:\n  - \"The following example demonstrates the effect that the UseLayoutRounding property has on a single pixel-width line. The line on the left does not use layout rounding and the line on the right uses layout rounding. If you slowly resize the window, you can see the difference that layout rounding makes.  \\n  \\n```xaml  \\n  \\n<Page x:Class=\\\"LayoutRounding.Lines\\\"  \\n    xmlns=\\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\\"  \\n    xmlns:x=\\\"http://schemas.microsoft.com/winfx/2006/xaml\\\"  \\n    Title=\\\"Lines\\\" Name=\\\"linesPage\\\"  \\n    >  \\n  <StackPanel Width=\\\"150\\\"  Margin=\\\"7\\\" Orientation=\\\"Horizontal\\\">  \\n    <!-- Single pixel line with layout rounding turned OFF.-->  \\n    <Rectangle UseLayoutRounding=\\\"False\\\"  \\n       Width=\\\"45.5\\\" Margin=\\\"10\\\" Height=\\\"1\\\" Fill=\\\"Red\\\"/>  \\n    <!-- Single pixel line with layout rounding turned ON.-->  \\n    <Rectangle UseLayoutRounding=\\\"True\\\"  \\n      Width=\\\"45.5\\\" Margin=\\\"10\\\" Height=\\\"1\\\" Fill=\\\"Red\\\"/>  \\n  </StackPanel>  \\n  <!-- Background Grid -->  \\n  <Page.Background>  \\n    <DrawingBrush  Viewport=\\\"0,0,10,10\\\" ViewportUnits=\\\"Absolute\\\" TileMode=\\\"Tile\\\">  \\n      <DrawingBrush.Drawing>  \\n        <DrawingGroup>  \\n          <GeometryDrawing Brush=\\\"White\\\">  \\n            <GeometryDrawing.Geometry>  \\n              <RectangleGeometry Rect=\\\"0,0,1,1\\\" />  \\n            </GeometryDrawing.Geometry>  \\n          </GeometryDrawing>  \\n          <GeometryDrawing Geometry=\\\"M0,0 L1,0 1,0.1, 0,0.1Z \\\" Brush=\\\"#CCCCFF\\\" />  \\n          <GeometryDrawing Geometry=\\\"M0,0 L0,1 0.1,1, 0.1,0Z\\\" Brush=\\\"#CCCCFF\\\" />  \\n        </DrawingGroup>  \\n      </DrawingBrush.Drawing>  \\n    </DrawingBrush>  \\n  </Page.Background>  \\n</Page>  \\n```\"\n  syntax:\n    content: public bool UseLayoutRounding { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if layout rounding is applied; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkElement.UseLayoutRounding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.UseLayoutRoundingProperty\n  id: UseLayoutRoundingProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: UseLayoutRoundingProperty\n  nameWithType: FrameworkElement.UseLayoutRoundingProperty\n  fullName: System.Windows.FrameworkElement.UseLayoutRoundingProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.UseLayoutRounding*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.VerticalAlignment\n  id: VerticalAlignment\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: VerticalAlignment\n  nameWithType: FrameworkElement.VerticalAlignment\n  fullName: System.Windows.FrameworkElement.VerticalAlignment\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.\n  remarks: \"When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment>.  \\n  \\n VerticalAlignment is the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \\\"default\\\" value set differently in derived element classes, particularly controls. This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently. For example, the apparent \\\"default\\\" of VerticalAlignment for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits VerticalAlignment direct from <xref:System.Windows.FrameworkElement>. This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.  \\n  \\n <xref:System.Windows.Controls.Canvas> does not use VerticalAlignment when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.  \\n  \\n When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_VerticalAlignment\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|\"\n  syntax:\n    content: public System.Windows.VerticalAlignment VerticalAlignment { get; set; }\n    return:\n      type: System.Windows.VerticalAlignment\n      description: A vertical alignment setting. The default is <xref href=\"System.Windows.VerticalAlignment\"></xref>.\n  overload: System.Windows.FrameworkElement.VerticalAlignment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.VerticalAlignmentProperty\n  id: VerticalAlignmentProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: VerticalAlignmentProperty\n  nameWithType: FrameworkElement.VerticalAlignmentProperty\n  fullName: System.Windows.FrameworkElement.VerticalAlignmentProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.VerticalAlignment*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.VisualChildrenCount\n  id: VisualChildrenCount\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: VisualChildrenCount\n  nameWithType: FrameworkElement.VisualChildrenCount\n  fullName: System.Windows.FrameworkElement.VisualChildrenCount\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the number of visual child elements within this element.\n  remarks: \"The <xref:System.Windows.FrameworkElement> implementation of VisualChildrenCount always returns either zero or one. Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  \\n  \\n This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).\"\n  example:\n  - \"The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of VisualChildrenCount and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  \\n  \\n [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverridespre)]\\n [!code-cs[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverridespre)]  \\n[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverrides)]\\n[!code-cs[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverrides)]\"\n  syntax:\n    content: protected override int VisualChildrenCount { get; }\n    return:\n      type: System.Int32\n      description: The number of visual child elements for this element.\n  overload: System.Windows.FrameworkElement.VisualChildrenCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.Width\n  id: Width\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: Width\n  nameWithType: FrameworkElement.Width\n  fullName: System.Windows.FrameworkElement.Width\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the width of the element.\n  remarks: \"This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.  The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, Width.  \\n  \\n The return value of this property is always the same as any value that was set to it. In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary. The layout may have rejected the suggested size for some reason. Also, the layout system itself works asynchronously relative to the property system set of Width and may not have processed that particular sizing property change yet.  \\n  \\n In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=fullName>. This is how you specify auto sizing behavior. In [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] you set the value to the string \\\"Auto\\\" (case insensitive) to enable the auto sizing behavior. Auto sizing behavior implies that the element will fill the width available to it. Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.  \\n  \\n In addition to the validation check, there is a nondeterministic upper value bound for Width that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=fullName> but smaller than <xref:System.Double.MaxValue?displayProperty=fullName>). If you exceed this bound, the element will not render, and no exception is thrown. Do not set Width to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.  \\n  \\n<a name=\\\"xamlAttributeUsage_Width\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Width=\\\"double\\\"/>  \\n- or –  \\n<object Width =\\\"qualifiedDouble\\\"/>  \\n- or -  \\n<object Width =\\\"Auto\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_Width\\\"></a>   \\n## XAML Values  \\n *double*  \\n <xref:System.Double>  \\n  \\n String representation of a <xref:System.Double> value equal to or greater than 0.0. See Remarks for upper bound information. This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of `1` is acceptable.  \\n  \\n *qualifiedDouble*  \\n A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.  \\n  \\n `px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n `in` is inches; 1in==96px  \\n  \\n `cm` is centimeters; 1cm==(96/2.54) px  \\n  \\n `pt` is points; 1pt==(96/72) px  \\n  \\n `Auto`  \\n Enables autosizing behavior. See Remarks.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Width\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.FrameworkElement.WidthProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public double Width { get; set; }\n    return:\n      type: System.Double\n      description: The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The default value is &lt;xref:System.Double?displayProperty=fullName&gt;. This value must be equal to or greater than 0.0. See Remarks for upper bound information.\n  overload: System.Windows.FrameworkElement.Width*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkElement.WidthProperty\n  id: WidthProperty\n  parent: System.Windows.FrameworkElement\n  langs:\n  - csharp\n  name: WidthProperty\n  nameWithType: FrameworkElement.WidthProperty\n  fullName: System.Windows.FrameworkElement.WidthProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref:System.Windows.FrameworkElement.Width*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty WidthProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.UIElement\n  isExternal: false\n  name: System.Windows.UIElement\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.ResourceReferenceKeyNotFoundException\n  parent: System.Windows\n  isExternal: false\n  name: ResourceReferenceKeyNotFoundException\n  nameWithType: ResourceReferenceKeyNotFoundException\n  fullName: System.Windows.ResourceReferenceKeyNotFoundException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Windows.FrameworkElement.#ctor\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FrameworkElement()\n  nameWithType: FrameworkElement.FrameworkElement()\n  fullName: System.Windows.FrameworkElement.FrameworkElement()\n- uid: System.Windows.FrameworkElement.ActualHeight\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualHeight\n  nameWithType: FrameworkElement.ActualHeight\n  fullName: System.Windows.FrameworkElement.ActualHeight\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.FrameworkElement.ActualHeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualHeightProperty\n  nameWithType: FrameworkElement.ActualHeightProperty\n  fullName: System.Windows.FrameworkElement.ActualHeightProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.FrameworkElement.ActualWidth\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualWidth\n  nameWithType: FrameworkElement.ActualWidth\n  fullName: System.Windows.FrameworkElement.ActualWidth\n- uid: System.Windows.FrameworkElement.ActualWidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualWidthProperty\n  nameWithType: FrameworkElement.ActualWidthProperty\n  fullName: System.Windows.FrameworkElement.ActualWidthProperty\n- uid: System.Windows.FrameworkElement.AddLogicalChild(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: AddLogicalChild(Object)\n  nameWithType: FrameworkElement.AddLogicalChild(Object)\n  fullName: System.Windows.FrameworkElement.AddLogicalChild(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.FrameworkElement.ApplyTemplate\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ApplyTemplate()\n  nameWithType: FrameworkElement.ApplyTemplate()\n  fullName: System.Windows.FrameworkElement.ApplyTemplate()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ArrangeCore(Rect)\n  nameWithType: FrameworkElement.ArrangeCore(Rect)\n  fullName: System.Windows.FrameworkElement.ArrangeCore(Rect)\n- uid: System.Windows.Rect\n  parent: System.Windows\n  isExternal: false\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect\n- uid: System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ArrangeOverride(Size)\n  nameWithType: FrameworkElement.ArrangeOverride(Size)\n  fullName: System.Windows.FrameworkElement.ArrangeOverride(Size)\n- uid: System.Windows.Size\n  parent: System.Windows\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Windows.Size\n- uid: System.Windows.FrameworkElement.BeginInit\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginInit()\n  nameWithType: FrameworkElement.BeginInit()\n  fullName: System.Windows.FrameworkElement.BeginInit()\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard(Storyboard)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard)\n  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard)\n- uid: System.Windows.Media.Animation.Storyboard\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: Storyboard\n  nameWithType: Storyboard\n  fullName: System.Windows.Media.Animation.Storyboard\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard(Storyboard,HandoffBehavior)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)\n  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)\n- uid: System.Windows.Media.Animation.HandoffBehavior\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: HandoffBehavior\n  nameWithType: HandoffBehavior\n  fullName: System.Windows.Media.Animation.HandoffBehavior\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard(Storyboard,HandoffBehavior,Boolean)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)\n  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)\n- uid: System.Windows.FrameworkElement.BindingGroup\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BindingGroup\n  nameWithType: FrameworkElement.BindingGroup\n  fullName: System.Windows.FrameworkElement.BindingGroup\n- uid: System.Windows.Data.BindingGroup\n  parent: System.Windows.Data\n  isExternal: false\n  name: BindingGroup\n  nameWithType: BindingGroup\n  fullName: System.Windows.Data.BindingGroup\n- uid: System.Windows.FrameworkElement.BindingGroupProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BindingGroupProperty\n  nameWithType: FrameworkElement.BindingGroupProperty\n  fullName: System.Windows.FrameworkElement.BindingGroupProperty\n- uid: System.Windows.FrameworkElement.BringIntoView\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BringIntoView()\n  nameWithType: FrameworkElement.BringIntoView()\n  fullName: System.Windows.FrameworkElement.BringIntoView()\n- uid: System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BringIntoView(Rect)\n  nameWithType: FrameworkElement.BringIntoView(Rect)\n  fullName: System.Windows.FrameworkElement.BringIntoView(Rect)\n- uid: System.Windows.FrameworkElement.ContextMenu\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenu\n  nameWithType: FrameworkElement.ContextMenu\n  fullName: System.Windows.FrameworkElement.ContextMenu\n- uid: System.Windows.Controls.ContextMenu\n  parent: System.Windows.Controls\n  isExternal: false\n  name: ContextMenu\n  nameWithType: ContextMenu\n  fullName: System.Windows.Controls.ContextMenu\n- uid: System.Windows.FrameworkElement.ContextMenuClosing\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuClosing\n  nameWithType: FrameworkElement.ContextMenuClosing\n  fullName: System.Windows.FrameworkElement.ContextMenuClosing\n- uid: System.Windows.Controls.ContextMenuEventHandler\n  parent: System.Windows.Controls\n  isExternal: false\n  name: ContextMenuEventHandler\n  nameWithType: ContextMenuEventHandler\n  fullName: System.Windows.Controls.ContextMenuEventHandler\n- uid: System.Windows.FrameworkElement.ContextMenuClosingEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuClosingEvent\n  nameWithType: FrameworkElement.ContextMenuClosingEvent\n  fullName: System.Windows.FrameworkElement.ContextMenuClosingEvent\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Windows.FrameworkElement.ContextMenuOpening\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuOpening\n  nameWithType: FrameworkElement.ContextMenuOpening\n  fullName: System.Windows.FrameworkElement.ContextMenuOpening\n- uid: System.Windows.FrameworkElement.ContextMenuOpeningEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuOpeningEvent\n  nameWithType: FrameworkElement.ContextMenuOpeningEvent\n  fullName: System.Windows.FrameworkElement.ContextMenuOpeningEvent\n- uid: System.Windows.FrameworkElement.ContextMenuProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuProperty\n  nameWithType: FrameworkElement.ContextMenuProperty\n  fullName: System.Windows.FrameworkElement.ContextMenuProperty\n- uid: System.Windows.FrameworkElement.Cursor\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Cursor\n  nameWithType: FrameworkElement.Cursor\n  fullName: System.Windows.FrameworkElement.Cursor\n- uid: System.Windows.Input.Cursor\n  parent: System.Windows.Input\n  isExternal: false\n  name: Cursor\n  nameWithType: Cursor\n  fullName: System.Windows.Input.Cursor\n- uid: System.Windows.FrameworkElement.CursorProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: CursorProperty\n  nameWithType: FrameworkElement.CursorProperty\n  fullName: System.Windows.FrameworkElement.CursorProperty\n- uid: System.Windows.FrameworkElement.DataContext\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContext\n  nameWithType: FrameworkElement.DataContext\n  fullName: System.Windows.FrameworkElement.DataContext\n- uid: System.Windows.FrameworkElement.DataContextChanged\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContextChanged\n  nameWithType: FrameworkElement.DataContextChanged\n  fullName: System.Windows.FrameworkElement.DataContextChanged\n- uid: System.Windows.DependencyPropertyChangedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: DependencyPropertyChangedEventHandler\n  nameWithType: DependencyPropertyChangedEventHandler\n  fullName: System.Windows.DependencyPropertyChangedEventHandler\n- uid: System.Windows.FrameworkElement.DataContextProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContextProperty\n  nameWithType: FrameworkElement.DataContextProperty\n  fullName: System.Windows.FrameworkElement.DataContextProperty\n- uid: System.Windows.FrameworkElement.DefaultStyleKey\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DefaultStyleKey\n  nameWithType: FrameworkElement.DefaultStyleKey\n  fullName: System.Windows.FrameworkElement.DefaultStyleKey\n- uid: System.Windows.FrameworkElement.DefaultStyleKeyProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DefaultStyleKeyProperty\n  nameWithType: FrameworkElement.DefaultStyleKeyProperty\n  fullName: System.Windows.FrameworkElement.DefaultStyleKeyProperty\n- uid: System.Windows.FrameworkElement.EndInit\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: EndInit()\n  nameWithType: FrameworkElement.EndInit()\n  fullName: System.Windows.FrameworkElement.EndInit()\n- uid: System.Windows.FrameworkElement.FindName(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FindName(String)\n  nameWithType: FrameworkElement.FindName(String)\n  fullName: System.Windows.FrameworkElement.FindName(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.FrameworkElement.FindResource(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FindResource(Object)\n  nameWithType: FrameworkElement.FindResource(Object)\n  fullName: System.Windows.FrameworkElement.FindResource(Object)\n- uid: System.Windows.FrameworkElement.FlowDirection\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FlowDirection\n  nameWithType: FrameworkElement.FlowDirection\n  fullName: System.Windows.FrameworkElement.FlowDirection\n- uid: System.Windows.FlowDirection\n  parent: System.Windows\n  isExternal: false\n  name: FlowDirection\n  nameWithType: FlowDirection\n  fullName: System.Windows.FlowDirection\n- uid: System.Windows.FrameworkElement.FlowDirectionProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FlowDirectionProperty\n  nameWithType: FrameworkElement.FlowDirectionProperty\n  fullName: System.Windows.FrameworkElement.FlowDirectionProperty\n- uid: System.Windows.FrameworkElement.FocusVisualStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FocusVisualStyle\n  nameWithType: FrameworkElement.FocusVisualStyle\n  fullName: System.Windows.FrameworkElement.FocusVisualStyle\n- uid: System.Windows.Style\n  parent: System.Windows\n  isExternal: false\n  name: Style\n  nameWithType: Style\n  fullName: System.Windows.Style\n- uid: System.Windows.FrameworkElement.FocusVisualStyleProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FocusVisualStyleProperty\n  nameWithType: FrameworkElement.FocusVisualStyleProperty\n  fullName: System.Windows.FrameworkElement.FocusVisualStyleProperty\n- uid: System.Windows.FrameworkElement.ForceCursor\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ForceCursor\n  nameWithType: FrameworkElement.ForceCursor\n  fullName: System.Windows.FrameworkElement.ForceCursor\n- uid: System.Windows.FrameworkElement.ForceCursorProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ForceCursorProperty\n  nameWithType: FrameworkElement.ForceCursorProperty\n  fullName: System.Windows.FrameworkElement.ForceCursorProperty\n- uid: System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetBindingExpression(DependencyProperty)\n  nameWithType: FrameworkElement.GetBindingExpression(DependencyProperty)\n  fullName: System.Windows.FrameworkElement.GetBindingExpression(DependencyProperty)\n- uid: System.Windows.Data.BindingExpression\n  parent: System.Windows.Data\n  isExternal: false\n  name: BindingExpression\n  nameWithType: BindingExpression\n  fullName: System.Windows.Data.BindingExpression\n- uid: System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetFlowDirection(DependencyObject)\n  nameWithType: FrameworkElement.GetFlowDirection(DependencyObject)\n  fullName: System.Windows.FrameworkElement.GetFlowDirection(DependencyObject)\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetLayoutClip(Size)\n  nameWithType: FrameworkElement.GetLayoutClip(Size)\n  fullName: System.Windows.FrameworkElement.GetLayoutClip(Size)\n- uid: System.Windows.Media.Geometry\n  parent: System.Windows.Media\n  isExternal: false\n  name: Geometry\n  nameWithType: Geometry\n  fullName: System.Windows.Media.Geometry\n- uid: System.Windows.FrameworkElement.GetTemplateChild(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetTemplateChild(String)\n  nameWithType: FrameworkElement.GetTemplateChild(String)\n  fullName: System.Windows.FrameworkElement.GetTemplateChild(String)\n- uid: System.Windows.FrameworkElement.GetUIParentCore\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetUIParentCore()\n  nameWithType: FrameworkElement.GetUIParentCore()\n  fullName: System.Windows.FrameworkElement.GetUIParentCore()\n- uid: System.Windows.FrameworkElement.GetVisualChild(System.Int32)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetVisualChild(Int32)\n  nameWithType: FrameworkElement.GetVisualChild(Int32)\n  fullName: System.Windows.FrameworkElement.GetVisualChild(Int32)\n- uid: System.Windows.Media.Visual\n  parent: System.Windows.Media\n  isExternal: false\n  name: Visual\n  nameWithType: Visual\n  fullName: System.Windows.Media.Visual\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.FrameworkElement.Height\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Height\n  nameWithType: FrameworkElement.Height\n  fullName: System.Windows.FrameworkElement.Height\n- uid: System.Windows.FrameworkElement.HeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HeightProperty\n  nameWithType: FrameworkElement.HeightProperty\n  fullName: System.Windows.FrameworkElement.HeightProperty\n- uid: System.Windows.FrameworkElement.HorizontalAlignment\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HorizontalAlignment\n  nameWithType: FrameworkElement.HorizontalAlignment\n  fullName: System.Windows.FrameworkElement.HorizontalAlignment\n- uid: System.Windows.HorizontalAlignment\n  parent: System.Windows\n  isExternal: false\n  name: HorizontalAlignment\n  nameWithType: HorizontalAlignment\n  fullName: System.Windows.HorizontalAlignment\n- uid: System.Windows.FrameworkElement.HorizontalAlignmentProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HorizontalAlignmentProperty\n  nameWithType: FrameworkElement.HorizontalAlignmentProperty\n  fullName: System.Windows.FrameworkElement.HorizontalAlignmentProperty\n- uid: System.Windows.FrameworkElement.InheritanceBehavior\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InheritanceBehavior\n  nameWithType: FrameworkElement.InheritanceBehavior\n  fullName: System.Windows.FrameworkElement.InheritanceBehavior\n- uid: System.Windows.InheritanceBehavior\n  parent: System.Windows\n  isExternal: false\n  name: InheritanceBehavior\n  nameWithType: InheritanceBehavior\n  fullName: System.Windows.InheritanceBehavior\n- uid: System.Windows.FrameworkElement.Initialized\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Initialized\n  nameWithType: FrameworkElement.Initialized\n  fullName: System.Windows.FrameworkElement.Initialized\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.FrameworkElement.InputScope\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InputScope\n  nameWithType: FrameworkElement.InputScope\n  fullName: System.Windows.FrameworkElement.InputScope\n- uid: System.Windows.Input.InputScope\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputScope\n  nameWithType: InputScope\n  fullName: System.Windows.Input.InputScope\n- uid: System.Windows.FrameworkElement.InputScopeProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InputScopeProperty\n  nameWithType: FrameworkElement.InputScopeProperty\n  fullName: System.Windows.FrameworkElement.InputScopeProperty\n- uid: System.Windows.FrameworkElement.IsInitialized\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IsInitialized\n  nameWithType: FrameworkElement.IsInitialized\n  fullName: System.Windows.FrameworkElement.IsInitialized\n- uid: System.Windows.FrameworkElement.IsLoaded\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IsLoaded\n  nameWithType: FrameworkElement.IsLoaded\n  fullName: System.Windows.FrameworkElement.IsLoaded\n- uid: System.Windows.FrameworkElement.Language\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Language\n  nameWithType: FrameworkElement.Language\n  fullName: System.Windows.FrameworkElement.Language\n- uid: System.Windows.Markup.XmlLanguage\n  parent: System.Windows.Markup\n  isExternal: false\n  name: XmlLanguage\n  nameWithType: XmlLanguage\n  fullName: System.Windows.Markup.XmlLanguage\n- uid: System.Windows.FrameworkElement.LanguageProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LanguageProperty\n  nameWithType: FrameworkElement.LanguageProperty\n  fullName: System.Windows.FrameworkElement.LanguageProperty\n- uid: System.Windows.FrameworkElement.LayoutTransform\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LayoutTransform\n  nameWithType: FrameworkElement.LayoutTransform\n  fullName: System.Windows.FrameworkElement.LayoutTransform\n- uid: System.Windows.Media.Transform\n  parent: System.Windows.Media\n  isExternal: false\n  name: Transform\n  nameWithType: Transform\n  fullName: System.Windows.Media.Transform\n- uid: System.Windows.FrameworkElement.LayoutTransformProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LayoutTransformProperty\n  nameWithType: FrameworkElement.LayoutTransformProperty\n  fullName: System.Windows.FrameworkElement.LayoutTransformProperty\n- uid: System.Windows.FrameworkElement.Loaded\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Loaded\n  nameWithType: FrameworkElement.Loaded\n  fullName: System.Windows.FrameworkElement.Loaded\n- uid: System.Windows.RoutedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventHandler\n  nameWithType: RoutedEventHandler\n  fullName: System.Windows.RoutedEventHandler\n- uid: System.Windows.FrameworkElement.LoadedEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LoadedEvent\n  nameWithType: FrameworkElement.LoadedEvent\n  fullName: System.Windows.FrameworkElement.LoadedEvent\n- uid: System.Windows.FrameworkElement.LogicalChildren\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LogicalChildren\n  nameWithType: FrameworkElement.LogicalChildren\n  fullName: System.Windows.FrameworkElement.LogicalChildren\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.FrameworkElement.Margin\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Margin\n  nameWithType: FrameworkElement.Margin\n  fullName: System.Windows.FrameworkElement.Margin\n- uid: System.Windows.Thickness\n  parent: System.Windows\n  isExternal: false\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n- uid: System.Windows.FrameworkElement.MarginProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MarginProperty\n  nameWithType: FrameworkElement.MarginProperty\n  fullName: System.Windows.FrameworkElement.MarginProperty\n- uid: System.Windows.FrameworkElement.MaxHeight\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxHeight\n  nameWithType: FrameworkElement.MaxHeight\n  fullName: System.Windows.FrameworkElement.MaxHeight\n- uid: System.Windows.FrameworkElement.MaxHeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxHeightProperty\n  nameWithType: FrameworkElement.MaxHeightProperty\n  fullName: System.Windows.FrameworkElement.MaxHeightProperty\n- uid: System.Windows.FrameworkElement.MaxWidth\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxWidth\n  nameWithType: FrameworkElement.MaxWidth\n  fullName: System.Windows.FrameworkElement.MaxWidth\n- uid: System.Windows.FrameworkElement.MaxWidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxWidthProperty\n  nameWithType: FrameworkElement.MaxWidthProperty\n  fullName: System.Windows.FrameworkElement.MaxWidthProperty\n- uid: System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MeasureCore(Size)\n  nameWithType: FrameworkElement.MeasureCore(Size)\n  fullName: System.Windows.FrameworkElement.MeasureCore(Size)\n- uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MeasureOverride(Size)\n  nameWithType: FrameworkElement.MeasureOverride(Size)\n  fullName: System.Windows.FrameworkElement.MeasureOverride(Size)\n- uid: System.Windows.FrameworkElement.MinHeight\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinHeight\n  nameWithType: FrameworkElement.MinHeight\n  fullName: System.Windows.FrameworkElement.MinHeight\n- uid: System.Windows.FrameworkElement.MinHeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinHeightProperty\n  nameWithType: FrameworkElement.MinHeightProperty\n  fullName: System.Windows.FrameworkElement.MinHeightProperty\n- uid: System.Windows.FrameworkElement.MinWidth\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinWidth\n  nameWithType: FrameworkElement.MinWidth\n  fullName: System.Windows.FrameworkElement.MinWidth\n- uid: System.Windows.FrameworkElement.MinWidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinWidthProperty\n  nameWithType: FrameworkElement.MinWidthProperty\n  fullName: System.Windows.FrameworkElement.MinWidthProperty\n- uid: System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MoveFocus(TraversalRequest)\n  nameWithType: FrameworkElement.MoveFocus(TraversalRequest)\n  fullName: System.Windows.FrameworkElement.MoveFocus(TraversalRequest)\n- uid: System.Windows.Input.TraversalRequest\n  parent: System.Windows.Input\n  isExternal: false\n  name: TraversalRequest\n  nameWithType: TraversalRequest\n  fullName: System.Windows.Input.TraversalRequest\n- uid: System.Windows.FrameworkElement.Name\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Name\n  nameWithType: FrameworkElement.Name\n  fullName: System.Windows.FrameworkElement.Name\n- uid: System.Windows.FrameworkElement.NameProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: NameProperty\n  nameWithType: FrameworkElement.NameProperty\n  fullName: System.Windows.FrameworkElement.NameProperty\n- uid: System.Windows.FrameworkElement.OnApplyTemplate\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnApplyTemplate()\n  nameWithType: FrameworkElement.OnApplyTemplate()\n  fullName: System.Windows.FrameworkElement.OnApplyTemplate()\n- uid: System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnContextMenuClosing(ContextMenuEventArgs)\n  nameWithType: FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)\n  fullName: System.Windows.FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)\n- uid: System.Windows.Controls.ContextMenuEventArgs\n  parent: System.Windows.Controls\n  isExternal: false\n  name: ContextMenuEventArgs\n  nameWithType: ContextMenuEventArgs\n  fullName: System.Windows.Controls.ContextMenuEventArgs\n- uid: System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnContextMenuOpening(ContextMenuEventArgs)\n  nameWithType: FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)\n  fullName: System.Windows.FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)\n- uid: System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: FrameworkElement.OnGotFocus(RoutedEventArgs)\n  fullName: System.Windows.FrameworkElement.OnGotFocus(RoutedEventArgs)\n- uid: System.Windows.RoutedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventArgs\n  nameWithType: RoutedEventArgs\n  fullName: System.Windows.RoutedEventArgs\n- uid: System.Windows.FrameworkElement.OnInitialized(System.EventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnInitialized(EventArgs)\n  nameWithType: FrameworkElement.OnInitialized(EventArgs)\n  fullName: System.Windows.FrameworkElement.OnInitialized(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyPropertyChangedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: DependencyPropertyChangedEventArgs\n  nameWithType: DependencyPropertyChangedEventArgs\n  fullName: System.Windows.DependencyPropertyChangedEventArgs\n- uid: System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnRenderSizeChanged(SizeChangedInfo)\n  nameWithType: FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)\n  fullName: System.Windows.FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)\n- uid: System.Windows.SizeChangedInfo\n  parent: System.Windows\n  isExternal: false\n  name: SizeChangedInfo\n  nameWithType: SizeChangedInfo\n  fullName: System.Windows.SizeChangedInfo\n- uid: System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnStyleChanged(Style,Style)\n  nameWithType: FrameworkElement.OnStyleChanged(Style,Style)\n  fullName: System.Windows.FrameworkElement.OnStyleChanged(Style,Style)\n- uid: System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnToolTipClosing(ToolTipEventArgs)\n  nameWithType: FrameworkElement.OnToolTipClosing(ToolTipEventArgs)\n  fullName: System.Windows.FrameworkElement.OnToolTipClosing(ToolTipEventArgs)\n- uid: System.Windows.Controls.ToolTipEventArgs\n  parent: System.Windows.Controls\n  isExternal: false\n  name: ToolTipEventArgs\n  nameWithType: ToolTipEventArgs\n  fullName: System.Windows.Controls.ToolTipEventArgs\n- uid: System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnToolTipOpening(ToolTipEventArgs)\n  nameWithType: FrameworkElement.OnToolTipOpening(ToolTipEventArgs)\n  fullName: System.Windows.FrameworkElement.OnToolTipOpening(ToolTipEventArgs)\n- uid: System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnVisualParentChanged(DependencyObject)\n  nameWithType: FrameworkElement.OnVisualParentChanged(DependencyObject)\n  fullName: System.Windows.FrameworkElement.OnVisualParentChanged(DependencyObject)\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OverridesDefaultStyle\n  nameWithType: FrameworkElement.OverridesDefaultStyle\n  fullName: System.Windows.FrameworkElement.OverridesDefaultStyle\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OverridesDefaultStyleProperty\n  nameWithType: FrameworkElement.OverridesDefaultStyleProperty\n  fullName: System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n- uid: System.Windows.FrameworkElement.Parent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Parent\n  nameWithType: FrameworkElement.Parent\n  fullName: System.Windows.FrameworkElement.Parent\n- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ParentLayoutInvalidated(UIElement)\n  nameWithType: FrameworkElement.ParentLayoutInvalidated(UIElement)\n  fullName: System.Windows.FrameworkElement.ParentLayoutInvalidated(UIElement)\n- uid: System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: FrameworkElement.PredictFocus(FocusNavigationDirection)\n  fullName: System.Windows.FrameworkElement.PredictFocus(FocusNavigationDirection)\n- uid: System.Windows.Input.FocusNavigationDirection\n  parent: System.Windows.Input\n  isExternal: false\n  name: FocusNavigationDirection\n  nameWithType: FocusNavigationDirection\n  fullName: System.Windows.Input.FocusNavigationDirection\n- uid: System.Windows.FrameworkElement.RegisterName(System.String,System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RegisterName(String,Object)\n  nameWithType: FrameworkElement.RegisterName(String,Object)\n  fullName: System.Windows.FrameworkElement.RegisterName(String,Object)\n- uid: System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RemoveLogicalChild(Object)\n  nameWithType: FrameworkElement.RemoveLogicalChild(Object)\n  fullName: System.Windows.FrameworkElement.RemoveLogicalChild(Object)\n- uid: System.Windows.FrameworkElement.RequestBringIntoView\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RequestBringIntoView\n  nameWithType: FrameworkElement.RequestBringIntoView\n  fullName: System.Windows.FrameworkElement.RequestBringIntoView\n- uid: System.Windows.RequestBringIntoViewEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: RequestBringIntoViewEventHandler\n  nameWithType: RequestBringIntoViewEventHandler\n  fullName: System.Windows.RequestBringIntoViewEventHandler\n- uid: System.Windows.FrameworkElement.RequestBringIntoViewEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RequestBringIntoViewEvent\n  nameWithType: FrameworkElement.RequestBringIntoViewEvent\n  fullName: System.Windows.FrameworkElement.RequestBringIntoViewEvent\n- uid: System.Windows.FrameworkElement.Resources\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Resources\n  nameWithType: FrameworkElement.Resources\n  fullName: System.Windows.FrameworkElement.Resources\n- uid: System.Windows.ResourceDictionary\n  parent: System.Windows\n  isExternal: false\n  name: ResourceDictionary\n  nameWithType: ResourceDictionary\n  fullName: System.Windows.ResourceDictionary\n- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetBinding(DependencyProperty,String)\n  nameWithType: FrameworkElement.SetBinding(DependencyProperty,String)\n  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,String)\n- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetBinding(DependencyProperty,BindingBase)\n  nameWithType: FrameworkElement.SetBinding(DependencyProperty,BindingBase)\n  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,BindingBase)\n- uid: System.Windows.Data.BindingExpressionBase\n  parent: System.Windows.Data\n  isExternal: false\n  name: BindingExpressionBase\n  nameWithType: BindingExpressionBase\n  fullName: System.Windows.Data.BindingExpressionBase\n- uid: System.Windows.Data.BindingBase\n  parent: System.Windows.Data\n  isExternal: false\n  name: BindingBase\n  nameWithType: BindingBase\n  fullName: System.Windows.Data.BindingBase\n- uid: System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetFlowDirection(DependencyObject,FlowDirection)\n  nameWithType: FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)\n  fullName: System.Windows.FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)\n- uid: System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetResourceReference(DependencyProperty,Object)\n  nameWithType: FrameworkElement.SetResourceReference(DependencyProperty,Object)\n  fullName: System.Windows.FrameworkElement.SetResourceReference(DependencyProperty,Object)\n- uid: System.Windows.FrameworkElement.ShouldSerializeResources\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeResources()\n  nameWithType: FrameworkElement.ShouldSerializeResources()\n  fullName: System.Windows.FrameworkElement.ShouldSerializeResources()\n- uid: System.Windows.FrameworkElement.ShouldSerializeStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeStyle()\n  nameWithType: FrameworkElement.ShouldSerializeStyle()\n  fullName: System.Windows.FrameworkElement.ShouldSerializeStyle()\n- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeTriggers()\n  nameWithType: FrameworkElement.ShouldSerializeTriggers()\n  fullName: System.Windows.FrameworkElement.ShouldSerializeTriggers()\n- uid: System.Windows.FrameworkElement.SizeChanged\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SizeChanged\n  nameWithType: FrameworkElement.SizeChanged\n  fullName: System.Windows.FrameworkElement.SizeChanged\n- uid: System.Windows.SizeChangedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: SizeChangedEventHandler\n  nameWithType: SizeChangedEventHandler\n  fullName: System.Windows.SizeChangedEventHandler\n- uid: System.Windows.FrameworkElement.SizeChangedEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SizeChangedEvent\n  nameWithType: FrameworkElement.SizeChangedEvent\n  fullName: System.Windows.FrameworkElement.SizeChangedEvent\n- uid: System.Windows.FrameworkElement.SourceUpdated\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SourceUpdated\n  nameWithType: FrameworkElement.SourceUpdated\n  fullName: System.Windows.FrameworkElement.SourceUpdated\n- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<DataTransferEventArgs>\n  nameWithType: EventHandler<DataTransferEventArgs>\n  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Data.DataTransferEventArgs\n    name: DataTransferEventArgs\n    nameWithType: DataTransferEventArgs\n    fullName: DataTransferEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.FrameworkElement.Style\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Style\n  nameWithType: FrameworkElement.Style\n  fullName: System.Windows.FrameworkElement.Style\n- uid: System.Windows.FrameworkElement.StyleProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: StyleProperty\n  nameWithType: FrameworkElement.StyleProperty\n  fullName: System.Windows.FrameworkElement.StyleProperty\n- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)\n  nameWithType: FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)\n  fullName: System.Windows.FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)\n- uid: System.Windows.FrameworkElement.Tag\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Tag\n  nameWithType: FrameworkElement.Tag\n  fullName: System.Windows.FrameworkElement.Tag\n- uid: System.Windows.FrameworkElement.TagProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TagProperty\n  nameWithType: FrameworkElement.TagProperty\n  fullName: System.Windows.FrameworkElement.TagProperty\n- uid: System.Windows.FrameworkElement.TargetUpdated\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TargetUpdated\n  nameWithType: FrameworkElement.TargetUpdated\n  fullName: System.Windows.FrameworkElement.TargetUpdated\n- uid: System.Windows.FrameworkElement.TemplatedParent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TemplatedParent\n  nameWithType: FrameworkElement.TemplatedParent\n  fullName: System.Windows.FrameworkElement.TemplatedParent\n- uid: System.Windows.FrameworkElement.ToolTip\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTip\n  nameWithType: FrameworkElement.ToolTip\n  fullName: System.Windows.FrameworkElement.ToolTip\n- uid: System.Windows.FrameworkElement.ToolTipClosing\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipClosing\n  nameWithType: FrameworkElement.ToolTipClosing\n  fullName: System.Windows.FrameworkElement.ToolTipClosing\n- uid: System.Windows.Controls.ToolTipEventHandler\n  parent: System.Windows.Controls\n  isExternal: false\n  name: ToolTipEventHandler\n  nameWithType: ToolTipEventHandler\n  fullName: System.Windows.Controls.ToolTipEventHandler\n- uid: System.Windows.FrameworkElement.ToolTipClosingEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipClosingEvent\n  nameWithType: FrameworkElement.ToolTipClosingEvent\n  fullName: System.Windows.FrameworkElement.ToolTipClosingEvent\n- uid: System.Windows.FrameworkElement.ToolTipOpening\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipOpening\n  nameWithType: FrameworkElement.ToolTipOpening\n  fullName: System.Windows.FrameworkElement.ToolTipOpening\n- uid: System.Windows.FrameworkElement.ToolTipOpeningEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipOpeningEvent\n  nameWithType: FrameworkElement.ToolTipOpeningEvent\n  fullName: System.Windows.FrameworkElement.ToolTipOpeningEvent\n- uid: System.Windows.FrameworkElement.ToolTipProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipProperty\n  nameWithType: FrameworkElement.ToolTipProperty\n  fullName: System.Windows.FrameworkElement.ToolTipProperty\n- uid: System.Windows.FrameworkElement.Triggers\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Triggers\n  nameWithType: FrameworkElement.Triggers\n  fullName: System.Windows.FrameworkElement.Triggers\n- uid: System.Windows.TriggerCollection\n  parent: System.Windows\n  isExternal: false\n  name: TriggerCollection\n  nameWithType: TriggerCollection\n  fullName: System.Windows.TriggerCollection\n- uid: System.Windows.FrameworkElement.TryFindResource(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TryFindResource(Object)\n  nameWithType: FrameworkElement.TryFindResource(Object)\n  fullName: System.Windows.FrameworkElement.TryFindResource(Object)\n- uid: System.Windows.FrameworkElement.Unloaded\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Unloaded\n  nameWithType: FrameworkElement.Unloaded\n  fullName: System.Windows.FrameworkElement.Unloaded\n- uid: System.Windows.FrameworkElement.UnloadedEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UnloadedEvent\n  nameWithType: FrameworkElement.UnloadedEvent\n  fullName: System.Windows.FrameworkElement.UnloadedEvent\n- uid: System.Windows.FrameworkElement.UnregisterName(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UnregisterName(String)\n  nameWithType: FrameworkElement.UnregisterName(String)\n  fullName: System.Windows.FrameworkElement.UnregisterName(String)\n- uid: System.Windows.FrameworkElement.UpdateDefaultStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UpdateDefaultStyle()\n  nameWithType: FrameworkElement.UpdateDefaultStyle()\n  fullName: System.Windows.FrameworkElement.UpdateDefaultStyle()\n- uid: System.Windows.FrameworkElement.UseLayoutRounding\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UseLayoutRounding\n  nameWithType: FrameworkElement.UseLayoutRounding\n  fullName: System.Windows.FrameworkElement.UseLayoutRounding\n- uid: System.Windows.FrameworkElement.UseLayoutRoundingProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UseLayoutRoundingProperty\n  nameWithType: FrameworkElement.UseLayoutRoundingProperty\n  fullName: System.Windows.FrameworkElement.UseLayoutRoundingProperty\n- uid: System.Windows.FrameworkElement.VerticalAlignment\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VerticalAlignment\n  nameWithType: FrameworkElement.VerticalAlignment\n  fullName: System.Windows.FrameworkElement.VerticalAlignment\n- uid: System.Windows.VerticalAlignment\n  parent: System.Windows\n  isExternal: false\n  name: VerticalAlignment\n  nameWithType: VerticalAlignment\n  fullName: System.Windows.VerticalAlignment\n- uid: System.Windows.FrameworkElement.VerticalAlignmentProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VerticalAlignmentProperty\n  nameWithType: FrameworkElement.VerticalAlignmentProperty\n  fullName: System.Windows.FrameworkElement.VerticalAlignmentProperty\n- uid: System.Windows.FrameworkElement.VisualChildrenCount\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VisualChildrenCount\n  nameWithType: FrameworkElement.VisualChildrenCount\n  fullName: System.Windows.FrameworkElement.VisualChildrenCount\n- uid: System.Windows.FrameworkElement.Width\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Width\n  nameWithType: FrameworkElement.Width\n  fullName: System.Windows.FrameworkElement.Width\n- uid: System.Windows.FrameworkElement.WidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: WidthProperty\n  nameWithType: FrameworkElement.WidthProperty\n  fullName: System.Windows.FrameworkElement.WidthProperty\n- uid: System.Windows.FrameworkElement.#ctor*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FrameworkElement\n  nameWithType: FrameworkElement.FrameworkElement\n- uid: System.Windows.FrameworkElement.ActualHeight*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualHeight\n  nameWithType: FrameworkElement.ActualHeight\n- uid: System.Windows.FrameworkElement.ActualWidth*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualWidth\n  nameWithType: FrameworkElement.ActualWidth\n- uid: System.Windows.FrameworkElement.AddLogicalChild*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: AddLogicalChild\n  nameWithType: FrameworkElement.AddLogicalChild\n- uid: System.Windows.FrameworkElement.ApplyTemplate*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ApplyTemplate\n  nameWithType: FrameworkElement.ApplyTemplate\n- uid: System.Windows.FrameworkElement.ArrangeCore*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ArrangeCore\n  nameWithType: FrameworkElement.ArrangeCore\n- uid: System.Windows.FrameworkElement.ArrangeOverride*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ArrangeOverride\n  nameWithType: FrameworkElement.ArrangeOverride\n- uid: System.Windows.FrameworkElement.BeginInit*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginInit\n  nameWithType: FrameworkElement.BeginInit\n- uid: System.Windows.FrameworkElement.BeginStoryboard*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard\n  nameWithType: FrameworkElement.BeginStoryboard\n- uid: System.Windows.FrameworkElement.BindingGroup*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BindingGroup\n  nameWithType: FrameworkElement.BindingGroup\n- uid: System.Windows.FrameworkElement.BringIntoView*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BringIntoView\n  nameWithType: FrameworkElement.BringIntoView\n- uid: System.Windows.FrameworkElement.ContextMenu*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenu\n  nameWithType: FrameworkElement.ContextMenu\n- uid: System.Windows.FrameworkElement.Cursor*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Cursor\n  nameWithType: FrameworkElement.Cursor\n- uid: System.Windows.FrameworkElement.DataContext*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContext\n  nameWithType: FrameworkElement.DataContext\n- uid: System.Windows.FrameworkElement.DefaultStyleKey*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DefaultStyleKey\n  nameWithType: FrameworkElement.DefaultStyleKey\n- uid: System.Windows.FrameworkElement.EndInit*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: EndInit\n  nameWithType: FrameworkElement.EndInit\n- uid: System.Windows.FrameworkElement.FindName*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FindName\n  nameWithType: FrameworkElement.FindName\n- uid: System.Windows.FrameworkElement.FindResource*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FindResource\n  nameWithType: FrameworkElement.FindResource\n- uid: System.Windows.FrameworkElement.FlowDirection*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FlowDirection\n  nameWithType: FrameworkElement.FlowDirection\n- uid: System.Windows.FrameworkElement.FocusVisualStyle*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FocusVisualStyle\n  nameWithType: FrameworkElement.FocusVisualStyle\n- uid: System.Windows.FrameworkElement.ForceCursor*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ForceCursor\n  nameWithType: FrameworkElement.ForceCursor\n- uid: System.Windows.FrameworkElement.GetBindingExpression*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetBindingExpression\n  nameWithType: FrameworkElement.GetBindingExpression\n- uid: System.Windows.FrameworkElement.GetFlowDirection*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetFlowDirection\n  nameWithType: FrameworkElement.GetFlowDirection\n- uid: System.Windows.FrameworkElement.GetLayoutClip*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetLayoutClip\n  nameWithType: FrameworkElement.GetLayoutClip\n- uid: System.Windows.FrameworkElement.GetTemplateChild*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetTemplateChild\n  nameWithType: FrameworkElement.GetTemplateChild\n- uid: System.Windows.FrameworkElement.GetUIParentCore*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetUIParentCore\n  nameWithType: FrameworkElement.GetUIParentCore\n- uid: System.Windows.FrameworkElement.GetVisualChild*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetVisualChild\n  nameWithType: FrameworkElement.GetVisualChild\n- uid: System.Windows.FrameworkElement.Height*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Height\n  nameWithType: FrameworkElement.Height\n- uid: System.Windows.FrameworkElement.HorizontalAlignment*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HorizontalAlignment\n  nameWithType: FrameworkElement.HorizontalAlignment\n- uid: System.Windows.FrameworkElement.InheritanceBehavior*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InheritanceBehavior\n  nameWithType: FrameworkElement.InheritanceBehavior\n- uid: System.Windows.FrameworkElement.InputScope*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InputScope\n  nameWithType: FrameworkElement.InputScope\n- uid: System.Windows.FrameworkElement.IsInitialized*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IsInitialized\n  nameWithType: FrameworkElement.IsInitialized\n- uid: System.Windows.FrameworkElement.IsLoaded*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IsLoaded\n  nameWithType: FrameworkElement.IsLoaded\n- uid: System.Windows.FrameworkElement.Language*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Language\n  nameWithType: FrameworkElement.Language\n- uid: System.Windows.FrameworkElement.LayoutTransform*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LayoutTransform\n  nameWithType: FrameworkElement.LayoutTransform\n- uid: System.Windows.FrameworkElement.LogicalChildren*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LogicalChildren\n  nameWithType: FrameworkElement.LogicalChildren\n- uid: System.Windows.FrameworkElement.Margin*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Margin\n  nameWithType: FrameworkElement.Margin\n- uid: System.Windows.FrameworkElement.MaxHeight*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxHeight\n  nameWithType: FrameworkElement.MaxHeight\n- uid: System.Windows.FrameworkElement.MaxWidth*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxWidth\n  nameWithType: FrameworkElement.MaxWidth\n- uid: System.Windows.FrameworkElement.MeasureCore*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MeasureCore\n  nameWithType: FrameworkElement.MeasureCore\n- uid: System.Windows.FrameworkElement.MeasureOverride*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MeasureOverride\n  nameWithType: FrameworkElement.MeasureOverride\n- uid: System.Windows.FrameworkElement.MinHeight*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinHeight\n  nameWithType: FrameworkElement.MinHeight\n- uid: System.Windows.FrameworkElement.MinWidth*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinWidth\n  nameWithType: FrameworkElement.MinWidth\n- uid: System.Windows.FrameworkElement.MoveFocus*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MoveFocus\n  nameWithType: FrameworkElement.MoveFocus\n- uid: System.Windows.FrameworkElement.Name*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Name\n  nameWithType: FrameworkElement.Name\n- uid: System.Windows.FrameworkElement.OnApplyTemplate*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnApplyTemplate\n  nameWithType: FrameworkElement.OnApplyTemplate\n- uid: System.Windows.FrameworkElement.OnContextMenuClosing*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnContextMenuClosing\n  nameWithType: FrameworkElement.OnContextMenuClosing\n- uid: System.Windows.FrameworkElement.OnContextMenuOpening*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnContextMenuOpening\n  nameWithType: FrameworkElement.OnContextMenuOpening\n- uid: System.Windows.FrameworkElement.OnGotFocus*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnGotFocus\n  nameWithType: FrameworkElement.OnGotFocus\n- uid: System.Windows.FrameworkElement.OnInitialized*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnInitialized\n  nameWithType: FrameworkElement.OnInitialized\n- uid: System.Windows.FrameworkElement.OnPropertyChanged*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnPropertyChanged\n  nameWithType: FrameworkElement.OnPropertyChanged\n- uid: System.Windows.FrameworkElement.OnRenderSizeChanged*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnRenderSizeChanged\n  nameWithType: FrameworkElement.OnRenderSizeChanged\n- uid: System.Windows.FrameworkElement.OnStyleChanged*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnStyleChanged\n  nameWithType: FrameworkElement.OnStyleChanged\n- uid: System.Windows.FrameworkElement.OnToolTipClosing*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnToolTipClosing\n  nameWithType: FrameworkElement.OnToolTipClosing\n- uid: System.Windows.FrameworkElement.OnToolTipOpening*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnToolTipOpening\n  nameWithType: FrameworkElement.OnToolTipOpening\n- uid: System.Windows.FrameworkElement.OnVisualParentChanged*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnVisualParentChanged\n  nameWithType: FrameworkElement.OnVisualParentChanged\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyle*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OverridesDefaultStyle\n  nameWithType: FrameworkElement.OverridesDefaultStyle\n- uid: System.Windows.FrameworkElement.Parent*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Parent\n  nameWithType: FrameworkElement.Parent\n- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ParentLayoutInvalidated\n  nameWithType: FrameworkElement.ParentLayoutInvalidated\n- uid: System.Windows.FrameworkElement.PredictFocus*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: PredictFocus\n  nameWithType: FrameworkElement.PredictFocus\n- uid: System.Windows.FrameworkElement.RegisterName*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RegisterName\n  nameWithType: FrameworkElement.RegisterName\n- uid: System.Windows.FrameworkElement.RemoveLogicalChild*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RemoveLogicalChild\n  nameWithType: FrameworkElement.RemoveLogicalChild\n- uid: System.Windows.FrameworkElement.Resources*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Resources\n  nameWithType: FrameworkElement.Resources\n- uid: System.Windows.FrameworkElement.SetBinding*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetBinding\n  nameWithType: FrameworkElement.SetBinding\n- uid: System.Windows.FrameworkElement.SetFlowDirection*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetFlowDirection\n  nameWithType: FrameworkElement.SetFlowDirection\n- uid: System.Windows.FrameworkElement.SetResourceReference*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetResourceReference\n  nameWithType: FrameworkElement.SetResourceReference\n- uid: System.Windows.FrameworkElement.ShouldSerializeResources*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeResources\n  nameWithType: FrameworkElement.ShouldSerializeResources\n- uid: System.Windows.FrameworkElement.ShouldSerializeStyle*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeStyle\n  nameWithType: FrameworkElement.ShouldSerializeStyle\n- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeTriggers\n  nameWithType: FrameworkElement.ShouldSerializeTriggers\n- uid: System.Windows.FrameworkElement.Style*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Style\n  nameWithType: FrameworkElement.Style\n- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable\n  nameWithType: FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable\n- uid: System.Windows.FrameworkElement.Tag*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Tag\n  nameWithType: FrameworkElement.Tag\n- uid: System.Windows.FrameworkElement.TemplatedParent*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TemplatedParent\n  nameWithType: FrameworkElement.TemplatedParent\n- uid: System.Windows.FrameworkElement.ToolTip*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTip\n  nameWithType: FrameworkElement.ToolTip\n- uid: System.Windows.FrameworkElement.Triggers*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Triggers\n  nameWithType: FrameworkElement.Triggers\n- uid: System.Windows.FrameworkElement.TryFindResource*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TryFindResource\n  nameWithType: FrameworkElement.TryFindResource\n- uid: System.Windows.FrameworkElement.UnregisterName*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UnregisterName\n  nameWithType: FrameworkElement.UnregisterName\n- uid: System.Windows.FrameworkElement.UpdateDefaultStyle*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UpdateDefaultStyle\n  nameWithType: FrameworkElement.UpdateDefaultStyle\n- uid: System.Windows.FrameworkElement.UseLayoutRounding*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UseLayoutRounding\n  nameWithType: FrameworkElement.UseLayoutRounding\n- uid: System.Windows.FrameworkElement.VerticalAlignment*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VerticalAlignment\n  nameWithType: FrameworkElement.VerticalAlignment\n- uid: System.Windows.FrameworkElement.VisualChildrenCount*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VisualChildrenCount\n  nameWithType: FrameworkElement.VisualChildrenCount\n- uid: System.Windows.FrameworkElement.Width*\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Width\n  nameWithType: FrameworkElement.Width\n"}