{"nodes":[{"pos":[890,1000],"content":"Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.","pos":[0,110]}]},{"pos":[1012,1183],"content":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of &lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter&gt;.","pos":[0,171],"source":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>."}]},{"pos":[1925,2036],"content":"Initializes a new instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref>."},{"pos":[2049,2520],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","pos":[0,469],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]},{"content":"Use implementations of &lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A&gt; and &lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A&gt; to set the key and hash algorithm before calling an implementation of &lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A&gt;.","pos":[122,469],"source":"       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."}]}]},{"pos":[3252,3347],"content":"When overridden in a derived class, sets the hash algorithm to use for verifying the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, sets the hash algorithm to use for verifying the signature.","pos":[0,95]}]},{"pos":[3359,3511],"content":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must set a hash algorithm before calling an implementation of &lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A&gt;.","pos":[0,152],"source":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."}]},{"pos":[3670,3736],"content":"The name of the hash algorithm to use for verifying the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the hash algorithm to use for verifying the signature.","pos":[0,66]}]},{"pos":[4450,4541],"content":"When overridden in a derived class, sets the public key to use for verifying the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, sets the public key to use for verifying the signature.","pos":[0,91]}]},{"pos":[4553,4694],"content":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must set a key before calling an implementation of &lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A&gt;.","pos":[0,141],"source":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."}]},{"pos":[4912,5045],"content":"The instance of an implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the public key.","needQuote":true,"needEscape":true,"source":"The instance of an implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that holds the public key."},{"pos":[5734,5816],"content":"When overridden in a derived class, verifies the signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, verifies the signature for the specified data.","pos":[0,82]}]},{"pos":[5828,5906],"content":"You must specify a public key and a hash algorithm before calling this method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must specify a public key and a hash algorithm before calling this method.","pos":[0,78]}]},{"pos":[6085,6121],"content":"The data signed with <ph id=\"ph1\">`rgbSignature`</ph>.","needQuote":true,"needEscape":true,"source":"The data signed with `rgbSignature`."},{"pos":[6190,6233],"content":"The signature to be verified for <ph id=\"ph1\">`rgbHash`</ph>.","needQuote":true,"needEscape":true,"source":"The signature to be verified for `rgbHash`."},{"pos":[6292,6555],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p2\">&lt;/code&gt;</ept> matches the signature computed using the specified hash algorithm and key on <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">rgbHash</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7332,7385],"content":"Verifies the signature from the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies the signature from the specified hash value.","pos":[0,53]}]},{"pos":[7397,7509],"content":"This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.","pos":[0,112]}]},{"pos":[7746,7796],"content":"The hash algorithm to use to verify the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to verify the signature.","pos":[0,50]}]},{"pos":[7865,7894],"content":"The signature to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature to be verified.","pos":[0,29]}]},{"pos":[7953,8128],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid for the hash; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid for the hash; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8334,8430],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>hash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  id: AsymmetricSignatureDeformatter\n  children:\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  langs:\n  - csharp\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  type: Class\n  summary: Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.\n  remarks: Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class AsymmetricSignatureDeformatter\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: AsymmetricSignatureDeformatter()\n  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref>.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.\"\n  syntax:\n    content: protected AsymmetricSignatureDeformatter ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  id: SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the hash algorithm to use for verifying the signature.\n  remarks: You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.\n  syntax:\n    content: public abstract void SetHashAlgorithm (string strName);\n    parameters:\n    - id: strName\n      type: System.String\n      description: The name of the hash algorithm to use for verifying the signature.\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the public key to use for verifying the signature.\n  remarks: You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.\n  syntax:\n    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The instance of an implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that holds the public key.\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, verifies the signature for the specified data.\n  remarks: You must specify a public key and a hash algorithm before calling this method.\n  syntax:\n    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data signed with `rgbSignature`.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified for `rgbHash`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  id: VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: VerifySignature(HashAlgorithm,Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies the signature from the specified hash value.\n  remarks: This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.\n  syntax:\n    content: public virtual bool VerifySignature (System.Security.Cryptography.HashAlgorithm hash, byte[] rgbSignature);\n    parameters:\n    - id: hash\n      type: System.Security.Cryptography.HashAlgorithm\n      description: The hash algorithm to use to verify the signature.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid for the hash; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: AsymmetricSignatureDeformatter()\n  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: VerifySignature(HashAlgorithm,Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetHashAlgorithm\n  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetKey\n  nameWithType: AsymmetricSignatureDeformatter.SetKey\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: VerifySignature\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature\n"}