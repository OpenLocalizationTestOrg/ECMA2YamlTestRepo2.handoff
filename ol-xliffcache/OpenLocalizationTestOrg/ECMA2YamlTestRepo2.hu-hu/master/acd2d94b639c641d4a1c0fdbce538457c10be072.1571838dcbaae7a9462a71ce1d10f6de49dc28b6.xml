{"nodes":[{"pos":[1382,1544],"content":"Represents a reflection context that has associated conventions that describe rules for decorating entities with Managed Extensibility Framework (MEF) attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a reflection context that has associated conventions that describe rules for decorating entities with Managed Extensibility Framework (MEF) attributes.","pos":[0,162]}]},{"pos":[3156,3284],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Registration.RegistrationBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Registration.RegistrationBuilder\"></xref> class."},{"pos":[4019,4092],"content":"Gets an object that represents a rule that applies to the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that represents a rule that applies to the specified type.","pos":[0,73]}]},{"pos":[4277,4286],"content":"The type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type.","pos":[0,9]}]},{"pos":[4389,4424],"content":"An object that represents the rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the rule.","pos":[0,35]}]},{"pos":[5275,5287],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6014,6152],"content":"Gets an object that represents a rule applicable to all types that implement the specified type, but not applicable to the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that represents a rule applicable to all types that implement the specified type, but not applicable to the specified type.","pos":[0,138]}]},{"pos":[6349,6358],"content":"The type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type.","pos":[0,9]}]},{"pos":[6461,6496],"content":"An object that represents the rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the rule.","pos":[0,35]}]},{"pos":[7431,7443],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8236,8333],"content":"Gets an object that represents a rule applicable to all types that match the specified predicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that represents a rule applicable to all types that match the specified predicate.","pos":[0,97]}]},{"pos":[8568,8591],"content":"The predicate to match.","needQuote":true,"needEscape":true,"nodes":[{"content":"The predicate to match.","pos":[0,23]}]},{"pos":[8694,8729],"content":"An object that represents the rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the rule.","pos":[0,35]}]},{"pos":[9755,9767],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9872,9884],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10840,10945],"content":"Provides a list of custom attributes for the specified member, as represented in this reflection context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a list of custom attributes for the specified member, as represented in this reflection context.","pos":[0,105]}]},{"pos":[11254,11306],"content":"The member whose custom attributes will be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The member whose custom attributes will be returned.","pos":[0,52]}]},{"pos":[11421,11484],"content":"A collection of the member's attributes in its current context.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of the member's attributes in its current context.","pos":[0,63]}]},{"pos":[11582,11684],"content":"A collection that represents the custom attributes of the specified member in this reflection context.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that represents the custom attributes of the specified member in this reflection context.","pos":[0,102]}]},{"pos":[12655,12763],"content":"Provides a list of custom attributes for the specified parameter, as represented in this reflection context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a list of custom attributes for the specified parameter, as represented in this reflection context.","pos":[0,108]}]},{"pos":[13084,13139],"content":"The parameter whose custom attributes will be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter whose custom attributes will be returned.","pos":[0,55]}]},{"pos":[13254,13320],"content":"A collection of the parameter's attributes in its current context.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of the parameter's attributes in its current context.","pos":[0,66]}]},{"pos":[13418,13523],"content":"A collection that represents the custom attributes of the specified parameter in this reflection context.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that represents the custom attributes of the specified parameter in this reflection context.","pos":[0,105]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  id: RegistrationBuilder\n  children:\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.``0ype})\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})\n  - System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})\n  langs:\n  - csharp\n  name: RegistrationBuilder\n  nameWithType: RegistrationBuilder\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  type: Class\n  summary: Represents a reflection context that has associated conventions that describe rules for decorating entities with Managed Extensibility Framework (MEF) attributes.\n  syntax:\n    content: 'public class RegistrationBuilder : System.Reflection.Context.CustomReflectionContext'\n  inheritance:\n  - System.Reflection.ReflectionContext\n  - System.Reflection.Context.CustomReflectionContext\n  implements: []\n  inheritedMembers:\n  - System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)\n  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})\n  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})\n  - System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)\n  - System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: RegistrationBuilder()\n  nameWithType: RegistrationBuilder.RegistrationBuilder()\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.RegistrationBuilder()\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Registration.RegistrationBuilder\"></xref> class.\n  syntax:\n    content: public RegistrationBuilder ();\n    parameters: []\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)\n  id: ForType(System.Type)\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: ForType(Type)\n  nameWithType: RegistrationBuilder.ForType(Type)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(Type)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  summary: Gets an object that represents a rule that applies to the specified type.\n  syntax:\n    content: public System.ComponentModel.Composition.Registration.PartBuilder ForType (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type.\n    return:\n      type: System.ComponentModel.Composition.Registration.PartBuilder\n      description: An object that represents the rule.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1\n  id: ForType``1\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: ForType()\n  nameWithType: RegistrationBuilder.ForType()\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  syntax:\n    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ForType<T> ();\n    parameters: []\n    return:\n      type: System.ComponentModel.Composition.Registration.PartBuilder`1\n      description: To be added.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)\n  id: ForTypesDerivedFrom(System.Type)\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: ForTypesDerivedFrom(Type)\n  nameWithType: RegistrationBuilder.ForTypesDerivedFrom(Type)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(Type)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  summary: Gets an object that represents a rule applicable to all types that implement the specified type, but not applicable to the specified type.\n  syntax:\n    content: public System.ComponentModel.Composition.Registration.PartBuilder ForTypesDerivedFrom (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type.\n    return:\n      type: System.ComponentModel.Composition.Registration.PartBuilder\n      description: An object that represents the rule.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1\n  id: ForTypesDerivedFrom``1\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: ForTypesDerivedFrom()\n  nameWithType: RegistrationBuilder.ForTypesDerivedFrom()\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  syntax:\n    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ForTypesDerivedFrom<T> ();\n    parameters: []\n    return:\n      type: System.ComponentModel.Composition.Registration.PartBuilder`1\n      description: To be added.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})\n  id: ForTypesMatching(System.Predicate{System.Type})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: ForTypesMatching(Predicate<Type>)\n  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  summary: Gets an object that represents a rule applicable to all types that match the specified predicate.\n  syntax:\n    content: public System.ComponentModel.Composition.Registration.PartBuilder ForTypesMatching (Predicate<Type> typeFilter);\n    parameters:\n    - id: typeFilter\n      type: System.Predicate{System.Type}\n      description: The predicate to match.\n    return:\n      type: System.ComponentModel.Composition.Registration.PartBuilder\n      description: An object that represents the rule.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.``0ype})\n  id: ForTypesMatching``1(System.Predicate{System.``0ype})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: ForTypesMatching(Predicate<Type>)\n  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  syntax:\n    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ForTypesMatching<T> (Predicate<Type> typeFilter);\n    parameters:\n    - id: typeFilter\n      type: System.Predicate{System.Type}\n      description: To be added.\n    return:\n      type: System.ComponentModel.Composition.Registration.PartBuilder`1\n      description: To be added.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})\n  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)\n  nameWithType: RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  summary: Provides a list of custom attributes for the specified member, as represented in this reflection context.\n  syntax:\n    content: protected override System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<object> declaredAttributes);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The member whose custom attributes will be returned.\n    - id: declaredAttributes\n      type: System.Collections.Generic.IEnumerable{System.Object}\n      description: A collection of the member's attributes in its current context.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Object}\n      description: A collection that represents the custom attributes of the specified member in this reflection context.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})\n  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)\n  nameWithType: RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition.Registration\n  namespace: System.ComponentModel.Composition.Registration\n  summary: Provides a list of custom attributes for the specified parameter, as represented in this reflection context.\n  syntax:\n    content: protected override System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.ParameterInfo parameter, System.Collections.Generic.IEnumerable<object> declaredAttributes);\n    parameters:\n    - id: parameter\n      type: System.Reflection.ParameterInfo\n      description: The parameter whose custom attributes will be returned.\n    - id: declaredAttributes\n      type: System.Collections.Generic.IEnumerable{System.Object}\n      description: A collection of the parameter's attributes in its current context.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Object}\n      description: A collection that represents the custom attributes of the specified parameter in this reflection context.\n  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Reflection.Context.CustomReflectionContext\n  isExternal: false\n  name: System.Reflection.Context.CustomReflectionContext\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: RegistrationBuilder()\n  nameWithType: RegistrationBuilder.RegistrationBuilder()\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.RegistrationBuilder()\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForType(Type)\n  nameWithType: RegistrationBuilder.ForType(Type)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(Type)\n- uid: System.ComponentModel.Composition.Registration.PartBuilder\n  parent: System.ComponentModel.Composition.Registration\n  isExternal: false\n  name: PartBuilder\n  nameWithType: PartBuilder\n  fullName: System.ComponentModel.Composition.Registration.PartBuilder\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForType()\n  nameWithType: RegistrationBuilder.ForType()\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType()\n- uid: System.ComponentModel.Composition.Registration.PartBuilder`1\n  parent: System.ComponentModel.Composition.Registration\n  isExternal: false\n  name: PartBuilder<T>\n  nameWithType: PartBuilder<T>\n  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesDerivedFrom(Type)\n  nameWithType: RegistrationBuilder.ForTypesDerivedFrom(Type)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(Type)\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesDerivedFrom()\n  nameWithType: RegistrationBuilder.ForTypesDerivedFrom()\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom()\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesMatching(Predicate<Type>)\n  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n- uid: System.Predicate{System.Type}\n  parent: System\n  isExternal: true\n  name: Predicate<Type>\n  nameWithType: Predicate<Type>\n  fullName: System.Predicate<System.Type>\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: Predicate<System.Type>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: Type\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.``0ype})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesMatching(Predicate<Type>)\n  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)\n  nameWithType: RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)\n- uid: System.Collections.Generic.IEnumerable{System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Object>\n  nameWithType: IEnumerable<Object>\n  fullName: System.Collections.Generic.IEnumerable<System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: true\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)\n  nameWithType: RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)\n  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)\n- uid: System.Reflection.ParameterInfo\n  parent: System.Reflection\n  isExternal: true\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: RegistrationBuilder\n  nameWithType: RegistrationBuilder.RegistrationBuilder\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForType\n  nameWithType: RegistrationBuilder.ForType\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType<T>*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForType<T>\n  nameWithType: RegistrationBuilder.ForType<T>\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesDerivedFrom\n  nameWithType: RegistrationBuilder.ForTypesDerivedFrom\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom<T>*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesDerivedFrom<T>\n  nameWithType: RegistrationBuilder.ForTypesDerivedFrom<T>\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesMatching\n  nameWithType: RegistrationBuilder.ForTypesMatching\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching<T>*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: ForTypesMatching<T>\n  nameWithType: RegistrationBuilder.ForTypesMatching<T>\n- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes*\n  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: RegistrationBuilder.GetCustomAttributes\n"}