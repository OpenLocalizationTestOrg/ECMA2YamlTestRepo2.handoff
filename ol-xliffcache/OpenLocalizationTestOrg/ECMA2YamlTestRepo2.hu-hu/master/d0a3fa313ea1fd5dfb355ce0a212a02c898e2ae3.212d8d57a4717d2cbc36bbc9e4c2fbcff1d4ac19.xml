{"nodes":[{"pos":[443,518],"content":"Defines the contract that HTTP asynchronous handler objects must implement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the contract that HTTP asynchronous handler objects must implement.","pos":[0,75]}]},{"pos":[530,959],"content":"An IHttpAsyncHandler class can be associated with a file name extension or a particular URL by a configuration file, in the `httpHandlers` configuration section. The ASP.NET infrastructure will then instantiate and call the handler when the corresponding request is received. Alternatively, the handler can be defined in an .ashx file and when the corresponding request is received for the .ashx file the hander will be executed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An IHttpAsyncHandler class can be associated with a file name extension or a particular URL by a configuration file, in the <ph id=\"ph1\">`httpHandlers`</ph> configuration section.","pos":[0,161],"source":"An IHttpAsyncHandler class can be associated with a file name extension or a particular URL by a configuration file, in the `httpHandlers` configuration section."},{"content":"The ASP.NET infrastructure will then instantiate and call the handler when the corresponding request is received.","pos":[162,275]},{"content":"Alternatively, the handler can be defined in an .ashx file and when the corresponding request is received for the .ashx file the hander will be executed.","pos":[276,429]}]},{"pos":[1694,1745],"content":"Initiates an asynchronous call to the HTTP handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initiates an asynchronous call to the HTTP handler.","pos":[0,51]}]},{"pos":[1967,2394],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides references to intrinsic server objects (for example, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Request\" name=\"Request\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Response\" name=\"Response\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_Session\" name=\"Session\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, and <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_Server\" name=\"Server\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>) used to service HTTP requests.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpContext\"></xref> object that provides references to intrinsic server objects (for example, <xref uid=\"langword_csharp_Request\" name=\"Request\" href=\"\"></xref>, <xref uid=\"langword_csharp_Response\" name=\"Response\" href=\"\"></xref>, <xref uid=\"langword_csharp_Session\" name=\"Session\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Server\" name=\"Server\" href=\"\"></xref>) used to service HTTP requests."},{"pos":[2460,2647],"content":"The <xref:System.AsyncCallback> to call when the asynchronous method call is complete. If `cb` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; to call when the asynchronous method call is complete.","pos":[0,86],"source":"The <xref:System.AsyncCallback> to call when the asynchronous method call is complete."},{"content":"If <ph id=\"ph1\">`cb`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the delegate is not called.","pos":[87,187],"source":" If `cb` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called."}]},{"pos":[2713,2758],"content":"Any extra data needed to process the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any extra data needed to process the request.","pos":[0,45]}]},{"pos":[2822,2910],"content":"An <xref:System.IAsyncResult> that contains information about the status of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that contains information about the status of the process.","pos":[0,88],"source":"An <xref:System.IAsyncResult> that contains information about the status of the process."}]},{"pos":[3450,3516],"content":"Provides an asynchronous process End method when the process ends.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an asynchronous process End method when the process ends.","pos":[0,66]}]},{"pos":[3528,3621],"content":"You can use EndProcessRequest to raise any exceptions caught during the asynchronous process.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use EndProcessRequest to raise any exceptions caught during the asynchronous process.","pos":[0,93]}]},{"pos":[3782,3870],"content":"An <xref:System.IAsyncResult> that contains information about the status of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that contains information about the status of the process.","pos":[0,88],"source":"An <xref:System.IAsyncResult> that contains information about the status of the process."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.IHttpAsyncHandler\n  id: IHttpAsyncHandler\n  children:\n  - System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  - System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)\n  langs:\n  - csharp\n  name: IHttpAsyncHandler\n  nameWithType: IHttpAsyncHandler\n  fullName: System.Web.IHttpAsyncHandler\n  type: Interface\n  summary: Defines the contract that HTTP asynchronous handler objects must implement.\n  remarks: An IHttpAsyncHandler class can be associated with a file name extension or a particular URL by a configuration file, in the `httpHandlers` configuration section. The ASP.NET infrastructure will then instantiate and call the handler when the corresponding request is received. Alternatively, the handler can be defined in an .ashx file and when the corresponding request is received for the .ashx file the hander will be executed.\n  syntax:\n    content: 'public interface IHttpAsyncHandler : System.Web.IHttpHandler'\n  implements:\n  - System.Web.IHttpHandler\n  platform:\n  - net462\n- uid: System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  id: BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  parent: System.Web.IHttpAsyncHandler\n  langs:\n  - csharp\n  name: BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  nameWithType: IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  fullName: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Initiates an asynchronous call to the HTTP handler.\n  syntax:\n    content: public IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: An <xref href=\"System.Web.HttpContext\"></xref> object that provides references to intrinsic server objects (for example, <xref uid=\"langword_csharp_Request\" name=\"Request\" href=\"\"></xref>, <xref uid=\"langword_csharp_Response\" name=\"Response\" href=\"\"></xref>, <xref uid=\"langword_csharp_Session\" name=\"Session\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Server\" name=\"Server\" href=\"\"></xref>) used to service HTTP requests.\n    - id: cb\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> to call when the asynchronous method call is complete. If `cb` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called.\n    - id: extraData\n      type: System.Object\n      description: Any extra data needed to process the request.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that contains information about the status of the process.\n  overload: System.Web.IHttpAsyncHandler.BeginProcessRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)\n  id: EndProcessRequest(System.IAsyncResult)\n  parent: System.Web.IHttpAsyncHandler\n  langs:\n  - csharp\n  name: EndProcessRequest(IAsyncResult)\n  nameWithType: IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  fullName: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Provides an asynchronous process End method when the process ends.\n  remarks: You can use EndProcessRequest to raise any exceptions caught during the asynchronous process.\n  syntax:\n    content: public void EndProcessRequest (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that contains information about the status of the process.\n  overload: System.Web.IHttpAsyncHandler.EndProcessRequest*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  parent: System.Web.IHttpAsyncHandler\n  isExternal: false\n  name: BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  nameWithType: IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  fullName: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Web.HttpContext\n  parent: System.Web\n  isExternal: false\n  name: HttpContext\n  nameWithType: HttpContext\n  fullName: System.Web.HttpContext\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)\n  parent: System.Web.IHttpAsyncHandler\n  isExternal: false\n  name: EndProcessRequest(IAsyncResult)\n  nameWithType: IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  fullName: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n- uid: System.Web.IHttpAsyncHandler.BeginProcessRequest*\n  parent: System.Web.IHttpAsyncHandler\n  isExternal: false\n  name: BeginProcessRequest\n  nameWithType: IHttpAsyncHandler.BeginProcessRequest\n- uid: System.Web.IHttpAsyncHandler.EndProcessRequest*\n  parent: System.Web.IHttpAsyncHandler\n  isExternal: false\n  name: EndProcessRequest\n  nameWithType: IHttpAsyncHandler.EndProcessRequest\n"}