{"nodes":[{"pos":[1168,1180],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2755,2767],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3382,3394],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4115,4127],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4844,4856],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4912,4924],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5689,5701],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5754,5766],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6398,6410],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7145,7157],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7903,7915],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7968,7980],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.KeyedByTypeCollection`1\n  id: KeyedByTypeCollection`1\n  children:\n  - System.Collections.Generic.KeyedByTypeCollection`1.#ctor\n  - System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.KeyedByTypeCollection`1.Find``1\n  - System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1\n  - System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)\n  - System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)\n  - System.Collections.Generic.KeyedByTypeCollection`1.Remove``1\n  - System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1\n  - System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)\n  langs:\n  - csharp\n  name: KeyedByTypeCollection<TItem>\n  nameWithType: KeyedByTypeCollection<TItem>\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>\n  type: Class\n  syntax:\n    content: 'public class KeyedByTypeCollection<TItem> : System.Collections.ObjectModel.KeyedCollection<Type,TItem>'\n    typeParameters:\n    - id: TItem\n      description: To be added.\n  inheritance:\n  - System.Collections.ObjectModel.KeyedCollection`2\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: KeyedByTypeCollection()\n  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public KeyedByTypeCollection ();\n    parameters: []\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: KeyedByTypeCollection(IEnumerable<TItem>)\n  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public KeyedByTypeCollection (System.Collections.Generic.IEnumerable<TItem> items);\n    parameters:\n    - id: items\n      type: System.Collections.Generic.IEnumerable{TItem}\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find``1\n  id: Find``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: Find()\n  nameWithType: KeyedByTypeCollection<TItem>.Find()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Find()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T Find<T> ();\n    parameters: []\n    return:\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.Find<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1\n  id: FindAll``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: FindAll()\n  nameWithType: KeyedByTypeCollection<TItem>.FindAll()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.FindAll()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<T> FindAll<T> ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.Collection{T}\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.FindAll<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)\n  id: GetKeyForItem(`0)\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: GetKeyForItem(TItem)\n  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override Type GetKeyForItem (TItem item);\n    parameters:\n    - id: item\n      type: TItem\n      description: To be added.\n    return:\n      type: System.Type\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)\n  id: InsertItem(System.Int32,`0)\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: InsertItem(Int32,TItem)\n  nameWithType: KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override void InsertItem (int index, TItem item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: TItem\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove``1\n  id: Remove``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: Remove()\n  nameWithType: KeyedByTypeCollection<TItem>.Remove()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Remove()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T Remove<T> ();\n    parameters: []\n    return:\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.Remove<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1\n  id: RemoveAll``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: RemoveAll()\n  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.RemoveAll()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<T> RemoveAll<T> ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.Collection{T}\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)\n  id: SetItem(System.Int32,`0)\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  langs:\n  - csharp\n  name: SetItem(Int32,TItem)\n  nameWithType: KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected override void SetItem (int index, TItem item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: TItem\n      description: To be added.\n  overload: System.Collections.Generic.KeyedByTypeCollection`1.SetItem*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Collections.ObjectModel.KeyedCollection`2\n  isExternal: false\n  name: System.Collections.ObjectModel.KeyedCollection<System.Type,TItem>\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: KeyedByTypeCollection()\n  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection()\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: KeyedByTypeCollection(IEnumerable<TItem>)\n  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)\n- uid: System.Collections.Generic.IEnumerable{TItem}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<TItem>\n  nameWithType: IEnumerable<TItem>\n  fullName: System.Collections.Generic.IEnumerable<TItem>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<TItem>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TItem\n    name: TItem\n    nameWithType: TItem\n    fullName: TItem\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: Find()\n  nameWithType: KeyedByTypeCollection<TItem>.Find()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Find()\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: FindAll()\n  nameWithType: KeyedByTypeCollection<TItem>.FindAll()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.FindAll()\n- uid: System.Collections.ObjectModel.Collection{T}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: Collection<T>\n  nameWithType: Collection<T>\n  fullName: System.Collections.ObjectModel.Collection<T>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: Collection<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: GetKeyForItem(TItem)\n  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: TItem\n  isExternal: true\n  name: TItem\n  nameWithType: TItem\n  fullName: TItem\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: InsertItem(Int32,TItem)\n  nameWithType: KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: Remove()\n  nameWithType: KeyedByTypeCollection<TItem>.Remove()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Remove()\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: RemoveAll()\n  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll()\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.RemoveAll()\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: SetItem(Int32,TItem)\n  nameWithType: KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)\n  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: KeyedByTypeCollection<TItem>\n  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find<T>*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: Find<T>\n  nameWithType: KeyedByTypeCollection<TItem>.Find<T>\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll<T>*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: FindAll<T>\n  nameWithType: KeyedByTypeCollection<TItem>.FindAll<T>\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: GetKeyForItem\n  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: InsertItem\n  nameWithType: KeyedByTypeCollection<TItem>.InsertItem\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove<T>*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: Remove<T>\n  nameWithType: KeyedByTypeCollection<TItem>.Remove<T>\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll<T>*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: RemoveAll<T>\n  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll<T>\n- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem*\n  parent: System.Collections.Generic.KeyedByTypeCollection`1\n  isExternal: false\n  name: SetItem\n  nameWithType: KeyedByTypeCollection<TItem>.SetItem\n"}