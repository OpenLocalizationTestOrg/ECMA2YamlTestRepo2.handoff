{"nodes":[{"pos":[370,487],"content":"Provides text and status information on recognition operations to be displayed in the Speech platform user interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides text and status information on recognition operations to be displayed in the Speech platform user interface.","pos":[0,117]}]},{"pos":[499,725],"content":"The members of the SpeechUI class can be used to indicate exact feedback to the end user through the speech recognition user interface. An application can return arbitrary text and success/failure information using this class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The members of the SpeechUI class can be used to indicate exact feedback to the end user through the speech recognition user interface. An application can return arbitrary text and success/failure information using this class.","pos":[0,226],"nodes":[{"content":"The members of the SpeechUI class can be used to indicate exact feedback to the end user through the speech recognition user interface.","pos":[0,135]},{"content":"An application can return arbitrary text and success/failure information using this class.","pos":[136,226]}]}]},{"pos":[3076,3192],"content":"Sends status and descriptive text to the Speech platform user interface about the status of a recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends status and descriptive text to the Speech platform user interface about the status of a recognition operation.","pos":[0,116]}]},{"pos":[3205,3492],"content":"SendTextFeedback can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.       An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"SendTextFeedback can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.       An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.","pos":[0,285],"nodes":[{"content":"SendTextFeedback can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.","pos":[0,136]},{"content":"An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.","pos":[143,285]}]}]},{"pos":[5300,5382],"content":"A valid <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.RecognitionResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"A valid <xref href=\"System.Speech.Recognition.RecognitionResult\"></xref> instance."},{"pos":[5447,5614],"content":"A &lt;xref:System.String&gt; containing a comment about the recognition operation that produced the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.RecognitionResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">`result`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> containing a comment about the recognition operation that produced the <xref href=\"System.Speech.Recognition.RecognitionResult\"></xref>`result`."},{"pos":[5690,5831],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_bool\" name=\"bool\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicating whether the application deemed the recognition operation a success.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_bool\" name=\"bool\" href=\"\"></xref> indicating whether the application deemed the recognition operation a success."},{"pos":[5890,6216],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the information provided to the method (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">Feedback</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">isSuccessfulAction</ph><ept id=\"p3\">&lt;/code&gt;</ept>) was successfully made available to the Speech platform user interface, and <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> if the operation failed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the information provided to the method (<code>Feedback</code>, and <code>isSuccessfulAction</code>) was successfully made available to the Speech platform user interface, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the operation failed."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.SpeechUI\n  id: SpeechUI\n  children:\n  - System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)\n  langs:\n  - csharp\n  name: SpeechUI\n  nameWithType: SpeechUI\n  fullName: System.Speech.Recognition.SpeechUI\n  type: Class\n  summary: Provides text and status information on recognition operations to be displayed in the Speech platform user interface.\n  remarks: The members of the SpeechUI class can be used to indicate exact feedback to the end user through the speech recognition user interface. An application can return arbitrary text and success/failure information using this class.\n  example:\n  - \"The following example is a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input in the form \\\"My password is …\\\".  \\n  \\n If a password is not present, or not valid, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> sends error information to the Speech platform user interface.  \\n  \\n```  \\n  \\ngrammar.SpeechRecognized +=   \\ndelegate(object sender, SpeechRecognizedEventArgs eventArgs)   \\n{  \\n  SemanticValue semantics = eventArgs.Result.Semantics;  \\n  RecognitionResult result=eventArgs.Result;  \\n  \\n  if (!semantics.ContainsKey(\\\"Password\\\"))   \\n  {  \\n    SpeechUI.SendTextFeedback(eventArgs.Result, \\\"No Password Provided\\\", false);  \\n  }  \\n  else   \\n  {  \\n    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \\n                  result.Words[3],  \\n                  result.Words[result.Words.Count - 1]);  \\n    MemoryStream pwdMemoryStream = new MemoryStream();  \\n    pwdAudio.WriteToAudioStream(pwdMemoryStream);  \\n    if (!IsValidPwd(pwdMemoryStream))   \\n    {  \\n      string badPwd = System.IO.Path.GetTempPath() +   \\n              \\\"BadPwd\\\" + (new Random()).Next().ToString() + \\\".wav\\\";  \\n      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \\n      pwdAudio.WriteToWaveStream(waveStream);  \\n      waveStream.Flush();  \\n      waveStream.Close();  \\n      SpeechUI.SendTextFeedback(eventArgs.Result, \\\"Invalid Password\\\", false);  \\n    }  \\n  }  \\n};  \\n```\"\n  syntax:\n    content: public class SpeechUI\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)\n  id: SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)\n  parent: System.Speech.Recognition.SpeechUI\n  langs:\n  - csharp\n  name: SendTextFeedback(RecognitionResult,String,Boolean)\n  nameWithType: SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)\n  fullName: System.Speech.Recognition.SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Sends status and descriptive text to the Speech platform user interface about the status of a recognition operation.\n  remarks: \"SendTextFeedback can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.  \\n  \\n An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.\"\n  example:\n  - \"The following example is a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input of the form, \\\"My password is …\\\".  \\n  \\n If a password is not present, or not valid, **SendTextFeedback** is used to send error information to the Speech platform user interface.  \\n  \\n```  \\n  \\ngrammar.SpeechRecognized +=  \\ndelegate(object sender, SpeechRecognizedEventArgs eventArgs)   \\n{  \\n  SemanticValue semantics = eventArgs.Result.Semantics;  \\n  RecognitionResult result=eventArgs.Result;  \\n  \\n  if (!semantics.ContainsKey(\\\"Password\\\"))   \\n  {  \\n    SpeechUI.SendTextFeedback(eventArgs.Result, \\\"No Password Provided\\\", false);  \\n  }  \\n  else  \\n  {  \\n    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \\n              result.Words[3],  \\n              result.Words[result.Words.Count - 1]);  \\n    MemoryStream pwdMemoryStream = new MemoryStream();  \\n    pwdAudio.WriteToAudioStream(pwdMemoryStream);  \\n    if (!IsValidPwd(pwdMemoryStream))   \\n    {  \\n      string badPwd = System.IO.Path.GetTempPath() + \\\"BadPwd\\\" +   \\n               (new Random()).Next().ToString() + \\\".wav\\\";  \\n      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \\n      pwdAudio.WriteToWaveStream(waveStream);  \\n      waveStream.Flush();  \\n      waveStream.Close();  \\n      SpeechUI.SendTextFeedback(eventArgs.Result, \\\"Invalid Password\\\", false);  \\n    }  \\n  }  \\n};  \\n```\"\n  syntax:\n    content: public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);\n    parameters:\n    - id: result\n      type: System.Speech.Recognition.RecognitionResult\n      description: A valid <xref href=\"System.Speech.Recognition.RecognitionResult\"></xref> instance.\n    - id: feedback\n      type: System.String\n      description: A <xref:System.String> containing a comment about the recognition operation that produced the <xref href=\"System.Speech.Recognition.RecognitionResult\"></xref>`result`.\n    - id: isSuccessfulAction\n      type: System.Boolean\n      description: A <xref uid=\"langword_csharp_bool\" name=\"bool\" href=\"\"></xref> indicating whether the application deemed the recognition operation a success.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the information provided to the method (<code>Feedback</code>, and <code>isSuccessfulAction</code>) was successfully made available to the Speech platform user interface, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the operation failed.\n  overload: System.Speech.Recognition.SpeechUI.SendTextFeedback*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)\n  parent: System.Speech.Recognition.SpeechUI\n  isExternal: false\n  name: SendTextFeedback(RecognitionResult,String,Boolean)\n  nameWithType: SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)\n  fullName: System.Speech.Recognition.SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.Recognition.RecognitionResult\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognitionResult\n  nameWithType: RecognitionResult\n  fullName: System.Speech.Recognition.RecognitionResult\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback*\n  parent: System.Speech.Recognition.SpeechUI\n  isExternal: false\n  name: SendTextFeedback\n  nameWithType: SpeechUI.SendTextFeedback\n"}