{"nodes":[{"pos":[2422,2519],"content":"Represents the Windows access control security for a named mutex. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the Windows access control security for a named mutex. This class cannot be inherited.","pos":[0,97],"nodes":[{"content":"Represents the Windows access control security for a named mutex.","pos":[0,65]},{"content":"This class cannot be inherited.","pos":[66,97]}]}]},{"pos":[2532,7103],"content":"A MutexSecurity object specifies access rights for a named system mutex, and also specifies how access attempts are audited. Access rights to the mutex are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.MutexAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.MutexAuditRule> object.       This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.MutexAccessRule> or <xref:System.Security.AccessControl.MutexAuditRule> object might represent more than one ACE.      > [!NOTE] >  A <xref:System.Threading.Mutex> object can represent a local mutex or a named system mutex. Windows access control security is meaningful only for named system mutexes.       The MutexSecurity, <xref:System.Security.AccessControl.MutexAccessRule>, and <xref:System.Security.AccessControl.MutexAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:      -   Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new MutexSecurity object always starts with an empty DACL, which denies all access for all users.      -   Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. MutexSecurity objects maintain the correct order internally.      -   Manipulating security descriptor flags, which should be under resource manager control only.      -   Creating invalid combinations of ACE flags.      -   Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.      -   Inserting meaningless ACEs into ACLs.       The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:      -   Low-level tasks that are normally performed by the resource manager.      -   Adding or removing access control entries in ways that do not maintain the canonical ordering.       To modify Windows access control security for a named mutex, use the <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> method to get the MutexSecurity object. Modify the security object by adding and removing rules, and then use the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method to reattach it.      > [!IMPORTANT] >  Changes you make to a MutexSecurity object do not affect the access levels of the named mutex until you call the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named mutex.       To copy access control security from one mutex to another, use the <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> method to get a MutexSecurity object representing the access and audit rules for the first mutex, and then use the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method, or a constructor that accepts a MutexSecurity object, to assign those rules to the second mutex.       Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a named mutex, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.      > [!NOTE] >  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A MutexSecurity object specifies access rights for a named system mutex, and also specifies how access attempts are audited.","pos":[0,124]},{"content":"Access rights to the mutex are expressed as rules, with each access rule represented by a &lt;xref:System.Security.AccessControl.MutexAccessRule&gt; object.","pos":[125,275],"source":" Access rights to the mutex are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.MutexAccessRule> object."},{"content":"Each auditing rule is represented by a &lt;xref:System.Security.AccessControl.MutexAuditRule&gt; object.","pos":[276,374],"source":" Each auditing rule is represented by a <xref:System.Security.AccessControl.MutexAuditRule> object."},{"content":"This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.","pos":[381,665]},{"content":"The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.","pos":[666,788]},{"content":"A &lt;xref:System.Security.AccessControl.MutexAccessRule&gt; or &lt;xref:System.Security.AccessControl.MutexAuditRule&gt; object might represent more than one ACE.","pos":[789,940],"source":" A <xref:System.Security.AccessControl.MutexAccessRule> or <xref:System.Security.AccessControl.MutexAuditRule> object might represent more than one ACE."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A &lt;xref:System.Threading.Mutex&gt; object can represent a local mutex or a named system mutex.","pos":[946,1050],"source":"      > [!NOTE] >  A <xref:System.Threading.Mutex> object can represent a local mutex or a named system mutex."},{"content":"Windows access control security is meaningful only for named system mutexes.","pos":[1051,1127]},{"content":"The MutexSecurity, &lt;xref:System.Security.AccessControl.MutexAccessRule&gt;, and &lt;xref:System.Security.AccessControl.MutexAuditRule&gt; classes hide the implementation details of ACLs and ACEs.","pos":[1134,1320],"source":"       The MutexSecurity, <xref:System.Security.AccessControl.MutexAccessRule>, and <xref:System.Security.AccessControl.MutexAuditRule> classes hide the implementation details of ACLs and ACEs."},{"content":"They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.","pos":[1321,1469]},{"content":"These objects are also designed to prevent the following common access control errors:      -   Creating a security descriptor with a null DACL.","pos":[1470,1614]},{"content":"A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.","pos":[1615,1740]},{"content":"A new MutexSecurity object always starts with an empty DACL, which denies all access for all users.","pos":[1741,1840]},{"content":"-   Violating the canonical ordering of ACEs.","pos":[1846,1891]},{"content":"If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.","pos":[1892,2020]},{"content":"For example, denied access rights must always appear before allowed access rights.","pos":[2021,2103]},{"content":"MutexSecurity objects maintain the correct order internally.","pos":[2104,2164]},{"content":"-   Manipulating security descriptor flags, which should be under resource manager control only.","pos":[2170,2266]},{"content":"-   Creating invalid combinations of ACE flags.","pos":[2272,2319]},{"content":"-   Manipulating inherited ACEs.","pos":[2325,2357]},{"content":"Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.","pos":[2358,2481]},{"content":"-   Inserting meaningless ACEs into ACLs.","pos":[2487,2528]},{"content":"The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:      -   Low-level tasks that are normally performed by the resource manager.","pos":[2535,2791]},{"content":"-   Adding or removing access control entries in ways that do not maintain the canonical ordering.","pos":[2797,2895]},{"content":"To modify Windows access control security for a named mutex, use the &lt;xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName&gt; method to get the MutexSecurity object.","pos":[2902,3085],"source":"       To modify Windows access control security for a named mutex, use the <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> method to get the MutexSecurity object."},{"content":"Modify the security object by adding and removing rules, and then use the &lt;xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName&gt; method to reattach it.","pos":[3086,3257],"source":" Modify the security object by adding and removing rules, and then use the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method to reattach it."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Changes you make to a MutexSecurity object do not affect the access levels of the named mutex until you call the &lt;xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName&gt; method to assign the altered security object to the named mutex.","pos":[3263,3533],"source":"      > [!IMPORTANT] >  Changes you make to a MutexSecurity object do not affect the access levels of the named mutex until you call the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named mutex."},{"content":"To copy access control security from one mutex to another, use the &lt;xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName&gt; method to get a MutexSecurity object representing the access and audit rules for the first mutex, and then use the &lt;xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName&gt; method, or a constructor that accepts a MutexSecurity object, to assign those rules to the second mutex.","pos":[3540,3976],"source":"       To copy access control security from one mutex to another, use the <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> method to get a MutexSecurity object representing the access and audit rules for the first mutex, and then use the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method, or a constructor that accepts a MutexSecurity object, to assign those rules to the second mutex."},{"content":"Users with an investment in the security descriptor definition language (SDDL) can use the &lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt; method to set access rules for a named mutex, and the &lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt; method to obtain a string that represents the access rules in SDDL format.","pos":[3983,4372],"source":"       Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a named mutex, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format."},{"content":"This is not recommended for new development.","pos":[4373,4417]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.","pos":[4423,4534],"source":"      > [!NOTE] >  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition."}]},{"pos":[14468,14593],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with default values.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class with default values."},{"pos":[14605,14769],"content":"A new <xref:System.Security.AccessControl.MutexSecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A new &lt;xref:System.Security.AccessControl.MutexSecurity&gt; object always starts with an empty discretionary access list (DACL), which denies all access for all users.","pos":[0,164],"source":"A new <xref:System.Security.AccessControl.MutexSecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users."}]},{"pos":[15016,15088],"content":"This class is not supported on Windows 98 or Windows Millennium Edition.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class is not supported on Windows 98 or Windows Millennium Edition.","pos":[0,72]}]},{"pos":[15718,15934],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified sections of the access control security rules from the system mutex with the specified name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class with the specified sections of the access control security rules from the system mutex with the specified name."},{"pos":[15947,16284],"content":"This constructor allows you to obtain the access control security for a named system mutex without first creating a <xref:System.Threading.Mutex> object.       Caution must be exercised when working with named system objects. If there is a system object named `name` that is not a mutex, its control access security might be retrieved.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor allows you to obtain the access control security for a named system mutex without first creating a &lt;xref:System.Threading.Mutex&gt; object.","pos":[0,153],"source":"This constructor allows you to obtain the access control security for a named system mutex without first creating a <xref:System.Threading.Mutex> object."},{"content":"Caution must be exercised when working with named system objects.","pos":[160,225]},{"content":"If there is a system object named <ph id=\"ph1\">`name`</ph> that is not a mutex, its control access security might be retrieved.","pos":[226,335],"source":" If there is a system object named `name` that is not a mutex, its control access security might be retrieved."}]},{"pos":[16490,16575],"content":"The name of the system mutex whose access control security rules are to be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the system mutex whose access control security rules are to be retrieved.","pos":[0,85]}]},{"pos":[16685,16817],"content":"A combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> flags specifying the sections to retrieve.","needQuote":true,"needEscape":true,"source":"A combination of <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> flags specifying the sections to retrieve."},{"pos":[17003,17053],"content":"There is no system object with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no system object with the specified name.","pos":[0,50]}]},{"pos":[17156,17228],"content":"This class is not supported on Windows 98 or Windows Millennium Edition.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class is not supported on Windows 98 or Windows Millennium Edition.","pos":[0,72]}]},{"pos":[17655,17788],"content":"Gets the enumeration that the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class uses to represent access rights.","needQuote":true,"needEscape":true,"source":"Gets the enumeration that the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class uses to represent access rights."},{"pos":[17800,18220],"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","pos":[0,420],"nodes":[{"content":"Classes that derive from the &lt;xref:System.Security.AccessControl.ObjectSecurity&gt; class override the &lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt; property and return the type they use to represent access rights.","pos":[0,236],"source":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights."},{"content":"When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.","pos":[237,420]}]}]},{"pos":[18345,18465],"content":"A &lt;xref:System.Type&gt; object representing the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"A <xref:System.Type> object representing the <xref href=\"System.Security.AccessControl.MutexRights\"></xref> enumeration."},{"pos":[19675,19793],"content":"Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.","pos":[0,118]}]},{"pos":[19806,20265],"content":"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.MutexAccessRule> class.      > [!NOTE] >  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The recommended way to create access control rules is to use the constructors of the &lt;xref:System.Security.AccessControl.MutexAccessRule&gt; class.","pos":[0,144],"source":"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.MutexAccessRule> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them.","pos":[150,278],"source":"      > [!NOTE] >  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them."},{"content":"This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.","pos":[279,456]}]},{"pos":[20767,20889],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.IdentityReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the user or group the rule applies to.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to."},{"pos":[20955,21116],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the access rights to allow or deny, cast to an integer.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\"></xref> values specifying the access rights to allow or deny, cast to an integer."},{"pos":[21185,21247],"content":"Meaningless for named mutexes, because they have no hierarchy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Meaningless for named mutexes, because they have no hierarchy.","pos":[0,62]}]},{"pos":[21353,21415],"content":"Meaningless for named mutexes, because they have no hierarchy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Meaningless for named mutexes, because they have no hierarchy.","pos":[0,62]}]},{"pos":[21521,21583],"content":"Meaningless for named mutexes, because they have no hierarchy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Meaningless for named mutexes, because they have no hierarchy.","pos":[0,62]}]},{"pos":[21678,21817],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying whether the rights are allowed or denied.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied."},{"pos":[21902,22035],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object representing the specified rights for the specified user.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> object representing the specified rights for the specified user."},{"pos":[22239,22374],"content":"<ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","needQuote":true,"needEscape":true,"source":"<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value."},{"pos":[22478,22633],"content":"<code>identityReference</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>accessMask</code> is zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,95],"source":"<code>identityReference</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph> is zero.","pos":[102,145],"source":"       -or-       <code>accessMask</code> is zero."}]},{"pos":[22729,23021],"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is neither of type <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, nor of a type such as <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that can be converted to type <bpt id=\"p3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."},{"pos":[23443,23568],"content":"Gets the type that the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class uses to represent access rules.","needQuote":true,"needEscape":true,"source":"Gets the type that the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class uses to represent access rules."},{"pos":[23580,23998],"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","pos":[0,418],"nodes":[{"content":"Classes that derive from the &lt;xref:System.Security.AccessControl.ObjectSecurity&gt; class override the &lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt; property and return the type they use to represent access rules.","pos":[0,234],"source":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules."},{"content":"When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.","pos":[235,418]}]}]},{"pos":[24122,24240],"content":"A &lt;xref:System.Type&gt; object representing the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"A <xref:System.Type> object representing the <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> class."},{"pos":[24889,25009],"content":"Searches for a matching access control rule with which the new rule can be merged. If none are found, adds the new rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a matching access control rule with which the new rule can be merged. If none are found, adds the new rule.","pos":[0,120],"nodes":[{"content":"Searches for a matching access control rule with which the new rule can be merged.","pos":[0,82]},{"content":"If none are found, adds the new rule.","pos":[83,120]}]}]},{"pos":[25021,25292],"content":"The AddAccessRule method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`. If none are found, `rule` is added. If a matching rule is found, the rights in `rule` are merged with the existing rule.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The AddAccessRule method searches for rules with the same user or group and the same &lt;xref:System.Security.AccessControl.AccessControlType&gt; as <ph id=\"ph1\">`rule`</ph>.","pos":[0,150],"source":"The AddAccessRule method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`."},{"content":"If none are found, <ph id=\"ph1\">`rule`</ph> is added.","pos":[151,186],"source":" If none are found, `rule` is added."},{"content":"If a matching rule is found, the rights in <ph id=\"ph1\">`rule`</ph> are merged with the existing rule.","pos":[187,271],"source":" If a matching rule is found, the rights in `rule` are merged with the existing rule."}]},{"pos":[26746,26777],"content":"The access control rule to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The access control rule to add.","pos":[0,31]}]},{"pos":[26965,27047],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27198,27253],"content":"<ph id=\"ph1\">&lt;code&gt;rule &lt;/code&gt;</ph>cannot be mapped to a known identity.","needQuote":true,"needEscape":true,"source":"<code>rule </code>cannot be mapped to a known identity."},{"pos":[27803,27906],"content":"Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.","pos":[0,103],"nodes":[{"content":"Searches for an audit rule with which the new rule can be merged.","pos":[0,65]},{"content":"If none are found, adds the new rule.","pos":[66,103]}]}]},{"pos":[27918,28119],"content":"The AddAuditRule method searches for rules with the same user or group as `rule`. If none are found, `rule` is added. If a matching rule is found, the flags in `rule` are merged into the existing rule.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The AddAuditRule method searches for rules with the same user or group as <ph id=\"ph1\">`rule`</ph>.","pos":[0,81],"source":"The AddAuditRule method searches for rules with the same user or group as `rule`."},{"content":"If none are found, <ph id=\"ph1\">`rule`</ph> is added.","pos":[82,117],"source":" If none are found, `rule` is added."},{"content":"If a matching rule is found, the flags in <ph id=\"ph1\">`rule`</ph> are merged into the existing rule.","pos":[118,201],"source":" If a matching rule is found, the flags in `rule` are merged into the existing rule."}]},{"pos":[28328,28405],"content":"The audit rule to add. The user specified by this rule determines the search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The audit rule to add. The user specified by this rule determines the search.","pos":[0,77],"nodes":[{"content":"The audit rule to add.","pos":[0,22]},{"content":"The user specified by this rule determines the search.","pos":[23,77]}]}]},{"pos":[29572,29712],"content":"Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.","pos":[0,140]}]},{"pos":[29725,30174],"content":"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.MutexAuditRule> class.      > [!NOTE] >  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The recommended way to create audit rules is to use the constructors of the &lt;xref:System.Security.AccessControl.MutexAuditRule&gt; class.","pos":[0,134],"source":"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.MutexAuditRule> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them.","pos":[140,268],"source":"      > [!NOTE] >  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them."},{"content":"This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.","pos":[269,446]}]},{"pos":[30668,30790],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.IdentityReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the user or group the rule applies to.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to."},{"pos":[30856,31009],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexRights\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the access rights to audit, cast to an integer.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\"></xref> values specifying the access rights to audit, cast to an integer."},{"pos":[31078,31145],"content":"Meaningless for named wait handles, because they have no hierarchy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Meaningless for named wait handles, because they have no hierarchy.","pos":[0,67]}]},{"pos":[31251,31318],"content":"Meaningless for named wait handles, because they have no hierarchy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Meaningless for named wait handles, because they have no hierarchy.","pos":[0,67]}]},{"pos":[31424,31491],"content":"Meaningless for named wait handles, because they have no hierarchy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Meaningless for named wait handles, because they have no hierarchy.","pos":[0,67]}]},{"pos":[31580,31746],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AuditFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specify whether to audit successful access, failed access, or both.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values that specify whether to audit successful access, failed access, or both."},{"pos":[31830,32139],"content":"A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> object representing the specified audit rule for the specified user. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object representing the specified audit rule for the specified user.","pos":[0,136],"source":"A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> object representing the specified audit rule for the specified user."},{"content":"The return type of the method is the base class, <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, but the return value can be cast safely to the derived class.","pos":[137,309],"source":" The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class."}]},{"pos":[32342,32478],"content":"<ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;flags&lt;/code&gt;</ph> specifies an invalid value.","needQuote":true,"needEscape":true,"source":"<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value."},{"pos":[32582,32737],"content":"<code>identityReference</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>accessMask</code> is zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,95],"source":"<code>identityReference</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;accessMask&lt;/code&gt;</ph> is zero.","pos":[102,145],"source":"       -or-       <code>accessMask</code> is zero."}]},{"pos":[32833,33125],"content":"<ph id=\"ph1\">&lt;code&gt;identityReference&lt;/code&gt;</ph> is neither of type <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, nor of a type such as <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that can be converted to type <bpt id=\"p3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."},{"pos":[33542,33666],"content":"Gets the type that the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class uses to represent audit rules.","needQuote":true,"needEscape":true,"source":"Gets the type that the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class uses to represent audit rules."},{"pos":[33678,34094],"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","pos":[0,416],"nodes":[{"content":"Classes that derive from the &lt;xref:System.Security.AccessControl.ObjectSecurity&gt; class override the &lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt; property and return the type they use to represent audit rights.","pos":[0,233],"source":"Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights."},{"content":"When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.","pos":[234,416]}]}]},{"pos":[34217,34334],"content":"A &lt;xref:System.Type&gt; object representing the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"A <xref:System.Type> object representing the <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> class."},{"pos":[34997,35314],"content":"Searches for an access control rule with the same user and <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.","needQuote":true,"needEscape":true,"source":"Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it."},{"pos":[35327,36597],"content":"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.MutexSecurity> object.      > [!IMPORTANT] >  Although you can specify inheritance and propagation flags for mutex access rules, by creating them with the <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> method, this is not recommended. Inheritance and propagation have no meaning for named mutexes, and they make the maintenance of access rules more complicated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Security.AccessControl.MutexSecurity&gt; is searched for a rule that has the same user and the same &lt;xref:System.Security.AccessControl.AccessControlType&gt; value as <ph id=\"ph1\">`rule`</ph>.","pos":[0,193],"source":"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`."},{"content":"If no such rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[194,271],"source":" If no such rule is found, no action is taken, and the method returns `false`."},{"content":"If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id=\"ph1\">`rule`</ph>.","pos":[272,408],"source":" If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`."},{"content":"If no compatible rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[409,492],"source":" If no compatible rule is found, no action is taken, and the method returns `false`."},{"content":"If a rule with compatible flags is found, the rights specified in <ph id=\"ph1\">`rule`</ph> are removed from the compatible rule, and the method returns <ph id=\"ph2\">`true`</ph>.","pos":[493,634],"source":" If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`."},{"content":"If <ph id=\"ph1\">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.","pos":[635,748],"source":" If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights."},{"content":"If all rights are removed from the compatible rule, the entire rule is removed from the current &lt;xref:System.Security.AccessControl.MutexSecurity&gt; object.","pos":[749,903],"source":" If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.MutexSecurity> object."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Although you can specify inheritance and propagation flags for mutex access rules, by creating them with the &lt;xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A&gt; method, this is not recommended.","pos":[909,1140],"source":"      > [!IMPORTANT] >  Although you can specify inheritance and propagation flags for mutex access rules, by creating them with the <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> method, this is not recommended."},{"content":"Inheritance and propagation have no meaning for named mutexes, and they make the maintenance of access rules more complicated.","pos":[1141,1267]}]},{"pos":[38569,38920],"content":"A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the user and <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.","pos":[0,284],"source":"A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with."},{"content":"Specifies the rights to remove from the compatible rule, if found.","pos":[285,351]}]},{"pos":[38979,39144],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a compatible rule is found; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a compatible rule is found; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[39335,39417],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[40007,40203],"content":"Searches for all access control rules with the same user and <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (allow or deny) as the specified rule and, if found, removes them.","needQuote":true,"needEscape":true,"source":"Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule and, if found, removes them."},{"pos":[40215,40539],"content":"The current <xref:System.Security.AccessControl.MutexSecurity> object is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. Any rights specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Security.AccessControl.MutexSecurity&gt; object is searched for rules that have the same user and the same &lt;xref:System.Security.AccessControl.AccessControlType&gt; value as <ph id=\"ph1\">`rule`</ph>.","pos":[0,200],"source":"The current <xref:System.Security.AccessControl.MutexSecurity> object is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`."},{"content":"Any rights specified by <ph id=\"ph1\">`rule`</ph> are ignored when performing this search.","pos":[201,272],"source":" Any rights specified by `rule` are ignored when performing this search."},{"content":"If no matching rules are found, no action is taken.","pos":[273,324]}]},{"pos":[42065,42292],"content":"A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for. Any rights specified by this rule are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the user and <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to search for.","pos":[0,180],"source":"A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for."},{"content":"Any rights specified by this rule are ignored.","pos":[181,227]}]},{"pos":[42486,42568],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[43183,43285],"content":"Searches for an access control rule that exactly matches the specified rule and, if found, removes it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for an access control rule that exactly matches the specified rule and, if found, removes it.","pos":[0,102]}]},{"pos":[43298,43849],"content":"The rule is removed only if it exactly matches `rule` in all details, including flags. Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.      > [!IMPORTANT] >  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAccessRuleSpecific method cannot remove it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The rule is removed only if it exactly matches <ph id=\"ph1\">`rule`</ph> in all details, including flags.","pos":[0,86],"source":"The rule is removed only if it exactly matches `rule` in all details, including flags."},{"content":"Other rules with the same user and &lt;xref:System.Security.AccessControl.AccessControlType&gt; are not affected.","pos":[87,194],"source":" Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.","pos":[200,395],"source":"      > [!IMPORTANT] >  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user."},{"content":"Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAccessRuleSpecific method cannot remove it.","pos":[396,548]}]},{"pos":[45621,45702],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to remove."},{"pos":[45901,45983],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[46548,46774],"content":"Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.","pos":[0,226]}]},{"pos":[46787,47988],"content":"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for an audit rule that has the same user as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.MutexSecurity> object.      > [!IMPORTANT] >  Although you can specify inheritance and propagation flags for mutex audit rules, by creating them with the <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> method, this is not recommended. Inheritance and propagation have no meaning for named mutexes, and they make the maintenance of audit rules more complicated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Security.AccessControl.MutexSecurity&gt; is searched for an audit rule that has the same user as <ph id=\"ph1\">`rule`</ph>.","pos":[0,126],"source":"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for an audit rule that has the same user as `rule`."},{"content":"If no such rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[127,204],"source":" If no such rule is found, no action is taken, and the method returns `false`."},{"content":"If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id=\"ph1\">`rule`</ph>.","pos":[205,341],"source":" If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`."},{"content":"If no compatible rule is found, no action is taken, and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[342,425],"source":" If no compatible rule is found, no action is taken, and the method returns `false`."},{"content":"If a rule with compatible flags is found, the rights specified in <ph id=\"ph1\">`rule`</ph> are removed from the compatible rule, and the method returns <ph id=\"ph2\">`true`</ph>.","pos":[426,567],"source":" If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`."},{"content":"If <ph id=\"ph1\">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.","pos":[568,681],"source":" If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights."},{"content":"If all rights are removed from the compatible rule, the entire rule is removed from the current &lt;xref:System.Security.AccessControl.MutexSecurity&gt; object.","pos":[682,836],"source":" If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.MutexSecurity> object."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Although you can specify inheritance and propagation flags for mutex audit rules, by creating them with the &lt;xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A&gt; method, this is not recommended.","pos":[842,1072],"source":"      > [!IMPORTANT] >  Although you can specify inheritance and propagation flags for mutex audit rules, by creating them with the <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> method, this is not recommended."},{"content":"Inheritance and propagation have no meaning for named mutexes, and they make the maintenance of audit rules more complicated.","pos":[1073,1198]}]},{"pos":[48201,48478],"content":"A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.","pos":[0,210],"source":"A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with."},{"content":"Specifies the rights to remove from the compatible rule, if found.","pos":[211,277]}]},{"pos":[48537,48703],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a compatible rule is found; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a compatible rule is found; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[48893,48975],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[49555,49653],"content":"Searches for all audit rules with the same user as the specified rule and, if found, removes them.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for all audit rules with the same user as the specified rule and, if found, removes them.","pos":[0,98]}]},{"pos":[49665,49946],"content":"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for audit rules that have the same user as `rule`. Any rights specified by `rule` are ignored when performing this search. All matching rules are removed. If no matching rules are found, no action is taken.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current &lt;xref:System.Security.AccessControl.MutexSecurity&gt; is searched for audit rules that have the same user as <ph id=\"ph1\">`rule`</ph>.","pos":[0,125],"source":"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for audit rules that have the same user as `rule`."},{"content":"Any rights specified by <ph id=\"ph1\">`rule`</ph> are ignored when performing this search.","pos":[126,197],"source":" Any rights specified by `rule` are ignored when performing this search."},{"content":"All matching rules are removed.","pos":[198,229]},{"content":"If no matching rules are found, no action is taken.","pos":[230,281]}]},{"pos":[50161,50314],"content":"A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> that specifies the user to search for. Any rights specified by this rule are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the user to search for.","pos":[0,106],"source":"A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> that specifies the user to search for."},{"content":"Any rights specified by this rule are ignored.","pos":[107,153]}]},{"pos":[50507,50589],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[51194,51287],"content":"Searches for an audit rule that exactly matches the specified rule and, if found, removes it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for an audit rule that exactly matches the specified rule and, if found, removes it.","pos":[0,93]}]},{"pos":[51300,51795],"content":"The rule is removed only if it exactly matches `rule` in all details, including flags. Other audit rules for the same user are not affected.      > [!IMPORTANT] >  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAuditRuleSpecific method cannot remove it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The rule is removed only if it exactly matches <ph id=\"ph1\">`rule`</ph> in all details, including flags.","pos":[0,86],"source":"The rule is removed only if it exactly matches `rule` in all details, including flags."},{"content":"Other audit rules for the same user are not affected.","pos":[87,140]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.","pos":[146,340],"source":"      > [!IMPORTANT] >  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user."},{"content":"Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAuditRuleSpecific method cannot remove it.","pos":[341,492]}]},{"pos":[52016,52100],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be removed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> to be removed."},{"pos":[52298,52380],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[52950,53142],"content":"Removes all access control rules with the same user as the specified rule, regardless of <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and then adds the specified rule.","needQuote":true,"needEscape":true,"source":"Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\"></xref>, and then adds the specified rule."},{"pos":[53154,53238],"content":"If there are no access rules whose user matches the specified rule, <ph id=\"ph1\">`rule`</ph> is added.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If there are no access rules whose user matches the specified rule, `rule` is added."},{"pos":[54542,54710],"content":"The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add.","pos":[0,78],"source":"The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to add."},{"content":"The user specified by this rule determines the rules to remove before this rule is added.","pos":[79,168]}]},{"pos":[54900,54982],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[55542,55739],"content":"Removes all access control rules with the same user and <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (allow or deny) as the specified rule, and then adds the specified rule.","needQuote":true,"needEscape":true,"source":"Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and then adds the specified rule."},{"pos":[55752,56352],"content":"If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user are replaced with the specified rule.       If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the specified rule has &lt;xref:System.Security.AccessControl.AccessControlType&gt;, the effect of this method is to remove all &lt;xref:System.Security.AccessControl.AccessControlType&gt; rules for the specified user, replacing them with the specified rule.","pos":[0,249],"source":"If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user, replacing them with the specified rule."},{"content":"If the specified rule has &lt;xref:System.Security.AccessControl.AccessControlType&gt;, all &lt;xref:System.Security.AccessControl.AccessControlType&gt; rules for the specified user are replaced with the specified rule.","pos":[250,457],"source":" If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user are replaced with the specified rule."},{"content":"If there are no rules whose user and &lt;xref:System.Security.AccessControl.AccessControlType&gt; match the specified rule, <ph id=\"ph1\">`rule`</ph> is added.","pos":[464,598],"source":"       If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added."}]},{"pos":[57754,57984],"content":"The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to add. The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAccessRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add.","pos":[0,78],"source":"The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to add."},{"content":"The user and <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of this rule determine the rules to remove before this rule is added.","pos":[79,230],"source":" The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added."}]},{"pos":[58172,58254],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[58804,58990],"content":"Removes all audit rules with the same user as the specified rule, regardless of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AuditFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value, and then adds the specified rule.","needQuote":true,"needEscape":true,"source":"Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> value, and then adds the specified rule."},{"pos":[59002,59085],"content":"If there are no audit rules whose user matches the specified rule, <ph id=\"ph1\">`rule`</ph> is added.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If there are no audit rules whose user matches the specified rule, `rule` is added."},{"pos":[59294,59461],"content":"The <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.MutexAuditRule\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add.","pos":[0,77],"source":"The <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> to add."},{"content":"The user specified by this rule determines the rules to remove before this rule is added.","pos":[78,167]}]},{"pos":[59648,59730],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.MutexSecurity\n  id: MutexSecurity\n  children:\n  - System.Security.AccessControl.MutexSecurity.#ctor\n  - System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.MutexSecurity.AccessRightType\n  - System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.MutexSecurity.AccessRuleType\n  - System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)\n  - System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)\n  - System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.MutexSecurity.AuditRuleType\n  - System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)\n  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)\n  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)\n  - System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)\n  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)\n  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)\n  - System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  - System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  - System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)\n  langs:\n  - csharp\n  name: MutexSecurity\n  nameWithType: MutexSecurity\n  fullName: System.Security.AccessControl.MutexSecurity\n  type: Class\n  summary: Represents the Windows access control security for a named mutex. This class cannot be inherited.\n  remarks: \"A MutexSecurity object specifies access rights for a named system mutex, and also specifies how access attempts are audited. Access rights to the mutex are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.MutexAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.MutexAuditRule> object.  \\n  \\n This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.MutexAccessRule> or <xref:System.Security.AccessControl.MutexAuditRule> object might represent more than one ACE.  \\n  \\n> [!NOTE]\\n>  A <xref:System.Threading.Mutex> object can represent a local mutex or a named system mutex. Windows access control security is meaningful only for named system mutexes.  \\n  \\n The MutexSecurity, <xref:System.Security.AccessControl.MutexAccessRule>, and <xref:System.Security.AccessControl.MutexAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:  \\n  \\n-   Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new MutexSecurity object always starts with an empty DACL, which denies all access for all users.  \\n  \\n-   Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. MutexSecurity objects maintain the correct order internally.  \\n  \\n-   Manipulating security descriptor flags, which should be under resource manager control only.  \\n  \\n-   Creating invalid combinations of ACE flags.  \\n  \\n-   Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.  \\n  \\n-   Inserting meaningless ACEs into ACLs.  \\n  \\n The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:  \\n  \\n-   Low-level tasks that are normally performed by the resource manager.  \\n  \\n-   Adding or removing access control entries in ways that do not maintain the canonical ordering.  \\n  \\n To modify Windows access control security for a named mutex, use the <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> method to get the MutexSecurity object. Modify the security object by adding and removing rules, and then use the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method to reattach it.  \\n  \\n> [!IMPORTANT]\\n>  Changes you make to a MutexSecurity object do not affect the access levels of the named mutex until you call the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named mutex.  \\n  \\n To copy access control security from one mutex to another, use the <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> method to get a MutexSecurity object representing the access and audit rules for the first mutex, and then use the <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> method, or a constructor that accepts a MutexSecurity object, to assign those rules to the second mutex.  \\n  \\n Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a named mutex, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.  \\n  \\n> [!NOTE]\\n>  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.\"\n  example:\n  - \"The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a MutexSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_12_1.vb)]\\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_12_1.cs)]\"\n  syntax:\n    content: 'public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.ObjectSecurity\n  - System.Security.AccessControl.CommonObjectSecurity\n  - System.Security.AccessControl.NativeObjectSecurity\n  implements: []\n  inheritedMembers:\n  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.GroupModified\n  - System.Security.AccessControl.ObjectSecurity.IsContainer\n  - System.Security.AccessControl.ObjectSecurity.IsDS\n  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.OwnerModified\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.ReadLock\n  - System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.WriteLock\n  - System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: MutexSecurity()\n  nameWithType: MutexSecurity.MutexSecurity()\n  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class with default values.\n  remarks: A new <xref:System.Security.AccessControl.MutexSecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.\n  syntax:\n    content: public MutexSecurity ();\n    parameters: []\n  overload: System.Security.AccessControl.MutexSecurity.#ctor*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This class is not supported on Windows 98 or Windows Millennium Edition.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: MutexSecurity(String,AccessControlSections)\n  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)\n  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class with the specified sections of the access control security rules from the system mutex with the specified name.\n  remarks: \"This constructor allows you to obtain the access control security for a named system mutex without first creating a <xref:System.Threading.Mutex> object.  \\n  \\n Caution must be exercised when working with named system objects. If there is a system object named `name` that is not a mutex, its control access security might be retrieved.\"\n  syntax:\n    content: public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the system mutex whose access control security rules are to be retrieved.\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: A combination of <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> flags specifying the sections to retrieve.\n  overload: System.Security.AccessControl.MutexSecurity.#ctor*\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: There is no system object with the specified name.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This class is not supported on Windows 98 or Windows Millennium Edition.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AccessRightType\n  id: AccessRightType\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AccessRightType\n  nameWithType: MutexSecurity.AccessRightType\n  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the enumeration that the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class uses to represent access rights.\n  remarks: Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.\n  syntax:\n    content: public override Type AccessRightType { get; }\n    return:\n      type: System.Type\n      description: A <xref:System.Type> object representing the <xref href=\"System.Security.AccessControl.MutexRights\"></xref> enumeration.\n  overload: System.Security.AccessControl.MutexSecurity.AccessRightType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)\n  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)\n  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.\n  remarks: \"The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.MutexAccessRule> class.  \\n  \\n> [!NOTE]\\n>  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.\"\n  syntax:\n    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identityReference\n      type: System.Security.Principal.IdentityReference\n      description: An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to.\n    - id: accessMask\n      type: System.Int32\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\"></xref> values specifying the access rights to allow or deny, cast to an integer.\n    - id: isInherited\n      type: System.Boolean\n      description: Meaningless for named mutexes, because they have no hierarchy.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: Meaningless for named mutexes, because they have no hierarchy.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: Meaningless for named mutexes, because they have no hierarchy.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.\n    return:\n      type: System.Security.AccessControl.AccessRule\n      description: A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> object representing the specified rights for the specified user.\n  overload: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identityReference</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>accessMask</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType\n  id: AccessRuleType\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AccessRuleType\n  nameWithType: MutexSecurity.AccessRuleType\n  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the type that the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class uses to represent access rules.\n  remarks: Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.\n  syntax:\n    content: public override Type AccessRuleType { get; }\n    return:\n      type: System.Type\n      description: A <xref:System.Type> object representing the <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> class.\n  overload: System.Security.AccessControl.MutexSecurity.AccessRuleType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)\n  id: AddAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AddAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for a matching access control rule with which the new rule can be merged. If none are found, adds the new rule.\n  remarks: The AddAccessRule method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`. If none are found, `rule` is added. If a matching rule is found, the rights in `rule` are merged with the existing rule.\n  example:\n  - \"The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName><xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/a07c477f-17a9-4bd4-908e-_1.vb)]\\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/a07c477f-17a9-4bd4-908e-_1.cs)]\"\n  syntax:\n    content: public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAccessRule\n      description: The access control rule to add.\n  overload: System.Security.AccessControl.MutexSecurity.AddAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Principal.IdentityNotMappedException\n    commentId: T:System.Security.Principal.IdentityNotMappedException\n    description: <code>rule </code>cannot be mapped to a known identity.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)\n  id: AddAuditRule(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AddAuditRule(MutexAuditRule)\n  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.\n  remarks: The AddAuditRule method searches for rules with the same user or group as `rule`. If none are found, `rule` is added. If a matching rule is found, the flags in `rule` are merged into the existing rule.\n  syntax:\n    content: public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAuditRule\n      description: The audit rule to add. The user specified by this rule determines the search.\n  overload: System.Security.AccessControl.MutexSecurity.AddAuditRule*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)\n  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)\n  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.\n  remarks: \"The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.MutexAuditRule> class.  \\n  \\n> [!NOTE]\\n>  Although inheritance and propagation flags are meaningless for named mutexes, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.\"\n  syntax:\n    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);\n    parameters:\n    - id: identityReference\n      type: System.Security.Principal.IdentityReference\n      description: An <xref href=\"System.Security.Principal.IdentityReference\"></xref> that identifies the user or group the rule applies to.\n    - id: accessMask\n      type: System.Int32\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\"></xref> values specifying the access rights to audit, cast to an integer.\n    - id: isInherited\n      type: System.Boolean\n      description: Meaningless for named wait handles, because they have no hierarchy.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: Meaningless for named wait handles, because they have no hierarchy.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: Meaningless for named wait handles, because they have no hierarchy.\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values that specify whether to audit successful access, failed access, or both.\n    return:\n      type: System.Security.AccessControl.AuditRule\n      description: A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> object representing the specified audit rule for the specified user. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\"></xref>, but the return value can be cast safely to the derived class.\n  overload: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identityReference</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>accessMask</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identityReference</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType\n  id: AuditRuleType\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: AuditRuleType\n  nameWithType: MutexSecurity.AuditRuleType\n  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the type that the <xref href=\"System.Security.AccessControl.MutexSecurity\"></xref> class uses to represent audit rules.\n  remarks: Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.\n  syntax:\n    content: public override Type AuditRuleType { get; }\n    return:\n      type: System.Type\n      description: A <xref:System.Type> object representing the <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> class.\n  overload: System.Security.AccessControl.MutexSecurity.AuditRuleType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)\n  id: RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: RemoveAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.\n  remarks: \"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.MutexSecurity> object.  \\n  \\n> [!IMPORTANT]\\n>  Although you can specify inheritance and propagation flags for mutex access rules, by creating them with the <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> method, this is not recommended. Inheritance and propagation have no meaning for named mutexes, and they make the maintenance of access rules more complicated.\"\n  example:\n  - \"The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in a <xref:System.Security.AccessControl.MutexSecurity> object. It also shows that other rights in `rule` are ignored.  \\n  \\n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.MutexRights>, <xref:System.Security.AccessControl.MutexRights>, and <xref:System.Security.AccessControl.MutexRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.MutexRights> and <xref:System.Security.AccessControl.MutexRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.MutexRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object. The extraneous <xref:System.Security.AccessControl.MutexRights> right in `rule` is ignored.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/02c8df82-84a8-4212-a3e0-_1.vb)]\\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/02c8df82-84a8-4212-a3e0-_1.cs)]\"\n  syntax:\n    content: public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAccessRule\n      description: A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a compatible rule is found; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)\n  id: RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: RemoveAccessRuleAll(MutexAccessRule)\n  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule and, if found, removes them.\n  remarks: The current <xref:System.Security.AccessControl.MutexSecurity> object is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. Any rights specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken.\n  example:\n  - \"The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \\n  \\n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.MutexSecurity> object.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/6d97fdf7-4cee-497f-898e-_1.cs)]\\n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/6d97fdf7-4cee-497f-898e-_1.vb)]\"\n  syntax:\n    content: public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAccessRule\n      description: A <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> to search for. Any rights specified by this rule are ignored.\n  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)\n  id: RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: RemoveAccessRuleSpecific(MutexAccessRule)\n  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for an access control rule that exactly matches the specified rule and, if found, removes it.\n  remarks: \"The rule is removed only if it exactly matches `rule` in all details, including flags. Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.  \\n  \\n> [!IMPORTANT]\\n>  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAccessRuleSpecific method cannot remove it.\"\n  example:\n  - \"The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \\n  \\n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/fa20d5ab-0fa1-47be-9c16-_1.vb)]\\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/fa20d5ab-0fa1-47be-9c16-_1.cs)]\"\n  syntax:\n    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAccessRule\n      description: The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to remove.\n  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)\n  id: RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: RemoveAuditRule(MutexAuditRule)\n  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.\n  remarks: \"The current <xref:System.Security.AccessControl.MutexSecurity> is searched for an audit rule that has the same user as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.MutexSecurity> object.  \\n  \\n> [!IMPORTANT]\\n>  Although you can specify inheritance and propagation flags for mutex audit rules, by creating them with the <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> method, this is not recommended. Inheritance and propagation have no meaning for named mutexes, and they make the maintenance of audit rules more complicated.\"\n  syntax:\n    content: public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAuditRule\n      description: A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a compatible rule is found; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)\n  id: RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: RemoveAuditRuleAll(MutexAuditRule)\n  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for all audit rules with the same user as the specified rule and, if found, removes them.\n  remarks: The current <xref:System.Security.AccessControl.MutexSecurity> is searched for audit rules that have the same user as `rule`. Any rights specified by `rule` are ignored when performing this search. All matching rules are removed. If no matching rules are found, no action is taken.\n  syntax:\n    content: public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAuditRule\n      description: A <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> that specifies the user to search for. Any rights specified by this rule are ignored.\n  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)\n  id: RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: RemoveAuditRuleSpecific(MutexAuditRule)\n  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Searches for an audit rule that exactly matches the specified rule and, if found, removes it.\n  remarks: \"The rule is removed only if it exactly matches `rule` in all details, including flags. Other audit rules for the same user are not affected.  \\n  \\n> [!IMPORTANT]\\n>  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAuditRuleSpecific method cannot remove it.\"\n  syntax:\n    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAuditRule\n      description: The <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> to be removed.\n  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  id: ResetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: ResetAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\"></xref>, and then adds the specified rule.\n  remarks: If there are no access rules whose user matches the specified rule, `rule` is added.\n  example:\n  - \"The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \\n  \\n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-cs[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/382093ed-47a5-4dd0-aee6-_1.cs)]\\n [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/382093ed-47a5-4dd0-aee6-_1.vb)]\"\n  syntax:\n    content: public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAccessRule\n      description: The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.\n  overload: System.Security.AccessControl.MutexSecurity.ResetAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  id: SetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: SetAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> (allow or deny) as the specified rule, and then adds the specified rule.\n  remarks: \"If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user are replaced with the specified rule.  \\n  \\n If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.\"\n  example:\n  - \"The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \\n  \\n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing Allow rule with the new rule. The rule that denies access is not affected.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/5e6eedb1-8b35-40cc-b676-_1.vb)]\\n [!code-cs[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/csharp/5e6eedb1-8b35-40cc-b676-_1.cs)]\"\n  syntax:\n    content: public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAccessRule\n      description: The <xref href=\"System.Security.AccessControl.MutexAccessRule\"></xref> to add. The user and <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> of this rule determine the rules to remove before this rule is added.\n  overload: System.Security.AccessControl.MutexSecurity.SetAccessRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)\n  id: SetAuditRule(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  langs:\n  - csharp\n  name: SetAuditRule(MutexAuditRule)\n  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> value, and then adds the specified rule.\n  remarks: If there are no audit rules whose user matches the specified rule, `rule` is added.\n  syntax:\n    content: public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);\n    parameters:\n    - id: rule\n      type: System.Security.AccessControl.MutexAuditRule\n      description: The <xref href=\"System.Security.AccessControl.MutexAuditRule\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.\n  overload: System.Security.AccessControl.MutexSecurity.SetAuditRule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rule</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: System.Security.AccessControl.NativeObjectSecurity\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.Principal.IdentityNotMappedException\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityNotMappedException\n  nameWithType: IdentityNotMappedException\n  fullName: System.Security.Principal.IdentityNotMappedException\n- uid: System.Security.AccessControl.MutexSecurity.#ctor\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: MutexSecurity()\n  nameWithType: MutexSecurity.MutexSecurity()\n  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()\n- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: MutexSecurity(String,AccessControlSections)\n  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)\n  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  nameWithType: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n- uid: System.Security.AccessControl.MutexSecurity.AccessRightType\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AccessRightType\n  nameWithType: MutexSecurity.AccessRightType\n  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)\n  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)\n  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  nameWithType: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AccessRuleType\n  nameWithType: MutexSecurity.AccessRuleType\n  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType\n- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AddAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)\n- uid: System.Security.AccessControl.MutexAccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexAccessRule\n  nameWithType: MutexAccessRule\n  fullName: System.Security.AccessControl.MutexAccessRule\n- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AddAuditRule(MutexAuditRule)\n  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)\n- uid: System.Security.AccessControl.MutexAuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexAuditRule\n  nameWithType: MutexAuditRule\n  fullName: System.Security.AccessControl.MutexAuditRule\n- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)\n  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)\n  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  nameWithType: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AuditRuleType\n  nameWithType: MutexSecurity.AuditRuleType\n  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAccessRuleAll(MutexAccessRule)\n  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific(MutexAccessRule)\n  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAuditRule(MutexAuditRule)\n  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAuditRuleAll(MutexAuditRule)\n  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific(MutexAuditRule)\n  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)\n- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: ResetAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)\n- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: SetAccessRule(MutexAccessRule)\n  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)\n  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)\n- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: SetAuditRule(MutexAuditRule)\n  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)\n  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)\n- uid: System.Security.AccessControl.MutexSecurity.#ctor*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: MutexSecurity\n  nameWithType: MutexSecurity.MutexSecurity\n- uid: System.Security.AccessControl.MutexSecurity.AccessRightType*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AccessRightType\n  nameWithType: MutexSecurity.AccessRightType\n- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AccessRuleFactory\n  nameWithType: MutexSecurity.AccessRuleFactory\n- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AccessRuleType\n  nameWithType: MutexSecurity.AccessRuleType\n- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AddAccessRule\n  nameWithType: MutexSecurity.AddAccessRule\n- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AddAuditRule\n  nameWithType: MutexSecurity.AddAuditRule\n- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AuditRuleFactory\n  nameWithType: MutexSecurity.AuditRuleFactory\n- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: AuditRuleType\n  nameWithType: MutexSecurity.AuditRuleType\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAccessRule\n  nameWithType: MutexSecurity.RemoveAccessRule\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAccessRuleAll\n  nameWithType: MutexSecurity.RemoveAccessRuleAll\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific\n  nameWithType: MutexSecurity.RemoveAccessRuleSpecific\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAuditRule\n  nameWithType: MutexSecurity.RemoveAuditRule\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAuditRuleAll\n  nameWithType: MutexSecurity.RemoveAuditRuleAll\n- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific\n  nameWithType: MutexSecurity.RemoveAuditRuleSpecific\n- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: ResetAccessRule\n  nameWithType: MutexSecurity.ResetAccessRule\n- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: SetAccessRule\n  nameWithType: MutexSecurity.SetAccessRule\n- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule*\n  parent: System.Security.AccessControl.MutexSecurity\n  isExternal: false\n  name: SetAuditRule\n  nameWithType: MutexSecurity.SetAuditRule\n"}