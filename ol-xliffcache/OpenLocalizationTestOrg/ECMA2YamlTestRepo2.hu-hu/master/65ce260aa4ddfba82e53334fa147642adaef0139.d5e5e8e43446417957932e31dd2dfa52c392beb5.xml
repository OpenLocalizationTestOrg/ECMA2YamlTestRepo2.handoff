{"nodes":[{"pos":[1297,1387],"content":"Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.","pos":[0,90]}]},{"pos":[1399,1559],"content":"An ACE contains both an ACE header and a binary blob. The header contains information about the type of the ACE, various flags, and the size of the binary blob.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An ACE contains both an ACE header and a binary blob. The header contains information about the type of the ACE, various flags, and the size of the binary blob.","pos":[0,160],"nodes":[{"content":"An ACE contains both an ACE header and a binary blob.","pos":[0,53]},{"content":"The header contains information about the type of the ACE, various flags, and the size of the binary blob.","pos":[54,160]}]}]},{"pos":[2068,2235],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AceFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Security.AccessControl.AceFlags\"></xref> associated with this <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[2247,2449],"content":"An <xref:System.Security.AccessControl.AceFlags> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An &lt;xref:System.Security.AccessControl.AceFlags&gt; object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE).","pos":[0,202],"source":"An <xref:System.Security.AccessControl.AceFlags> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE)."}]},{"pos":[2624,2778],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AceFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.AceFlags\"></xref> associated with this <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[3233,3282],"content":"Gets the type of this Access Control Entry (ACE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type of this Access Control Entry (ACE).","pos":[0,49]}]},{"pos":[3449,3470],"content":"The type of this ACE.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of this ACE.","pos":[0,21]}]},{"pos":[3939,4014],"content":"Gets the audit information associated with this Access Control Entry (ACE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the audit information associated with this Access Control Entry (ACE).","pos":[0,75]}]},{"pos":[4190,4260],"content":"The audit information associated with this Access Control Entry (ACE).","needQuote":true,"needEscape":true,"nodes":[{"content":"The audit information associated with this Access Control Entry (ACE).","pos":[0,70]}]},{"pos":[4742,5035],"content":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref:System.Security.AccessControl.GenericAce.GetBinaryForm*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length, in bytes, of the binary representation of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,140],"source":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"content":"This length should be used before marshaling the ACL into a binary array with the &lt;xref:System.Security.AccessControl.GenericAce.GetBinaryForm*&gt; method.","pos":[141,293],"source":" This length should be used before marshaling the ACL into a binary array with the <xref:System.Security.AccessControl.GenericAce.GetBinaryForm*> method."}]},{"pos":[5157,5292],"content":"The length, in bytes, of the binary representation of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[5740,5795],"content":"Creates a deep copy of this Access Control Entry (ACE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a deep copy of this Access Control Entry (ACE).","pos":[0,55]}]},{"pos":[5979,6077],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that this method creates.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object that this method creates."},{"pos":[6689,6799],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from the specified binary data.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object from the specified binary data."},{"pos":[7014,7128],"content":"The binary data from which to create the new <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The binary data from which to create the new <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[7190,7232],"content":"The offset at which to begin unmarshaling.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset at which to begin unmarshaling.","pos":[0,42]}]},{"pos":[7317,7410],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object this method creates.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object this method creates."},{"pos":[7924,8119],"content":"Determines whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is equal to the current <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object is equal to the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[8263,8431],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare to the current <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object to compare to the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[8490,8805],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object is equal to the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9384,9546],"content":"Marshals the contents of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object into the specified byte array beginning at the specified offset.","needQuote":true,"needEscape":true,"source":"Marshals the contents of the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object into the specified byte array beginning at the specified offset."},{"pos":[9720,9841],"content":"The byte array into which the contents of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is marshaled.","needQuote":true,"needEscape":true,"source":"The byte array into which the contents of the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> is marshaled."},{"pos":[9903,9943],"content":"The offset at which to start marshaling.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset at which to start marshaling.","pos":[0,40]}]},{"pos":[10140,10303],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is negative or too high to allow the entire <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAcl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be copied into <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>offset</code> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.GenericAcl\"></xref> to be copied into <code>array</code>."},{"pos":[10702,10909],"content":"Serves as a hash function for the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> class. The  GetHashCode method is suitable for use in hashing algorithms and data structures like a hash table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serves as a hash function for the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","pos":[0,102],"source":"Serves as a hash function for the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> class."},{"content":"The  GetHashCode method is suitable for use in hashing algorithms and data structures like a hash table.","pos":[103,207]}]},{"pos":[11051,11148],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object."},{"pos":[11651,11737],"content":"Gets flags that specify the inheritance properties of this Access Control Entry (ACE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets flags that specify the inheritance properties of this Access Control Entry (ACE).","pos":[0,86]}]},{"pos":[11931,11989],"content":"Flags that specify the inheritance properties of this ACE.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags that specify the inheritance properties of this ACE.","pos":[0,58]}]},{"pos":[12472,12582],"content":"Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.","pos":[0,110]}]},{"pos":[12697,12858],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this ACE is inherited; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this ACE is inherited; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13571,13695],"content":"Determines whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are considered equal.","needQuote":true,"needEscape":true,"source":"Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are considered equal."},{"pos":[13950,14040],"content":"The first <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare.","needQuote":true,"needEscape":true,"source":"The first <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object to compare."},{"pos":[14129,14213],"content":"The second <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare.","needQuote":true,"needEscape":true,"source":"The second <xref href=\"System.Security.AccessControl.GenericAce\"></xref> to compare."},{"pos":[14272,14499],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15222,15348],"content":"Determines whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are considered unequal.","needQuote":true,"needEscape":true,"source":"Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are considered unequal."},{"pos":[15605,15695],"content":"The first <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare.","needQuote":true,"needEscape":true,"source":"The first <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object to compare."},{"pos":[15784,15868],"content":"The second <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare.","needQuote":true,"needEscape":true,"source":"The second <xref href=\"System.Security.AccessControl.GenericAce\"></xref> to compare."},{"pos":[15927,16156],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are unequal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are unequal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16661,16759],"content":"Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).","pos":[0,98]}]},{"pos":[16953,17023],"content":"Flags that specify the inheritance propagation properties of this ACE.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags that specify the inheritance propagation properties of this ACE.","pos":[0,70]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.GenericAce\n  id: GenericAce\n  children:\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.BinaryLength\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  langs:\n  - csharp\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  type: Class\n  summary: Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.\n  remarks: An ACE contains both an ACE header and a binary blob. The header contains information about the type of the ACE, various flags, and the size of the binary blob.\n  syntax:\n    content: public abstract class GenericAce\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  id: AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: AceFlags\n  nameWithType: GenericAce.AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the <xref href=\"System.Security.AccessControl.AceFlags\"></xref> associated with this <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n  remarks: An <xref:System.Security.AccessControl.AceFlags> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE).\n  syntax:\n    content: public System.Security.AccessControl.AceFlags AceFlags { get; set; }\n    return:\n      type: System.Security.AccessControl.AceFlags\n      description: The <xref href=\"System.Security.AccessControl.AceFlags\"></xref> associated with this <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n  overload: System.Security.AccessControl.GenericAce.AceFlags*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.AceType\n  id: AceType\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: AceType\n  nameWithType: GenericAce.AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the type of this Access Control Entry (ACE).\n  syntax:\n    content: public System.Security.AccessControl.AceType AceType { get; }\n    return:\n      type: System.Security.AccessControl.AceType\n      description: The type of this ACE.\n  overload: System.Security.AccessControl.GenericAce.AceType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  id: AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: AuditFlags\n  nameWithType: GenericAce.AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the audit information associated with this Access Control Entry (ACE).\n  syntax:\n    content: public System.Security.AccessControl.AuditFlags AuditFlags { get; }\n    return:\n      type: System.Security.AccessControl.AuditFlags\n      description: The audit information associated with this Access Control Entry (ACE).\n  overload: System.Security.AccessControl.GenericAce.AuditFlags*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: BinaryLength\n  nameWithType: GenericAce.BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref:System.Security.AccessControl.GenericAce.GetBinaryForm*> method.\n  syntax:\n    content: public abstract int BinaryLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n  overload: System.Security.AccessControl.GenericAce.BinaryLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.Copy\n  id: Copy\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: GenericAce.Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Creates a deep copy of this Access Control Entry (ACE).\n  syntax:\n    content: public System.Security.AccessControl.GenericAce Copy ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: The <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object that this method creates.\n  overload: System.Security.AccessControl.GenericAce.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  id: CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: CreateFromBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Creates a <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object from the specified binary data.\n  syntax:\n    content: public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: The binary data from which to create the new <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n    - id: offset\n      type: System.Int32\n      description: The offset at which to begin unmarshaling.\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: The <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object this method creates.\n  overload: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: GenericAce.Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object is equal to the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n  syntax:\n    content: public override sealed bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object to compare to the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object is equal to the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.GenericAce.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: GetBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Marshals the contents of the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object into the specified byte array beginning at the specified offset.\n  syntax:\n    content: public abstract void GetBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: The byte array into which the contents of the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> is marshaled.\n    - id: offset\n      type: System.Int32\n      description: The offset at which to start marshaling.\n  overload: System.Security.AccessControl.GenericAce.GetBinaryForm*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.GenericAcl\"></xref> to be copied into <code>array</code>.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  id: GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: GenericAce.GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Serves as a hash function for the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> class. The  GetHashCode method is suitable for use in hashing algorithms and data structures like a hash table.\n  syntax:\n    content: public override sealed int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object.\n  overload: System.Security.AccessControl.GenericAce.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  id: InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets flags that specify the inheritance properties of this Access Control Entry (ACE).\n  syntax:\n    content: public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }\n    return:\n      type: System.Security.AccessControl.InheritanceFlags\n      description: Flags that specify the inheritance properties of this ACE.\n  overload: System.Security.AccessControl.GenericAce.InheritanceFlags*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  id: IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: IsInherited\n  nameWithType: GenericAce.IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.\n  syntax:\n    content: public bool IsInherited { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this ACE is inherited; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.GenericAce.IsInherited*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: op_Equality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are considered equal.\n  syntax:\n    content: public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);\n    parameters:\n    - id: left\n      type: System.Security.AccessControl.GenericAce\n      description: The first <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object to compare.\n    - id: right\n      type: System.Security.AccessControl.GenericAce\n      description: The second <xref href=\"System.Security.AccessControl.GenericAce\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.GenericAce.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: op_Inequality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Determines whether the specified <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are considered unequal.\n  syntax:\n    content: public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);\n    parameters:\n    - id: left\n      type: System.Security.AccessControl.GenericAce\n      description: The first <xref href=\"System.Security.AccessControl.GenericAce\"></xref> object to compare.\n    - id: right\n      type: System.Security.AccessControl.GenericAce\n      description: The second <xref href=\"System.Security.AccessControl.GenericAce\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Security.AccessControl.GenericAce\"></xref> objects are unequal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.AccessControl.GenericAce.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  id: PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).\n  syntax:\n    content: public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }\n    return:\n      type: System.Security.AccessControl.PropagationFlags\n      description: Flags that specify the inheritance propagation properties of this ACE.\n  overload: System.Security.AccessControl.GenericAce.PropagationFlags*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  nameWithType: GenericAce.AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  nameWithType: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  nameWithType: GenericAce.AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n- uid: System.Security.AccessControl.AceType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceType\n  nameWithType: AceType\n  fullName: System.Security.AccessControl.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  nameWithType: GenericAce.AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  nameWithType: GenericAce.BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  nameWithType: GenericAce.Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: CreateFromBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GenericAce.Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: GenericAce.GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  nameWithType: GenericAce.IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Equality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)\n- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Inequality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.AceFlags*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.BinaryLength*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.Copy*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy\n  nameWithType: GenericAce.Copy\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: CreateFromBinaryForm\n  nameWithType: GenericAce.CreateFromBinaryForm\n- uid: System.Security.AccessControl.GenericAce.Equals*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Equals\n  nameWithType: GenericAce.Equals\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetBinaryForm\n  nameWithType: GenericAce.GetBinaryForm\n- uid: System.Security.AccessControl.GenericAce.GetHashCode*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode\n  nameWithType: GenericAce.GetHashCode\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.op_Equality*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Equality\n  nameWithType: GenericAce.op_Equality\n- uid: System.Security.AccessControl.GenericAce.op_Inequality*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Inequality\n  nameWithType: GenericAce.op_Inequality\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags*\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n"}