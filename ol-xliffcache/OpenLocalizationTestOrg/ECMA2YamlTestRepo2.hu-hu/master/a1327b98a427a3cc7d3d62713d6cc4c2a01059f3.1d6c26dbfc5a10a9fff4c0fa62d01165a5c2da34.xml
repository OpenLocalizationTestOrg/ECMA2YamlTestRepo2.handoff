{"nodes":[{"pos":[1809,1882],"content":"Derives a key from a password using an extension of the PBKDF1 algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives a key from a password using an extension of the PBKDF1 algorithm.","pos":[0,73]}]},{"pos":[1895,2400],"content":"This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password. The standard is documented in IETF RRC 2898.      > [!IMPORTANT] >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.","pos":[0,154]},{"content":"The standard is documented in IETF RRC 2898.","pos":[155,199]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.","pos":[205,274],"source":"      > [!IMPORTANT] >  Never hard-code a password within your source code."},{"content":"Hard coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.","pos":[276,502],"source":"  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe."}]},{"pos":[3732,3904],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class specifying the password and key salt to use to derive the key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class specifying the password and key salt to use to derive the key."},{"pos":[11444,11740],"content":"> [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  Never hard code a password within your source code.","pos":[0,69],"source":"> [!IMPORTANT] >  Never hard code a password within your source code."},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[71,295],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.PasswordDeriveBytes\n  id: PasswordDeriveBytes\n  children:\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])\n  - System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)\n  - System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)\n  - System.Security.Cryptography.PasswordDeriveBytes.HashName\n  - System.Security.Cryptography.PasswordDeriveBytes.IterationCount\n  - System.Security.Cryptography.PasswordDeriveBytes.Reset\n  - System.Security.Cryptography.PasswordDeriveBytes.Salt\n  langs:\n  - csharp\n  name: PasswordDeriveBytes\n  nameWithType: PasswordDeriveBytes\n  fullName: System.Security.Cryptography.PasswordDeriveBytes\n  type: Class\n  summary: Derives a key from a password using an extension of the PBKDF1 algorithm.\n  remarks: \"This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password. The standard is documented in IETF RRC 2898.  \\n  \\n> [!IMPORTANT]\\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.\"\n  example:\n  - \"The following code example creates a key from a password using the PasswordDeriveBytes class.  \\n  \\n [!code-cs[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/csharp/t-system.security.crypto_118_1.cs)]\\n [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/cpp/t-system.security.crypto_118_1.cpp)]\\n [!code-vb[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/visualbasic/t-system.security.crypto_118_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.DeriveBytes\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.DeriveBytes.Dispose\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])\n  id: '#ctor(System.Byte[],System.Byte[])'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(Byte[],Byte[])\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class specifying the password and key salt to use to derive the key.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.\n  example:\n  - \"The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \\n  \\n [!code-cs[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/csharp/8efdb953-efaf-410f-a477-_1.cs)]\\n [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/cpp/8efdb953-efaf-410f-a477-_1.cpp)]\\n [!code-vb[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/visualbasic/8efdb953-efaf-410f-a477-_1.vb)]\"\n  syntax:\n    content: public PasswordDeriveBytes (byte[] password, byte[] salt);\n    parameters:\n    - id: password\n      type: System.Byte[]\n      description: The password to derive the key for.\n    - id: salt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])\n  id: '#ctor(System.String,System.Byte[])'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(String,Byte[])\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class with the password and key salt to use to derive the key.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.\n  syntax:\n    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);\n    parameters:\n    - id: strPassword\n      type: System.String\n      description: The password for which to derive the key.\n    - id: rgbSalt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(Byte[],Byte[],CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.\n  example:\n  - \"The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \\n  \\n [!code-cs[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/csharp/f3f1b81c-8ce8-40e8-90e6-_1.cs)]\\n [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/cpp/f3f1b81c-8ce8-40e8-90e6-_1.cpp)]\\n [!code-vb[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/visualbasic/f3f1b81c-8ce8-40e8-90e6-_1.vb)]\"\n  syntax:\n    content: public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);\n    parameters:\n    - id: password\n      type: System.Byte[]\n      description: The password to derive the key for.\n    - id: salt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n    - id: cspParams\n      type: System.Security.Cryptography.CspParameters\n      description: The cryptographic service provider (CSP) parameters for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(String,Byte[],CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.\n  syntax:\n    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);\n    parameters:\n    - id: strPassword\n      type: System.String\n      description: The password for which to derive the key.\n    - id: rgbSalt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n    - id: cspParams\n      type: System.Security.Cryptography.CspParameters\n      description: The CSP parameters for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)\n  id: '#ctor(System.Byte[],System.Byte[],System.String,System.Int32)'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class specifying the password, key salt, hash name, and iterations to use to derive the key.\n  remarks: \"> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.\"\n  syntax:\n    content: public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);\n    parameters:\n    - id: password\n      type: System.Byte[]\n      description: The password to derive the key for.\n    - id: salt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n    - id: hashName\n      type: System.String\n      description: The hash algorithm to use to derive the key.\n    - id: iterations\n      type: System.Int32\n      description: The iteration count to use to derive the key.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)\n  id: '#ctor(System.String,System.Byte[],System.String,System.Int32)'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(String,Byte[],String,Int32)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class with the password, key salt, hash name, and number of iterations to use to derive the key.\n  remarks: \"> [!IMPORTANT]\\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  \\n  \\n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.\"\n  syntax:\n    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);\n    parameters:\n    - id: strPassword\n      type: System.String\n      description: The password for which to derive the key.\n    - id: rgbSalt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n    - id: strHashName\n      type: System.String\n      description: The name of the hash algorithm for the operation.\n    - id: iterations\n      type: System.Int32\n      description: The number of iterations for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.\n  remarks: \"> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.\"\n  syntax:\n    content: public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);\n    parameters:\n    - id: password\n      type: System.Byte[]\n      description: The password to derive the key for.\n    - id: salt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n    - id: hashName\n      type: System.String\n      description: The hash algorithm to use to derive the key.\n    - id: iterations\n      type: System.Int32\n      description: The iteration count to use to derive the key.\n    - id: cspParams\n      type: System.Security.Cryptography.CspParameters\n      description: The cryptographic service provider (CSP) parameters for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.\n  remarks: \"> [!IMPORTANT]\\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  \\n  \\n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.\"\n  syntax:\n    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);\n    parameters:\n    - id: strPassword\n      type: System.String\n      description: The password for which to derive the key.\n    - id: rgbSalt\n      type: System.Byte[]\n      description: The key salt to use to derive the key.\n    - id: strHashName\n      type: System.String\n      description: The name of the hash algorithm for the operation.\n    - id: iterations\n      type: System.Int32\n      description: The number of iterations for the operation.\n    - id: cspParams\n      type: System.Security.Cryptography.CspParameters\n      description: The CSP parameters for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])\n  id: CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: CryptDeriveKey(String,String,Int32,Byte[])\n  nameWithType: PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Derives a cryptographic key from the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> object.\n  remarks: \"This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.  \\n  \\n If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \\n  \\n [!code-cs[Cryptography.PasswordDerivedbytes#2](~/add/codesnippet/csharp/328f02cb-e6f4-42b5-a006-_1.cs)]\\n [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/add/codesnippet/cpp/328f02cb-e6f4-42b5-a006-_1.cpp)]\\n [!code-vb[Cryptography.PasswordDerivedbytes#2](~/add/codesnippet/visualbasic/328f02cb-e6f4-42b5-a006-_1.vb)]\"\n  syntax:\n    content: public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);\n    parameters:\n    - id: algname\n      type: System.String\n      description: The algorithm name for which to derive the key.\n    - id: alghashname\n      type: System.String\n      description: The hash algorithm name to use to derive the key.\n    - id: keySize\n      type: System.Int32\n      description: The size of the key, in bits, to derive.\n    - id: rgbIV\n      type: System.Byte[]\n      description: The initialization vector (IV) to use to derive the key.\n    return:\n      type: System.Byte[]\n      description: The derived key.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The <code>keySize</code> parameter is incorrect.  \\n  \\n -or-  \\n  \\n The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The <code>algname</code> parameter is not a valid algorithm name.  \\n  \\n -or-  \\n  \\n The <code>alghashname</code> parameter is not a valid hash algorithm name.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: PasswordDeriveBytes.Dispose(Boolean)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.PasswordDeriveBytes\"></xref> class and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)\n  id: GetBytes(System.Int32)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: GetBytes(Int32)\n  nameWithType: PasswordDeriveBytes.GetBytes(Int32)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Returns pseudo-random key bytes.\n  remarks: This method can create any number of pseudo-random bytes. However, the strength of the byte sequence is limited by the number of bytes in the hash output.\n  syntax:\n    content: public override byte[] GetBytes (int cb);\n    parameters:\n    - id: cb\n      type: System.Int32\n      description: The number of pseudo-random key bytes to generate.\n    return:\n      type: System.Byte[]\n      description: A byte array filled with pseudo-random key bytes.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.GetBytes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName\n  id: HashName\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: HashName\n  nameWithType: PasswordDeriveBytes.HashName\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.HashName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the name of the hash algorithm for the operation.\n  syntax:\n    content: public string HashName { get; set; }\n    return:\n      type: System.String\n      description: The name of the hash algorithm for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.HashName*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The name of the hash value is fixed and an attempt is made to change this value.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount\n  id: IterationCount\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: IterationCount\n  nameWithType: PasswordDeriveBytes.IterationCount\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.IterationCount\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the number of iterations for the operation.\n  syntax:\n    content: public int IterationCount { get; set; }\n    return:\n      type: System.Int32\n      description: The number of iterations for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.IterationCount*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The number of iterations is fixed and an attempt is made to change this value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The property cannot be set because its value is out of range. This property requires a non-negative number.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset\n  id: Reset\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: PasswordDeriveBytes.Reset()\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Resets the state of the operation.\n  syntax:\n    content: public override void Reset ();\n    parameters: []\n  overload: System.Security.Cryptography.PasswordDeriveBytes.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt\n  id: Salt\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  langs:\n  - csharp\n  name: Salt\n  nameWithType: PasswordDeriveBytes.Salt\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.Salt\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the key salt value for the operation.\n  remarks: A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys. This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation. These random bytes are known as salt.\n  syntax:\n    content: public byte[] Salt { get; set; }\n    return:\n      type: System.Byte[]\n      description: The key salt value for the operation.\n  overload: System.Security.Cryptography.PasswordDeriveBytes.Salt*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key salt value is fixed and an attempt is made to change this value.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.DeriveBytes\n  isExternal: false\n  name: System.Security.Cryptography.DeriveBytes\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(Byte[],Byte[])\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(String,Byte[])\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(Byte[],Byte[],CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(String,Byte[],CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(String,Byte[],String,Int32)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)\n- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: CryptDeriveKey(String,String,Int32,Byte[])\n  nameWithType: PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: PasswordDeriveBytes.Dispose(Boolean)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: GetBytes(Int32)\n  nameWithType: PasswordDeriveBytes.GetBytes(Int32)\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)\n- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: HashName\n  nameWithType: PasswordDeriveBytes.HashName\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.HashName\n- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: IterationCount\n  nameWithType: PasswordDeriveBytes.IterationCount\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.IterationCount\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: Reset()\n  nameWithType: PasswordDeriveBytes.Reset()\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.Reset()\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: Salt\n  nameWithType: PasswordDeriveBytes.Salt\n  fullName: System.Security.Cryptography.PasswordDeriveBytes.Salt\n- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: PasswordDeriveBytes\n  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes\n- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: CryptDeriveKey\n  nameWithType: PasswordDeriveBytes.CryptDeriveKey\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: Dispose\n  nameWithType: PasswordDeriveBytes.Dispose\n- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: GetBytes\n  nameWithType: PasswordDeriveBytes.GetBytes\n- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: HashName\n  nameWithType: PasswordDeriveBytes.HashName\n- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: IterationCount\n  nameWithType: PasswordDeriveBytes.IterationCount\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: Reset\n  nameWithType: PasswordDeriveBytes.Reset\n- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt*\n  parent: System.Security.Cryptography.PasswordDeriveBytes\n  isExternal: false\n  name: Salt\n  nameWithType: PasswordDeriveBytes.Salt\n"}