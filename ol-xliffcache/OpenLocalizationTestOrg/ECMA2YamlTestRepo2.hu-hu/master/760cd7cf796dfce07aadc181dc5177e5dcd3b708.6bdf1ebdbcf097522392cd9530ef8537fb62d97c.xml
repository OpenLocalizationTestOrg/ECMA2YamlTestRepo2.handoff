{"nodes":[{"pos":[621,746],"content":"A type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"A type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler.","pos":[0,125]}]},{"pos":[759,1094],"content":"This application normally instantiate this class and then set the inner handler or provide an inner handler in the constructor.       Note that <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> property may be a delegating handler too. This approach allows the creation of handler stacks to process the HTTP response messages.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This application normally instantiate this class and then set the inner handler or provide an inner handler in the constructor.       Note that <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> property may be a delegating handler too. This approach allows the creation of handler stacks to process the HTTP response messages.","pos":[0,333],"nodes":[{"content":"This application normally instantiate this class and then set the inner handler or provide an inner handler in the constructor.","pos":[0,127]},{"content":"Note that &lt;xref:System.Net.Http.DelegatingHandler.InnerHandler%2A&gt; property may be a delegating handler too.","pos":[134,242],"source":"       Note that <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> property may be a delegating handler too."},{"content":"This approach allows the creation of handler stacks to process the HTTP response messages.","pos":[243,333]}]}]},{"pos":[1744,1835],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.DelegatingHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.Http.DelegatingHandler\"></xref> class."},{"pos":[1847,1942],"content":"The inner handle can be set using the <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The inner handle can be set using the &lt;xref:System.Net.Http.DelegatingHandler.InnerHandler%2A&gt;.","pos":[0,95],"source":"The inner handle can be set using the <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>."}]},{"pos":[2603,2724],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.DelegatingHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specific inner handler.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.Http.DelegatingHandler\"></xref> class with a specific inner handler."},{"pos":[2932,3013],"content":"The inner handler which is responsible for processing the HTTP response messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"The inner handler which is responsible for processing the HTTP response messages.","pos":[0,81]}]},{"pos":[3494,3644],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.DelegatingHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and optionally disposes of the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.DelegatingHandler\"></xref>, and optionally disposes of the managed resources."},{"pos":[3800,4010],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to releases only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources."},{"pos":[4461,4535],"content":"Gets or sets the inner handler which processes the HTTP response messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the inner handler which processes the HTTP response messages.","pos":[0,74]}]},{"pos":[4548,4877],"content":"This InnerHandler property can only be set before the class is used (the <xref:System.Net.Http.DelegatingHandler.SendAsync%2A> method is called).       Note that InnerHandler property may be a delegating handler too, although this is uncommon. This approach allows the creation of handler stacks for the HTTP response messages.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This InnerHandler property can only be set before the class is used (the <xref:System.Net.Http.DelegatingHandler.SendAsync%2A> method is called).       Note that InnerHandler property may be a delegating handler too, although this is uncommon. This approach allows the creation of handler stacks for the HTTP response messages.","pos":[0,327],"nodes":[{"content":"This InnerHandler property can only be set before the class is used (the &lt;xref:System.Net.Http.DelegatingHandler.SendAsync%2A&gt; method is called).","pos":[0,145],"source":"This InnerHandler property can only be set before the class is used (the <xref:System.Net.Http.DelegatingHandler.SendAsync%2A> method is called)."},{"content":"Note that InnerHandler property may be a delegating handler too, although this is uncommon.","pos":[152,243]},{"content":"This approach allows the creation of handler stacks for the HTTP response messages.","pos":[244,327]}]}]},{"pos":[5049,5094],"content":"The inner handler for HTTP response messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"The inner handler for HTTP response messages.","pos":[0,45]}]},{"pos":[5789,5883],"content":"Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.","pos":[0,94]}]},{"pos":[5896,6284],"content":"This operation does not block. This overridable implementation of <xref:System.Net.Http.HttpClientHandler.SendAsync%2A> method forwards the HTTP request to the inner handler to send to the server as an asynchronous operation.       The SendAsync method is mainly used by the system and not by applications. When this method is called, it calls the SendAsync method on the inner handler.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation does not block. This overridable implementation of <xref:System.Net.Http.HttpClientHandler.SendAsync%2A> method forwards the HTTP request to the inner handler to send to the server as an asynchronous operation.       The SendAsync method is mainly used by the system and not by applications. When this method is called, it calls the SendAsync method on the inner handler.","pos":[0,386],"nodes":[{"content":"This operation does not block.","pos":[0,30]},{"content":"This overridable implementation of &lt;xref:System.Net.Http.HttpClientHandler.SendAsync%2A&gt; method forwards the HTTP request to the inner handler to send to the server as an asynchronous operation.","pos":[31,225],"source":" This overridable implementation of <xref:System.Net.Http.HttpClientHandler.SendAsync%2A> method forwards the HTTP request to the inner handler to send to the server as an asynchronous operation."},{"content":"The SendAsync method is mainly used by the system and not by applications.","pos":[232,306]},{"content":"When this method is called, it calls the SendAsync method on the inner handler.","pos":[307,386]}]}]},{"pos":[6603,6650],"content":"The HTTP request message to send to the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP request message to send to the server.","pos":[0,47]}]},{"pos":[6745,6786],"content":"A cancellation token to cancel operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token to cancel operation.","pos":[0,41]}]},{"pos":[6895,6951],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[7125,7215],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>request</code> was <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.DelegatingHandler\n  id: DelegatingHandler\n  children:\n  - System.Net.Http.DelegatingHandler.#ctor\n  - System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)\n  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)\n  - System.Net.Http.DelegatingHandler.InnerHandler\n  - System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  name: DelegatingHandler\n  nameWithType: DelegatingHandler\n  fullName: System.Net.Http.DelegatingHandler\n  type: Class\n  summary: A type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler.\n  remarks: \"This application normally instantiate this class and then set the inner handler or provide an inner handler in the constructor.  \\n  \\n Note that <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> property may be a delegating handler too. This approach allows the creation of handler stacks to process the HTTP response messages.\"\n  syntax:\n    content: 'public abstract class DelegatingHandler : System.Net.Http.HttpMessageHandler'\n  inheritance:\n  - System.Object\n  - System.Net.Http.HttpMessageHandler\n  implements: []\n  inheritedMembers:\n  - System.Net.Http.HttpMessageHandler.Dispose\n  platform:\n  - net462\n- uid: System.Net.Http.DelegatingHandler.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.DelegatingHandler\n  langs:\n  - csharp\n  name: DelegatingHandler()\n  nameWithType: DelegatingHandler.DelegatingHandler()\n  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Creates a new instance of the <xref href=\"System.Net.Http.DelegatingHandler\"></xref> class.\n  remarks: The inner handle can be set using the <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>.\n  syntax:\n    content: protected DelegatingHandler ();\n    parameters: []\n  overload: System.Net.Http.DelegatingHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)\n  id: '#ctor(System.Net.Http.HttpMessageHandler)'\n  parent: System.Net.Http.DelegatingHandler\n  langs:\n  - csharp\n  name: DelegatingHandler(HttpMessageHandler)\n  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)\n  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Creates a new instance of the <xref href=\"System.Net.Http.DelegatingHandler\"></xref> class with a specific inner handler.\n  syntax:\n    content: protected DelegatingHandler (System.Net.Http.HttpMessageHandler innerHandler);\n    parameters:\n    - id: innerHandler\n      type: System.Net.Http.HttpMessageHandler\n      description: The inner handler which is responsible for processing the HTTP response messages.\n  overload: System.Net.Http.DelegatingHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.DelegatingHandler\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DelegatingHandler.Dispose(Boolean)\n  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Http.DelegatingHandler\"></xref>, and optionally disposes of the managed resources.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources.\n  overload: System.Net.Http.DelegatingHandler.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.DelegatingHandler.InnerHandler\n  id: InnerHandler\n  parent: System.Net.Http.DelegatingHandler\n  langs:\n  - csharp\n  name: InnerHandler\n  nameWithType: DelegatingHandler.InnerHandler\n  fullName: System.Net.Http.DelegatingHandler.InnerHandler\n  type: Property\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Gets or sets the inner handler which processes the HTTP response messages.\n  remarks: \"This InnerHandler property can only be set before the class is used (the <xref:System.Net.Http.DelegatingHandler.SendAsync%2A> method is called).  \\n  \\n Note that InnerHandler property may be a delegating handler too, although this is uncommon. This approach allows the creation of handler stacks for the HTTP response messages.\"\n  syntax:\n    content: public System.Net.Http.HttpMessageHandler InnerHandler { get; set; }\n    return:\n      type: System.Net.Http.HttpMessageHandler\n      description: The inner handler for HTTP response messages.\n  overload: System.Net.Http.DelegatingHandler.InnerHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.DelegatingHandler\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage,CancellationToken)\n  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)\n  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.\n  remarks: \"This operation does not block. This overridable implementation of <xref:System.Net.Http.HttpClientHandler.SendAsync%2A> method forwards the HTTP request to the inner handler to send to the server as an asynchronous operation.  \\n  \\n The SendAsync method is mainly used by the system and not by applications. When this method is called, it calls the SendAsync method on the inner handler.\"\n  syntax:\n    content: protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send to the server.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to cancel operation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.DelegatingHandler.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: System.Net.Http.HttpMessageHandler\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Net.Http.DelegatingHandler.#ctor\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: DelegatingHandler()\n  nameWithType: DelegatingHandler.DelegatingHandler()\n  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()\n- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: DelegatingHandler(HttpMessageHandler)\n  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)\n  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)\n- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DelegatingHandler.Dispose(Boolean)\n  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Http.DelegatingHandler.InnerHandler\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: InnerHandler\n  nameWithType: DelegatingHandler.InnerHandler\n  fullName: System.Net.Http.DelegatingHandler.InnerHandler\n- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: SendAsync(HttpRequestMessage,CancellationToken)\n  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)\n  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)\n- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<HttpResponseMessage>\n  nameWithType: Task<HttpResponseMessage>\n  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.Http.HttpResponseMessage>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    nameWithType: HttpResponseMessage\n    fullName: HttpResponseMessage\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpRequestMessage\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestMessage\n  nameWithType: HttpRequestMessage\n  fullName: System.Net.Http.HttpRequestMessage\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.Http.DelegatingHandler.#ctor*\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: DelegatingHandler\n  nameWithType: DelegatingHandler.DelegatingHandler\n- uid: System.Net.Http.DelegatingHandler.Dispose*\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: Dispose\n  nameWithType: DelegatingHandler.Dispose\n- uid: System.Net.Http.DelegatingHandler.InnerHandler*\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: InnerHandler\n  nameWithType: DelegatingHandler.InnerHandler\n- uid: System.Net.Http.DelegatingHandler.SendAsync*\n  parent: System.Net.Http.DelegatingHandler\n  isExternal: false\n  name: SendAsync\n  nameWithType: DelegatingHandler.SendAsync\n"}