{"nodes":[{"pos":[901,982],"content":"Implementation of a host service that mediates access from the build to the host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implementation of a host service that mediates access from the build to the host.","pos":[0,81]}]},{"pos":[994,1055],"content":"See also <xref:Microsoft.Build.Utilities.Task.HostObject%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"See also &lt;xref:Microsoft.Build.Utilities.Task.HostObject%2A&gt;.","pos":[0,61],"source":"See also <xref:Microsoft.Build.Utilities.Task.HostObject%2A>."}]},{"pos":[1660,1683],"content":"Creates a host service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a host service.","pos":[0,23]}]},{"pos":[2378,2491],"content":"Gets the host service for the given task where the task appears within a target and project with the given names.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the host service for the given task where the task appears within a target and project with the given names.","pos":[0,113]}]},{"pos":[2713,2742],"content":"The name of the project file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the project file.","pos":[0,29]}]},{"pos":[2809,2832],"content":"The name of the target.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the target.","pos":[0,23]}]},{"pos":[2897,2944],"content":"The task name associated with the host service.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task name associated with the host service.","pos":[0,47]}]},{"pos":[3024,3181],"content":"Returns the host service for the given task where the task appears within a target and project with the given names. If no host service exists, returns null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the host service for the given task where the task appears within a target and project with the given names. If no host service exists, returns null.","pos":[0,157],"nodes":[{"content":"Returns the host service for the given task where the task appears within a target and project with the given names.","pos":[0,116]},{"content":"If no host service exists, returns null.","pos":[117,157]}]}]},{"pos":[3730,3780],"content":"Gets the node affinity for the given project file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the node affinity for the given project file.","pos":[0,50]}]},{"pos":[3971,4013],"content":"The project file associated with the node.","needQuote":true,"needEscape":true,"nodes":[{"content":"The project file associated with the node.","pos":[0,42]}]},{"pos":[4096,4149],"content":"Returns the node affinity for the given project file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the node affinity for the given project file.","pos":[0,53]}]},{"pos":[4749,4816],"content":"Updates the host services table when a project is named or renamed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the host services table when a project is named or renamed.","pos":[0,67]}]},{"pos":[4828,4905],"content":"A project is named when it is given a new full path and the old path is null.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A project is named when it is given a new full path and the old path is null.","pos":[0,77]}]},{"pos":[5082,5119],"content":"The current path to the project file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current path to the project file.","pos":[0,37]}]},{"pos":[5187,5220],"content":"The new path to the project file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new path to the project file.","pos":[0,33]}]},{"pos":[5986,6041],"content":"Register a host service for the given task/target pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"Register a host service for the given task/target pair.","pos":[0,55]}]},{"pos":[6053,6090],"content":"Overwrites any existing host service.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Overwrites any existing host service.","pos":[0,37]}]},{"pos":[6334,6383],"content":"The project file containing the task/target pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"The project file containing the task/target pair.","pos":[0,49]}]},{"pos":[6450,6473],"content":"The name of the target.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the target.","pos":[0,23]}]},{"pos":[6538,6559],"content":"The name of the task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the task.","pos":[0,21]}]},{"pos":[6648,6665],"content":"The host service.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host service.","pos":[0,17]}]},{"pos":[7336,7386],"content":"Sets the node affinity for the given project file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the node affinity for the given project file.","pos":[0,50]}]},{"pos":[7596,7737],"content":"The project file. If set to String.Empty, all projects will use the given node affinity. If set to null, all node affinities will be cleared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The project file. If set to String.Empty, all projects will use the given node affinity. If set to null, all node affinities will be cleared.","pos":[0,141],"nodes":[{"content":"The project file.","pos":[0,17]},{"content":"If set to String.Empty, all projects will use the given node affinity.","pos":[18,88]},{"content":"If set to null, all node affinities will be cleared.","pos":[89,141]}]}]},{"pos":[7831,7849],"content":"The node affinity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The node affinity.","pos":[0,18]}]},{"pos":[8410,8506],"content":"Unregister the project's host objects, if any and remove any node affinities associated with it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unregister the project's host objects, if any and remove any node affinities associated with it.","pos":[0,96]}]},{"pos":[8673,8711],"content":"The path to the project to unregister.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path to the project to unregister.","pos":[0,38]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Execution.HostServices\n  id: HostServices\n  children:\n  - Microsoft.Build.Execution.HostServices.#ctor\n  - Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)\n  - Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)\n  - Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)\n  - Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)\n  - Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)\n  - Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)\n  langs:\n  - csharp\n  name: HostServices\n  nameWithType: HostServices\n  fullName: Microsoft.Build.Execution.HostServices\n  type: Class\n  summary: Implementation of a host service that mediates access from the build to the host.\n  remarks: See also <xref:Microsoft.Build.Utilities.Task.HostObject%2A>.\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"#Entries={hostObjectMap.Count}\")]\n\n      public class HostServices\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.#ctor\n  id: '#ctor'\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: HostServices()\n  nameWithType: HostServices.HostServices()\n  fullName: Microsoft.Build.Execution.HostServices.HostServices()\n  type: Constructor\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Creates a host service.\n  syntax:\n    content: public HostServices ();\n    parameters: []\n  overload: Microsoft.Build.Execution.HostServices.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)\n  id: GetHostObject(System.String,System.String,System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: GetHostObject(String,String,String)\n  nameWithType: HostServices.GetHostObject(String,String,String)\n  fullName: Microsoft.Build.Execution.HostServices.GetHostObject(String,String,String)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets the host service for the given task where the task appears within a target and project with the given names.\n  syntax:\n    content: public Microsoft.Build.Framework.ITaskHost GetHostObject (string projectFile, string targetName, string taskName);\n    parameters:\n    - id: projectFile\n      type: System.String\n      description: The name of the project file.\n    - id: targetName\n      type: System.String\n      description: The name of the target.\n    - id: taskName\n      type: System.String\n      description: The task name associated with the host service.\n    return:\n      type: Microsoft.Build.Framework.ITaskHost\n      description: Returns the host service for the given task where the task appears within a target and project with the given names. If no host service exists, returns null.\n  overload: Microsoft.Build.Execution.HostServices.GetHostObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)\n  id: GetNodeAffinity(System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: GetNodeAffinity(String)\n  nameWithType: HostServices.GetNodeAffinity(String)\n  fullName: Microsoft.Build.Execution.HostServices.GetNodeAffinity(String)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets the node affinity for the given project file.\n  syntax:\n    content: public Microsoft.Build.Execution.NodeAffinity GetNodeAffinity (string projectFile);\n    parameters:\n    - id: projectFile\n      type: System.String\n      description: The project file associated with the node.\n    return:\n      type: Microsoft.Build.Execution.NodeAffinity\n      description: Returns the node affinity for the given project file.\n  overload: Microsoft.Build.Execution.HostServices.GetNodeAffinity*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)\n  id: OnRenameProject(System.String,System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: OnRenameProject(String,String)\n  nameWithType: HostServices.OnRenameProject(String,String)\n  fullName: Microsoft.Build.Execution.HostServices.OnRenameProject(String,String)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Updates the host services table when a project is named or renamed.\n  remarks: A project is named when it is given a new full path and the old path is null.\n  syntax:\n    content: public void OnRenameProject (string oldFullPath, string newFullPath);\n    parameters:\n    - id: oldFullPath\n      type: System.String\n      description: The current path to the project file.\n    - id: newFullPath\n      type: System.String\n      description: The new path to the project file.\n  overload: Microsoft.Build.Execution.HostServices.OnRenameProject*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)\n  id: RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: RegisterHostObject(String,String,String,ITaskHost)\n  nameWithType: HostServices.RegisterHostObject(String,String,String,ITaskHost)\n  fullName: Microsoft.Build.Execution.HostServices.RegisterHostObject(String,String,String,ITaskHost)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Register a host service for the given task/target pair.\n  remarks: Overwrites any existing host service.\n  syntax:\n    content: public void RegisterHostObject (string projectFile, string targetName, string taskName, Microsoft.Build.Framework.ITaskHost hostObject);\n    parameters:\n    - id: projectFile\n      type: System.String\n      description: The project file containing the task/target pair.\n    - id: targetName\n      type: System.String\n      description: The name of the target.\n    - id: taskName\n      type: System.String\n      description: The name of the task.\n    - id: hostObject\n      type: Microsoft.Build.Framework.ITaskHost\n      description: The host service.\n  overload: Microsoft.Build.Execution.HostServices.RegisterHostObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)\n  id: SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: SetNodeAffinity(String,NodeAffinity)\n  nameWithType: HostServices.SetNodeAffinity(String,NodeAffinity)\n  fullName: Microsoft.Build.Execution.HostServices.SetNodeAffinity(String,NodeAffinity)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Sets the node affinity for the given project file.\n  syntax:\n    content: public void SetNodeAffinity (string projectFile, Microsoft.Build.Execution.NodeAffinity nodeAffinity);\n    parameters:\n    - id: projectFile\n      type: System.String\n      description: The project file. If set to String.Empty, all projects will use the given node affinity. If set to null, all node affinities will be cleared.\n    - id: nodeAffinity\n      type: Microsoft.Build.Execution.NodeAffinity\n      description: The node affinity.\n  overload: Microsoft.Build.Execution.HostServices.SetNodeAffinity*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)\n  id: UnregisterProject(System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  langs:\n  - csharp\n  name: UnregisterProject(String)\n  nameWithType: HostServices.UnregisterProject(String)\n  fullName: Microsoft.Build.Execution.HostServices.UnregisterProject(String)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Unregister the project's host objects, if any and remove any node affinities associated with it.\n  syntax:\n    content: public void UnregisterProject (string projectFullPath);\n    parameters:\n    - id: projectFullPath\n      type: System.String\n      description: The path to the project to unregister.\n  overload: Microsoft.Build.Execution.HostServices.UnregisterProject*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.Build.Execution.HostServices.#ctor\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: HostServices()\n  nameWithType: HostServices.HostServices()\n  fullName: Microsoft.Build.Execution.HostServices.HostServices()\n- uid: Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: GetHostObject(String,String,String)\n  nameWithType: HostServices.GetHostObject(String,String,String)\n  fullName: Microsoft.Build.Execution.HostServices.GetHostObject(String,String,String)\n- uid: Microsoft.Build.Framework.ITaskHost\n  parent: Microsoft.Build.Framework\n  isExternal: false\n  name: ITaskHost\n  nameWithType: ITaskHost\n  fullName: Microsoft.Build.Framework.ITaskHost\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: GetNodeAffinity(String)\n  nameWithType: HostServices.GetNodeAffinity(String)\n  fullName: Microsoft.Build.Execution.HostServices.GetNodeAffinity(String)\n- uid: Microsoft.Build.Execution.NodeAffinity\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: NodeAffinity\n  nameWithType: NodeAffinity\n  fullName: Microsoft.Build.Execution.NodeAffinity\n- uid: Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: OnRenameProject(String,String)\n  nameWithType: HostServices.OnRenameProject(String,String)\n  fullName: Microsoft.Build.Execution.HostServices.OnRenameProject(String,String)\n- uid: Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: RegisterHostObject(String,String,String,ITaskHost)\n  nameWithType: HostServices.RegisterHostObject(String,String,String,ITaskHost)\n  fullName: Microsoft.Build.Execution.HostServices.RegisterHostObject(String,String,String,ITaskHost)\n- uid: Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: SetNodeAffinity(String,NodeAffinity)\n  nameWithType: HostServices.SetNodeAffinity(String,NodeAffinity)\n  fullName: Microsoft.Build.Execution.HostServices.SetNodeAffinity(String,NodeAffinity)\n- uid: Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: UnregisterProject(String)\n  nameWithType: HostServices.UnregisterProject(String)\n  fullName: Microsoft.Build.Execution.HostServices.UnregisterProject(String)\n- uid: Microsoft.Build.Execution.HostServices.#ctor*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: HostServices\n  nameWithType: HostServices.HostServices\n- uid: Microsoft.Build.Execution.HostServices.GetHostObject*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: GetHostObject\n  nameWithType: HostServices.GetHostObject\n- uid: Microsoft.Build.Execution.HostServices.GetNodeAffinity*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: GetNodeAffinity\n  nameWithType: HostServices.GetNodeAffinity\n- uid: Microsoft.Build.Execution.HostServices.OnRenameProject*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: OnRenameProject\n  nameWithType: HostServices.OnRenameProject\n- uid: Microsoft.Build.Execution.HostServices.RegisterHostObject*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: RegisterHostObject\n  nameWithType: HostServices.RegisterHostObject\n- uid: Microsoft.Build.Execution.HostServices.SetNodeAffinity*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: SetNodeAffinity\n  nameWithType: HostServices.SetNodeAffinity\n- uid: Microsoft.Build.Execution.HostServices.UnregisterProject*\n  parent: Microsoft.Build.Execution.HostServices\n  isExternal: false\n  name: UnregisterProject\n  nameWithType: HostServices.UnregisterProject\n"}