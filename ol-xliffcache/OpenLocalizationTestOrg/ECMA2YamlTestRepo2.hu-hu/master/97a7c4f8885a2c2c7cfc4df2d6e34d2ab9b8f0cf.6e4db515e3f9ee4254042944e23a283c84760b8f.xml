{"nodes":[{"pos":[881,1102],"content":"Installs an executable containing classes that extend <xref href=\"System.ServiceProcess.ServiceBase\"></xref>. This class is called by installation utilities, such as InstallUtil.exe, when installing a service application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Installs an executable containing classes that extend <bpt id=\"p1\">&lt;xref href=\"System.ServiceProcess.ServiceBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,109],"source":"Installs an executable containing classes that extend <xref href=\"System.ServiceProcess.ServiceBase\"></xref>."},{"content":"This class is called by installation utilities, such as InstallUtil.exe, when installing a service application.","pos":[110,221]}]},{"pos":[1115,4319],"content":"The ServiceProcessInstaller does work common to all services in an executable. It is used by the installation utility to write registry values associated with services you want to install.       To install a service, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> on the class to `true`. Within your project, instantiate one ServiceProcessInstaller instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application. Finally, add the ServiceProcessInstaller instance and the <xref:System.ServiceProcess.ServiceInstaller> instances to your project installer class.       When InstallUtil.exe runs, the utility looks for classes in the service assembly with the <xref:System.ComponentModel.RunInstallerAttribute> set to `true`. Add classes to the service assembly by adding them to the <xref:System.Configuration.Install.Installer.Installers%2A> collection associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the install utility ignores the project installer.       For an instance of ServiceProcessInstaller, properties you can modify include specifying that a service application run under an account other than the logged-on user. You can specify a particular <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair under which the service should run, or you can use <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to specify that the service run under the computer's System account, a local or network service account, or a user account.      > [!NOTE] >  The computer's System account is not the same as the Administrator account.       Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.       An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the ServiceProcessInstaller instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility. It is usually unnecessary for your code to modify this state information explicitly.       Instantiating a ServiceProcessInstaller causes the base class constructor, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, to be called.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ServiceProcessInstaller does work common to all services in an executable.","pos":[0,78]},{"content":"It is used by the installation utility to write registry values associated with services you want to install.","pos":[79,188]},{"content":"To install a service, create a project installer class that inherits from &lt;xref:System.Configuration.Install.Installer&gt;, and set the &lt;xref:System.ComponentModel.RunInstallerAttribute&gt; on the class to <ph id=\"ph1\">`true`</ph>.","pos":[195,402],"source":"       To install a service, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> on the class to `true`."},{"content":"Within your project, instantiate one ServiceProcessInstaller instance per service application, and one &lt;xref:System.ServiceProcess.ServiceInstaller&gt; instance for each service in the application.","pos":[403,597],"source":" Within your project, instantiate one ServiceProcessInstaller instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application."},{"content":"Finally, add the ServiceProcessInstaller instance and the &lt;xref:System.ServiceProcess.ServiceInstaller&gt; instances to your project installer class.","pos":[598,744],"source":" Finally, add the ServiceProcessInstaller instance and the <xref:System.ServiceProcess.ServiceInstaller> instances to your project installer class."},{"content":"When InstallUtil.exe runs, the utility looks for classes in the service assembly with the &lt;xref:System.ComponentModel.RunInstallerAttribute&gt; set to <ph id=\"ph1\">`true`</ph>.","pos":[751,906],"source":"       When InstallUtil.exe runs, the utility looks for classes in the service assembly with the <xref:System.ComponentModel.RunInstallerAttribute> set to `true`."},{"content":"Add classes to the service assembly by adding them to the &lt;xref:System.Configuration.Install.Installer.Installers%2A&gt; collection associated with your project installer.","pos":[907,1075],"source":" Add classes to the service assembly by adding them to the <xref:System.Configuration.Install.Installer.Installers%2A> collection associated with your project installer."},{"content":"If &lt;xref:System.ComponentModel.RunInstallerAttribute&gt; is <ph id=\"ph1\">`false`</ph>, the install utility ignores the project installer.","pos":[1076,1192],"source":" If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the install utility ignores the project installer."},{"content":"For an instance of ServiceProcessInstaller, properties you can modify include specifying that a service application run under an account other than the logged-on user.","pos":[1199,1366]},{"content":"You can specify a particular &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; pair under which the service should run, or you can use &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt; to specify that the service run under the computer's System account, a local or network service account, or a user account.","pos":[1367,1773],"source":" You can specify a particular <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair under which the service should run, or you can use <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to specify that the service run under the computer's System account, a local or network service account, or a user account."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The computer's System account is not the same as the Administrator account.","pos":[1779,1867],"source":"      > [!NOTE] >  The computer's System account is not the same as the Administrator account."},{"content":"Normally, you do not call the methods on &lt;xref:System.ServiceProcess.ServiceInstaller&gt; within your code; they are generally called only by the install utility.","pos":[1874,2033],"source":"       Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility."},{"content":"The install utility automatically calls the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName&gt; and &lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName&gt; methods during the installation process.","pos":[2034,2293],"source":" The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process."},{"content":"It backs out failures, if necessary, by calling &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A&gt; (or &lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName&gt;) on all previously installed components.","pos":[2294,2534],"source":" It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components."},{"content":"An application's install routine maintains information automatically about the components already installed, using the project installer's &lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;.","pos":[2541,2762],"source":"       An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>."},{"content":"This state information is continuously updated as the ServiceProcessInstaller instance and each &lt;xref:System.ServiceProcess.ServiceInstaller&gt; instance is installed by the utility.","pos":[2763,2942],"source":" This state information is continuously updated as the ServiceProcessInstaller instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility."},{"content":"It is usually unnecessary for your code to modify this state information explicitly.","pos":[2943,3027]},{"content":"Instantiating a ServiceProcessInstaller causes the base class constructor, &lt;xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A&gt;, to be called.","pos":[3034,3189],"source":"       Instantiating a ServiceProcessInstaller causes the base class constructor, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, to be called."}]},{"pos":[9388,9491],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceProcess.ServiceProcessInstaller\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.ServiceProcess.ServiceProcessInstaller\"></xref> class."},{"pos":[10058,10135],"content":"Gets or sets the type of account under which to run this service application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the type of account under which to run this service application.","pos":[0,77]}]},{"pos":[10148,11209],"content":"When the Account property is `User`, the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> properties are used to define an account under which the service application runs.       The <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair allows the service to run under an account other than the system account. This can, for example, allow the service to start automatically at reboot, when no user is logged on. If you leave either the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> or <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> empty and set Account to `User`, you will be prompted for a valid user name and password at installation.       You can also specify that the service run under the local system account, or as a local or network service. See the <xref:System.ServiceProcess.ServiceAccount> enumeration for details on types of accounts.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the Account property is <ph id=\"ph1\">`User`</ph>, the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; properties are used to define an account under which the service application runs.","pos":[0,257],"source":"When the Account property is `User`, the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> properties are used to define an account under which the service application runs."},{"content":"The &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; pair allows the service to run under an account other than the system account.","pos":[264,480],"source":"       The <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair allows the service to run under an account other than the system account."},{"content":"This can, for example, allow the service to start automatically at reboot, when no user is logged on.","pos":[481,582]},{"content":"If you leave either the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; or &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; empty and set Account to <ph id=\"ph1\">`User`</ph>, you will be prompted for a valid user name and password at installation.","pos":[583,845],"source":" If you leave either the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> or <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> empty and set Account to `User`, you will be prompted for a valid user name and password at installation."},{"content":"You can also specify that the service run under the local system account, or as a local or network service.","pos":[852,959]},{"content":"See the &lt;xref:System.ServiceProcess.ServiceAccount&gt; enumeration for details on types of accounts.","pos":[960,1057],"source":" See the <xref:System.ServiceProcess.ServiceAccount> enumeration for details on types of accounts."}]},{"pos":[11380,11591],"content":"A <xref href=\"System.ServiceProcess.ServiceAccount\"></xref> that defines the type of account under which the system runs this service. The default is <xref uid=\"langword_csharp_User\" name=\"User\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ServiceProcess.ServiceAccount\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the type of account under which the system runs this service.","pos":[0,134],"source":"A <xref href=\"System.ServiceProcess.ServiceAccount\"></xref> that defines the type of account under which the system runs this service."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_User\" name=\"User\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[135,211],"source":" The default is <xref uid=\"langword_csharp_User\" name=\"User\" href=\"\"></xref>."}]},{"pos":[12235,12474],"content":"Implements the base class <ph id=\"ph1\">&amp;lt;</ph>xref:System.Configuration.Install.ComponentInstaller.CopyFromComponent%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method with no <bpt id=\"p1\">&lt;xref href=\"System.ServiceProcess.ServiceProcessInstaller\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class-specific behavior.","needQuote":true,"needEscape":true,"source":"Implements the base class &lt;xref:System.Configuration.Install.ComponentInstaller.CopyFromComponent%2A?displayProperty=fullName&gt; method with no <xref href=\"System.ServiceProcess.ServiceProcessInstaller\"></xref> class-specific behavior."},{"pos":[12486,12811],"content":"This method should not be called within your code. The base class method on <xref:System.Configuration.Install.ComponentInstaller> is `abstract`, so it is implemented here on the derived class. However, there is no <xref:System.ServiceProcess.ServiceProcessInstaller> class-specific processing in the method's implementation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should not be called within your code.","pos":[0,50]},{"content":"The base class method on &lt;xref:System.Configuration.Install.ComponentInstaller&gt; is <ph id=\"ph1\">`abstract`</ph>, so it is implemented here on the derived class.","pos":[51,193],"source":" The base class method on <xref:System.Configuration.Install.ComponentInstaller> is `abstract`, so it is implemented here on the derived class."},{"content":"However, there is no &lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt; class-specific processing in the method's implementation.","pos":[194,325],"source":" However, there is no <xref:System.ServiceProcess.ServiceProcessInstaller> class-specific processing in the method's implementation."}]},{"pos":[13010,13104],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the service process.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that represents the service process."},{"pos":[13611,13669],"content":"Gets help text displayed for service installation options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets help text displayed for service installation options.","pos":[0,58]}]},{"pos":[13681,13813],"content":"This help text can be used when a service starts manually. It indicates to the user how to enter user name and password information.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This help text can be used when a service starts manually. It indicates to the user how to enter user name and password information.","pos":[0,132],"nodes":[{"content":"This help text can be used when a service starts manually.","pos":[0,58]},{"content":"It indicates to the user how to enter user name and password information.","pos":[59,132]}]}]},{"pos":[13935,14080],"content":"Help text that provides a description of the steps for setting the user name and password in order to run the service under a particular account.","needQuote":true,"needEscape":true,"nodes":[{"content":"Help text that provides a description of the steps for setting the user name and password in order to run the service under a particular account.","pos":[0,145]}]},{"pos":[14674,14834],"content":"Writes service application information to the registry. This method is meant to be used by installation tools, which call the appropriate methods automatically.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes service application information to the registry. This method is meant to be used by installation tools, which call the appropriate methods automatically.","pos":[0,160],"nodes":[{"content":"Writes service application information to the registry.","pos":[0,55]},{"content":"This method is meant to be used by installation tools, which call the appropriate methods automatically.","pos":[56,160]}]}]},{"pos":[14847,16796],"content":"Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceProcessInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the Install method during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> on all previously installed components. This method passes the installation to the base class <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName> method.       Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the Install and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components       An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information, passed into Install as the `stateSaver` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility. It is usually unnecessary for your code to modify this state information explicitly.       Install passes to the calling method any exceptions thrown by base class methods or <xref:System.Configuration.Install.Installer.BeforeInstall> / <xref:System.Configuration.Install.Installer.AfterInstall> event handlers.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Normally, you do not call the methods on &lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt; within your code; they are generally called only by the install utility.","pos":[0,166],"source":"Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceProcessInstaller> within your code; they are generally called only by the install utility."},{"content":"The install utility automatically calls the Install method during the installation process.","pos":[167,258]},{"content":"It backs out failures, if necessary, by calling &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A&gt; on all previously installed components.","pos":[259,411],"source":" It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> on all previously installed components."},{"content":"This method passes the installation to the base class &lt;xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName&gt; method.","pos":[412,555],"source":" This method passes the installation to the base class <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName> method."},{"content":"Normally, you will not call the methods on &lt;xref:System.ServiceProcess.ServiceInstaller&gt; within your code; they are generally called only by the install utility.","pos":[562,723],"source":"       Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility."},{"content":"The install utility automatically calls the Install and &lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName&gt; methods during the installation process.","pos":[724,902],"source":" The install utility automatically calls the Install and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process."},{"content":"It backs out failures, if necessary, by calling &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A&gt; (or &lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName&gt;) on all previously installed components       An application's install routine maintains information automatically about the components already installed, using the project installer's &lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;.","pos":[903,1370],"source":" It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components       An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>."},{"content":"This state information, passed into Install as the <ph id=\"ph1\">`stateSaver`</ph> parameter, is continuously updated as the &lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt; instance and each &lt;xref:System.ServiceProcess.ServiceInstaller&gt; instance is installed by the utility.","pos":[1371,1631],"source":" This state information, passed into Install as the `stateSaver` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility."},{"content":"It is usually unnecessary for your code to modify this state information explicitly.","pos":[1632,1716]},{"content":"Install passes to the calling method any exceptions thrown by base class methods or &lt;xref:System.Configuration.Install.Installer.BeforeInstall&gt; / &lt;xref:System.Configuration.Install.Installer.AfterInstall&gt; event handlers.","pos":[1723,1943],"source":"       Install passes to the calling method any exceptions thrown by base class methods or <xref:System.Configuration.Install.Installer.BeforeInstall> / <xref:System.Configuration.Install.Installer.AfterInstall> event handlers."}]},{"pos":[16994,17106],"content":"An <xref:System.Collections.IDictionary> that contains the context information associated with the installation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IDictionary&gt; that contains the context information associated with the installation.","pos":[0,112],"source":"An <xref:System.Collections.IDictionary> that contains the context information associated with the installation."}]},{"pos":[17282,17374],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stateSaver</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>stateSaver</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17787,17887],"content":"Gets or sets the password associated with the user account under which the service application runs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the password associated with the user account under which the service application runs.","pos":[0,100]}]},{"pos":[17900,19651],"content":"The Password and <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> pair allows the service to run under an account other than the system account. This can, for example, allow the service to start automatically at reboot, when no user is logged on.       Password and <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) or other location with public access.       Setting the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and Password allows an account to be associated automatically with the service at install time. If you leave either the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> or Password empty and set <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to `User`, you will be prompted for a valid user name and password at installation.       Another option for running a service under a separate account is to use the computer's System account. That account, which is distinct from the Administrator account, requires no password. The System account's privileges may exceed those of the user currently logged in. Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires       If <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> is any value other than `User`, the specifed account (local or network service, or local system) is used, even if the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and Password properties are populated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Password and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; pair allows the service to run under an account other than the system account.","pos":[0,160],"source":"The Password and <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> pair allows the service to run under an account other than the system account."},{"content":"This can, for example, allow the service to start automatically at reboot, when no user is logged on.","pos":[161,262]},{"content":"Password and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's &lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;) or other location with public access.","pos":[269,587],"source":"       Password and <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) or other location with public access."},{"content":"Setting the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; and Password allows an account to be associated automatically with the service at install time.","pos":[594,766],"source":"       Setting the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and Password allows an account to be associated automatically with the service at install time."},{"content":"If you leave either the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; or Password empty and set &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt; to <ph id=\"ph1\">`User`</ph>, you will be prompted for a valid user name and password at installation.","pos":[767,1029],"source":" If you leave either the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> or Password empty and set <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to `User`, you will be prompted for a valid user name and password at installation."},{"content":"Another option for running a service under a separate account is to use the computer's System account.","pos":[1036,1138]},{"content":"That account, which is distinct from the Administrator account, requires no password.","pos":[1139,1224]},{"content":"The System account's privileges may exceed those of the user currently logged in.","pos":[1225,1306]},{"content":"Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires       If &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt; is any value other than <ph id=\"ph1\">`User`</ph>, the specifed account (local or network service, or local system) is used, even if the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A&gt; and Password properties are populated.","pos":[1307,1743],"source":" Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires       If <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> is any value other than `User`, the specifed account (local or network service, or local system) is used, even if the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and Password properties are populated."}]},{"pos":[19770,19936],"content":"The password associated with the account under which the service should run. The default is an empty string (\"\"). The property is not public, and is never serialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The password associated with the account under which the service should run. The default is an empty string (\"\"). The property is not public, and is never serialized.","pos":[0,166],"nodes":[{"content":"The password associated with the account under which the service should run.","pos":[0,76]},{"content":"The default is an empty string (\"\").","pos":[77,113]},{"content":"The property is not public, and is never serialized.","pos":[114,166]}]}]},{"pos":[20535,20740],"content":"Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.","pos":[0,205],"nodes":[{"content":"Rolls back service application information written to the registry by the installation procedure.","pos":[0,97]},{"content":"This method is meant to be used by installation tools, which process the appropriate methods automatically.","pos":[98,205]}]}]},{"pos":[20753,22000],"content":"Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceProcessInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> method during the installation process. It backs out failures, if necessary, by calling Rollback on the object that generated the exception.       An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information, passed into Rollback as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility. It is usually unnecessary for your code to modify this state information explicitly.       Rollback passes to the calling method any exceptions thrown by base class methods or <xref:System.Configuration.Install.Installer.BeforeInstall> / <xref:System.Configuration.Install.Installer.AfterInstall> event handlers.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Normally, you do not call the methods on &lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt; within your code; they are generally called only by the install utility.","pos":[0,166],"source":"Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceProcessInstaller> within your code; they are generally called only by the install utility."},{"content":"The install utility automatically calls the &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName&gt; method during the installation process.","pos":[167,339],"source":" The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> method during the installation process."},{"content":"It backs out failures, if necessary, by calling Rollback on the object that generated the exception.","pos":[340,440]},{"content":"An application's install routine maintains information automatically about the components already installed, using the project installer's &lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;.","pos":[447,668],"source":"       An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>."},{"content":"This state information, passed into Rollback as the <ph id=\"ph1\">`savedState`</ph> parameter, is continuously updated as the &lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt; instance and each &lt;xref:System.ServiceProcess.ServiceInstaller&gt; instance is installed by the utility.","pos":[669,930],"source":" This state information, passed into Rollback as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility."},{"content":"It is usually unnecessary for your code to modify this state information explicitly.","pos":[931,1015]},{"content":"Rollback passes to the calling method any exceptions thrown by base class methods or &lt;xref:System.Configuration.Install.Installer.BeforeInstall&gt; / &lt;xref:System.Configuration.Install.Installer.AfterInstall&gt; event handlers.","pos":[1022,1243],"source":"       Rollback passes to the calling method any exceptions thrown by base class methods or <xref:System.Configuration.Install.Installer.BeforeInstall> / <xref:System.Configuration.Install.Installer.AfterInstall> event handlers."}]},{"pos":[22199,22311],"content":"An <xref:System.Collections.IDictionary> that contains the context information associated with the installation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IDictionary&gt; that contains the context information associated with the installation.","pos":[0,112],"source":"An <xref:System.Collections.IDictionary> that contains the context information associated with the installation."}]},{"pos":[22489,22666],"content":"The <code>savedState</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       The <code>savedState</code> is corrupted or non-existent.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">savedState</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,92],"source":"The <code>savedState</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">savedState</ph><ept id=\"p1\">&lt;/code&gt;</ept> is corrupted or non-existent.","pos":[99,167],"source":"       -or-       The <code>savedState</code> is corrupted or non-existent."}]},{"pos":[23080,23155],"content":"Gets or sets the user account under which the service application will run.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the user account under which the service application will run.","pos":[0,75]}]},{"pos":[23168,24920],"content":"The Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair allows the service to run under an account other than the system account. This can, for example, allow the service to start automatically at reboot, when no user is logged on.       <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> and Username are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) or other location with public access.       Setting the Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> allows an account to be associated automatically with the service at install time. If you leave either the Username or <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> empty and set <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to `User`, you will be prompted for a valid user name and password at installation.       Another option for running a service under a separate account is to use the computer's System account. That account, which is distinct from the Administrator account, requires no password. The System account's privileges may exceed those of the user currently logged in. Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires       If <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> is any value other than `User`, the specified account (local or network service, or local system) is used, even if the Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> properties are populated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Username and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; pair allows the service to run under an account other than the system account.","pos":[0,160],"source":"The Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair allows the service to run under an account other than the system account."},{"content":"This can, for example, allow the service to start automatically at reboot, when no user is logged on.","pos":[161,262]},{"content":"&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; and Username are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's &lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;) or other location with public access.","pos":[269,587],"source":"       <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> and Username are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) or other location with public access."},{"content":"Setting the Username and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; allows an account to be associated automatically with the service at install time.","pos":[594,766],"source":"       Setting the Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> allows an account to be associated automatically with the service at install time."},{"content":"If you leave either the Username or &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; empty and set &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt; to <ph id=\"ph1\">`User`</ph>, you will be prompted for a valid user name and password at installation.","pos":[767,1029],"source":" If you leave either the Username or <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> empty and set <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to `User`, you will be prompted for a valid user name and password at installation."},{"content":"Another option for running a service under a separate account is to use the computer's System account.","pos":[1036,1138]},{"content":"That account, which is distinct from the Administrator account, requires no password.","pos":[1139,1224]},{"content":"The System account's privileges may exceed those of the user currently logged in.","pos":[1225,1306]},{"content":"Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires       If &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt; is any value other than <ph id=\"ph1\">`User`</ph>, the specified account (local or network service, or local system) is used, even if the Username and &lt;xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A&gt; properties are populated.","pos":[1307,1744],"source":" Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires       If <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> is any value other than `User`, the specified account (local or network service, or local system) is used, even if the Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> properties are populated."}]},{"pos":[25039,25123],"content":"The account under which the service should run. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The account under which the service should run. The default is an empty string (\"\").","pos":[0,84],"nodes":[{"content":"The account under which the service should run.","pos":[0,47]},{"content":"The default is an empty string (\"\").","pos":[48,84]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceProcess.ServiceProcessInstaller\n  id: ServiceProcessInstaller\n  children:\n  - System.ServiceProcess.ServiceProcessInstaller.#ctor\n  - System.ServiceProcess.ServiceProcessInstaller.Account\n  - System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  - System.ServiceProcess.ServiceProcessInstaller.HelpText\n  - System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)\n  - System.ServiceProcess.ServiceProcessInstaller.Password\n  - System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)\n  - System.ServiceProcess.ServiceProcessInstaller.Username\n  langs:\n  - csharp\n  name: ServiceProcessInstaller\n  nameWithType: ServiceProcessInstaller\n  fullName: System.ServiceProcess.ServiceProcessInstaller\n  type: Class\n  summary: Installs an executable containing classes that extend <xref href=\"System.ServiceProcess.ServiceBase\"></xref>. This class is called by installation utilities, such as InstallUtil.exe, when installing a service application.\n  remarks: \"The ServiceProcessInstaller does work common to all services in an executable. It is used by the installation utility to write registry values associated with services you want to install.  \\n  \\n To install a service, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> on the class to `true`. Within your project, instantiate one ServiceProcessInstaller instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application. Finally, add the ServiceProcessInstaller instance and the <xref:System.ServiceProcess.ServiceInstaller> instances to your project installer class.  \\n  \\n When InstallUtil.exe runs, the utility looks for classes in the service assembly with the <xref:System.ComponentModel.RunInstallerAttribute> set to `true`. Add classes to the service assembly by adding them to the <xref:System.Configuration.Install.Installer.Installers%2A> collection associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the install utility ignores the project installer.  \\n  \\n For an instance of ServiceProcessInstaller, properties you can modify include specifying that a service application run under an account other than the logged-on user. You can specify a particular <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair under which the service should run, or you can use <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to specify that the service run under the computer's System account, a local or network service account, or a user account.  \\n  \\n> [!NOTE]\\n>  The computer's System account is not the same as the Administrator account.  \\n  \\n Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \\n  \\n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the ServiceProcessInstaller instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility. It is usually unnecessary for your code to modify this state information explicitly.  \\n  \\n Instantiating a ServiceProcessInstaller causes the base class constructor, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, to be called.\"\n  example:\n  - \"The following example creates a project installer called MyProjectInstaller, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \\\"Hello-World Service 1\\\" and \\\"Hello-World Service 2\\\". Within the constructor for MyProjectInstaller (which would be called by the install utility), <xref:System.ServiceProcess.ServiceInstaller> objects are created for each service, and a ServiceProcessInstaller is created for the executable. For the install utility to recognize MyProjectInstaller as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \\n  \\n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses MyProjectInstaller, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each object can be backed out in turn in case of an installation failure.  \\n  \\n Normally, you would not instantiate your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute>, but the install utility actually calls, and therefore instantiates, the class.  \\n  \\n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._0_1.cpp)]\\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._0_1.cs)]\\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._0_1.vb)]\"\n  syntax:\n    content: 'public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Configuration.Install.Installer\n  - System.Configuration.Install.ComponentInstaller\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  - System.Configuration.Install.Installer.AfterInstall\n  - System.Configuration.Install.Installer.AfterRollback\n  - System.Configuration.Install.Installer.AfterUninstall\n  - System.Configuration.Install.Installer.BeforeInstall\n  - System.Configuration.Install.Installer.BeforeRollback\n  - System.Configuration.Install.Installer.BeforeUninstall\n  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Committed\n  - System.Configuration.Install.Installer.Committing\n  - System.Configuration.Install.Installer.Context\n  - System.Configuration.Install.Installer.Installers\n  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Parent\n  - System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor\n  id: '#ctor'\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: ServiceProcessInstaller()\n  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()\n  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()\n  type: Constructor\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Creates a new instance of the <xref href=\"System.ServiceProcess.ServiceProcessInstaller\"></xref> class.\n  syntax:\n    content: public ServiceProcessInstaller ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceProcessInstaller.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.Account\n  id: Account\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: Account\n  nameWithType: ServiceProcessInstaller.Account\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Account\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets the type of account under which to run this service application.\n  remarks: \"When the Account property is `User`, the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> properties are used to define an account under which the service application runs.  \\n  \\n The <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair allows the service to run under an account other than the system account. This can, for example, allow the service to start automatically at reboot, when no user is logged on. If you leave either the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> or <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> empty and set Account to `User`, you will be prompted for a valid user name and password at installation.  \\n  \\n You can also specify that the service run under the local system account, or as a local or network service. See the <xref:System.ServiceProcess.ServiceAccount> enumeration for details on types of accounts.\"\n  syntax:\n    content: public System.ServiceProcess.ServiceAccount Account { get; set; }\n    return:\n      type: System.ServiceProcess.ServiceAccount\n      description: A <xref href=\"System.ServiceProcess.ServiceAccount\"></xref> that defines the type of account under which the system runs this service. The default is <xref uid=\"langword_csharp_User\" name=\"User\" href=\"\"></xref>.\n  overload: System.ServiceProcess.ServiceProcessInstaller.Account*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  id: CopyFromComponent(System.ComponentModel.IComponent)\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: CopyFromComponent(IComponent)\n  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)\n  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Implements the base class &lt;xref:System.Configuration.Install.ComponentInstaller.CopyFromComponent%2A?displayProperty=fullName&gt; method with no <xref href=\"System.ServiceProcess.ServiceProcessInstaller\"></xref> class-specific behavior.\n  remarks: This method should not be called within your code. The base class method on <xref:System.Configuration.Install.ComponentInstaller> is `abstract`, so it is implemented here on the derived class. However, there is no <xref:System.ServiceProcess.ServiceProcessInstaller> class-specific processing in the method's implementation.\n  syntax:\n    content: public override void CopyFromComponent (System.ComponentModel.IComponent comp);\n    parameters:\n    - id: comp\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> that represents the service process.\n  overload: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText\n  id: HelpText\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: HelpText\n  nameWithType: ServiceProcessInstaller.HelpText\n  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets help text displayed for service installation options.\n  remarks: This help text can be used when a service starts manually. It indicates to the user how to enter user name and password information.\n  syntax:\n    content: public override string HelpText { get; }\n    return:\n      type: System.String\n      description: Help text that provides a description of the steps for setting the user name and password in order to run the service under a particular account.\n  overload: System.ServiceProcess.ServiceProcessInstaller.HelpText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)\n  id: Install(System.Collections.IDictionary)\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: Install(IDictionary)\n  nameWithType: ServiceProcessInstaller.Install(IDictionary)\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Writes service application information to the registry. This method is meant to be used by installation tools, which call the appropriate methods automatically.\n  remarks: \"Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceProcessInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the Install method during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> on all previously installed components. This method passes the installation to the base class <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName> method.  \\n  \\n Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the Install and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components  \\n  \\n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information, passed into Install as the `stateSaver` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility. It is usually unnecessary for your code to modify this state information explicitly.  \\n  \\n Install passes to the calling method any exceptions thrown by base class methods or <xref:System.Configuration.Install.Installer.BeforeInstall> / <xref:System.Configuration.Install.Installer.AfterInstall> event handlers.\"\n  syntax:\n    content: public override void Install (System.Collections.IDictionary stateSaver);\n    parameters:\n    - id: stateSaver\n      type: System.Collections.IDictionary\n      description: An <xref:System.Collections.IDictionary> that contains the context information associated with the installation.\n  overload: System.ServiceProcess.ServiceProcessInstaller.Install*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>stateSaver</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.Password\n  id: Password\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: Password\n  nameWithType: ServiceProcessInstaller.Password\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Password\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets the password associated with the user account under which the service application runs.\n  remarks: \"The Password and <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> pair allows the service to run under an account other than the system account. This can, for example, allow the service to start automatically at reboot, when no user is logged on.  \\n  \\n Password and <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) or other location with public access.  \\n  \\n Setting the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and Password allows an account to be associated automatically with the service at install time. If you leave either the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> or Password empty and set <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to `User`, you will be prompted for a valid user name and password at installation.  \\n  \\n Another option for running a service under a separate account is to use the computer's System account. That account, which is distinct from the Administrator account, requires no password. The System account's privileges may exceed those of the user currently logged in. Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires  \\n  \\n If <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> is any value other than `User`, the specifed account (local or network service, or local system) is used, even if the <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> and Password properties are populated.\"\n  syntax:\n    content: public string Password { get; set; }\n    return:\n      type: System.String\n      description: The password associated with the account under which the service should run. The default is an empty string (\"\"). The property is not public, and is never serialized.\n  overload: System.ServiceProcess.ServiceProcessInstaller.Password*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)\n  id: Rollback(System.Collections.IDictionary)\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: Rollback(IDictionary)\n  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.\n  remarks: \"Normally, you do not call the methods on <xref:System.ServiceProcess.ServiceProcessInstaller> within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> method during the installation process. It backs out failures, if necessary, by calling Rollback on the object that generated the exception.  \\n  \\n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information, passed into Rollback as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility. It is usually unnecessary for your code to modify this state information explicitly.  \\n  \\n Rollback passes to the calling method any exceptions thrown by base class methods or <xref:System.Configuration.Install.Installer.BeforeInstall> / <xref:System.Configuration.Install.Installer.AfterInstall> event handlers.\"\n  syntax:\n    content: public override void Rollback (System.Collections.IDictionary savedState);\n    parameters:\n    - id: savedState\n      type: System.Collections.IDictionary\n      description: An <xref:System.Collections.IDictionary> that contains the context information associated with the installation.\n  overload: System.ServiceProcess.ServiceProcessInstaller.Rollback*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>savedState</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>savedState</code> is corrupted or non-existent.\"\n  platform:\n  - net462\n- uid: System.ServiceProcess.ServiceProcessInstaller.Username\n  id: Username\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  langs:\n  - csharp\n  name: Username\n  nameWithType: ServiceProcessInstaller.Username\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Username\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets the user account under which the service application will run.\n  remarks: \"The Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pair allows the service to run under an account other than the system account. This can, for example, allow the service to start automatically at reboot, when no user is logged on.  \\n  \\n <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> and Username are handled in a secure manner in that they are never serialized or saved to the install state (the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) or other location with public access.  \\n  \\n Setting the Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> allows an account to be associated automatically with the service at install time. If you leave either the Username or <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> empty and set <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> to `User`, you will be prompted for a valid user name and password at installation.  \\n  \\n Another option for running a service under a separate account is to use the computer's System account. That account, which is distinct from the Administrator account, requires no password. The System account's privileges may exceed those of the user currently logged in. Running under the System account rather than a user account avoids problems resulting from the user lacking a permission the service requires  \\n  \\n If <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> is any value other than `User`, the specified account (local or network service, or local system) is used, even if the Username and <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> properties are populated.\"\n  syntax:\n    content: public string Username { get; set; }\n    return:\n      type: System.String\n      description: The account under which the service should run. The default is an empty string (\"\").\n  overload: System.ServiceProcess.ServiceProcessInstaller.Username*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: System.Configuration.Install.ComponentInstaller\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: ServiceProcessInstaller()\n  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()\n  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()\n- uid: System.ServiceProcess.ServiceProcessInstaller.Account\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Account\n  nameWithType: ServiceProcessInstaller.Account\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Account\n- uid: System.ServiceProcess.ServiceAccount\n  parent: System.ServiceProcess\n  isExternal: false\n  name: ServiceAccount\n  nameWithType: ServiceAccount\n  fullName: System.ServiceProcess.ServiceAccount\n- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: CopyFromComponent(IComponent)\n  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)\n  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: HelpText\n  nameWithType: ServiceProcessInstaller.HelpText\n  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Install(IDictionary)\n  nameWithType: ServiceProcessInstaller.Install(IDictionary)\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.ServiceProcess.ServiceProcessInstaller.Password\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Password\n  nameWithType: ServiceProcessInstaller.Password\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Password\n- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Rollback(IDictionary)\n  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)\n- uid: System.ServiceProcess.ServiceProcessInstaller.Username\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Username\n  nameWithType: ServiceProcessInstaller.Username\n  fullName: System.ServiceProcess.ServiceProcessInstaller.Username\n- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: ServiceProcessInstaller\n  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller\n- uid: System.ServiceProcess.ServiceProcessInstaller.Account*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Account\n  nameWithType: ServiceProcessInstaller.Account\n- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: CopyFromComponent\n  nameWithType: ServiceProcessInstaller.CopyFromComponent\n- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: HelpText\n  nameWithType: ServiceProcessInstaller.HelpText\n- uid: System.ServiceProcess.ServiceProcessInstaller.Install*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Install\n  nameWithType: ServiceProcessInstaller.Install\n- uid: System.ServiceProcess.ServiceProcessInstaller.Password*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Password\n  nameWithType: ServiceProcessInstaller.Password\n- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Rollback\n  nameWithType: ServiceProcessInstaller.Rollback\n- uid: System.ServiceProcess.ServiceProcessInstaller.Username*\n  parent: System.ServiceProcess.ServiceProcessInstaller\n  isExternal: false\n  name: Username\n  nameWithType: ServiceProcessInstaller.Username\n"}