{"nodes":[{"pos":[1424,1461],"content":"Represents a three-dimensional plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a three-dimensional plane.","pos":[0,37]}]},{"pos":[2015,2116],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from a specified four-dimensional vector.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Numerics.Plane\"></xref> object from a specified four-dimensional vector."},{"pos":[2273,2447],"content":"A vector whose first three elements describe the normal vector, and whose <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector4\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> defines the distance along that normal from the origin.","needQuote":true,"needEscape":true,"source":"A vector whose first three elements describe the normal vector, and whose <xref href=\"System.Numerics.Vector4\"></xref> defines the distance along that normal from the origin."},{"pos":[2932,3066],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from a specified normal and the distance along the normal from the origin.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Numerics.Plane\"></xref> object from a specified normal and the distance along the normal from the origin."},{"pos":[3234,3260],"content":"The plane's normal vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plane's normal vector.","pos":[0,26]}]},{"pos":[3318,3379],"content":"The plane's distance from the origin along its normal vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plane's distance from the origin along its normal vector.","pos":[0,61]}]},{"pos":[3939,4094],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Numerics.Plane\"></xref> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal."},{"pos":[4242,4272],"content":"The X component of the normal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X component of the normal.","pos":[0,30]}]},{"pos":[4330,4360],"content":"The Y component of the normal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y component of the normal.","pos":[0,30]}]},{"pos":[4418,4448],"content":"The Z component of the normal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Z component of the normal.","pos":[0,30]}]},{"pos":[4506,4565],"content":"The distance of the plane along its normal from the origin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance of the plane along its normal from the origin.","pos":[0,59]}]},{"pos":[5203,5300],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains three specified points.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Numerics.Plane\"></xref> object that contains three specified points."},{"pos":[5565,5600],"content":"The first point defining the plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point defining the plane.","pos":[0,35]}]},{"pos":[5673,5709],"content":"The second point defining the plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second point defining the plane.","pos":[0,36]}]},{"pos":[5782,5817],"content":"The third point defining the plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The third point defining the plane.","pos":[0,35]}]},{"pos":[5883,5921],"content":"The plane containing the three points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plane containing the three points.","pos":[0,38]}]},{"pos":[6265,6324],"content":"The distance of the plane along its normal from the origin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance of the plane along its normal from the origin.","pos":[0,59]}]},{"pos":[6421,6433],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6873,6938],"content":"Calculates the dot product of a plane and a 4-dimensional vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the dot product of a plane and a 4-dimensional vector.","pos":[0,65]}]},{"pos":[7133,7143],"content":"The plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plane.","pos":[0,10]}]},{"pos":[7215,7243],"content":"The four-dimensional vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The four-dimensional vector.","pos":[0,28]}]},{"pos":[7301,7317],"content":"The dot product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dot product.","pos":[0,16]}]},{"pos":[7846,8030],"content":"Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane.D\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) value of the plane.","needQuote":true,"needEscape":true,"source":"Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<xref href=\"System.Numerics.Plane.D\"></xref>) value of the plane."},{"pos":[8235,8245],"content":"The plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plane.","pos":[0,10]}]},{"pos":[8317,8342],"content":"The 3-dimensional vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 3-dimensional vector.","pos":[0,25]}]},{"pos":[8400,8416],"content":"The dot product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dot product.","pos":[0,16]}]},{"pos":[8935,9078],"content":"Returns the dot product of a specified three-dimensional vector and the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane.Normal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> vector of this plane.","needQuote":true,"needEscape":true,"source":"Returns the dot product of a specified three-dimensional vector and the <xref href=\"System.Numerics.Plane.Normal\"></xref> vector of this plane."},{"pos":[9279,9289],"content":"The plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plane.","pos":[0,10]}]},{"pos":[9361,9390],"content":"The three-dimensional vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The three-dimensional vector.","pos":[0,29]}]},{"pos":[9448,9464],"content":"The dot product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dot product.","pos":[0,16]}]},{"pos":[9892,9980],"content":"Returns a value that indicates whether this instance and another plane object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and another plane object are equal.","pos":[0,88]}]},{"pos":[9992,10131],"content":"Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Two &lt;xref:System.Numerics.Plane&gt; objects are equal if their &lt;xref:System.Numerics.Plane&gt; and &lt;xref:System.Numerics.Plane&gt; fields are equal.","pos":[0,139],"source":"Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal."}]},{"pos":[10290,10306],"content":"The other plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other plane.","pos":[0,16]}]},{"pos":[10365,10529],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two planes are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two planes are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10941,11027],"content":"Returns a value that indicates whether this instance and a specified object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and a specified object are equal.","pos":[0,86]}]},{"pos":[11039,11228],"content":"The current instance and <ph id=\"ph1\">`obj`</ph> are equal if <ph id=\"ph2\">`obj`</ph> is a &lt;xref:System.Numerics.Plane&gt; object and their &lt;xref:System.Numerics.Plane.Normal&gt; and &lt;xref:System.Numerics.Plane.D&gt; fields are equal.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Plane> object and their <xref:System.Numerics.Plane.Normal> and <xref:System.Numerics.Plane.D> fields are equal."},{"pos":[11369,11417],"content":"The object to compare with the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with the current instance.","pos":[0,48]}]},{"pos":[11476,11887],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept><bpt id=\"p4\">&lt;xref uid=\"langword_csharp_\" name=\"\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,243],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the method returns <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[244,411],"source":" If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[12276,12316],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[12451,12465],"content":"The hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code.","pos":[0,14]}]},{"pos":[12827,12858],"content":"The normal vector of the plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normal vector of the plane.","pos":[0,31]}]},{"pos":[12988,13000],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13398,13529],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object whose normal vector is the source plane's normal vector normalized.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Numerics.Plane\"></xref> object whose normal vector is the source plane's normal vector normalized."},{"pos":[13715,13732],"content":"The source plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source plane.","pos":[0,17]}]},{"pos":[13798,13819],"content":"The normalized plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normalized plane.","pos":[0,21]}]},{"pos":[14336,14396],"content":"Returns a value that indicates whether two planes are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether two planes are equal.","pos":[0,60]}]},{"pos":[14409,14665],"content":"Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal.       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Plane> objects.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal.       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Plane> objects.","pos":[0,254],"nodes":[{"content":"Two &lt;xref:System.Numerics.Plane&gt; objects are equal if their &lt;xref:System.Numerics.Plane&gt; and &lt;xref:System.Numerics.Plane&gt; fields are equal.","pos":[0,139],"source":"Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal."},{"content":"The Equality method defines the operation of the equality operator for &lt;xref:System.Numerics.Plane&gt; objects.","pos":[146,254],"source":"       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Plane> objects."}]}]},{"pos":[14869,14896],"content":"The first plane to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first plane to compare.","pos":[0,27]}]},{"pos":[14967,14995],"content":"The second plane to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second plane to compare.","pos":[0,28]}]},{"pos":[15054,15247],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value1</code> and <code>value2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15776,15840],"content":"Returns a value that indicates whether two planes are not equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether two planes are not equal.","pos":[0,64]}]},{"pos":[15852,15964],"content":"The Inequality method defines the operation of the inequality operator for <xref:System.Numerics.Plane> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Inequality method defines the operation of the inequality operator for &lt;xref:System.Numerics.Plane&gt; objects.","pos":[0,112],"source":"The Inequality method defines the operation of the inequality operator for <xref:System.Numerics.Plane> objects."}]},{"pos":[16169,16196],"content":"The first plane to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first plane to compare.","pos":[0,27]}]},{"pos":[16267,16295],"content":"The second plane to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second plane to compare.","pos":[0,28]}]},{"pos":[16354,16551],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p3\">&lt;/code&gt;</ept> are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16932,16987],"content":"Returns the string representation of this plane object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of this plane object.","pos":[0,55]}]},{"pos":[16999,17360],"content":"The string representation of a <xref:System.Numerics.Plane> object use the formatting conventions of the current culture to format the numeric values in the returned string. For example, a <xref:System.Numerics.Plane> object whose string representation is formatted by using the conventions of the en-US culture might appear as `{Normal:<1.1, 2.2, 3.3> D:4.4}`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The string representation of a &lt;xref:System.Numerics.Plane&gt; object use the formatting conventions of the current culture to format the numeric values in the returned string.","pos":[0,173],"source":"The string representation of a <xref:System.Numerics.Plane> object use the formatting conventions of the current culture to format the numeric values in the returned string."},{"content":"For example, a &lt;xref:System.Numerics.Plane&gt; object whose string representation is formatted by using the conventions of the en-US culture might appear as <ph id=\"ph1\">`{Normal:&lt;1.1, 2.2, 3.3&gt; D:4.4}`</ph>.","pos":[174,361],"source":" For example, a <xref:System.Numerics.Plane> object whose string representation is formatted by using the conventions of the en-US culture might appear as `{Normal:<1.1, 2.2, 3.3> D:4.4}`."}]},{"pos":[17496,17576],"content":"A string that represents this <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Plane\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A string that represents this <xref href=\"System.Numerics.Plane\"></xref> object."},{"pos":[18100,18146],"content":"Transforms a normalized plane by a 4x4 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a normalized plane by a 4x4 matrix.","pos":[0,46]}]},{"pos":[18159,18289],"content":"<ph id=\"ph1\">`plane`</ph> must already be normalized so that its &lt;xref:System.Numerics.Plane&gt; vector is of unit length before this method is called.","needQuote":false,"needEscape":true,"extradata":"MT","source":"`plane` must already be normalized so that its <xref:System.Numerics.Plane> vector is of unit length before this method is called."},{"pos":[18510,18544],"content":"The normalized plane to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normalized plane to transform.","pos":[0,34]}]},{"pos":[18619,18665],"content":"The transformation matrix to apply to <ph id=\"ph1\">`plane`</ph>.","needQuote":true,"needEscape":true,"source":"The transformation matrix to apply to `plane`."},{"pos":[18731,18753],"content":"The transformed plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed plane.","pos":[0,22]}]},{"pos":[19283,19338],"content":"Transforms a normalized plane by a Quaternion rotation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a normalized plane by a Quaternion rotation.","pos":[0,55]}]},{"pos":[19351,19481],"content":"<ph id=\"ph1\">`plane`</ph> must already be normalized so that its &lt;xref:System.Numerics.Plane&gt; vector is of unit length before this method is called.","needQuote":false,"needEscape":true,"extradata":"MT","source":"`plane` must already be normalized so that its <xref:System.Numerics.Plane> vector is of unit length before this method is called."},{"pos":[19705,19739],"content":"The normalized plane to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normalized plane to transform.","pos":[0,34]}]},{"pos":[19817,19863],"content":"The Quaternion rotation to apply to the plane.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Quaternion rotation to apply to the plane.","pos":[0,46]}]},{"pos":[19929,19992],"content":"A new plane that results from applying the Quaternion rotation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new plane that results from applying the Quaternion rotation.","pos":[0,63]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Numerics.Plane\n  id: Plane\n  children:\n  - System.Numerics.Plane.#ctor(System.Numerics.Vector4)\n  - System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\n  - System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Plane.D\n  - System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  - System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  - System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  - System.Numerics.Plane.Equals(System.Numerics.Plane)\n  - System.Numerics.Plane.Equals(System.Object)\n  - System.Numerics.Plane.GetHashCode\n  - System.Numerics.Plane.Normal\n  - System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  - System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  - System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  - System.Numerics.Plane.ToString\n  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  langs:\n  - csharp\n  name: Plane\n  nameWithType: Plane\n  fullName: System.Numerics.Plane\n  type: Struct\n  summary: Represents a three-dimensional plane.\n  syntax:\n    content: 'public struct Plane : IEquatable<System.Numerics.Plane>'\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Numerics.Plane>\n  platform:\n  - net462\n- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)\n  id: '#ctor(System.Numerics.Vector4)'\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Plane(Vector4)\n  nameWithType: Plane.Plane(Vector4)\n  fullName: System.Numerics.Plane.Plane(Vector4)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a <xref href=\"System.Numerics.Plane\"></xref> object from a specified four-dimensional vector.\n  syntax:\n    content: public Plane (System.Numerics.Vector4 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector4\n      description: A vector whose first three elements describe the normal vector, and whose <xref href=\"System.Numerics.Vector4\"></xref> defines the distance along that normal from the origin.\n  overload: System.Numerics.Plane.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)\n  id: '#ctor(System.Numerics.Vector3,System.Single)'\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Plane(Vector3,Single)\n  nameWithType: Plane.Plane(Vector3,Single)\n  fullName: System.Numerics.Plane.Plane(Vector3,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a <xref href=\"System.Numerics.Plane\"></xref> object from a specified normal and the distance along the normal from the origin.\n  syntax:\n    content: public Plane (System.Numerics.Vector3 normal, float d);\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector3\n      description: The plane's normal vector.\n    - id: d\n      type: System.Single\n      description: The plane's distance from the origin along its normal vector.\n  overload: System.Numerics.Plane.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Plane(Single,Single,Single,Single)\n  nameWithType: Plane.Plane(Single,Single,Single,Single)\n  fullName: System.Numerics.Plane.Plane(Single,Single,Single,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a <xref href=\"System.Numerics.Plane\"></xref> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.\n  syntax:\n    content: public Plane (float x, float y, float z, float d);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The X component of the normal.\n    - id: y\n      type: System.Single\n      description: The Y component of the normal.\n    - id: z\n      type: System.Single\n      description: The Z component of the normal.\n    - id: d\n      type: System.Single\n      description: The distance of the plane along its normal from the origin.\n  overload: System.Numerics.Plane.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  id: CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: CreateFromVertices(Vector3,Vector3,Vector3)\n  nameWithType: Plane.CreateFromVertices(Vector3,Vector3,Vector3)\n  fullName: System.Numerics.Plane.CreateFromVertices(Vector3,Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a <xref href=\"System.Numerics.Plane\"></xref> object that contains three specified points.\n  syntax:\n    content: public static System.Numerics.Plane CreateFromVertices (System.Numerics.Vector3 point1, System.Numerics.Vector3 point2, System.Numerics.Vector3 point3);\n    parameters:\n    - id: point1\n      type: System.Numerics.Vector3\n      description: The first point defining the plane.\n    - id: point2\n      type: System.Numerics.Vector3\n      description: The second point defining the plane.\n    - id: point3\n      type: System.Numerics.Vector3\n      description: The third point defining the plane.\n    return:\n      type: System.Numerics.Plane\n      description: The plane containing the three points.\n  overload: System.Numerics.Plane.CreateFromVertices*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.D\n  id: D\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: D\n  nameWithType: Plane.D\n  fullName: System.Numerics.Plane.D\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The distance of the plane along its normal from the origin.\n  syntax:\n    content: public float D;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  id: Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Dot(Plane,Vector4)\n  nameWithType: Plane.Dot(Plane,Vector4)\n  fullName: System.Numerics.Plane.Dot(Plane,Vector4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Calculates the dot product of a plane and a 4-dimensional vector.\n  syntax:\n    content: public static float Dot (System.Numerics.Plane plane, System.Numerics.Vector4 value);\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: The plane.\n    - id: value\n      type: System.Numerics.Vector4\n      description: The four-dimensional vector.\n    return:\n      type: System.Single\n      description: The dot product.\n  overload: System.Numerics.Plane.Dot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  id: DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: DotCoordinate(Plane,Vector3)\n  nameWithType: Plane.DotCoordinate(Plane,Vector3)\n  fullName: System.Numerics.Plane.DotCoordinate(Plane,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<xref href=\"System.Numerics.Plane.D\"></xref>) value of the plane.\n  syntax:\n    content: public static float DotCoordinate (System.Numerics.Plane plane, System.Numerics.Vector3 value);\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: The plane.\n    - id: value\n      type: System.Numerics.Vector3\n      description: The 3-dimensional vector.\n    return:\n      type: System.Single\n      description: The dot product.\n  overload: System.Numerics.Plane.DotCoordinate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  id: DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: DotNormal(Plane,Vector3)\n  nameWithType: Plane.DotNormal(Plane,Vector3)\n  fullName: System.Numerics.Plane.DotNormal(Plane,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the dot product of a specified three-dimensional vector and the <xref href=\"System.Numerics.Plane.Normal\"></xref> vector of this plane.\n  syntax:\n    content: public static float DotNormal (System.Numerics.Plane plane, System.Numerics.Vector3 value);\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: The plane.\n    - id: value\n      type: System.Numerics.Vector3\n      description: The three-dimensional vector.\n    return:\n      type: System.Single\n      description: The dot product.\n  overload: System.Numerics.Plane.DotNormal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)\n  id: Equals(System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Equals(Plane)\n  nameWithType: Plane.Equals(Plane)\n  fullName: System.Numerics.Plane.Equals(Plane)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and another plane object are equal.\n  remarks: Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal.\n  syntax:\n    content: public bool Equals (System.Numerics.Plane other);\n    parameters:\n    - id: other\n      type: System.Numerics.Plane\n      description: The other plane.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two planes are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Plane.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Plane.Equals(Object)\n  fullName: System.Numerics.Plane.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and a specified object are equal.\n  remarks: The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Plane> object and their <xref:System.Numerics.Plane.Normal> and <xref:System.Numerics.Plane.D> fields are equal.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with the current instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Plane.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Plane.GetHashCode()\n  fullName: System.Numerics.Plane.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code.\n  overload: System.Numerics.Plane.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Normal\n  id: Normal\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Normal\n  nameWithType: Plane.Normal\n  fullName: System.Numerics.Plane.Normal\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The normal vector of the plane.\n  syntax:\n    content: public System.Numerics.Vector3 Normal;\n    return:\n      type: System.Numerics.Vector3\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  id: Normalize(System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Normalize(Plane)\n  nameWithType: Plane.Normalize(Plane)\n  fullName: System.Numerics.Plane.Normalize(Plane)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a new <xref href=\"System.Numerics.Plane\"></xref> object whose normal vector is the source plane's normal vector normalized.\n  syntax:\n    content: public static System.Numerics.Plane Normalize (System.Numerics.Plane value);\n    parameters:\n    - id: value\n      type: System.Numerics.Plane\n      description: The source plane.\n    return:\n      type: System.Numerics.Plane\n      description: The normalized plane.\n  overload: System.Numerics.Plane.Normalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  id: op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: op_Equality(Plane,Plane)\n  nameWithType: Plane.op_Equality(Plane,Plane)\n  fullName: System.Numerics.Plane.op_Equality(Plane,Plane)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two planes are equal.\n  remarks: \"Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal.  \\n  \\n The Equality method defines the operation of the equality operator for <xref:System.Numerics.Plane> objects.\"\n  syntax:\n    content: public static bool op_Equality (System.Numerics.Plane value1, System.Numerics.Plane value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Plane\n      description: The first plane to compare.\n    - id: value2\n      type: System.Numerics.Plane\n      description: The second plane to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value1</code> and <code>value2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Plane.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  id: op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: op_Inequality(Plane,Plane)\n  nameWithType: Plane.op_Inequality(Plane,Plane)\n  fullName: System.Numerics.Plane.op_Inequality(Plane,Plane)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two planes are not equal.\n  remarks: The Inequality method defines the operation of the inequality operator for <xref:System.Numerics.Plane> objects.\n  syntax:\n    content: public static bool op_Inequality (System.Numerics.Plane value1, System.Numerics.Plane value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Plane\n      description: The first plane to compare.\n    - id: value2\n      type: System.Numerics.Plane\n      description: The second plane to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Plane.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.ToString\n  id: ToString\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Plane.ToString()\n  fullName: System.Numerics.Plane.ToString()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of this plane object.\n  remarks: The string representation of a <xref:System.Numerics.Plane> object use the formatting conventions of the current culture to format the numeric values in the returned string. For example, a <xref:System.Numerics.Plane> object whose string representation is formatted by using the conventions of the en-US culture might appear as `{Normal:<1.1, 2.2, 3.3> D:4.4}`.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents this <xref href=\"System.Numerics.Plane\"></xref> object.\n  overload: System.Numerics.Plane.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  id: Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Transform(Plane,Matrix4x4)\n  nameWithType: Plane.Transform(Plane,Matrix4x4)\n  fullName: System.Numerics.Plane.Transform(Plane,Matrix4x4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a normalized plane by a 4x4 matrix.\n  remarks: '`plane` must already be normalized so that its <xref:System.Numerics.Plane> vector is of unit length before this method is called.'\n  syntax:\n    content: public static System.Numerics.Plane Transform (System.Numerics.Plane plane, System.Numerics.Matrix4x4 matrix);\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: The normalized plane to transform.\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: The transformation matrix to apply to `plane`.\n    return:\n      type: System.Numerics.Plane\n      description: The transformed plane.\n  overload: System.Numerics.Plane.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  id: Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  name: Transform(Plane,Quaternion)\n  nameWithType: Plane.Transform(Plane,Quaternion)\n  fullName: System.Numerics.Plane.Transform(Plane,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a normalized plane by a Quaternion rotation.\n  remarks: '`plane` must already be normalized so that its <xref:System.Numerics.Plane> vector is of unit length before this method is called.'\n  syntax:\n    content: public static System.Numerics.Plane Transform (System.Numerics.Plane plane, System.Numerics.Quaternion rotation);\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: The normalized plane to transform.\n    - id: rotation\n      type: System.Numerics.Quaternion\n      description: The Quaternion rotation to apply to the plane.\n    return:\n      type: System.Numerics.Plane\n      description: A new plane that results from applying the Quaternion rotation.\n  overload: System.Numerics.Plane.Transform*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Plane(Vector4)\n  nameWithType: Plane.Plane(Vector4)\n  fullName: System.Numerics.Plane.Plane(Vector4)\n- uid: System.Numerics.Vector4\n  parent: System.Numerics\n  isExternal: false\n  name: Vector4\n  nameWithType: Vector4\n  fullName: System.Numerics.Vector4\n- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Plane(Vector3,Single)\n  nameWithType: Plane.Plane(Vector3,Single)\n  fullName: System.Numerics.Plane.Plane(Vector3,Single)\n- uid: System.Numerics.Vector3\n  parent: System.Numerics\n  isExternal: false\n  name: Vector3\n  nameWithType: Vector3\n  fullName: System.Numerics.Vector3\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Plane(Single,Single,Single,Single)\n  nameWithType: Plane.Plane(Single,Single,Single,Single)\n  fullName: System.Numerics.Plane.Plane(Single,Single,Single,Single)\n- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: CreateFromVertices(Vector3,Vector3,Vector3)\n  nameWithType: Plane.CreateFromVertices(Vector3,Vector3,Vector3)\n  fullName: System.Numerics.Plane.CreateFromVertices(Vector3,Vector3,Vector3)\n- uid: System.Numerics.Plane\n  parent: System.Numerics\n  isExternal: false\n  name: Plane\n  nameWithType: Plane\n  fullName: System.Numerics.Plane\n- uid: System.Numerics.Plane.D\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: D\n  nameWithType: Plane.D\n  fullName: System.Numerics.Plane.D\n- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Dot(Plane,Vector4)\n  nameWithType: Plane.Dot(Plane,Vector4)\n  fullName: System.Numerics.Plane.Dot(Plane,Vector4)\n- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: DotCoordinate(Plane,Vector3)\n  nameWithType: Plane.DotCoordinate(Plane,Vector3)\n  fullName: System.Numerics.Plane.DotCoordinate(Plane,Vector3)\n- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: DotNormal(Plane,Vector3)\n  nameWithType: Plane.DotNormal(Plane,Vector3)\n  fullName: System.Numerics.Plane.DotNormal(Plane,Vector3)\n- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Equals(Plane)\n  nameWithType: Plane.Equals(Plane)\n  fullName: System.Numerics.Plane.Equals(Plane)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Numerics.Plane.Equals(System.Object)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Plane.Equals(Object)\n  fullName: System.Numerics.Plane.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Numerics.Plane.GetHashCode\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Plane.GetHashCode()\n  fullName: System.Numerics.Plane.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Numerics.Plane.Normal\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Normal\n  nameWithType: Plane.Normal\n  fullName: System.Numerics.Plane.Normal\n- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Normalize(Plane)\n  nameWithType: Plane.Normalize(Plane)\n  fullName: System.Numerics.Plane.Normalize(Plane)\n- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: op_Equality(Plane,Plane)\n  nameWithType: Plane.op_Equality(Plane,Plane)\n  fullName: System.Numerics.Plane.op_Equality(Plane,Plane)\n- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: op_Inequality(Plane,Plane)\n  nameWithType: Plane.op_Inequality(Plane,Plane)\n  fullName: System.Numerics.Plane.op_Inequality(Plane,Plane)\n- uid: System.Numerics.Plane.ToString\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: ToString()\n  nameWithType: Plane.ToString()\n  fullName: System.Numerics.Plane.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Transform(Plane,Matrix4x4)\n  nameWithType: Plane.Transform(Plane,Matrix4x4)\n  fullName: System.Numerics.Plane.Transform(Plane,Matrix4x4)\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  nameWithType: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Transform(Plane,Quaternion)\n  nameWithType: Plane.Transform(Plane,Quaternion)\n  fullName: System.Numerics.Plane.Transform(Plane,Quaternion)\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  nameWithType: Quaternion\n  fullName: System.Numerics.Quaternion\n- uid: System.Numerics.Plane.#ctor*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Plane\n  nameWithType: Plane.Plane\n- uid: System.Numerics.Plane.CreateFromVertices*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: CreateFromVertices\n  nameWithType: Plane.CreateFromVertices\n- uid: System.Numerics.Plane.Dot*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Dot\n  nameWithType: Plane.Dot\n- uid: System.Numerics.Plane.DotCoordinate*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: DotCoordinate\n  nameWithType: Plane.DotCoordinate\n- uid: System.Numerics.Plane.DotNormal*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: DotNormal\n  nameWithType: Plane.DotNormal\n- uid: System.Numerics.Plane.Equals*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Equals\n  nameWithType: Plane.Equals\n- uid: System.Numerics.Plane.GetHashCode*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Plane.GetHashCode\n- uid: System.Numerics.Plane.Normalize*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Normalize\n  nameWithType: Plane.Normalize\n- uid: System.Numerics.Plane.op_Equality*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: op_Equality\n  nameWithType: Plane.op_Equality\n- uid: System.Numerics.Plane.op_Inequality*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Plane.op_Inequality\n- uid: System.Numerics.Plane.ToString*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: ToString\n  nameWithType: Plane.ToString\n- uid: System.Numerics.Plane.Transform*\n  parent: System.Numerics.Plane\n  isExternal: false\n  name: Transform\n  nameWithType: Plane.Transform\n"}