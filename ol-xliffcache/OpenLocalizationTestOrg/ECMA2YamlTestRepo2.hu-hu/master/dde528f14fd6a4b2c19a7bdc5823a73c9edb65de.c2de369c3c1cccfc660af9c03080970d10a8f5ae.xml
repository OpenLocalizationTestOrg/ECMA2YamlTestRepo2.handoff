{"nodes":[{"pos":[364,518],"content":"Represents a handle that has been registered when calling <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a handle that has been registered when calling <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>. This class cannot be inherited.","pos":[0,154],"nodes":[{"content":"Represents a handle that has been registered when calling &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*&gt;.","pos":[0,122],"source":"Represents a handle that has been registered when calling <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>."},{"content":"This class cannot be inherited.","pos":[123,154]}]}]},{"pos":[3858,3979],"content":"Cancels a registered wait operation issued by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels a registered wait operation issued by the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*&gt; method.","pos":[0,121],"source":"Cancels a registered wait operation issued by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*> method."}]},{"pos":[3991,4374],"content":"If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered. If a callback method is in progress when Unregister executes, `waitObject` is not signaled until the callback method completes. In particular, if a callback method executes Unregister, `waitObject` is not signaled until that callback method completes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`waitObject`</ph> is specified, it is signaled only if the &lt;xref:System.Threading.RegisteredWaitHandle&gt; is successfully unregistered.","pos":[0,131],"source":"If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered."},{"content":"If a callback method is in progress when Unregister executes, <ph id=\"ph1\">`waitObject`</ph> is not signaled until the callback method completes.","pos":[132,259],"source":" If a callback method is in progress when Unregister executes, `waitObject` is not signaled until the callback method completes."},{"content":"In particular, if a callback method executes Unregister, <ph id=\"ph1\">`waitObject`</ph> is not signaled until that callback method completes.","pos":[260,383],"source":" In particular, if a callback method executes Unregister, `waitObject` is not signaled until that callback method completes."}]},{"pos":[6980,7034],"content":"The <xref:System.Threading.WaitHandle> to be signaled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Threading.WaitHandle&gt; to be signaled.","pos":[0,54],"source":"The <xref:System.Threading.WaitHandle> to be signaled."}]},{"pos":[7093,7254],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the function succeeds; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the function succeeds; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.RegisteredWaitHandle\n  id: RegisteredWaitHandle\n  children:\n  - System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)\n  langs:\n  - csharp\n  name: RegisteredWaitHandle\n  nameWithType: RegisteredWaitHandle\n  fullName: System.Threading.RegisteredWaitHandle\n  type: Class\n  summary: Represents a handle that has been registered when calling <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>. This class cannot be inherited.\n  remarks: ''\n  example:\n  - \"The following example shows how to use a RegisteredWaitHandle to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.  \\n  \\n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \\n  \\n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The RegisteredWaitHandle that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the RegisteredWaitHandle.  \\n  \\n In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.  \\n  \\n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked. The `WaitProc` method tests RegisteredWaitHandle to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the RegisteredWaitHandle, stopping additional callbacks. In the case of a time-out, the task continues to wait. The `WaitProc` method ends by printing a message to the console.  \\n  \\n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.regis_1.cs)]\\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.regis_1.cpp)]\\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.regis_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RegisteredWaitHandle : MarshalByRefObject\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)\n  id: Unregister(System.Threading.WaitHandle)\n  parent: System.Threading.RegisteredWaitHandle\n  langs:\n  - csharp\n  name: Unregister(WaitHandle)\n  nameWithType: RegisteredWaitHandle.Unregister(WaitHandle)\n  fullName: System.Threading.RegisteredWaitHandle.Unregister(WaitHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Cancels a registered wait operation issued by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*> method.\n  remarks: If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered. If a callback method is in progress when Unregister executes, `waitObject` is not signaled until the callback method completes. In particular, if a callback method executes Unregister, `waitObject` is not signaled until that callback method completes.\n  example:\n  - \"The following example shows how to use the Unregister method to unregister a task if a callback occurred because the wait handle was signaled.  \\n  \\n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \\n  \\n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \\n  \\n In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.  \\n  \\n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks. In the case of a time-out, the task continues to wait. The `WaitProc` method ends by printing a message to the console.  \\n  \\n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/m-system.threading.regis_1.cs)]\\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/m-system.threading.regis_1.cpp)]\\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/m-system.threading.regis_1.vb)]\"\n  syntax:\n    content: public bool Unregister (System.Threading.WaitHandle waitObject);\n    parameters:\n    - id: waitObject\n      type: System.Threading.WaitHandle\n      description: The <xref:System.Threading.WaitHandle> to be signaled.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the function succeeds; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.RegisteredWaitHandle.Unregister*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)\n  parent: System.Threading.RegisteredWaitHandle\n  isExternal: false\n  name: Unregister(WaitHandle)\n  nameWithType: RegisteredWaitHandle.Unregister(WaitHandle)\n  fullName: System.Threading.RegisteredWaitHandle.Unregister(WaitHandle)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: true\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.RegisteredWaitHandle.Unregister*\n  parent: System.Threading.RegisteredWaitHandle\n  isExternal: false\n  name: Unregister\n  nameWithType: RegisteredWaitHandle.Unregister\n"}