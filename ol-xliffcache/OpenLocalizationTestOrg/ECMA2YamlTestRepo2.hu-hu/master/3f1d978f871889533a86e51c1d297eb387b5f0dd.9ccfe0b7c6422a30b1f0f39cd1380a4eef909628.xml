{"nodes":[{"pos":[1662,1860],"content":"Specifies the values that resolve a <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> using the PNRP Namespace Provider API protocol.","needQuote":true,"needEscape":true,"source":"Specifies the values that resolve a <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to a <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> using the PNRP Namespace Provider API protocol."},{"pos":[1872,2117],"content":"A <xref:System.Net.PeerToPeer.PeerNameRecord> which contains all the information for the <xref:System.Net.PeerToPeer.PeerName> that was published in the <xref:System.Net.PeerToPeer.Cloud> or cloud(s) that were queried during the resolve process.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt; which contains all the information for the &lt;xref:System.Net.PeerToPeer.PeerName&gt; that was published in the &lt;xref:System.Net.PeerToPeer.Cloud&gt; or cloud(s) that were queried during the resolve process.","pos":[0,245],"source":"A <xref:System.Net.PeerToPeer.PeerNameRecord> which contains all the information for the <xref:System.Net.PeerToPeer.PeerName> that was published in the <xref:System.Net.PeerToPeer.Cloud> or cloud(s) that were queried during the resolve process."}]},{"pos":[2646,2754],"content":"Initializes a new default instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new default instance of the <xref href=\"System.Net.PeerToPeer.PeerNameResolver\"></xref> class."},{"pos":[2766,3118],"content":"After successfully resolving a <xref:System.Net.PeerToPeer.PeerName>, the <xref:System.Net.PeerToPeer.PeerNameRecord> contains all the information for the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> that was published in the cloud(s) that were queried during the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"After successfully resolving a &lt;xref:System.Net.PeerToPeer.PeerName&gt;, the &lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt; contains all the information for the specified &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt; that was published in the cloud(s) that were queried during the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; operation.","pos":[0,352],"source":"After successfully resolving a <xref:System.Net.PeerToPeer.PeerName>, the <xref:System.Net.PeerToPeer.PeerNameRecord> contains all the information for the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> that was published in the cloud(s) that were queried during the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation."}]},{"pos":[3864,3996],"content":"Returns peer resolution data after the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised.","needQuote":true,"needEscape":true,"source":"Returns peer resolution data after the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event is raised."},{"pos":[4009,4319],"content":"This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.       Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event is raised by the peer resolver object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.       Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event is raised by the peer resolver object.","pos":[0,308],"nodes":[{"content":"This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.","pos":[0,118]},{"content":"Derived types can override this method to perform additional tasks when the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event is raised by the peer resolver object.","pos":[125,308],"source":"       Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event is raised by the peer resolver object."}]}]},{"pos":[4538,4740],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the data returned by the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"></xref> object that contains the data returned by the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event."},{"pos":[5489,5635],"content":"Returns peer resolution progress data when the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised.","needQuote":true,"needEscape":true,"source":"Returns peer resolution progress data when the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\"></xref> event is raised."},{"pos":[5648,5942],"content":"This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.       Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event occurs.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.       Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event occurs.","pos":[0,292],"nodes":[{"content":"This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.","pos":[0,127]},{"content":"Derived types can override this method to perform additional tasks when the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt; event occurs.","pos":[134,292],"source":"       Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event occurs."}]}]},{"pos":[6179,6422],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.ResolveProgressChangedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains peer name resolution progress information returned by the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.PeerToPeer.ResolveProgressChangedEventArgs\"></xref> object that contains peer name resolution progress information returned by the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\"></xref> event."},{"pos":[6977,7092],"content":"Resolves the specified <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in all clouds known to the calling peer.","needQuote":true,"needEscape":true,"source":"Resolves the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in all clouds known to the calling peer."},{"pos":[7105,8497],"content":"This method associates a peer name to clouds. All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>. If the peer name cannot be resolved or is `null`, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.       Calling the <xref:System.Net.PeerToPeer.PeerNameResolver> method is similar to calling the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method for each peer name record in the <xref:System.Net.PeerToPeer.PeerNameRecordCollection>. Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.       If the <xref:System.Net.PeerToPeer.Cloud> parameter is not supplied, the method uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in cloud parameters.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method associates a peer name to clouds.","pos":[0,45]},{"content":"All clouds are queried for the &lt;xref:System.Net.PeerToPeer.PeerName&gt;.","pos":[46,115],"source":" All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>."},{"content":"If the peer name cannot be resolved or is <ph id=\"ph1\">`null`</ph>, an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[116,228],"source":" If the peer name cannot be resolved or is `null`, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[235,376]},{"content":"Calling the &lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt; method is similar to calling the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method for each peer name record in the &lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;.","pos":[383,625],"source":"       Calling the <xref:System.Net.PeerToPeer.PeerNameResolver> method is similar to calling the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method for each peer name record in the <xref:System.Net.PeerToPeer.PeerNameRecordCollection>."},{"content":"Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.","pos":[626,745]},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method.","pos":[752,919],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.","pos":[921,1050]},{"content":"If the &lt;xref:System.Net.PeerToPeer.Cloud&gt; parameter is not supplied, the method uses the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; shortcut to fill in cloud parameters.","pos":[1057,1228],"source":"       If the <xref:System.Net.PeerToPeer.Cloud> parameter is not supplied, the method uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in cloud parameters."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[1235,1382],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[8992,9059],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[9150,9606],"content":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> that contains all peer name records (represented as <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects) associated with the specified peer name. For unsecured peer names, the same <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> can be registered by different users in the same <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, and associated with different endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains all peer name records (represented as <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects) associated with the specified peer name.","pos":[0,229],"source":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> that contains all peer name records (represented as <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects) associated with the specified peer name."},{"content":"For unsecured peer names, the same <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can be registered by different users in the same <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and associated with different endpoints.","pos":[230,456],"source":" For unsecured peer names, the same <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> can be registered by different users in the same <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, and associated with different endpoints."}]},{"pos":[9783,9890],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10019,10062],"content":"The peer name specified cannot be resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The peer name specified cannot be resolved.","pos":[0,43]}]},{"pos":[10567,10754],"content":"Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects."},{"pos":[10767,11661],"content":"This method associates a peer name to clouds. All clouds are queried for the peer name. For unsecured peer names, the same peer name can be registered by different users in the same <xref:System.Net.PeerToPeer.Cloud>, and associated with different endpoints. If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (for example, the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method associates a peer name to clouds. All clouds are queried for the peer name. For unsecured peer names, the same peer name can be registered by different users in the same <xref:System.Net.PeerToPeer.Cloud>, and associated with different endpoints. If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (for example, the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","pos":[0,890],"nodes":[{"content":"This method associates a peer name to clouds.","pos":[0,45]},{"content":"All clouds are queried for the peer name.","pos":[46,87]},{"content":"For unsecured peer names, the same peer name can be registered by different users in the same &lt;xref:System.Net.PeerToPeer.Cloud&gt;, and associated with different endpoints.","pos":[88,258],"source":" For unsecured peer names, the same peer name can be registered by different users in the same <xref:System.Net.PeerToPeer.Cloud>, and associated with different endpoints."},{"content":"If the &lt;xref:System.Net.PeerToPeer.PeerName&gt; cannot be resolved (for example, the peer name is not published) an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[259,431],"source":" If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (for example, the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method.","pos":[438,605],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.","pos":[607,736]},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[743,890],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]}]},{"pos":[11904,11971],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[12037,12229],"content":"The maximum number of <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to obtain from all <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects for the supplied <ph id=\"ph1\">`peerName`</ph>.","needQuote":true,"needEscape":true,"source":"The maximum number of <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects to obtain from all <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> objects for the supplied `peerName`."},{"pos":[12320,12592],"content":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> whose size is less than or equal to <code>maxRecords</code> entries. This collection contains peer name records associated with the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that was resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose size is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p2\">&lt;/code&gt;</ept> entries.","pos":[0,138],"source":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> whose size is less than or equal to <code>maxRecords</code> entries."},{"content":"This collection contains peer name records associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that was resolved.","pos":[139,272],"source":" This collection contains peer name records associated with the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that was resolved."}]},{"pos":[12769,12876],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12991,13059],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>maxRecords</code> parameter is less than or equal to zero."},{"pos":[13188,13230],"content":"The supplied peer name cannot be resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The supplied peer name cannot be resolved.","pos":[0,42]}]},{"pos":[13765,13908],"content":"Resolves the specified &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*&gt; in the specified <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Resolves the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"pos":[13921,15038],"content":"If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (i.e., the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the <xref:System.Net.PeerToPeer.PeerNameResolver> uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the &lt;xref:System.Net.PeerToPeer.PeerName&gt; cannot be resolved (i.e., the peer name is not published) an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[0,165],"source":"If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (i.e., the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[172,313]},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method.","pos":[320,487],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.","pos":[489,618]},{"content":"If the &lt;xref:System.Net.PeerToPeer.Cloud&gt; parameter is <ph id=\"ph1\">`null`</ph>, the &lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt; uses the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; shortcut to fill in the &lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;, &lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;, and &lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;.","pos":[625,955],"source":"       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the <xref:System.Net.PeerToPeer.PeerNameResolver> uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[962,1109],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[15300,15367],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[15443,15530],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to resolve the peer name.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to resolve the peer name."},{"pos":[15621,16075],"content":"<xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> that contains all peer name records (represented as <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects) associated with the specified peer name. For unsecured peer names, the same <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> can be registered by different users in the same <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, and associated with different endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains all peer name records (represented as <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects) associated with the specified peer name.","pos":[0,227],"source":"<xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> that contains all peer name records (represented as <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects) associated with the specified peer name."},{"content":"For unsecured peer names, the same <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can be registered by different users in the same <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and associated with different endpoints.","pos":[228,454],"source":" For unsecured peer names, the same <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> can be registered by different users in the same <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, and associated with different endpoints."}]},{"pos":[16252,16359],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16488,16530],"content":"The supplied peer name cannot be resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The supplied peer name cannot be resolved.","pos":[0,42]}]},{"pos":[17109,17366],"content":"Resolves the specified &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*&gt; in the specified <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, returning no more than the specified number of <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Resolves the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, returning no more than the specified number of <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects."},{"pos":[17379,18422],"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud. If the peer name cannot be resolved, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the <xref:System.Net.PeerToPeer.PeerNameResolver> uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[0,141]},{"content":"If the peer name cannot be resolved, an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[142,241],"source":" If the peer name cannot be resolved, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method.","pos":[248,415],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.","pos":[417,546]},{"content":"If the &lt;xref:System.Net.PeerToPeer.Cloud&gt; parameter is <ph id=\"ph1\">`null`</ph>, the &lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt; uses the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; shortcut to fill in the &lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;, &lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;, and &lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;.","pos":[553,883],"source":"       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the <xref:System.Net.PeerToPeer.PeerNameResolver> uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[890,1037],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[18700,18767],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[18843,18931],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to resolve the <ph id=\"ph1\">`peerName`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to resolve the `peerName`."},{"pos":[18997,19108],"content":"The maximum number of peer name record objects to obtain from the specified cloud for the specified <ph id=\"ph1\">`peerName`</ph>.","needQuote":true,"needEscape":true,"source":"The maximum number of peer name record objects to obtain from the specified cloud for the specified `peerName`."},{"pos":[19199,19471],"content":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> whose size is less than or equal to <code>maxRecords</code> entries. This collection contains peer name records associated with the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that was resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose size is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p2\">&lt;/code&gt;</ept> entries.","pos":[0,138],"source":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> whose size is less than or equal to <code>maxRecords</code> entries."},{"content":"This collection contains peer name records associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that was resolved.","pos":[139,272],"source":" This collection contains peer name records associated with the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that was resolved."}]},{"pos":[19648,19755],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19870,19938],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>maxRecords</code> parameter is less than or equal to zero."},{"pos":[20067,20109],"content":"The supplied peer name cannot be resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The supplied peer name cannot be resolved.","pos":[0,42]}]},{"pos":[20644,20810],"content":"Begins an asynchronous peer name resolution operation for the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in all clouds known to the calling peer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous peer name resolution operation for the specified &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*&gt; in all clouds known to the calling peer.","pos":[0,166],"source":"Begins an asynchronous peer name resolution operation for the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in all clouds known to the calling peer."}]},{"pos":[20823,22783],"content":"This method asynchronously associates a peer name to clouds. All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>. It raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.       If the peer name cannot be resolved, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.       Calling the <xref:System.Net.PeerToPeer.PeerNameResolver> method is similar to calling the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method for each peer name record in the <xref:System.Net.PeerToPeer.PeerNameRecordCollection>. Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.       All asynchronous references to the resolver object are coordinated with a unique identifier token. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method asynchronously associates a peer name to clouds.","pos":[0,60]},{"content":"All clouds are queried for the &lt;xref:System.Net.PeerToPeer.PeerName&gt;.","pos":[61,130],"source":" All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>."},{"content":"It raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt; method.","pos":[131,314],"source":" It raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method."},{"content":"Or, it raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt; method.","pos":[315,514],"source":" Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method."},{"content":"If the peer name cannot be resolved, an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[521,620],"source":"       If the peer name cannot be resolved, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[627,768]},{"content":"Calling the &lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt; method is similar to calling the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method for each peer name record in the &lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;.","pos":[775,1022],"source":"       Calling the <xref:System.Net.PeerToPeer.PeerNameResolver> method is similar to calling the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method for each peer name record in the <xref:System.Net.PeerToPeer.PeerNameRecordCollection>."},{"content":"Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.","pos":[1023,1142]},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method.","pos":[1149,1316],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.","pos":[1318,1510]},{"content":"All asynchronous references to the resolver object are coordinated with a unique identifier token.","pos":[1517,1615]},{"content":"This <ph id=\"ph1\">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.","pos":[1616,1794],"source":" This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[1801,1948],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[22991,23058],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[23124,23219],"content":"A user-defined object that contains state information about the peer name resolution operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains state information about the peer name resolution operation.","pos":[0,95]}]},{"pos":[23401,23552],"content":"One or both of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">userState</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters are set to <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[24131,24369],"content":"Begins an asynchronous peer name resolution operation for the specified <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in all clouds known to the calling peer, returning no more than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p2\">&lt;/code&gt;</ept> entries for the peer name.","needQuote":true,"needEscape":true,"source":"Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in all clouds known to the calling peer, returning no more than <code>maxRecords</code> entries for the peer name."},{"pos":[24382,26001],"content":"This method asynchronously associates a peer name to clouds. All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>. For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud. If the peer name cannot be resolved or is `null`, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.       All asynchronous references to the resolver object are coordinated with a unique identifier token <xref:System.Object>. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method asynchronously associates a peer name to clouds.","pos":[0,60]},{"content":"All clouds are queried for the &lt;xref:System.Net.PeerToPeer.PeerName&gt;.","pos":[61,130],"source":" All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>."},{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[131,272]},{"content":"If the peer name cannot be resolved or is <ph id=\"ph1\">`null`</ph>, an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[273,385],"source":" If the peer name cannot be resolved or is `null`, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"This method raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt; method.","pos":[392,584],"source":"       This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method."},{"content":"Or, it raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt; method.","pos":[585,784],"source":" Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method."},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method.","pos":[791,958],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.","pos":[960,1152]},{"content":"All asynchronous references to the resolver object are coordinated with a unique identifier token &lt;xref:System.Object&gt;.","pos":[1159,1278],"source":"       All asynchronous references to the resolver object are coordinated with a unique identifier token <xref:System.Object>."},{"content":"This <ph id=\"ph1\">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.","pos":[1279,1457],"source":" This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[1464,1611],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[26225,26292],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[26358,26416],"content":"The maximum number of records to obtain for the Peer Name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of records to obtain for the Peer Name.","pos":[0,58]}]},{"pos":[26482,26558],"content":"A user-defined object that contains information about the resolve operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the resolve operation.","pos":[0,76]}]},{"pos":[26740,26891],"content":"One or both of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">userState</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters are set to <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27006,27074],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>maxRecords</code> parameter is less than or equal to zero."},{"pos":[27683,27873],"content":"Begins an asynchronous peer name resolution operation for the specified <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"pos":[27886,29589],"content":"This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.       For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the name is resolved using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> properties.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.       All asynchronous references to the resolver object are coordinated with a unique identifier token. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt; method.","pos":[0,192],"source":"This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method."},{"content":"Or, it raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt; method.","pos":[193,392],"source":" Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method."},{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[399,540]},{"content":"If the &lt;xref:System.Net.PeerToPeer.Cloud&gt; parameter is <ph id=\"ph1\">`null`</ph>, the name is resolved using the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; shortcut, which initializes default values for the &lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;, &lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;, and &lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt; properties.","pos":[547,887],"source":"       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the name is resolved using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> properties."},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method.","pos":[894,1061],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.","pos":[1063,1255]},{"content":"All asynchronous references to the resolver object are coordinated with a unique identifier token.","pos":[1262,1360]},{"content":"This <ph id=\"ph1\">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.","pos":[1361,1539],"source":" This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[1546,1693],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[29832,29899],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to resolve.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve."},{"pos":[29975,30063],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to resolve the <ph id=\"ph1\">`peerName`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to resolve the `peerName`."},{"pos":[30129,30232],"content":"A user-defined <xref:System.Object> that contains information about the peer name resolution operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined &lt;xref:System.Object&gt; that contains information about the peer name resolution operation.","pos":[0,103],"source":"A user-defined <xref:System.Object> that contains information about the peer name resolution operation."}]},{"pos":[30414,30565],"content":"One or both of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">userState</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters are set to <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[31218,31521],"content":"Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>.  The resolution operation will resolve no more than <code>maxRecords</code> entries for the specified peer name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous peer name resolution operation for the specified <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,190],"source":"Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"content":"The resolution operation will resolve no more than <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> entries for the specified peer name.","pos":[192,303],"source":"  The resolution operation will resolve no more than <code>maxRecords</code> entries for the specified peer name."}]},{"pos":[31534,33263],"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.       This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the name is resolved using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> properties.       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.       All asynchronous references to the peer resolver object are coordinated with a unique identifier token <xref:System.Object>. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.","pos":[0,141]},{"content":"This method raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt; method.","pos":[148,340],"source":"       This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method."},{"content":"Or, it raises the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt; event, which calls back to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt; method.","pos":[341,540],"source":" Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method."},{"content":"If the &lt;xref:System.Net.PeerToPeer.Cloud&gt; parameter is <ph id=\"ph1\">`null`</ph>, the name is resolved using the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; shortcut, which initializes default values for the &lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;, &lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;, and &lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt; properties.","pos":[547,887],"source":"       If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the name is resolved using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> properties."},{"content":"For every &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt; method, there is an equivalent &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; method.","pos":[894,1061],"source":"       For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method."},{"content":"Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.","pos":[1063,1255]},{"content":"All asynchronous references to the peer resolver object are coordinated with a unique identifier token &lt;xref:System.Object&gt;.","pos":[1262,1386],"source":"       All asynchronous references to the peer resolver object are coordinated with a unique identifier token <xref:System.Object>."},{"content":"This <ph id=\"ph1\">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.","pos":[1387,1565],"source":" This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event will be raised if the resolve operation completes in error or is canceled.","pos":[1572,1719],"source":"       The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled."}]},{"pos":[33522,33548],"content":"The <ph id=\"ph1\">`peerName`</ph> to resolve.","needQuote":true,"needEscape":true,"source":"The `peerName` to resolve."},{"pos":[33624,33667],"content":"The <ph id=\"ph1\">`cloud`</ph> in which to resolve <ph id=\"ph2\">`peerName`</ph>.","needQuote":true,"needEscape":true,"source":"The `cloud` in which to resolve `peerName`."},{"pos":[33733,33801],"content":"The maximum number of records to obtain from <ph id=\"ph1\">`cloud`</ph> for <ph id=\"ph2\">`peerName`</ph>.","needQuote":true,"needEscape":true,"source":"The maximum number of records to obtain from `cloud` for `peerName`."},{"pos":[33867,33956],"content":"A user-defined object that contains information about the peer name resolution operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the peer name resolution operation.","pos":[0,89]}]},{"pos":[34138,34289],"content":"One or both of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">peerName</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">userState</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters are set to <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[34384,34428],"content":"One or more supplied parameters are invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"One or more supplied parameters are invalid.","pos":[0,44]}]},{"pos":[34557,34633],"content":"Successful completion of this operation requires at least one event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Successful completion of this operation requires at least one event handler.","pos":[0,76]}]},{"pos":[34748,34816],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>maxRecords</code> parameter is less than or equal to zero."},{"pos":[35292,35356],"content":"Cancels the specified asynchronous peer name resolution request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the specified asynchronous peer name resolution request.","pos":[0,64]}]},{"pos":[35369,36367],"content":"Calling this method guarantees the system will not attempt to obtain additional records for the specified <xref:System.Net.PeerToPeer.PeerName>.  If this method is called when an asynchronous peer name resolution operation is not outstanding, it acts as a \"no operation\" (NO OP).       The `userState` object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress. This caller-supplied object is unique for each peer name resolution request.       This method will return immediately, but the operation may or may not immediately cancel. The event arguments returned by the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event contains a field which can be polled by clients to determine whether cancellation occurred.       Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> set to `true`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method guarantees the system will not attempt to obtain additional records for the specified &lt;xref:System.Net.PeerToPeer.PeerName&gt;.","pos":[0,144],"source":"Calling this method guarantees the system will not attempt to obtain additional records for the specified <xref:System.Net.PeerToPeer.PeerName>."},{"content":"If this method is called when an asynchronous peer name resolution operation is not outstanding, it acts as a \"no operation\" (NO OP).","pos":[146,279]},{"content":"The <ph id=\"ph1\">`userState`</ph> object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress.","pos":[286,417],"source":"       The `userState` object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress."},{"content":"This caller-supplied object is unique for each peer name resolution request.","pos":[418,494]},{"content":"This method will return immediately, but the operation may or may not immediately cancel.","pos":[501,590]},{"content":"The event arguments returned by the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt; event contains a field which can be polled by clients to determine whether cancellation occurred.","pos":[591,787],"source":" The event arguments returned by the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event contains a field which can be polled by clients to determine whether cancellation occurred."},{"content":"Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt; set to <ph id=\"ph1\">`true`</ph>.","pos":[794,990],"source":"       Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> set to `true`."}]},{"pos":[36524,36663],"content":"The object provided to the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*> method instance which started the resolve operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object provided to the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*&gt; method instance which started the resolve operation.","pos":[0,139],"source":"The object provided to the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*> method instance which started the resolve operation."}]},{"pos":[36851,36960],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">userState</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameters cannot be <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>userState</code> parameters cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[37371,37535],"content":"The ResolveCompleted event is signaled when a peer name resolution request for a specific <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ResolveCompleted event is signaled when a peer name resolution request for a specific &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; has completed.","pos":[0,164],"source":"The ResolveCompleted event is signaled when a peer name resolution request for a specific <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> has completed."}]},{"pos":[37548,37895],"content":"The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.       This event will also be raised if the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation completes in error or is canceled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.       This event will also be raised if the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation completes in error or is canceled.","pos":[0,345],"nodes":[{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt; event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.","pos":[0,199],"source":"The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found."},{"content":"This event will also be raised if the &lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt; operation completes in error or is canceled.","pos":[206,345],"source":"       This event will also be raised if the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation completes in error or is canceled."}]}]},{"pos":[38125,38137],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38595,38857],"content":"This event is signaled whenever a <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is found in response to a &lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*&gt; operation for a specific <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This event is signaled whenever a <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> object is found in response to a <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*> operation for a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref>."},{"pos":[38869,39051],"content":"If multiple <xref:System.Net.PeerToPeer.PeerName> objects exist in the cloud(s) being queried, this event is signaled once for each <xref:System.Net.PeerToPeer.PeerNameRecord> found.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If multiple &lt;xref:System.Net.PeerToPeer.PeerName&gt; objects exist in the cloud(s) being queried, this event is signaled once for each &lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt; found.","pos":[0,182],"source":"If multiple <xref:System.Net.PeerToPeer.PeerName> objects exist in the cloud(s) being queried, this event is signaled once for each <xref:System.Net.PeerToPeer.PeerNameRecord> found."}]},{"pos":[39298,39310],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.PeerToPeer.PeerNameResolver\n  id: PeerNameResolver\n  children:\n  - System.Net.PeerToPeer.PeerNameResolver.#ctor\n  - System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)\n  - System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)\n  - System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)\n  - System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)\n  - System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)\n  - System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\n  - System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\n  langs:\n  - csharp\n  name: PeerNameResolver\n  nameWithType: PeerNameResolver\n  fullName: System.Net.PeerToPeer.PeerNameResolver\n  type: Class\n  summary: Specifies the values that resolve a <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to a <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> using the PNRP Namespace Provider API protocol.\n  remarks: A <xref:System.Net.PeerToPeer.PeerNameRecord> which contains all the information for the <xref:System.Net.PeerToPeer.PeerName> that was published in the <xref:System.Net.PeerToPeer.Cloud> or cloud(s) that were queried during the resolve process.\n  syntax:\n    content: public class PeerNameResolver\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.#ctor\n  id: '#ctor'\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: PeerNameResolver()\n  nameWithType: PeerNameResolver.PeerNameResolver()\n  fullName: System.Net.PeerToPeer.PeerNameResolver.PeerNameResolver()\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new default instance of the <xref href=\"System.Net.PeerToPeer.PeerNameResolver\"></xref> class.\n  remarks: After successfully resolving a <xref:System.Net.PeerToPeer.PeerName>, the <xref:System.Net.PeerToPeer.PeerNameRecord> contains all the information for the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> that was published in the cloud(s) that were queried during the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation.\n  syntax:\n    content: public PeerNameResolver ();\n    parameters: []\n  overload: System.Net.PeerToPeer.PeerNameResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)\n  id: OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: OnResolveCompleted(ResolveCompletedEventArgs)\n  nameWithType: PeerNameResolver.OnResolveCompleted(ResolveCompletedEventArgs)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(ResolveCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Returns peer resolution data after the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event is raised.\n  remarks: \"This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.  \\n  \\n Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event is raised by the peer resolver object.\"\n  syntax:\n    content: protected void OnResolveCompleted (System.Net.PeerToPeer.ResolveCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.PeerToPeer.ResolveCompletedEventArgs\n      description: The <xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"></xref> object that contains the data returned by the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event.\n  overload: System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)\n  id: OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: OnResolveProgressChanged(ResolveProgressChangedEventArgs)\n  nameWithType: PeerNameResolver.OnResolveProgressChanged(ResolveProgressChangedEventArgs)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(ResolveProgressChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Returns peer resolution progress data when the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\"></xref> event is raised.\n  remarks: \"This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.  \\n  \\n Derived types can override this method to perform additional tasks when the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event occurs.\"\n  syntax:\n    content: protected void OnResolveProgressChanged (System.Net.PeerToPeer.ResolveProgressChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.PeerToPeer.ResolveProgressChangedEventArgs\n      description: <xref href=\"System.Net.PeerToPeer.ResolveProgressChangedEventArgs\"></xref> object that contains peer name resolution progress information returned by the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\"></xref> event.\n  overload: System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)\n  id: Resolve(System.Net.PeerToPeer.PeerName)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: Resolve(PeerName)\n  nameWithType: PeerNameResolver.Resolve(PeerName)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Resolves the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in all clouds known to the calling peer.\n  remarks: \"This method associates a peer name to clouds. All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>. If the peer name cannot be resolved or is `null`, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.  \\n  \\n Calling the <xref:System.Net.PeerToPeer.PeerNameResolver> method is similar to calling the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method for each peer name record in the <xref:System.Net.PeerToPeer.PeerNameRecordCollection>. Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.  \\n  \\n If the <xref:System.Net.PeerToPeer.Cloud> parameter is not supplied, the method uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in cloud parameters.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  example:\n  - \"The following code example illustrates how to resolve a <xref:System.Net.PeerToPeer.PeerName> published in any <xref:System.Net.PeerToPeer.Cloud>.  \\n  \\n [!code-cs[NCLPNRPPeerNameResolver#1](~/add/codesnippet/csharp/m-system.net.peertopeer._2_1.cs)]\"\n  syntax:\n    content: public System.Net.PeerToPeer.PeerNameRecordCollection Resolve (System.Net.PeerToPeer.PeerName peerName);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    return:\n      type: System.Net.PeerToPeer.PeerNameRecordCollection\n      description: A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> that contains all peer name records (represented as <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects) associated with the specified peer name. For unsecured peer names, the same <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> can be registered by different users in the same <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, and associated with different endpoints.\n  overload: System.Net.PeerToPeer.PeerNameResolver.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: The peer name specified cannot be resolved.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)\n  id: Resolve(System.Net.PeerToPeer.PeerName,System.Int32)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: Resolve(PeerName,Int32)\n  nameWithType: PeerNameResolver.Resolve(PeerName,Int32)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName,Int32)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects.\n  remarks: \"This method associates a peer name to clouds. All clouds are queried for the peer name. For unsecured peer names, the same peer name can be registered by different users in the same <xref:System.Net.PeerToPeer.Cloud>, and associated with different endpoints. If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (for example, the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public System.Net.PeerToPeer.PeerNameRecordCollection Resolve (System.Net.PeerToPeer.PeerName peerName, int maxRecords);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects to obtain from all <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> objects for the supplied `peerName`.\n    return:\n      type: System.Net.PeerToPeer.PeerNameRecordCollection\n      description: A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> whose size is less than or equal to <code>maxRecords</code> entries. This collection contains peer name records associated with the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that was resolved.\n  overload: System.Net.PeerToPeer.PeerNameResolver.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>maxRecords</code> parameter is less than or equal to zero.\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: The supplied peer name cannot be resolved.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)\n  id: Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: Resolve(PeerName,Cloud)\n  nameWithType: PeerNameResolver.Resolve(PeerName,Cloud)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName,Cloud)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Resolves the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>.\n  remarks: \"If the <xref:System.Net.PeerToPeer.PeerName> cannot be resolved (i.e., the peer name is not published) an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.  \\n  \\n If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the <xref:System.Net.PeerToPeer.PeerNameResolver> uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public System.Net.PeerToPeer.PeerNameRecordCollection Resolve (System.Net.PeerToPeer.PeerName peerName, System.Net.PeerToPeer.Cloud cloud);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    - id: cloud\n      type: System.Net.PeerToPeer.Cloud\n      description: The <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to resolve the peer name.\n    return:\n      type: System.Net.PeerToPeer.PeerNameRecordCollection\n      description: <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> that contains all peer name records (represented as <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects) associated with the specified peer name. For unsecured peer names, the same <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> can be registered by different users in the same <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, and associated with different endpoints.\n  overload: System.Net.PeerToPeer.PeerNameResolver.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: The supplied peer name cannot be resolved.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)\n  id: Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: Resolve(PeerName,Cloud,Int32)\n  nameWithType: PeerNameResolver.Resolve(PeerName,Cloud,Int32)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName,Cloud,Int32)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Resolves the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>, returning no more than the specified number of <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> objects.\n  remarks: \"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud. If the peer name cannot be resolved, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.  \\n  \\n If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the <xref:System.Net.PeerToPeer.PeerNameResolver> uses the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut to fill in the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public System.Net.PeerToPeer.PeerNameRecordCollection Resolve (System.Net.PeerToPeer.PeerName peerName, System.Net.PeerToPeer.Cloud cloud, int maxRecords);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    - id: cloud\n      type: System.Net.PeerToPeer.Cloud\n      description: The <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to resolve the `peerName`.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of peer name record objects to obtain from the specified cloud for the specified `peerName`.\n    return:\n      type: System.Net.PeerToPeer.PeerNameRecordCollection\n      description: A <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> whose size is less than or equal to <code>maxRecords</code> entries. This collection contains peer name records associated with the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that was resolved.\n  overload: System.Net.PeerToPeer.PeerNameResolver.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>peerName</code> parameter is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>maxRecords</code> parameter is less than or equal to zero.\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: The supplied peer name cannot be resolved.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)\n  id: ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveAsync(PeerName,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Object)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Begins an asynchronous peer name resolution operation for the specified <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> in all clouds known to the calling peer.\n  remarks: \"This method asynchronously associates a peer name to clouds. All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>. It raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.  \\n  \\n If the peer name cannot be resolved, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.  \\n  \\n Calling the <xref:System.Net.PeerToPeer.PeerNameResolver> method is similar to calling the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method for each peer name record in the <xref:System.Net.PeerToPeer.PeerNameRecordCollection>. Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.  \\n  \\n All asynchronous references to the resolver object are coordinated with a unique identifier token. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public void ResolveAsync (System.Net.PeerToPeer.PeerName peerName, object userState);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    - id: userState\n      type: System.Object\n      description: A user-defined object that contains state information about the peer name resolution operation.\n  overload: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)\n  id: ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveAsync(PeerName,Int32,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Int32,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Int32,Object)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in all clouds known to the calling peer, returning no more than <code>maxRecords</code> entries for the peer name.\n  remarks: \"This method asynchronously associates a peer name to clouds. All clouds are queried for the <xref:System.Net.PeerToPeer.PeerName>. For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud. If the peer name cannot be resolved or is `null`, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.  \\n  \\n All asynchronous references to the resolver object are coordinated with a unique identifier token <xref:System.Object>. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public void ResolveAsync (System.Net.PeerToPeer.PeerName peerName, int maxRecords, object userState);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of records to obtain for the Peer Name.\n    - id: userState\n      type: System.Object\n      description: A user-defined object that contains information about the resolve operation.\n  overload: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>maxRecords</code> parameter is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)\n  id: ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveAsync(PeerName,Cloud,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Cloud,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Cloud,Object)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>.\n  remarks: \"This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.  \\n  \\n For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.  \\n  \\n If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the name is resolved using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> properties.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.  \\n  \\n All asynchronous references to the resolver object are coordinated with a unique identifier token. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public void ResolveAsync (System.Net.PeerToPeer.PeerName peerName, System.Net.PeerToPeer.Cloud cloud, object userState);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to resolve.\n    - id: cloud\n      type: System.Net.PeerToPeer.Cloud\n      description: The <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to resolve the `peerName`.\n    - id: userState\n      type: System.Object\n      description: A user-defined <xref:System.Object> that contains information about the peer name resolution operation.\n  overload: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)\n  id: ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveAsync(PeerName,Cloud,Int32,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Cloud,Int32,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Cloud,Int32,Object)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Begins an asynchronous peer name resolution operation for the specified <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> in the specified <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>.  The resolution operation will resolve no more than <code>maxRecords</code> entries for the specified peer name.\n  remarks: \"For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.  \\n  \\n This method raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A> method. Or, it raises the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event, which calls back to the <xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A> method.  \\n  \\n If the <xref:System.Net.PeerToPeer.Cloud> parameter is `null`, the name is resolved using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> properties.  \\n  \\n For every <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method, there is an equivalent <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> method.  Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.  \\n  \\n All asynchronous references to the peer resolver object are coordinated with a unique identifier token <xref:System.Object>. This `userState` token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.  \\n  \\n The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event will be raised if the resolve operation completes in error or is canceled.\"\n  syntax:\n    content: public void ResolveAsync (System.Net.PeerToPeer.PeerName peerName, System.Net.PeerToPeer.Cloud cloud, int maxRecords, object userState);\n    parameters:\n    - id: peerName\n      type: System.Net.PeerToPeer.PeerName\n      description: The `peerName` to resolve.\n    - id: cloud\n      type: System.Net.PeerToPeer.Cloud\n      description: The `cloud` in which to resolve `peerName`.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of records to obtain from `cloud` for `peerName`.\n    - id: userState\n      type: System.Object\n      description: A user-defined object that contains information about the peer name resolution operation.\n  overload: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or both of the <code>peerName</code> and <code>userState</code> parameters are set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more supplied parameters are invalid.\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: Successful completion of this operation requires at least one event handler.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>maxRecords</code> parameter is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)\n  id: ResolveAsyncCancel(System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveAsyncCancel(Object)\n  nameWithType: PeerNameResolver.ResolveAsyncCancel(Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(Object)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Cancels the specified asynchronous peer name resolution request.\n  remarks: \"Calling this method guarantees the system will not attempt to obtain additional records for the specified <xref:System.Net.PeerToPeer.PeerName>.  If this method is called when an asynchronous peer name resolution operation is not outstanding, it acts as a \\\"no operation\\\" (NO OP).  \\n  \\n The `userState` object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress. This caller-supplied object is unique for each peer name resolution request.  \\n  \\n This method will return immediately, but the operation may or may not immediately cancel. The event arguments returned by the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted> event contains a field which can be polled by clients to determine whether cancellation occurred.  \\n  \\n Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> set to `true`.\"\n  syntax:\n    content: public void ResolveAsyncCancel (object userState);\n    parameters:\n    - id: userState\n      type: System.Object\n      description: The object provided to the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*> method instance which started the resolve operation.\n  overload: System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>userState</code> parameters cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\n  id: ResolveCompleted\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveCompleted\n  nameWithType: PeerNameResolver.ResolveCompleted\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\n  type: Event\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: The ResolveCompleted event is signaled when a peer name resolution request for a specific <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> has completed.\n  remarks: \"The <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.  \\n  \\n This event will also be raised if the <xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A> operation completes in error or is canceled.\"\n  syntax:\n    content: public event EventHandler<System.Net.PeerToPeer.ResolveCompletedEventArgs> ResolveCompleted;\n    return:\n      type: System.EventHandler{System.Net.PeerToPeer.ResolveCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\n  id: ResolveProgressChanged\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  langs:\n  - csharp\n  name: ResolveProgressChanged\n  nameWithType: PeerNameResolver.ResolveProgressChanged\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\n  type: Event\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: This event is signaled whenever a <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> object is found in response to a <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*> operation for a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref>.\n  remarks: If multiple <xref:System.Net.PeerToPeer.PeerName> objects exist in the cloud(s) being queried, this event is signaled once for each <xref:System.Net.PeerToPeer.PeerNameRecord> found.\n  syntax:\n    content: public event EventHandler<System.Net.PeerToPeer.ResolveProgressChangedEventArgs> ResolveProgressChanged;\n    return:\n      type: System.EventHandler{System.Net.PeerToPeer.ResolveProgressChangedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Net.PeerToPeer.PeerToPeerException\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: PeerToPeerException\n  nameWithType: PeerToPeerException\n  fullName: System.Net.PeerToPeer.PeerToPeerException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Net.PeerToPeer.PeerNameResolver.#ctor\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: PeerNameResolver()\n  nameWithType: PeerNameResolver.PeerNameResolver()\n  fullName: System.Net.PeerToPeer.PeerNameResolver.PeerNameResolver()\n- uid: System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: OnResolveCompleted(ResolveCompletedEventArgs)\n  nameWithType: PeerNameResolver.OnResolveCompleted(ResolveCompletedEventArgs)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(ResolveCompletedEventArgs)\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: ResolveCompletedEventArgs\n  nameWithType: ResolveCompletedEventArgs\n  fullName: System.Net.PeerToPeer.ResolveCompletedEventArgs\n- uid: System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: OnResolveProgressChanged(ResolveProgressChangedEventArgs)\n  nameWithType: PeerNameResolver.OnResolveProgressChanged(ResolveProgressChangedEventArgs)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(ResolveProgressChangedEventArgs)\n- uid: System.Net.PeerToPeer.ResolveProgressChangedEventArgs\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: ResolveProgressChangedEventArgs\n  nameWithType: ResolveProgressChangedEventArgs\n  fullName: System.Net.PeerToPeer.ResolveProgressChangedEventArgs\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: Resolve(PeerName)\n  nameWithType: PeerNameResolver.Resolve(PeerName)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName)\n- uid: System.Net.PeerToPeer.PeerNameRecordCollection\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: PeerNameRecordCollection\n  nameWithType: PeerNameRecordCollection\n  fullName: System.Net.PeerToPeer.PeerNameRecordCollection\n- uid: System.Net.PeerToPeer.PeerName\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: PeerName\n  nameWithType: PeerName\n  fullName: System.Net.PeerToPeer.PeerName\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: Resolve(PeerName,Int32)\n  nameWithType: PeerNameResolver.Resolve(PeerName,Int32)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: Resolve(PeerName,Cloud)\n  nameWithType: PeerNameResolver.Resolve(PeerName,Cloud)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName,Cloud)\n- uid: System.Net.PeerToPeer.Cloud\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: Cloud\n  nameWithType: Cloud\n  fullName: System.Net.PeerToPeer.Cloud\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: Resolve(PeerName,Cloud,Int32)\n  nameWithType: PeerNameResolver.Resolve(PeerName,Cloud,Int32)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.Resolve(PeerName,Cloud,Int32)\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsync(PeerName,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Object)\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsync(PeerName,Int32,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Int32,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Int32,Object)\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsync(PeerName,Cloud,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Cloud,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Cloud,Object)\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsync(PeerName,Cloud,Int32,Object)\n  nameWithType: PeerNameResolver.ResolveAsync(PeerName,Cloud,Int32,Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(PeerName,Cloud,Int32,Object)\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsyncCancel(Object)\n  nameWithType: PeerNameResolver.ResolveAsyncCancel(Object)\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(Object)\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveCompleted\n  nameWithType: PeerNameResolver.ResolveCompleted\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\n- uid: System.EventHandler{System.Net.PeerToPeer.ResolveCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<ResolveCompletedEventArgs>\n  nameWithType: EventHandler<ResolveCompletedEventArgs>\n  fullName: System.EventHandler<System.Net.PeerToPeer.ResolveCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Net.PeerToPeer.ResolveCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.PeerToPeer.ResolveCompletedEventArgs\n    name: ResolveCompletedEventArgs\n    nameWithType: ResolveCompletedEventArgs\n    fullName: ResolveCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveProgressChanged\n  nameWithType: PeerNameResolver.ResolveProgressChanged\n  fullName: System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged\n- uid: System.EventHandler{System.Net.PeerToPeer.ResolveProgressChangedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<ResolveProgressChangedEventArgs>\n  nameWithType: EventHandler<ResolveProgressChangedEventArgs>\n  fullName: System.EventHandler<System.Net.PeerToPeer.ResolveProgressChangedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Net.PeerToPeer.ResolveProgressChangedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.PeerToPeer.ResolveProgressChangedEventArgs\n    name: ResolveProgressChangedEventArgs\n    nameWithType: ResolveProgressChangedEventArgs\n    fullName: ResolveProgressChangedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.PeerToPeer.PeerNameResolver.#ctor*\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: PeerNameResolver\n  nameWithType: PeerNameResolver.PeerNameResolver\n- uid: System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted*\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: OnResolveCompleted\n  nameWithType: PeerNameResolver.OnResolveCompleted\n- uid: System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged*\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: OnResolveProgressChanged\n  nameWithType: PeerNameResolver.OnResolveProgressChanged\n- uid: System.Net.PeerToPeer.PeerNameResolver.Resolve*\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: Resolve\n  nameWithType: PeerNameResolver.Resolve\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsync\n  nameWithType: PeerNameResolver.ResolveAsync\n- uid: System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel*\n  parent: System.Net.PeerToPeer.PeerNameResolver\n  isExternal: false\n  name: ResolveAsyncCancel\n  nameWithType: PeerNameResolver.ResolveAsyncCancel\n"}